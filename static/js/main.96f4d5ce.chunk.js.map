{"version":3,"sources":["model/text/TextState.js","model/text/TextVM.js","model/text/TextVMUtil.js","model/input/InputView.js","util/apiUtil.js","model/main/entity/mass/MassType.js","model/main/entity/mass/item/MassItemField.js","util/generalUtil.js","model/main/entity/mass/table/MassColumn.js","model/text/TextView.js","model/main/single/model/CategoryData.js","model/main/single/model/CategoryDataUtil.js","model/main/entity/filter/FilterCategoryType.js","model/main/entity/filter/FilterValueType.js","model/main/entity/filter/StringFilterType.js","model/main/entity/filter/NumberFilterType.js","model/main/entity/filter/EntFilterUtil.js","model/main/entity/filter/EntFilter.js","model/main/entity/mass/table/rowgroup/MGI_I_CreateType.js","model/main/entity/mass/table/rowgroup/MGI_ItemUtil.js","model/main/entity/mass/table/rowgroup/MGI_Item.js","model/main/entity/mass/table/rowgroup/MassGroupItem.js","model/main/entity/mass/table/rowgroup/MassGroupComponent.js","model/main/entity/mass/table/rowgroup/MassGroupComponentUtil.js","model/main/entity/mass/table/rowgroup/MassGroupItemUtil.js","model/select/MultiSelectVMUtil.js","model/select/MultiSelectVM.js","model/select/MultiSelectView.js","model/hover/EntHoverVM.js","model/hover/EntHoverView.js","model/select/SelectVMUtil.js","model/select/SelectVM.js","model/float/FloatItemVM.js","model/float/FloatItemVMUtil.js","model/float/FloatItemView.js","model/select/SelectView.js","model/main/entity/mass/table/location/RRLF_LocationType.js","model/main/entity/mass/table/location/ReplaceRowLocationFactory.js","model/main/entity/mass/table/location/ReplaceRowLocationFactoryUtil.js","model/main/entity/mass/table/MassRow_Field_InputType.js","model/input/NewInputView.js","model/main/entity/mass/table/MassRow.js","model/main/entity/mass/table/MassRowUtil.js","model/main/entity/mass/table/MassCell.js","model/main/entity/mass/table/MassCellUtil.js","model/main/entity/mass/table/MassTableUtil.js","model/main/entity/setting/base/SettingType.js","model/main/entity/setting/base/Setting.js","model/main/entity/setting/massGroup/MassGroupSettingData.js","model/main/entity/mass/MassPropertyName.js","model/main/entity/setting/massGroup/MassGroupSettingDataUtil.js","model/main/entity/setting/massGroup/MassGroupSetting.js","model/main/entity/setting/massGroup/MassGroupSettingUtil.js","model/main/entity/workpackage/WorkpackageVM.js","model/main/entity/workpackage/WorkpackageVMUtil.js","model/checkbox/CheckboxVM.js","model/checkbox/CheckboxVMUtil.js","model/main/entity/workpackage/WorkpackageInputVM.js","model/main/entity/workpackage/WorkpackageInputVMUtil.js","model/main/entity/workpackage/Workpackage_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVM.js","model/main/entity/setting/base/SettingVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingVM.js","model/main/entity/filter/EntFilterVM.js","model/main/entity/filter/EntFilterVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingVMUtil.js","model/main/entity/setting/base/SettingVMUtil.js","model/main/entity/setting/base/SettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVM.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSetting.js","model/main/entity/setting/massExport/exportSetting/MES_ValueRetrieveType.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingDataVM.js","model/main/entity/setting/massExport/MassExportSettingDataVMUtil.js","model/main/entity/setting/massExport/MassExportSettingVM.js","model/main/entity/setting/massExport/MassExportSettingVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVMUtil.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVM.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVMUtil.js","model/main/entity/phase/PhaseVM.js","model/main/entity/phase/PhaseVMUtil.js","model/main/entity/state/StateType.js","model/main/entity/phase/Phase_DictVM.js","model/main/entity/phase/PhaseInputVM.js","model/main/entity/phase/Phase_DictVMUtil.js","model/main/entity/phase/PhaseInputVMUtil.js","model/main/entity/project/ProjectVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemStateType.js","model/checkbox/CheckboxView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVM.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue_InputType.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVMUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVMUtil.js","model/main/entity/project/ProjectVMUtil.js","model/main/entity/project/Project_DictVM.js","model/main/entity/project/Project_DictVMUtil.js","model/main/entity/mass/result/MassResultCompVM.js","model/main/entity/mass/result/MassResultCompVMUtil.js","model/table/RenderState.js","model/table/RenderItem.js","model/table/RenderItemUtil.js","model/table/Render_Dict.js","model/table/TableColumn.js","model/table/TableColumnUtil.js","model/table/TableRow.js","model/table/TableCell.js","model/table/TableRowUtil.js","model/table/TableCellUtil.js","model/table/TableVM.js","model/table/TableVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVM.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil.js","model/main/single/form/PMDataVMUtil.js","model/main/entity/project/ProjectViewType.js","model/main/single/form/PMDataVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingDataVM.js","model/main/entity/setting/massGroup/MassGroupSettingDataVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingVM.js","model/main/entity/setting/massGroup/MassGroupSettingVMUtil.js","model/export/csv/CSVExport.js","model/export/excel/ExcelExport.js","model/main/entity/mass/table/export/MT_Cell.js","model/main/entity/mass/table/export/MT_CellUtil.js","model/main/entity/mass/table/export/MT_Data_Row.js","model/main/entity/mass/table/export/MT_Cell_ValueType.js","model/main/entity/mass/table/export/MT_Data_RowUtil.js","model/main/entity/mass/table/export/MT_Data_Worksheet.js","model/main/entity/mass/table/export/MT_Data_WorksheetUtil.js","model/main/entity/mass/table/export/MT_RawData_Worksheet.js","model/main/entity/mass/table/export/MT_RawData_WorksheetUtil.js","model/main/entity/mass/table/export/MT_Workbook.js","model/main/entity/mass/table/export/MT_WorkbookUtil.js","model/main/entity/mass/table/MassTable.js","model/main/entity/mass/table/MassColumnUtil.js","model/export/excel/ExcelExportUtil.js","model/main/entity/mass/item/MassItem_Dict.js","model/main/entity/mass/item/MassItem.js","model/main/entity/mass/item/phaseValue/MIPh_Item.js","model/main/entity/mass/item/phaseValue/MIPh_ItemUtil.js","model/main/entity/mass/item/MassItemUtil.js","model/main/entity/mass/result/MassResultComp.js","model/main/entity/mass/result/MassResultCompUtil.js","model/main/entity/mass/rebar/RebarMass_DictUtil.js","model/main/entity/value/ValueUnit.js","model/main/entity/mass/rebar/RebarMass_Dict.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroup.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue.js","model/main/entity/setting/typicallevel/filter/TLS_Filter.js","model/main/entity/setting/typicallevel/filter/TLS_FilterUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItem.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingData.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSetting.js","model/main/entity/setting/typicallevel/TypicalLevelSettingUtil.js","model/main/entity/phase/Phase.js","model/main/entity/phase/PhaseUtil.js","model/main/entity/phase/Phase_Dict.js","model/main/entity/setting/base/SettingUtil.js","model/main/entity/phase/PhaseInput.js","model/main/entity/phase/Phase_DictUtil.js","model/main/entity/phase/PhaseInputUtil.js","model/main/entity/project/Project.js","model/main/entity/exportset/ExportSet.js","model/main/entity/exportset/ExportSetVersion.js","model/main/entity/exportset/ExportSetVersionUtil.js","model/main/entity/exportset/ExportSetUtil.js","model/main/entity/level/Level_Dict.js","model/main/entity/level/Level.js","model/main/entity/level/LevelUtil.js","model/main/entity/project/ProjectUtil.js","model/main/entity/value/ValueRetrieveFrom.js","model/main/entity/level/Level_DictUtil.js","model/main/entity/project/Project_Dict.js","model/main/entity/setting/elementFilter/ElementFilterSetting.js","model/main/entity/setting/elementFilter/ElementFilterSettingData.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingUtil.js","model/main/entity/setting/base/SettingInput.js","model/main/entity/setting/base/SettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInput.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_Dict.js","model/main/entity/setting/massExport/MassExportSettingData.js","model/main/entity/setting/massExport/MassExportSettingDataUtil.js","model/main/entity/setting/massExport/MassExportSetting.js","model/main/entity/setting/massExport/MassExportSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingInput.js","model/main/entity/setting/massExport/MassExportSettingInputUtil.js","model/main/entity/setting/massExport/MassExportSetting_Dict.js","model/main/entity/setting/massGroup/MassGroupSetting_Dict.js","model/main/entity/setting/versionCompare/VCS_Item.js","model/main/entity/setting/versionCompare/VersionCompareSetting.js","model/main/entity/setting/versionCompare/VersionCompareSettingUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_Dict.js","model/main/entity/tracking/TrackingItem.js","model/main/entity/tracking/Tracking.js","model/main/entity/workpackage/WorkpackageInput.js","model/main/entity/workpackage/Workpackage_Dict.js","model/main/single/model/PMDataUtil.js","model/main/single/model/PMData.js","model/main/entity/workpackage/Workpackage.js","model/main/entity/workpackage/WorkpackageUtil.js","model/main/entity/workpackage/Workpackage_DictVM.js","model/main/entity/workpackage/Workpackage_DictView.js","model/main/entity/filter/EntFilterView.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataView.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictView.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingView.js","model/main/entity/setting/massExport/MassExportSettingDataView.js","model/main/entity/setting/massExport/MassExportSetting_DictView.js","model/main/entity/mass/table/MassCellView.js","model/main/entity/mass/table/MassRowView.js","model/export/csv/CSVExportView.js","model/main/entity/mass/table/MassTableView.js","model/main/entity/mass/result/MassResultCompView.js","model/table/TableView.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictView.js","model/main/single/form/PMDataView.js","model/view/TestView.js","model/table/CellVM.js","model/table/ColumnVM.js","model/table/RowVM.js","model/main/entity/mass/detail/MassDetailTableUtil.js","model/main/entity/mass/detail/MassDetailTable.js","model/main/entity/mass/detail/MassDetailVM.js","model/main/entity/mass/detail/MassDetailTableView.js","model/main/entity/mass/detail/MassDetailView.js","model/main/entity/project/comp/ProjectCompVMUtil.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterView.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingView.js","model/main/entity/phase/Phase_DictView.js","model/main/entity/mass/rebar/RebarMass_DictView.js","model/main/entity/project/comp/ProjectCompVM.js","model/main/entity/level/Level_DictView.js","model/main/entity/nav/left/LeftNavVM.js","model/main/entity/nav/left/LeftNav.js","model/main/entity/nav/left/LeftNavItem.js","model/main/entity/nav/left/LeftNavItemUtil.js","model/main/entity/nav/left/LeftNavVMUtil.js","model/main/entity/nav/left/LeftNavUtil.js","model/main/entity/nav/left/LeftNavView.js","model/main/entity/project/comp/ProjectCompView.js","App.js","reportWebVitals.js","index.js"],"names":["text","password","TextVM","content","undefined","placeholder","State","ts","makeObservable","this","observable","v","onSetContent","style","inputStyle","wrapper","position","get","q","qI","InputView","props","onChange","e","value","target","state","Content","store","textVMUtil","data","Password","Component","observer","http","timeout","axios","create","baseURL","Accept","handleResponse","response","success","status","message","statusText","callApi","action","a","err","error","timeout_default","url","config","put","payload","result","post","concrete","formwork","rebar","Project","Phase","Workpackage","Value","Unit","partition","rebarType","elementName","MassType","workItem","level","diameter","block","GetValueString","massFieldValue","field","Name","FullName","GetListForTypicalLevelFilter","randomId","Intl","DateTimeFormat","Math","random","toString","substr","newGUID","replace","c","crypto","getRandomValues","Uint8Array","UpdateFromModel","obj","M2VM","MoveItem","list","oldIndex","newIndex","temp","IsSameValues","list1","list2","isValidCheck","isSame","length","forEach","x","i","includes","Remove","dict","key","index","findIndex","Key","splice","Add","func","isDelete","newfunc","push","ExcelCellName","row","col","n","ordA","charCodeAt","len","s","String","fromCharCode","floor","ExcelColumnName","ExcelRangeName","row1","col1","row2","col2","MassColumn","Cells","_id","genUtil","Dict","Columns","indexOf","TextView","getWrapperContent","CategoryData","categoryNames","instance","category","family","parameter","bystring","bynumber","byequal","bycontain","bynotcontain","bysmaller","bybigger","bybetween","categoryType","EntFilter","ValueType","valueType","NumberFilterType","numberFilterType","StringFilterType","stringFilterType","Values","values","CategoryType","GetValueStorageList","fct","Instance","CategoryNames","PMData","ParameterNames","IsValid","filter","isValid","filterValues","fvt","sft","lowerVal","toLowerCase","isNaN","nft","leftVal","rightVal","IsEqualLeft","IsEqualRight","valueStorageList","util","byuser","byauto","mgi","createType","MGI_Item","MassGroupItem","CreateType","ct","Title","Delete","Items","Index","title","newMGI","newMGI_id","SupComponent","AllItems","id","SubComponents","NotIncludeValues","AddNotIncludeValue","GetItem","item","itemUtil","OnIsFirstSetSupRow_Funcs","HandleCreatedByUserRows","mgii_ct","addRow","supRow","Table","GetRow","FullValue","IsCreatedByUser","handleRow","handleNonField","subMgcIndex","y","Filter","SupRow","replaceMgi","NewMGI","Handle_ReplaceMGI","map","items","ApiData","Field","subComponents","valueOrders","ValueOrders","notIncludeValues","IsFirstSetSupRow","isFirstSetSupRow","IsHaveMassItem","table","MassGroupComponent","originComponent","OriginComponent","AllSubItems","apply","supItem","filterUtil","SupItem","Clone","GetOriginComponent","subComps","supCom","getFromDb","compUtil","IsHaveValueOrder","GetTable","initialItems","MultiSelectVM","InitialItems","GetInitialIndexs","selectedIndexs","GetSelectedItems","SelectedIndexs","open","canOpen","InitialIndexs","initialIndexs","SelectedItems","selectedItems","OnSelectedItemChanged","titleRender","DisplayContent","OnSetOpen","Option","Select","MultiSelectView","onValueChange","onDropdownVisibleChange","Open","width","Placeholder","elems","displayContent","TitleRender","mode","optionFilterProp","filterOption","input","option","children","CanOpen","EntHoverVM","IsElementVisible","ShowElement","HideElement","EntHoverView","minWidth","onMouseEnter","onMouseLeave","Element","initialItem","SelectVM","InitialItem","GetInitialIndex","selectedIndex","GetSelectedItem","SelectedIndex","CanClear","Clear","isDisabled","InitialIndex","initialIndex","SelectedItem","selectedItem","padding","FloatItemVM","getClassName","className","location","loc","FloatItemView","floatItemVMUtil","SelectView","floatElem","floatItemStore","size","type","onClick","DivStyle","showSearch","disabled","IsDisabled","inside","lower","ReplaceRowLocationFactory","Location","lt","ToggleLocation","backgroundColor","Color","border","select","NewInputView","handleChange","contentEditable","React","createRef","fontFamily","innerRef","html","MassRow","SubItems","isShowSub","rank","isHaveSub","IsToolVisible","FieldInputType","mr_f_it","Toggle_FieldInputType","TempField","FieldInputVM","FieldSelectVM","GetCellByColumn","Column","UpdateData","Rank","IsHaveSub","ToggleSub","IsShowSub","SetSubFields","tempSubFields","TempSubFields","SubFields","supMgi","mgc","SubItem","subMgis","mgiUtil","SubMassGroupComponent","SubMassGroupItem","ColumnField","mif","ValidPhasesByInput","HandleItem","GetValue","MoveUp","CurrentList","orderItems","OrderMGI","OrderItems","orderValues","OrderValues","mgiIndex1","mgiIndex2","MoveDown","AddSub","SubCells","GetSubCells","totalValues","TotalValue","reduce","b","ContentVM","ValueString","ReplaceOK","factory","ReplaceFactory","refRow","ReferenceRow","rrlf_lt","Replace","oldMgi","newMgi","MainMGI","ReplaceMGI","IsShowSubFieldSelect","IsModalVisible","OpenModal","TitleVM","SubFieldSelectVM","locSelectVM","LocationSelectVM","LocationStorageList","ModalOK","warning","ModalCancel","PMS_WorkPackages","currentList","MainRows","concat","massGroupItem","subMassGroupItem","subFields","ToggleButtonContentVM","toggleButtonContent","toggleButtonContentVM","ToggleButtonContent","OnSetContent","fieldInputVM","fieldSelectVM","unCheckedChildren","checkedChildren","checked","subFieldSelectVM","AllRows","locationSelectVM","titleVM","replaceFactory","pms_WorkPackages_SelectVM","selectUtil","visible","onOk","onCancel","gutter","marginTop","flex","FieldInputElement","ButtonStyle","ToolElement","display","marginLeft","UpCircleOutlined","DownCircleOutlined","danger","info","ExportInfo","Infos","ExportValue","pmData","GetRank","GetStyle","GetIsHaveSub","GetToggleButtonContent","GetFieldSelectVM","storageList","MIFs_ForMassGroup","GetSubFieldSelectVM","multiSelectUtil","Order","sort","GetLocationSelectVM","GetSubMassGroupItem","subItems","GetSubFields","subMGI","mgis","lastValidIndex","isValidHandle","HaveMassItemSubComponents","currentIndex","CreateSubMassGroupItem","mgcIndex","mgi_I","mgi_iUtil","MassCell","GetUnit","unit","OnGet_TotalValue_Func_Dict","totalValue","subRows","Row","AsString","console","log","IsHaveVCS_Item","ShowDetail","process","openTabFunc","window","getUrl","viewDetailId","GetViewDetailId","vcs_Item","valueColor","tdBgColor","massIds","massType","handle","apiData","api","then","OnGet_TLS_LevelGroups_Func_Dict","isHaveWarning","tls_LevelGroup_Descriptions","unitVM","Get_TotalValue","contentVM","formatValue","toLocaleString","maximumFractionDigits","subCells","isHaveVCS_Item","ValueColor","TDBgColor","color","fontWeight","tls_LevelGroups","Get_TLS_LevelGroups","GetIsHaveVCS_Item","MassResultComp","Phases","ColumnIndex","GetValueColor","VCS_Item","GetTDBgColor","Handle_VCS_Item","VersionCompareSetting","cells","compareIndex","compareItem","getItem","ratio","GetMassType","isPending","Handle_TLS_LevelGroups","IsGet_TLS_LevelGroups","handledCount","count","checkadd_Val","val","handle_Val","Array","isArray","TLS_LevelGroups","TLS_LevelGroup","targetObj","GetPhaseItem","Get_TLS_LevelGroup","OnGet_TLS_LevelGroup_Func_Dict","Handle_TotalValue","IsGet_TotalValue","checkedList","totalVal","Number","OnGet_FullValue_Func_Dict","GetIsHaveWarning","getWarningFunc","levelGroups","IsHaveWarning","Handle_TLS_LevelGroup_Descriptions","IsGet_TLS_LevelGroup_Descriptions","TLS_LevelGroup_Descriptions","getDescFunc","FullDescription","OnGetLevelStorageList_Func_Dict","OnGet_TLS_LevelGroups_Funcs","GetMassGroupName","MassGroupSetting","GetMainMGI","MainMGC","elementfilter","massexport","massgroup","Setting","OnDelete","Input","EditItemId","name","OnNameChanged","description","OnDescriptionChanged","OnDataChanged","projectId","settingType","SettingType","Description","Data","MassGroupSettingData","AddNewField","MassPropertyNames","Fields","fields","Category","GetDefaultFields","mpn","massGroupCompUtil","massGroupComponent","dataUtil","WorkpackageVM","code","fullName","WorkpackageVMs","Code","codeVM","nameVM","descriptionVM","OnCodeChanged","OnFullNameChanged","GetSupItem","supWp","PMDataVM","Workpackage_DictVM","CheckboxVM","Cancel","ischecked","isDisable","onCheckChange","WorkpackageInputVM","workpackageVMStorageList","isNew","commandName","IsNew","AddDatabase","WorkpackageInput","DeleteFunc","CodeVM","NameVM","DescriptionVM","IsNewVM","Ischecked","selectVM","SupItemSelectVM","supItemSelectVM","selectVMUtil","WorkpackageVMStorageList","CommandVM","workpackageVM","isNewVM","checkboxVMUtil","commandVM","CommandName","pmDataVM","GetCommandName","GetWorkpackageVMStorageList","GetWorkpackageInputVM","dictVM","OnGetItemsDone_Funcs","OnAddDatabaseDone","command","OnAdd","workpackageInputVMUtil","Workpackage_Dict","ElementFilterSetting_DictVM","ModelItem","OnGetItemsDone","currentItem","CurrentItem","EditItem","SettingVM","GetDataVM","OnGetDataVM","textUtil","dataVM","OnInitialSetDataVM","ElementFilterSettingVM","cateFilterVM","CategoryFilterVM","OnInitialData","famFilterVM","FamilyFilterVM","EntFilterVM","SetData","ValueTypeSelectVM","StringFilterTypeSelectVM","ValuesSelectVM","ValueStorageList","valueTypeSelectVM","FilterValueTypes","stringFilterTypeSelectVM","StringFilterTypes","valuesSelectVM","multiSelectVMUtil","ValueSelectPlaceholder","ElementFilterSettingDataVM","GetCategoryFilterVM","CategoryFilter","filterVMUtil","isHaveFamilyFilter","GetFamilyFilterVM","FamilyFilter","IsHaveFamilyFilter","IsHaveFamilyFilterVM","categoryFilterVM","familyFilterVM","isHaveFamilyFilterVM","DataVM","dataVMUtil","SettingInputVM","settingTypeVM","editItem","SettingTypeVM","ElementFilterSettingInputVM","GetItems","itemVMUtil","GetInput","inputVMUtil","MES_ValueSettingVM","ValueSettingVMs","RetrieveTypeSelectVM","RetrieveType","ValueFilterVM","WorkpackageSelectVM","MassTypeSelectVM","retrieveType","retrieveTypeSelectVM","RetrieveTypeStorageList","valueFilterVM","ValueFilter","modelItem","workpackageSelectVM","massTypeSelectVM","MassTypeStorageList","GetRetrieveTypeStorageList","ValueRetrieveTypes","GetWorkpackageVM","workpackage","GetMassTypeStorageList","MassTypes","MES_ValueSetting","ValueSettings","workpackageId","byparameter","GetDefault","vrt","valueFilter","GetWorkpackage","Workpackages","GetApiData","MassExportSettingDataVM","elementFilterVMStorageList","valueSettingVMs","AddNewValueSettingVM","AddNewValueSetting","itemView","valueSettingVMUtil","ElementFilterSelectVM","ElementFilterVM","elementFilterVM","ElementFilter","elementFilterSelectVM","ElementFilterVMStorageList","modelList","oldCount","newCount","delta","abs","originItemVM","valueSettingUtil","itemVM","GetElementFilterVMStorageList","GetElementFilterVM","elemFilter","GetValueSettingVMs","MassExportSettingVM","MassExportSettingInputVM","MassExportSetting_DictVM","MassGroupSetting_DictVM","PhaseVM","addversion","Phase_DictVM","AddVersion","stateType","OK","AddMassVersion","PhaseInputVM","ProjectVM","typicalLevelSetting","typicalLevelSetting_ForEdit","phase_DictVM","rebarMass_Dict","RebarMass_Dict","InputExportSet","Level_Dict","Url","CheckboxView","onCheckedChange","OnCheckChanging","LevelGroupVM","LevelGroups","Primary","primary","isSelectOpen","LevelStorageList","Levels","levelSelectVM","OnGetLevelStorageList_Funcs","triggerVM","IsSelectOpen","buttonTypeVM","addContentVM","trigger","GetDefaultPrimary","TLS_FilterValueVM","inputType","ToggleInputType","InputType","it","ValueVM","SwitchChecked_Funcs","valueVM","SelectOpen","selectOpen","PopoverState","popoverState","GetPopoverState","TLS_FilterVM","Filters","AddItem","valueUtil","FieldFilterStorageList","FieldStorageList","TLS_PageItemVM","st","ToggleState","NameOK","NameCancel","isLast","IsLast","PageItems","AllTabs","IsModelChangePageKey","CurrentPageKey","AddLevelGroup","levelGroupUtil","filters","AddFilter","delElem","InputToolElement","InputElement","GetLevelGroups","GetFilters","TypicalLevelSettingDataVM","pageItems","AddPageItem","pageItemUtil","IsHaveAddCommandTab","allTabs","currentPageKey","ChangePageKey","addCommandTab","TitleElement","AddCommandTab","GetPageItems","TypicalLevelSettingVM","Save","project","GetPhase_DictVM","GetItemsDone","phaseDictVMUtil","Phase_Dict","GetTypicalLevelSetting_Func","model","typicalLevelUtil","GetTypicalLevelSetting","tls","TypicalLevelSetting","OnGetTypicalLevelSetting_Funcs","GetTypicalLevelSetting_ForEdit","TypicalLevelSetting_ForEdit","Project_DictVM","MassResultCompVM","IsShowProjectSelect","CanHavePhase","isHavePhase","IsDataPending","handledRatio","GetMassData","HandledRatio","projects","Projects","projectVMs","projectVMStorageList","ProjectSelectVM","projectSelectOpen","ProjectPopoverState","projectPopoverState","projectSelectVM","ProjectVMStorageList","ProjectVMs","placement","href","ProjectSelectOpen","phases","phaseVMs","massItem_Dict","MassItem_Dict","phaseVMStorageList","PhaseSelectVM","phaseSelectVM","PhaseVMStorageList","PhaseVMs","IsHavePhase","isShowPhaseSelectVM","massGroupSettingStorageList","MassGroupSettingSelectVM","massGroupSettingSelectVM","MassGroupSettingStorageList","toFixed","loadingSpinTipVM","LoadingSpinTip","LoadingSpinTipVM","isfetchProjects","GetProjectVMStorageList","massTable","MassTable","OnIsUpdateDataDone_Funcs","OnSetHandledRatio_Funcs","GetProjectVMs","GetPhaseVMs","GetMassGroupSettingStorageList","MassGroupSetting_Dict","GetProjectPopoverStateValue","_default","edit","RenderItem","render","Render","GetRender","rs","dataIndex","inputVM","Render_Dict","renderUtil","TableColumn","RenderState","render_Dict","renders","DataIndex","GetActionColumn","CanAdd","add","cell","editElem","CanEdit","Edit","CanDelete","DeleteItem","TableRow","Item","TableCell","renderState","GetCells","cellUtil","TableVM","IsShowActionColumn","columns","dataSource","rows","OnGetItemForAdd","DataSource","rowUtil","Rows","OnDeleteItem","OnEditItem","colUtil","ElementName","Diameter","Weight","WorkItemExportDataVM","WorkItemExportSettingVM","IsCategoryChecked","categoryCheckboxVM","checkboxUtil","WorkItemExportSetting","WorkItemExportSetting_DictVM","tableVM","GetTableVM","nameCol","isCateCol","CategoryCheckboxVM","isSubWorkItemCol","GetWorkpackage_DictVM","OnGetWorkpackagesDone","workpackageVMUtil","workpackage_DictVMUtil","GetElementFilterSetting_DictVM","elementFilterSetting_DictVMUtil","ElementFilterSetting_Dict","GetMassExportSetting_DictVM","massExportSetting_DictVMUtil","MassExportSetting_Dict","GetMassGroupSetting_DictVM","massGroupSetting_DictVMUtil","GetProject_DictVM","project_DictVMUtil","Project_Dict","GetWorkItemExportSetting_Dict","wieDictVMUtil","WorkItemExportSetting_Dict","mass","typicallevel","phase","inputdata","isDebug","OnSet_ProjectViewType_Func_Dict","projectViewType","pvt","currentProject","workpackage_DictVM","elementFilterSetting_DictVM","massExportSetting_DictVM","massGroupSetting_DictVM","project_DictVM","massResultCompVM","massResultCompVMUtil","filterValueTypes","stringFilterTypes","valueRetrieveTypes","parameterNames","massPropertyNames","massTypes","workItemExportSetting_Dict","IsDebug","CurrentProject","MGS_FieldVM","FieldVMs","GetFieldStorageList","MassGroupSettingDataVM","fieldVMs","AddNewFieldVM","fieldVMUtil","GetFieldVMs","MassGroupSettingVM","CSVExport","Export","wb","Sheets","XLSX","json_to_sheet","Headers","SheetNames","excelBuffer","bookType","Blob","FileSaver","FileName","ExportTest","ws1","t","ws2","f","Override_Get_Data","Override_Get_FileName","fileName","ExcelExport","Workbook","Override_Get_Workbook","workbook","MT_Cell","column","Override_Get_Row","Override_Get_Column","Override_Get_Formula","formula","isContinueSubRows","Type","Formula","z","Format","Style","MT_Data_Row","Worksheet","FullRows","string","ws","GetSubItems","GetTitle","vc_dict","ValueCell_Dict","firstCol","First_ValueColumn","firstRow","First_ValueRow","getRowFunc","FullIndex","titleCell","c_vt","valueCell","IsContinueSubRows","Address","GetFullItems","FullItems","MT_Data_Worksheet","First_TitleColumn","First_TitleRow","mainRows","fullRows","valueCells","titleCells","fc","fr","font","bold","allCells","TitleCells","ValueCells","listCells","AllCells","range","minRow","minCol","maxRow","maxCol","RangeName","ResultData","MT_RawData_Worksheet","InfoFields","dataRows","Data_WS","tableRows","DataRows","records","ExportData","infoFields","Binding_DataRow","valueFields","Records","ifs","ifl","vfs","ValueFields","cell_val","data_cell","MT_Workbook","RawData_WS","data_WS","rawData_WS","All_WS","GetData_WS","GetRawData_WS","IsValidTable","columnField","Init","GetColumn","GetCell","Build","colField","IsHaveAsyncData","IsOnSaveMassGroup","HandledItems","HandledItemPhases","AddHandledItems","Count","IsUpdateDataDone","colFieldValue","initialRow","HandleRowFieldIndex","GetRow_Value_FieldIndex","rowFieldIndex","itemCount","lastRow","rowField","valueString","fullValue","Handle_AddRow","subMgcs","subIndex","r1","awaitGetSupRowForAdd","r2","SaveMassGroup","massGroupName","MassGroupInputOK","MassGroupName","mgsUtil","mgsVMUtil","MassGroupNameVM","MassGroupInputCancel","AddMainRow","massGroupSetting","mainMGC","mgi1","mainMGI","massGroupNameVM","wbUtil","excelExport","ovrgFileName","ovrgWb","eeUtil","ExportTitle","ExcelWorkbook","MassItem","IsGetElement","OnGetElementDone_Funcs","massItem","isFromElement","mt","groupName","getValFunc","DeleteDatabase","IsGet_TLS_LevelGroup","phaseName","PhaseItems","elementId","exportSetId","exportSetVersionId","Info","get_TLS_LevelGroup","tls_LevelGroup","get_FullValue","Get_FullValue","phaseItems","MIPh_Item","Handle_TLS_LevelGroup","getLevelGroup_Func","pi","GetValidTLS_PageItem","GetValidTLS_LevelGroup","validPi","IsValidTLS_PageItem","pageItem","validLg","Handle_FullValue","IsGet_FullValue","getFullValue_Func","lg","Elements","GetProject","getByViewDetail","viewDetail","masses","GetPhases","exportSetVersionIds","GetValidPhasesByInput","inputPhases","GetPhaseItems","phaseItemUtil","wp_Dict","IsDataChanged","RefreshData","projectIds","phaseIds","massItemUtil","setExportSetData","exportSet","currentVersion","CurrentVersion","OnGetCurrentVersionDone_Func","inputExportSet","OnGetInputExportSetDone_Funcs","LevelGroup","levels","getLevelStorageList","IsGet_LevelStorageList","GetLevelStorageList","min","LevelIndexs","max","MinLevel","MaxLevel","FilterDescription","TLS_FilterValue","TLS_Filter","arr","TLS_PageItem","TypicalLevelSettingData","fieldFilterStorageList","levelStorageList","GetTest","GetFromDb_Async","phaseId","resData","editData","GetFieldFilterStorageList","fieldUtil","SaveDatabase","level_Dict","getLevelsFunc","OnGetExportSetVersions_Func","exportSetVersions","IsOnGetDb_Async","GetExportSetVersionData","ExportSetVersions","GetExportSetVersions","settingUtil","addVersionFunc","PhaseInput","phaseUtil","inputUtil","phase_Dict","phaseDictUtil","GetInputExportSetDone","getInputExportSetDone","ExportSet","GetCurrentVersionDone","ExportSetVersion","RetrieveFrom","retrieveFrom","GetCurrentVersion_Async","versionUtil","AddVersion_Async","addItem","Level","getAll","Elevation","elevation","GetRebarMass_Dict","rebarMassDictUtil","GetInputExportSet_Async","exportSetUtil","GetLevel_Dict","levelDictUtil","ElementFilterSetting","ElementFilterSettingData","categoryFilter","familyFilter","SettingInput","GetData","OnGetData","prefix","UrlPrefix","AddDatabaseDone","NewItem","GetEditItem","Update","urlPrefix","ElementFilterSettingInput","elementFilterSettingUtil","cateFilter","MassExportSettingData","elementFilter","elementFilterId","valueSettings","exportSettings","GetElementFilter","elemFilterId","GetDefaultValueSettings","MassExportSetting","MassExportSettingInput","massExportSettingUtil","TrackingItem","Tracking","WorkpackageId","supId","SupId","NewWorkpackage","workpackageUtil","wp","GetFullName","UpperList","LowerList","wps","GetWorkpackagesDone","workpackageInput","GetFilterValueTypes","GetStringFilterTypes","GetValueRetrieveTypes","GetMassPropertyNames","GetMassItemFields","GetMIFs_ForMassGroup","GetMassTypes","DebugPoints","workpackage_Dict","elementFilterSetting_Dict","massExportSetting_Dict","massGroupSetting_Dict","project_Dict","massResultComp","categoryData","massItemFields","mifs_ForMassGroup","versionCompareSetting","tracking","upperList","lowerList","dbItem","GetUpperList","GetLowerList","workpackageVMs","CurrentWorkpackage","workpackageInputVM","Workpackage_DictView","CurrentWorkpackageVM","searchName","SearchName","orientation","plain","margin","DeleteView","EntFilterView","test","ItemVMs","CurrentItemVM","ElementFilterSettingDataView","ElementFilterSetting_DictView","MES_ValueSettingView","borderRadius","MassExportSettingDataView","valueSettingElems","MassExportSetting_DictView","MassCellView","TDStyle","InfoCircleOutlined","AStyle","MassRowView","subElems","toggleButton","marginRight","scope","HoverToolElement","ModalElement","j","CSVExportView","Test","filename","headers","MassTableView","thElems","tbodyElems","SaveFilled","DownloadOutlined","span","MassResultCompView","IsShowPhaseSelectVM","justifyContent","TableView","tableElem","theadElem","tbodyElem","WorkItemExportSetting_DictView","PMDataView","TestView","CellVM","OnGetValueString","ColumnVM","RowVM","GetFields","GetColumns","GetValueTitle","MassDetailTable","GetRows","parseFloat","setValueFunc","MassDetailVM","DetailTable","detailTable","MassDetailTableView","colElems","rowElems","cellElems","MassDetailView","match","params","withRouter","LevelGroupView","LevelSelectVM","DeleteFilled","TLS_FilterValueView","TLS_FilterView","TLS_PageItemView","Tabs","TabPane","TypicalLevelSettingDataView","onKeyDown","stopPropagation","activeKey","tab","TypicalLevelSettingView","Phase_DictView","PlusCircleOutlined","RebarMass_DictView","ProjectCompVM","projectVM","projectUtil","projectVMUtil","massResComp","setItemsFuncs","massResutlCompVMUtil","ProjectViewType","Level_DictView","LeftNavVM","GetItemClass","SetView","LeftNav","LeftNavItem","modelUtil","LeftNavView","navUtil","ProjectCompView","ViewElement","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.96f4d5ce.chunk.js","sourcesContent":["export const text = 'text'\r\nexport const password = 'password'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as ts from './TextState'\r\n\r\nexport class TextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder : observable,\r\n      State : observable\r\n    })\r\n  }\r\n\r\n  content = undefined\r\n  get Content(){\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  inputStyle\r\n\r\n  style\r\n  get Style() {\r\n    if (!this.style) {\r\n      this.style = this.inputStyle ? this.inputStyle : {};\r\n\r\n      if (this.wrapper) {\r\n        this.style.position = 'relative';\r\n      }\r\n    }\r\n    return this.style;\r\n  }\r\n\r\n  State = ts.text\r\n}","import { TextVM } from \"./TextVM\"\r\n\r\nexport const get = (q, placeholder) => {\r\n  var qI = new TextVM();\r\n  qI.content = q;\r\n  qI.placeholder = placeholder;\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport * as ts from '../text/TextState'\r\n\r\nclass InputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    var { value } = e.target;\r\n    this.state.Content = value;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { content, placeholder } = data;\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <Input value={content} onChange={this.onChange}\r\n            placeholder={placeholder} /> : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={content} onChange={this.onChange} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(InputView)","import axios from 'axios';\r\nimport { message } from 'antd';\r\n\r\nexport const API_URL = 'https://api.bimdev.vn/api';\r\n\r\n// const http = axios.create({\r\n//   baseURL: API_URL,\r\n//   Accept: 'application/json',\r\n//   'Content-Type': 'application/json',\r\n//   //timeout: 20000\r\n//   timeout: 20000000\r\n// });\r\n\r\nconst http = (timeout) => axios.create({\r\n    baseURL: API_URL,\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    timeout\r\n  });\r\n\r\nconst handleNetworkError = (err) => {\r\n  message.error(`Error sending request: ${err}`);\r\n  return {\r\n    success: false\r\n  };\r\n}\r\n\r\nconst handleResponse = (response) => {\r\n  // Parse the axios response\r\n  const success = response.status >= 200 && response.status < 300;\r\n  const data = response.data;\r\n  let message = response.statusText;\r\n  return {\r\n    success,\r\n    data,\r\n    message\r\n  };\r\n}\r\n\r\nexport const callApi = async (action) => {\r\n  try {\r\n    const response = await action;\r\n    return handleResponse(response);\r\n  } catch (err) {\r\n    return handleNetworkError(err);\r\n  } finally { }\r\n}\r\n\r\nexport const timeout_default = 20000\r\n\r\nexport const get = async (url, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  return callApi(http(timeout).get(url, config));\r\n}\r\n\r\nexport const put = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).put(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const post = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).post(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const del = async (url, payload,timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).delete(url, payload));\r\n  return result;\r\n}","export const concrete = \"concrete\";\r\nexport const formwork = \"formwork\";\r\nexport const rebar = \"rebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [ concrete, formwork, rebar ];\r\n}\r\n\r\nexport const IsGetElement = (massType) => {\r\n  return massType === concrete || massType === formwork;\r\n}","import * as mt from '../MassType'\r\n\r\nexport const Project = 'Project'\r\nexport const Phase = 'Phase'\r\nexport const Workpackage = 'Workpackage'\r\nexport const Value = 'Value'\r\nexport const Unit = 'Unit'\r\nexport const partition = 'partition'\r\nexport const rebarType = 'rebarType'\r\nexport const elementName = 'elementName'\r\nexport const MassType = 'MassType'\r\nexport const workItem = 'workItem'\r\nexport const level = 'level'\r\nexport const diameter = 'diameter'\r\nexport const block = 'block'\r\nexport const discipline = 'discipline'\r\nexport const zone = 'zone'\r\n\r\nexport const GetAll = () => {\r\n  return [MassType, workItem, level, block, elementName, diameter]\r\n}\r\n\r\nexport const GetForMassGroup = () => {\r\n  return [MassType, workItem, level, block, elementName, diameter]\r\n}\r\n\r\nexport const GetDirectiveFields = () => {\r\n  return [Project, Workpackage, Value, Unit];\r\n}\r\n\r\nexport const GetIdentifyFields = () => {\r\n  return [elementName];\r\n}\r\n\r\nexport const GetFullFields = (massItem, field) => {\r\n  switch (field) {\r\n    case Project:\r\n    case Value:\r\n    case Unit:\r\n    case MassType:\r\n    case Phase:\r\n      return {\r\n        fields: [field],\r\n        isFromElement: false\r\n      };\r\n    case workItem:\r\n    case elementName:\r\n    case rebarType:\r\n    case partition:\r\n    case level:\r\n    case diameter:\r\n    case block:\r\n      var massType = massItem[MassType];\r\n      if (massType === mt.rebar) {\r\n        return {\r\n          fields: ['Info', field],\r\n          isFromElement: false\r\n        };\r\n      } else {\r\n        var groupName = undefined;\r\n        // kiểm tra các phân nhóm trong Element: identify, locate ...\r\n        switch (field) {\r\n          case workItem:\r\n          case elementName:\r\n            groupName = 'identify';\r\n            break;\r\n          case level:\r\n          case block:\r\n            groupName = 'locate';\r\n            break;\r\n        }\r\n        return {\r\n          fields: ['Element', 'info', groupName, field],\r\n          isFromElement: true\r\n        }\r\n      }\r\n  }\r\n}\r\n\r\nexport const GetValueString = (massFieldValue, field) => {\r\n  var value = undefined;\r\n\r\n  switch (field) {\r\n    case Project:\r\n    case Phase:\r\n      value = massFieldValue.Name;\r\n      break;\r\n    case Workpackage:\r\n      value = massFieldValue.FullName;\r\n      break;\r\n    default:\r\n      value = massFieldValue;\r\n      break;\r\n  }\r\n\r\n  return value ? value : 'undefined';\r\n}\r\n\r\nexport const GetListForTypicalLevelFilter = () => {\r\n  return [workItem, block, discipline]\r\n}\r\n\r\nexport const GetDefaultListValue = (field) => {\r\n  switch (field) {\r\n    case workItem:\r\n      return ['Dầm', 'Sàn', 'Cột', 'Vách'];\r\n    default:\r\n      return [];\r\n  }\r\n}","\r\nexport let dtFormat = new Intl.DateTimeFormat('en-GB');\r\n\r\nexport const deepClone = (q) => {\r\n  return JSON.parse(JSON.stringify(q));\r\n}\r\n\r\nexport const randomId = () => {\r\n  // Math.random should be unique because of its seeding algorithm.\r\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n  // after the decimal.\r\n  return Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const newGUID = () => {\r\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\r\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n  );\r\n}\r\n\r\nexport const UpdateFromModel = (obj, action) => {\r\n  obj.M2VM = true;\r\n  action();\r\n  obj.M2VM = false;\r\n}\r\n\r\nexport const MoveItem = (list, oldIndex, newIndex) => {\r\n  if (oldIndex === -1 || newIndex === -1 ||\r\n    oldIndex === newIndex) return;\r\n  var temp = list[oldIndex];\r\n  list[oldIndex] = list[newIndex];\r\n  list[newIndex] = temp;\r\n}\r\n\r\nexport const IsEqual = (list1, list2) => {\r\n  if (list1.length !== list2.length) return false;\r\n  var isValidCheck = true;\r\n  var isEqual = true;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && x !== list2[i]) {\r\n      isValidCheck = false; isEqual = false;\r\n    }\r\n  })\r\n\r\n  return isEqual;\r\n}\r\n\r\nexport const IsSameValues = (list1, list2) => {\r\n  var isValidCheck = true;\r\n  var isSame = true;\r\n\r\n  if (list1.length !== list2.length) return false;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && !list2.includes(x)) {\r\n      isValidCheck = false; isSame = false;\r\n    }\r\n  })\r\n\r\n  return isSame;\r\n}\r\n\r\nexport const GroupBy = function (xs, key) {\r\n  var groups = [];\r\n\r\n  xs.forEach(x => {\r\n    var val = x[key];\r\n    var group = undefined;\r\n    var index = groups.findIndex(y => val === y.Key);\r\n    if (index === -1) {\r\n      group = {\r\n        Key: val,\r\n        Items: []\r\n      };\r\n      groups.push(group);\r\n    } else {\r\n      group = groups[index];\r\n    }\r\n    group.Items.push(x);\r\n  })\r\n\r\n  return groups;\r\n};\r\n\r\nexport const Remove = (dict, key) => {\r\n  var index = dict.findIndex(x => x.Key === key);\r\n  if (index !== 0) {\r\n    return dict.splice(index, 1);\r\n  }\r\n}\r\n\r\nexport const Add = (dict, func, isDelete = true) => {\r\n  var key = newGUID();\r\n\r\n  var newfunc = () => {\r\n    if (func) {\r\n      func();\r\n    }\r\n    if (isDelete) {\r\n      Remove(dict, key);\r\n    }\r\n  }\r\n\r\n  dict.push({\r\n    Key: newGUID(),\r\n    Value: newfunc\r\n  });\r\n}\r\n\r\n// Truy xuất thông tin Excel\r\nexport const ExcelColumnName = (n) => {\r\n  var ordA = 'A'.charCodeAt(0);\r\n  var ordZ = 'Z'.charCodeAt(0);\r\n  var len = ordZ - ordA + 1;\r\n\r\n  var s = \"\";\r\n  while(n >= 0) {\r\n      s = String.fromCharCode(n % len + ordA) + s;\r\n      n = Math.floor(n / len) - 1;\r\n  }\r\n  return s;\r\n}\r\n\r\nexport const ExcelCellName = (row, col) => {\r\n  return `${ExcelColumnName(col)}${row+1}`;\r\n}\r\n\r\nexport const ExcelRangeName = (row1, col1, row2, col2) => {\r\n  return `${ExcelCellName(row1, col1)}:${ExcelCellName(row2, col2)}`\r\n}\r\n\r\n// Max min\r\nexport const MinMax = (arr) => {\r\n  return arr.reduce(({min, max}, v) => ({\r\n    min: min < v ? min : v,\r\n    max: max > v ? max : v,\r\n  }), { min: arr[0], max: arr[0] });\r\n}","import * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport default class MassColumn {\r\n  _id\r\n  get id() {\r\n    if (!this._id){\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.Columns.indexOf(this);\r\n  }\r\n\r\n  Cells = []\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\n\r\nclass TextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = {\r\n        content: `Nội dung`\r\n      }\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var { content } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {content}\r\n        {this.getWrapperContent()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TextView)","import * as util from './CategoryDataUtil'\r\n\r\nexport class CategoryData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new CategoryData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = util.GetCategoryNames();\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n}","export const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Columns']\r\n}","export const category = \"category\";\r\nexport const family = \"family\";\r\nexport const parameter = 'parameter'\r\n\r\nexport const GetAll = () => {\r\n  return [ category, family, parameter ];\r\n}","export const bystring = \"bystring\";\r\nexport const bynumber = \"bynumber\";\r\n\r\nexport const GetAll = () => {\r\n  return [ bystring, bynumber ];\r\n}","export const byequal = \"byequal\";\r\nexport const bycontain = \"bycontain\";\r\nexport const bynotcontain = \"bynotcontain\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bycontain, bynotcontain ];\r\n}","export const byequal = \"byequal\";\r\nexport const bysmaller = \"bysmaller\";\r\nexport const bysmallerorequal = \"bysmallerorequal\";\r\nexport const bybigger = \"bybigger\";\r\nexport const bybiggerorequal = \"bybiggerorequal\";\r\nexport const bybetween = \"bybetween\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bysmaller, bybigger, bybetween ];\r\n}","import { CategoryData } from \"../../single/model/CategoryData\"\r\nimport { PMData } from \"../../single/model/PMData\";\r\nimport { EntFilter } from \"./EntFilter\"\r\nimport * as fct from './FilterCategoryType'\r\nimport * as fvt from './FilterValueType'\r\nimport * as sft from './StringFilterType'\r\nimport * as nft from './NumberFilterType'\r\n\r\nexport const categoryData = () => {\r\n  return CategoryData.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, categoryType) => {\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.valueType;\r\n  qI.NumberFilterType = q.numberFilterType;\r\n  qI.StringFilterType = q.stringFilterType;\r\n  qI.Values = q.values;\r\n  qI.CategoryType = categoryType;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  if (!q) return q;\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.ValueType;\r\n  qI.NumberFilterType = q.NumberFilterType;\r\n  qI.StringFilterType = q.StringFilterType;\r\n  qI.Values = [...q.Values];\r\n  qI.CategoryType = q.CategoryType;\r\n  return qI;\r\n}\r\n\r\nexport const GetValueStorageList = (q) => {\r\n  var list = [];\r\n\r\n  switch (q.CategoryType) {\r\n    case fct.category:\r\n      list = categoryData().CategoryNames;\r\n      break;\r\n    case fct.parameter:\r\n      list = pmData().ParameterNames;\r\n      break;\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    valueType: q.ValueType,\r\n    numberFilterType: q.NumberFilterType,\r\n    stringFilterType: q.StringFilterType,\r\n    values: q.Values\r\n  }\r\n}\r\n\r\nexport const IsValid = (filter, value) => {\r\n  if (value === undefined || value === null) return false;\r\n\r\n  var isValid = false;\r\n  var filterValues = filter.Values;\r\n  switch (filter.ValueType) {\r\n    case fvt.bystring:\r\n      if (typeof value === 'string') {\r\n        var filterType = filter.StringFilterType;\r\n        switch (filterType) {\r\n          case sft.byequal:\r\n            filterValues.forEach(x => {\r\n              if (!isValid && x === value) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bycontain:\r\n            var lowerVal = value.toLowerCase();\r\n            filterValues.forEach(x => {\r\n              if (!isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bynotcontain:\r\n            var lowerVal = value.toLowerCase();\r\n            isValid = true;\r\n            filterValues.forEach(x => {\r\n              if (isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = false;\r\n              }\r\n            })\r\n            break;\r\n        }\r\n      }\r\n      break;\r\n    case fvt.bynumber:\r\n      if (!isNaN(value)) {\r\n        var filterType = filter.NumberFilterType;\r\n        switch (filterType) {\r\n          case nft.byequal:\r\n            return value === filterValues[0];\r\n          case nft.bysmaller:\r\n            return value < filterValues[0];\r\n          case nft.bysmallerorequal:\r\n            return value <= filterValues[0];\r\n          case nft.bybigger:\r\n            return value > filterValues[0];\r\n          case nft.bybiggerorequal:\r\n            return value >= filterValues[0];\r\n          case nft.bybetween:\r\n            var leftVal = filterValues[0];\r\n            var rightVal = filterValues[1];\r\n            return (filter.IsEqualLeft && leftVal === value) ||\r\n              leftVal < value && value < rightVal\r\n              || (filter.IsEqualRight && value === rightVal);\r\n        }\r\n      }\r\n      break;\r\n  }\r\n\r\n  L1:\r\n  return isValid;\r\n}","import * as util from './EntFilterUtil'\r\n\r\nexport class EntFilter\r\n{\r\n  ValueType\r\n  NumberFilterType\r\n  StringFilterType\r\n  IsEqualLeft\r\n  IsEqualRight\r\n\r\n  values\r\n  get Values(){\r\n    return this.values;\r\n  }\r\n  set Values(v){\r\n    this.values = v;\r\n  }\r\n\r\n  CategoryType\r\n\r\n  valueStorageList\r\n  get ValueStorageList(){\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = util.GetValueStorageList(this);\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byuser = 'byuser'\r\nexport const byauto = 'byauto'","import MGI_Item from \"./MGI_Item\";\r\nimport * as ct from './MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport const create = (mgi, createType) => {\r\n  var qI = new MGI_Item();\r\n  qI.MassGroupItem = mgi;\r\n\r\n  if (!createType) {\r\n    qI.CreateType = ct.byauto;\r\n  }else{\r\n    qI.CreateType = ct.byuser;\r\n    qI.Value = genUtil.newGUID();\r\n    qI.Title = 'Tên đầu mục';\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, mgi) => {\r\n  var qI = new MGI_Item();\r\n  qI.Value = data.value;\r\n  qI.Title = data.title;\r\n  qI.newMGI_id = data.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = data.createType ? data.createType : ct.byauto\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, mgi) => {\r\n  var qI = new MGI_Item();\r\n  qI.Value = q.Value;\r\n  qI.Title = q.Title;\r\n  qI.newMGI_id = q.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = q.CreateType;\r\n  return qI;\r\n}\r\n\r\nexport const GetNewMGI = (q) => {\r\n  var _id = q.newMGI_id;\r\n  if (!_id) return undefined;\r\n  var list = q.MassGroupItem.SupComponent.AllItems;\r\n  \r\n  var index = list.findIndex(x => x._id === _id);\r\n  return index !== -1 ? list[index] : undefined;\r\n}","import * as util from './MGI_ItemUtil'\r\n\r\nexport default class MGI_Item {\r\n  Value\r\n\r\n  get Index() {\r\n    return this.MassGroupItem.Items.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = this.Value;\r\n    }\r\n    return this.title;\r\n  }\r\n  set Title(v){\r\n    this.title = v;\r\n  }\r\n\r\n  newMGI\r\n  get NewMGI(){\r\n    if (!this.newMGI){\r\n      this.newMGI = util.GetNewMGI(this);\r\n\r\n      if (!this.newMGI && this.newMGI_id){\r\n        this.newMGI_id = undefined;\r\n      }\r\n    }\r\n    return this.newMGI;\r\n  }\r\n  set NewMGI(v){\r\n    this.newMGI = v;\r\n    if (!v || v === this.MassGroupItem){\r\n      this.newMGI_id = undefined;\r\n    }\r\n    else{\r\n      this.newMGI_id = v.id;\r\n    }\r\n  }\r\n\r\n  newMGI_id\r\n\r\n  get ApiData(){\r\n    return {\r\n      value : this.Value,\r\n      title : this.Title,\r\n      newMGI_id : this.newMGI_id,\r\n      createType : this.CreateType\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.MassGroupItem.Items.splice(this.Index, 1);\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport MGI_Item from './MGI_Item'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport * as mgii_ct from './MGI_I_CreateType'\r\nimport * as rowUtil from '../MassRowUtil'\r\nimport * as util from './MassGroupItemUtil'\r\n\r\nexport default class MassGroupItem {\r\n  Field\r\n  SubComponents = []\r\n  NotIncludeValues = []\r\n  IsHaveValueOrder\r\n  BindingRows\r\n  SupComponent\r\n\r\n  Items = []\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  get Index() {\r\n    return this.SupComponent.Items.indexOf(this);\r\n  }\r\n\r\n  get OrderItems() {\r\n    return this.Items;\r\n  }\r\n\r\n  get OrderValues() {\r\n    return this.Items.map(x => x.Value);\r\n  }\r\n\r\n  get ApiData() {\r\n    var items = this.Items.map(x => x.ApiData);\r\n\r\n    return {\r\n      _id: this.id,\r\n      field: this.Field,\r\n      subComponents: this.SubComponents.map(x => x.ApiData),\r\n      valueOrders: this.ValueOrders,\r\n      notIncludeValues: this.NotIncludeValues,\r\n      items\r\n    }\r\n  }\r\n\r\n  AddNotIncludeValue = (v) => {\r\n    var index = this.NotIncludeValues.indexOf(v);\r\n    if (index === -1) {\r\n      this.NotIncludeValues.push(v);\r\n    }\r\n  }\r\n\r\n  GetItem = (v, title) => {\r\n    var index = this.Items.findIndex(x => x.Value === v);\r\n    if (index === -1) {\r\n      var item = itemUtil.create(this)\r\n      item.Value = v;\r\n      item.Title = title;\r\n      this.Items.push(item);\r\n      return item;\r\n    }\r\n    return this.Items[index];\r\n  }\r\n\r\n  supRow\r\n  get SupRow() {\r\n    return this.supRow;\r\n  }\r\n  set SupRow(v) {\r\n    this.supRow = v;\r\n    if (!this.IsFirstSetSupRow) {\r\n      this.IsFirstSetSupRow = true;\r\n      this.HandleCreatedByUserRows();\r\n    }\r\n  }\r\n\r\n  OnIsFirstSetSupRow_Funcs = []\r\n\r\n  isFirstSetSupRow\r\n  get IsFirstSetSupRow() {\r\n    return this.isFirstSetSupRow;\r\n  }\r\n  set IsFirstSetSupRow(v) {\r\n    this.isFirstSetSupRow = v;\r\n    this.OnIsFirstSetSupRow_Funcs.forEach(x => x());\r\n  }\r\n\r\n  get HaveMassItemSubComponents() {\r\n    return this.SubComponents.filter(x => x.IsHaveMassItem);\r\n  }\r\n\r\n  table\r\n  get Table() {\r\n    if (!this.table) {\r\n      this.table = util.GetTable(this);\r\n    }\r\n    return this.table;\r\n  }\r\n  set Table(v) {\r\n    this.table = v;\r\n  }\r\n\r\n  HandleCreatedByUserRows = () => {\r\n    var userItems = this.Items\r\n      .filter(x => x.CreateType === mgii_ct.byuser);\r\n\r\n    userItems.forEach(x => {\r\n      var value = x.Value;\r\n\r\n      const addRow = (supRow) => {\r\n        var row = this.Table.GetRow(value, supRow);\r\n        row.FullValue = value;\r\n        row.IsCreatedByUser = true;\r\n        return row;\r\n      }\r\n\r\n      const handleRow = (row) => {\r\n        row.MassGroupItem = this;\r\n        handleNonField(row);\r\n      }\r\n\r\n      const handleNonField = (row) => {\r\n        var subMgcIndex = this.SubComponents.findIndex(y => \r\n          y.Filter.Values.includes(x.Value))\r\n        if (subMgcIndex !== -1){\r\n          var subMgi = this.SubComponents[subMgcIndex].Items[0];\r\n          subMgi.SupRow = row;\r\n        }\r\n      }\r\n\r\n      var replaceMgi = x.NewMGI;\r\n      if (replaceMgi) {\r\n        replaceMgi.GetItem(value);\r\n        this.Table.Handle_ReplaceMGI(replaceMgi, addRow, handleRow);\r\n      } else{\r\n        handleRow(addRow(this.SupRow));\r\n      }\r\n    })\r\n  }\r\n}","import * as util from './MassGroupComponentUtil'\r\n\r\nexport default class MassGroupComponent {\r\n  Filter\r\n  Items\r\n  SupItem\r\n\r\n  originComponent\r\n  get OriginComponent(){\r\n    if (!this.originComponent){\r\n      this.originComponent = util.GetOriginComponent(this);\r\n    }\r\n    return this.originComponent;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      filter : this.Filter ? this.Filter.ApiData : undefined,\r\n      items: this.Items.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  get AllItems(){\r\n    return this.OriginComponent.AllSubItems;\r\n  }\r\n\r\n  get AllSubItems(){\r\n    var list = [...this.Items];\r\n    this.Items.forEach(x => \r\n      x.SubComponents.forEach(y => list.push.apply(list, y.AllSubItems)));\r\n    return list;\r\n  }\r\n}","import MassGroupComponent from \"./MassGroupComponent\"\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as itemUtil from './MassGroupItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\"\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, supItem) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  qI.Filter = data.filter ? filterUtil.get(data.filter) : undefined;\r\n\r\n  qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supItem) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupComponent();\r\n  qI.Filter = filterUtil.Clone(q.Filter);\r\n\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetOriginComponent = (q) => {\r\n  return q.SupItem ? q.SupItem.SupComponent.OriginComponent : q;\r\n}","import MassGroupItem from \"./MassGroupItem\"\r\nimport * as compUtil from './MassGroupComponentUtil'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (field, subComps, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI.Field = field;\r\n  qI.SupComponent = supCom;\r\n  if (subComps) {\r\n    qI.SubComponents = subComps;\r\n  }\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI._id = data._id;\r\n  qI.Field = data.field;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = data.subComponents ? data.subComponents.map(x => compUtil.get(x, qI))\r\n    : [];\r\n\r\n  if (data.items) {\r\n    qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI))\r\n      .filter(x => x.Value);\r\n    qI.IsHaveValueOrder = true;\r\n  } else {\r\n    qI.Items = []\r\n    qI.IsHaveValueOrder = false;\r\n  }\r\n\r\n  qI.NotIncludeValues = data.notIncludeValues ? data.notIncludeValues : [];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supCom) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupItem();\r\n  qI.id = q.id;\r\n  qI.Field = q.Field;\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.NotIncludeValues = [...q.NotIncludeValues];\r\n  qI.IsHaveValueOrder = q.IsHaveValueOrder;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = q.SubComponents.map(x => compUtil.Clone(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  return q.SupComponent.SupItem.Table;\r\n}","import { MultiSelectVM } from \"./MultiSelectVM\";\r\n\r\nexport const get = (items, initialItems) => {\r\n  var qI = new MultiSelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItems = initialItems;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MultiSelectVMUtil'\r\n\r\nexport class MultiSelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      selectedIndexs: observable,\r\n      open : observable,\r\n      canOpen : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  initialItems;\r\n  get InitialItems() {\r\n    return this.initialItems;\r\n  }\r\n  set InitialItems(v){\r\n    this.initialItems = v;\r\n    this.InitialIndexs = this.GetInitialIndexs();\r\n    this.SelectedIndexs = this.InitialIndexs;\r\n  }\r\n\r\n  initialIndexs;\r\n  get InitialIndexs() {\r\n    if (!this.initialIndexs) {\r\n      this.initialIndexs = this.GetInitialIndexs();\r\n    }\r\n    return this.initialIndexs;\r\n  }\r\n  set InitialIndexs(v){\r\n    this.initialIndexs = v;\r\n  }\r\n\r\n  GetInitialIndexs =() => {\r\n    var initialItems = this.InitialItems;\r\n    if (!initialItems) return [];\r\n    return initialItems.map(x => this.Items.indexOf(x)).filter(x => x !== -1);\r\n  }\r\n\r\n  selectedIndexs = []\r\n  get SelectedIndexs() {\r\n    return this.selectedIndexs;\r\n  }\r\n  set SelectedIndexs(v) {\r\n    this.selectedIndexs = v;\r\n    this.SelectedItems = this.GetSelectedItems();\r\n  }\r\n\r\n  selectedItems\r\n  get SelectedItems() {\r\n    if (!this.selectedItems) {\r\n      this.selectedItems = this.GetSelectedItems();\r\n    }\r\n    return this.selectedItems;\r\n  }\r\n  set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n    if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItems = () => {\r\n    return this.SelectedIndexs.map(x => this.Items[x]);\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder() {\r\n    if (!this.placeholder) {\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { MultiSelectVM } from \"./MultiSelectVM\";\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nconst { Option } = Select;\r\n\r\nclass MultiSelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MultiSelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style ? this.props.style : { width: '100%' }; \r\n    var { Placeholder, Items, SelectedIndexs, InitialIndexs } = data;\r\n\r\n    if (SelectedIndexs.length === 0) {\r\n      SelectedIndexs = InitialIndexs;\r\n      data.InitialIndexs = [];\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined){\r\n        id = genUtil.randomId();\r\n      }else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    return (\r\n      <>\r\n        <Select style={style}\r\n          mode=\"multiple\"\r\n          placeholder={Placeholder}\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={SelectedIndexs}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n          open={data.CanOpen && data.Open}\r\n          onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n        >\r\n          {elems}\r\n        </Select>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MultiSelectView)","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class EntHoverVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsElementVisible: observable,\r\n    })\r\n  }\r\n\r\n  IsElementVisible = false;\r\n\r\n  ShowElement = () => {\r\n    this.IsElementVisible =  true;\r\n  }\r\n\r\n  HideElement = () => {\r\n    this.IsElementVisible =  false;\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport EntHoverVM from \"./EntHoverVM\";\r\n\r\nclass EntHoverView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntHoverVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    if (!data.style) {\r\n      var style = this.props.style ? this.props.style : {};\r\n      if (!style.minWidth) {\r\n        style.minWidth = 150;\r\n      }\r\n      data.style = style;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div onMouseEnter={data.ShowElement} style={data.style}\r\n          onMouseLeave={data.HideElement}>\r\n          {data.IsElementVisible ? data.Element : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntHoverView)","import { SelectVM } from \"./SelectVM\";\r\n\r\nexport const get = (items, initialItem) => {\r\n  var qI = new SelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItem = initialItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './SelectVMUtil'\r\n\r\nexport class SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      selectedIndex : observable,\r\n      CanClear :observable,\r\n      open : observable,\r\n      canOpen : observable,\r\n      isDisabled : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = [];\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  initialItem = undefined\r\n  get InitialItem() {\r\n    return this.initialItem;\r\n  }\r\n  set InitialItem(v){\r\n    this.initialItem = v;\r\n    this.InitialIndex = this.GetInitialIndex();\r\n    this.SelectedIndex = this.InitialIndex;\r\n  }\r\n\r\n  initialIndex\r\n  get InitialIndex(){\r\n    if (!this.initialIndex){\r\n      this.initialIndex = this.GetInitialIndex();\r\n    }\r\n    return this.initialIndex;\r\n  }\r\n  set InitialIndex(v){\r\n    this.initialIndex = v;\r\n  }\r\n\r\n  GetInitialIndex = () => {\r\n    var index = this.Items.indexOf(this.InitialItem);\r\n    return index !== -1 ? index : null;\r\n  }\r\n\r\n  selectedIndex = undefined\r\n  get SelectedIndex(){\r\n    return this.selectedIndex;\r\n  }\r\n  set SelectedIndex(v){\r\n    this.selectedIndex = v;\r\n    this.SelectedItem = this.GetSelectedItem();\r\n  }\r\n\r\n  selectedItem\r\n  get SelectedItem (){\r\n    if (!this.selectedItem){\r\n      this.selectedItem = this.GetSelectedItem();\r\n    }\r\n    return this.selectedItem;\r\n  }\r\n  set SelectedItem (v) {\r\n    this.selectedItem = v;\r\n    if (this.OnSelectedItemChanged){\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItem = () => {\r\n    var index = this.SelectedIndex;\r\n    if (index === -1) return undefined;\r\n    return this.Items[index];\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder(){\r\n    if (!this.placeholder){\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v){\r\n    this.placeholder = v;\r\n  }\r\n\r\n  CanClear = false\r\n\r\n  Clear = () => {\r\n    this.SelectedIndex = null\r\n  }\r\n  \r\n  get DivStyle() {\r\n    return this.CanClear ? { \r\n      position: 'relative', \r\n      padding: '0 22px 0 0' \r\n    } : {};\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n\r\n  isDisabled = false\r\n  get IsDisabled(){\r\n    return this.isDisabled;\r\n  } set IsDisabled(v){\r\n    this.isDisabled = v;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class FloatItemVM {\r\n  location\r\n\r\n  className\r\n  getClassName = () => {\r\n    if (!this.className){\r\n      this.className = `float ${this.location}`;\r\n    }\r\n    return this.className\r\n  }\r\n}","import FloatItemVM from \"./FloatItemVM\";\r\n\r\nexport const get = (loc) => {\r\n  var qI = new FloatItemVM();\r\n  qI.location = loc;\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport * as floatItemVMUtil from './FloatItemVMUtil'\r\n\r\nclass FloatItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = floatItemVMUtil.get('top right', 'Test')\r\n    }else{\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className={data.getClassName()}>{this.getWrapperContent()}</span>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(FloatItemView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { SelectVM } from \"./SelectVM\";\r\nimport * as floatItemVMUtil from '../float/FloatItemVMUtil'\r\nimport FloatItemView from \"../float/FloatItemView\";\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nconst { Option } = Select;\r\n\r\nclass SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new SelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var className = this.props.className ? this.props.className : ''\r\n    var style = this.props.style ? this.props.style : { width: '100%' };\r\n    var { Placeholder, Items, SelectedIndex, InitialIndex } = data;\r\n\r\n    if (SelectedIndex === -1) {\r\n      SelectedIndex = InitialIndex;\r\n      data.InitialIndex = -1;\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined) {\r\n        id = genUtil.randomId();\r\n      } else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    var floatElem = ''\r\n    if (data.CanClear) {\r\n      var floatItemStore = floatItemVMUtil.get('right')\r\n      floatItemStore.wrapper = <Button size='small' type='primary'\r\n        onClick={data.Clear}>x</Button>\r\n\r\n      floatElem = <FloatItemView store={floatItemStore} />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={className}\r\n          style={data.DivStyle} >\r\n          {floatElem}\r\n          <Select style={style}\r\n            showSearch\r\n            placeholder={Placeholder}\r\n            optionFilterProp=\"children\"\r\n            onChange={this.onValueChange}\r\n            value={SelectedIndex}\r\n            filterOption={(input, option) =>\r\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            }\r\n            open={data.CanOpen && data.Open}\r\n            onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n            disabled={data.IsDisabled}\r\n          >\r\n            {elems}\r\n          </Select>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(SelectView)","export const inside = 'inside'\r\nexport const lower = 'lower'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ReplaceRowLocationFactoryUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport * as lt from './RRLF_LocationType'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance\r\n}\r\n\r\nexport default class ReplaceRowLocationFactory {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Location: observable,\r\n    })\r\n  }\r\n\r\n  ReferenceRow\r\n  Location = lt.inside\r\n\r\n  get Color(){\r\n    return util.GetColor(this);\r\n  }\r\n\r\n  get ButtonStyle(){\r\n    return {\r\n      width: 50,\r\n      backgroundColor: this.Color,\r\n      border: 'none'\r\n    };\r\n  }\r\n\r\n  ToggleLocation = () =>{\r\n    switch (this.Location) {\r\n      case lt.inside:\r\n        this.Location = lt.lower;\r\n        break;\r\n      case lt.lower:\r\n        this.Location = lt.inside;\r\n        break;\r\n    }\r\n  }\r\n}","import * as lt from './RRLF_LocationType'\r\n\r\nexport const GetColor = (v) => {\r\n  switch (v.Location) {\r\n    case lt.inside:\r\n      return \"#52c41a\";\r\n    case lt.lower:\r\n      return \"#faad14\";\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { Component } from \"react\";\r\nimport React from 'react'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport * as ts from '../text/TextState'\r\n\r\nclass NewInputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.contentEditable = React.createRef();\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    var data = this.state;\r\n    data.Content = e.target.value;\r\n  };\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var Content = data.Content;\r\n    var style = this.props.style ? this.props.style : {};\r\n    if (!style.minWidth) {\r\n      style.minWidth = 100\r\n      style.fontFamily = 'password'\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <ContentEditable className='ant-input' innerRef={this.contentEditable}\r\n            placeholder={data.Placeholder}\r\n            style={style}\r\n            html={Content ? Content : ''}\r\n            onChange={this.handleChange} />\r\n          : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={Content} onChange={this.handleChange} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(NewInputView)","import { makeObservable, observable, action } from 'mobx';\r\nimport TextView from '../../../../text/TextView';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil';\r\nimport * as util from './MassRowUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport { EntFilter } from '../../filter/EntFilter';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport MultiSelectView from '../../../../select/MultiSelectView';\r\nimport { Col, Row, Space, Button, Switch, message } from 'antd';\r\nimport EntHoverVM from '../../../../hover/EntHoverVM';\r\nimport EntHoverView from '../../../../hover/EntHoverView';\r\nimport { DownCircleOutlined, EnterOutlined, UpCircleOutlined } from '@ant-design/icons';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport ReplaceRowLocationFactory from './location/ReplaceRowLocationFactory';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport InputView from '../../../../input/InputView';\r\nimport * as mif from '../item/MassItemField'\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as mr_f_it from './MassRow_Field_InputType'\r\nimport NewInputView from '../../../../input/NewInputView';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class MassRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      rank: observable,\r\n      isShowSub: observable,\r\n      isHaveSub: observable,\r\n      IsToolVisible: observable,\r\n      SubItems: observable,\r\n      IsModalVisible: observable,\r\n      title: observable,\r\n      FieldInputType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  supItem\r\n  get SupItem() {\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v) {\r\n    this.supItem = v;\r\n    this.CurrentList = undefined;\r\n    this.Rank = undefined;\r\n  }\r\n\r\n  currentList\r\n  get CurrentList() {\r\n    if (!this.currentList) {\r\n      this.currentList = this.SupItem ? this.SupItem.SubItems : this.Table.MainRows;\r\n    }\r\n    return this.currentList;\r\n  }\r\n  set CurrentList(v) {\r\n    this.currentList = v;\r\n  }\r\n\r\n  get Table() {\r\n    return this.Dict;\r\n  }\r\n\r\n  SubItems = []\r\n\r\n  get AllItems() {\r\n    var list = [];\r\n    list.push(this);\r\n    this.SubItems.forEach(x => {\r\n      list.push.apply(list, x.AllItems)\r\n    });\r\n    return list;\r\n  }\r\n\r\n  Cells = []\r\n\r\n  get Items() {\r\n    var items = this.Cells.reduce((a, b) => a.concat(b.Items), []);\r\n    items = items.filter((x, i, a) => a.indexOf(x) === i);\r\n    return items;\r\n  }\r\n\r\n  massGroupItem\r\n  get MassGroupItem() {\r\n    return this.massGroupItem;\r\n  }\r\n  set MassGroupItem(v) {\r\n    this.massGroupItem = v;\r\n    if (v) {\r\n      var title = v.GetItem(this.FullValue).Title;\r\n      this.Title = title;\r\n    }\r\n  }\r\n\r\n  field\r\n  get Field() {\r\n    if (!this.field) {\r\n      this.field = this.MassGroupItem ? this.MassGroupItem.Field : undefined;\r\n    }\r\n    return this.field;\r\n  } set Field(v) {\r\n    this.field = v;\r\n  }\r\n\r\n  ReplaceMGI\r\n\r\n  get OrderMGI() {\r\n    return this.ReplaceMGI ? this.ReplaceMGI : this.MassGroupItem;\r\n  }\r\n\r\n  subMassGroupItem\r\n  get SubMassGroupItem() {\r\n    if (!this.subMassGroupItem) {\r\n      this.subMassGroupItem = util.GetSubMassGroupItem(this);\r\n    }\r\n    return this.subMassGroupItem\r\n  }\r\n  set SubMassGroupItem(v) {\r\n    this.subMassGroupItem = v;\r\n  }\r\n\r\n  subFields\r\n  get SubFields() {\r\n    if (!this.subFields) {\r\n      this.subFields = util.GetSubFields(this);\r\n    }\r\n    return this.subFields;\r\n  }\r\n  set SubFields(v) {\r\n    this.subFields = v;\r\n  }\r\n\r\n  TempSubFields\r\n\r\n  isShowSub = true\r\n  get IsShowSub() {\r\n    return this.isShowSub;\r\n  }\r\n  set IsShowSub(v) {\r\n    this.isShowSub = v;\r\n    this.ToggleButtonContentVM.Content = util.GetToggleButtonContent(this);\r\n  }\r\n\r\n  toggleButtonContent\r\n  get ToggleButtonContent() {\r\n    if (!this.toggleButtonContent) {\r\n      this.toggleButtonContent = util.GetToggleButtonContent(this);\r\n    }\r\n    return this.toggleButtonContent;\r\n  }\r\n  set ToggleButtonContent(v) {\r\n    this.toggleButtonContent = v;\r\n  }\r\n\r\n  toggleButtonContentVM\r\n  get ToggleButtonContentVM() {\r\n    if (!this.toggleButtonContentVM) {\r\n      var obj = this.toggleButtonContentVM = textVMUtil.get(this.ToggleButtonContent);\r\n      obj.OnSetContent = (v) => this.ToggleButtonContent = v;\r\n    }\r\n    return this.toggleButtonContentVM;\r\n  }\r\n\r\n  rank = undefined\r\n  get Rank() {\r\n    if (this.rank === undefined) {\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v) {\r\n    this.rank = v;\r\n    this.SubItems.forEach(x => x.Rank = undefined);\r\n  }\r\n\r\n  isHaveSub = undefined\r\n  get IsHaveSub() {\r\n    if (!this.isHaveSub) {\r\n      this.isHaveSub = util.GetIsHaveSub(this);\r\n    }\r\n    return this.isHaveSub;\r\n  }\r\n  set IsHaveSub(v) {\r\n    this.isHaveSub = v;\r\n  }\r\n\r\n  get Style() {\r\n    return util.GetStyle(this);\r\n  }\r\n\r\n  IsToolVisible = false\r\n\r\n  FieldInputType = mr_f_it.select\r\n\r\n  Toggle_FieldInputType = () => {\r\n    switch (this.FieldInputType) {\r\n      case mr_f_it.select:\r\n        this.TempField = this.FieldInputVM.Content;\r\n        this.FieldInputType = mr_f_it.input;\r\n        break;\r\n      case mr_f_it.input:\r\n        this.FieldSelectVM.InitialItem = this.TempField\r\n        this.FieldInputType = mr_f_it.select;\r\n        break;\r\n    }\r\n  }\r\n\r\n  TempField\r\n\r\n  fieldInputVM\r\n  get FieldInputVM() {\r\n    if (!this.fieldInputVM) {\r\n      var obj = this.fieldInputVM = textVMUtil.get();\r\n      obj.onSetContent = (v) => this.TempField = v;\r\n    }\r\n    return this.fieldInputVM;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM() {\r\n    if (!this.fieldSelectVM) {\r\n      this.fieldSelectVM = util.GetFieldSelectVM(this);\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get FieldInputElement() {\r\n    return <>\r\n      <div className='massrow__fieldinput_wrapper'>\r\n        <div className='massrow__fieldinput'>\r\n          {this.FieldInputType === mr_f_it.select ?\r\n            <SelectView store={this.FieldSelectVM} /> :\r\n            <NewInputView store={this.FieldInputVM} />\r\n          }\r\n        </div>\r\n        {this.IsCreatedByUser ?\r\n          <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n            checked={this.FieldInputType === mr_f_it.select}\r\n            onChange={this.Toggle_FieldInputType} />\r\n          : ''}\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  subFieldSelectVM\r\n  get SubFieldSelectVM() {\r\n    if (!this.subFieldSelectVM) {\r\n      this.subFieldSelectVM = util.GetSubFieldSelectVM(this);\r\n    }\r\n    return this.subFieldSelectVM;\r\n  }\r\n\r\n  title = undefined\r\n  get Title() {\r\n    // if (!this.title) {\r\n    //   util.Handle_Title(this);\r\n    // }\r\n    return this.title;\r\n  }\r\n  set Title(v) {\r\n    this.title = v;\r\n    this.TitleVM.Content = v;\r\n  }\r\n\r\n  get LocationStorageList() {\r\n    return this.Table.AllRows;\r\n  }\r\n\r\n  locationSelectVM\r\n  get LocationSelectVM() {\r\n    if (!this.locationSelectVM) {\r\n      this.locationSelectVM = util.GetLocationSelectVM(this);\r\n    }\r\n    return this.locationSelectVM;\r\n  }\r\n\r\n  titleVM\r\n  get TitleVM() {\r\n    if (!this.titleVM) {\r\n      this.titleVM = textVMUtil.get(this.Title, 'tiêu đề');\r\n    }\r\n    return this.titleVM;\r\n  }\r\n\r\n  // Value lồng giữa Row hiện tại và SupRow\r\n  // Ví dụ: concrete__Tầng 6__Dầm\r\n  FullValue\r\n\r\n  GetCellByColumn = (col) => {\r\n    var index = this.Cells.findIndex(x => x.Column === col);\r\n    return index !== -1 ? this.Cells[index] : undefined;\r\n  }\r\n\r\n  UpdateData = () => {\r\n    this.Rank = util.GetRank(this);\r\n    this.IsHaveSub = util.GetIsHaveSub(this);\r\n\r\n    this.SubItems = util.Order(this.SubItems);\r\n    this.SubItems.forEach(x => x.UpdateData());\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    this.IsShowSub = !this.IsShowSub;\r\n  }\r\n\r\n  SetSubFields = () => {\r\n    var tempSubFields = this.TempSubFields ? this.TempSubFields : [];\r\n\r\n    var isSame = true;\r\n    if (this.SubFields.length !== tempSubFields.length) {\r\n      isSame = false;\r\n    } else {\r\n      this.SubFields.forEach((x, i) => {\r\n        if (isSame && x !== tempSubFields[i]) {\r\n          isSame = false;\r\n        }\r\n      })\r\n    }\r\n    if (isSame) return;\r\n    this.SubFields = tempSubFields;\r\n\r\n    var filter = new EntFilter();\r\n    filter.ValueType = fvt.bystring;\r\n    filter.StringFilterType = sft.byequal;\r\n    filter.Values = [this.FullValue];\r\n\r\n    var supMgi = this.MassGroupItem;\r\n\r\n    var mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n\r\n    var subMgis = mgc.Items = tempSubFields.map(x => mgiUtil.get(x, null, mgc));\r\n\r\n    var subComps = supMgi.SubComponents;\r\n    if (this.SubMassGroupComponent) {\r\n      var index = subComps.indexOf(this.SubMassGroupComponent);\r\n      subComps[index] = mgc;\r\n    } else {\r\n      subComps.push(mgc);\r\n    }\r\n\r\n    this.SubMassGroupComponent = mgc;\r\n    this.SubItems = [];\r\n    this.SubMassGroupItem = undefined;\r\n\r\n    if (subMgis.length !== 0) {\r\n      var table = this.Table;\r\n      this.Items.forEach(x => {\r\n        // Xử lý Item theo ColumnField: Project ... (single value)\r\n        // hoặc theo Phase (multiple values)\r\n        switch (table.ColumnField) {\r\n          case mif.Phase:\r\n            x.ValidPhasesByInput.forEach(y =>\r\n              table.HandleItem(x, y, mgc, this));\r\n            break;\r\n          default:\r\n            table.HandleItem(x, x.GetValue(table.ColumnField), mgc, this);\r\n            break;\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  MoveUp = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (0 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index - 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index - 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  MoveDown = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (list.length - 1 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index + 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index + 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  AddSub = () => {\r\n    util.Add(this, this.Table);\r\n  }\r\n\r\n  Delete = () => {\r\n    var supItem = this.SupItem;\r\n    var list = this.CurrentList;\r\n\r\n    if (this.IsCreatedByUser) {\r\n      this.MassGroupItem.GetItem(this.FullValue).Delete();\r\n    } else {\r\n      this.MassGroupItem.AddNotIncludeValue(this.FullValue);\r\n    }\r\n\r\n    list.splice(this.Index, 1);\r\n\r\n    if (supItem) {\r\n      supItem.Cells.forEach(x => {\r\n        x.SubCells = x.GetSubCells();\r\n\r\n        var totalValues = x.SubCells ?\r\n          x.SubCells.map(x => x.TotalValue).filter(x => x) : [];\r\n        x.TotalValue = totalValues.reduce((a, b) => a + b, 0);\r\n\r\n        x.ContentVM.Content = x.ValueString;\r\n      })\r\n    }\r\n  }\r\n\r\n  replaceFactory\r\n  get ReplaceFactory() {\r\n    if (!this.replaceFactory) {\r\n      this.replaceFactory = new ReplaceRowLocationFactory();\r\n    }\r\n    return this.replaceFactory;\r\n  }\r\n\r\n  ReplaceOK = () => {\r\n    var factory = this.ReplaceFactory;\r\n    var refRow = factory.ReferenceRow;\r\n\r\n    if (!refRow) return;\r\n\r\n    var loc = factory.Location;\r\n    if ((refRow === this && loc === rrlf_lt.lower) ||\r\n      (refRow === this.SupItem && loc === rrlf_lt.inside)) {\r\n      return\r\n    }\r\n\r\n    this.Replace(refRow, loc);\r\n\r\n    factory.Location = rrlf_lt.inside;\r\n  }\r\n\r\n  Replace = (refRow, loc) => {\r\n    // Save data\r\n    var oldMgi = this.MassGroupItem;\r\n    var supRow = undefined;\r\n    var newMgi = undefined;\r\n\r\n    switch (loc) {\r\n      case rrlf_lt.inside:\r\n        supRow = refRow;\r\n        break;\r\n      case rrlf_lt.lower:\r\n        supRow = refRow.SupItem;\r\n        break;\r\n    }\r\n\r\n    //var newMgi = supRow ? supRow.SubMassGroupItem : this.Table.MainMGI;\r\n    var newMgi = supRow ?\r\n      (supRow.SubMassGroupItem ? supRow.SubMassGroupItem :\r\n        util.CreateSubMassGroupItem(supRow))\r\n      : this.Table.MainMGI;\r\n    oldMgi.GetItem(this.FullValue).NewMGI = newMgi;\r\n\r\n    this.ReplaceMGI = newMgi;\r\n\r\n    // Remove SupRow cũ trong tập hợp cũ\r\n    this.CurrentList.splice(this.Index, 1);\r\n\r\n    // Thiết lập SupRow\r\n    this.SupItem = supRow;\r\n    var list = this.CurrentList;\r\n    list.push(this);\r\n\r\n    this.IsShowSubFieldSelect = false;\r\n  }\r\n\r\n  IsModalVisible = false\r\n\r\n  OpenModal = () => {\r\n    this.IsModalVisible = true\r\n\r\n    // Set tiêu đề hiện tại\r\n    this.TitleVM.Content = this.Title;\r\n\r\n    // Set giá trị nhóm hiện tại\r\n    this.FieldInputVM.Content = this.Field\r\n    this.FieldSelectVM.InitialItem = this.Field;\r\n    this.TempField = this.Field;\r\n\r\n    // Set giá trị phân nhóm hiện tại\r\n    var subFieldSelectVM = this.SubFieldSelectVM;\r\n    subFieldSelectVM.InitialItems = this.SubFields;\r\n\r\n    var locSelectVM = this.LocationSelectVM;\r\n    locSelectVM.Items = this.LocationStorageList\r\n    locSelectVM.InitialItem = undefined;\r\n  }\r\n\r\n  ModalOK = () => {\r\n    if (!this.TempField || this.TempField.length === 0) {\r\n      message.warning('Thông tin nhóm hiện tại đang để trống!');\r\n      return;\r\n    }\r\n\r\n    this.IsModalVisible = false;\r\n\r\n    // Thiết lập tiêu đề\r\n    var title = this.TitleVM.Content;\r\n    this.Title = title;\r\n    this.MassGroupItem.GetItem(this.FullValue).Title = title;\r\n\r\n    // Thiết lập nhóm hiện tại\r\n    if (this.Field !== this.TempField) {\r\n      this.Field = this.TempField;\r\n    }\r\n\r\n    // Thiết lập phân nhóm hiện tại\r\n    this.SetSubFields();\r\n\r\n    // Dịch chuyển vị trí\r\n    this.ReplaceOK();\r\n  }\r\n\r\n  ModalCancel = () => {\r\n    this.IsModalVisible = false;\r\n  }\r\n\r\n  PMS_WorkPackages = [\r\n    'THI CÔNG CHÍNH (HBC)',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM (PHƯƠNG ...)',\r\n    'Kết thúc thô - Bàn giao'\r\n  ]\r\n\r\n  pms_WorkPackages_SelectVM\r\n  get PMS_WorkPackages_SelectVM() {\r\n    if (!this.pms_WorkPackages_SelectVM) {\r\n      this.pms_WorkPackages_SelectVM = selectUtil.get(this.PMS_WorkPackages);\r\n    }\r\n    return this.pms_WorkPackages_SelectVM;\r\n  }\r\n\r\n  get ModalElement() {\r\n    var factory = this.ReplaceFactory;\r\n\r\n    return <Modal title={this.Title} visible={this.IsModalVisible}\r\n      width={700}\r\n      onOk={this.ModalOK} onCancel={this.ModalCancel}>\r\n      {/* Tiêu đề */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex=\"165px\">\r\n          <b> Tiêu đề:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <InputView store={this.TitleVM} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập nhóm hiện tại */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex=\"165px\">\r\n          <b> Nhóm hiện tại:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          {this.FieldInputElement}\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập phân nhóm */}\r\n      {!this.IsCreatedByUser ? <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex=\"165px\">\r\n          <b> Thiết lập phân nhóm:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <MultiSelectView store={this.SubFieldSelectVM} />\r\n        </Col>\r\n      </Row> : ''}\r\n\r\n      {/* Đổi vị trí */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex=\"165px\">\r\n          <b> Đổi vị trí:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <Row>\r\n            <Col flex='auto'>\r\n              <SelectView store={this.LocationSelectVM} />\r\n            </Col>\r\n            <Col>\r\n              <Button type='primary' size='small'\r\n                style={factory.ButtonStyle} onClick={factory.ToggleLocation}\r\n              >{factory.Location}</Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Gói công việc PMS */}\r\n      {/* <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex=\"165px\">\r\n          <b> Gói công việc PMS:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <SelectView store={this.PMS_WorkPackages_SelectVM} />\r\n        </Col>\r\n      </Row> */}\r\n    </Modal>\r\n  }\r\n\r\n  get HoverToolElement() {\r\n    var obj = new EntHoverVM();\r\n    obj.Element = this.ToolElement;\r\n    return <EntHoverView store={obj} style={{ display: 'flex', marginLeft: 20 }} />\r\n  }\r\n\r\n  get ToolElement() {\r\n    return <>\r\n      <Button size='small' type='primary'\r\n        style={{ backgroundColor: '#52c41a', border: 'none' }}\r\n        onClick={this.MoveUp}>\r\n        <UpCircleOutlined />\r\n      </Button>\r\n      <Button size='small' type='primary'\r\n        style={{ backgroundColor: '#52c41a', border: 'none' }}\r\n        onClick={this.MoveDown}>\r\n        <DownCircleOutlined />\r\n      </Button>\r\n\r\n      <Button type='primary' size='small'\r\n        style={{ backgroundColor: '#faad14', border: 'none' }}\r\n        onClick={this.OpenModal}>...</Button>\r\n\r\n      <Button size='small' type='primary'\r\n        style={{ backgroundColor: '#52c41a', border: 'none' }}\r\n        onClick={this.AddSub}>+</Button>\r\n      <Button type='primary' size='small' danger\r\n        onClick={this.Delete}>x</Button>\r\n    </>\r\n  }\r\n\r\n  // Excel Export\r\n  get ExportInfo() {\r\n    var key = this.Field;\r\n    var info = {\r\n      Key: key,\r\n      Value: this.Title\r\n    }\r\n\r\n    var list\r\n    if (!this.SupItem) {\r\n      list = [info]\r\n    } else {\r\n      list = [...this.SupItem.ExportInfo]\r\n      list.push(info);\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportValue(){\r\n    var list = []\r\n    this.Cells.forEach(x => {\r\n      list.push({\r\n        Key: x.Column.Name,\r\n        Value: x.TotalValue\r\n      })\r\n    })\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportData(){\r\n    return {\r\n      Infos: this.ExportInfo,\r\n      Values: this.ExportValue\r\n    }\r\n  }\r\n}","import { PMData } from \"../../../single/model/PMData\";\r\nimport MassRow from \"./MassRow\";\r\nimport * as multiSelectUtil from '../../../../select/MultiSelectVMUtil';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport * as mgi_iUtil from './rowgroup/MGI_ItemUtil'\r\nimport * as mgii_ct from './rowgroup/MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../util/generalUtil';\r\nimport { EntFilter } from \"../../filter/EntFilter\";\r\nimport MassGroupComponent from \"./rowgroup/MassGroupComponent\";\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mif from '../item/MassItemField'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassRow();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  return q.SupItem ? q.SupItem.Rank + 1 : 0;\r\n}\r\n\r\nexport const GetStyle = (q) => {\r\n  return {\r\n    display: 'flex',\r\n    marginLeft: q.Rank * 20\r\n  }\r\n}\r\n\r\nexport const GetIsHaveSub = (q) => {\r\n  return q.SubItems.length !== 0;\r\n}\r\n\r\nexport const GetToggleButtonContent = (q) => {\r\n  return q.IsShowSub ? '-' : '+';\r\n}\r\n\r\nexport const GetFieldSelectVM = (q) => {\r\n  var storageList = pmData().MIFs_ForMassGroup;\r\n  var obj = selectUtil.get(storageList, q.Field);\r\n  obj.Placeholder = 'chọn nhóm'\r\n\r\n  obj.IsDisabled = !q.IsCreatedByUser\r\n\r\n  obj.OnSelectedItemChanged = (v) => q.TempField = v;\r\n  return obj;\r\n}\r\n\r\nexport const GetSubFieldSelectVM = (q) => {\r\n  var storageList = pmData().MIFs_ForMassGroup;\r\n  var obj = multiSelectUtil.get(storageList, undefined);\r\n  obj.Placeholder = 'chọn phân nhóm'\r\n  obj.OnSelectedItemChanged = (v) => q.TempSubFields = v;\r\n  return obj;\r\n}\r\n\r\nexport const Order = (list) => {\r\n  if (list.length === 0) return list;\r\n\r\n  var firstRow = list[0]\r\n  var mgi = firstRow.OrderMGI;\r\n  if (!mgi.IsHaveValueOrder) return list;\r\n\r\n  var orderValues = mgi.OrderValues;\r\n  return list.sort((a, b) => {\r\n    return orderValues.indexOf(a.FullValue) - orderValues.indexOf(b.FullValue);\r\n  });\r\n}\r\n\r\nexport const Handle_Title = (q) => {\r\n  var field = q.MassGroupItem.Field;\r\n  if (field !== mif.level) {\r\n    q.Title = q.Name;\r\n  } else {\r\n    // Xử lý phần tiêu đề của Row dựa trên Name và thông tin Tầng điển hình\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = q.Cells.length;\r\n\r\n    const handle_LS = (ls) => {\r\n      if (ls.Description) {\r\n        q.Title = ls.Description;\r\n      } else {\r\n        ls.OnGetLevelStorageList_Funcs.push(() => {\r\n          q.Title = ls.Description;\r\n        })\r\n      }\r\n    }\r\n\r\n    const handle_Val = (val) => {\r\n      handledCount++;\r\n      list.push.apply(list, val);\r\n      if (handledCount === count) {\r\n        if (list.length === 1) {\r\n          handle_LS(list[0]);\r\n        } else {\r\n          q.Title = q.Name;\r\n        }\r\n      }\r\n    }\r\n\r\n    q.Cells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        x.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n          handle_Val(x.TLS_LevelGroups);\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetLocationSelectVM = (q) => {\r\n  var obj = selectUtil.get([], undefined);\r\n  obj.Placeholder = 'chọn vị trí'\r\n  obj.TitleRender = (item) => {\r\n    var marginLeft = item.Rank * 15;\r\n    return <div\r\n      style={{ marginLeft }}>\r\n      {item.Title}\r\n    </div>\r\n  }\r\n  obj.OnSelectedItemChanged = (v) => {\r\n    var factory = q.ReplaceFactory;\r\n    factory.ReferenceRow = v;\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport const GetSubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].MassGroupItem;\r\n}\r\n\r\nexport const GetSubFields = (q) => {\r\n  var subMGI = q.SubMassGroupItem;\r\n  if (!subMGI) return [];\r\n  var mgis = subMGI.SupComponent.Items;\r\n\r\n  var lastValidIndex = -1;\r\n  var isValidHandle = true\r\n  mgis.forEach((x, i) => {\r\n    if (isValidHandle && x.HaveMassItemSubComponents.length === 0) {\r\n      lastValidIndex = i;\r\n    } else {\r\n      isValidHandle = false;\r\n    }\r\n  })\r\n\r\n  var currentIndex = mgis.indexOf(q.MassGroupItem);\r\n  if (lastValidIndex === -1) return [subMGI.Field];\r\n  var fields = mgis.filter((x, i) =>\r\n    (currentIndex === -1 || currentIndex < i) &&\r\n    i <= lastValidIndex)\r\n    .map(x => x.Field);\r\n  return fields;\r\n}\r\n\r\nexport const CreateSubMassGroupItem = (q) => {\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bystring;\r\n  filter.StringFilterType = sft.byequal;\r\n  filter.Values = [q.FullValue];\r\n\r\n  var supMgi = q.MassGroupItem;\r\n\r\n  var mgc = undefined;\r\n  var mgcIndex = supMgi.SubComponents\r\n    .findIndex(x => genUtil.IsSameValues(x.Filter.Values, filter.Values));\r\n\r\n  if (mgcIndex !== -1) {\r\n    mgc = supMgi.SubComponents[mgcIndex]\r\n  } else {\r\n    mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n    supMgi.SubComponents.push(mgc);\r\n  }\r\n\r\n  var mgi = mgiUtil.get(null, null, mgc);\r\n  mgc.Items = [mgi];\r\n\r\n  q.SubMassGroupItem = mgi;\r\n  return mgi;\r\n}\r\n\r\nexport const Add = (supRow, table) => {\r\n  var mgi = supRow ?\r\n    (supRow.SubMassGroupItem ? supRow.SubMassGroupItem :\r\n      CreateSubMassGroupItem(supRow))\r\n    : table.MainMGI;\r\n\r\n  var mgi_I = mgi_iUtil.create(mgi, mgii_ct.byuser);\r\n  mgi.Items.push(mgi_I);\r\n\r\n  var row = get(mgi_I.Value, table);\r\n  row.FullValue = mgi_I.Value;\r\n  row.IsCreatedByUser = true;\r\n  row.MassGroupItem = mgi;\r\n\r\n  row.SupItem = supRow;\r\n  row.CurrentList.push(row);\r\n  return row;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as mif from '../item/MassItemField'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as util from './MassCellUtil'\r\nimport TextView from '../../../../text/TextView';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueColor: observable,\r\n      tdBgColor: observable,\r\n      //totalValue: observable,\r\n      isHaveWarning: observable,\r\n      tls_LevelGroup_Descriptions: observable,\r\n      vcs_Item: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Column.Index;\r\n  }\r\n\r\n  items = []\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  unit\r\n  get Unit() {\r\n    if (!this.unit) {\r\n      this.unit = this.GetUnit();\r\n    }\r\n    return this.unit;\r\n  }\r\n  set Unit(v) {\r\n    this.unit = v;\r\n  }\r\n\r\n  GetUnit = () => {\r\n    if (this.SubCells) {\r\n      var unit = undefined;\r\n      this.SubCells.forEach(x => {\r\n        if (x.Unit) {\r\n          unit = x.Unit;\r\n        }\r\n      })\r\n      return unit;\r\n    }\r\n    return this.Items && this.Items.length !== 0 ? this.Items[0].Unit : undefined;\r\n  }\r\n\r\n  unitVM\r\n  get UnitVM() {\r\n    if (!this.unitVM) {\r\n      this.unitVM = textVMUtil.get(this.Unit);\r\n      this.unitVM.OnSetContent = (v) => this.Unit = v;\r\n    }\r\n    return this.unitVM;\r\n  }\r\n\r\n  OnGet_TotalValue_Func_Dict = []\r\n  set Get_TotalValue(v) {\r\n    this.OnGet_TotalValue_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  totalValue = undefined\r\n  get TotalValue() {\r\n    // Chỉnh sửa Value thành FullValue (chứa khối lượng tầng điển hình)\r\n    //this.TotalValue = this.GetTotalValue();\r\n    if (this.totalValue === undefined) {\r\n      util.Handle_TotalValue(this);\r\n    }\r\n    return this.totalValue;\r\n  }\r\n  set TotalValue(v) {\r\n    this.totalValue = v;\r\n    this.Get_TotalValue = true;\r\n    // Thiết lập phần màu sắc đối với Phase\r\n    if (this.IsHaveVCS_Item) {\r\n      util.Handle_VCS_Item(this);\r\n    }\r\n\r\n    // Thiết lập giá trị Cell\r\n    this.ContentVM.Content = this.ValueString;\r\n  }\r\n\r\n  contentVM\r\n  get ContentVM() {\r\n    if (!this.contentVM) {\r\n      this.contentVM = textVMUtil.get(this.ValueString);\r\n    }\r\n    return this.contentVM;\r\n  }\r\n\r\n  get ValueString() {\r\n    if (this.Row.IsCreatedByUser) return '';\r\n    var totalValue = this.TotalValue;\r\n    if (!totalValue) return '';\r\n\r\n    var unit = this.Unit ? this.Unit : '';\r\n\r\n    var formatValue = totalValue.toLocaleString('en-US', { maximumFractionDigits: 2 });\r\n    return `${formatValue} ${unit}`;\r\n  }\r\n\r\n  subCells\r\n  get SubCells() {\r\n    if (!this.subCells) {\r\n      this.subCells = this.GetSubCells();\r\n    }\r\n    return this.subCells;\r\n  }\r\n  set SubCells(v) {\r\n    this.subCells = v;\r\n  }\r\n\r\n  GetSubCells = () => {\r\n    var subRows = this.Row.SubItems;\r\n    if (subRows && subRows.length !== 0) {\r\n      var col = this.Column;\r\n      return subRows.map(x => x.GetCellByColumn(col))\r\n        .filter(x => x !== undefined);\r\n    }\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = util.GetMassType(this);\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(`${this.Column.Name} - ${this.Row.Name} - ${this.TotalValue}`)\r\n  }\r\n\r\n  UpdateData = () => {\r\n    if (this.Row.IsCreatedByUser) {\r\n      return;\r\n    }\r\n\r\n    this.SubCells = this.GetSubCells();\r\n\r\n    this.Unit = this.GetUnit();\r\n    this.MassType = util.GetMassType(this);\r\n    this.IsHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n  }\r\n\r\n  ShowDetail = () => {\r\n    var isHash = true;\r\n    var url = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/massdetail`;\r\n    var getUrl = (v) => `${url}/${v}`;\r\n    var openTabFunc = (v) =>\r\n      window.open(getUrl(v), \"_blank\");\r\n\r\n    if (!this.viewDetailId) {\r\n      this.GetViewDetailId(data => {\r\n        var _id = this.viewDetailId = data._id;\r\n        openTabFunc(_id);\r\n      })\r\n    } else {\r\n      openTabFunc(this.viewDetailId);\r\n    }\r\n  }\r\n\r\n  viewDetailId\r\n\r\n  get AllItems() {\r\n    if (this.SubCells) {\r\n      return this.SubCells.map(x => x.Items).reduce((a, b) => a.concat(b), []);\r\n    }\r\n    return this.Items;\r\n  }\r\n\r\n  isHaveVCS_Item\r\n  get IsHaveVCS_Item() {\r\n    if (!this.isHaveVCS_Item) {\r\n      this.isHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n    }\r\n    return this.isHaveVCS_Item;\r\n  }\r\n  set IsHaveVCS_Item(v) {\r\n    this.isHaveVCS_Item = v;\r\n  }\r\n\r\n  vcs_Item = undefined\r\n  get VCS_Item() {\r\n    return this.vcs_Item;\r\n  }\r\n  set VCS_Item(v) {\r\n    this.vcs_Item = v;\r\n\r\n    this.ValueColor = util.GetValueColor(this);\r\n    this.TDBgColor = util.GetTDBgColor(this)\r\n  }\r\n\r\n  valueColor = '#1890ff'\r\n  get ValueColor() {\r\n    return this.valueColor;\r\n  }\r\n  set ValueColor(v) {\r\n    this.valueColor = v\r\n  }\r\n\r\n  tdBgColor = undefined\r\n  get TDBgColor() {\r\n    return this.tdBgColor;\r\n  }\r\n  set TDBgColor(v) {\r\n    this.tdBgColor = v;\r\n  }\r\n\r\n  get AStyle() {\r\n    return {\r\n      color: this.ValueColor,\r\n      fontWeight: 'bold'\r\n    }\r\n  }\r\n\r\n  get TDStyle() {\r\n    return {\r\n      backgroundColor: this.TDBgColor\r\n    }\r\n  }\r\n\r\n  ApiData = () => {\r\n    var massIds = this.AllItems.map(x => x._id);\r\n    return {\r\n      massType: this.MassType,\r\n      massIds\r\n    };\r\n  }\r\n\r\n  GetViewDetailId = (handle) => {\r\n    var apiData = this.ApiData();\r\n    var url = \"https://api.bimdev.vn/api/hbdv/updatemass\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => handle(data))\r\n  }\r\n\r\n  OnGet_TLS_LevelGroups_Func_Dict = []\r\n  set Get_TLS_LevelGroups(v) {\r\n    this.OnGet_TLS_LevelGroups_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  tls_LevelGroups\r\n  get TLS_LevelGroups() {\r\n    if (!this.tls_LevelGroups) {\r\n      util.Handle_TLS_LevelGroups(this);\r\n    }\r\n    return this.tls_LevelGroups;\r\n  } set TLS_LevelGroups(v) {\r\n    this.tls_LevelGroups = v;\r\n    this.Get_TLS_LevelGroups = true;\r\n  }\r\n\r\n  isHaveWarning = undefined\r\n  get IsHaveWarning() {\r\n    if (this.isHaveWarning === undefined) {\r\n      this.isHaveWarning = util.GetIsHaveWarning(this);\r\n    }\r\n    return this.isHaveWarning;\r\n  } set IsHaveWarning(v) {\r\n    this.isHaveWarning = v;\r\n  }\r\n\r\n  tls_LevelGroup_Descriptions = undefined\r\n  get TLS_LevelGroup_Descriptions() {\r\n    if (!this.tls_LevelGroup_Descriptions) {\r\n      util.Handle_TLS_LevelGroup_Descriptions(this);\r\n    }\r\n    return this.tls_LevelGroup_Descriptions;\r\n  } set TLS_LevelGroup_Descriptions(v) {\r\n    this.tls_LevelGroup_Descriptions = v;\r\n  }\r\n}","import Column from \"antd/lib/table/Column\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassCell from \"./MassCell\"\r\nimport * as mif from '../item/MassItemField'\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (col, row, dict) => {\r\n  var qI = new MassCell();\r\n  qI.Column = col;\r\n  qI.Row = row;\r\n  qI.Dict = dict;\r\n\r\n  col.Cells.push(qI);\r\n  row.Cells.push(qI);\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetIsHaveVCS_Item = (q) => {\r\n  return q.Dict.ColumnField === mif.Phase\r\n    && pmData().MassResultComp.Phases.length === 2\r\n    && q.ColumnIndex === 1;\r\n}\r\n\r\nexport const GetValueColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return '#FFFFFF';\r\n  } else {\r\n    return '#1890ff';\r\n  }\r\n}\r\n\r\nexport const GetTDBgColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return q.VCS_Item.Color;\r\n  } else {\r\n    return '#FFFFFF';\r\n  }\r\n}\r\n\r\n// Liên quan tới việc lấy TotalValue\r\nexport const Handle_VCS_Item = (q) => {\r\n  var list = pmData().VersionCompareSetting.Items;\r\n\r\n  var cells = q.Row.Cells;\r\n  var compareIndex = cells.findIndex(x => x.ColumnIndex === 0);\r\n  if (compareIndex === -1) {\r\n    q.VCS_Item = undefined;\r\n    return\r\n  }\r\n  var compareItem = cells[compareIndex];\r\n\r\n  const getItem = () => {\r\n    var ratio = q.TotalValue / compareItem.TotalValue;\r\n    var index = list\r\n      .findIndex(x => filterUtil.IsValid(x.Filter, ratio));\r\n    return index !== -1 ? list[index] : undefined;\r\n  }\r\n\r\n  if (compareItem.TotalValue !== undefined) {\r\n    q.VCS_Item = getItem();\r\n  } else {\r\n    genUtil.Add(compareItem.OnGet_TotalValue_Func_Dict, () =>\r\n      q.VCS_Item = getItem())\r\n  }\r\n}\r\n\r\nexport const GetMassType = (q) => {\r\n  var massType = undefined\r\n  if (q.SubCells) {\r\n    var isPending = true;\r\n    q.SubCells.forEach(x => {\r\n      if (isPending && x.MassType) {\r\n        massType = x.MassType;\r\n        isPending = false;\r\n      }\r\n    })\r\n  } else {\r\n    if (q.Items && q.Items.length > 0) {\r\n      massType = q.Items[0].MassType;\r\n    }\r\n  }\r\n  return massType;\r\n}\r\n\r\nexport const Handle_TLS_LevelGroups = (q) => {\r\n  if (q.IsGet_TLS_LevelGroups) return undefined;\r\n  q.IsGet_TLS_LevelGroups = true;\r\n\r\n  var list = [];\r\n  var handledCount = 0;\r\n  var count = q.SubCells ?\r\n    q.SubCells.length : q.Items.length;\r\n\r\n  const checkadd_Val = (val, list) => {\r\n    if (list.findIndex(x => x.id === val.id) === -1) {\r\n      list.push(val);\r\n    }\r\n  }\r\n\r\n  const handle_Val = (val) => {\r\n    handledCount++;\r\n    if (val) {\r\n      if (Array.isArray(val)) {\r\n        val.forEach(x => checkadd_Val(x, list));\r\n      } else {\r\n        checkadd_Val(val, list)\r\n      }\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroups = list;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        genUtil.Add(x.OnGet_TLS_LevelGroups_Func_Dict,\r\n          () => handle_Val(x.TLS_LevelGroup));\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.TLS_LevelGroup || targetObj.Get_TLS_LevelGroup) {\r\n        handle_Val(targetObj.TLS_LevelGroup);\r\n      } else {\r\n        genUtil.Add(targetObj.OnGet_TLS_LevelGroup_Func_Dict,\r\n          () => handle_Val(targetObj.TLS_LevelGroup));\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const Handle_TotalValue = (q) => {\r\n  if (q.IsGet_TotalValue) return undefined;\r\n  q.IsGet_TotalValue = true;\r\n\r\n  var checkedList = [];\r\n  var totalVal = 0;\r\n  var handledCount = 0;\r\n  var count = q.SubCells ?\r\n    q.SubCells.length : q.Items.length;\r\n\r\n  const handle_Val = (val) => {\r\n    handledCount++;\r\n\r\n    if (!Number.isNaN(val)) {\r\n      totalVal += val;\r\n    }\r\n    checkedList.push(val);\r\n\r\n    if (handledCount === count) {\r\n      q.TotalValue = totalVal;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TotalValue) {\r\n        handle_Val(x.TotalValue)\r\n      } else {\r\n        genUtil.Add(x.OnGet_TotalValue_Func_Dict,\r\n          () => {\r\n            handle_Val(x.TotalValue)\r\n          });\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.FullValue) {\r\n        handle_Val(targetObj.FullValue)\r\n      } else {\r\n        genUtil.Add(targetObj.OnGet_FullValue_Func_Dict,\r\n          () => {\r\n            handle_Val(targetObj.FullValue)\r\n          });\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetIsHaveWarning = (q) => {\r\n  if (q.Row.Field !== mif.level) {\r\n    return false\r\n  } else {\r\n    const getWarningFunc = (levelGroups) => {\r\n      return levelGroups.length !== 0;\r\n    }\r\n\r\n    if (q.TLS_LevelGroups) {\r\n      return getWarningFunc(q.TLS_LevelGroups);\r\n    } else {\r\n      genUtil.Add(q.OnGet_TLS_LevelGroups_Func_Dict,\r\n        () => {\r\n          q.IsHaveWarning = getWarningFunc(q.TLS_LevelGroups)\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup_Descriptions = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup_Descriptions) return undefined;\r\n  q.IsGet_TLS_LevelGroup_Descriptions = true;\r\n\r\n  const handle_Val = (val, list, handledCount, count) => {\r\n    handledCount++;\r\n    if (list.indexOf(val) === -1) {\r\n      list.push(val);\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroup_Descriptions = list;\r\n    }\r\n  }\r\n\r\n  const getDescFunc = (levelGroups) => {\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = levelGroups.length\r\n\r\n    levelGroups.forEach(x => {\r\n      if (x.FullDescription) {\r\n        handle_Val(x.FullDescription, list, handledCount, count);\r\n      } else {\r\n        // Để false, xử lý nhiều Funcs hơn, nhưng thực thi thành công :v\r\n        genUtil.Add(x.OnGetLevelStorageList_Func_Dict, () => {\r\n          handle_Val(x.FullDescription, list, handledCount, count)\r\n        }, false)\r\n      }\r\n    })\r\n  }\r\n\r\n  if (q.TLS_LevelGroups) {\r\n    getDescFunc(q.TLS_LevelGroups)\r\n  } else {\r\n    q.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n      getDescFunc(q.TLS_LevelGroups)\r\n    })\r\n  }\r\n}","import * as mif from '../item/MassItemField'\r\nimport { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mt from '../MassType'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent'\r\nimport MassGroupItem from './rowgroup/MassGroupItem'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\n\r\nexport const GetMainMGC = (q) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  var mgi1 = mgiUtil.get(mif.MassType);\r\n  qI.Items = [mgi1];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMassGroupName = (q) => {\r\n  return q.MassGroupSetting ? q.MassGroupSetting.Name\r\n    : '';\r\n}\r\n\r\nexport const GetAllRows = (q) => {\r\n  var list = [];\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.AllItems)\r\n  });\r\n  return list;\r\n}\r\n\r\nexport const GetMainMGI = (q) => {\r\n  var qI = q.MainMGC?.Items[0];\r\n  qI.Table = q;\r\n  qI.SupRow = undefined;\r\n  return qI;\r\n}","export const elementfilter = \"elementfilter\";\r\nexport const massexport = \"massexport\";\r\nexport const massgroup = \"massgroup\";\r\nexport const typicallevel = \"typicallevel\";","import { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport default class Setting{\r\n  name\r\n  get Name(){\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    if (this.OnNameChanged){\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged){\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  SettingType\r\n\r\n  data\r\n  get Data(){\r\n    return this.data;\r\n  }\r\n  set Data(v){\r\n    this.data = v;\r\n    if (this.OnDataChanged){\r\n      this.OnDataChanged(v);\r\n    }\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    var {_id} = this;\r\n    var apiData = {_id};\r\n\r\n    var  url = \"https://api.bimdev.vn/api/hbs/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete setting successfully'))\r\n\r\n    this.Dict.Items.splice(this.Index, 1);\r\n\r\n    if (this.OnDelete){\r\n      this.OnDelete();\r\n    }\r\n\r\n    this.Dict.Input.EditItemId = undefined;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id : this._id,\r\n      projectId : this.Project._id,\r\n      settingType : this.SettingType,\r\n      name : this.Name,\r\n      description : this.Description,\r\n      data : this.Data.ApiData\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassGroupSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassGroupSettingData {\r\n  fields\r\n  get Fields(){\r\n    if (!this.fields){\r\n      this.fields = util.GetDefaultFields(this);\r\n    }\r\n    return this.fields;\r\n  }\r\n  set Fields(v){\r\n    this.fields = v;\r\n  }\r\n\r\n  AddNewField = () => {\r\n    var item = pmData().MassPropertyNames[0];\r\n    this.Fields.push(item);\r\n    return item;\r\n  }\r\n}","export const Discipline = \"Discipline\";\r\nexport const Category = \"Category\";\r\n\r\nexport const GetAll = () => {\r\n  return [ Discipline, Category ];\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassGroupSettingData from './MassGroupSettingData';\r\nimport * as mpn from '../../../entity/mass/MassPropertyName'\r\nimport * as massGroupCompUtil from '../../mass/table/rowgroup/MassGroupComponentUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingData();\r\n  qI.MassGroupComponent = massGroupCompUtil.get(q.massGroupComponent);\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassGroupSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultFields = () => {\r\n  return [ mpn.Category ]\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassGroupSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassGroupSettingDataUtil'\r\nimport MassGroupSetting from './MassGroupSetting';\r\nimport { PMData } from '../../../single/model/PMData';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/mg/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as util from './WorkpackageVMUtil'\r\n\r\nexport class WorkpackageVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fullName : observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.Workpackage._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.WorkpackageVMs.indexOf(this);\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.Workpackage.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage.M2VM = v;\r\n  }\r\n\r\n  Workpackage\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.Workpackage.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Code = v;\r\n    }\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.Workpackage.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Name = v;\r\n    }\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.Workpackage.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Description = v;\r\n    }\r\n  }\r\n\r\n  fullName = undefined\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.Workpackage.FullName;\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.FullName;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.FullName;\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.WorkpackageVMs.splice(this.Index, 1);\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(this.Name, this.Code, this.Description);\r\n  }\r\n}","import { WorkpackageVM } from \"./WorkpackageVM\";\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageVM();\r\n  qI.Workpackage = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnCodeChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Code = v;\r\n    }\r\n  }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnFullNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.FullName = v;\r\n    }\r\n  }\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supWp = q.Workpackage.SupItem;\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  var index = list.findIndex(x => x.Workpackage === supWp);\r\n  return index !== -1 ? list[index] : undefined;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport class CheckboxVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      ischecked: observable,\r\n      isDisable : observable,\r\n      Cancel : observable\r\n    })\r\n  }\r\n\r\n  name\r\n\r\n  OnCheckChanging\r\n\r\n  Cancel = false;\r\n\r\n  ischecked = undefined\r\n  set Ischecked(v) {\r\n    this.ischecked = v;\r\n    if (this.onCheckChange) {\r\n      this.onCheckChange(v);\r\n    }\r\n  }\r\n\r\n  isDisable = false\r\n}","import { CheckboxVM } from \"./CheckboxVM\"\r\n\r\nexport const get = (name, ischecked) => {\r\n  var qI = new CheckboxVM();\r\n  qI.ischecked = ischecked;\r\n  qI.name = name;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as checkboxVMUtil from '../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as util from './WorkpackageInputVMUtil'\r\nimport { Button } from 'antd';\r\n\r\nexport class WorkpackageInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  WorkpackageInput\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.WorkpackageInput.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.WorkpackageInput.Code = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.WorkpackageInput.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.WorkpackageInput.Name = v;\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.WorkpackageInput.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.WorkpackageInput.Description = v;\r\n  }\r\n\r\n  supItem = undefined\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    var input = this.WorkpackageInput;\r\n    if (!v) {\r\n      input.SupItem = v;\r\n    }else{\r\n      input.SupItem = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined\r\n  get WorkpackageVMStorageList(){\r\n    if (!this.workpackageVMStorageList){\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v){\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.SupItemSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItem = this.SupItem;\r\n  }\r\n\r\n  supItemSelectVM\r\n  get SupItemSelectVM(){\r\n    if (!this.supItemSelectVM){\r\n      var obj = this.supItemSelectVM = selectVMUtil.get\r\n        (this.WorkpackageVMStorageList, this.SupItem);\r\n      obj.Placeholder = 'công tác cha'\r\n      obj.CanClear = true;\r\n      obj.OnSelectedItemChanged = (v) => this.SupItem = v;\r\n    }\r\n    return this.supItemSelectVM;\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.WorkpackageInput.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.WorkpackageInput.IsNew = v;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n\r\n    if (!v) {\r\n      this.WorkpackageInput.Workpackage = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      this.WorkpackageInput.Workpackage = v.Workpackage;\r\n\r\n      var { Code, Name, Description, SupItem } = v;\r\n      this.CodeVM.Content = Code;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n\r\n      this.SupItemSelectVM.InitialItem = SupItem;\r\n\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Công tác mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  AsString = () => `${this.Code} ${this.Name} ${this.Description} ${this.IsNew}`\r\n\r\n  AddDatabase = () => {\r\n    this.WorkpackageInput.AddDatabase();\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  DeleteFunc = () => {\r\n    this.WorkpackageVM.Workpackage.Delete();\r\n    this.WorkpackageVM = undefined;\r\n  }\r\n\r\n  Clear = () => {\r\n    this.CodeVM.Content = null;\r\n    this.NameVM.Content = null;\r\n    this.DescriptionVM.Content = null;\r\n    this.IsNewVM.Ischecked = true;\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../single/form/PMDataVM\";\r\nimport { WorkpackageInputVM } from \"./WorkpackageInputVM\";\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageInputVM();\r\n  qI.WorkpackageInput = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  })\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} workpackage successfully`);\r\n    //qI.clear();\r\n  }\r\n\r\n  dict.OnAdd = (v) => {\r\n    qI.WorkpackageVM = v;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}","import { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport * as workpackageVMUtil from './WorkpackageVMUtil';\r\nimport * as workpackageInputVMUtil from './WorkpackageInputVMUtil';\r\n\r\nexport const get = (q) => {\r\n  var qI = new Workpackage_DictVM();\r\n  qI.Workpackage_Dict = q;\r\n\r\n  q.OnGetWorkpackagesDone = (v) => {\r\n    var obj = qI.WorkpackageVMs;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (item) => {\r\n    var itemView = workpackageVMUtil.get(item, qI);\r\n    qI.Add(itemView);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackageVMs = (dictVM) => {\r\n  var wps = dictVM.Workpackage_Dict.Workpackages;\r\n  if (!wps) return undefined;\r\n  return wps.map(x => workpackageVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetWorkpackageInputVM= (dictVM) => {\r\n  var input = dictVM.Workpackage_Dict.WorkpackageInput;\r\n  return workpackageInputVMUtil.get(input, dictVM);\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ElementFilterSetting_DictVMUtil'\r\n\r\nexport class ElementFilterSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  items  = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../../text/TextVMUtil';\r\n\r\nexport class SettingVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Name = v;\r\n    }\r\n  }\r\n\r\n  nameVM\r\n  get NameVM(){\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM = textUtil.get(this.Name, 'tên thiết lập ...');\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Description = v;\r\n    }\r\n  }\r\n\r\n  settingType\r\n  get SettingType() {\r\n    if (!this.settingType) {\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v) {\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  data\r\n  get Data(){\r\n    if (!this.data){\r\n      this.data = this.ModelItem.Data;\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n    if (!this.M2VM){\r\n      this.ModelItem.Data = v;\r\n    }\r\n  }\r\n\r\n  dataVM\r\n  get DataVM() {\r\n    if (!this.dataVM) {\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM(v) {\r\n    this.dataVM = v;\r\n\r\n    // Gọi hàm để đổ dữ liệu về\r\n    if (v && this.OnInitialSetDataVM){\r\n      this.OnInitialSetDataVM(v);\r\n    }\r\n\r\n    if (!this.M2VM) {\r\n      if (!v) {\r\n        this.Data = v;\r\n      }\r\n      else {\r\n        this.Data = v.ModelItem;\r\n      }\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM) {\r\n      return this.OnGetDataVM();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class ElementFilterSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var cateFilterVM = v.CategoryFilterVM;\r\n    if (cateFilterVM) {\r\n      cateFilterVM.OnInitialData();\r\n    }\r\n\r\n    var famFilterVM = v.FamilyFilterVM;\r\n    if (famFilterVM) {\r\n      famFilterVM.OnInitialData();\r\n    }\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as multiSelectVMUtil from '../../../select/MultiSelectVMUtil'\r\n\r\nexport class EntFilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  get pmDataVM () { return PMDataVM.Instance};\r\n\r\n  valueType\r\n  get ValueType() {\r\n    if (!this.valueType) {\r\n      this.valueType = this.ModelItem.ValueType;\r\n    }\r\n    return this.valueType;\r\n  }\r\n  set ValueType(v) {\r\n    this.valueType = v;\r\n    this.ModelItem.ValueType = v;\r\n  }\r\n\r\n  numberFilterType\r\n  get NumberFilterType() {\r\n    if (!this.numberFilterType) {\r\n      this.numberFilterType = this.ModelItem.NumberFilterType;\r\n    }\r\n    return this.numberFilterType;\r\n  }\r\n  set NumberFilterType(v) {\r\n    this.numberFilterType = v;\r\n    this.ModelItem.NumberFilterType = v;\r\n  }\r\n\r\n  stringFilterType\r\n  get StringFilterType() {\r\n    if (!this.stringFilterType) {\r\n      this.stringFilterType = this.ModelItem.StringFilterType;\r\n    }\r\n    return this.stringFilterType;\r\n  }\r\n  set StringFilterType(v) {\r\n    this.stringFilterType = v;\r\n    this.ModelItem.StringFilterType = v;\r\n  }\r\n\r\n  values\r\n  get Values() {\r\n    if (!this.values) {\r\n      this.values = this.ModelItem.Values;\r\n    }\r\n    return this.values;\r\n  }\r\n  set Values(v) {\r\n    this.values = v;\r\n    this.ModelItem.Values = v;\r\n  }\r\n\r\n  valueStorageList\r\n  get ValueStorageList() {\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = this.ModelItem.ValueStorageList;\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  ValueSelectPlaceholder\r\n\r\n  valueTypeSelectVM\r\n  get ValueTypeSelectVM() {\r\n    if (!this.valueTypeSelectVM) {\r\n      var obj =this.valueTypeSelectVM = selectVMUtil.get(this.pmDataVM.FilterValueTypes, this.ValueType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.ValueType = v;\r\n      }\r\n    }\r\n    return this.valueTypeSelectVM;\r\n  }\r\n\r\n  stringFilterTypeSelectVM\r\n  get StringFilterTypeSelectVM() {\r\n    if (!this.stringFilterTypeSelectVM){\r\n      var obj = this.stringFilterTypeSelectVM = selectVMUtil.get(this.pmDataVM.StringFilterTypes, this.StringFilterType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.StringFilterType = v;\r\n      }\r\n    }\r\n    return this.stringFilterTypeSelectVM;\r\n  }\r\n\r\n  valuesSelectVM\r\n  get ValuesSelectVM() {\r\n    if (!this.valuesSelectVM){\r\n      var obj = this.valuesSelectVM = multiSelectVMUtil.get(this.ValueStorageList, this.Values);\r\n\r\n      if (this.ValueSelectPlaceholder){\r\n        obj.Placeholder = this.ValueSelectPlaceholder;\r\n      }\r\n\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Values = v;\r\n      }\r\n    }\r\n    return this.valuesSelectVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    if (!v) return;\r\n\r\n    var {ValueType, NumberFilterType, StringFilterType, Values} = v;\r\n    this.ValueTypeSelectVM.InitialItem = ValueType;\r\n    this.StringFilterTypeSelectVM.InitialItem = StringFilterType;\r\n    this.ValuesSelectVM.InitialItems = Values;\r\n  }\r\n\r\n  OnInitialData = () => {\r\n    var valueType = this.ValueType;\r\n    var numberFilterType = this.NumberFilterType;\r\n    var stringFilterType = this.StringFilterType;\r\n    var values = this.Values;\r\n  }\r\n}","import { SettingVM } from \"../setting/base/SettingVM\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\n\r\nexport const get = (q) => {\r\n  if (!q) return undefined;\r\n  var qI = new EntFilterVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport default class ElementFilterSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isHaveFamilyFilter : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  categoryFilterVM\r\n  get CategoryFilterVM(){\r\n    if (!this.categoryFilterVM && this.ModelItem){\r\n      this.categoryFilterVM = this.GetCategoryFilterVM();\r\n    }\r\n    return this.categoryFilterVM;\r\n  }\r\n\r\n  GetCategoryFilterVM = () => {\r\n    var filter = this.ModelItem.CategoryFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilter = undefined\r\n  get IsHaveFamilyFilter(){\r\n    if (!this.isHaveFamilyFilter){\r\n      this.isHaveFamilyFilter = this.ModelItem.IsHaveFamilyFilter;\r\n    }\r\n    return this.isHaveFamilyFilter;\r\n  }\r\n  set IsHaveFamilyFilter(v){\r\n    this.isHaveFamilyFilter = v;\r\n    this.ModelItem.IsHaveFamilyFilter = v;\r\n  }\r\n\r\n  familyFilterVM\r\n  get FamilyFilterVM(){\r\n    if (!this.familyFilterVM && this.ModelItem){\r\n      this.familyFilterVM = this.GetFamilyFilterVM();\r\n    }\r\n    return this.familyFilterVM;\r\n  }\r\n\r\n  GetFamilyFilterVM = () => {\r\n    var filter = this.ModelItem.FamilyFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilterVM\r\n  get IsHaveFamilyFilterVM() {\r\n    if (!this.isHaveFamilyFilterVM) {\r\n      var obj = this.isHaveFamilyFilterVM\r\n        = checkboxVMUtil.get(\"Thiết lập lọc Family\", this.IsHaveFamilyFilter);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHaveFamilyFilter = v;\r\n      };\r\n    }\r\n    return this.isHaveFamilyFilterVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.CategoryFilterVM.SetData(v.CategoryFilterVM);\r\n\r\n    var ischecked = v.IsHaveFamilyFilter === true;\r\n    this.IsHaveFamilyFilterVM.Ischecked = ischecked;\r\n    \r\n    this.FamilyFilterVM.SetData(v.FamilyFilterVM);\r\n  }\r\n}","import ElementFilterSettingDataVM from './ElementFilterSettingDataVM';\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingDataVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import ElementFilterSettingVM from \"./ElementFilterSettingVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { message } from \"antd\";\r\nimport { SettingVM } from \"./SettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new SettingVM();\r\n  qI.Setting = q;\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as util from './SettingVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport { Button, message } from 'antd';\r\n\r\nexport default class SettingInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      dataVM : observable,\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  settingType\r\n  get SettingType(){\r\n    if (!this.settingType){\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v){\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên bộ lọc\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  settingTypeVM\r\n  get SettingTypeVM() {\r\n    if (!this.settingTypeVM){\r\n      var obj = this.settingTypeVM = \r\n        textVMUtil.get(this.SettingType, \"loại thiết lập\");\r\n      obj.onSetContent = (v) => this.SettingType = v;\r\n    }\r\n    return this.settingTypeVM;\r\n  }\r\n\r\n  dataVM = undefined\r\n  get DataVM(){\r\n    if (!this.dataVM){\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM (v){\r\n    if (this.DataVM.SetData){\r\n      this.DataVM.SetData(v);\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM){\r\n      var dataVM = this.OnGetDataVM();\r\n      return dataVM;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem() {\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v) {\r\n    this.editItem = v;\r\n\r\n    var input = this.ModelItem;\r\n    if (!v) {\r\n      input.EditItem = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      input.EditItem = v.ModelItem;\r\n\r\n      var { Name, Description, SettingType } = v;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n      this.SettingTypeVM.Content = SettingType;\r\n\r\n      this.DataVM = v.DataVM;\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.ModelItem.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.ModelItem.IsNew = v;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Thiết lập mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  \r\n  DeleteFunc = () => {\r\n    this.EditItem.ModelItem.Delete();\r\n    this.EditItem.Delete();\r\n    this.EditItem = undefined;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    this.ModelItem.AddDatabase();\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class ElementFilterSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport * as itemVMUtil from './ElementFilterSettingVMUtil'\r\nimport * as inputVMUtil from './ElementFilterSettingInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport ElementFilterSettingInputVM from \"./ElementFilterSettingInputVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} element filter setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../../filter/EntFilterVMUtil'\r\nimport * as util from './MES_ValueSettingVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MES_ValueSettingVM {\r\n  // constructor() {\r\n  //   makeObservable(this, {\r\n\r\n  //   })\r\n  // }\r\n\r\n  get Index() {\r\n    return this.Dict.ValueSettingVMs.indexOf(this);\r\n  }\r\n\r\n  retrieveType\r\n  get RetrieveType() {\r\n    if (!this.retrieveType) {\r\n      this.retrieveType = this.ModelItem.RetrieveType;\r\n    }\r\n    return this.retrieveType;\r\n  }\r\n  set RetrieveType(v) {\r\n    this.retrieveType = v;\r\n    this.ModelItem.RetrieveType = v;\r\n  }\r\n\r\n  get RetrieveTypeStorageList() {\r\n    return util.GetRetrieveTypeStorageList(this);\r\n  }\r\n\r\n  retrieveTypeSelectVM\r\n  get RetrieveTypeSelectVM() {\r\n    if (!this.retrieveTypeSelectVM) {\r\n      var obj = this.retrieveTypeSelectVM = selectVMUtil.get(this.RetrieveTypeStorageList, this.RetrieveType);\r\n      obj.OnSelectedItemChanged = (v) => this.RetrieveType = v;\r\n    }\r\n    return this.retrieveTypeSelectVM;\r\n  }\r\n\r\n  valueFilterVM\r\n  get ValueFilterVM() {\r\n    if (!this.valueFilterVM) {\r\n      var obj = this.valueFilterVM = filterVMUtil.get(this.ModelItem.ValueFilter);\r\n      obj.ValueSelectPlaceholder = 'giá trị parameter';\r\n    }\r\n    return this.valueFilterVM;\r\n  }\r\n  set ValueFilterVM(v) {\r\n    this.valueFilterVM = v;\r\n    if (!v) {\r\n      this.ModelItem.ValueFilter = v;\r\n    }\r\n    else {\r\n      this.ModelItem.ValueFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    if (!this.workpackageVM) {\r\n      this.workpackageVM = util.GetWorkpackageVM(this);\r\n    }\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.Workpackage = v;\r\n    }\r\n    else {\r\n      this.ModelItem.Workpackage = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined;\r\n  get WorkpackageVMStorageList() {\r\n    if (!this.workpackageVMStorageList) {\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v) {\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.WorkpackageSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = -1;\r\n  }\r\n\r\n  workpackageSelectVM\r\n  get WorkpackageSelectVM() {\r\n    if (!this.workpackageSelectVM) {\r\n      var storageList = this.WorkpackageVMStorageList ?\r\n        this.WorkpackageVMStorageList : [];\r\n\r\n      var obj = this.workpackageSelectVM = selectVMUtil.get\r\n        (storageList, this.WorkpackageVM);\r\n      obj.Placeholder = 'chọn công tác';\r\n      obj.OnSelectedItemChanged = (v) => this.WorkpackageVM = v;\r\n    }\r\n\r\n    return this.workpackageSelectVM;\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = this.ModelItem.MassType;\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n    this.ModelItem.MassType = v;\r\n  }\r\n\r\n  get MassTypeStorageList() {\r\n    return util.GetMassTypeStorageList(this);\r\n  }\r\n\r\n  massTypeSelectVM\r\n  get MassTypeSelectVM() {\r\n    if (!this.massTypeSelectVM) {\r\n      var obj = this.massTypeSelectVM = selectVMUtil.get(this.MassTypeStorageList, \r\n        this.MassType);\r\n      obj.Placeholder = 'loại khối lượng';\r\n      obj.OnSelectedItemChanged = (v) => this.MassType = v;\r\n    }\r\n    return this.massTypeSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.ValueSettingVMs;\r\n    list.splice(this.Index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.RetrieveTypeSelectVM.InitialItem = v.RetrieveType;\r\n    this.ValueFilterVM.SetData(v.ValueFilterVM);\r\n    this.WorkpackageSelectVM.InitialItem = v.WorkpackageVM;\r\n    this.MassTypeSelectVM.InitialItem = v.MassType;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSettingVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push((v) => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRetrieveTypeStorageList = (q) => {\r\n  return pmDataVM().ValueRetrieveTypes;\r\n}\r\n\r\nexport const GetWorkpackageVM = (q) => {\r\n  var workpackage = q.ModelItem.Workpackage;\r\n  if (!workpackage) return undefined;\r\n\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.Workpackage === workpackage);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}\r\n\r\nexport const GetMassTypeStorageList = (q) => {\r\n  return pmDataVM().MassTypes;\r\n}","import * as util from './MES_ValueSettingUtil'\r\n\r\nexport default class MES_ValueSetting{\r\n  get Index() {\r\n    return this.Dict.ValueSettings.indexOf(this);\r\n  }\r\n\r\n  RetrieveType\r\n\r\n  MassType\r\n  \r\n  ValueFiter\r\n\r\n  workpackageId\r\n  \r\n  workpackage\r\n  get Workpackage(){\r\n    if (!this.workpackage){\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.workpackageId = undefined;\r\n    }\r\n    else{\r\n      this.workpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ValueSettings.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byparameter = \"byparameter\";\r\nexport const bymaterial = \"bymaterial\";\r\nexport const byrebar = \"byrebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [byparameter, bymaterial, byrebar]\r\n}","import MES_ValueSetting from './MES_ValueSetting'\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as vrt from './MES_ValueRetrieveType'\r\nimport * as fvt from '../../../filter/FilterValueType'\r\nimport * as sft from '../../../filter/StringFilterType'\r\nimport * as fct from '../../../filter/FilterCategoryType'\r\nimport { EntFilter } from '../../../filter/EntFilter';\r\nimport { PMData } from '../../../../single/model/PMData'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.retrieveType;\r\n  qI.MassType = q.massType;\r\n  qI.ValueFilter = filterUtil.get(q.valueFilter, fct.parameter);\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.RetrieveType;\r\n  qI.MassType = q.MassType;\r\n  qI.ValueFilter = q.ValueFilter;\r\n  qI.Workpackage = q.Workpackage;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = vrt.byparameter;\r\n  qI.Dict = dict;\r\n  \r\n  var valueFilter = new EntFilter();\r\n  valueFilter.CategoryType = fct.parameter;\r\n  valueFilter.ValueType = fvt.bystring;\r\n  valueFilter.StringFilterType = sft.byequal;\r\n  valueFilter.Values = [ 'Volume' ];\r\n\r\n  qI.ValueFilter = valueFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackage = (q) => {\r\n  var workpackageId = q.workpackageId;\r\n  if (!workpackageId) return undefined;\r\n\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    retrieveType : q.RetrieveType,\r\n    massType : q.MassType,\r\n    valueFilter: q.ValueFilter.ApiData,\r\n    workpackageId : q.workpackageId\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassExportSettingDataVMUtil'\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport default class MassExportSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueSettingVMs: observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  elementFilterVM\r\n  get ElementFilterVM() {\r\n    if (!this.elementFilterVM) {\r\n      this.elementFilterVM = util.GetElementFilterVM(this);\r\n    }\r\n    return this.elementFilterVM;\r\n  }\r\n  set ElementFilterVM(v) {\r\n    this.elementFilterVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.ElementFilter = v;\r\n    }\r\n    else {\r\n      modelItem.ElementFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  elementFilterVMStorageList = undefined\r\n  get ElementFilterVMStorageList() {\r\n    if (!this.elementFilterVMStorageList) {\r\n      this.elementFilterVMStorageList = util.GetElementFilterVMStorageList(this);\r\n    }\r\n    return this.elementFilterVMStorageList;\r\n  }\r\n  set ElementFilterVMStorageList(v) {\r\n    this.elementFilterVMStorageList = v;\r\n\r\n    var selectVM = this.ElementFilterSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = 0;\r\n  }\r\n\r\n  elementFilterSelectVM\r\n  get ElementFilterSelectVM() {\r\n    if (!this.elementFilterSelectVM) {\r\n      var storageList = this.ElementFilterVMStorageList ? this.ElementFilterVMStorageList : [];\r\n\r\n      var obj = this.elementFilterSelectVM = selectVMUtil.get(storageList, this.ElementFilterVM);\r\n      obj.Placeholder = 'chọn bộ lọc'\r\n      obj.OnSelectedItemChanged = (v) => this.ElementFilterVM = v;\r\n    }\r\n    return this.elementFilterSelectVM;\r\n  }\r\n\r\n  valueSettingVMs = undefined\r\n  get ValueSettingVMs() {\r\n    if (!this.valueSettingVMs) {\r\n      this.valueSettingVMs = util.GetValueSettingVMs(this);\r\n    }\r\n    return this.valueSettingVMs;\r\n  }\r\n  set ValueSettingVMs(v) {\r\n    var list = this.valueSettingVMs;\r\n    var modelList = this.ModelItem.ValueSettings;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount) {\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount) {\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = valueSettingUtil.Clone\r\n          (originItemVM.ModelItem, this.ModelItem);\r\n        modelList.push(item);\r\n\r\n        var itemVM = valueSettingVMUtil.get(item, this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewValueSettingVM = () => {\r\n    var item = this.ModelItem.AddNewValueSetting();\r\n    var itemView = valueSettingVMUtil.get(item, this);\r\n    this.ValueSettingVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.ElementFilterSelectVM.InitialItem = v.ElementFilterVM;\r\n    this.ValueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassExportSettingDataVM from './MassExportSettingDataVM';\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  pmDataVM().ElementFilterSetting_DictVM.OnGetItemsDone = (v) => {\r\n    qI.ElementFilterVMStorageList = GetElementFilterVMStorageList(qI);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilterVM = (q) => {\r\n  var elemFilter = q.ModelItem.ElementFilter;\r\n  if (!elemFilter) return undefined;\r\n\r\n  var list = pmDataVM().ElementFilterSetting_DictVM.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.ModelItem === elemFilter);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetElementFilterVMStorageList = (q) => {\r\n  return pmDataVM().ElementFilterSetting_DictVM.Items;\r\n}\r\n\r\nexport const GetValueSettingVMs = (q) => {\r\n  var valueSettings = q.ModelItem.ValueSettings;\r\n  return valueSettings.map(x => valueSettingVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassExportSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var valueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport MassExportSettingVM from \"./MassExportSettingVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class MassExportSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassExportSetting_DictVMUtil'\r\n\r\nexport class MassExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassExportSettingVMUtil'\r\nimport * as inputVMUtil from './MassExportSettingInputVMUtil'\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\nimport MassExportSettingInputVM from \"./MassExportSettingInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassGroupSetting_DictVMUtil'\r\n\r\nexport class MassGroupSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassGroupSettingVMUtil'\r\nimport { MassGroupSetting_DictVM } from \"./MassGroupSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n","\r\nexport default class PhaseVM {\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  get DisplayContent () {\r\n    return `${this.Name}`;\r\n  }\r\n}","import PhaseVM from \"./PhaseVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new PhaseVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;  \r\n\r\n  return qI;\r\n}","export const addversion = 'addversion'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Phase_DictVMUtil'\r\nimport * as stateType from '../state/StateType'\r\nimport { message } from 'antd';\r\n\r\nexport class Phase_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      state : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  state = undefined\r\n  get State(){\r\n    return this.state;\r\n  }\r\n  set State(v){\r\n    this.state = v;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n\r\n  AddVersion = () => {\r\n    this.State = stateType.addversion;\r\n  }\r\n\r\n  Cancel = () => {\r\n    this.State = undefined;\r\n  }\r\n\r\n  OK = () => {\r\n    var name = this.Input.Name;\r\n    var index = this.Items.findIndex(x => x.Name === name);\r\n    if (index !== -1){\r\n      message.warning('version name already exists!');\r\n      return;\r\n    }\r\n\r\n    this.State = undefined;\r\n    this.ModelItem.AddMassVersion();\r\n  }\r\n}","import * as textVMUtil from '../../../text/TextVMUtil'\r\n\r\nexport default class PhaseInputVM {\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên version\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n}","import * as itemVMUtil from './PhaseVMUtil'\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport * as inputVMUtil from './PhaseInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new Phase_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  });\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputVMUtil.get(q.ModelItem.Input, q);\r\n}","import PhaseInputVM from \"./PhaseInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new PhaseInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ProjectVMUtil'\r\n\r\nexport default class ProjectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      typicalLevelSetting: observable,\r\n      typicalLevelSetting_ForEdit: observable\r\n    })\r\n  }\r\n\r\n  get _id() {\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.ModelItem.Code;\r\n    }\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.ModelItem.Code = v;\r\n  }\r\n\r\n  phase_DictVM\r\n  get Phase_DictVM() {\r\n    if (!this.phase_DictVM) {\r\n      this.phase_DictVM = util.GetPhase_DictVM(this);\r\n    }\r\n    return this.phase_DictVM;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = this.ModelItem.RebarMass_Dict;\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  get InputExportSet() {\r\n    return this.ModelItem.InputExportSet;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  get Level_Dict() {\r\n    return this.ModelItem.Level_Dict;\r\n  }\r\n\r\n  typicalLevelSetting = undefined\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      this.typicalLevelSetting = util.GetTypicalLevelSetting(this);\r\n    }\r\n    return this.typicalLevelSetting;\r\n  } set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit = undefined\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = util.GetTypicalLevelSetting_ForEdit(this);\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  get Url(){\r\n    return this.ModelItem.Url;\r\n  }\r\n}","export const text = 'text'\r\nexport const input = 'input'","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport * as checkboxVMUtil from './CheckboxVMUtil'\r\nimport './Checkbox.css'\r\n\r\nclass CheckboxView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = checkboxVMUtil.get(false);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onCheckedChange = (e) => {\r\n    var data = this.state;\r\n    var { checked } = e.target;\r\n\r\n    if (data.OnCheckChanging) {\r\n      data.OnCheckChanging(checked);\r\n    }\r\n\r\n    if (!data.Cancel) {\r\n      data.Ischecked = checked;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var { ischecked, name, isDisable } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <label>\r\n          <input type=\"checkbox\"\r\n            checked={ischecked}\r\n            onChange={this.onCheckedChange} disabled={isDisable} />\r\n          <span className='checkbox__title'>{name}</span>\r\n        </label>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CheckboxView)","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport CheckboxView from '../../../../../checkbox/CheckboxView';\r\nimport * as checkBoxUtil from '../../../../../checkbox/CheckboxVMUtil';\r\nimport * as multiSelectUtil from \"../../../../../select/MultiSelectVMUtil\";\r\nimport * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport { text } from '../pageItem/TLS_PageItemStateType';\r\nimport * as util from './LevelGroupVMUtil'\r\n\r\nexport class LevelGroupVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      primary: observable,\r\n      isSelectOpen: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get Levels() {\r\n    return this.ModelItem.Levels;\r\n  } set Levels(v) {\r\n    this.ModelItem.Levels = v;\r\n  }\r\n\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  levelSelectVM\r\n  get LevelSelectVM() {\r\n    if (!this.levelSelectVM) {\r\n      var list = this.LevelStorageList;\r\n      if (!list) {\r\n        this.SettingVM.ModelItem.OnGetLevelStorageList_Funcs.push(() => {\r\n          var obj = this.levelSelectVM;\r\n          obj.Items = this.LevelStorageList;\r\n          obj.InitialItems = this.Levels;\r\n        })\r\n      }\r\n\r\n      list = list ? list : []\r\n      var obj = this.levelSelectVM = multiSelectUtil.get(list, this.Levels);\r\n      obj.Placeholder = 'chọn level ...';\r\n\r\n      obj.TitleRender = (item) => {\r\n        const getTriggerContent = () => {\r\n          return this.IsSelectOpen || this.Primary === item ? 'click' : 'hover';\r\n        }\r\n        var triggerVM = textUtil.get(getTriggerContent())\r\n\r\n        const getButtonType = () => {\r\n          return this.Primary === item ? 'primary' : 'dashed'\r\n        }\r\n        var buttonTypeVM = textUtil.get(getButtonType())\r\n\r\n        const getAddContent = () => {\r\n          return this.Primary === item ? '' : 'Set'\r\n        }\r\n        var addContentVM = textUtil.get(getAddContent())\r\n\r\n        const getItemCss = () => {\r\n          return this.Primary === item ? 'levelgroup__primary' : '';\r\n        }\r\n\r\n        return <Popover trigger={triggerVM.Content}\r\n          content={\r\n            <span>\r\n              {this.Primary !== item ?\r\n                <span className='levelgroup__addtext'>{addContentVM.Content}</span>\r\n                : ''}\r\n              <Button size='small'\r\n                type={buttonTypeVM.Content}\r\n                onClick={() => {\r\n                  this.Primary = item;\r\n                }}>Primary</Button>\r\n            </span>\r\n          }>\r\n          <span className={getItemCss()}>{item}</span>\r\n        </Popover>\r\n      }\r\n\r\n      obj.OnSetOpen = (v) => this.IsSelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Levels = v;\r\n        if (this.Levels.indexOf(this.Primary) === -1) {\r\n          this.Primary = util.GetDefaultPrimary(this);\r\n        }\r\n      }\r\n    }\r\n    return this.levelSelectVM;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.LevelGroups;\r\n    list.splice(this.Index, 1);\r\n\r\n    this.Primary = util.GetDefaultPrimary(this);\r\n  }\r\n\r\n  primary = undefined\r\n  get Primary() {\r\n    if (!this.primary) {\r\n      this.primary = this.ModelItem.Primary;\r\n    }\r\n    return this.primary\r\n  } set Primary(v) {\r\n    this.primary = this.ModelItem.Primary = v;\r\n  }\r\n\r\n  isSelectOpen = undefined\r\n  get IsSelectOpen() {\r\n    return this.isSelectOpen\r\n  } set IsSelectOpen(v) {\r\n    this.isSelectOpen = v;\r\n  }\r\n}","import { LevelGroupVM } from \"./LevelGroupVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new LevelGroupVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport * as genUtil from \"../../../../../../util/generalUtil\";\r\nimport * as it from './TLS_FilterValue_InputType'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from \"../../../../../input/NewInputView\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterValueVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      inputType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  get Values() {\r\n    return this.Dict.ModelItem.Items;\r\n  }\r\n\r\n  get Value() {\r\n    return this.Values[this.Index].Value;\r\n  }\r\n  set Value(v) {\r\n    this.Values[this.Index].Value = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var obj = this.valueVM = textUtil.get(this.Value);\r\n      obj.onSetContent = (v) => {\r\n        this.Value = v;\r\n      }\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var list = ['Cột', 'Vách', 'Dầm', 'Sàn']\r\n      var obj = this.selectVM = selectUtil.get(list, this.Value);\r\n      obj.Placeholder = '...'\r\n      obj.OnSetOpen = (v) => this.SelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => this.Value = v;\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ModelItem.Items.splice(this.Index, 1);\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n\r\n  inputType = undefined\r\n  get InputType(){\r\n    if (!this.inputType){\r\n      this.inputType = this.ModelItem.InputType\r\n    }\r\n    return this.inputType;\r\n  } set InputType(v){\r\n    this.inputType = this.ModelItem.InputType = v;\r\n  }\r\n\r\n  ToggleInputType = () => {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        this.SelectVM.InitialItem = this.Value;\r\n        this.Value = this.SelectVM.SelectedItem;\r\n        this.InputType = it.select\r\n        break;\r\n      case it.select:\r\n        if (this.Value) {\r\n          this.ValueVM.Content = this.Value;\r\n        } else{\r\n          if (!this.ValueVM.Content){\r\n            this.ValueVM.Content = 'value'\r\n          }\r\n          this.Value =this.ValueVM.Content;\r\n        }\r\n\r\n        this.InputType = it.input\r\n        break;\r\n    }\r\n  }\r\n\r\n  SwitchChecked_Funcs = () => this.InputType === it.select;\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        return <NewInputView store={this.ValueVM} \r\n          className='tls_filter__value__input' />\r\n      case it.select:\r\n        return <SelectView store={this.SelectVM} \r\n          className='tls_filter__value__select' />\r\n    }\r\n  }\r\n\r\n  selectOpen\r\n  get SelectOpen() {\r\n    if (this.selectOpen === undefined) {\r\n      this.selectOpen = this.SelectVM.Open;\r\n    }\r\n    return this.selectOpen;\r\n  }\r\n  set SelectOpen(v) {\r\n    this.selectOpen = v;\r\n    this.PopoverState.Content = util.GetPopoverState(this);\r\n  }\r\n\r\n  popoverState\r\n  get PopoverState() {\r\n    if (!this.popoverState) {\r\n      this.popoverState = textUtil.get(util.GetPopoverState(this));\r\n    }\r\n    return this.popoverState;\r\n  }\r\n}","import { TLS_FilterValueVM } from \"./TLS_FilterValueVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterValueVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPopoverState = (q) => {\r\n    return q.SelectOpen ? 'none' : 'hover';\r\n  }","import { makeObservable, observable, action } from 'mobx';\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterVMUtil'\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get id(){\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get Field(){\r\n    return this.ModelItem.Field;\r\n  } set Field(v){\r\n    this.ModelItem.Field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = \r\n        selectUtil.get(this.FieldStorageList, this.Field);\r\n      obj.Placeholder = 'chọn bộ lọc ...';\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = valueUtil.get(this.ModelItem.AddItem(),this);\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n}\r\n","import { TLS_FilterVM } from \"./TLS_FilterVM\";\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => valueUtil.get(x, q));\r\n}","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport * as textUtil from '../../../../../text/TextVMUtil';\r\nimport * as st from './TLS_PageItemStateType'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\nimport * as util from './TLS_PageItemVMUtil'\r\n\r\nexport class TLS_PageItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable,\r\n      State: observable,\r\n      levelGroups: observable,\r\n      filters: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem?.id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = this.ModelItem.Name = v;\r\n  }\r\n\r\n  State = st.text\r\n\r\n  ToggleState = () => {\r\n    switch (this.State) {\r\n      case st.text:\r\n        this.State = st.input\r\n        break;\r\n      case st.input:\r\n        this.NameVM.Content = this.Name;\r\n        this.State = st.text\r\n        break;\r\n    }\r\n  }\r\n\r\n  get DeleteMarginCss() {\r\n    return this.State === st.input ? 'tls_pageItem__deletemargin' : ''\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = textUtil.get(this.Name);\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  NameOK = () => {\r\n    this.State = st.text;\r\n    this.Name = this.NameVM.Content;\r\n  }\r\n\r\n  NameCancel = () => {\r\n    this.State = st.text;\r\n  }\r\n\r\n  get InputToolElement() {\r\n    return <div >\r\n      <Button type='primary' size='small'\r\n        onClick={this.NameOK}>ok</Button>\r\n      <Button type='dashed' size='small'\r\n        onClick={this.NameCancel}>cancel</Button>\r\n    </div>\r\n  }\r\n\r\n  get InputElement() {\r\n    var obj = <NewInputView className='tls_pageItem_input' store={this.NameVM} />\r\n    return obj;\r\n  }\r\n\r\n  get TitleElement() {\r\n    var delElem = <Button type='primary' size='small' onClick={this.Delete}\r\n      className='tls_pageItem__delete'>x</Button>\r\n\r\n    switch (this.State) {\r\n      case st.text:\r\n        return <>\r\n          <span>{this.Name}</span>\r\n          <Button type='primary' size='small' className='tls_pageItem__edit'\r\n            onClick={this.ToggleState}>e</Button>\r\n          {delElem}\r\n        </>\r\n      case st.input:\r\n        return <>\r\n          <Popover content={this.InputToolElement} trigger=\"focus\">\r\n            <span>\r\n              {this.InputElement}\r\n            </span>\r\n          </Popover>\r\n          {delElem}\r\n        </>\r\n    }\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.PageItems.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var index = this.Index;\r\n    var isLast = this.IsLast;\r\n\r\n    var dict = this.Dict;\r\n    var list = dict.PageItems;\r\n    list.splice(index, 1);\r\n    dict.AllTabs.splice(index, 1);\r\n\r\n    if (list.length !== 0) {\r\n      dict.IsModelChangePageKey = true;\r\n      dict.CurrentPageKey = (isLast ? list[index - 1] : list[index]).id\r\n    }\r\n  }\r\n\r\n  // Setting\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  // Level Group\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups = undefined\r\n  get LevelGroups() {\r\n    if (!this.levelGroups) {\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.get(this.ModelItem.AddLevelGroup(), this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  filters = undefined\r\n  get Filters() {\r\n    if (!this.filters) {\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.get(this.ModelItem.AddFilter(), this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n}","import { TLS_PageItemVM } from \"./TLS_PageItemVM\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_PageItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetLevelGroups = (q) => {\r\n  return q.ModelItem.LevelGroups.map(x => levelGroupUtil.get(x, q));\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return q.ModelItem.Filters.map(x => filterUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TypicalLevelSettingDataVMUtil'\r\nimport { ControlOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil';\r\n\r\nexport class TypicalLevelSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      pageItems: observable,\r\n      currentPageKey: observable,\r\n      allTabs: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  // Setting\r\n  get SettingVM (){\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Page Items\r\n  pageItems = undefined\r\n  get PageItems() {\r\n    if (!this.pageItems) {\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.get(this.ModelItem.AddPageItem(), this);\r\n    this.PageItems.push(item);\r\n\r\n    var i = this.IsHaveAddCommandTab ? 1 : 0;\r\n    this.AllTabs.splice(this.AllTabs.length - i, 0, item);\r\n\r\n    this.CurrentPageKey = item.id;\r\n\r\n    return item;\r\n  }\r\n\r\n  addCommandTab\r\n  get AddCommandTab() {\r\n    if (!this.addCommandTab) {\r\n      this.addCommandTab = {\r\n        id: 'add',\r\n        TitleElement: <Button className='tls__tabs__add'\r\n          type='text' size='small'\r\n          onClick={this.AddPageItem}>+</Button>\r\n      }\r\n    }\r\n    return this.addCommandTab;\r\n  }\r\n\r\n  IsHaveAddCommandTab = false\r\n\r\n  allTabs = undefined\r\n  get AllTabs() {\r\n    if (!this.allTabs) {\r\n      var obj = [...this.PageItems];\r\n      if (this.IsHaveAddCommandTab) {\r\n        obj.push(this.AddCommandTab);\r\n      }\r\n      this.allTabs = obj;\r\n    }\r\n    return this.allTabs;\r\n  }\r\n\r\n  currentPageKey = undefined\r\n  get CurrentPageKey() {\r\n    if (!this.currentPageKey) {\r\n      this.currentPageKey = this.PageItems[0].id;\r\n    }\r\n    return this.currentPageKey;\r\n  } set CurrentPageKey(v) {\r\n    this.currentPageKey = v;\r\n  }\r\n\r\n  IsModelChangePageKey = false\r\n\r\n  ChangePageKey = (v) => {\r\n    if (this.IsModelChangePageKey) {\r\n      this.IsModelChangePageKey = false; return;\r\n    }\r\n    this.CurrentPageKey = v;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TypicalLevelSettingDataVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return q.ModelItem.PageItems.map(x => pageItemUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as util from './TypicalLevelSettingVMUtil'\r\n\r\nexport class TypicalLevelSettingVM extends SettingVM {\r\n  get LevelStorageList() {\r\n    return this.ModelItem.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList(){\r\n    return this.ModelItem.FieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    this.ModelItem.Save();\r\n  }\r\n}","import * as dataVMUtil from './TypicalLevelSettingDataVMUtil'\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\n\r\nexport const get = (q, project) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new TypicalLevelSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Project = project;\r\n\r\n  // var level_Dict = project.Level_Dict;\r\n  // const getLevelsFunc = () => { \r\n  //   qI.LevelStorageList = level_Dict.Items.map(x => x.Name);\r\n  //   qI.GetLevelStorageList = true;\r\n  // }\r\n  // if (level_Dict.Items){\r\n  //   getLevelsFunc();\r\n  // } else{\r\n  //   level_Dict.OnGetItemsDone_Funcs.push(getLevelsFunc);\r\n  // }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data, qI);\r\n  }    \r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}","import * as phaseDictVMUtil from '../phase/Phase_DictVMUtil'\r\nimport ProjectVM from \"./ProjectVM\";\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new ProjectVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPhase_DictVM = (q) => {\r\n  var phaseDict = q.ModelItem.Phase_Dict;\r\n  return phaseDictVMUtil.get(phaseDict);\r\n}\r\n\r\nexport const GetTypicalLevelSetting_Func = (model, project) => {\r\n  return typicalLevelUtil.get(model, project);\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() =>\r\n      q.TypicalLevelSetting = GetTypicalLevelSetting_Func(project.TypicalLevelSetting, q));\r\n  }\r\n}\r\n\r\nexport const GetTypicalLevelSetting_ForEdit = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting_ForEdit;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TypicalLevelSetting_ForEdit = GetTypicalLevelSetting_Func(project.TypicalLevelSetting_ForEdit, q)\r\n    });\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Project_DictVMUtil'\r\n\r\nexport class Project_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.ModelItem.Items = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import * as itemVMUtil from './ProjectVMUtil'\r\nimport { Project_DictVM } from \"./Project_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new Project_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassResultCompVMUtil'\r\nimport * as multiSelectVMUtil from '../../../../select/MultiSelectVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport { Link } from 'react-router-dom';\r\nimport { Popover } from 'antd';\r\n\r\nexport default class MassResultCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsShowProjectSelect: observable,\r\n      CanHavePhase: observable,\r\n      isHavePhase: observable,\r\n      IsDataPending: observable\r\n    })\r\n  }\r\n\r\n  projects\r\n  get Projects() {\r\n    if (!this.projects) {\r\n      this.projects = this.ModelItem.Projects;\r\n    }\r\n    return this.projects;\r\n  }\r\n  set Projects(v) {\r\n    this.projects = v;\r\n    this.ModelItem.Projects = v;\r\n  }\r\n\r\n  projectVMs\r\n  get ProjectVMs() {\r\n    if (!this.projectVMs) {\r\n      this.projectVMs = util.GetProjectVMs(this);\r\n    }\r\n    return this.projectVMs;\r\n  }\r\n  set ProjectVMs(v) {\r\n    this.projectVMs = v;\r\n    this.Projects = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  projectVMStorageList\r\n  get ProjectVMStorageList() {\r\n    if (!this.projectVMStorageList) {\r\n      this.projectVMStorageList = util.GetProjectVMStorageList(this);\r\n    }\r\n    return this.projectVMStorageList;\r\n  }\r\n  set ProjectVMStorageList(v) {\r\n    this.projectVMStorageList = v;\r\n\r\n    this.projectVMs = util.GetProjectVMs(this);\r\n\r\n    var selectVM = this.ProjectSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.projectVMs;\r\n  }\r\n\r\n  projectSelectOpen\r\n  get ProjectSelectOpen(){\r\n    if (this.projectSelectOpen === undefined){\r\n      this.projectSelectOpen = this.ProjectSelectVM.Open;\r\n    }\r\n    return this.projectSelectOpen;\r\n  }\r\n  set ProjectSelectOpen(v){\r\n    this.projectSelectOpen = v;\r\n    this.ProjectPopoverState.Content = util.GetProjectPopoverStateValue(this);\r\n  }\r\n\r\n  projectPopoverState\r\n  get ProjectPopoverState(){\r\n    if (!this.projectPopoverState){\r\n      this.projectPopoverState = textUtil.get(util.GetProjectPopoverStateValue(this));\r\n    }\r\n    return this.projectPopoverState;\r\n  }\r\n\r\n  projectSelectVM\r\n  get ProjectSelectVM() {\r\n    if (!this.projectSelectVM) {\r\n      var list = this.ProjectVMStorageList ? this.ProjectVMStorageList : [];\r\n      var obj = this.projectSelectVM = multiSelectVMUtil.get(list, this.ProjectVMs);\r\n      obj.Placeholder = 'chọn dự án'\r\n      obj.TitleRender = (item) => <Popover trigger={this.ProjectPopoverState.Content}\r\n        placement=\"topLeft\"\r\n        content={\r\n          <a target='_blank' \r\n            // href={`/#/project/${item._id}`} \r\n            href={item.Url}\r\n            >View project</a>\r\n        }\r\n      >\r\n        {item.DisplayContent}\r\n      </Popover>\r\n\r\n      obj.OnSelectedItemChanged = (v) => this.ProjectVMs = v;\r\n      obj.OnSetOpen = (v) => this.ProjectSelectOpen = v;\r\n    }\r\n    return this.projectSelectVM;\r\n  }\r\n\r\n  IsShowProjectSelect = true\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = this.ModelItem.Phases;\r\n    }\r\n    return this.phases;\r\n  }\r\n  set Phases(v) {\r\n    this.phases = v;\r\n    this.ModelItem.Phases = v;\r\n  }\r\n\r\n  phaseVMs\r\n  get PhaseVMs() {\r\n    if (!this.phaseVMs) {\r\n      this.phaseVMs = util.GetPhaseVMs(this);\r\n    }\r\n    return this.phaseVMs;\r\n  }\r\n  set PhaseVMs(v) {\r\n    this.phaseVMs = v;\r\n    this.Phases = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict() {\r\n    if (!this.massItem_Dict) {\r\n      this.massItem_Dict = this.ModelItem.MassItem_Dict;\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  phaseVMStorageList\r\n  get PhaseVMStorageList() {\r\n    return this.phaseVMStorageList;\r\n  }\r\n  set PhaseVMStorageList(v) {\r\n    this.phaseVMStorageList = v;\r\n\r\n    this.phaseVMs = util.GetPhaseVMs(this);\r\n\r\n    var selectVM = this.PhaseSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.phaseVMs;\r\n  }\r\n\r\n  phaseSelectVM\r\n  get PhaseSelectVM() {\r\n    if (!this.phaseSelectVM) {\r\n      var list = this.PhaseVMStorageList ? this.PhaseVMStorageList : [];\r\n      var obj = this.phaseSelectVM = multiSelectVMUtil.get(list, this.PhaseVMs);\r\n      obj.Placeholder = 'chọn version'\r\n      obj.OnSelectedItemChanged = (v) => this.PhaseVMs = v;\r\n    }\r\n    return this.phaseSelectVM;\r\n  }\r\n\r\n  CanHavePhase = false\r\n\r\n  isHavePhase = undefined\r\n  get IsHavePhase() {\r\n    if (!this.isHavePhase) {\r\n      this.isHavePhase = this.ModelItem.IsHavePhase;\r\n    }\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v) {\r\n    this.isHavePhase = v;\r\n    this.ModelItem.IsHavePhase = v;\r\n  }\r\n\r\n  isShowPhaseSelectVM\r\n  get IsShowPhaseSelectVM() {\r\n    if (!this.isShowPhaseSelectVM) {\r\n      var obj = this.isShowPhaseSelectVM\r\n        = checkboxVMUtil.get(\"So sánh các version\", this.IsHavePhase);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHavePhase = v;\r\n      };\r\n    }\r\n    return this.isShowPhaseSelectVM;\r\n  }\r\n\r\n  get MassGroupSetting() {\r\n    return this.ModelItem.MassGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.ModelItem.MassGroupSetting = v;\r\n  }\r\n\r\n  massGroupSettingStorageList\r\n  get MassGroupSettingStorageList() {\r\n    if (!this.massGroupSettingStorageList) {\r\n      this.massGroupSettingStorageList =\r\n        util.GetMassGroupSettingStorageList(this);\r\n    }\r\n  }\r\n  set MassGroupSettingStorageList(v) {\r\n    this.massGroupSettingStorageList = v;\r\n\r\n    var selectVM = this.MassGroupSettingSelectVM;\r\n    selectVM.Items = v;\r\n  }\r\n\r\n  massGroupSettingSelectVM\r\n  get MassGroupSettingSelectVM() {\r\n    if (!this.massGroupSettingSelectVM) {\r\n      var list = this.MassGroupSettingStorageList ?\r\n        this.MassGroupSettingStorageList : [];\r\n      var obj = this.massGroupSettingSelectVM =\r\n        selectVMUtil.get(list);\r\n      obj.CanClear = true;\r\n      obj.Placeholder = 'chọn bộ set khối lượng'\r\n      obj.OnSelectedItemChanged = (v) => this.MassGroupSetting = v;\r\n    }\r\n    return this.massGroupSettingSelectVM;\r\n  }\r\n\r\n  IsDataPending = false;\r\n\r\n  get LoadingSpinTip() {\r\n    return `loading data ... (${(this.HandledRatio * 100).toFixed(1)}%)`;\r\n  }\r\n\r\n  loadingSpinTipVM\r\n  get LoadingSpinTipVM() {\r\n    if (!this.loadingSpinTipVM) {\r\n      this.loadingSpinTipVM = textUtil.get(this.LoadingSpinTip);\r\n    }\r\n    return this.loadingSpinTipVM;\r\n  }\r\n\r\n  handledRatio = 0\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  }\r\n  set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.LoadingSpinTipVM.Content = this.LoadingSpinTip;\r\n  }\r\n\r\n  // function\r\n  GetMassData = () => {\r\n    this.IsDataPending = true;\r\n    this.HandledRatio = 0;\r\n    this.ModelItem.GetMassData();\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassResultCompVM from \"./MassResultCompVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, isfetchProjects = true) => {\r\n  var qI = new MassResultCompVM();\r\n  qI.ModelItem = q;\r\n\r\n  if (isfetchProjects) {\r\n    pmDataVM().Project_DictVM.OnGetItemsDone = (v) => {\r\n      qI.ProjectVMStorageList = GetProjectVMStorageList(qI);\r\n    }\r\n  }\r\n\r\n  q.OnGetItemsDone_Funcs.push(() => {\r\n    message.success('get mass data successfully');\r\n  })\r\n\r\n  var massTable = q.MassItem_Dict.MassTable;\r\n  massTable.OnIsUpdateDataDone_Funcs.push(() => {\r\n    qI.IsDataPending = false;\r\n  })\r\n  massTable.OnSetHandledRatio_Funcs.push((v) => {\r\n    qI.HandledRatio = v;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProjectVMStorageList = (q) => {\r\n  return pmDataVM().Project_DictVM.Items;\r\n}\r\n\r\nexport const GetProjectVMs = (q) => {\r\n  var storageList = q.ProjectVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var projects = q.Projects;\r\n  projects.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetPhaseVMs = (q) => {\r\n  var storageList = q.PhaseVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var phases = q.Phases;\r\n  phases.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetMassGroupSettingStorageList = (q) => {\r\n  var dict = pmData().MassGroupSetting_Dict;\r\n  var items = dict.Items;\r\n  if (!items){\r\n    dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.MassGroupSettingStorageList = dict.Items;\r\n    })\r\n  }\r\n  return items;\r\n}\r\n\r\n\r\nexport const GetProjectPopoverStateValue = (q) => {\r\n  return q.ProjectSelectOpen ? 'none' : 'hover';\r\n}","export const _default = \"default\";\r\nexport const edit = \"edit\";","import * as util from './RenderItemUtil'\r\n\r\nexport default class RenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport RenderItem from \"./RenderItem\"\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new RenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (val) => val;\r\n    case rs.edit:\r\n      return (value, item, dataIndex) => {\r\n        if (!dataIndex) return value;\r\n\r\n        var inputVM = textUtil.get(value, 'input');\r\n\r\n        var length = dataIndex.length;\r\n        var obj = item;\r\n        dataIndex.filter((x, i) => i < length - 1)\r\n          .forEach((x) => obj = obj[x]);\r\n\r\n        inputVM.onSetContent = (v) => obj[dataIndex[length-1]] = v;\r\n        return <InputView store={inputVM} />\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './RenderItemUtil'\r\n\r\nexport default class Render_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport Render_Dict from './Render_Dict';\r\n\r\nexport default class TableColumn {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Title : observable,\r\n    })\r\n  }\r\n\r\n  RenderState = rs._default;\r\n\r\n  Title = undefined\r\n\r\n  render_Dict\r\n  get Render_Dict(){\r\n    if (!this.render_Dict){\r\n      this.render_Dict = new Render_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v){\r\n    this.render_Dict = v;\r\n  }\r\n}","import TableColumn from \"./TableColumn\"\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport { Button } from \"antd\";\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport const get = (title, dataIndex, renders, table) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n  qI.DataIndex = dataIndex;\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n  var dict = qI.Render_Dict;\r\n  if (renders) {\r\n    renders.forEach(x => {\r\n      dict.GetRender(x.State).Render = x.Render\r\n    });\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetActionColumn = (table) => {\r\n  var title = undefined;\r\n  if (table.CanAdd) {\r\n    var add = table.AddItem;\r\n\r\n    title = <Button type='primary' size='small'\r\n      onClick={add}>Add</Button>\r\n  }\r\n\r\n  var renders = [\r\n    renderUtil.get(rs._default, (val, item, dataIndex, cell, row) => {\r\n      var editElem = '';\r\n      if (table.CanEdit) {\r\n        var edit = () => row.Edit();\r\n        editElem = <Button type='primary' size='small'\r\n          style={{ backgroundColor: '#faad14', border: 'none' }}\r\n          onClick={edit}>Edit</Button>\r\n      }\r\n\r\n      var delElem = '';\r\n      if (table.CanDelete) {\r\n        var del = () => table.DeleteItem(item, row);\r\n\r\n        delElem = <Button type='primary' danger size='small'\r\n          onClick={del}>Delete</Button>\r\n      }\r\n      return <>\r\n        {editElem}{delElem}\r\n      </>\r\n    }),\r\n    renderUtil.get(rs.edit, (val, item, dataIndex, cell, row) => {\r\n      var ok = () => row.OK();\r\n      return <Button type='primary' size='small'\r\n        onClick={ok}>OK</Button>\r\n    })\r\n  ]\r\n\r\n  return get(title, null, renders, table);\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TableRowUtil'\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport default class TableRow {\r\n  key\r\n  get Key() {\r\n    if (!this.key) {\r\n      this.key = this.Item._id ? this.Item._id : this.Item.id;\r\n      if (!this.key){\r\n        this.key = genUtil.randomId();\r\n      }\r\n    }\r\n    return this.key;\r\n  }\r\n\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  Edit = () => {\r\n    this.Cells.forEach(x => x.RenderState = rs.edit);\r\n  }\r\n\r\n  OK = () => {\r\n    this.Cells.forEach(x => x.RenderState = rs._default);\r\n    this.Table.EditItem(this.Item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\n\r\nexport default class TableCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState: observable\r\n    })\r\n  }\r\n\r\n  get Key() {\r\n    return `${this.Column.Key}_${this.Row.Key}`;\r\n  }\r\n\r\n  get Item() {\r\n    return this.Row.Item;\r\n  }\r\n\r\n  renderState = undefined\r\n  get RenderState() {\r\n    if (!this.renderState){\r\n      this.renderState = this.Column.RenderState;\r\n    }\r\n    return this.renderState;\r\n  }\r\n  set RenderState(v){\r\n    this.renderState = v;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = this.Column.Render_Dict;\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n\r\n  get DataIndex() {\r\n    return this.Column.DataIndex;\r\n  }\r\n\r\n  Render = () => {\r\n    var dataIndex = this.DataIndex;\r\n    var item = this.Item;\r\n\r\n    var value = undefined;\r\n\r\n    if (dataIndex) {\r\n      value = item;\r\n      dataIndex.forEach(x => {\r\n        value = value[x]\r\n      })\r\n    }\r\n\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(value, item, dataIndex, this, this.Row);\r\n  }\r\n}","import TableRow from \"./TableRow\"\r\nimport * as cellUtil from './TableCellUtil'\r\n\r\nexport const get = (item, table) => {\r\n  var qI = new TableRow();\r\n  qI.Item = item;\r\n  qI.Table = table;\r\n  return qI;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var columns = q.Table.Columns;\r\n  return columns.map(x => cellUtil.get(q, x));\r\n}","import TableCell from \"./TableCell\"\r\n\r\nexport const get = (row, col) => {\r\n  var qI = new TableCell();\r\n  qI.Row = row;\r\n  qI.Column = col;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport TableColumn from './TableColumn';\r\nimport * as colUtil from './TableColumnUtil'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport * as rs from './RenderState'\r\nimport * as util from './TableVMUtil'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport InputView from '../input/InputView'\r\nimport { Button } from 'antd';\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as rowUtil from './TableRowUtil'\r\n\r\nexport default class TableVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      columns: observable,\r\n      dataSource: observable,\r\n      rows: observable,\r\n      CanAdd: observable,\r\n      CanDelete: observable,\r\n      CanEdit: observable,\r\n      IsShowActionColumn: observable\r\n    })\r\n  }\r\n\r\n  CanAdd = true\r\n  CanDelete = true\r\n  CanEdit = true\r\n  IsShowActionColumn = true\r\n\r\n  columns = undefined\r\n  get Columns() {\r\n    if (!this.columns) {\r\n      this.columns = [\r\n        colUtil.get('Tên cấu kiện', 'ElementName', null, this),\r\n        colUtil.get('Đường kính', 'Diameter', null, this),\r\n      ];\r\n\r\n      if (this.IsShowActionColumn) {\r\n        this.columns.push(colUtil.GetActionColumn(this));\r\n      }\r\n    }\r\n    return this.columns;\r\n  }\r\n  set Columns(v) {\r\n    this.columns = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  dataSource = undefined\r\n  get DataSource() {\r\n    if (!this.dataSource) {\r\n      this.dataSource = [\r\n        {\r\n          id: 1,\r\n          ElementName: 'W1',\r\n          Diameter: '18',\r\n          Weight: '30'\r\n        },\r\n        {\r\n          id: 2,\r\n          ElementName: 'W2',\r\n          Diameter: '20',\r\n          Weight: '3.7'\r\n        },\r\n      ]\r\n    }\r\n    return this.dataSource;\r\n  }\r\n  set DataSource(v) {\r\n    this.dataSource = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  rows = undefined\r\n  get Rows() {\r\n    if (!this.rows) {\r\n      this.rows = util.GetRows(this);\r\n    }\r\n    return this.rows;\r\n  }\r\n  set Rows(v) {\r\n    this.rows = v;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = undefined\r\n    if (this.OnGetItemForAdd) {\r\n      item = this.OnGetItemForAdd();\r\n    } else {\r\n      item = {\r\n        Key: genUtil.randomId()\r\n      };\r\n    }\r\n    this.DataSource.push(item);\r\n\r\n    var row = rowUtil.get(item, this);\r\n    this.Rows.push(row);\r\n    row.Edit();\r\n  }\r\n\r\n  DeleteItem = (item, row) => {\r\n    var list = this.DataSource;\r\n    var index = list.indexOf(item);\r\n    list.splice(index, 1);\r\n    this.Rows.splice(index, 1);\r\n\r\n    if (this.OnDeleteItem){\r\n      this.OnDeleteItem(item);\r\n    }\r\n  }\r\n\r\n  EditItem = (item) => {\r\n    if (this.OnEditItem){\r\n      this.OnEditItem(item);\r\n    }\r\n  }\r\n}","import * as rowUtil from './TableRowUtil'\r\n\r\nexport const GetRows = (q) => {\r\n  return q.DataSource.map(x => rowUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportDataVMUtil'\r\n\r\nexport class WorkItemExportDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      \r\n    })\r\n  }\r\n\r\n\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as checkboxUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport class WorkItemExportSettingVM extends SettingVM {\r\n  IsCategoryChecked = true\r\n\r\n  categoryCheckboxVM\r\n  get CategoryCheckboxVM(){\r\n    if (!this.categoryCheckboxVM){\r\n      debugger\r\n      var obj =this.categoryCheckboxVM = \r\n        checkboxUtil.get(undefined, this.IsCategoryChecked)\r\n    }\r\n    return this.categoryCheckboxVM;\r\n  }\r\n}","import * as dataVMUtil from './WorkItemExportDataVMUtil'\r\nimport { WorkItemExportSettingVM } from './WorkItemExportSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkItemExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { WorkItemExportDataVM } from './WorkItemExportDataVM';\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport class WorkItemExportSetting extends Setting {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportSetting_DictVMUtil'\r\nimport * as itemUtil from './WorkItemExportSettingVMUtil';\r\nimport { WorkItemExportSetting } from './WorkItemExportSetting';\r\n\r\nexport class WorkItemExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = [\r\n        itemUtil.get(new WorkItemExportSetting())\r\n      ]\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM) {\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","import TableVM from \"../../../../table/TableVM\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport CheckboxView from '../../../../checkbox/CheckboxView'\r\nimport { WorkItemExportSettingVM } from \"./WorkItemExportSettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n\r\n  var nameCol = colUtil.get('Tên thiết lập', ['Name'], null, qI);\r\n  var isCateCol = colUtil.get('Category', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      debugger\r\n      var checkBoxVM = item.CategoryCheckboxVM;\r\n      return <CheckboxView store={item.CategoryCheckboxVM}/>\r\n    })\r\n  ], qI);\r\n  var isSubWorkItemCol = colUtil.get('Hạng mục phụ', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      return <CheckboxView />\r\n    })\r\n  ], qI);\r\n\r\n  qI.Columns = [\r\n    nameCol, isCateCol, isSubWorkItemCol,\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return new WorkItemExportSettingVM();\r\n  }\r\n  \r\n  return qI;\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../model/PMData';\r\n\r\nimport * as workpackage_DictVMUtil from '../../entity/workpackage/Workpackage_DictVMUtil'\r\nimport * as elementFilterSetting_DictVMUtil from \r\n  '../../entity/setting/elementFilter/ElementFilterSetting_DictVMUtil'\r\nimport * as massExportSetting_DictVMUtil from \r\n  '../../entity/setting/massExport/MassExportSetting_DictVMUtil'\r\nimport * as massGroupSetting_DictVMUtil from \r\n  '../../entity/setting/massGroup/MassGroupSetting_DictVMUtil'\r\nimport * as project_DictVMUtil from '../../entity/project/Project_DictVMUtil'\r\n\r\nimport * as massResultCompVMUtil from '../../entity/mass/result/MassResultCompVMUtil'\r\n\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\n\r\nimport * as wieDictVMUtil from \r\n  '../../entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport const GetWorkpackage_DictVM = (data) => {\r\n  return workpackage_DictVMUtil.get(pmData().Workpackage_Dict);\r\n}\r\n\r\nexport const GetElementFilterSetting_DictVM = (data) => {\r\n  return elementFilterSetting_DictVMUtil.get\r\n    (pmData().ElementFilterSetting_Dict);\r\n}\r\n\r\nexport const GetMassExportSetting_DictVM = (data) => {\r\n  return massExportSetting_DictVMUtil.get\r\n    (pmData().MassExportSetting_Dict);\r\n}\r\n\r\nexport const GetMassGroupSetting_DictVM = (data) => {\r\n  return massGroupSetting_DictVMUtil.get\r\n    (pmData().MassGroupSetting_Dict);\r\n}\r\n\r\nexport const GetProject_DictVM = (data) => {\r\n  return project_DictVMUtil.get\r\n    (pmData().Project_Dict);\r\n}\r\n\r\nexport const GetMassResultCompVM= (data) => {\r\n  return massResultCompVMUtil.get\r\n  (pmData().MassResultComp);\r\n}\r\n\r\nexport const GetWorkItemExportSetting_Dict = (data) => {\r\n  return wieDictVMUtil.get(pmData().WorkItemExportSetting_Dict);\r\n}","export const mass = 'mass'\r\nexport const typicallevel = 'typicallevel'\r\nexport const phase = 'phase'\r\nexport const inputdata = 'inputdata'","import { makeObservable, observable, action } from 'mobx';\r\nimport { pmData } from '../../entity/filter/EntFilterUtil';\r\nimport { PMData } from '../model/PMData';\r\nimport * as util from './PMDataVMUtil'\r\nimport * as pvt from '../../entity/project/ProjectViewType'\r\n\r\nexport class PMDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isDebug: observable,\r\n      projectViewType : observable,\r\n      currentProject : observable\r\n    })\r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMDataVM();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get pmData(){\r\n    return PMData.Instance;\r\n  }\r\n\r\n  workpackage_DictVM\r\n  get Workpackage_DictVM() {\r\n    if (!this.workpackage_DictVM){\r\n      this.workpackage_DictVM = util.GetWorkpackage_DictVM();\r\n    }\r\n    return this.workpackage_DictVM;\r\n  }\r\n\r\n  elementFilterSetting_DictVM\r\n  get ElementFilterSetting_DictVM() {\r\n    if (!this.elementFilterSetting_DictVM){\r\n      this.elementFilterSetting_DictVM = util.GetElementFilterSetting_DictVM();\r\n    }\r\n    return this.elementFilterSetting_DictVM;\r\n  }\r\n\r\n  massExportSetting_DictVM\r\n  get MassExportSetting_DictVM() {\r\n    if (!this.massExportSetting_DictVM){\r\n      this.massExportSetting_DictVM = util.GetMassExportSetting_DictVM();\r\n    }\r\n    return this.massExportSetting_DictVM;\r\n  }\r\n\r\n  massGroupSetting_DictVM\r\n  get MassGroupSetting_DictVM() {\r\n    if (!this.massGroupSetting_DictVM){\r\n      this.massGroupSetting_DictVM = util.GetMassGroupSetting_DictVM();\r\n    }\r\n    return this.massGroupSetting_DictVM;\r\n  }\r\n\r\n  project_DictVM\r\n  get Project_DictVM() {\r\n    if (!this.project_DictVM){\r\n      this.project_DictVM = util.GetProject_DictVM();\r\n    }\r\n    return this.project_DictVM;\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM(){\r\n    if (!this.massResultCompVM){\r\n      this.massResultCompVM = util.GetMassResultCompVM();\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n  set MassResultCompVM(v) {\r\n    this.massResultCompVM = v;\r\n    if (!v)\r\n    {\r\n      this.pmData.MassResultComp = v;\r\n    }\r\n    else{\r\n      this.pmData.MassResultComp = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = this.pmData.FilterValueTypes;\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = this.pmData.StringFilterTypes;\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.pmData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = this.pmData.ValueRetrieveTypes\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = this.pmData.ParameterNames;\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = this.pmData.MassPropertyNames;\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = this.pmData.MassTypes;\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = \r\n        util.GetWorkItemExportSetting_Dict(this);\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n\r\n  isDebug = undefined\r\n  get IsDebug(){\r\n    if (this.isDebug === undefined){\r\n      this.isDebug = this.pmData.IsDebug;\r\n    }\r\n    return this.isDebug;\r\n  } set IsDebug(v){\r\n    this.isDebug = this.pmData.IsDebug = v;\r\n  }\r\n\r\n  OnSet_ProjectViewType_Func_Dict = []\r\n\r\n  projectViewType = pvt.mass\r\n  get ProjectViewType(){\r\n    return this.projectViewType;\r\n  } set ProjectViewType(v){\r\n    this.projectViewType = v;\r\n    this.OnSet_ProjectViewType_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  currentProject = undefined\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n    this.pmData.CurrentProject = v?.ModelItem\r\n  }\r\n}","import * as util from './MGS_FieldVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MGS_FieldVM {\r\n  get Index() {\r\n    return this.Dict.FieldVMs.indexOf(this);\r\n  }\r\n\r\n  get Fields(){\r\n    return this.Dict.ModelItem.Fields;\r\n  }\r\n\r\n  get Field(){\r\n    return this.Fields[this.Index];\r\n  }\r\n  set Field(v){\r\n    this.Fields[this.Index] = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return util.GetFieldStorageList();\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = selectVMUtil.get(this.FieldStorageList, this.Field);\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    var index = this.Index;\r\n    this.Fields.splice(index, 1);\r\n    \r\n    var list = this.Dict.FieldVMs;\r\n    list.splice(index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldSelectVM.InitialItem = v.Field;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MGS_FieldVM from \"./MGS_FieldVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MGS_FieldVM();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldStorageList = () => {\r\n  return pmDataVM().MassPropertyNames;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassGroupSettingDataVMUtil'\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport default class MassGroupSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fieldVMs : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  fieldVMs = undefined\r\n  get FieldVMs(){\r\n    if (!this.fieldVMs){\r\n      this.fieldVMs = util.GetFieldVMs(this);\r\n    }\r\n    return this.fieldVMs;\r\n  }\r\n  set FieldVMs(v){\r\n    var list = this.fieldVMs;\r\n    var modelList = this.ModelItem.Fields;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount){\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount){\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = originItemVM.Field;\r\n        modelList.push(item);\r\n\r\n        var itemVM = fieldVMUtil.get(item,this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewFieldVM = () => {\r\n    var item = this.ModelItem.AddNewField();\r\n    var itemView = fieldVMUtil.get(item, this);\r\n    this.FieldVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldVMs = v.FieldVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassGroupSettingDataVM from './MassGroupSettingDataVM';\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldVMs = (q) => {\r\n  var fields = q.ModelItem.Fields;\r\n  return fields.map(x => fieldVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassGroupSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    \r\n  }\r\n}","import * as dataVMUtil from './MassGroupSettingDataVMUtil'\r\nimport MassGroupSettingVM from './MassGroupSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport class CSVExport {\r\n  data = []\r\n  get Data() {\r\n    if (this.Override_Get_Data) {\r\n      return this.Override_Get_Data()\r\n    }\r\n    return this.data;\r\n  } set Data(v) {\r\n    this.data = v;\r\n  }\r\n\r\n  fileName\r\n  get FileName() {\r\n    if (this.Override_Get_FileName) {\r\n      return this.Override_Get_FileName();\r\n    }\r\n    return this.fileName;\r\n  } set FileName(v) {\r\n    this.fileName = v;\r\n  }\r\n\r\n  Export = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    const ws = XLSX.utils.json_to_sheet(this.Data, this.Headers);\r\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n  \r\n  ExportTest = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    var ws1 = {}\r\n    ws1.Name = 'Title';\r\n    ws1['!ref'] = \"A1:E5\";\r\n    ws1['A1'] = {\r\n      t: 'n', \r\n      v: 100\r\n    }\r\n\r\n    var ws2 = {}\r\n    ws2.Name = 'Raw Data'\r\n    ws2['!ref'] = \"A1:E5\";\r\n    ws2['B2'] = {\r\n      t: 'n', \r\n      v: 200\r\n    }\r\n    ws2['B3'] = {\r\n      v: 200, f : 'B2'\r\n    }\r\n    ws2['C1'] = {\r\n      v: 300, \r\n      f : 'Title!A1'\r\n    }\r\n\r\n    ws2['C2'] = {\r\n      v: 300, \r\n      f : 'sum(Title!A1, B2)'\r\n    }\r\n\r\n    // const ws = XLSX.utils.json_to_sheet(this.Data, this.Headers);\r\n    // ws['!ref'] = \"A1:E5\";\r\n    // ws['E5'] = {\r\n    //   t : 's',\r\n    //   v : '100'\r\n    // };\r\n    // debugger\r\n\r\n    //const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    \r\n    const wb = { \r\n      Sheets: { \r\n        \r\n       }, \r\n      SheetNames: [ws1.Name, ws2.Name] \r\n    };\r\n    wb.Sheets[ws1.Name] = ws1;\r\n    wb.Sheets[ws2.Name] = ws2;\r\n\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n}","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport class ExcelExport {\r\n  workbook\r\n  get Workbook(){\r\n    if (this.Override_Get_Workbook){\r\n      return this.Override_Get_Workbook()\r\n    }\r\n    return this.workbook;\r\n  } set Workbook(v){\r\n    this.workbook = v;\r\n  }\r\n\r\n  fileName\r\n  get FileName() {\r\n    if (this.Override_Get_FileName) {\r\n      return this.Override_Get_FileName();\r\n    }\r\n    return this.fileName;\r\n  } set FileName(v) {\r\n    this.fileName = v;\r\n  }\r\n\r\n  Export = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    \r\n    const excelBuffer = XLSX.write(this.Workbook, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './MT_CellUtil'\r\n\r\nexport class MT_Cell {\r\n  // Lấy thứ tự trong lập trình\r\n  row = 0\r\n  get Row(){\r\n    if (this.Override_Get_Row){\r\n      return this.Override_Get_Row();\r\n    }\r\n    return this.row;\r\n  } set Row(v){\r\n    this.row = v;\r\n    this.Override_Get_Row = undefined;\r\n  }\r\n\r\n  // Lấy thứ tự trong lập trình\r\n  column = 0\r\n  get Column(){\r\n    if (this.Override_Get_Column){\r\n      return this.Override_Get_Column();\r\n    }\r\n    return this.column\r\n  } set Column(v){\r\n    this.column = v;\r\n    this.Override_Get_Column = undefined;\r\n  }\r\n\r\n  Type \r\n  Value\r\n\r\n  formula\r\n  get Formula(){\r\n    if (this.Override_Get_Formula){\r\n      return this.Override_Get_Formula();\r\n    }\r\n    return this.formula;\r\n  } set Formula(v){\r\n    this.formula = v;\r\n    this.Override_Get_Formula = undefined;\r\n  }\r\n\r\n  get Address(){\r\n    var obj = genUtil.ExcelCellName(this.Row, this.Column);\r\n    return obj;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  isContinueSubRows\r\n  get IsContinueSubRows(){\r\n    if (this.isContinueSubRows === undefined){\r\n      this.isContinueSubRows = util.GetIsContinueSubRows(this);\r\n    }\r\n    return this.isContinueSubRows;\r\n  }\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      t : this.Type,\r\n      v : this.Value,\r\n      f : this.Formula,\r\n      z : this.Format,\r\n      s : this.Style\r\n    }\r\n    return obj;\r\n  }\r\n}","// Property\r\nexport const GetSubItems = (q) => {\r\n  var column = q.Column;\r\n  return q.Dict.SubItems.map(x => {\r\n    var list = x.Cells;\r\n    var index = list.findIndex(y => y.Column === column);\r\n    return index !== -1 ? list[index] : undefined;\r\n  }).filter(x => x !== undefined);\r\n}\r\n\r\nexport const GetIsContinueSubRows = (q) => {\r\n  var isValid = true;\r\n\r\n  q.SubItems.forEach(x => {\r\n    if (isValid && x.SubItems.length !== 0){\r\n      isValid = false;\r\n    }\r\n  })\r\n\r\n  return isValid;\r\n}","import * as util from './MT_Data_RowUtil'\r\n\r\nexport class MT_Data_Row {\r\n  Worksheet\r\n\r\n  Row\r\n\r\n  get Rank(){\r\n    return this.Row.Rank;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  get FullItems(){\r\n    return util.GetFullItems(this);\r\n  }\r\n\r\n  cells\r\n  get Cells(){\r\n    if (!this.cells){\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  get FullIndex() {\r\n    return this.Worksheet.FullRows.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  }\r\n}","export const string = 's'\r\nexport const number = 'n'","import { MT_Cell } from \"./MT_Cell\";\r\nimport { MT_Data_Row } from \"./MT_Data_Row\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\n\r\n// Instance\r\nexport const get = (row, ws, supItem) => {\r\n  var qI = new MT_Data_Row();\r\n\r\n  qI.Row = row;\r\n  qI.Worksheet = ws;\r\n  qI.SupItem = supItem;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetSubItems = (q) => {\r\n  return q.Row.SubItems.map(x => get(x, q.Worksheet, q));\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  var row = q.Row;\r\n  var title = '';\r\n\r\n  for (var i = 0; i < row.Rank; i++) {\r\n    title += '  ';\r\n  }\r\n\r\n  title += row.Title;\r\n\r\n  return title;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var vc_dict = q.ValueCell_Dict = [];\r\n\r\n  var firstCol = q.Worksheet.First_ValueColumn;\r\n  var firstRow = q.Worksheet.First_ValueRow;\r\n\r\n  var row = q.Row;\r\n  var list = []\r\n  var getRowFunc = () => q.FullIndex + firstRow;\r\n\r\n  var titleCell = new MT_Cell();\r\n  titleCell.Dict = q;\r\n  titleCell.Type = c_vt.string;\r\n\r\n  titleCell.Value = q.Title;\r\n  titleCell.Column = 0 + firstCol;\r\n  titleCell.Override_Get_Row = getRowFunc\r\n  list.push(titleCell);\r\n\r\n  var columns = row.Table.Columns\r\n  row.Cells.forEach(x => {\r\n    var valueCell = new MT_Cell()\r\n    valueCell.Dict = q;\r\n    valueCell.Type = c_vt.number;\r\n    valueCell.Value = x.TotalValue\r\n    valueCell.Format = '0.00'\r\n    valueCell.Column = \r\n      columns.indexOf(x.Column) + 1 + firstCol\r\n    valueCell.Override_Get_Row = getRowFunc\r\n\r\n    valueCell.Override_Get_Formula = () => {\r\n      var subItems = valueCell.SubItems;\r\n      var length = subItems.length;\r\n      if (length === 0) return undefined;\r\n\r\n      var formula\r\n      if (!valueCell.IsContinueSubRows) {\r\n        formula = subItems.reduce((a, x, i) => {\r\n          if (i !== 0) {\r\n            a += ','\r\n          };\r\n          a += x.Address\r\n          return a\r\n        }, 'SUM(');\r\n\r\n        formula += ')';\r\n      } else {\r\n        formula = `SUM(${subItems[0].Address}:${subItems[length-1].Address})`\r\n      }\r\n\r\n      return formula;\r\n    }\r\n\r\n    var key = x.Column.Name\r\n    list.push(valueCell);\r\n    vc_dict.push({\r\n      Key: key,\r\n      Value: valueCell\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetFullItems = (q) => {\r\n  var list = [q];\r\n\r\n  q.SubItems.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  });\r\n\r\n  return list;\r\n}","import * as util from './MT_Data_WorksheetUtil'\r\n\r\nexport class MT_Data_Worksheet {\r\n  get Table(){\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  mainRows\r\n  get MainRows(){\r\n    if (!this.mainRows){\r\n      this.mainRows = util.GetMainRows(this)\r\n    }\r\n    return this.mainRows;\r\n  }\r\n\r\n  fullRows\r\n  get FullRows(){\r\n    if (!this.fullRows){\r\n      this.fullRows = util.GetFullRows(this);\r\n    }\r\n    return this.fullRows;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells(){\r\n    if (!this.valueCells){\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells;\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName(){\r\n    return util.GetRangeName(this); \r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      '!ref' : this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import * as rowUtil from './MT_Data_RowUtil'\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { MT_Cell } from './MT_Cell';\r\n\r\n// Property\r\nexport const GetMainRows = (q) => {\r\n  return q.Table.MainRows.map(x => rowUtil.get(x, q));\r\n}\r\n\r\nexport const GetFullRows = (q) => {\r\n  var list = [];\r\n\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var list = [];\r\n\r\n  q.FullRows.forEach(x => {\r\n    list.push.apply(list, x.Cells);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var list = [];\r\n  q.Table.Columns.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x.Name;\r\n    cell.Column = i + fc + 1;\r\n    cell.Row = fr\r\n    cell.Style = {\r\n      font : {\r\n        bold : true\r\n      }\r\n    }\r\n\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_RawData_WorksheetUtil'\r\n\r\nexport class MT_RawData_Worksheet {\r\n  Workbook\r\n\r\n  get Table() {\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  dataRows\r\n  get DataRows(){\r\n    if (!this.dataRows){\r\n      this.dataRows = util.GetDataRows(this);\r\n    }\r\n    return this.dataRows;\r\n  }\r\n\r\n  tableRows\r\n  get TableRows() {\r\n    if (!this.tableRows) {\r\n      this.tableRows = util.GetTableRows(this);\r\n    }\r\n    return this.tableRows;\r\n  }\r\n\r\n  records\r\n  get Records() {\r\n    if (!this.records) {\r\n      this.records = util.GetRecords(this);\r\n    }\r\n    return this.records\r\n  }\r\n\r\n  InfoFields = []\r\n\r\n  valueFields\r\n  get ValueFields() {\r\n    if (!this.valueFields) {\r\n      this.valueFields = util.GetValueFields(this);\r\n    }\r\n    return this.valueFields;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells() {\r\n    if (!this.valueCells) {\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName() {\r\n    return util.GetRangeName(this);\r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData() {\r\n    var obj = {\r\n      '!ref': this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Cell } from \"./MT_Cell\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Property\r\nexport const GetDataRows = (q) => {\r\n  return q.Workbook.Data_WS.FullRows\r\n    .filter(x => x.SubItems.length === 0)\r\n}\r\n\r\nexport const GetTableRows = (q) => {\r\n  return q.DataRows.map(x => x.Row)\r\n}\r\n\r\nexport const GetValueFields = (q) => {\r\n  return q.Table.Columns.map(x => x.Name);\r\n}\r\n\r\nexport const GetRecords = (q) => {\r\n  return q.DataRows.map(x => {\r\n    // Init Cells\r\n    var cells = x.Cells;\r\n\r\n    var obj = x.Row.ExportData;\r\n\r\n    // Xử lý phần sắp xếp  Info Fields\r\n    var infoFields = q.InfoFields;\r\n    obj.Infos.map(x => x.Key).forEach(y => {\r\n      if (!infoFields.includes(y)) {\r\n        infoFields.push(y);\r\n      }\r\n    });\r\n\r\n    return {\r\n      Binding_DataRow: x,\r\n      Value: obj\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var fc = q.First_ValueColumn;\r\n  var fr = q.First_ValueRow;\r\n\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var list = [];\r\n  var ifs = q.InfoFields;\r\n  var ifl = ifs.length\r\n  var vfs = q.ValueFields;\r\n\r\n  records.forEach((x, i) => {\r\n    // Truy xuất phần binding\r\n    var vc_dict = x.Binding_DataRow.ValueCell_Dict\r\n\r\n    // Xử lý phần Value Object\r\n    var value = x.Value;\r\n    var cell\r\n    var row = i + fr;\r\n\r\n    // Xử lý Info\r\n    value.Infos.forEach(y => {\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.string;\r\n      cell.Value = y.Value;\r\n      cell.Column = ifs.indexOf(y.Key) + fc;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n    })\r\n\r\n    // Xử lý Value\r\n    value.Values.forEach(y => {\r\n      var key = y.Key;\r\n      var cell_val = y.Value;\r\n\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.number;\r\n      cell.Value = cell_val;\r\n      cell.Format = '0.00'\r\n      cell.Column = vfs.indexOf(key) + fc + ifl;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n\r\n      // Xử lý phần Binding\r\n      //debugger\r\n      var index = vc_dict.findIndex(z => z.Key === key);\r\n      var data_cell = vc_dict[index].Value;\r\n\r\n      if (cell_val) {\r\n        data_cell.Formula = `raw_data!${cell.Address}`;\r\n      }\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var fields = q.InfoFields.concat(q.ValueFields)\r\n\r\n  var list = [];\r\n  fields.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x;\r\n    cell.Column = i + fc;\r\n    cell.Row = fr\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_WorkbookUtil'\r\n\r\nexport class MT_Workbook {\r\n  Table\r\n\r\n  get All_WS(){\r\n    return [ this.RawData_WS, this.Data_WS]\r\n    //return [ this.Data_WS, this.RawData_WS]\r\n    //return [ this.Data_WS ]\r\n  }\r\n\r\n  data_WS\r\n  get Data_WS(){\r\n    if (!this.data_WS){\r\n      this.data_WS = util.GetData_WS(this);\r\n    }\r\n    return this.data_WS;\r\n  }\r\n\r\n  rawData_WS\r\n  get RawData_WS(){\r\n    if (!this.rawData_WS){\r\n      this.rawData_WS = util.GetRawData_WS(this);\r\n    }\r\n    return this.rawData_WS;\r\n  }\r\n\r\n  get ResultData (){\r\n    var obj = {\r\n      Sheets : { },\r\n      SheetNames : []\r\n    }\r\n\r\n    this.All_WS.forEach(x => {\r\n      obj.Sheets[x.Title] = x.ResultData\r\n      obj.SheetNames.push(x.Title);\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Data_Worksheet } from \"./MT_Data_Worksheet\";\r\nimport { MT_RawData_Worksheet } from \"./MT_RawData_Worksheet\";\r\nimport { MT_Workbook } from \"./MT_Workbook\"\r\n\r\n// Instance\r\nexport const get = (table) => {\r\n  var qI = new MT_Workbook();\r\n\r\n  qI.Table = table;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetData_WS = (q) =>{\r\n  var qI = new MT_Data_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'data'\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRawData_WS = (q) => {\r\n  var qI = new MT_RawData_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'raw_data'\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as mif from '../item/MassItemField'\r\nimport MassColumn from './MassColumn';\r\nimport * as colUtil from './MassColumnUtil'\r\nimport * as rowUtil from './MassRowUtil'\r\nimport * as cellUtil from './MassCellUtil'\r\nimport * as util from './MassTableUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as st from '../../setting/base/SettingType'\r\nimport { message } from 'antd';\r\nimport * as mgsUtil from '../../setting/massGroup/MassGroupSettingUtil'\r\nimport * as mgsVMUtil from '../../setting/massGroup/MassGroupSettingVMUtil'\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport * as compUtil from './rowgroup/MassGroupComponentUtil'\r\nimport * as exportUtil from '../../../../export/csv/CSVExportUtil';\r\nimport dayjs from 'dayjs';\r\nimport * as eeUtil from '../../../../export/excel/ExcelExportUtil';\r\nimport * as wbUtil from './export/MT_WorkbookUtil';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport default class MassTable {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsValidTable: observable,\r\n      Columns: observable,\r\n      MainRows: observable,\r\n      Cells: observable,\r\n      columnField: observable,\r\n      IsOnSaveMassGroup: observable\r\n    })\r\n  }\r\n\r\n\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    if (v && v.length !== 0) {\r\n      this.Build();\r\n      this.IsValidTable = true;\r\n    }\r\n    else {\r\n      this.IsValidTable = false;\r\n    }\r\n  }\r\n\r\n  IsValidTable = false\r\n\r\n  columnField = mif.Project\r\n  get ColumnField() {\r\n    return this.columnField;\r\n  }\r\n  set ColumnField(v) {\r\n    this.columnField = v;\r\n  }\r\n\r\n  massGroupSetting\r\n  get MassGroupSetting() {\r\n    return this.massGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.massGroupSetting = v;\r\n    if (!v) {\r\n      this.MainMGC = v;\r\n    } else {\r\n      this.MainMGC = compUtil.Clone(v.Data.MassGroupComponent);\r\n    }\r\n  }\r\n\r\n  mainMGC\r\n  get MainMGC() {\r\n    if (!this.mainMGC) {\r\n      this.mainMGC = util.GetMainMGC(this);\r\n    }\r\n    return this.mainMGC;\r\n  }\r\n  set MainMGC(v) {\r\n    this.mainMGC = v;\r\n    this.Init();\r\n    if (!v) {\r\n      this.MainMGI = undefined;\r\n    } else {\r\n      this.MainMGI = util.GetMainMGI(this);\r\n    }\r\n  }\r\n\r\n  mainMGI\r\n  get MainMGI() {\r\n    if (!this.mainMGI) {\r\n      this.mainMGI = util.GetMainMGI(this);\r\n    }\r\n    return this.mainMGI;\r\n  }\r\n  set MainMGI(v) {\r\n    this.mainMGI = v;\r\n  }\r\n\r\n  Columns = undefined\r\n  FullRows = undefined\r\n  MainRows = undefined\r\n  Cells = undefined\r\n\r\n  Init = () => {\r\n    this.Columns = [];\r\n    this.MainRows = [];\r\n    this.FullRows = [];\r\n    this.Cells = [];\r\n  }\r\n\r\n  get AllRows() {\r\n    return util.GetAllRows(this);\r\n  }\r\n\r\n  GetColumn = (v) => {\r\n    var list = this.Columns;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = colUtil.get(v, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetRow = (v, supItem) => {\r\n    var list = undefined;\r\n    if (supItem) {\r\n      list = supItem.SubItems;\r\n    } else {\r\n      list = this.MainRows;\r\n    }\r\n\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = rowUtil.get(v, this);\r\n      item.SupItem = supItem;\r\n\r\n      list.push(item);\r\n      this.FullRows.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetCell = (col, row) => {\r\n    var list = this.Cells;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Column === col && x.Row === row);\r\n    if (index === -1) {\r\n      item = cellUtil.get(col, row, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n\r\n  Build = () => {\r\n    var colField = this.ColumnField;\r\n\r\n    if (colField === mif.Phase) {\r\n      pmData().MassResultComp.Phases.forEach(x => {\r\n        var col = this.GetColumn(mif.GetValueString(x, colField));\r\n      })\r\n    }\r\n\r\n    this.Items.forEach(x => {\r\n      switch (colField) {\r\n        case mif.Phase:\r\n          x.ValidPhasesByInput.forEach(y => {\r\n            this.HandleItem(x, y);\r\n          })\r\n          break;\r\n        default:\r\n          this.HandleItem(x, x.GetValue(colField));\r\n          break;\r\n      }\r\n    })\r\n\r\n    if (!this.IsHaveAsyncData) {\r\n      this.UpdateData();\r\n    }\r\n  }\r\n\r\n  IsHaveAsyncData = false;\r\n  IsOnSaveMassGroup = false;\r\n\r\n  HandledItems = []\r\n  HandledItemPhases = []\r\n\r\n  OnSetHandledRatio_Funcs = []\r\n\r\n  handledRatio\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  } set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.OnSetHandledRatio_Funcs.forEach(x => x(v));\r\n  }\r\n\r\n  AddHandledItems = (item) => {\r\n    if (this.ColumnField !== mif.Phase) {\r\n      this.HandledItems.push(item);\r\n    } else {\r\n      var list = this.HandledItemPhases;\r\n      var index = list.findIndex(x => x.Item === item);\r\n      var obj = undefined;\r\n      if (index === -1) {\r\n        obj = {\r\n          Item: item,\r\n          Count: 0\r\n        };\r\n        list.push(obj);\r\n      } else {\r\n        obj = list[index];\r\n      }\r\n      obj.Count++;\r\n\r\n      if (obj.Count === item.ValidPhasesByInput.length) {\r\n        this.HandledItems.push(item);\r\n      }\r\n    }\r\n\r\n    this.HandledRatio = this.HandledItems.length / this.Items.length;\r\n\r\n    if (this.HandledItems.length === this.Items.length) {\r\n      this.UpdateData();\r\n      this.HandledItems = [];\r\n    }\r\n  }\r\n\r\n  UpdateData = () => {\r\n    this.MainRows.forEach(x => x.UpdateData());\r\n    this.MainRows = rowUtil.Order(this.MainRows);\r\n\r\n    this.Cells.forEach(x => x.UpdateData());\r\n    this.IsUpdateDataDone = true;\r\n  }\r\n\r\n  OnIsUpdateDataDone_Funcs = []\r\n\r\n  set IsUpdateDataDone(v) {\r\n    this.OnIsUpdateDataDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  HandleItem = (item, colFieldValue, mgc, initialRow) => {\r\n    var col =\r\n      this.GetColumn(mif.GetValueString(colFieldValue, this.ColumnField));\r\n    var rows = initialRow ? [initialRow] : [];\r\n    var mgc = mgc ? mgc : this.MainMGC;\r\n\r\n    this.HandleRowFieldIndex(item, col, rows, mgc, 0);\r\n  }\r\n\r\n  // Xử lý tạo Row với giá trị tương ứng và Cell bên trong\r\n  GetRow_Value_FieldIndex = (item, col, rows, val, mgc, rowFieldIndex) => {\r\n    var mgis = mgc.Items;\r\n    var itemCount = mgis.length;\r\n    var mgi = mgis[rowFieldIndex];\r\n\r\n    // Sup Row của dòng khối lượng đang xét\r\n    var lastRow = rows.length !== 0 ? rows[rows.length - 1] : undefined\r\n    mgi.SupRow = lastRow;\r\n\r\n    var rowField = mgi.Field;\r\n    if (!rowField) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var valueString = mif.GetValueString(val, rowField);\r\n    var fullValue = lastRow ? `${lastRow.FullValue}__${valueString}` : valueString;\r\n\r\n    if (mgi.NotIncludeValues.includes(fullValue)) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var row = undefined;\r\n    const addRow = (supRow) => {\r\n      return this.Handle_AddRow(fullValue, supRow);\r\n    }\r\n\r\n    const handleRow = (row) => {\r\n      row.MassGroupItem = mgi;\r\n      rows.push(row);\r\n\r\n      var subMgcs = mgi.SubComponents;\r\n      var subIndex = subMgcs.findIndex(x =>\r\n        filterUtil.IsValid(x.Filter, fullValue));\r\n      if (subIndex !== -1) {\r\n        mgc = subMgcs[subIndex];\r\n        mgc.IsHaveMassItem = true;\r\n\r\n        rowFieldIndex = -1;\r\n        itemCount = mgc.Items.length;\r\n\r\n        row.SubMassGroupComponent = mgc;\r\n      }\r\n\r\n      var cell = this.GetCell(col, row);\r\n      cell.Items.push(item);\r\n\r\n      if (rowFieldIndex === itemCount - 1) {\r\n        this.AddHandledItems(item);\r\n      } else {\r\n        this.HandleRowFieldIndex(item, col, rows, mgc, rowFieldIndex + 1);\r\n      }\r\n    }\r\n\r\n    var mgiItem = mgi.GetItem(fullValue, valueString);\r\n    var replaceMgi = mgiItem.NewMGI;\r\n    if (replaceMgi) {\r\n      // Thêm Value-Title cho MassGroupItem\r\n      replaceMgi.GetItem(fullValue, valueString);\r\n\r\n      this.Handle_ReplaceMGI(replaceMgi, addRow, handleRow);\r\n    } else {\r\n      row = addRow(lastRow);\r\n      handleRow(row);\r\n    }\r\n  }\r\n\r\n  Handle_AddRow = (fullValue, supRow) => {\r\n    var r1 = this.GetRow(fullValue, supRow);\r\n    r1.FullValue = fullValue;\r\n    return r1;\r\n  }\r\n\r\n  Handle_ReplaceMGI = (replaceMgi, addRow, handleRow) => {\r\n    const awaitGetSupRowForAdd = () => {\r\n      var supRow = replaceMgi.SupRow;\r\n      var r2 = addRow(supRow);\r\n      r2.ReplaceMGI = replaceMgi;\r\n\r\n      return r2;\r\n    }\r\n\r\n    var row = undefined\r\n    if (replaceMgi.IsFirstSetSupRow) {\r\n      row = awaitGetSupRowForAdd();\r\n      handleRow(row);\r\n    } else {\r\n      replaceMgi.OnIsFirstSetSupRow_Funcs.push(() => {\r\n        row = awaitGetSupRowForAdd();\r\n        handleRow(row);\r\n      })\r\n    }\r\n  }\r\n\r\n  HandleRowFieldIndex = (item, col, rows, mgc, rowFieldIndex) => {\r\n    var rowField = mgc.Items[rowFieldIndex].Field;\r\n\r\n    var val = item.GetValue(rowField, (val) =>\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex));\r\n    if (!Array.isArray(val)) {\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex);\r\n    } else {\r\n      this.IsHaveAsyncData = true;\r\n    }\r\n  }\r\n\r\n  SaveMassGroup = () => {\r\n    this.IsOnSaveMassGroup = true;\r\n  }\r\n\r\n  massGroupName = undefined\r\n  get MassGroupName() {\r\n    if (!this.massGroupName) {\r\n      this.massGroupName = util.GetMassGroupName(this);\r\n    }\r\n    return this.massGroupName;\r\n  }\r\n  set MassGroupName(v) {\r\n    this.massGroupName = v;\r\n  }\r\n\r\n  massGroupNameVM\r\n  get MassGroupNameVM() {\r\n    if (!this.massGroupNameVM) {\r\n      var obj = this.massGroupNameVM =\r\n        textUtil.get(this.MassGroupName, 'Tên set khối lượng');\r\n      obj.onSetContent = (v) => this.MassGroupName = v;\r\n    }\r\n    return this.massGroupNameVM;\r\n  }\r\n\r\n  MassGroupInputOK = () => {\r\n    var items = pmData().MassGroupSetting_Dict.Items;\r\n    var index = items.findIndex(x => x.Name === this.MassGroupName);\r\n    var _id = undefined;\r\n    if (index !== -1) {\r\n      _id = items[index]._id;\r\n    }\r\n\r\n    var apiData = {\r\n      _id,\r\n      name: this.MassGroupName,\r\n      settingType: st.massgroup,\r\n      data: {\r\n        massGroupComponent: this.MainMGC.ApiData\r\n      }\r\n    };\r\n\r\n    var url = `https://api.bimdev.vn/api/hbs/mg`;\r\n\r\n    var command = _id ? 'edit' : 'add';\r\n    const apiFunc = () => _id ? api.put(`${url}/${command}`, apiData) :\r\n      api.post(`${url}/${command}`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        var dict = pmData().MassGroupSetting_Dict;\r\n        var item = mgsUtil.get(data, dict);\r\n        dict.Items.push(item);\r\n\r\n        var dictVM = pmDataVM().MassGroupSetting_DictVM;\r\n        var itemVM = mgsVMUtil.get(item, dictVM);\r\n        dictVM.Items.push(itemVM);\r\n\r\n        message.success(`${command} massgroup successfully`);\r\n      })\r\n\r\n    this.IsOnSaveMassGroup = false;\r\n    this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n  }\r\n\r\n  MassGroupInputCancel = () => {\r\n    this.IsOnSaveMassGroup = false;\r\n    this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n  }\r\n\r\n  AddMainRow = () => {\r\n    return rowUtil.Add(undefined, this);\r\n  }\r\n\r\n  // Excel Export\r\n  get ExcelWorkbook(){\r\n    return wbUtil.get(this).ResultData;\r\n  }\r\n\r\n  excelExport\r\n  get ExcelExport(){\r\n    if (!this.excelExport){\r\n      this.excelExport = eeUtil.get(\r\n        undefined, undefined,\r\n        () => this.ExportTitle,\r\n        () => this.ExcelWorkbook);\r\n    }\r\n    return this.excelExport;\r\n  }\r\n\r\n  Export = () => {\r\n    this.ExcelExport.Export();\r\n  }\r\n}","import MassColumn from \"./MassColumn\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassColumn();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import {ExcelExport} from './ExcelExport'\r\n\r\nexport const get = (fileName, wb, ovrgFileName, ovrgWb) => {\r\n  var qI = new ExcelExport();\r\n\r\n  qI.FileName = fileName;\r\n  qI.Override_Get_FileName = ovrgFileName;\r\n  qI.Workbook = wb;\r\n  qI.Override_Get_Workbook = ovrgWb;\r\n\r\n  return qI;\r\n}","import MassTable from \"../table/MassTable\";\r\n\r\nexport default class MassItem_Dict {\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n    this.MassTable.Items = v;\r\n  }\r\n\r\n  massTable\r\n  get MassTable() {\r\n    if (!this.massTable) {\r\n      this.massTable = new MassTable();\r\n    }\r\n    return this.massTable;\r\n  }\r\n\r\n  set MassGroupSetting(v)  {\r\n    this.MassTable.MassGroupSetting = v;\r\n  }\r\n}","import * as util from './MassItemUtil'\r\nimport * as mif from './MassItemField'\r\nimport { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport default class MassItem {\r\n  Value\r\n  Unit\r\n\r\n  projectId\r\n\r\n  project\r\n  get Project() {\r\n    if (!this.project) {\r\n      this.project = util.GetProject(this);\r\n    }\r\n    return this.project;\r\n  }\r\n\r\n  workpackageId\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    if (!this.workpackage) {\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = util.GetPhases(this);\r\n    }\r\n    return this.phases;\r\n  }\r\n\r\n  get ValidPhasesByInput() {\r\n    return util.GetValidPhasesByInput(this);\r\n  }\r\n\r\n  IsGetElement = false\r\n\r\n  OnGetElementDone_Funcs = []\r\n\r\n  set GetElementDone(v) {\r\n    this.OnGetElementDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  GetValue = (field) => {\r\n    if (!field) {\r\n      return;\r\n    }\r\n\r\n    var data = mif.GetFullFields(this, field);\r\n    var { fields, isFromElement } = data;\r\n\r\n    var getValFunc = () => {\r\n      var obj = this;\r\n      var isValid = true;\r\n\r\n      fields.forEach(x => {\r\n        if (isValid) {\r\n          var temp = obj[x];\r\n          obj = temp;\r\n          if (obj === undefined) {\r\n            isValid = false;\r\n          }\r\n        }\r\n      })\r\n\r\n      return obj;\r\n    }\r\n\r\n    if (!isFromElement || this.Element) {\r\n      return getValFunc();\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id: this._id,\r\n      projectId: this.projectId,\r\n      elementId: this.elementId,\r\n      workpackageId: this.workpackageId,\r\n      exportSetId: this.exportSetId,\r\n      exportSetVersionId: this.exportSetVersionId,\r\n      value: this.Value,\r\n      unit: this.Unit,\r\n      massType: this.MassType,\r\n      info: this.Info\r\n    }\r\n  }\r\n\r\n  AddDatabase = (handle) => {\r\n    var apiData = this.ApiData;\r\n    var { _id } = apiData;\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n\r\n    var command = _id ? 'edit' : 'add';\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/${command}`, apiData) : api.post(`${url}/${command}`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (command === 'add') {\r\n          this._id = data._id;\r\n        }\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`${command} mass successfully`);\r\n      })\r\n  }\r\n\r\n  DeleteDatabase = (handle) => {\r\n    var apiData = {\r\n      _id: this._id\r\n    };\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n    const apiFunc = () => api.put(`${url}/delete`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`delete mass successfully`);\r\n      })\r\n  }\r\n\r\n  IsGet_TLS_LevelGroup = false\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n\r\n  get Get_TLS_LevelGroup(){\r\n    return this.get_TLS_LevelGroup\r\n  }\r\n  set Get_TLS_LevelGroup(v) {\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n    this.get_TLS_LevelGroup = v;\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      util.Handle_TLS_LevelGroup(this);\r\n    }\r\n    return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true;\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    this.OnGet_FullValue_Func_Dict.forEach(x => x.Value())\r\n    this.get_FullValue = v;\r\n  }\r\n\r\n  // bao gồm giá trị tầng điển hình\r\n  fullValue\r\n  get FullValue() {\r\n    if (!this.fullValue) {\r\n      util.Handle_FullValue(this);\r\n    }\r\n    return this.fullValue;\r\n  } set FullValue(v) {\r\n    this.fullValue = v;\r\n    this.Get_FullValue = true;\r\n  }\r\n\r\n  phaseItems\r\n  get PhaseItems(){\r\n    if (!this.phaseItems){\r\n      this.phaseItems = util.GetPhaseItems(this);\r\n    }\r\n    return this.phaseItems;\r\n  }\r\n\r\n  GetPhaseItem = (phaseName) => {\r\n    var list = this.PhaseItems;\r\n    var index = list.findIndex(x => x.Phase.Name === phaseName);\r\n    return list[index];\r\n  }\r\n}","import * as util from './MIPh_ItemUtil'\r\n\r\nexport default class MIPh_Item {\r\n  Phase\r\n\r\n  get Project(){\r\n    return this.Phase.Project\r\n  }\r\n\r\n  get MassItem(){\r\n    return this.Dict;\r\n  }\r\n\r\n  IsGet_TLS_LevelGroup = false\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n\r\n  get Get_TLS_LevelGroup(){\r\n    return this.get_TLS_LevelGroup\r\n  }\r\n  set Get_TLS_LevelGroup(v) {\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n    this.get_TLS_LevelGroup = v\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      util.Handle_TLS_LevelGroup(this);\r\n    }\r\n    return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true;\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    this.OnGet_FullValue_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  // bao gồm giá trị tầng điển hình\r\n  fullValue\r\n  get FullValue() {\r\n    if (!this.fullValue) {\r\n      util.Handle_FullValue(this);\r\n    }\r\n    return this.fullValue;\r\n  } set FullValue(v) {\r\n    this.fullValue = v;\r\n    this.Get_FullValue = true;\r\n  }\r\n}","import MIPh_Item from \"./MIPh_Item\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as mif from '../MassItemField'\r\n\r\n// Instance\r\nexport const get = (phase, dict) => {\r\n  var qI = new MIPh_Item();\r\n  qI.Phase = phase;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_TLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  var phase = q.Phase;\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    var pi = GetValidTLS_PageItem(q, tls.Data);\r\n    return GetValidTLS_LevelGroup(q, pi);\r\n  }\r\n\r\n  var tls = phase.TypicalLevelSetting;\r\n  if (tls) {\r\n    q.TLS_LevelGroup = getLevelGroup_Func(tls);\r\n  } else {\r\n    phase.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TLS_LevelGroup = getLevelGroup_Func(phase.TypicalLevelSetting);\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      isValid = x.Values.includes(q.MassItem.GetValue(field));\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // Kiểm tra Level hiện tại có trong tập hợp Level hay không\r\n    //if (!validLg && x.Levels.includes(q.GetValue(mif.level))) {\r\n\r\n    // Cách kiểm tra mới: Level primary tương ứng Leve hiện tại\r\n    if (!validLg && x.Primary === q.MassItem.GetValue(mif.level)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\nexport const Handle_FullValue = (q) => {\r\n  if (q.IsGet_FullValue) return undefined;\r\n  q.IsGet_FullValue = true;\r\n\r\n  const getFullValue_Func = (lg) => {\r\n    var count = lg ? lg.Count : 1\r\n    var obj = q.MassItem.Value * count;\r\n    return obj;\r\n  }\r\n\r\n  if (q.TLS_LevelGroup || q.Get_TLS_LevelGroup) {\r\n    q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n  } else {\r\n    genUtil.Add(q.OnGet_TLS_LevelGroup_Func_Dict,\r\n      () => {\r\n        q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n      });\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport MassItem from './MassItem';\r\nimport * as elementUtil from '../../element/ElementUtil'\r\nimport * as mt from '../MassType'\r\nimport * as ut from '../../value/ValueUnit'\r\nimport * as mif from './MassItemField'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as phaseItemUtil from './phaseValue/MIPh_ItemUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new MassItem();\r\n\r\n  qI._id = q._id;\r\n  qI.Value = q.value;\r\n  qI.Unit = q.unit;\r\n  qI.MassType = q.massType;\r\n  qI.Info = q.info;\r\n  qI.projectId = q.projectId;\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.exportSetId = q.exportSetId;\r\n  qI.exportSetVersionId = q.exportSetVersionId;\r\n  qI.Element = q.Elements && q.Elements.length !== 0 ? q.Elements[0] : undefined;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultRebarMass = (project) => {\r\n  var qI = new MassItem();\r\n\r\n  qI.Unit = ut.kg;\r\n  qI.MassType = mt.rebar;\r\n  qI.Info = {}\r\n  qI.projectId = project._id;\r\n\r\n  const setExportSetData = (exportSet) => {\r\n    qI.exportSetId = exportSet._id;\r\n\r\n    var currentVersion = exportSet.CurrentVersion;\r\n    if (!currentVersion) {\r\n      exportSet.OnGetCurrentVersionDone_Func.push(() => {\r\n        currentVersion = exportSet.CurrentVersion;\r\n        qI.exportSetVersionId = currentVersion._id;\r\n      })\r\n    } else {\r\n      qI.exportSetVersionId = currentVersion._id;\r\n    }\r\n  }\r\n\r\n  var inputExportSet = project.InputExportSet;\r\n  if (!inputExportSet) {\r\n    project.OnGetInputExportSetDone_Funcs\r\n      .push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        setExportSetData(inputExportSet);\r\n      })\r\n  } else {\r\n    setExportSetData(inputExportSet);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProject = (q) => {\r\n  var list = pmData().Project_Dict.Items;\r\n  var { projectId } = q;\r\n  var index = list.findIndex(x => x._id === projectId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const getAll = (apiData, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbmr/newlist\";\r\n\r\n  //var start = window.performance.now();\r\n\r\n  api.post(url, apiData, undefined, 2000000)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      //var end = window.performance.now();\r\n      //console.log(`Execution time: ${(end - start)/1000} s`);\r\n\r\n      if (!data) {\r\n        console.log('mass result undefined');\r\n        return;\r\n      }\r\n\r\n      var items = data.map(x => {\r\n        return get(x)\r\n      })\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getRebars = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbmr/rebar?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = undefined;\r\n      if (!data) {\r\n        items = [];\r\n      } else {\r\n        var items = data.map(x => get(x))\r\n      }\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getByViewDetail = (_id, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbdv/massdetail?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var { viewDetail, masses } = data;\r\n      var isGetElement = mt.IsGetElement(viewDetail.massType);\r\n      var items = masses.map(x => get(x, isGetElement));\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetWorkpackage = (q) => {\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var { workpackageId } = q;\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetPhases = (q) => {\r\n  var list = [];\r\n  var phases = pmData().Phase_Dict.Items;\r\n  var exportSetVersionId = q.exportSetVersionId;\r\n  phases.forEach(x => {\r\n    if (x.exportSetVersionIds.includes(exportSetVersionId)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetValidPhasesByInput = (q) => {\r\n  var inputPhases = pmData().MassResultComp.Phases;\r\n  var phases = q.Phases;\r\n  var list = [];\r\n  phases.forEach(x => {\r\n    if (inputPhases.includes(x)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetElementAsync = (q) => {\r\n  var elemId = q.elementId\r\n  if (elemId) {\r\n    elementUtil.GetById(elemId, (data) => {\r\n      q.Element = data\r\n      q.IsGetElement = true;\r\n      q.GetElementDone = true;\r\n    });\r\n  } else {\r\n    q.IsGetElement = true;\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  var project = q.Project;\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    var pi = GetValidTLS_PageItem(q, tls.Data);\r\n    return GetValidTLS_LevelGroup(q, pi);\r\n  }\r\n\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    q.TLS_LevelGroup = getLevelGroup_Func(tls);\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TLS_LevelGroup = getLevelGroup_Func(project.TypicalLevelSetting);\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      isValid = x.Values.includes(q.GetValue(field));\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // Kiểm tra Level hiện tại có trong tập hợp Level hay không\r\n    //if (!validLg && x.Levels.includes(q.GetValue(mif.level))) {\r\n\r\n    // Cách kiểm tra mới: Level primary tương ứng Leve hiện tại\r\n    if (!validLg && x.Primary === q.GetValue(mif.level)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\nexport const Handle_FullValue = (q) => {\r\n  if (q.IsGet_FullValue) return undefined;\r\n  q.IsGet_FullValue = true;\r\n\r\n  const getFullValue_Func = (lg) => {\r\n    var count = lg ? lg.Count : 1\r\n    return q.Value * count;\r\n  }\r\n\r\n  if (q.TLS_LevelGroup || q.Get_TLS_LevelGroup) {\r\n    q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n  } else {\r\n    genUtil.Add(q.OnGet_TLS_LevelGroup_Func_Dict,\r\n      () => {\r\n        q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n      });\r\n  }\r\n}\r\n\r\nexport const GetPhaseItems = (q) => {\r\n  return q.Phases.map(x => phaseItemUtil.get(x, q));\r\n}","import MassItem_Dict from '../item/MassItem_Dict';\r\nimport * as util from './MassResultCompUtil'\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as mif from '../item/MassItemField'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassResultComp {\r\n  Projects = []\r\n\r\n  Phases = []\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict(){\r\n    if (!this.massItem_Dict){\r\n      this.massItem_Dict = new MassItem_Dict();\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  isHavePhase = false\r\n  get IsHavePhase(){\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v){\r\n    this.isHavePhase = v;\r\n    if (v){\r\n    this.MassItem_Dict.MassTable.ColumnField = mif.Phase\r\n    }else{\r\n      this.MassItem_Dict.MassTable.ColumnField = mif.Project\r\n    }\r\n  }\r\n\r\n  GetMassData = () => {\r\n    var wp_Dict = pmData().Workpackage_Dict;\r\n    if (wp_Dict.IsDataChanged){\r\n      wp_Dict.RefreshData();\r\n    }\r\n\r\n    massItemUtil.getAll(this.ApiData, (items) => {\r\n      var dict = this.MassItem_Dict;\r\n\r\n      dict.MassGroupSetting = this.MassGroupSetting ? \r\n        this.MassGroupSetting : undefined;\r\n      dict.Items = items;\r\n      \r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n}","export const GetApiData = (q) => {\r\n  return {\r\n    projectIds : q.Projects.map(x => x._id),\r\n    phaseIds : q.IsHavePhase ? q.Phases.map(x => x._id) : undefined\r\n  }\r\n}","import { Button, message, Space, Tag } from \"antd\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport TableVM from \"../../../../table/TableVM\";\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new RebarMass_Dict();\r\n  qI.Project = project;\r\n\r\n  var projectId = qI.projectId;\r\n  massItemUtil.getRebars(projectId, (items) => {\r\n    qI.Items = items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n  qI.Columns = [\r\n    colUtil.get('Tên cấu kiện', ['Info', 'elementName'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.elementName)\r\n      ], qI),\r\n\r\n    colUtil.get('Hạng mục', ['Info', 'workItem'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.workItem)\r\n      ], qI),\r\n\r\n    colUtil.get('Đường kính', ['Info', 'diameter'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.diameter)\r\n      ], qI),\r\n\r\n    colUtil.get('Khối lượng', ['Value'], null, qI),\r\n\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return massItemUtil.GetDefaultRebarMass(q.Project);\r\n  }\r\n\r\n  qI.OnEditItem = (item) => {\r\n    item.AddDatabase();\r\n  }\r\n\r\n  qI.OnDeleteItem = (item) => {\r\n    item.DeleteDatabase();\r\n  }\r\n\r\n  return qI;\r\n}","export const m = \"m\";\r\nexport const m2 = \"m2\";\r\nexport const m3 = \"m3\";\r\nexport const kg = \"kg\";","import * as util from './RebarMass_DictUtil'\r\n\r\nexport default class RebarMass_Dict {\r\n  project\r\n  get Project(){\r\n    return this.project;\r\n  }\r\n  set Project(v){\r\n    this.project = v;\r\n    this.projectId = v._id;\r\n  }\r\n\r\n  projectId\r\n\r\n  items = []\r\n  get Items(){\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.TableVM.DataSource = v;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM){\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './LevelGroupUtil'\r\n\r\nexport class LevelGroup {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.LevelGroups.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      levels : this.Levels ? this.Levels : [],\r\n      primary: this.Primary\r\n    }\r\n  }\r\n\r\n  get Count(){\r\n    return this.Levels.length\r\n  }\r\n\r\n\r\n  OnGetLevelStorageList_Func_Dict = []\r\n  get GetLevelStorageList(){\r\n    return this.getLevelStorageList;\r\n  }\r\n  set GetLevelStorageList(v){\r\n    this.getLevelStorageList = v;\r\n    this.OnGetLevelStorageList_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  IsGet_LevelStorageList\r\n\r\n  get LevelStorageList (){\r\n    var obj = this.Dict.LevelStorageList;\r\n    if (!obj && !this.IsGet_LevelStorageList){\r\n      this.IsGet_LevelStorageList = true;\r\n      this.Setting.OnGetLevelStorageList_Funcs.push(() => {\r\n        this.GetLevelStorageList = true\r\n      });\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Setting (){\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  get LevelIndexs(){\r\n    return this.Levels.map(x => this.LevelStorageList.indexOf(x));\r\n  }\r\n\r\n  get MinLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.min.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get MaxLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.max.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get Description(){\r\n    if (!this.LevelStorageList) return undefined;\r\n    return `Typ: ${this.MinLevel} - ${this.MaxLevel} (${this.Count})`;\r\n  }\r\n\r\n  get FullDescription() {\r\n    if (!this.Description) return undefined;\r\n    return `${this.Dict.FilterDescription} (${this.Description})`;\r\n  }\r\n\r\n  primary\r\n  get Primary(){\r\n    if (!this.primary){\r\n      this.primary = util.GetDefaultPrimary(this);\r\n    }\r\n    return this.primary\r\n  } set Primary(v){\r\n    this.primary = v;\r\n  }\r\n}","import { LevelGroup } from \"./LevelGroup\"\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new LevelGroup();\r\n\r\n  if (Array.isArray(data)) {\r\n    qI.Levels = data;\r\n  } else {\r\n    qI.Levels = data.levels;\r\n    qI.Primary = data.primary\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LevelGroup();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as it from './TLS_FilterValue_InputType'\r\n\r\nexport class TLS_FilterValue {\r\n  Value = undefined\r\n  InputType = it.select\r\n\r\n  get ApiData(){\r\n    return {\r\n      value: this.Value,\r\n      inputType : this.InputType\r\n    }\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { TLS_FilterValue } from './TLS_FilterValue';\r\n\r\nexport class TLS_Filter {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  //Values = [ 'Cột' ]\r\n  get Values(){\r\n    return this.Items.filter(x => x.Value).map(x => x.Value);\r\n  }\r\n\r\n  Items = []\r\n\r\n  AddItem = () => {\r\n    var item = new TLS_FilterValue();\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  field\r\n  get Field(){\r\n    if (!this.field){\r\n      this.field = this.FieldStorageList[0]\r\n    }\r\n    return this.field;\r\n  } set Field(v){\r\n    this.field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      field : this.Field,\r\n      items : this.Items.filter(x => x.Value).map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Description() {\r\n    var obj =  this.Values.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += ', ';\r\n      }\r\n      a += b;\r\n      return a;\r\n    }, '')\r\n\r\n    return `${this.Field}: ${obj}`;\r\n  }\r\n}","import { TLS_Filter } from \"./TLS_Filter\";\r\nimport { TLS_FilterValue } from \"./TLS_FilterValue\";\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Field = data.field;\r\n\r\n  if (data.items){\r\n    qI.Items = data.items.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x.value;\r\n      obj.InputType = x.inputType\r\n      return obj;\r\n    })\r\n  } else {\r\n    qI.Items = data.values.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x;\r\n      return obj;\r\n    })\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\nimport * as util from './TLS_PageItemUtil'\r\n\r\nexport class TLS_PageItem {\r\n  _id\r\n  get id(){\r\n    if (!this._id){\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  Name = 'tên setting'\r\n\r\n  get Index (){\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.PageItems.splice(this.Index, 1);\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  // Level Groups\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups\r\n  get LevelGroups(){\r\n    if (!this.levelGroups){\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  } set LevelGroups(v){\r\n    this.levelGroups = v;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.GetDefault(this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  filters\r\n  get Filters(){\r\n    if (!this.filters){\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  } set Filters(v){\r\n    this.filters = v;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.GetDefault(this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n\r\n  get FilterDescription() {\r\n    var obj = this.Filters.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += '; ';\r\n      }\r\n      a += b.Description;\r\n      return a;\r\n    }, '')\r\n    return obj;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      levelGroups : this.LevelGroups.map(x => x.ApiData).filter(x => x.levels.length !== 0),\r\n      filters : this.Filters.map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n}","import { TLS_PageItem } from \"./TLS_PageItem\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = data.name;\r\n  qI.Filters = data.filters.map(x => filterUtil.get(x, qI));\r\n  qI.LevelGroups = data.levelGroups ? data.levelGroups.map(x => levelGroupUtil.get(x, qI))\r\n     : data.levels.map(x => levelGroupUtil.get(x, qI))\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = 'setting 1';\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetLevelGroups = (q) => {\r\n  return [ levelGroupUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return [ filterUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport class TypicalLevelSettingData {\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n  \r\n  // Page Item\r\n  pageItems\r\n  get PageItems(){\r\n    if (!this.pageItems){\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  } set PageItems(v){\r\n    this.pageItems = v;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.GetDefault(this);\r\n    this.PageItems.push(item);\r\n    item.Name = `setting ${item.Index +1}`\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      pageItems : this.PageItems.map(x => x.ApiData)\r\n    }\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSettingData } from './TypicalLevelSettingData';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.PageItems = data.pageItems.map(x => pageItemUtil.get(x, qI));\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return [ pageItemUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingUtil'\r\n\r\nexport class TypicalLevelSetting extends Setting {\r\n  fieldFilterStorageList\r\n  get FieldFilterStorageList(){\r\n    if (!this.fieldFilterStorageList){\r\n      this.fieldFilterStorageList = util.GetFieldFilterStorageList();\r\n    }\r\n    return this.fieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    util.SaveDatabase(this)\r\n  }\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n    this.GetLevelStorageList = true;\r\n  }\r\n\r\n  OnGetLevelStorageList_Funcs = []\r\n\r\n  set GetLevelStorageList(v){\r\n    this.OnGetLevelStorageList_Funcs.forEach(x => x());\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './TypicalLevelSettingDataUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSetting } from './TypicalLevelSetting';\r\nimport * as st from '../base/SettingType'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\nimport { message } from 'antd';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (data, project, phase) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.SettingType = data.settingType;\r\n  qI.Data = dataUtil.get(data.data, qI);\r\n  qI.Project = project;\r\n  qI.Phase = phase;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (project) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI.Name = 'thiết lập ...';\r\n  qI.Description = 'Mô tả thiết lập ...';\r\n  qI.SettingType = st.typicallevel\r\n  qI.Data = dataUtil.GetTest(qI);\r\n  qI.Project = project;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFromDb_Async = (project, phase, handle) => {\r\n  var apiData = {\r\n    projectId: project._id,\r\n    phaseId: phase?._id\r\n  }\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  const apiFunc = () => api.post(`${url}/get`, apiData)\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      var resData = data ? get(data, project, phase) : undefined;\r\n      var editData = resData ? resData : GetTest(project);\r\n      handle(resData, editData);\r\n    })\r\n}\r\n\r\n// Property\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}\r\n\r\n// Method\r\nexport const SaveDatabase = (q) => {\r\n  var _id = q._id;\r\n  var apiData = q.ApiData;\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  var isNew = _id ? true : false\r\n  const apiFunc = () => isNew ?\r\n    api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew) q._id = data._id\r\n      message.success('add setting successfully!');\r\n    })\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  var level_Dict = q.Project.Level_Dict;\r\n\r\n  const getLevelsFunc = (items) => {\r\n    return items.map(x => x.Name);\r\n  }\r\n\r\n  if (level_Dict.Items) {\r\n    return getLevelsFunc(level_Dict.Items);\r\n  } else {\r\n    level_Dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.LevelStorageList = getLevelsFunc(level_Dict.Items);\r\n    });\r\n  }\r\n}\r\n","import * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\nexport default class Phase {\r\n  exportSetVersions\r\n  get ExportSetVersions(){\r\n    return this.exportSetVersions;\r\n  }\r\n  set ExportSetVersions(v){\r\n    this.exportSetVersions = v;\r\n    this.exportSetVersionIds = v.map(x => x._id);\r\n  }\r\n\r\n  OnGetExportSetVersions_Func = [];\r\n\r\n  set GetExportSetVersions(v){\r\n    this.OnGetExportSetVersions_Func.forEach(x => x());\r\n  }\r\n\r\n  exportSetVersionIds\r\n\r\n  get Project(){\r\n    return this.Dict.Dict;\r\n  }\r\n\r\n  OnGetTypicalLevelSetting_Funcs = []\r\n\r\n  set GetTypicalLevelSetting(v) {\r\n    this.OnGetTypicalLevelSetting_Funcs.forEach(x => x());\r\n  }\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this.Project, this, \r\n          (resData, editData) => {\r\n          this.TypicalLevelSetting = resData;\r\n          this.GetTypicalLevelSetting = true\r\n        })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport Phase from './Phase';\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Phase();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.Dict = dict;\r\n\r\n  GetExportSetVersionData(q._id, (data) => {\r\n    qI.ExportSetVersions = data;\r\n    qI.GetExportSetVersions = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbphase/list?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}\r\n\r\nexport const GetExportSetVersionData = (phaseId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/byphase?phaseId=${phaseId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}","import { message } from 'antd';\r\nimport * as util from './Phase_DictUtil'\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as itemUtil from './PhaseUtil'\r\nimport * as settingUtil from '../setting/base/SettingUtil'\r\n\r\nexport class Phase_Dict {\r\n  get Project() {\r\n    return this.Dict;\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n  \r\n  AddMassVersion = () => {\r\n    var apiData = this.Input.ApiData;\r\n    var url = `https://api.bimdev.vn/api/hbphase`;\r\n\r\n    const apiFunc = () => api.put(`${url}/mass/add`, apiData);\r\n    var project = this.Project;\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        var item = itemUtil.get(data, this);\r\n        this.Add(item);\r\n        message.success(\"create version successfully!\");\r\n\r\n        settingUtil.AddPhase(project._id, data._id);\r\n      })\r\n\r\n    // Thêm version mới cho InputExportSet sau khi lưu version\r\n    var addVersionFunc = (exportSet) => exportSet.AddVersion();\r\n\r\n    var inputExportSet = project.InputExportSet;\r\n    if (!inputExportSet){\r\n      project.OnGetInputExportSetDone_Funcs.push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        addVersionFunc(inputExportSet);\r\n      })\r\n    }else{\r\n      addVersionFunc(inputExportSet);\r\n    }\r\n  }\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport const AddPhase = (projectId, phaseId) => {\r\n  var apiData = {\r\n    projectId, phaseId\r\n  }\r\n  var url = `https://api.bimdev.vn/api/hbs`;\r\n\r\n  const apiFunc = () => api.post(`${url}/addphase`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      message.success(\"attach phase to settings successfully!\");\r\n    })\r\n}","export default class PhaseInput {\r\n  get ApiData(){\r\n    var projectId = this.Dict.Dict._id;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n\r\n    return {\r\n      projectId, name, description\r\n    }\r\n  }\r\n}","import { Phase_Dict } from \"./Phase_Dict\";\r\nimport * as phaseUtil from './PhaseUtil'\r\nimport * as inputUtil from './PhaseInputUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Phase_Dict();\r\n  qI.Dict = project;\r\n\r\n  phaseUtil.getByProject(project._id, (data) => {\r\n    qI.Items = data.map(x => phaseUtil.get(x, qI));\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputUtil.get(q);\r\n}","import PhaseInput from './PhaseInput';\r\n\r\nexport const get = (dict) => {\r\n  var qI = new PhaseInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Version 1';\r\n  qI.Description = 'mô tả phiên bản';\r\n\r\n  return qI;\r\n}","import RebarMass_Dict from '../mass/rebar/RebarMass_Dict';\r\nimport * as phaseDictUtil from '../phase/Phase_DictUtil'\r\nimport * as util from './ProjectUtil'\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\nexport default class Project {\r\n  phase_Dict\r\n  get Phase_Dict() {\r\n    if (!this.phase_Dict) {\r\n      this.phase_Dict = phaseDictUtil.get(this);\r\n    }\r\n    return this.phase_Dict;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = util.GetRebarMass_Dict(this);\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  inputExportSet\r\n  get InputExportSet() {\r\n    if (!this.inputExportSet) {\r\n      util.GetInputExportSet_Async(this);\r\n    }\r\n    return this.inputExportSet;\r\n  }\r\n  set InputExportSet(v) {\r\n    this.inputExportSet = v;\r\n    this.GetInputExportSetDone = true;\r\n  }\r\n\r\n  OnGetInputExportSetDone_Funcs = []\r\n\r\n  getInputExportSetDone\r\n  get GetInputExportSetDone() {\r\n    return this.getInputExportSetDone;\r\n  }\r\n  set GetInputExportSetDone(v) {\r\n    this.getInputExportSetDone = v;\r\n    this.OnGetInputExportSetDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  level_Dict\r\n  get Level_Dict() {\r\n    if (!this.level_Dict) {\r\n      this.level_Dict = util.GetLevel_Dict(this);\r\n    }\r\n    return this.level_Dict;\r\n  }\r\n\r\n  OnGetTypicalLevelSetting_Funcs = []\r\n\r\n  set GetTypicalLevelSetting(v) {\r\n    this.OnGetTypicalLevelSetting_Funcs.forEach(x => x());\r\n  }\r\n\r\n  IsOnGetDb_Async\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this, null, \r\n          (resData, editData) => {\r\n          this.TypicalLevelSetting = resData;\r\n          this.TypicalLevelSetting_ForEdit = editData;\r\n          this.GetTypicalLevelSetting = true\r\n        })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = this.TypicalLevelSetting;\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  url\r\n  get Url() {\r\n    if (!this.url) {\r\n      var isHash = true;\r\n      var obj = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/project`;\r\n      obj = `${obj}/${this._id}`;\r\n\r\n      this.url = obj;\r\n    }\r\n    return this.url;\r\n  }\r\n}","import * as util from './ExportSetUtil'\r\n\r\nexport class ExportSet {\r\n  currentVersion\r\n  get CurrentVersion(){\r\n    if (!this.currentVersion){\r\n      util.GetCurrentVersion_Async(this);\r\n    }\r\n    return this.currentVersion;\r\n  }\r\n  set CurrentVersion(v){\r\n    this.currentVersion = v;\r\n    this.GetCurrentVersionDone = v;\r\n  }\r\n\r\n  OnGetCurrentVersionDone_Func =[]\r\n\r\n  set GetCurrentVersionDone(v){\r\n    this.OnGetCurrentVersionDone_Func.forEach(x => x());\r\n  }\r\n\r\n  AddVersion = () => {\r\n    util.AddVersion_Async(this);\r\n  }\r\n}","export class ExportSetVersion {\r\n  \r\n}","import * as api from  '../../../../util/apiUtil'\r\nimport { ExportSetVersion } from \"./ExportSetVersion\";\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSetVersion();\r\n  qI._id = data._id;\r\n  return qI;\r\n}\r\n\r\nexport const getLastestByExportSet = (exportSetId, handle) => {\r\n  if (!exportSetId) return;\r\n  var url = `https://api.bimdev.vn/api/hbesv/last?exportSetId=${exportSetId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","import { ExportSet } from \"./ExportSet\"\r\nimport * as api from  '../../../../util/apiUtil'\r\nimport * as versionUtil from './ExportSetVersionUtil'\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSet();\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.RetrieveFrom = data.retrieveFrom;\r\n  return qI;\r\n}\r\n\r\nexport const GetCurrentVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  versionUtil.getLastestByExportSet(exportSetId, (item) => {\r\n    if (!item) {\r\n      AddVersion_Async(q);\r\n    } else {\r\n      q.CurrentVersion = item;\r\n    }\r\n  })\r\n}\r\n\r\nexport const AddVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  var apiData = {\r\n    exportSetId\r\n  }\r\n\r\n  versionUtil.add(apiData, (addItem) => {\r\n    q.CurrentVersion = addItem;\r\n  })\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbes/input?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbes/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","export class Level_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","export class Level\r\n{\r\n  Name\r\n  Elevation\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { Level } from \"./Level\"\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new Level();\r\n  qI.Name = data.name;\r\n  qI.Elevation = data.elevation;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (apiData, dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbl/list\";\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      if (!data) data = []\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport Project from './Project';\r\nimport * as rebarMassDictUtil from '../mass/rebar/RebarMass_DictUtil'\r\nimport * as exportSetUtil from '../exportset/ExportSetUtil'\r\nimport * as vrf from '../value/ValueRetrieveFrom'\r\nimport * as levelDictUtil from '../level/Level_DictUtil'\r\nimport * as levelTypicalUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Project();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Code = q.code;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getById = (_id, handle) => {\r\n  if (!_id) return undefined;\r\n  var url = `https://api.bimdev.vn/api/hbp/get?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      if (handle) {\r\n        handle(item);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetRebarMass_Dict = (q) => {\r\n  return rebarMassDictUtil.get(q);\r\n}\r\n\r\nexport const GetInputExportSet_Async = (q) => {\r\n  var projectId = q._id;\r\n\r\n  exportSetUtil.getByProject(projectId, (item) => {\r\n    if (!item) {\r\n      var apiData = {\r\n        projectId,\r\n        name: 'Dữ liệu khối lượng input',\r\n        description: 'mô tả dữ liệu',\r\n        retrieveFrom: vrf.input\r\n      }\r\n      exportSetUtil.add(apiData, (addItem) => {\r\n        q.InputExportSet = addItem;\r\n      })\r\n    } else {\r\n      q.InputExportSet = item;\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetLevel_Dict = (q) => {\r\n  return levelDictUtil.get(q)\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  return levelTypicalUtil.GetTest(q);\r\n}","export const model = \"model\";\r\nexport const input = \"input\";","import { Level_Dict } from \"./Level_Dict\"\r\nimport * as itemUtil from './LevelUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Level_Dict();\r\n  qI.Project = project;\r\n\r\n  itemUtil.getAll({ projectId : project._id }, qI, (items) => {\r\n    qI.Items = items.sort((a,b) => a.Elevation - b.Elevation);\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ProjectUtil'\r\n\r\nexport class Project_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class ElementFilterSetting extends Setting {\r\n  \r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './ElementFilterSettingDataUtil'\r\n\r\nexport default class ElementFilterSettingData {\r\n  CategoryFilter\r\n\r\n  IsHaveFamilyFilter\r\n\r\n  FamilyFilter\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport ElementFilterSettingData from './ElementFilterSettingData';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as fct from '../../filter/FilterCategoryType'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingData();\r\n  qI.CategoryFilter = filterUtil.get(q.categoryFilter);\r\n  return qI;\r\n}\r\n\r\nexport const getDefault = () => {\r\n  var qI = new ElementFilterSettingData();\r\n\r\n  var cateFilter = new EntFilter();\r\n  cateFilter.CategoryType = fct.category;\r\n  cateFilter.ValueType = fvt.bystring;\r\n  cateFilter.StringFilterType = sft.byequal;\r\n  cateFilter.Values = ['Floors'];\r\n  qI.CategoryFilter = cateFilter;\r\n\r\n  qI.IsHaveFamilyFilter = false;\r\n\r\n  var familyFilter = new EntFilter();\r\n  familyFilter.CategoryType = fct.family;\r\n  familyFilter.ValueType = fvt.bystring;\r\n  familyFilter.StringFilterType = sft.byequal;\r\n  familyFilter.Values = [];\r\n  qI.FamilyFilter = familyFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    categoryFilter : q.CategoryFilter.ApiData,\r\n    familyFilter : q.IsHaveFamilyFilter ? \r\n      q.FamilyFilter.ApiData : undefined\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport ElementFilterSetting from \"./ElementFilterSetting\"\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/ef/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as util from './SettingInputUtil'\r\n\r\nexport default class SettingInput {\r\n  Name\r\n  Description\r\n  SettingType\r\n\r\n  data\r\n  get Data() {\r\n    if (!this.data) {\r\n      this.data = this.GetData();\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n  }\r\n\r\n  GetData = () => {\r\n    if (this.OnGetData) {\r\n      return this.OnGetData();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem(){\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v){\r\n    this.editItem = v;\r\n    if (!v){\r\n      this.EditItemId = undefined;\r\n    }\r\n    else{\r\n      this.EditItemId = v._id;\r\n    }\r\n  }\r\n\r\n\r\n  EditItemId\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.EditItem = undefined;\r\n    }\r\n  }\r\n\r\n  urlPrefix\r\n  get UrlPrefix() {\r\n    if (!this.urlPrefix){\r\n      this.urlPrefix = util.GetUrlPrefix(this);\r\n    }\r\n    return this.urlPrefix;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.EditItemId;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var settingType = this.SettingType;\r\n    var data = this.Data.ApiData;\r\n    var prefix = this.UrlPrefix;\r\n\r\n    var apiData = {\r\n      _id, name, description, settingType, data\r\n    }\r\n    var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewItem = this.GetEditItem(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n}","import * as st from './SettingType'\r\n\r\nexport const GetUrlPrefix = (q) => {\r\n  var prefix = undefined\r\n  switch (q.SettingType) {\r\n    case st.elementfilter:\r\n      prefix = 'ef';\r\n      break;\r\n    case st.massexport:\r\n      prefix = 'me';\r\n      break;\r\n    case st.massgroup:\r\n      prefix = 'mg';\r\n      break;\r\n  }\r\n  return prefix;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as elementFilterSettingUtil from './ElementFilterSettingUtil'\r\n\r\nexport default class ElementFilterSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return elementFilterSettingUtil.get(data, dict);\r\n  }\r\n}","import ElementFilterSettingInput from \"./ElementFilterSettingInput\";\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new ElementFilterSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bộ lọc cột';\r\n  qI.Description = 'mô tả bộ lọc';\r\n  qI.SettingType = st.elementfilter;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.getDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ElementFilterSettingUtil'\r\nimport * as inputUtil from './ElementFilterSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class ElementFilterSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassExportSettingDataUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\nimport { reaction } from \"mobx\";\r\n\r\nexport default class MassExportSettingData {\r\n  elementFilterId\r\n\r\n  elementFilter\r\n  get ElementFilter(){\r\n    if (!this.elementFilter){\r\n      this.elementFilter = util.GetElementFilter(this);\r\n    }\r\n    return this.elementFilter;\r\n  }\r\n  set ElementFilter(v) {\r\n    this.elementFilter = v;\r\n    if (!v){\r\n      this.elementFilterId = undefined;\r\n    }\r\n    else{\r\n      this.elementFilterId = v._id;\r\n    }\r\n  }\r\n\r\n  valueSettings\r\n  get ValueSettings(){\r\n    if (!this.valueSettings){\r\n      this.valueSettings = util.GetDefaultValueSettings(this);\r\n    }\r\n    return this.valueSettings;\r\n  }\r\n  set ValueSettings(v){\r\n    this.valueSettings = v;\r\n  }\r\n\r\n  AddNewValueSetting = () => {\r\n    var modelList = this.ValueSettings;\r\n    var item = valueSettingUtil.GetDefault(this);\r\n    modelList.push(item);\r\n\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassExportSettingData from './MassExportSettingData';\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingData();\r\n  qI.elementFilterId = q.elementFilterId;\r\n  qI.ValueSettings = q.exportSettings.map(x => valueSettingUtil.get(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassExportSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilter = (q) => {\r\n  var elemFilterId = q.elementFilterId;\r\n  if (!elemFilterId) return undefined;\r\n\r\n  var list = pmData().ElementFilterSetting_Dict.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === elemFilterId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetDefaultValueSettings = (q) => {\r\n  return [ valueSettingUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    elementFilterId : q.elementFilterId,\r\n    exportSettings : q.ValueSettings.map(x => x.ApiData)\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassExportSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSetting from './MassExportSetting';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/me/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as massExportSettingUtil from './MassExportSettingUtil'\r\n\r\nexport default class MassExportSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return massExportSettingUtil.get(data, dict);\r\n  }\r\n}","import * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSettingInput from \"./MassExportSettingInput\";\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new MassExportSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bêtông sàn';\r\n  qI.Description = 'mô tả thiết lập';\r\n  qI.SettingType = st.massexport;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.GetDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './MassExportSettingUtil'\r\nimport * as inputUtil from './MassExportSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassExportSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import * as itemUtil from './MassGroupSettingUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassGroupSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n}","\r\nexport default class VCS_Item{\r\n  Color\r\n  Filter\r\n}","import * as util from './VersionCompareSettingUtil'\r\n\r\nexport default class VersionCompareSetting{\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems();\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as nft from '../../filter/NumberFilterType'\r\nimport VCS_Item from \"./VCS_Item\";\r\n\r\nexport const GetItems = (q) => {\r\n  var list = [];\r\n\r\n  // < 80\r\n  var item = new VCS_Item();\r\n  item.Color = '#1956c9';\r\n\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bysmaller;\r\n  filter.Values = [ 0.80 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n  // 80 -85\r\n  item = new VCS_Item();\r\n  item.Color = '#3f79d6';\r\n\r\n  filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bybetween;\r\n  filter.IsEqualLeft = true;\r\n  filter.Values = [ 0.80, 0.85 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n   // 85 -90\r\n   item = new VCS_Item();\r\n   item.Color = '#6f9fe9';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.85, 0.90 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 90 -95\r\n   item = new VCS_Item();\r\n   item.Color = '#a5c2f2';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.9, 0.95 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 95 -100\r\n   item = new VCS_Item();\r\n   item.Color = '#c9d9f6';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.95, 1 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 100 -105\r\n   item = new VCS_Item();\r\n   item.Color = '#f3cccc';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1, 1.05 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 105 -110\r\n   item = new VCS_Item();\r\n   item.Color = '#e9999a';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1.05, 1.10 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#de6568';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.10, 1.15 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#c90010';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.15, 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 115 -120\r\n    item = new VCS_Item();\r\n    item.Color = '#980009';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybigger;\r\n    filter.Values = [ 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    return list;\r\n}","\r\nexport class WorkItemExportSetting_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","export class TrackingItem{\r\n  Values = []\r\n\r\n  Count = 0\r\n}","import * as genUtil from '../../../../util/generalUtil'\r\nimport { TrackingItem } from './TrackingItem';\r\n\r\nexport class Tracking{\r\n  Items = []\r\n\r\n  AddItem = (values) => {\r\n    var list = this.Items;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => genUtil.IsSameValues(x.Values, values));\r\n    if (index === -1){\r\n      item = new TrackingItem();\r\n      item.Values = values;\r\n      list.push(item);\r\n    } else {\r\n      item = list[index];\r\n    }\r\n\r\n    item.Count ++;\r\n    return item;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\n\r\nexport class WorkpackageInput {\r\n  Code\r\n  // = \"300\"\r\n  Name\r\n  // = \"Lắp đặt cốp thép\"\r\n  Description = 'mô tả công tác'\r\n  // = \"Mô tả quá trình lắp cốp thép\"\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.Workpackage = undefined;\r\n    }\r\n  }\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.WorkpackageId = undefined;\r\n    }\r\n    else{\r\n      this.WorkpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  WorkpackageId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    if (!v){\r\n      this.SupId = undefined;\r\n    }\r\n    else{\r\n      this.SupId = v._id;\r\n    }\r\n  }\r\n\r\n  SupId\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.WorkpackageId;\r\n    var code = this.Code;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var supId = this.SupId;\r\n\r\n    var apiData = {\r\n      _id, name, code, description, supId\r\n    };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp\";\r\n\r\n    const apiFunc =  () =>  _id ? \r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewWorkpackage = workpackageUtil.get(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  UpdateWorkpackage\r\n}","import { WorkpackageInput } from './WorkpackageInput';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\n\r\nexport class Workpackage_Dict {\r\n  constructor() {\r\n    workpackageUtil.getAll(this, (wps) => {\r\n      this.Workpackages = wps;\r\n      this.GetWorkpackagesDone = true;\r\n    });\r\n  }\r\n\r\n  Workpackages\r\n\r\n  set GetWorkpackagesDone(v) {\r\n    if (this.OnGetWorkpackagesDone) {\r\n      this.OnGetWorkpackagesDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentWorkpackage\r\n\r\n  workpackageInput\r\n  get WorkpackageInput() {\r\n    if (!this.workpackageInput){\r\n      var obj = this.workpackageInput = new WorkpackageInput();\r\n      obj.Dict = this;\r\n    }\r\n    return this.workpackageInput;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Workpackages.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.WorkpackageInput;\r\n    var wp = input.Workpackage;\r\n\r\n    if (!input.IsNew){\r\n      var action = () => { \r\n        wp.Code = input.Code;\r\n        wp.Name = input.Name;\r\n        wp.Description = input.Description;\r\n        wp.FullName = wp.GetFullName();\r\n      };\r\n      genUtil.UpdateFromModel(wp, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewWorkpackage);\r\n    }\r\n\r\n    this.IsDataChanged = true;\r\n  }\r\n\r\n  IsDataChanged\r\n\r\n  RefreshData = () => {\r\n    this.Workpackages.forEach(x => {\r\n      x.SubItems = undefined;\r\n      x.UpperList = undefined;\r\n      x.LowerList = undefined;\r\n      x.Rank = undefined\r\n    })\r\n\r\n    this.IsDataChanged = false;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workPackageUtil from '../../entity/workpackage/WorkpackageUtil'\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\nimport * as vrt from '../../entity/setting/massExport/exportSetting/MES_ValueRetrieveType'\r\nimport * as mpn from '../../entity/mass/MassPropertyName'\r\nimport * as mt from '../../entity/mass/MassType'\r\nimport * as mif from '../../entity/mass/item/MassItemField'\r\n\r\nexport const GetFilterValueTypes = (data) => {\r\n  return fvt.GetAll();\r\n}\r\n\r\nexport const GetStringFilterTypes = (data) => {\r\n  return sft.GetAll();\r\n}\r\n\r\nexport const GetValueRetrieveTypes = (data) => {\r\n  return vrt.GetAll();\r\n}\r\n\r\nexport const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Column']\r\n}\r\n\r\nexport const GetParameterNames = (data) => {\r\n  return ['Volume', 'HB_Formwork_Total']\r\n}\r\n\r\nexport const GetMassPropertyNames = (data) => {\r\n  return mpn.GetAll();\r\n}\r\n\r\nexport const GetMassItemFields = (data) => {\r\n  return mif.GetAll();\r\n}\r\n\r\nexport const GetMIFs_ForMassGroup = () => {\r\n  return mif.GetForMassGroup();\r\n}\r\n\r\nexport const GetMassTypes = (data) => {\r\n  return mt.GetAll();\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport MassResultComp from '../../entity/mass/result/MassResultComp';\r\nimport { Project_Dict } from '../../entity/project/Project_Dict';\r\nimport { ElementFilterSetting_Dict } from '../../entity/setting/elementFilter/ElementFilterSetting_Dict';\r\nimport { MassExportSetting_Dict } from '../../entity/setting/massExport/MassExportSetting_Dict';\r\nimport { MassGroupSetting_Dict } from '../../entity/setting/massGroup/MassGroupSetting_Dict';\r\nimport VersionCompareSetting from '../../entity/setting/versionCompare/VersionCompareSetting';\r\nimport { WorkItemExportSetting_Dict } from '../../entity/setting/workitemexport/WorkItemExportSetting_Dict';\r\nimport { Tracking } from '../../entity/tracking/Tracking';\r\nimport { Workpackage_Dict } from '../../entity/workpackage/Workpackage_Dict';\r\nimport { CategoryData } from './CategoryData';\r\nimport * as util from './PMDataUtil'\r\n\r\nexport class PMData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get categoryData(){\r\n    return CategoryData.Instance;\r\n  }\r\n\r\n  workpackage_Dict\r\n  get Workpackage_Dict() {\r\n    if (!this.workpackage_Dict){\r\n      this.workpackage_Dict = new Workpackage_Dict();\r\n    }\r\n    return this.workpackage_Dict;\r\n  }\r\n\r\n  elementFilterSetting_Dict\r\n  get ElementFilterSetting_Dict() {\r\n    if (!this.elementFilterSetting_Dict){\r\n      this.elementFilterSetting_Dict = new ElementFilterSetting_Dict();\r\n    }\r\n    return this.elementFilterSetting_Dict;\r\n  }\r\n\r\n  massExportSetting_Dict\r\n  get MassExportSetting_Dict() {\r\n    if (!this.massExportSetting_Dict){\r\n      this.massExportSetting_Dict = new MassExportSetting_Dict();\r\n    }\r\n    return this.massExportSetting_Dict;\r\n  }\r\n\r\n  massGroupSetting_Dict\r\n  get MassGroupSetting_Dict() {\r\n    if (!this.massGroupSetting_Dict){\r\n      this.massGroupSetting_Dict = new MassGroupSetting_Dict();\r\n    }\r\n    return this.massGroupSetting_Dict;\r\n  }\r\n\r\n  project_Dict\r\n  get Project_Dict() {\r\n    if (!this.project_Dict){\r\n      this.project_Dict = new Project_Dict();\r\n    }\r\n    return this.project_Dict;\r\n  }\r\n\r\n  massResultComp\r\n  get MassResultComp(){\r\n    if (!this.massResultComp){\r\n      this.massResultComp = new MassResultComp();\r\n    }\r\n    return this.massResultComp;\r\n  }\r\n  set MassResultComp(v){\r\n    this.massResultComp = v;\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = util.GetFilterValueTypes();\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = util.GetStringFilterTypes();\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = util.GetValueRetrieveTypes();\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.categoryData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = util.GetParameterNames();\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = util.GetMassPropertyNames();\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massItemFields\r\n  get MassItemFields(){\r\n    if (!this.massItemFields){\r\n      this.massItemFields = util.GetMassItemFields();\r\n    }\r\n    return this.massItemFields;\r\n  }\r\n\r\n  mifs_ForMassGroup\r\n  get MIFs_ForMassGroup(){\r\n    if (!this.mifs_ForMassGroup){\r\n      this.mifs_ForMassGroup = util.GetMIFs_ForMassGroup();\r\n    }\r\n    return this.mifs_ForMassGroup;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = util.GetMassTypes();\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  versionCompareSetting\r\n  get VersionCompareSetting(){\r\n    if (!this.versionCompareSetting){\r\n      this.versionCompareSetting = new VersionCompareSetting();\r\n    }\r\n    return this.versionCompareSetting;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = new WorkItemExportSetting_Dict();\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n\r\n  DebugPoints = []\r\n\r\n  tracking\r\n  get Tracking(){\r\n    if (!this.tracking){\r\n      this.tracking = new Tracking();\r\n    }\r\n    return this.tracking;\r\n  }\r\n\r\n  IsDebug = false\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as util from './WorkpackageUtil'\r\n\r\nexport class Workpackage {\r\n  get Index() {\r\n    return this.Dict.Workpackages.indexOf(this);\r\n  }\r\n\r\n  _id\r\n\r\n  SupId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (this.OnCodeChanged) {\r\n      this.OnCodeChanged(v);\r\n    }\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (this.OnNameChanged) {\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged) {\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  fullName\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.GetFullName();\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n    if (this.OnFullNameChanged) {\r\n      this.OnFullNameChanged(v);\r\n    }\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n  set SubItems(v){\r\n    this.subItems = v;\r\n  }\r\n\r\n  upperList\r\n  get UpperList(){\r\n    if (!this.upperList){\r\n      this.upperList = util.GetUpperList(this);\r\n    }\r\n    return this.upperList;\r\n  }\r\n  set UpperList(v){\r\n    this.upperList = v;\r\n  }\r\n\r\n  lowerList\r\n  get LowerList(){\r\n    if (!this.lowerList){\r\n      this.lowerList = util.GetLowerList(this);\r\n    }\r\n    return this.lowerList;\r\n  }\r\n  set LowerList(v){\r\n    this.lowerList = v;\r\n  }\r\n\r\n  rank\r\n  get Rank() {\r\n    if (!this.rank){\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v){\r\n    this.rank = v;\r\n  }\r\n\r\n  get LowerIds() {\r\n    return this.LowerList.map(x => x._id);\r\n  }\r\n\r\n  GetFullName = () => {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  Delete = () => {\r\n    var { _id } = this;\r\n    var apiData = { _id };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete workpackage successfully'));\r\n\r\n    var dict = this.Dict;\r\n    dict.Workpackages.splice(this.Index, 1);\r\n    if (this.OnDelete) {\r\n      this.OnDelete();\r\n    }\r\n\r\n    dict.IsDataChanged = true;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../../single/model/PMData';\r\nimport { Workpackage } from \"./Workpackage\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (dbItem, dict) => {\r\n  var { _id, name, code, description, supId } = dbItem;\r\n\r\n  var qI = new Workpackage();\r\n  qI._id = _id;\r\n  qI.Name = name;\r\n  qI.Code = code;\r\n  qI.Description = description;\r\n  qI.SupId = supId;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supId = q.SupId;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var index = list.findIndex(x => x._id === supId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetSubItems = (q) => {\r\n  var id = q._id;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  return list.filter(x => x !== q && x.SupId === id);\r\n}\r\n\r\nexport const GetUpperList = (q) => {\r\n  var supItem = q.SupItem;\r\n  if (!supItem){\r\n    return [q];\r\n  }else{\r\n    var list = [...supItem.UpperList];\r\n    list.push(q);\r\n    return list;\r\n  }\r\n}\r\n\r\nexport const GetLowerList = (q) => {\r\n  var list = [q];\r\n  q.SubItems.forEach((x, i) => {\r\n    list.push.apply(list, x.LowerList);\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  var supItem = q.SupItem;\r\n  return supItem ? supItem.Rank +1 : 0;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbwp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var wps = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(wps);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as util from './Workpackage_DictVMUtil'\r\n\r\nexport class Workpackage_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      workpackageVMs: observable,\r\n    })\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  Workpackage_Dict\r\n\r\n  get M2VM() {\r\n    return this.Workpackage_Dict.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage_Dict.M2VM = v;\r\n  }\r\n\r\n  workpackageVMs = undefined\r\n  get WorkpackageVMs() {\r\n    if (!this.workpackageVMs){\r\n      this.workpackageVMs = util.GetWorkpackageVMs(this);\r\n    }\r\n    return this.workpackageVMs;\r\n  }\r\n\r\n  currentWorkpackageVM\r\n  set CurrentWorkpackageVM(v) {\r\n    this.Workpackage_Dict = v;\r\n    this.Workpackage_Dict.CurrentWorkpackage = v.Workpackage;\r\n\r\n    this.WorkpackageInputVM.WorkpackageVM = v;\r\n  }\r\n\r\n  workpackageInputMV\r\n  get WorkpackageInputVM() {\r\n    if (!this.workpackageInputVM){\r\n      this.workpackageInputVM = util.GetWorkpackageInputVM(this);\r\n    }\r\n    return this.workpackageInputVM;\r\n  }\r\n\r\n  Add = (itemView) => {\r\n    this.WorkpackageVMs.push(itemView);\r\n    if (this.OnAdd){\r\n      this.OnAdd(itemView);\r\n    }\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport CheckboxView from \"../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../select/SelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass Workpackage_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Workpackage_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n    var wp = data.CurrentWorkpackageVM = wps[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n\r\n    var elems = wps ? wps.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var inputVM = data.WorkpackageInputVM;\r\n    var commandVM = inputVM.CommandVM;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Công tác</b>\r\n        </Divider>\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search công tác\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={inputVM.CodeVM} />\r\n          <InputView store={inputVM.NameVM} />\r\n          <InputView store={inputVM.DescriptionVM} />\r\n          <SelectView store={inputVM.SupItemSelectVM} />\r\n          <div>\r\n            <CheckboxView store={inputVM.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={inputVM.AddDatabase}>{commandVM.Content}</Button>\r\n            {inputVM.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Workpackage_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\nimport SelectView from \"../../../select/SelectView\";\r\nimport { MultiSelectVM } from \"../../../select/MultiSelectVM\";\r\nimport MultiSelectView from \"../../../select/MultiSelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass EntFilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntFilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.ItemVMs;\r\n    var wp = data.CurrentItemVM = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <SelectView store={data.ValueTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <SelectView store={data.StringFilterTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <MultiSelectView store={data.ValuesSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntFilterView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataVM from \"./ElementFilterSettingDataVM\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { IsHaveFamilyFilter } = data;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập lọc Category\r\n        </Divider>\r\n        <EntFilterView store={data.CategoryFilterVM} />\r\n\r\n        <Divider orientation=\"left\" plain>\r\n          {/* Thiết lập lọc Family */}\r\n          <CheckboxView store={data.IsHaveFamilyFilterVM}/>\r\n        </Divider>\r\n        {IsHaveFamilyFilter? <EntFilterView store={data.FamilyFilterVM} /> : \"\"}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataView from \"./ElementFilterSettingDataView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    \r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Bộ lọc đối tượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search bộ lọc\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{marginTop:20}}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <ElementFilterSettingDataView store={input.DataVM}/>\r\n\r\n          <CheckboxView store={input.IsNewVM} />\r\n          <Button style={{margin:10}}\r\n            onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n          {input.DeleteView}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSetting_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../../input/InputView\";\r\nimport EntFilterView from \"../../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../../checkbox/CheckboxView\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as floatItemVMUtil from \"../../../../../float/FloatItemVMUtil\";\r\nimport FloatItemView from \"../../../../../float/FloatItemView\";\r\nimport { CloseCircleFilled } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MES_ValueSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MES_ValueSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var floatItemStore = floatItemVMUtil.get('top right')\r\n    floatItemStore.wrapper = <Button size='small' type='primary' \r\n      onClick={data.Delete}>x</Button>\r\n\r\n    return (\r\n      <>\r\n        <div style={{ padding: '10px 35px 10px 10px', margin: '8px auto', border: 'solid 0.5px', borderRadius: '10px', position:'relative' }}>\r\n          <FloatItemView store={floatItemStore} />\r\n          <SelectView store={data.RetrieveTypeSelectVM} />\r\n          <SelectView store={data.MassTypeSelectVM} />\r\n          <EntFilterView store={data.ValueFilterVM} />\r\n          <SelectView store={data.WorkpackageSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MES_ValueSettingView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleFilled } from \"@ant-design/icons\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassExportSettingDataVM from \"./MassExportSettingDataVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MES_ValueSettingView from \"./exportSetting/MES_ValueSettingView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var valueSettingElems = data.ValueSettingVMs.map((x, i) => {\r\n      return <MES_ValueSettingView key={i} store={x} />\r\n    })\r\n\r\n    return (\r\n      <>\r\n        <SelectView store={data.ElementFilterSelectVM} />\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập giá trị\r\n          <Button type='primary' size='small' onClick={data.AddNewValueSettingVM}\r\n            style={{marginLeft:15}}>+</Button>\r\n        </Divider>\r\n        {valueSettingElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MassExportSettingDataView from \"./MassExportSettingDataView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất khối lượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search thiết lập\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <MassExportSettingDataView store={input.DataVM} />\r\n\r\n          <div>\r\n            <CheckboxView store={input.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n            {input.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSetting_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Popover, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassCell from \"./MassCell\";\r\nimport './MassTable.css'\r\nimport Icon, { InfoCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassCellView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassCell();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* Đối tượng ẩn để cập nhập màu sắc Cell */}\r\n        <span className='d-none'>\r\n          {data.ContentVM.Content}\r\n        </span>\r\n\r\n        <td style={data.TDStyle}>\r\n          <div className='masscell__div'>\r\n            <div className='masscell__value'>\r\n              {data.IsHaveWarning ?\r\n                <Popover trigger='hover'\r\n                  content={<div>\r\n                    {data.TLS_LevelGroup_Descriptions ?\r\n                      data.TLS_LevelGroup_Descriptions.map(x => {\r\n                        return <span key={x}>{x}</span>\r\n                      })\r\n                      : ''}\r\n                  </div>}>\r\n                  <InfoCircleOutlined className='masscell__warningicon' />\r\n                </Popover>\r\n                : ''}\r\n              <a style={data.AStyle}\r\n                onClick={data.ShowDetail}>\r\n                {data.ContentVM.Content}\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassCellView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select, Space } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MultiSelectView from \"../../../../select/MultiSelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRow from \"./MassRow\";\r\nimport MassCellView from \"./MassCellView\";\r\nimport { DownCircleOutlined, EnterOutlined, UpCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassRowView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var table = data.Dict;\r\n    var columns = table.Columns;\r\n\r\n    var subElems = data.IsShowSub ? data.SubItems.map((x, i) => {\r\n      return <MassRowView store={x} key={x.id} />\r\n    }) : ''\r\n\r\n    var toggleButton = data.IsHaveSub ?\r\n      <Button size='small' style={{ marginRight: 5, minWidth: 25 }} type='primary'\r\n        onClick={data.ToggleSub}>\r\n        <TextView store={data.ToggleButtonContentVM} />\r\n      </Button>\r\n      : <div style={{ padding: '0 15.5px' }} />;\r\n\r\n    return (\r\n      <>\r\n        <tr>\r\n          <th scope=\"row\" >\r\n            <div style={data.Style}>\r\n              {toggleButton}\r\n              {data.Title}\r\n\r\n              {data.HoverToolElement}\r\n              {data.ModalElement}\r\n            </div>\r\n          </th>\r\n          {columns.map((y, j) => {\r\n            var cell = table.GetCell(y, data);\r\n            return <MassCellView key={cell.id} store={cell} />\r\n          })}\r\n        </tr>\r\n        {subElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRowView)","import { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { CSVExport } from \"./CSVExport\";\r\n\r\nclass CSVExportView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new CSVExport();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  Test = (e) => {\r\n    debugger\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <CSVLink data={data.Data} filename={data.FileName}\r\n          headers={data.Headers}\r\n          onClick={this.Test}>\r\n          {data.Title}\r\n        </CSVLink>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CSVExportView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassTable from \"./MassTable\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRowView from \"./MassRowView\";\r\nimport './MassTable.css'\r\nimport CSVExportView from \"../../../../export/csv/CSVExportView\";\r\nimport { DownloadOutlined, SaveFilled } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var columns = data.Columns;\r\n    var rows = data.MainRows;\r\n\r\n    var thElems = columns ? columns.map((x, i) => {\r\n      return <th scope=\"col\" key={x.id} className='text-center masscell_th'>{x.Name}</th>\r\n    }) : '';\r\n\r\n    var tbodyElems = rows ? rows.map((x, i) => {\r\n      return <MassRowView key={x.id} store={x} />\r\n    }) : '';\r\n\r\n\r\n    return (\r\n      <>\r\n        {data.IsValidTable ?\r\n          <>\r\n            <div className=\"masstable__title__wrapper\">\r\n              <h4 className=\"masstable__title\">\r\n                BẢNG TỔNG HỢP KHỐI LƯỢNG\r\n              </h4>\r\n              <div>\r\n                <Button type='primary' size='small' style={{ marginLeft: 15 }}\r\n                  disabled={data.IsOnSaveMassGroup}\r\n                  onClick={data.SaveMassGroup}>\r\n                  <SaveFilled />\r\n                </Button>\r\n                <Button type='primary' size='small' onClick={data.Export}\r\n                  className='masstable__export'>\r\n                  <DownloadOutlined />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {data.IsOnSaveMassGroup ?\r\n              <Row style={{ padding: 7 }}>\r\n                <Col span={4} />\r\n                <Col span={16} style={{ display: 'flex' }}>\r\n                  <InputView store={data.MassGroupNameVM} />\r\n                  <Button type='primary' size='small'\r\n                    style={{ marginLeft: 10 }}\r\n                    onClick={data.MassGroupInputOK}>ok</Button>\r\n                  <Button type='default' size='small'\r\n                    onClick={data.MassGroupInputCancel}>cancel</Button>\r\n                </Col>\r\n              </Row> : ''}\r\n\r\n            < table className=\"table table-bordered table-sm masstable\">\r\n              <thead className=\"thead-light\">\r\n                <tr>\r\n                  <th scope=\"col\" className='masstitle__th'>\r\n                    <Button onClick={data.AddMainRow} type='primary' size='small'\r\n                      style={{ backgroundColor: '#52c41a', border: 'none' }}>+</Button>\r\n                  </th>\r\n                  {thElems}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tbodyElems}\r\n              </tbody>\r\n            </table>\r\n          </> : ''\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassTableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport MassResultCompVM from \"./MassResultCompVM\";\r\nimport MultiSelectView from '../../../../select/MultiSelectView'\r\nimport MassTableView from \"../table/MassTableView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassResultCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassResultCompVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.IsShowProjectSelect ?\r\n          <MultiSelectView store={data.ProjectSelectVM} /> : ''}\r\n\r\n        {data.CanHavePhase ?\r\n          <>\r\n            <CheckboxView store={data.IsShowPhaseSelectVM} />\r\n            {data.IsHavePhase ?\r\n              <MultiSelectView store={data.PhaseSelectVM} /> : ''}\r\n          </>\r\n          : ''\r\n        }\r\n\r\n        <div style={{ marginTop: 8 }} >\r\n          <SelectView store={data.MassGroupSettingSelectVM} />\r\n        </div>\r\n\r\n        <Button style={{ marginTop: 8 }} onClick={data.GetMassData}\r\n          size='middle' type='primary'>GET DATA</Button>\r\n        <div style={{ marginTop: 15 }}>\r\n          {data.IsDataPending ?\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <div>\r\n                <Spin />\r\n                <TextView store={data.LoadingSpinTipVM} />\r\n              </div>\r\n            </div> : <MassTableView store={data.MassItem_Dict.MassTable} />}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassResultCompView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport TableVM from \"./TableVM\";\r\nimport * as rs from './RenderState'\r\n\r\nconst { Option } = Select;\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TableVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var columns = data.Columns;\r\n\r\n    var rows = data.Rows;\r\n    var tableElem = '';\r\n    if (columns && rows) {\r\n      var theadElem = <thead className=\"thead-light\">\r\n        <tr>\r\n          {columns.map(x => {\r\n            return <th scope=\"col\" key={x.Key}>{x.Title}</th>\r\n          })}\r\n        </tr>\r\n      </thead>\r\n\r\n      var tbodyElem = <tbody>\r\n        {rows.map(x => {\r\n          return <tr key={x.Key}>\r\n            {x.Cells.map(y => {\r\n              return <td key={y.Key}>{y.Render()}</td>\r\n            })}\r\n          </tr>\r\n        })}\r\n      </tbody>\r\n\r\n      tableElem = <table className=\"table table-sm\">\r\n        {theadElem}{tbodyElem}\r\n      </table>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {tableElem}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport TableView from \"../../../../table/TableView\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass WorkItemExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new WorkItemExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất hạng mục</b>\r\n        </Divider>\r\n        \r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(WorkItemExportSetting_DictView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport Workpackage_DictView from '../../entity/workpackage/Workpackage_DictView';\r\nimport ElementFilterSetting_DictView from '../../entity/setting/elementFilter/ElementFilterSetting_DictView';\r\nimport MassExportSetting_DictView from '../../entity/setting/massExport/MassExportSetting_DictView';\r\n\r\nimport { PMDataVM } from './PMDataVM';\r\nimport MassResultCompView from '../../entity/mass/result/MassResultCompView';\r\nimport WorkItemExportSetting_DictView from '../../entity/setting/workitemexport/WorkItemExportSetting_DictView';\r\n\r\nclass PMDataView extends Component {\r\n  get pmDataVM() { return PMDataVM.Instance };\r\n\r\n  render() {\r\n    var data = this.pmDataVM;\r\n\r\n    return (\r\n      <>\r\n        <Row gutter={15} style={{ padding: 15 }}>\r\n          <Col span={3} />\r\n          <Col span={5}>\r\n            <Workpackage_DictView store={data.Workpackage_DictVM} />\r\n\r\n            <ElementFilterSetting_DictView store={data.ElementFilterSetting_DictVM} />\r\n\r\n            <MassExportSetting_DictView store={data.MassExportSetting_DictVM} />\r\n          </Col>\r\n          <Col span={13}>\r\n            <MassResultCompView store={data.MassResultCompVM} />\r\n          </Col>\r\n          <Col span={3} />\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(PMDataView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport PMDataView from '../main/single/form/PMDataView';\r\nimport { Col, Row } from 'antd';\r\n\r\nclass TestView extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <PMDataView />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TestView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class CellVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueString : observable\r\n    })\r\n  }\r\n\r\n  value\r\n  get Value(){\r\n    return this.value\r\n  }\r\n  set Value(v){\r\n    this.value = v;\r\n    this.ValueString = this.GetValueString();\r\n  }\r\n\r\n  valueString = undefined\r\n  get ValueString (){\r\n    if (!this.valueString){\r\n      this.valueString = this.GetValueString();\r\n    }\r\n    return this.valueString;\r\n  }\r\n  set ValueString(v){\r\n    this.valueString = v;\r\n  }\r\n\r\n  GetValueString = () => {\r\n    return this.OnGetValueString();\r\n  }\r\n}","export default class ColumnVM {\r\n  Cells = []\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class RowVM {\r\n  Cells = []\r\n}","import * as mt from '../MassType'\r\nimport * as mif from '../item/MassItemField'\r\nimport ColumnVM from '../../../../table/ColumnVM';\r\n\r\nexport const GetFields = (q) => {\r\n  var list = q.Items;\r\n  if (!list || list.length === 0) return [];\r\n\r\n  var massType = list[0].MassType;\r\n  switch (massType) {\r\n    case mt.rebar:\r\n      return [mif.partition, mif.rebarType, mif.Value, mif.Unit];\r\n    case mt.concrete:\r\n    case mt.formwork:\r\n      return [mif.level, mif.elementName, mif.Value, mif.Unit];\r\n    default:\r\n      return [mif.Value, mif.Unit]\r\n  }\r\n  return [];\r\n}\r\n\r\nexport const GetValueTitle = (q) => {\r\n  var list = q.Items;\r\n  if (!list || list.length === 0) return [];\r\n\r\n  var massType = list[0].MassType;\r\n  switch (massType) {\r\n    default:\r\n      return massType;\r\n  }\r\n}\r\n\r\nexport const GetColumns = (q) => {\r\n  return q.Fields.map(x => {\r\n    var col = new ColumnVM();\r\n    col.Name = x;\r\n    col.Title = x === mif.Value ? GetValueTitle(q) \r\n      : x;\r\n\r\n    return col;\r\n  })\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport CellVM from '../../../../table/CellVM';\r\nimport ColumnVM from '../../../../table/ColumnVM';\r\nimport RowVM from '../../../../table/RowVM';\r\nimport * as mif from '../item/MassItemField'\r\nimport * as util from './MassDetailTableUtil'\r\n\r\nexport default class MassDetailTable {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      rows: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    if (v && v.length !== 0) {\r\n      this.IsValidTable = true;\r\n    }\r\n    else {\r\n      this.IsValidTable = false;\r\n    }\r\n    this.Fields = util.GetFields(this);\r\n    this.Rows = this.GetRows();\r\n  }\r\n\r\n  IsValidTable = false\r\n\r\n  fields = undefined\r\n  get Fields() {\r\n    if (!this.fields) {\r\n      this.fields = util.GetFields(this);\r\n    }\r\n    return this.fields;\r\n  }\r\n  set Fields(v){\r\n    this.fields = v;\r\n    this.Columns = util.GetColumns(this);\r\n  }\r\n\r\n  columns = undefined\r\n  get Columns(){\r\n    if (!this.columns){\r\n      this.columns = util.GetColumns(this);\r\n    }\r\n    return this.columns;\r\n  }\r\n  set Columns(v){\r\n    this.columns = v;\r\n  }\r\n\r\n  rows = undefined\r\n  get Rows(){\r\n    if (!this.rows){\r\n      this.rows = this.GetRows();\r\n    }\r\n    return this.rows;\r\n  }\r\n  set Rows(v){\r\n    this.rows = v;\r\n  }\r\n\r\n  GetRows = () => {\r\n    var items = this.Items;\r\n    if (!items) return [];\r\n    var fields = this.Fields;\r\n\r\n    return items.map(x => {\r\n      var row = new RowVM();\r\n      row.Cells = fields.map(y => {\r\n        var cell = new CellVM();\r\n        cell.OnGetValueString = () => {\r\n          var value = cell.Value;\r\n          if(!isNaN(value)){\r\n           return parseFloat(value).toFixed(2);\r\n          }\r\n          return value;\r\n        }\r\n\r\n        const setValueFunc = () => cell.Value = mif.GetValueString(x.GetValue(y), y);\r\n        if (mif.GetIdentifyFields().includes(y) && !x.Element){\r\n          x.OnGetElementDone_Funcs.push(() => {\r\n            setValueFunc();\r\n          });\r\n        }else{\r\n          setValueFunc();\r\n        }\r\n\r\n        var className = 'text-center';\r\n        switch(y){\r\n          case mif.Value:\r\n            className='text-right';\r\n            break;\r\n        }\r\n        cell.className = className;\r\n\r\n        return cell;\r\n      })\r\n      return row;\r\n    })\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport MassDetailTable from './MassDetailTable';\r\n\r\nexport class MassDetailVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id(){\r\n    return this._id;\r\n  }\r\n  set id(v){\r\n    this._id = v;\r\n    massItemUtil.getByViewDetail(v, (items) => {\r\n      this.Items = items;\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    return this.items;\r\n  } \r\n  set Items(v){\r\n    this.items = v;\r\n    this.DetailTable.Items = v;\r\n  }\r\n\r\n  detailTable\r\n  get DetailTable() {\r\n    if (!this.detailTable){\r\n      this.detailTable = new MassDetailTable();\r\n    }\r\n    return this.detailTable;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport MassDetailTable from './MassDetailTable';\r\n\r\nclass MassDetailTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var colElems = data.Columns.map((x,i) => {\r\n      return <th scope=\"col\" key={i} className='text-center'>{x.Title}</th>\r\n    })\r\n\r\n    var rowElems = data.Rows.map((x, i) => {\r\n      var cellElems = x.Cells.map((y, j) => {\r\n        return <td key={j} className={y.className}>{y.ValueString}</td>\r\n      })\r\n      return <tr key={i}>\r\n        {cellElems}\r\n      </tr>\r\n    })\r\n\r\n    return (\r\n      <>\r\n        <table className=\"table table-bordered table-sm\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n             {colElems}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rowElems}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(MassDetailTableView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { MassDetailVM } from './MassDetailVM';\r\nimport MassDetailTableView from './MassDetailTableView';\r\n\r\nclass MassDetailView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Row gutter={10} style={{ padding: 15 }}>\r\n          <Col span={8}>\r\n            <h4 className='text-center'>BẢNG CHI TIẾT KHỐI LƯỢNG</h4>\r\n            <div>\r\n              <MassDetailTableView store={data.DetailTable} />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(MassDetailView));\r\n","import { PMDataVM } from '../../../single/form/PMDataVM'\r\nimport MassResultComp from '../../mass/result/MassResultComp'\r\nimport * as massResutlCompVMUtil from '../../mass/result/MassResultCompVMUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport ProjectCompVM from './ProjectCompVM';\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\n// Instance\r\nexport const get = () => {\r\n  var qI = new ProjectCompVM();\r\n\r\n  genUtil.Add(\r\n    pmDataVM().OnSet_ProjectViewType_Func_Dict,\r\n    () => qI.ProjectViewType = pmDataVM().ProjectViewType,\r\n    false);\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetMassResultCompVM = (q) => {\r\n  var obj = massResutlCompVMUtil.get(new MassResultComp(), false);\r\n  obj.IsShowProjectSelect = false;\r\n  obj.CanHavePhase = true;\r\n  return obj;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { LevelGroupVM } from './LevelGroupVM';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './LevelGroup.css'\r\n\r\nclass LevelGroupView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new LevelGroupVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='levelgroup__container'>\r\n          <MultiSelectView store={data.LevelSelectVM} />\r\n          <Button size='small' type='text' \r\n            className='levelgroup__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='levelgroup__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LevelGroupView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Popover, Switch } from 'antd';\r\nimport { TLS_FilterValueVM } from './TLS_FilterValueVM';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport './TLS_FilterValue.css'\r\n\r\nclass TLS_FilterValueView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterValueVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n\r\n        <div className='tls_filter__value'>\r\n          {/* Input */}\r\n          <Popover\r\n            trigger={data.PopoverState.Content}\r\n            content={\r\n              <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n                checked={data.SwitchChecked_Funcs()} onChange={data.ToggleInputType} />\r\n            }>\r\n            <span>\r\n              {data.InputElement}\r\n            </span>\r\n          </Popover>\r\n          \r\n          {/* Delete */}\r\n          <Button type='primary' size='small' onClick={data.Delete}\r\n            className='tls_filter__value__delete'>x</Button>\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterValueView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { TLS_FilterVM } from './TLS_FilterVM';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport './TLS_Filter.css'\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport TLS_FilterValueView from './TLS_FilterValueView';\r\n\r\nclass TLS_FilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls_filter__div'>\r\n          {/* Field Select */}\r\n          <SelectView store={data.FieldSelectVM} \r\n            className='tls_filter_fieldselect'/>\r\n\r\n          <div className='tls_filter__valuediv__wrapper'>\r\n            {/* Add Value */}\r\n            <Button type='primary' size='small' onClick={data.AddItem}\r\n              className='tls_filter__valuediv__addbutton'>+</Button>\r\n\r\n            {/* Value List */}\r\n            <div className='tls_filter__valuediv'>\r\n              {data.Items.map(x => {\r\n                return <TLS_FilterValueView key={x.id} store={x} />\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <Button size='small' type='text'\r\n            className='tls_filter__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='tls_filter__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './TLS_PageItem.css'\r\nimport { TLS_PageItemVM } from './TLS_PageItemVM';\r\nimport TLS_FilterView from '../filter/TLS_FilterView';\r\nimport LevelGroupView from '../levelGroup/LevelGroupView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TLS_PageItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_PageItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__pageitem__wrapper'>\r\n          {/* Filters */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Filter */}\r\n              <Button type='primary' size='small' onClick={data.AddFilter}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập bộ lọc</b></span>\r\n            </div>\r\n\r\n            {/* Filter List */}\r\n            {data.Filters.map(x => {\r\n              return <TLS_FilterView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n\r\n          {/* LevelGroup */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Level */}\r\n              <Button type='primary' size='small' onClick={data.AddLevelGroup}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập level</b></span>\r\n            </div>\r\n\r\n            {/* Level List */}\r\n            {data.LevelGroups.map(x => {\r\n              return <LevelGroupView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_PageItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport LevelGroupView from './levelGroup/LevelGroupView';\r\nimport './TypicalLevelSettingData.css'\r\nimport './pageItem/TLS_PageItem.css'\r\nimport TLS_FilterView from './filter/TLS_FilterView';\r\nimport TLS_PageItemView from './pageItem/TLS_PageItemView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TypicalLevelSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onKeyDown = (v) => {\r\n    //console.log(v);\r\n    v.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__tabs__wrapper'>\r\n          <div className='tls__tabs__div'>\r\n            {/* Add Tab */}\r\n            {!data.IsHaveAddCommandTab ?\r\n            <Button type='primary' size='small' onClick={data.AddPageItem}\r\n              className='tls__tabs__add__outside'>+</Button>\r\n              : ''}\r\n\r\n            {/* Tabs */}\r\n            <Tabs type='card' className='tls__tabs'\r\n              onChange={data.ChangePageKey}\r\n              activeKey={data.CurrentPageKey}\r\n              onKeyDown={this.onKeyDown}>\r\n              {data.AllTabs.map(x => {\r\n                return <TabPane tab={x.TitleElement} key={x.id}>\r\n                  <TLS_PageItemView store={x} />\r\n                </TabPane>\r\n              })}\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingDataView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM';\r\nimport TypicalLevelSettingDataView from './TypicalLevelSettingDataView';\r\nimport NewInputView from '../../../../input/NewInputView';\r\nimport './TypicalLevelSetting.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nclass TypicalLevelSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* Data */}\r\n        <div className='tls'>\r\n          {/* Save Button */}\r\n          <Button type='primary' size='small' className='tls__save__button'\r\n            onClick={data.Save}>\r\n            <SaveFilled className='tls__save' />\r\n          </Button>\r\n          {/* Main Data */}\r\n          <TypicalLevelSettingDataView store={data.DataVM} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport * as stateType from '../state/StateType'\r\n\r\nconst { Option } = Select;\r\n\r\nclass Phase_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Phase_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var input = data.Input;\r\n    var state = data.State;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <Button type='primary' size='middle' onClick={data.AddVersion}\r\n            disabled={state === stateType.addversion}>\r\n            <PlusCircleOutlined /> LƯU KẾT QUẢ HIỆN TẠI\r\n          </Button>\r\n\r\n          {state === stateType.addversion ? <div className=\"mt-3\">\r\n            <InputView store={input.NameVM} />\r\n            <InputView store={input.DescriptionVM} />\r\n            <div className=\"mt-2\">\r\n              <Button type='primary' size='small' onClick={data.OK}>OK</Button>\r\n              <Button type='default' size='small' onClick={data.Cancel}>Cancel</Button>\r\n            </div>\r\n          </div> : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Phase_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport TableView from \"../../../../table/TableView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass RebarMass_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new RebarMass_Dict();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(RebarMass_DictView)","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as projectUtil from '../ProjectUtil'\r\nimport * as projectVMUtil from '../ProjectVMUtil'\r\nimport * as util from './ProjectCompVMUtil'\r\nimport * as pvt from '../ProjectViewType'\r\nimport MassResultCompView from '../../mass/result/MassResultCompView';\r\nimport TypicalLevelSettingView from '../../setting/typicallevel/TypicalLevelSettingView';\r\nimport Phase_DictView from '../../phase/Phase_DictView';\r\nimport RebarMass_DictView from '../../mass/rebar/RebarMass_DictView';\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class ProjectCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectVM: observable,\r\n      projectViewType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n    projectUtil.getById(v, (item) => {\r\n      this.ProjectVM = projectVMUtil.get(item);\r\n    })\r\n  }\r\n\r\n  projectVM = undefined\r\n  get ProjectVM() {\r\n    return this.projectVM;\r\n  }\r\n  set ProjectVM(v) {\r\n    this.projectVM = v;\r\n\r\n    pmDataVM().CurrentProject = v;\r\n\r\n    var list = [v];\r\n    pmDataVM().Project_DictVM.Items = list;\r\n    pmData().Phase_Dict = v.ModelItem.Phase_Dict;\r\n\r\n    var massResComp = this.MassResultCompVM;\r\n    massResComp.ProjectVMStorageList = list;\r\n    massResComp.ProjectSelectVM.InitialItems = list;\r\n\r\n    var setItemsFuncs = () => massResComp.PhaseVMStorageList = phase_DictVM.Items;\r\n\r\n    var phase_DictVM = v.Phase_DictVM;\r\n    if (phase_DictVM.Items) {\r\n      setItemsFuncs();\r\n    } else {\r\n      phase_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n        setItemsFuncs();\r\n      })\r\n    }\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM() {\r\n    if (!this.massResultCompVM) {\r\n      var obj = this.massResultCompVM = util.GetMassResultCompVM(this);\r\n      pmDataVM().MassResultCompVM = obj;\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n\r\n  projectViewType = undefined\r\n  get ProjectViewType() {\r\n    if (!this.projectViewType) {\r\n      this.projectViewType = pmDataVM().ProjectViewType;\r\n    }\r\n    return this.projectViewType;\r\n  } set ProjectViewType(v) {\r\n    this.projectViewType = v;\r\n  }\r\n\r\n  get ViewElement() {\r\n    if (!this.ProjectVM) return undefined;\r\n    \r\n    switch (this.ProjectViewType) {\r\n      case pvt.mass:\r\n        return <MassResultCompView store={this.MassResultCompVM} />\r\n      case pvt.typicallevel:\r\n        return <>\r\n          {this.ProjectVM.TypicalLevelSetting_ForEdit ?\r\n            <TypicalLevelSettingView store={this.ProjectVM.TypicalLevelSetting_ForEdit} />\r\n            : ''}\r\n        </>\r\n      case pvt.phase:\r\n        return <Phase_DictView store={this.ProjectVM.Phase_DictVM} />\r\n      case pvt.inputdata:\r\n        return <RebarMass_DictView store={this.ProjectVM.RebarMass_Dict} />\r\n    }\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { Level_Dict } from './Level_Dict';\r\n\r\nclass Level_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Level_Dict();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(Level_DictView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport * as pvt from '../../project/ProjectViewType'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class LeftNavVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectViewType : observable\r\n    })\r\n  }\r\n\r\n  get Title (){\r\n    return pmDataVM().CurrentProject?.Name\r\n  }\r\n\r\n  get Items (){\r\n    return this.ModelItem.Items\r\n  }\r\n\r\n  projectViewType = undefined\r\n  get ProjectViewType(){\r\n    if (!this.projectViewType){\r\n      this.projectViewType = pmDataVM().ProjectViewType;\r\n    }\r\n    return this.projectViewType\r\n  } set ProjectViewType(v){\r\n    this.projectViewType = pmDataVM().ProjectViewType = v;\r\n  }\r\n\r\n  GetItemClass = (item) => {\r\n    return `leftnav__item ${item.Value === this.ProjectViewType ? 'active' : ''}`;\r\n  }\r\n\r\n  SetView = (item) => {\r\n    this.ProjectViewType = item.Value;\r\n  }\r\n}","export class LeftNav {\r\n  Title\r\n\r\n  Items\r\n}","export class LeftNavItem {\r\n  Title\r\n  Value\r\n}","import { LeftNavItem } from \"./LeftNavItem\"\r\n\r\nexport const get = (title, value) => {\r\n  var qI = new LeftNavItem();\r\n  qI.Title = title;\r\n  qI.Value = value;\r\n  return qI;\r\n}","import { LeftNavVM } from \"./LeftNavVM\"\r\nimport * as modelUtil from './LeftNavUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI =new LeftNavVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(modelUtil.GetTest());\r\n}","import { LeftNav } from \"./LeftNav\"\r\nimport * as pvt from '../../project/ProjectViewType'\r\nimport * as itemUtil from './LeftNavItemUtil'\r\n\r\nexport const GetTest = () => {\r\n  var qI = new LeftNav();\r\n\r\n  qI.Title = 'HikariComplex'\r\n  qI.Items = [\r\n    itemUtil.get('MASS', pvt.mass),\r\n    itemUtil.get('TYPICAL LEVEL', pvt.typicallevel),\r\n    itemUtil.get('PHASE', pvt.phase),\r\n    itemUtil.get('INPUT DATA', pvt.inputdata),\r\n  ]\r\n\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { } from '@ant-design/icons';\r\nimport './LeftNav.css'\r\nimport { LeftNavVM } from './LeftNavVM';\r\nimport * as navUtil from './LeftNavVMUtil'\r\n\r\nclass LeftNavView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = navUtil.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <nav className='leftnav'>\r\n          {/* Wrapper */}\r\n          <div className='leftnav__wrapper'>\r\n            {/* Title */}\r\n            <span className='leftnav__title'>\r\n              <span className='leftnav__title__prefix'>\r\n                DỰ ÁN\r\n              </span>\r\n              <span className='leftnav__title__name'>\r\n                {data.Title}\r\n              </span>\r\n            </span>\r\n\r\n            {/* Items */}\r\n            <div className='leftnav__items'>\r\n              {data.Items.map(x => {\r\n                return <a key={x.Value} onClick={() => data.SetView(x)}\r\n                  className={data.GetItemClass(x)}>\r\n                  {x.Title}\r\n                </a>\r\n              })}\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LeftNavView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ProjectCompVM from './ProjectCompVM';\r\nimport Phase_DictView from '../../phase/Phase_DictView';\r\nimport MassResultCompView from '../../mass/result/MassResultCompView';\r\nimport RebarMass_DictView from '../../mass/rebar/RebarMass_DictView';\r\nimport Level_DictView from '../../level/Level_DictView';\r\nimport TypicalLevelSettingView from '../../setting/typicallevel/TypicalLevelSettingView';\r\nimport LeftNavView from '../../nav/left/LeftNavView';\r\nimport './ProjectComp.css'\r\nimport * as util from './ProjectCompVMUtil'\r\n\r\nclass ProjectCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.get()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var projectVM = data.ProjectVM;\r\n\r\n    return (\r\n      <>\r\n        <div className='projectcomp'>\r\n          <LeftNavView />\r\n          <div className='projectcomp__main__wrapper'>\r\n            <div className='projectcomp__main'>\r\n              {projectVM ? data.ViewElement : ''}\r\n            </div>\r\n            <div className='projectcomp__main__bottom'/>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(ProjectCompView));\r\n","import './App.css';\r\nimport \"antd/dist/antd.css\";\r\nimport { Component } from 'react';\r\n\r\nimport TestView from './model/view/TestView';\r\n//import { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\r\nimport MassDetailView from './model/main/entity/mass/detail/MassDetailView';\r\nimport ProjectCompView from './model/main/entity/project/comp/ProjectCompView';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={TestView} />\r\n          <Route exact path=\"/massdetail/:id\" component={MassDetailView} />\r\n          <Route exact path=\"/project/:id\" component={ProjectCompView} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}