{"version":3,"sources":["model/text/TextState.js","model/text/TextVM.js","model/text/TextVMUtil.js","model/input/InputView.js","util/apiUtil.js","model/main/entity/mass/MassType.js","model/main/entity/mass/item/MassItemField.js","util/generalUtil.js","model/main/entity/mass/table/MassColumn.js","model/text/TextView.js","model/main/single/model/CategoryData.js","model/main/single/model/CategoryDataUtil.js","model/main/entity/filter/FilterCategoryType.js","model/main/entity/filter/FilterValueType.js","model/main/entity/filter/StringFilterType.js","model/main/entity/filter/NumberFilterType.js","model/main/entity/filter/EntFilterUtil.js","model/main/entity/filter/EntFilter.js","model/main/entity/mass/table/rowgroup/MGI_I_CreateType.js","model/main/entity/mass/table/rowgroup/MGI_ItemUtil.js","model/main/entity/mass/table/rowgroup/MGI_Item.js","model/main/entity/mass/table/rowgroup/MassGroupItem.js","model/main/entity/mass/table/rowgroup/MassGroupComponent.js","model/main/entity/mass/table/rowgroup/MassGroupComponentUtil.js","model/main/entity/mass/table/rowgroup/MassGroupItemUtil.js","model/select/MultiSelectVMUtil.js","model/select/MultiSelectVM.js","model/select/MultiSelectView.js","model/hover/EntHoverVM.js","model/hover/EntHoverView.js","model/select/SelectVMUtil.js","model/select/SelectVM.js","model/float/FloatItemVM.js","model/float/FloatItemVMUtil.js","model/float/FloatItemView.js","model/select/SelectView.js","model/main/entity/mass/table/location/RRLF_LocationType.js","model/main/entity/mass/table/location/ReplaceRowLocationFactory.js","model/main/entity/mass/table/location/ReplaceRowLocationFactoryUtil.js","model/main/entity/mass/table/MassRow.js","model/main/entity/mass/table/MassRowUtil.js","model/main/entity/mass/table/MassCell.js","model/main/entity/mass/table/MassCellUtil.js","model/main/entity/mass/table/MassTableUtil.js","model/main/entity/setting/base/SettingType.js","model/main/entity/setting/base/Setting.js","model/main/entity/setting/massGroup/MassGroupSettingData.js","model/main/entity/mass/MassPropertyName.js","model/main/entity/setting/massGroup/MassGroupSettingDataUtil.js","model/main/entity/setting/massGroup/MassGroupSetting.js","model/main/entity/setting/massGroup/MassGroupSettingUtil.js","model/main/entity/workpackage/WorkpackageVM.js","model/main/entity/workpackage/WorkpackageVMUtil.js","model/checkbox/CheckboxVM.js","model/checkbox/CheckboxVMUtil.js","model/main/entity/workpackage/WorkpackageInputVM.js","model/main/entity/workpackage/WorkpackageInputVMUtil.js","model/main/entity/workpackage/Workpackage_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVM.js","model/main/entity/setting/base/SettingVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingVM.js","model/main/entity/filter/EntFilterVM.js","model/main/entity/filter/EntFilterVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingVMUtil.js","model/main/entity/setting/base/SettingVMUtil.js","model/main/entity/setting/base/SettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVM.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSetting.js","model/main/entity/setting/massExport/exportSetting/MES_ValueRetrieveType.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingDataVM.js","model/main/entity/setting/massExport/MassExportSettingDataVMUtil.js","model/main/entity/setting/massExport/MassExportSettingVM.js","model/main/entity/setting/massExport/MassExportSettingVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVMUtil.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVM.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVMUtil.js","model/main/entity/phase/PhaseVM.js","model/main/entity/phase/PhaseVMUtil.js","model/main/entity/state/StateType.js","model/main/entity/phase/Phase_DictVM.js","model/main/entity/phase/PhaseInputVM.js","model/main/entity/phase/Phase_DictVMUtil.js","model/main/entity/phase/PhaseInputVMUtil.js","model/main/entity/project/ProjectVM.js","model/input/NewInputView.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemStateType.js","model/checkbox/CheckboxView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVM.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue_InputType.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVMUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVMUtil.js","model/main/entity/project/ProjectVMUtil.js","model/main/entity/project/Project_DictVM.js","model/main/entity/project/Project_DictVMUtil.js","model/main/entity/mass/result/MassResultCompVM.js","model/main/entity/mass/result/MassResultCompVMUtil.js","model/table/RenderState.js","model/table/RenderItem.js","model/table/RenderItemUtil.js","model/table/Render_Dict.js","model/table/TableColumn.js","model/table/TableColumnUtil.js","model/table/TableRow.js","model/table/TableCell.js","model/table/TableRowUtil.js","model/table/TableCellUtil.js","model/table/TableVM.js","model/table/TableVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVM.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil.js","model/main/single/form/PMDataVMUtil.js","model/main/single/form/PMDataVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingDataVM.js","model/main/entity/setting/massGroup/MassGroupSettingDataVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingVM.js","model/main/entity/setting/massGroup/MassGroupSettingVMUtil.js","model/main/entity/mass/table/MassTable.js","model/main/entity/mass/table/MassColumnUtil.js","model/main/entity/mass/item/MassItem_Dict.js","model/main/entity/mass/item/MassItem.js","model/main/entity/mass/item/MassItemUtil.js","model/main/entity/mass/result/MassResultComp.js","model/main/entity/mass/result/MassResultCompUtil.js","model/main/entity/mass/rebar/RebarMass_DictUtil.js","model/main/entity/value/ValueUnit.js","model/main/entity/mass/rebar/RebarMass_Dict.js","model/main/entity/phase/Phase.js","model/main/entity/phase/PhaseUtil.js","model/main/entity/phase/Phase_Dict.js","model/main/entity/setting/base/SettingUtil.js","model/main/entity/phase/PhaseInput.js","model/main/entity/phase/Phase_DictUtil.js","model/main/entity/phase/PhaseInputUtil.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroup.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupUtil.js","model/main/entity/setting/typicallevel/filter/TLS_Filter.js","model/main/entity/setting/typicallevel/filter/TLS_FilterUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItem.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingData.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSetting.js","model/main/entity/setting/typicallevel/TypicalLevelSettingUtil.js","model/main/entity/project/Project.js","model/main/entity/exportset/ExportSet.js","model/main/entity/exportset/ExportSetVersion.js","model/main/entity/exportset/ExportSetVersionUtil.js","model/main/entity/exportset/ExportSetUtil.js","model/main/entity/level/Level_Dict.js","model/main/entity/level/Level.js","model/main/entity/level/LevelUtil.js","model/main/entity/project/ProjectUtil.js","model/main/entity/value/ValueRetrieveFrom.js","model/main/entity/level/Level_DictUtil.js","model/main/entity/project/Project_Dict.js","model/main/entity/setting/elementFilter/ElementFilterSetting.js","model/main/entity/setting/elementFilter/ElementFilterSettingData.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingUtil.js","model/main/entity/setting/base/SettingInput.js","model/main/entity/setting/base/SettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInput.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_Dict.js","model/main/entity/setting/massExport/MassExportSettingData.js","model/main/entity/setting/massExport/MassExportSettingDataUtil.js","model/main/entity/setting/massExport/MassExportSetting.js","model/main/entity/setting/massExport/MassExportSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingInput.js","model/main/entity/setting/massExport/MassExportSettingInputUtil.js","model/main/entity/setting/massExport/MassExportSetting_Dict.js","model/main/entity/setting/massGroup/MassGroupSetting_Dict.js","model/main/entity/setting/versionCompare/VCS_Item.js","model/main/entity/setting/versionCompare/VersionCompareSetting.js","model/main/entity/setting/versionCompare/VersionCompareSettingUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_Dict.js","model/main/entity/workpackage/WorkpackageInput.js","model/main/entity/workpackage/Workpackage_Dict.js","model/main/single/model/PMDataUtil.js","model/main/single/model/PMData.js","model/main/entity/workpackage/Workpackage.js","model/main/entity/workpackage/WorkpackageUtil.js","model/main/entity/workpackage/Workpackage_DictVM.js","model/main/entity/workpackage/Workpackage_DictView.js","model/main/entity/filter/EntFilterView.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataView.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictView.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingView.js","model/main/entity/setting/massExport/MassExportSettingDataView.js","model/main/entity/setting/massExport/MassExportSetting_DictView.js","model/main/entity/mass/table/MassCellView.js","model/main/entity/mass/table/MassRowView.js","model/main/entity/mass/table/MassTableView.js","model/main/entity/mass/result/MassResultCompView.js","model/table/TableView.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictView.js","model/main/single/form/PMDataView.js","model/view/TestView.js","model/table/CellVM.js","model/table/ColumnVM.js","model/table/RowVM.js","model/main/entity/mass/detail/MassDetailTableUtil.js","model/main/entity/mass/detail/MassDetailTable.js","model/main/entity/mass/detail/MassDetailVM.js","model/main/entity/mass/detail/MassDetailTableView.js","model/main/entity/mass/detail/MassDetailView.js","model/main/entity/project/comp/ProjectCompVM.js","model/main/entity/project/comp/ProjectCompVMUtil.js","model/main/entity/phase/Phase_DictView.js","model/main/entity/mass/rebar/RebarMass_DictView.js","model/main/entity/level/Level_DictView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterView.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingView.js","model/main/entity/project/comp/ProjectCompView.js","App.js","reportWebVitals.js","index.js"],"names":["text","password","TextVM","content","undefined","placeholder","State","ts","makeObservable","this","observable","v","onSetContent","style","inputStyle","wrapper","position","get","q","qI","InputView","props","onChange","e","value","target","state","Content","store","textVMUtil","data","Password","Component","observer","http","timeout","axios","create","baseURL","Accept","handleResponse","response","success","status","message","statusText","callApi","action","a","err","error","timeout_default","url","config","put","payload","result","post","concrete","formwork","rebar","Project","Phase","Workpackage","Value","Unit","partition","rebarType","elementName","MassType","workItem","level","diameter","GetValueString","massFieldValue","field","Name","FullName","GetListForTypicalLevelFilter","randomId","Intl","DateTimeFormat","Math","random","toString","substr","newGUID","replace","c","crypto","getRandomValues","Uint8Array","UpdateFromModel","obj","M2VM","MoveItem","list","oldIndex","newIndex","temp","Remove","dict","key","index","findIndex","x","Key","splice","Add","func","isDelete","newfunc","push","MassColumn","Cells","_id","genUtil","Dict","Columns","indexOf","TextView","getWrapperContent","CategoryData","categoryNames","instance","category","family","parameter","bystring","bynumber","byequal","bycontain","bynotcontain","bysmaller","bybigger","bybetween","categoryType","EntFilter","ValueType","valueType","NumberFilterType","numberFilterType","StringFilterType","stringFilterType","Values","values","CategoryType","GetValueStorageList","fct","Instance","CategoryNames","PMData","ParameterNames","IsValid","filter","isValid","filterValues","fvt","sft","forEach","lowerVal","toLowerCase","includes","isNaN","nft","leftVal","rightVal","IsEqualLeft","IsEqualRight","valueStorageList","util","byuser","byauto","mgi","createType","MGI_Item","MassGroupItem","CreateType","ct","Title","Delete","Items","Index","title","newMGI","newMGI_id","SupComponent","AllItems","id","SubComponents","NotIncludeValues","AddNotIncludeValue","GetItem","item","itemUtil","OnIsFirstSetSupRow_Funcs","HandleCreatedByUserRows","mgii_ct","addRow","supRow","row","Table","GetRow","FullValue","IsCreatedByUser","handleRow","handleNonField","subMgcIndex","y","Filter","SupRow","replaceMgi","NewMGI","Handle_ReplaceMGI","map","items","ApiData","Field","subComponents","valueOrders","ValueOrders","notIncludeValues","IsFirstSetSupRow","isFirstSetSupRow","IsHaveMassItem","table","MassGroupComponent","originComponent","OriginComponent","AllSubItems","apply","supItem","filterUtil","SupItem","Clone","GetOriginComponent","subComps","supCom","getFromDb","compUtil","IsHaveValueOrder","GetTable","initialItems","MultiSelectVM","InitialItems","GetInitialIndexs","selectedIndexs","GetSelectedItems","SelectedIndexs","open","canOpen","InitialIndexs","initialIndexs","SelectedItems","selectedItems","OnSelectedItemChanged","titleRender","DisplayContent","OnSetOpen","Option","Select","MultiSelectView","onValueChange","onDropdownVisibleChange","Open","width","Placeholder","length","elems","displayContent","TitleRender","mode","optionFilterProp","filterOption","input","option","children","CanOpen","EntHoverVM","IsElementVisible","ShowElement","HideElement","EntHoverView","minWidth","onMouseEnter","onMouseLeave","Element","initialItem","SelectVM","InitialItem","GetInitialIndex","selectedIndex","GetSelectedItem","SelectedIndex","CanClear","Clear","InitialIndex","initialIndex","SelectedItem","selectedItem","padding","FloatItemVM","getClassName","className","location","loc","FloatItemView","floatItemVMUtil","SelectView","floatElem","floatItemStore","size","type","onClick","DivStyle","showSearch","inside","lower","ReplaceRowLocationFactory","Location","lt","ToggleLocation","backgroundColor","Color","border","MassRow","SubItems","isShowSub","rank","isHaveSub","IsToolVisible","GetCellByColumn","col","Column","UpdateData","Rank","IsHaveSub","ToggleSub","IsShowSub","SetSubFields","tempSubFields","TempSubFields","isSame","SubFields","i","supMgi","mgc","SubItem","subMgis","mgiUtil","SubMassGroupComponent","SubMassGroupItem","ColumnField","mif","ValidPhasesByInput","HandleItem","GetValue","MoveUp","CurrentList","orderItems","OrderMGI","OrderItems","orderValues","OrderValues","mgiIndex1","mgiIndex2","MoveDown","AddSub","SubCells","GetSubCells","totalValues","TotalValue","reduce","b","ContentVM","ValueString","ReplaceOK","factory","ReplaceFactory","refRow","ReferenceRow","rrlf_lt","Replace","oldMgi","newMgi","MainMGI","ReplaceMGI","IsShowSubFieldSelect","IsModalVisible","OpenModal","TitleVM","SubFieldSelectVM","locSelectVM","LocationSelectVM","LocationStorageList","ModalOK","ModalCancel","currentList","MainRows","concat","massGroupItem","subMassGroupItem","subFields","ToggleButtonContentVM","toggleButtonContent","toggleButtonContentVM","ToggleButtonContent","OnSetContent","subFieldSelectVM","AllRows","locationSelectVM","titleVM","replaceFactory","visible","onOk","onCancel","gutter","marginTop","flex","ButtonStyle","ToolElement","display","marginLeft","UpCircleOutlined","DownCircleOutlined","danger","GetRank","GetStyle","GetIsHaveSub","GetToggleButtonContent","GetSubFieldSelectVM","storageList","MassItemFields","multiSelectUtil","Order","sort","GetLocationSelectVM","selectUtil","GetSubMassGroupItem","subItems","GetSubFields","subMGI","mgis","lastValidIndex","isValidHandle","HaveMassItemSubComponents","currentIndex","CreateSubMassGroupItem","mgcIndex","list1","list2","isValidCheck","mgi_I","mgi_iUtil","MassCell","GetUnit","unit","OnGet_TotalValue_Func_Dict","totalValue","subRows","Row","AsString","console","log","IsHaveVCS_Item","ShowDetail","process","openTabFunc","window","getUrl","viewDetailId","GetViewDetailId","valueColor","tdBgColor","massIds","massType","handle","apiData","api","then","OnGet_TLS_LevelGroups_Func_Dict","isHaveWarning","tls_LevelGroup_Descriptions","unitVM","Get_TotalValue","VCS_Item","contentVM","formatValue","toLocaleString","maximumFractionDigits","subCells","isHaveVCS_Item","vcs_Item","ValueColor","TDBgColor","color","fontWeight","tls_LevelGroups","Get_TLS_LevelGroups","pmData","GetIsHaveVCS_Item","MassResultComp","Phases","ColumnIndex","GetValueColor","GetTDBgColor","GetVCS_Item","VersionCompareSetting","cells","compareIndex","compareItem","getItem","ratio","GetMassType","isPending","Handle_TLS_LevelGroups","handledCount","count","checkadd_Val","val","handle_Val","Array","isArray","TLS_LevelGroups","TLS_LevelGroup","OnGet_TLS_LevelGroup_Func_Dict","Handle_TotalValue","checkedList","totalVal","OnGet_FullValue_Func_Dict","GetIsHaveWarning","getWarningFunc","levelGroups","IsHaveWarning","Handle_TLS_LevelGroup_Descriptions","TLS_LevelGroup_Descriptions","getDescFunc","FullDescription","OnGetLevelStorageList_Func_Dict","OnGet_TLS_LevelGroups_Funcs","GetMassGroupName","MassGroupSetting","GetMainMGI","MainMGC","elementfilter","massexport","massgroup","Setting","OnDelete","Input","EditItemId","name","OnNameChanged","description","OnDescriptionChanged","OnDataChanged","projectId","settingType","SettingType","Description","Data","MassGroupSettingData","AddNewField","MassPropertyNames","Fields","fields","Category","GetDefaultFields","mpn","massGroupCompUtil","massGroupComponent","dataUtil","WorkpackageVM","code","fullName","WorkpackageVMs","Code","codeVM","nameVM","descriptionVM","OnCodeChanged","OnFullNameChanged","GetSupItem","supWp","PMDataVM","Workpackage_DictVM","CheckboxVM","Cancel","ischecked","isDisable","onCheckChange","WorkpackageInputVM","workpackageVMStorageList","isNew","commandName","IsNew","AddDatabase","WorkpackageInput","DeleteFunc","CodeVM","NameVM","DescriptionVM","IsNewVM","Ischecked","selectVM","SupItemSelectVM","supItemSelectVM","selectVMUtil","WorkpackageVMStorageList","CommandVM","workpackageVM","isNewVM","checkboxVMUtil","commandVM","CommandName","pmDataVM","GetCommandName","GetWorkpackageVMStorageList","GetWorkpackageInputVM","dictVM","OnGetItemsDone_Funcs","OnAddDatabaseDone","command","OnAdd","workpackageInputVMUtil","Workpackage_Dict","ElementFilterSetting_DictVM","ModelItem","OnGetItemsDone","currentItem","CurrentItem","EditItem","SettingVM","GetDataVM","OnGetDataVM","textUtil","dataVM","OnInitialSetDataVM","ElementFilterSettingVM","cateFilterVM","CategoryFilterVM","OnInitialData","famFilterVM","FamilyFilterVM","EntFilterVM","SetData","ValueTypeSelectVM","StringFilterTypeSelectVM","ValuesSelectVM","ValueStorageList","valueTypeSelectVM","FilterValueTypes","stringFilterTypeSelectVM","StringFilterTypes","valuesSelectVM","multiSelectVMUtil","ValueSelectPlaceholder","ElementFilterSettingDataVM","GetCategoryFilterVM","CategoryFilter","filterVMUtil","isHaveFamilyFilter","GetFamilyFilterVM","FamilyFilter","IsHaveFamilyFilter","IsHaveFamilyFilterVM","categoryFilterVM","familyFilterVM","isHaveFamilyFilterVM","DataVM","dataVMUtil","SettingInputVM","settingTypeVM","editItem","SettingTypeVM","ElementFilterSettingInputVM","GetItems","itemVMUtil","GetInput","inputVMUtil","MES_ValueSettingVM","ValueSettingVMs","RetrieveTypeSelectVM","RetrieveType","ValueFilterVM","WorkpackageSelectVM","MassTypeSelectVM","retrieveType","retrieveTypeSelectVM","RetrieveTypeStorageList","valueFilterVM","ValueFilter","modelItem","workpackageSelectVM","massTypeSelectVM","MassTypeStorageList","GetRetrieveTypeStorageList","ValueRetrieveTypes","GetWorkpackageVM","workpackage","GetMassTypeStorageList","MassTypes","MES_ValueSetting","ValueSettings","workpackageId","byparameter","GetDefault","vrt","valueFilter","GetWorkpackage","Workpackages","GetApiData","MassExportSettingDataVM","elementFilterVMStorageList","valueSettingVMs","AddNewValueSettingVM","AddNewValueSetting","itemView","valueSettingVMUtil","ElementFilterSelectVM","ElementFilterVM","elementFilterVM","ElementFilter","elementFilterSelectVM","ElementFilterVMStorageList","modelList","oldCount","newCount","delta","abs","originItemVM","valueSettingUtil","itemVM","GetElementFilterVMStorageList","GetElementFilterVM","elemFilter","GetValueSettingVMs","MassExportSettingVM","MassExportSettingInputVM","MassExportSetting_DictVM","MassGroupSetting_DictVM","PhaseVM","addversion","Phase_DictVM","AddVersion","stateType","OK","AddMassVersion","warning","PhaseInputVM","ProjectVM","typicalLevelSetting","typicalLevelSetting_ForEdit","phase_DictVM","rebarMass_Dict","RebarMass_Dict","InputExportSet","Level_Dict","Url","NewInputView","handleChange","contentEditable","React","createRef","fontFamily","innerRef","html","CheckboxView","onCheckedChange","checked","OnCheckChanging","disabled","LevelGroupVM","LevelGroups","Primary","primary","isSelectOpen","LevelStorageList","Levels","levelSelectVM","OnGetLevelStorageList_Funcs","triggerVM","IsSelectOpen","buttonTypeVM","addContentVM","trigger","GetDefaultPrimary","select","TLS_FilterValueVM","InputType","it","ToggleInputType","ValueVM","SwitchChecked_Funcs","valueVM","SelectOpen","selectOpen","PopoverState","popoverState","GetPopoverState","TLS_FilterVM","Filters","AddValue","valueUtil","FieldFilterStorageList","fieldSelectVM","FieldStorageList","GetValues","TLS_PageItemVM","st","ToggleState","NameOK","NameCancel","isLast","IsLast","PageItems","AllTabs","IsModelChangePageKey","CurrentPageKey","AddLevelGroup","levelGroupUtil","filters","AddFilter","delElem","InputToolElement","InputElement","GetLevelGroups","GetFilters","TypicalLevelSettingDataVM","pageItems","AddPageItem","pageItemUtil","IsHaveAddCommandTab","allTabs","currentPageKey","ChangePageKey","addCommandTab","TitleElement","AddCommandTab","GetPageItems","TypicalLevelSettingVM","Save","project","GetPhase_DictVM","GetItemsDone","phaseDictVMUtil","Phase_Dict","GetTypicalLevelSetting_Func","model","typicalLevelUtil","GetTypicalLevelSetting","tls","TypicalLevelSetting","OnGetTypicalLevelSetting_Funcs","GetTypicalLevelSetting_ForEdit","TypicalLevelSetting_ForEdit","Project_DictVM","MassResultCompVM","IsShowProjectSelect","CanHavePhase","isHavePhase","IsDataPending","handledRatio","GetMassData","HandledRatio","projects","Projects","projectVMs","projectVMStorageList","ProjectSelectVM","projectSelectOpen","ProjectPopoverState","projectPopoverState","projectSelectVM","ProjectVMStorageList","ProjectVMs","placement","href","ProjectSelectOpen","phases","phaseVMs","massItem_Dict","MassItem_Dict","phaseVMStorageList","PhaseSelectVM","phaseSelectVM","PhaseVMStorageList","PhaseVMs","IsHavePhase","isShowPhaseSelectVM","massGroupSettingStorageList","MassGroupSettingSelectVM","massGroupSettingSelectVM","MassGroupSettingStorageList","toFixed","loadingSpinTipVM","LoadingSpinTip","LoadingSpinTipVM","isfetchProjects","GetProjectVMStorageList","massTable","MassTable","OnIsUpdateDataDone_Funcs","OnSetHandledRatio_Funcs","GetProjectVMs","GetPhaseVMs","GetMassGroupSettingStorageList","MassGroupSetting_Dict","GetProjectPopoverStateValue","_default","edit","RenderItem","render","Render","GetRender","rs","dataIndex","inputVM","Render_Dict","renderUtil","TableColumn","RenderState","render_Dict","renders","DataIndex","GetActionColumn","CanAdd","add","AddItem","cell","editElem","CanEdit","Edit","CanDelete","DeleteItem","TableRow","Item","TableCell","renderState","GetCells","cellUtil","TableVM","IsShowActionColumn","columns","dataSource","rows","OnGetItemForAdd","DataSource","rowUtil","Rows","OnDeleteItem","OnEditItem","colUtil","ElementName","Diameter","Weight","WorkItemExportDataVM","WorkItemExportSettingVM","IsCategoryChecked","categoryCheckboxVM","checkboxUtil","WorkItemExportSetting","WorkItemExportSetting_DictVM","tableVM","GetTableVM","nameCol","isCateCol","CategoryCheckboxVM","isSubWorkItemCol","GetWorkpackage_DictVM","OnGetWorkpackagesDone","workpackageVMUtil","workpackage_DictVMUtil","GetElementFilterSetting_DictVM","elementFilterSetting_DictVMUtil","ElementFilterSetting_Dict","GetMassExportSetting_DictVM","massExportSetting_DictVMUtil","MassExportSetting_Dict","GetMassGroupSetting_DictVM","massGroupSetting_DictVMUtil","GetProject_DictVM","project_DictVMUtil","Project_Dict","GetWorkItemExportSetting_Dict","wieDictVMUtil","WorkItemExportSetting_Dict","workpackage_DictVM","elementFilterSetting_DictVM","massExportSetting_DictVM","massGroupSetting_DictVM","project_DictVM","massResultCompVM","massResultCompVMUtil","filterValueTypes","stringFilterTypes","valueRetrieveTypes","parameterNames","massPropertyNames","massTypes","workItemExportSetting_Dict","MGS_FieldVM","FieldVMs","FieldSelectVM","GetFieldStorageList","MassGroupSettingDataVM","fieldVMs","AddNewFieldVM","fieldVMUtil","GetFieldVMs","MassGroupSettingVM","IsValidTable","columnField","FullRows","Init","GetColumn","GetCell","Build","colField","IsHaveAsyncData","IsOnSaveMassGroup","HandledItems","AddHandledItems","IsUpdateDataDone","colFieldValue","initialRow","HandleRowFieldIndex","GetRow_Value_FieldIndex","rowFieldIndex","itemCount","lastRow","rowField","valueString","fullValue","Handle_AddRow","subMgcs","subIndex","r1","awaitGetSupRowForAdd","r2","SaveMassGroup","massGroupName","MassGroupInputOK","MassGroupName","mgsUtil","mgsVMUtil","MassGroupNameVM","MassGroupInputCancel","AddMainRow","massGroupSetting","mainMGC","mgi1","mainMGI","massGroupNameVM","MassItem","IsGetElement","OnGetElementDone_Funcs","massItem","isFromElement","mt","groupName","getValFunc","DeleteDatabase","Get_Count","IsGet_TLS_LevelGroup","elementId","exportSetId","exportSetVersionId","info","Info","tls_LevelGroup","Get_TLS_LevelGroup","Get_FullValue","Elements","GetProject","getByViewDetail","viewDetail","masses","GetPhases","exportSetVersionIds","GetValidPhasesByInput","inputPhases","GetTLS_LevelGroup","getLevelGroup_Func","pi","GetValidTLS_PageItem","GetValidTLS_LevelGroup","validPi","IsValidTLS_PageItem","pageItem","validLg","GetFullValue","IsGet_FullValue","getFullValue_Func","lg","Count","wp_Dict","IsDataChanged","RefreshData","projectIds","phaseIds","massItemUtil","setExportSetData","exportSet","currentVersion","CurrentVersion","OnGetCurrentVersionDone_Func","inputExportSet","OnGetInputExportSetDone_Funcs","OnGetExportSetVersions_Func","exportSetVersions","GetExportSetVersionData","ExportSetVersions","GetExportSetVersions","phaseId","settingUtil","addVersionFunc","PhaseInput","phaseUtil","inputUtil","LevelGroup","levels","getLevelStorageList","IsGet_LevelStorageList","GetLevelStorageList","min","LevelIndexs","max","MinLevel","MaxLevel","FilterDescription","TLS_Filter","arr","TLS_PageItem","TypicalLevelSettingData","fieldFilterStorageList","levelStorageList","phase","GetTest","GetFieldFilterStorageList","fieldUtil","SaveDatabase","level_Dict","getLevelsFunc","phase_Dict","phaseDictUtil","GetInputExportSetDone","getInputExportSetDone","IsOnGetDb_Async","resData","editData","ExportSet","GetCurrentVersionDone","ExportSetVersion","RetrieveFrom","retrieveFrom","GetCurrentVersion_Async","versionUtil","AddVersion_Async","addItem","Level","getAll","Elevation","elevation","GetRebarMass_Dict","rebarMassDictUtil","GetInputExportSet_Async","exportSetUtil","GetLevel_Dict","levelDictUtil","ElementFilterSetting","ElementFilterSettingData","categoryFilter","familyFilter","SettingInput","GetData","OnGetData","prefix","UrlPrefix","AddDatabaseDone","NewItem","GetEditItem","Update","urlPrefix","ElementFilterSettingInput","elementFilterSettingUtil","cateFilter","MassExportSettingData","elementFilter","elementFilterId","valueSettings","exportSettings","GetElementFilter","elemFilterId","GetDefaultValueSettings","MassExportSetting","MassExportSettingInput","massExportSettingUtil","WorkpackageId","supId","SupId","NewWorkpackage","workpackageUtil","wp","GetFullName","UpperList","LowerList","wps","GetWorkpackagesDone","workpackageInput","GetFilterValueTypes","GetStringFilterTypes","GetValueRetrieveTypes","GetMassPropertyNames","GetMassItemFields","GetMassTypes","DebugPoints","workpackage_Dict","elementFilterSetting_Dict","massExportSetting_Dict","massGroupSetting_Dict","project_Dict","massResultComp","categoryData","massItemFields","versionCompareSetting","upperList","lowerList","dbItem","GetSubItems","GetUpperList","GetLowerList","workpackageVMs","CurrentWorkpackage","workpackageInputVM","Workpackage_DictView","CurrentWorkpackageVM","searchName","SearchName","orientation","plain","margin","DeleteView","EntFilterView","test","ItemVMs","CurrentItemVM","ElementFilterSettingDataView","ElementFilterSetting_DictView","MES_ValueSettingView","borderRadius","MassExportSettingDataView","valueSettingElems","MassExportSetting_DictView","MassCellView","TDStyle","InfoCircleOutlined","AStyle","MassRowView","subElems","toggleButton","marginRight","scope","Style","HoverToolElement","ModalElement","j","MassTableView","thElems","tbodyElems","span","MassResultCompView","IsShowPhaseSelectVM","justifyContent","TableView","tableElem","theadElem","tbodyElem","WorkItemExportSetting_DictView","PMDataView","TestView","CellVM","OnGetValueString","ColumnVM","RowVM","GetFields","GetColumns","GetValueTitle","MassDetailTable","GetRows","parseFloat","setValueFunc","MassDetailVM","DetailTable","detailTable","MassDetailTableView","colElems","rowElems","cellElems","MassDetailView","match","params","withRouter","ProjectCompVM","projectVM","projectUtil","projectVMUtil","massResComp","setItemsFuncs","massResutlCompVMUtil","Phase_DictView","PlusCircleOutlined","RebarMass_DictView","Level_DictView","LevelGroupView","LevelSelectVM","DeleteFilled","TLS_FilterValueView","unCheckedChildren","checkedChildren","TLS_FilterView","TLS_PageItemView","Tabs","TabPane","TypicalLevelSettingDataView","onKeyDown","stopPropagation","activeKey","tab","TypicalLevelSettingView","SaveFilled","ProjectCompView","App","basename","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9f5e5760.chunk.js","sourcesContent":["export const text = 'text'\r\nexport const password = 'password'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as ts from './TextState'\r\n\r\nexport class TextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder : observable,\r\n      State : observable\r\n    })\r\n  }\r\n\r\n  content = undefined\r\n  get Content(){\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  inputStyle\r\n\r\n  style\r\n  get Style() {\r\n    if (!this.style) {\r\n      this.style = this.inputStyle ? this.inputStyle : {};\r\n\r\n      if (this.wrapper) {\r\n        this.style.position = 'relative';\r\n      }\r\n    }\r\n    return this.style;\r\n  }\r\n\r\n  State = ts.text\r\n}","import { TextVM } from \"./TextVM\"\r\n\r\nexport const get = (q, placeholder) => {\r\n  var qI = new TextVM();\r\n  qI.content = q;\r\n  qI.placeholder = placeholder;\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport * as ts from '../text/TextState'\r\n\r\nclass InputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    var { value } = e.target;\r\n    this.state.Content = value;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { content, placeholder } = data;\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <Input value={content} onChange={this.onChange}\r\n            placeholder={placeholder} /> : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={content} onChange={this.onChange} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(InputView)","import axios from 'axios';\r\nimport { message } from 'antd';\r\n\r\nexport const API_URL = 'https://api.bimdev.vn/api';\r\n\r\n// const http = axios.create({\r\n//   baseURL: API_URL,\r\n//   Accept: 'application/json',\r\n//   'Content-Type': 'application/json',\r\n//   //timeout: 20000\r\n//   timeout: 20000000\r\n// });\r\n\r\nconst http = (timeout) => axios.create({\r\n    baseURL: API_URL,\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    timeout\r\n  });\r\n\r\nconst handleNetworkError = (err) => {\r\n  message.error(`Error sending request: ${err}`);\r\n  return {\r\n    success: false\r\n  };\r\n}\r\n\r\nconst handleResponse = (response) => {\r\n  // Parse the axios response\r\n  const success = response.status >= 200 && response.status < 300;\r\n  const data = response.data;\r\n  let message = response.statusText;\r\n  return {\r\n    success,\r\n    data,\r\n    message\r\n  };\r\n}\r\n\r\nexport const callApi = async (action) => {\r\n  try {\r\n    const response = await action;\r\n    return handleResponse(response);\r\n  } catch (err) {\r\n    return handleNetworkError(err);\r\n  } finally { }\r\n}\r\n\r\nexport const timeout_default = 20000\r\n\r\nexport const get = async (url, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  return callApi(http(timeout).get(url, config));\r\n}\r\n\r\nexport const put = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).put(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const post = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).post(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const del = async (url, payload,timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).delete(url, payload));\r\n  return result;\r\n}","export const concrete = \"concrete\";\r\nexport const formwork = \"formwork\";\r\nexport const rebar = \"rebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [ concrete, formwork, rebar ];\r\n}\r\n\r\nexport const IsGetElement = (massType) => {\r\n  return massType === concrete || massType === formwork;\r\n}","import * as mt from '../MassType'\r\n\r\nexport const Project = 'Project'\r\nexport const Phase = 'Phase'\r\nexport const Workpackage = 'Workpackage'\r\nexport const Value = 'Value'\r\nexport const Unit = 'Unit'\r\nexport const partition = 'partition'\r\nexport const rebarType = 'rebarType'\r\nexport const elementName = 'elementName'\r\nexport const MassType = 'MassType'\r\nexport const workItem = 'workItem'\r\nexport const level = 'level'\r\nexport const diameter = 'diameter'\r\nexport const block = 'block'\r\nexport const discipline = 'discipline'\r\n\r\nexport const GetAll = () => {\r\n  return [MassType, workItem, level, diameter]\r\n}\r\n\r\nexport const GetDirectiveFields = () => {\r\n  return [Project, Workpackage, Value, Unit];\r\n}\r\n\r\nexport const GetIdentifyFields = () => {\r\n  return [elementName];\r\n}\r\n\r\nexport const GetFullFields = (massItem, field) => {\r\n  switch (field) {\r\n    case Project:\r\n    case Value:\r\n    case Unit:\r\n    case MassType:\r\n    case Phase:\r\n      return {\r\n        fields: [field],\r\n        isFromElement: false\r\n      };\r\n    case workItem:\r\n    case elementName:\r\n    case rebarType:\r\n    case partition:\r\n    case level:\r\n    case diameter:\r\n      var massType = massItem[MassType];\r\n      if (massType === mt.rebar) {\r\n        return {\r\n          fields: ['Info', field],\r\n          isFromElement: false\r\n        };\r\n      } else {\r\n        var groupName = undefined;\r\n        // kiểm tra các phân nhóm trong Element: identify, locate ...\r\n        switch (field) {\r\n          case workItem:\r\n          case elementName:\r\n            groupName = 'identify';\r\n            break;\r\n          case level:\r\n            groupName = 'locate';\r\n            break;\r\n        }\r\n        return {\r\n          fields: ['Element', 'info', groupName, field],\r\n          isFromElement: true\r\n        }\r\n      }\r\n  }\r\n}\r\n\r\nexport const GetValueString = (massFieldValue, field) => {\r\n  var value = undefined;\r\n\r\n  switch (field) {\r\n    case Project:\r\n    case Phase:\r\n      value = massFieldValue.Name;\r\n      break;\r\n    case Workpackage:\r\n      value = massFieldValue.FullName;\r\n      break;\r\n    default:\r\n      value = massFieldValue;\r\n      break;\r\n  }\r\n\r\n  return value ? value : 'undefined';\r\n}\r\n\r\nexport const GetListForTypicalLevelFilter = () => {\r\n  return [workItem, block, discipline]\r\n}\r\n\r\nexport const GetDefaultListValue = (field) => {\r\n  switch (field) {\r\n    case workItem:\r\n      return ['Dầm', 'Sàn', 'Cột', 'Vách'];\r\n    default:\r\n      return [];\r\n  }\r\n}","\r\nexport let dtFormat = new Intl.DateTimeFormat('en-GB');\r\n\r\nexport const deepClone = (q) => {\r\n  return JSON.parse(JSON.stringify(q));\r\n}\r\n\r\nexport const randomId = () => {\r\n  // Math.random should be unique because of its seeding algorithm.\r\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n  // after the decimal.\r\n  return Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const newGUID = () => {\r\n  return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\r\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n  );\r\n}\r\n\r\nexport const UpdateFromModel = (obj, action) => {\r\n  obj.M2VM = true;\r\n  action();\r\n  obj.M2VM = false;\r\n}\r\n\r\nexport const MoveItem = (list, oldIndex, newIndex) => {\r\n  if (oldIndex === -1 || newIndex === -1 || \r\n    oldIndex === newIndex) return;\r\n  var temp = list[oldIndex];\r\n  list[oldIndex] = list[newIndex];\r\n  list[newIndex] = temp;\r\n}\r\n\r\nexport const IsEqual = (list1, list2) => {\r\n  if (list1.length !== list2.length) return false;\r\n  var isValidCheck = true;\r\n  var isEqual = true;\r\n\r\n  list1.forEach((x,i) => {\r\n    if (isValidCheck && x !== list2[i]){\r\n      isValidCheck = false; isEqual = false;\r\n    }\r\n  })\r\n\r\n  return isEqual;\r\n}\r\n\r\nexport const IsSameValues = (list1, list2) => {\r\n  var isValidCheck = true;\r\n  var isSame = true;\r\n\r\n  list1.forEach((x,i) => {\r\n    if (isValidCheck && !list2.includes(x)){\r\n      isValidCheck = false; isSame = false;\r\n    }\r\n  })\r\n\r\n  return isSame;\r\n}\r\n\r\nexport const GroupBy = function(xs, key) {\r\n  var groups = [];\r\n\r\n  xs.forEach(x => {\r\n    var val = x[key];\r\n    var group = undefined;\r\n    var index = groups.findIndex(y => val === y.Key);\r\n    if (index === -1){\r\n      group = {\r\n        Key : val,\r\n        Items : []\r\n      };\r\n      groups.push(group);\r\n    }else {\r\n      group = groups[index];\r\n    }\r\n    group.Items.push(x);\r\n  })\r\n\r\n  return groups;\r\n};\r\n\r\nexport const Remove = (dict, key) => {\r\n  var index = dict.findIndex(x => x.Key === key);\r\n  if (index !== 0){\r\n    return dict.splice(index, 1);\r\n  }\r\n}\r\n\r\nexport const Add = (dict, func, isDelete = true) => {\r\n  var key = newGUID();\r\n\r\n  var newfunc = () => {\r\n    func();\r\n    if (isDelete) {\r\n      Remove(dict, key);\r\n    }\r\n  }\r\n\r\n  dict.push({\r\n    Key: newGUID(),\r\n    Value: newfunc\r\n  });\r\n}","import * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport default class MassColumn {\r\n  _id\r\n  get id() {\r\n    if (!this._id){\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.Columns.indexOf(this);\r\n  }\r\n\r\n  Cells = []\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\n\r\nclass TextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = {\r\n        content: `Nội dung`\r\n      }\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var { content } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {content}\r\n        {this.getWrapperContent()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TextView)","import * as util from './CategoryDataUtil'\r\n\r\nexport class CategoryData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new CategoryData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = util.GetCategoryNames();\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n}","export const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Columns']\r\n}","export const category = \"category\";\r\nexport const family = \"family\";\r\nexport const parameter = 'parameter'\r\n\r\nexport const GetAll = () => {\r\n  return [ category, family, parameter ];\r\n}","export const bystring = \"bystring\";\r\nexport const bynumber = \"bynumber\";\r\n\r\nexport const GetAll = () => {\r\n  return [ bystring, bynumber ];\r\n}","export const byequal = \"byequal\";\r\nexport const bycontain = \"bycontain\";\r\nexport const bynotcontain = \"bynotcontain\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bycontain, bynotcontain ];\r\n}","export const byequal = \"byequal\";\r\nexport const bysmaller = \"bysmaller\";\r\nexport const bysmallerorequal = \"bysmallerorequal\";\r\nexport const bybigger = \"bybigger\";\r\nexport const bybiggerorequal = \"bybiggerorequal\";\r\nexport const bybetween = \"bybetween\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bysmaller, bybigger, bybetween ];\r\n}","import { CategoryData } from \"../../single/model/CategoryData\"\r\nimport { PMData } from \"../../single/model/PMData\";\r\nimport { EntFilter } from \"./EntFilter\"\r\nimport * as fct from './FilterCategoryType'\r\nimport * as fvt from './FilterValueType'\r\nimport * as sft from './StringFilterType'\r\nimport * as nft from './NumberFilterType'\r\n\r\nexport const categoryData = () => {\r\n  return CategoryData.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, categoryType) => {\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.valueType;\r\n  qI.NumberFilterType = q.numberFilterType;\r\n  qI.StringFilterType = q.stringFilterType;\r\n  qI.Values = q.values;\r\n  qI.CategoryType = categoryType;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  if (!q) return q;\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.ValueType;\r\n  qI.NumberFilterType = q.NumberFilterType;\r\n  qI.StringFilterType = q.StringFilterType;\r\n  qI.Values = [...q.Values];\r\n  qI.CategoryType = q.CategoryType;\r\n  return qI;\r\n}\r\n\r\nexport const GetValueStorageList = (q) => {\r\n  var list = [];\r\n\r\n  switch (q.CategoryType) {\r\n    case fct.category:\r\n      list = categoryData().CategoryNames;\r\n      break;\r\n    case fct.parameter:\r\n      list = pmData().ParameterNames;\r\n      break;\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    valueType: q.ValueType,\r\n    numberFilterType: q.NumberFilterType,\r\n    stringFilterType: q.StringFilterType,\r\n    values: q.Values\r\n  }\r\n}\r\n\r\nexport const IsValid = (filter, value) => {\r\n  if (value === undefined || value === null) return false;\r\n\r\n  var isValid = false;\r\n  var filterValues = filter.Values;\r\n  switch (filter.ValueType) {\r\n    case fvt.bystring:\r\n      if (typeof value === 'string') {\r\n        var filterType = filter.StringFilterType;\r\n        switch (filterType) {\r\n          case sft.byequal:\r\n            filterValues.forEach(x => {\r\n              if (!isValid && x === value) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bycontain:\r\n            var lowerVal = value.toLowerCase();\r\n            filterValues.forEach(x => {\r\n              if (!isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bynotcontain:\r\n            var lowerVal = value.toLowerCase();\r\n            isValid = true;\r\n            filterValues.forEach(x => {\r\n              if (isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = false;\r\n              }\r\n            })\r\n            break;\r\n        }\r\n      }\r\n      break;\r\n    case fvt.bynumber:\r\n      if (!isNaN(value)) {\r\n        var filterType = filter.NumberFilterType;\r\n        switch (filterType) {\r\n          case nft.byequal:\r\n            return value === filterValues[0];\r\n          case nft.bysmaller:\r\n            return value < filterValues[0];\r\n          case nft.bysmallerorequal:\r\n            return value <= filterValues[0];\r\n          case nft.bybigger:\r\n            return value > filterValues[0];\r\n          case nft.bybiggerorequal:\r\n            return value >= filterValues[0];\r\n          case nft.bybetween:\r\n            var leftVal = filterValues[0];\r\n            var rightVal = filterValues[1];\r\n            return (filter.IsEqualLeft && leftVal === value) ||\r\n              leftVal < value && value < rightVal\r\n              || (filter.IsEqualRight && value === rightVal);\r\n        }\r\n      }\r\n      break;\r\n  }\r\n\r\n  L1:\r\n  return isValid;\r\n}","import * as util from './EntFilterUtil'\r\n\r\nexport class EntFilter\r\n{\r\n  ValueType\r\n  NumberFilterType\r\n  StringFilterType\r\n  IsEqualLeft\r\n  IsEqualRight\r\n\r\n  values\r\n  get Values(){\r\n    return this.values;\r\n  }\r\n  set Values(v){\r\n    this.values = v;\r\n  }\r\n\r\n  CategoryType\r\n\r\n  valueStorageList\r\n  get ValueStorageList(){\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = util.GetValueStorageList(this);\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byuser = 'byuser'\r\nexport const byauto = 'byauto'","import MGI_Item from \"./MGI_Item\";\r\nimport * as ct from './MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport const create = (mgi, createType) => {\r\n  var qI = new MGI_Item();\r\n  qI.MassGroupItem = mgi;\r\n\r\n  if (!createType) {\r\n    qI.CreateType = ct.byauto;\r\n  }else{\r\n    qI.CreateType = ct.byuser;\r\n    qI.Value = genUtil.newGUID();\r\n    qI.Title = 'Tên đầu mục';\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, mgi) => {\r\n  var qI = new MGI_Item();\r\n  qI.Value = data.value;\r\n  qI.Title = data.title;\r\n  qI.newMGI_id = data.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = data.createType ? data.createType : ct.byauto\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, mgi) => {\r\n  var qI = new MGI_Item();\r\n  qI.Value = q.Value;\r\n  qI.Title = q.Title;\r\n  qI.newMGI_id = q.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = q.CreateType;\r\n  return qI;\r\n}\r\n\r\nexport const GetNewMGI = (q) => {\r\n  var _id = q.newMGI_id;\r\n  if (!_id) return undefined;\r\n  var list = q.MassGroupItem.SupComponent.AllItems;\r\n  \r\n  var index = list.findIndex(x => x._id === _id);\r\n  return index !== -1 ? list[index] : undefined;\r\n}","import * as util from './MGI_ItemUtil'\r\n\r\nexport default class MGI_Item {\r\n  Value\r\n\r\n  get Index() {\r\n    return this.MassGroupItem.Items.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = this.Value;\r\n    }\r\n    return this.title;\r\n  }\r\n  set Title(v){\r\n    this.title = v;\r\n  }\r\n\r\n  newMGI\r\n  get NewMGI(){\r\n    if (!this.newMGI){\r\n      this.newMGI = util.GetNewMGI(this);\r\n\r\n      if (!this.newMGI && this.newMGI_id){\r\n        this.newMGI_id = undefined;\r\n      }\r\n    }\r\n    return this.newMGI;\r\n  }\r\n  set NewMGI(v){\r\n    this.newMGI = v;\r\n    if (!v || v === this.MassGroupItem){\r\n      this.newMGI_id = undefined;\r\n    }\r\n    else{\r\n      this.newMGI_id = v.id;\r\n    }\r\n  }\r\n\r\n  newMGI_id\r\n\r\n  get ApiData(){\r\n    return {\r\n      value : this.Value,\r\n      title : this.Title,\r\n      newMGI_id : this.newMGI_id,\r\n      createType : this.CreateType\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.MassGroupItem.Items.splice(this.Index, 1);\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport MGI_Item from './MGI_Item'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport * as mgii_ct from './MGI_I_CreateType'\r\nimport * as rowUtil from '../MassRowUtil'\r\nimport * as util from './MassGroupItemUtil'\r\n\r\nexport default class MassGroupItem {\r\n  Field\r\n  SubComponents = []\r\n  NotIncludeValues = []\r\n  IsHaveValueOrder\r\n  BindingRows\r\n  SupComponent\r\n\r\n  Items = []\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  get Index() {\r\n    return this.SupComponent.Items.indexOf(this);\r\n  }\r\n\r\n  get OrderItems() {\r\n    return this.Items;\r\n  }\r\n\r\n  get OrderValues() {\r\n    return this.Items.map(x => x.Value);\r\n  }\r\n\r\n  get ApiData() {\r\n    var items = this.Items.map(x => x.ApiData);\r\n\r\n    return {\r\n      _id: this.id,\r\n      field: this.Field,\r\n      subComponents: this.SubComponents.map(x => x.ApiData),\r\n      valueOrders: this.ValueOrders,\r\n      notIncludeValues: this.NotIncludeValues,\r\n      items\r\n    }\r\n  }\r\n\r\n  AddNotIncludeValue = (v) => {\r\n    var index = this.NotIncludeValues.indexOf(v);\r\n    if (index === -1) {\r\n      this.NotIncludeValues.push(v);\r\n    }\r\n  }\r\n\r\n  GetItem = (v, title) => {\r\n    var index = this.Items.findIndex(x => x.Value === v);\r\n    if (index === -1) {\r\n      var item = itemUtil.create(this)\r\n      item.Value = v;\r\n      item.Title = title;\r\n      this.Items.push(item);\r\n      return item;\r\n    }\r\n    return this.Items[index];\r\n  }\r\n\r\n  supRow\r\n  get SupRow() {\r\n    return this.supRow;\r\n  }\r\n  set SupRow(v) {\r\n    this.supRow = v;\r\n    if (!this.IsFirstSetSupRow) {\r\n      this.IsFirstSetSupRow = true;\r\n      this.HandleCreatedByUserRows();\r\n    }\r\n  }\r\n\r\n  OnIsFirstSetSupRow_Funcs = []\r\n\r\n  isFirstSetSupRow\r\n  get IsFirstSetSupRow() {\r\n    return this.isFirstSetSupRow;\r\n  }\r\n  set IsFirstSetSupRow(v) {\r\n    this.isFirstSetSupRow = v;\r\n    this.OnIsFirstSetSupRow_Funcs.forEach(x => x());\r\n  }\r\n\r\n  get HaveMassItemSubComponents() {\r\n    return this.SubComponents.filter(x => x.IsHaveMassItem);\r\n  }\r\n\r\n  table\r\n  get Table() {\r\n    if (!this.table) {\r\n      this.table = util.GetTable(this);\r\n    }\r\n    return this.table;\r\n  }\r\n  set Table(v) {\r\n    this.table = v;\r\n  }\r\n\r\n  HandleCreatedByUserRows = () => {\r\n    var userItems = this.Items\r\n      .filter(x => x.CreateType === mgii_ct.byuser);\r\n\r\n    userItems.forEach(x => {\r\n      var value = x.Value;\r\n\r\n      const addRow = (supRow) => {\r\n        var row = this.Table.GetRow(value, supRow);\r\n        row.FullValue = value;\r\n        row.IsCreatedByUser = true;\r\n        return row;\r\n      }\r\n\r\n      const handleRow = (row) => {\r\n        row.MassGroupItem = this;\r\n        handleNonField(row);\r\n      }\r\n\r\n      const handleNonField = (row) => {\r\n        var subMgcIndex = this.SubComponents.findIndex(y => \r\n          y.Filter.Values.includes(x.Value))\r\n        if (subMgcIndex !== -1){\r\n          var subMgi = this.SubComponents[subMgcIndex].Items[0];\r\n          subMgi.SupRow = row;\r\n        }\r\n      }\r\n\r\n      var replaceMgi = x.NewMGI;\r\n      if (replaceMgi) {\r\n        replaceMgi.GetItem(value);\r\n        this.Table.Handle_ReplaceMGI(replaceMgi, addRow, handleRow);\r\n      } else{\r\n        handleRow(addRow(this.SupRow));\r\n      }\r\n    })\r\n  }\r\n}","import * as util from './MassGroupComponentUtil'\r\n\r\nexport default class MassGroupComponent {\r\n  Filter\r\n  Items\r\n  SupItem\r\n\r\n  originComponent\r\n  get OriginComponent(){\r\n    if (!this.originComponent){\r\n      this.originComponent = util.GetOriginComponent(this);\r\n    }\r\n    return this.originComponent;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      filter : this.Filter ? this.Filter.ApiData : undefined,\r\n      items: this.Items.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  get AllItems(){\r\n    return this.OriginComponent.AllSubItems;\r\n  }\r\n\r\n  get AllSubItems(){\r\n    var list = [...this.Items];\r\n    this.Items.forEach(x => \r\n      x.SubComponents.forEach(y => list.push.apply(list, y.AllSubItems)));\r\n    return list;\r\n  }\r\n}","import MassGroupComponent from \"./MassGroupComponent\"\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as itemUtil from './MassGroupItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\"\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, supItem) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  qI.Filter = data.filter ? filterUtil.get(data.filter) : undefined;\r\n\r\n  qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supItem) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupComponent();\r\n  qI.Filter = filterUtil.Clone(q.Filter);\r\n\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetOriginComponent = (q) => {\r\n  return q.SupItem ? q.SupItem.SupComponent.OriginComponent : q;\r\n}","import MassGroupItem from \"./MassGroupItem\"\r\nimport * as compUtil from './MassGroupComponentUtil'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (field, subComps, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI.Field = field;\r\n  qI.SupComponent = supCom;\r\n  if (subComps) {\r\n    qI.SubComponents = subComps;\r\n  }\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI._id = data._id;\r\n  qI.Field = data.field;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = data.subComponents ? data.subComponents.map(x => compUtil.get(x, qI))\r\n    : [];\r\n\r\n  if (data.items) {\r\n    qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI))\r\n      .filter(x => x.Value);\r\n    qI.IsHaveValueOrder = true;\r\n  } else {\r\n    qI.Items = []\r\n    qI.IsHaveValueOrder = false;\r\n  }\r\n\r\n  qI.NotIncludeValues = data.notIncludeValues ? data.notIncludeValues : [];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supCom) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupItem();\r\n  qI.id = q.id;\r\n  qI.Field = q.Field;\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.NotIncludeValues = [...q.NotIncludeValues];\r\n  qI.IsHaveValueOrder = q.IsHaveValueOrder;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = q.SubComponents.map(x => compUtil.Clone(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  return q.SupComponent.SupItem.Table;\r\n}","import { MultiSelectVM } from \"./MultiSelectVM\";\r\n\r\nexport const get = (items, initialItems) => {\r\n  var qI = new MultiSelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItems = initialItems;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MultiSelectVMUtil'\r\n\r\nexport class MultiSelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      selectedIndexs: observable,\r\n      open : observable,\r\n      canOpen : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  initialItems;\r\n  get InitialItems() {\r\n    return this.initialItems;\r\n  }\r\n  set InitialItems(v){\r\n    this.initialItems = v;\r\n    this.InitialIndexs = this.GetInitialIndexs();\r\n    this.SelectedIndexs = this.InitialIndexs;\r\n  }\r\n\r\n  initialIndexs;\r\n  get InitialIndexs() {\r\n    if (!this.initialIndexs) {\r\n      this.initialIndexs = this.GetInitialIndexs();\r\n    }\r\n    return this.initialIndexs;\r\n  }\r\n  set InitialIndexs(v){\r\n    this.initialIndexs = v;\r\n  }\r\n\r\n  GetInitialIndexs =() => {\r\n    var initialItems = this.InitialItems;\r\n    if (!initialItems) return [];\r\n    return initialItems.map(x => this.Items.indexOf(x)).filter(x => x !== -1);\r\n  }\r\n\r\n  selectedIndexs = []\r\n  get SelectedIndexs() {\r\n    return this.selectedIndexs;\r\n  }\r\n  set SelectedIndexs(v) {\r\n    this.selectedIndexs = v;\r\n    this.SelectedItems = this.GetSelectedItems();\r\n  }\r\n\r\n  selectedItems\r\n  get SelectedItems() {\r\n    if (!this.selectedItems) {\r\n      this.selectedItems = this.GetSelectedItems();\r\n    }\r\n    return this.selectedItems;\r\n  }\r\n  set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n    if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItems = () => {\r\n    return this.SelectedIndexs.map(x => this.Items[x]);\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder() {\r\n    if (!this.placeholder) {\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { MultiSelectVM } from \"./MultiSelectVM\";\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nconst { Option } = Select;\r\n\r\nclass MultiSelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MultiSelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style ? this.props.style : { width: '100%' }; \r\n    var { Placeholder, Items, SelectedIndexs, InitialIndexs } = data;\r\n\r\n    if (SelectedIndexs.length === 0) {\r\n      SelectedIndexs = InitialIndexs;\r\n      data.InitialIndexs = [];\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined){\r\n        id = genUtil.randomId();\r\n      }else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    return (\r\n      <>\r\n        <Select style={style}\r\n          mode=\"multiple\"\r\n          placeholder={Placeholder}\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={SelectedIndexs}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n          open={data.CanOpen && data.Open}\r\n          onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n        >\r\n          {elems}\r\n        </Select>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MultiSelectView)","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class EntHoverVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsElementVisible: observable,\r\n    })\r\n  }\r\n\r\n  IsElementVisible = false;\r\n\r\n  ShowElement = () => {\r\n    this.IsElementVisible =  true;\r\n  }\r\n\r\n  HideElement = () => {\r\n    this.IsElementVisible =  false;\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport EntHoverVM from \"./EntHoverVM\";\r\n\r\nclass EntHoverView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntHoverVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    if (!data.style) {\r\n      var style = this.props.style ? this.props.style : {};\r\n      if (!style.minWidth) {\r\n        style.minWidth = 150;\r\n      }\r\n      data.style = style;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div onMouseEnter={data.ShowElement} style={data.style}\r\n          onMouseLeave={data.HideElement}>\r\n          {data.IsElementVisible ? data.Element : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntHoverView)","import { SelectVM } from \"./SelectVM\";\r\n\r\nexport const get = (items, initialItem) => {\r\n  var qI = new SelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItem = initialItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './SelectVMUtil'\r\n\r\nexport class SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      selectedIndex : observable,\r\n      CanClear :observable,\r\n      open : observable,\r\n      canOpen : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = [];\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  initialItem = undefined\r\n  get InitialItem() {\r\n    return this.initialItem;\r\n  }\r\n  set InitialItem(v){\r\n    this.initialItem = v;\r\n    this.InitialIndex = this.GetInitialIndex();\r\n    this.SelectedIndex = this.InitialIndex;\r\n  }\r\n\r\n  initialIndex\r\n  get InitialIndex(){\r\n    if (!this.initialIndex){\r\n      this.initialIndex = this.GetInitialIndex();\r\n    }\r\n    return this.initialIndex;\r\n  }\r\n  set InitialIndex(v){\r\n    this.initialIndex = v;\r\n  }\r\n\r\n  GetInitialIndex = () => {\r\n    var index = this.Items.indexOf(this.InitialItem);\r\n    return index !== -1 ? index : null;\r\n  }\r\n\r\n  selectedIndex = undefined\r\n  get SelectedIndex(){\r\n    return this.selectedIndex;\r\n  }\r\n  set SelectedIndex(v){\r\n    this.selectedIndex = v;\r\n    this.SelectedItem = this.GetSelectedItem();\r\n  }\r\n\r\n  selectedItem\r\n  get SelectedItem (){\r\n    if (!this.selectedItem){\r\n      this.selectedItem = this.GetSelectedItem();\r\n    }\r\n    return this.selectedItem;\r\n  }\r\n  set SelectedItem (v) {\r\n    this.selectedItem = v;\r\n    if (this.OnSelectedItemChanged){\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItem = () => {\r\n    var index = this.SelectedIndex;\r\n    if (index === -1) return undefined;\r\n    return this.Items[index];\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder(){\r\n    if (!this.placeholder){\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v){\r\n    this.placeholder = v;\r\n  }\r\n\r\n  CanClear = false\r\n\r\n  Clear = () => {\r\n    this.SelectedIndex = null\r\n  }\r\n  \r\n  get DivStyle() {\r\n    return this.CanClear ? { \r\n      position: 'relative', \r\n      padding: '0 22px 0 0' \r\n    } : {};\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class FloatItemVM {\r\n  location\r\n\r\n  className\r\n  getClassName = () => {\r\n    if (!this.className){\r\n      this.className = `float ${this.location}`;\r\n    }\r\n    return this.className\r\n  }\r\n}","import FloatItemVM from \"./FloatItemVM\";\r\n\r\nexport const get = (loc) => {\r\n  var qI = new FloatItemVM();\r\n  qI.location = loc;\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport * as floatItemVMUtil from './FloatItemVMUtil'\r\n\r\nclass FloatItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = floatItemVMUtil.get('top right', 'Test')\r\n    }else{\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className={data.getClassName()}>{this.getWrapperContent()}</span>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(FloatItemView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { SelectVM } from \"./SelectVM\";\r\nimport * as floatItemVMUtil from '../float/FloatItemVMUtil'\r\nimport FloatItemView from \"../float/FloatItemView\";\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nconst { Option } = Select;\r\n\r\nclass SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new SelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var className = this.props.className ? this.props.className : ''\r\n    var style = this.props.style ? this.props.style : { width: '100%' };\r\n    var { Placeholder, Items, SelectedIndex, InitialIndex } = data;\r\n\r\n    if (SelectedIndex === -1) {\r\n      SelectedIndex = InitialIndex;\r\n      data.InitialIndex = -1;\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined) {\r\n        id = genUtil.randomId();\r\n      } else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    var floatElem = ''\r\n    if (data.CanClear) {\r\n      var floatItemStore = floatItemVMUtil.get('right')\r\n      floatItemStore.wrapper = <Button size='small' type='primary'\r\n        onClick={data.Clear}>x</Button>\r\n\r\n      floatElem = <FloatItemView store={floatItemStore} />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={className}\r\n          style={data.DivStyle} >\r\n          {floatElem}\r\n          <Select style={style}\r\n            showSearch\r\n            placeholder={Placeholder}\r\n            optionFilterProp=\"children\"\r\n            onChange={this.onValueChange}\r\n            value={SelectedIndex}\r\n            filterOption={(input, option) =>\r\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            }\r\n            open={data.CanOpen && data.Open}\r\n            onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n          >\r\n            {elems}\r\n          </Select>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(SelectView)","export const inside = 'inside'\r\nexport const lower = 'lower'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ReplaceRowLocationFactoryUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport * as lt from './RRLF_LocationType'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance\r\n}\r\n\r\nexport default class ReplaceRowLocationFactory {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Location: observable,\r\n    })\r\n  }\r\n\r\n  ReferenceRow\r\n  Location = lt.inside\r\n\r\n  get Color(){\r\n    return util.GetColor(this);\r\n  }\r\n\r\n  get ButtonStyle(){\r\n    return {\r\n      width: 50,\r\n      backgroundColor: this.Color,\r\n      border: 'none'\r\n    };\r\n  }\r\n\r\n  ToggleLocation = () =>{\r\n    switch (this.Location) {\r\n      case lt.inside:\r\n        this.Location = lt.lower;\r\n        break;\r\n      case lt.lower:\r\n        this.Location = lt.inside;\r\n        break;\r\n    }\r\n  }\r\n}","import * as lt from './RRLF_LocationType'\r\n\r\nexport const GetColor = (v) => {\r\n  switch (v.Location) {\r\n    case lt.inside:\r\n      return \"#52c41a\";\r\n    case lt.lower:\r\n      return \"#faad14\";\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport TextView from '../../../../text/TextView';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil';\r\nimport * as util from './MassRowUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport { EntFilter } from '../../filter/EntFilter';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport MultiSelectView from '../../../../select/MultiSelectView';\r\nimport { Col, Row, Space, Button } from 'antd';\r\nimport EntHoverVM from '../../../../hover/EntHoverVM';\r\nimport EntHoverView from '../../../../hover/EntHoverView';\r\nimport { DownCircleOutlined, EnterOutlined, UpCircleOutlined } from '@ant-design/icons';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport ReplaceRowLocationFactory from './location/ReplaceRowLocationFactory';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport InputView from '../../../../input/InputView';\r\nimport * as mif from '../item/MassItemField'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class MassRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      rank: observable,\r\n      isShowSub: observable,\r\n      isHaveSub: observable,\r\n      IsToolVisible: observable,\r\n      SubItems: observable,\r\n      IsModalVisible: observable,\r\n      title: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  supItem\r\n  get SupItem() {\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v) {\r\n    this.supItem = v;\r\n    this.CurrentList = undefined;\r\n    this.Rank = undefined;\r\n  }\r\n\r\n  currentList\r\n  get CurrentList() {\r\n    if (!this.currentList) {\r\n      this.currentList = this.SupItem ? this.SupItem.SubItems : this.Table.MainRows;\r\n    }\r\n    return this.currentList;\r\n  }\r\n  set CurrentList(v) {\r\n    this.currentList = v;\r\n  }\r\n\r\n  get Table() {\r\n    return this.Dict;\r\n  }\r\n\r\n  SubItems = []\r\n\r\n  get AllItems() {\r\n    var list = [];\r\n    list.push(this);\r\n    this.SubItems.forEach(x => {\r\n      list.push.apply(list, x.AllItems)\r\n    });\r\n    return list;\r\n  }\r\n\r\n  Cells = []\r\n\r\n  get Items() {\r\n    return this.Cells.reduce((a, b) => a.concat(b.Items), []);\r\n  }\r\n\r\n  massGroupItem\r\n  get MassGroupItem() {\r\n    return this.massGroupItem;\r\n  }\r\n  set MassGroupItem(v) {\r\n    this.massGroupItem = v;\r\n    if (v) {\r\n      var title = v.GetItem(this.FullValue).Title;\r\n      this.Title = title;\r\n    }\r\n  }\r\n\r\n  get Field() {\r\n    return this.MassGroupItem.Field;\r\n  }\r\n\r\n  ReplaceMGI\r\n\r\n  get OrderMGI() {\r\n    return this.ReplaceMGI ? this.ReplaceMGI : this.MassGroupItem;\r\n  }\r\n\r\n  subMassGroupItem\r\n  get SubMassGroupItem() {\r\n    if (!this.subMassGroupItem) {\r\n      this.subMassGroupItem = util.GetSubMassGroupItem(this);\r\n    }\r\n    return this.subMassGroupItem\r\n  }\r\n  set SubMassGroupItem(v) {\r\n    this.subMassGroupItem = v;\r\n  }\r\n\r\n  subFields\r\n  get SubFields() {\r\n    if (!this.subFields) {\r\n      this.subFields = util.GetSubFields(this);\r\n    }\r\n    return this.subFields;\r\n  }\r\n  set SubFields(v) {\r\n    this.subFields = v;\r\n  }\r\n\r\n  TempSubFields\r\n\r\n  isShowSub = true\r\n  get IsShowSub() {\r\n    return this.isShowSub;\r\n  }\r\n  set IsShowSub(v) {\r\n    this.isShowSub = v;\r\n    this.ToggleButtonContentVM.Content = util.GetToggleButtonContent(this);\r\n  }\r\n\r\n  toggleButtonContent\r\n  get ToggleButtonContent() {\r\n    if (!this.toggleButtonContent) {\r\n      this.toggleButtonContent = util.GetToggleButtonContent(this);\r\n    }\r\n    return this.toggleButtonContent;\r\n  }\r\n  set ToggleButtonContent(v) {\r\n    this.toggleButtonContent = v;\r\n  }\r\n\r\n  toggleButtonContentVM\r\n  get ToggleButtonContentVM() {\r\n    if (!this.toggleButtonContentVM) {\r\n      var obj = this.toggleButtonContentVM = textVMUtil.get(this.ToggleButtonContent);\r\n      obj.OnSetContent = (v) => this.ToggleButtonContent = v;\r\n    }\r\n    return this.toggleButtonContentVM;\r\n  }\r\n\r\n  rank = undefined\r\n  get Rank() {\r\n    if (this.rank === undefined) {\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v) {\r\n    this.rank = v;\r\n    this.SubItems.forEach(x => x.Rank = undefined);\r\n  }\r\n\r\n  isHaveSub = undefined\r\n  get IsHaveSub() {\r\n    if (!this.isHaveSub) {\r\n      this.isHaveSub = util.GetIsHaveSub(this);\r\n    }\r\n    return this.isHaveSub;\r\n  }\r\n  set IsHaveSub(v) {\r\n    this.isHaveSub = v;\r\n  }\r\n\r\n  get Style() {\r\n    return util.GetStyle(this);\r\n  }\r\n\r\n  IsToolVisible = false\r\n\r\n  subFieldSelectVM\r\n  get SubFieldSelectVM() {\r\n    if (!this.subFieldSelectVM) {\r\n      this.subFieldSelectVM = util.GetSubFieldSelectVM(this);\r\n    }\r\n    return this.subFieldSelectVM;\r\n  }\r\n\r\n  title = undefined\r\n  get Title() {\r\n    // if (!this.title) {\r\n    //   util.Handle_Title(this);\r\n    // }\r\n    return this.title;\r\n  }\r\n  set Title(v) {\r\n    this.title = v;\r\n    this.TitleVM.Content = v;\r\n  }\r\n\r\n  get LocationStorageList() {\r\n    return this.Table.AllRows;\r\n  }\r\n\r\n  locationSelectVM\r\n  get LocationSelectVM() {\r\n    if (!this.locationSelectVM) {\r\n      this.locationSelectVM = util.GetLocationSelectVM(this);\r\n    }\r\n    return this.locationSelectVM;\r\n  }\r\n\r\n  titleVM\r\n  get TitleVM() {\r\n    if (!this.titleVM) {\r\n      this.titleVM = textVMUtil.get(this.Title, 'tiêu đề');\r\n    }\r\n    return this.titleVM;\r\n  }\r\n\r\n  // Value lồng giữa Row hiện tại và SupRow\r\n  // Ví dụ: concrete__Tầng 6__Dầm\r\n  FullValue\r\n\r\n  GetCellByColumn = (col) => {\r\n    var index = this.Cells.findIndex(x => x.Column === col);\r\n    return index !== -1 ? this.Cells[index] : undefined;\r\n  }\r\n\r\n  UpdateData = () => {\r\n    this.Rank = util.GetRank(this);\r\n    this.IsHaveSub = util.GetIsHaveSub(this);\r\n\r\n    this.SubItems = util.Order(this.SubItems);\r\n    this.SubItems.forEach(x => x.UpdateData());\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    this.IsShowSub = !this.IsShowSub;\r\n  }\r\n\r\n  SetSubFields = () => {\r\n    var tempSubFields = this.TempSubFields ? this.TempSubFields : [];\r\n\r\n    var isSame = true;\r\n    if (this.SubFields.length !== tempSubFields.length) {\r\n      isSame = false;\r\n    } else {\r\n      this.SubFields.forEach((x, i) => {\r\n        if (isSame && x !== tempSubFields[i]) {\r\n          isSame = false;\r\n        }\r\n      })\r\n    }\r\n    if (isSame) return;\r\n    this.SubFields = tempSubFields;\r\n\r\n    var filter = new EntFilter();\r\n    filter.ValueType = fvt.bystring;\r\n    filter.StringFilterType = sft.byequal;\r\n    filter.Values = [this.FullValue];\r\n\r\n    var supMgi = this.MassGroupItem;\r\n\r\n    var mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n\r\n    var subMgis = mgc.Items = tempSubFields.map(x => mgiUtil.get(x, null, mgc));\r\n\r\n    var subComps = supMgi.SubComponents;\r\n    if (this.SubMassGroupComponent) {\r\n      var index = subComps.indexOf(this.SubMassGroupComponent);\r\n      subComps[index] = mgc;\r\n    } else {\r\n      subComps.push(mgc);\r\n    }\r\n\r\n    this.SubMassGroupComponent = mgc;\r\n    this.SubItems = [];\r\n    this.SubMassGroupItem = undefined;\r\n\r\n    if (subMgis.length !== 0) {\r\n      var table = this.Table;\r\n      this.Items.forEach(x => {\r\n        // Xử lý Item theo ColumnField: Project ... (single value)\r\n        // hoặc theo Phase (multiple values)\r\n        switch (table.ColumnField) {\r\n          case mif.Phase:\r\n            x.ValidPhasesByInput.forEach(y => \r\n              table.HandleItem(x, y, mgc, this));\r\n            break;\r\n          default:\r\n            table.HandleItem(x, x.GetValue(table.ColumnField), mgc, this);\r\n            break;\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  MoveUp = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (0 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index - 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index - 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  MoveDown = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (list.length - 1 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index + 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index + 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  AddSub = () => {\r\n    util.Add(this, this.Table);\r\n  }\r\n\r\n  Delete = () => {\r\n    var supItem = this.SupItem;\r\n    var list = this.CurrentList;\r\n\r\n    if (this.IsCreatedByUser) {\r\n      this.MassGroupItem.GetItem(this.FullValue).Delete();\r\n    } else {\r\n      this.MassGroupItem.AddNotIncludeValue(this.FullValue);\r\n    }\r\n\r\n    list.splice(this.Index, 1);\r\n\r\n    if (supItem) {\r\n      supItem.Cells.forEach(x => {\r\n        x.SubCells = x.GetSubCells();\r\n\r\n        var totalValues = x.SubCells ?\r\n          x.SubCells.map(x => x.TotalValue).filter(x => x) : [];\r\n        x.TotalValue = totalValues.reduce((a, b) => a + b, 0);\r\n\r\n        x.ContentVM.Content = x.ValueString;\r\n      })\r\n    }\r\n  }\r\n\r\n  replaceFactory\r\n  get ReplaceFactory() {\r\n    if (!this.replaceFactory) {\r\n      this.replaceFactory = new ReplaceRowLocationFactory();\r\n    }\r\n    return this.replaceFactory;\r\n  }\r\n\r\n  ReplaceOK = () => {\r\n    var factory = this.ReplaceFactory;\r\n    var refRow = factory.ReferenceRow;\r\n\r\n    if (!refRow) return;\r\n\r\n    var loc = factory.Location;\r\n    if ((refRow === this && loc === rrlf_lt.lower) ||\r\n      (refRow === this.SupItem && loc === rrlf_lt.inside)) {\r\n      return\r\n    }\r\n\r\n    this.Replace(refRow, loc);\r\n\r\n    factory.Location = rrlf_lt.inside;\r\n  }\r\n\r\n  Replace = (refRow, loc) => {\r\n    // Save data\r\n    var oldMgi = this.MassGroupItem;\r\n    var supRow = undefined;\r\n    var newMgi = undefined;\r\n\r\n    switch (loc) {\r\n      case rrlf_lt.inside:\r\n        supRow = refRow;\r\n        break;\r\n      case rrlf_lt.lower:\r\n        supRow = refRow.SupItem;\r\n        break;\r\n    }\r\n\r\n    //var newMgi = supRow ? supRow.SubMassGroupItem : this.Table.MainMGI;\r\n    var newMgi = supRow ?\r\n      (supRow.SubMassGroupItem ? supRow.SubMassGroupItem :\r\n        util.CreateSubMassGroupItem(supRow))\r\n      : this.Table.MainMGI;\r\n    oldMgi.GetItem(this.FullValue).NewMGI = newMgi;\r\n\r\n    this.ReplaceMGI = newMgi;\r\n    this.CurrentList.splice(this.Index, 1);\r\n\r\n    this.SupItem = supRow;\r\n    var list = this.CurrentList;\r\n    list.push(this);\r\n\r\n    this.IsShowSubFieldSelect = false;\r\n  }\r\n\r\n  IsModalVisible = false\r\n\r\n  OpenModal = () => {\r\n    this.IsModalVisible = true\r\n\r\n    this.TitleVM.Content = this.Title;\r\n\r\n    var subFieldSelectVM = this.SubFieldSelectVM;\r\n    subFieldSelectVM.InitialItems = this.SubFields;\r\n\r\n    var locSelectVM = this.LocationSelectVM;\r\n    locSelectVM.Items = this.LocationStorageList\r\n    locSelectVM.InitialItem = undefined;\r\n  }\r\n\r\n  ModalOK = () => {\r\n    this.IsModalVisible = false;\r\n    this.SetSubFields();\r\n    this.ReplaceOK();\r\n\r\n    var title = this.TitleVM.Content;\r\n    this.Title = title;\r\n    this.MassGroupItem.GetItem(this.FullValue).Title = title;\r\n  }\r\n\r\n  ModalCancel = () => {\r\n    this.IsModalVisible = false;\r\n  }\r\n\r\n  get ModalElement() {\r\n    var factory = this.ReplaceFactory;\r\n\r\n    return <Modal title={this.Title} visible={this.IsModalVisible}\r\n      onOk={this.ModalOK} onCancel={this.ModalCancel}>\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex=\"165px\">\r\n          <b> Tiêu đề:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <InputView store={this.TitleVM} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {!this.IsCreatedByUser ? <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex=\"165px\">\r\n          <b> Thiết lập phân nhóm:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <MultiSelectView store={this.SubFieldSelectVM} />\r\n        </Col>\r\n      </Row> : ''}\r\n\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex=\"165px\">\r\n          <b> Đổi vị trí:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <Row>\r\n            <Col flex='auto'>\r\n              <SelectView store={this.LocationSelectVM} />\r\n            </Col>\r\n            <Col>\r\n              <Button type='primary' size='small'\r\n                style={factory.ButtonStyle} onClick={factory.ToggleLocation}\r\n              >{factory.Location}</Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Modal>\r\n  }\r\n\r\n  get HoverToolElement() {\r\n    var obj = new EntHoverVM();\r\n    obj.Element = this.ToolElement;\r\n    return <EntHoverView store={obj} style={{ display: 'flex', marginLeft: 20 }} />\r\n  }\r\n\r\n  get ToolElement() {\r\n    return <>\r\n      <Button size='small' type='primary'\r\n        style={{ backgroundColor: '#52c41a', border: 'none' }}\r\n        onClick={this.MoveUp}>\r\n        <UpCircleOutlined />\r\n      </Button>\r\n      <Button size='small' type='primary'\r\n        style={{ backgroundColor: '#52c41a', border: 'none' }}\r\n        onClick={this.MoveDown}>\r\n        <DownCircleOutlined />\r\n      </Button>\r\n\r\n      <Button type='primary' size='small'\r\n        style={{ backgroundColor: '#faad14', border: 'none' }}\r\n        onClick={this.OpenModal}>...</Button>\r\n\r\n      <Button size='small' type='primary'\r\n        style={{ backgroundColor: '#52c41a', border: 'none' }}\r\n        onClick={this.AddSub}>+</Button>\r\n      <Button type='primary' size='small' danger\r\n        onClick={this.Delete}>x</Button>\r\n    </>\r\n  }\r\n}","import { PMData } from \"../../../single/model/PMData\";\r\nimport MassRow from \"./MassRow\";\r\nimport * as multiSelectUtil from '../../../../select/MultiSelectVMUtil';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport * as mgi_iUtil from './rowgroup/MGI_ItemUtil'\r\nimport * as mgii_ct from './rowgroup/MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../util/generalUtil';\r\nimport { EntFilter } from \"../../filter/EntFilter\";\r\nimport MassGroupComponent from \"./rowgroup/MassGroupComponent\";\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mif from '../item/MassItemField'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassRow();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  return q.SupItem ? q.SupItem.Rank + 1 : 0;\r\n}\r\n\r\nexport const GetStyle = (q) => {\r\n  return {\r\n    display: 'flex',\r\n    marginLeft: q.Rank * 20\r\n  }\r\n}\r\n\r\nexport const GetIsHaveSub = (q) => {\r\n  return q.SubItems.length !== 0;\r\n}\r\n\r\nexport const GetToggleButtonContent = (q) => {\r\n  return q.IsShowSub ? '-' : '+';\r\n}\r\n\r\nexport const GetSubFieldSelectVM = (q) => {\r\n  var storageList = pmData().MassItemFields;\r\n  var obj = multiSelectUtil.get(storageList, undefined);\r\n  obj.Placeholder = 'chọn phân nhóm'\r\n  obj.OnSelectedItemChanged = (v) => q.TempSubFields = v;\r\n  return obj;\r\n}\r\n\r\nexport const Order = (list) => {\r\n  if (list.length === 0) return list;\r\n\r\n  var firstRow = list[0]\r\n  var mgi = firstRow.OrderMGI;\r\n  if (!mgi.IsHaveValueOrder) return list;\r\n\r\n  var orderValues = mgi.OrderValues;\r\n  return list.sort((a, b) => {\r\n    return orderValues.indexOf(a.FullValue) - orderValues.indexOf(b.FullValue);\r\n  });\r\n}\r\n\r\n// export const GetTitle = (q) => {\r\n//   // Kiểm tra thông tin tầng điển hình trong Cells\r\n\r\n//   return q.Name;\r\n// }\r\n\r\nexport const Handle_Title = (q) => {\r\n  var field = q.MassGroupItem.Field;\r\n  if (field !== mif.level) {\r\n    q.Title = q.Name;\r\n  } else {\r\n    // Xử lý phần tiêu đề của Row dựa trên Name và thông tin Tầng điển hình\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = q.Cells.length;\r\n\r\n    const handle_LS = (ls) => {\r\n      if (ls.Description) {\r\n        q.Title = ls.Description;\r\n      } else {\r\n        ls.OnGetLevelStorageList_Funcs.push(() => {\r\n          q.Title = ls.Description;\r\n        })\r\n      }\r\n    }\r\n\r\n    const handle_Val = (val) => {\r\n      handledCount++;\r\n      list.push.apply(list, val);\r\n      if (handledCount === count) {\r\n        if (list.length === 1) {\r\n          handle_LS(list[0]);\r\n        } else {\r\n          q.Title = q.Name;\r\n        }\r\n      }\r\n    }\r\n\r\n    q.Cells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        x.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n          handle_Val(x.TLS_LevelGroups);\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetLocationSelectVM = (q) => {\r\n  var obj = selectUtil.get([], undefined);\r\n  obj.Placeholder = 'chọn vị trí'\r\n  obj.TitleRender = (item) => {\r\n    var marginLeft = item.Rank * 15;\r\n    return <div\r\n      style={{ marginLeft }}>\r\n      {item.Title}\r\n    </div>\r\n  }\r\n  obj.OnSelectedItemChanged = (v) => {\r\n    var factory = q.ReplaceFactory;\r\n    factory.ReferenceRow = v;\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport const GetSubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].MassGroupItem;\r\n}\r\n\r\nexport const GetSubFields = (q) => {\r\n  var subMGI = q.SubMassGroupItem;\r\n  if (!subMGI) return [];\r\n  var mgis = subMGI.SupComponent.Items;\r\n\r\n  var lastValidIndex = -1;\r\n  var isValidHandle = true\r\n  mgis.forEach((x, i) => {\r\n    if (isValidHandle && x.HaveMassItemSubComponents.length === 0) {\r\n      lastValidIndex = i;\r\n    } else {\r\n      isValidHandle = false;\r\n    }\r\n  })\r\n\r\n  var currentIndex = mgis.indexOf(q.MassGroupItem);\r\n  if (lastValidIndex === -1) return [subMGI.Field];\r\n  var fields = mgis.filter((x, i) =>\r\n    (currentIndex === -1 || currentIndex < i) &&\r\n    i <= lastValidIndex)\r\n    .map(x => x.Field);\r\n  return fields;\r\n}\r\n\r\nexport const CreateSubMassGroupItem = (q) => {\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bystring;\r\n  filter.StringFilterType = sft.byequal;\r\n  filter.Values = [q.FullValue];\r\n\r\n  var supMgi = q.MassGroupItem;\r\n\r\n  var mgc = undefined;\r\n  var mgcIndex = supMgi.SubComponents\r\n    .findIndex(x => genUtil.IsSameValues(x.Filter.Values, filter.Values));\r\n\r\n  if (mgcIndex !== -1) {\r\n    mgc = supMgi.SubComponents[mgcIndex]\r\n  } else {\r\n    mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n    supMgi.SubComponents.push(mgc);\r\n  }\r\n\r\n  var mgi = mgiUtil.get(null, null, mgc);\r\n  mgc.Items = [mgi];\r\n\r\n  q.SubMassGroupItem = mgi;\r\n  return mgi;\r\n}\r\n\r\nexport const Add = (supRow, table) => {\r\n  var mgi = supRow ?\r\n    (supRow.SubMassGroupItem ? supRow.SubMassGroupItem :\r\n      CreateSubMassGroupItem(supRow))\r\n    : table.MainMGI;\r\n\r\n  var mgi_I = mgi_iUtil.create(mgi, mgii_ct.byuser);\r\n  mgi.Items.push(mgi_I);\r\n\r\n  var row = get(mgi_I.Value, table);\r\n  row.FullValue = mgi_I.Value;\r\n  row.IsCreatedByUser = true;\r\n  row.MassGroupItem = mgi;\r\n\r\n  row.SupItem = supRow;\r\n  row.CurrentList.push(row);\r\n  return row;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as mif from '../item/MassItemField'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as util from './MassCellUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueColor: observable,\r\n      tdBgColor: observable,\r\n      totalValue: observable,\r\n      isHaveWarning : observable, \r\n      tls_LevelGroup_Descriptions : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Column.Index;\r\n  }\r\n\r\n  items = []\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  unit\r\n  get Unit() {\r\n    if (!this.unit) {\r\n      this.unit = this.GetUnit();\r\n    }\r\n    return this.unit;\r\n  }\r\n  set Unit(v) {\r\n    this.unit = v;\r\n  }\r\n\r\n  GetUnit = () => {\r\n    if (this.SubCells) {\r\n      var unit = undefined;\r\n      this.SubCells.forEach(x => {\r\n        if (x.Unit) {\r\n          unit = x.Unit;\r\n        }\r\n      })\r\n      return unit;\r\n    }\r\n    return this.Items && this.Items.length !== 0 ? this.Items[0].Unit : undefined;\r\n  }\r\n\r\n  unitVM\r\n  get UnitVM() {\r\n    if (!this.unitVM) {\r\n      this.unitVM = textVMUtil.get(this.Unit);\r\n      this.unitVM.OnSetContent = (v) => this.Unit = v;\r\n    }\r\n    return this.unitVM;\r\n  }\r\n\r\n  OnGet_TotalValue_Func_Dict = []\r\n  set Get_TotalValue(v) {\r\n    this.OnGet_TotalValue_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  totalValue = undefined\r\n  get TotalValue() {\r\n    // Chỉnh sửa Value thành FullValue (chứa khối lượng tầng điển hình)\r\n    //this.TotalValue = this.GetTotalValue();\r\n    if (!this.totalValue) {\r\n      util.Handle_TotalValue(this);\r\n    }\r\n    return this.totalValue;\r\n  }\r\n  set TotalValue(v) {\r\n    this.totalValue = v;\r\n    this.Get_TotalValue = true;\r\n\r\n    // Thiết lập giá trị Cell\r\n    this.ContentVM.Content = this.ValueString;\r\n\r\n    // Thiết lập phần màu sắc đối với Phase\r\n    if (this.IsHaveVCS_Item) {\r\n      this.VCS_Item = util.GetVCS_Item(this);\r\n    }\r\n  }\r\n\r\n  contentVM\r\n  get ContentVM() {\r\n    if (!this.contentVM) {\r\n      this.contentVM = textVMUtil.get(this.ValueString);\r\n    }\r\n    return this.contentVM;\r\n  }\r\n\r\n  get ValueString() {\r\n    if (this.Row.IsCreatedByUser) return '';\r\n    var totalValue = this.TotalValue;\r\n    if (!totalValue) return '';\r\n\r\n    var unit = this.Unit ? this.Unit : '';\r\n    //return `${totalValue.toFixed(2)} ${unit}`;\r\n\r\n    var formatValue = totalValue.toLocaleString('en-US', {maximumFractionDigits:2});\r\n    return `${formatValue} ${unit}`;\r\n  }\r\n\r\n  subCells\r\n  get SubCells() {\r\n    if (!this.subCells) {\r\n      this.subCells = this.GetSubCells();\r\n    }\r\n    return this.subCells;\r\n  }\r\n  set SubCells(v) {\r\n    this.subCells = v;\r\n  }\r\n\r\n  GetSubCells = () => {\r\n    var subRows = this.Row.SubItems;\r\n    if (subRows && subRows.length !== 0) {\r\n      var col = this.Column;\r\n      return subRows.map(x => x.GetCellByColumn(col))\r\n        .filter(x => x !== undefined);\r\n    }\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = util.GetMassType(this);\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(`${this.Column.Name} - ${this.Row.Name} - ${this.TotalValue}`)\r\n  }\r\n\r\n  UpdateData = () => {\r\n    if (this.Row.IsCreatedByUser) {\r\n      return;\r\n    }\r\n\r\n    this.SubCells = this.GetSubCells();\r\n\r\n    this.Unit = this.GetUnit();\r\n    this.MassType = util.GetMassType(this);\r\n    this.IsHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n  }\r\n\r\n  ShowDetail = () => {\r\n    var isHash = true;\r\n    var url = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/massdetail`;\r\n    var getUrl = (v) => `${url}/${v}`;\r\n    var openTabFunc = (v) =>\r\n      window.open(getUrl(v), \"_blank\");\r\n\r\n    if (!this.viewDetailId) {\r\n      this.GetViewDetailId(data => {\r\n        var _id = this.viewDetailId = data._id;\r\n        openTabFunc(_id);\r\n      })\r\n    } else {\r\n      openTabFunc(this.viewDetailId);\r\n    }\r\n  }\r\n\r\n  viewDetailId\r\n\r\n  get AllItems() {\r\n    if (this.SubCells) {\r\n      return this.SubCells.map(x => x.Items).reduce((a, b) => a.concat(b), []);\r\n    }\r\n    return this.Items;\r\n  }\r\n\r\n  isHaveVCS_Item\r\n  get IsHaveVCS_Item() {\r\n    if (!this.isHaveVCS_Item) {\r\n      this.isHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n    }\r\n    return this.isHaveVCS_Item;\r\n  }\r\n  set IsHaveVCS_Item(v) {\r\n    this.isHaveVCS_Item = v;\r\n  }\r\n\r\n  vcs_Item\r\n  get VCS_Item() {\r\n    return this.vcs_Item;\r\n  }\r\n  set VCS_Item(v) {\r\n    this.vcs_Item = v;\r\n\r\n    this.ValueColor = util.GetValueColor(this);\r\n    this.TDBgColor = util.GetTDBgColor(this)\r\n  }\r\n\r\n  valueColor = undefined\r\n  get ValueColor() {\r\n    return this.valueColor;\r\n  }\r\n  set ValueColor(v) {\r\n    this.valueColor = v\r\n  }\r\n\r\n  tdBgColor = undefined\r\n  get TDBgColor() {\r\n    return this.tdBgColor;\r\n  }\r\n  set TDBgColor(v) {\r\n    this.tdBgColor = v;\r\n  }\r\n\r\n  get AStyle() {\r\n    return {\r\n      color: this.ValueColor,\r\n      fontWeight: 'bold'\r\n    }\r\n  }\r\n\r\n\r\n  get TDStyle() {\r\n    return {\r\n      backgroundColor: this.TDBgColor\r\n    }\r\n  }\r\n\r\n  ApiData = () => {\r\n    var massIds = this.AllItems.map(x => x._id);\r\n    return {\r\n      massType: this.MassType,\r\n      massIds\r\n    };\r\n  }\r\n\r\n  GetViewDetailId = (handle) => {\r\n    var apiData = this.ApiData();\r\n    var url = \"https://api.bimdev.vn/api/hbdv/updatemass\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => handle(data))\r\n  }\r\n\r\n  OnGet_TLS_LevelGroups_Func_Dict = []\r\n  set Get_TLS_LevelGroups(v) {\r\n    this.OnGet_TLS_LevelGroups_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  tls_LevelGroups\r\n  get TLS_LevelGroups() {\r\n    if (!this.tls_LevelGroups) {\r\n      util.Handle_TLS_LevelGroups(this);\r\n    }\r\n    return this.tls_LevelGroups;\r\n  } set TLS_LevelGroups(v) {\r\n    this.tls_LevelGroups = v;\r\n    this.Get_TLS_LevelGroups = true;\r\n  }\r\n\r\n  isHaveWarning = undefined\r\n  get IsHaveWarning(){\r\n    if (this.isHaveWarning === undefined){\r\n      this.isHaveWarning = util.GetIsHaveWarning(this);\r\n    }\r\n    return this.isHaveWarning;\r\n  } set IsHaveWarning(v){\r\n    this.isHaveWarning = v;\r\n  }\r\n\r\n  tls_LevelGroup_Descriptions = undefined\r\n  get TLS_LevelGroup_Descriptions(){\r\n    if (!this.tls_LevelGroup_Descriptions){\r\n      util.Handle_TLS_LevelGroup_Descriptions(this);\r\n    }\r\n    return this.tls_LevelGroup_Descriptions;\r\n  } set TLS_LevelGroup_Descriptions(v){\r\n    this.tls_LevelGroup_Descriptions = v;\r\n  }\r\n}","import Column from \"antd/lib/table/Column\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassCell from \"./MassCell\"\r\nimport * as mif from '../item/MassItemField'\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (col, row, dict) => {\r\n  var qI = new MassCell();\r\n  qI.Column = col;\r\n  qI.Row = row;\r\n  qI.Dict = dict;\r\n\r\n  col.Cells.push(qI);\r\n  row.Cells.push(qI);\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetIsHaveVCS_Item = (q) => {\r\n  return q.Dict.ColumnField === mif.Phase\r\n    && pmData().MassResultComp.Phases.length === 2\r\n    && q.ColumnIndex === 1;\r\n}\r\n\r\nexport const GetValueColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return '#FFFFFF';\r\n  } else {\r\n    return '#1890ff';\r\n  }\r\n}\r\n\r\nexport const GetTDBgColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return q.VCS_Item.Color;\r\n  } else {\r\n    return '#FFFFFF';\r\n  }\r\n}\r\n\r\n// Liên quan tới việc lấy TotalValue\r\nexport const GetVCS_Item = (q) => {\r\n  var list = pmData().VersionCompareSetting.Items;\r\n\r\n  var cells = q.Row.Cells;\r\n  var compareIndex = cells.findIndex(x => x.ColumnIndex === 0);\r\n  var compareItem = cells[compareIndex];\r\n\r\n  const getItem = () => {\r\n    var ratio = q.TotalValue / compareItem.TotalValue;\r\n    var index = list\r\n      .findIndex(x => filterUtil.IsValid(x.Filter, ratio));\r\n    return index !== -1 ? list[index] : undefined;\r\n  }\r\n\r\n  if (compareItem.TotalValue !== undefined){\r\n    return getItem();\r\n  } else {\r\n    genUtil.Add(compareItem.OnGet_TotalValue_Func_Dict,\r\n      q.VCS_Item = getItem())\r\n  }\r\n}\r\n\r\nexport const GetMassType = (q) => {\r\n  var massType = undefined\r\n  if (q.SubCells) {\r\n    var isPending = true;\r\n    q.SubCells.forEach(x => {\r\n      if (isPending && x.MassType) {\r\n        massType = x.MassType;\r\n        isPending = false;\r\n      }\r\n    })\r\n  } else {\r\n    if (q.Items && q.Items.length > 0) {\r\n      massType = q.Items[0].MassType;\r\n    }\r\n  }\r\n  return massType;\r\n}\r\n\r\nexport const Handle_TLS_LevelGroups = (q) => {\r\n  var list = [];\r\n  var handledCount = 0;\r\n  var count = q.SubCells ?\r\n    q.SubCells.length : q.Items.length;\r\n\r\n  const checkadd_Val = (val, list) => {\r\n    if (list.findIndex(x => x.id === val.id) === -1) {\r\n      list.push(val);\r\n    }\r\n  }\r\n\r\n  const handle_Val = (val) => {\r\n    handledCount++;\r\n    if (val) {\r\n      if (Array.isArray(val)) {\r\n        val.forEach(x => checkadd_Val(x, list));\r\n      } else {\r\n        checkadd_Val(val, list)\r\n      }\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroups = list;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        genUtil.Add(x.OnGet_TLS_LevelGroups_Func_Dict,\r\n          () => handle_Val(x.TLS_LevelGroup));\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      if (x.TLS_LevelGroup) {\r\n        handle_Val(x.TLS_LevelGroup);\r\n      } else {\r\n        genUtil.Add(x.OnGet_TLS_LevelGroup_Func_Dict,\r\n          () => handle_Val(x.TLS_LevelGroup));\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const Handle_TotalValue = (q) => {\r\n  var isDe\r\n  if (q.Row.Index === 1 && q.Row.Title === 'Sàn') {\r\n\r\n  }\r\n\r\n  var checkedList = [];\r\n  var totalVal = 0;\r\n  var handledCount = 0;\r\n  var count = q.SubCells ?\r\n    q.SubCells.length : q.Items.length;\r\n\r\n  const handle_Val = (val) => {\r\n    handledCount++;\r\n    totalVal += val;\r\n    checkedList.push(val);\r\n\r\n    if (handledCount === count) {\r\n      q.TotalValue = totalVal;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TotalValue) {\r\n        handle_Val(x.TotalValue)\r\n      } else {\r\n        genUtil.Add(x.OnGet_TotalValue_Func_Dict,\r\n          () => handle_Val(x.FullValue));\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      if (x.FullValue) {\r\n        handle_Val(x.FullValue)\r\n      } else {\r\n        genUtil.Add(x.OnGet_FullValue_Func_Dict,\r\n          () => handle_Val(x.FullValue));\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetIsHaveWarning = (q) => {\r\n  if (q.Row.Field !== mif.level) {\r\n    return false\r\n  } else {\r\n    const getWarningFunc = (levelGroups) => {\r\n      return levelGroups.length !== 0;\r\n    }\r\n\r\n    if (q.TLS_LevelGroups) {\r\n      return getWarningFunc(q.TLS_LevelGroups);\r\n    } else {\r\n      genUtil.Add(q.OnGet_TLS_LevelGroups_Func_Dict,\r\n        () => {\r\n          q.IsHaveWarning = getWarningFunc(q.TLS_LevelGroups)\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup_Descriptions = (q) => {\r\n  var isDebug = false;\r\n  if (q.Row.SupItem.Index === 2 && q.Row.SupItem.SupItem.Index === 1) {\r\n    isDebug = true;\r\n  }\r\n\r\n  const handle_Val = (val, list, handledCount, count) => {\r\n    handledCount++;\r\n    if (list.indexOf(val) === -1) {\r\n      list.push(val);\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroup_Descriptions = list;\r\n    }\r\n  }\r\n\r\n  const getDescFunc = (levelGroups) => {\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = levelGroups.length\r\n\r\n    levelGroups.forEach(x => {\r\n      if (x.FullDescription) {\r\n        handle_Val(x.FullDescription, list, handledCount, count);\r\n      } else {\r\n        // Để false, xử lý nhiều Funcs hơn, nhưng thực thi thành công :v\r\n        genUtil.Add(x.OnGetLevelStorageList_Func_Dict, () => {\r\n          handle_Val(x.FullDescription, list, handledCount, count)\r\n        }, false)\r\n      }\r\n    })\r\n  }\r\n\r\n  if (q.TLS_LevelGroups) {\r\n    getDescFunc(q.TLS_LevelGroups)\r\n  } else {\r\n    q.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n      getDescFunc(q.TLS_LevelGroups)\r\n    })\r\n  }\r\n}","import * as mif from '../item/MassItemField'\r\nimport { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mt from '../MassType'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent'\r\nimport MassGroupItem from './rowgroup/MassGroupItem'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\n\r\nexport const GetMainMGC = (q) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  var mgi1 = mgiUtil.get(mif.MassType);\r\n  qI.Items = [mgi1];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMassGroupName = (q) => {\r\n  return q.MassGroupSetting ? q.MassGroupSetting.Name\r\n    : '';\r\n}\r\n\r\nexport const GetAllRows = (q) => {\r\n  var list = [];\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.AllItems)\r\n  });\r\n  return list;\r\n}\r\n\r\nexport const GetMainMGI = (q) => {\r\n  var qI = q.MainMGC?.Items[0];\r\n  qI.Table = q;\r\n  qI.SupRow = undefined;\r\n  return qI;\r\n}","export const elementfilter = \"elementfilter\";\r\nexport const massexport = \"massexport\";\r\nexport const massgroup = \"massgroup\";\r\nexport const typicallevel = \"typicallevel\";","import { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport default class Setting{\r\n  name\r\n  get Name(){\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    if (this.OnNameChanged){\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged){\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  SettingType\r\n\r\n  data\r\n  get Data(){\r\n    return this.data;\r\n  }\r\n  set Data(v){\r\n    this.data = v;\r\n    if (this.OnDataChanged){\r\n      this.OnDataChanged(v);\r\n    }\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    var {_id} = this;\r\n    var apiData = {_id};\r\n\r\n    var  url = \"https://api.bimdev.vn/api/hbs/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete setting successfully'))\r\n\r\n    this.Dict.Items.splice(this.Index, 1);\r\n\r\n    if (this.OnDelete){\r\n      this.OnDelete();\r\n    }\r\n\r\n    this.Dict.Input.EditItemId = undefined;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id : this._id,\r\n      projectId : this.Project._id,\r\n      settingType : this.SettingType,\r\n      name : this.Name,\r\n      description : this.Description,\r\n      data : this.Data.ApiData\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassGroupSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassGroupSettingData {\r\n  fields\r\n  get Fields(){\r\n    if (!this.fields){\r\n      this.fields = util.GetDefaultFields(this);\r\n    }\r\n    return this.fields;\r\n  }\r\n  set Fields(v){\r\n    this.fields = v;\r\n  }\r\n\r\n  AddNewField = () => {\r\n    var item = pmData().MassPropertyNames[0];\r\n    this.Fields.push(item);\r\n    return item;\r\n  }\r\n}","export const Discipline = \"Discipline\";\r\nexport const Category = \"Category\";\r\n\r\nexport const GetAll = () => {\r\n  return [ Discipline, Category ];\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassGroupSettingData from './MassGroupSettingData';\r\nimport * as mpn from '../../../entity/mass/MassPropertyName'\r\nimport * as massGroupCompUtil from '../../mass/table/rowgroup/MassGroupComponentUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingData();\r\n  qI.MassGroupComponent = massGroupCompUtil.get(q.massGroupComponent);\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassGroupSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultFields = () => {\r\n  return [ mpn.Category ]\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassGroupSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassGroupSettingDataUtil'\r\nimport MassGroupSetting from './MassGroupSetting';\r\nimport { PMData } from '../../../single/model/PMData';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/mg/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as util from './WorkpackageVMUtil'\r\n\r\nexport class WorkpackageVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fullName : observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.Workpackage._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.WorkpackageVMs.indexOf(this);\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.Workpackage.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage.M2VM = v;\r\n  }\r\n\r\n  Workpackage\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.Workpackage.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Code = v;\r\n    }\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.Workpackage.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Name = v;\r\n    }\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.Workpackage.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Description = v;\r\n    }\r\n  }\r\n\r\n  fullName = undefined\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.Workpackage.FullName;\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.FullName;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.FullName;\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.WorkpackageVMs.splice(this.Index, 1);\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(this.Name, this.Code, this.Description);\r\n  }\r\n}","import { WorkpackageVM } from \"./WorkpackageVM\";\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageVM();\r\n  qI.Workpackage = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnCodeChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Code = v;\r\n    }\r\n  }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnFullNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.FullName = v;\r\n    }\r\n  }\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supWp = q.Workpackage.SupItem;\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  var index = list.findIndex(x => x.Workpackage === supWp);\r\n  return index !== -1 ? list[index] : undefined;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport class CheckboxVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      ischecked: observable,\r\n      isDisable : observable,\r\n      Cancel : observable\r\n    })\r\n  }\r\n\r\n  name\r\n\r\n  OnCheckChanging\r\n\r\n  Cancel = false;\r\n\r\n  ischecked = undefined\r\n  set Ischecked(v) {\r\n    this.ischecked = v;\r\n    if (this.onCheckChange) {\r\n      this.onCheckChange(v);\r\n    }\r\n  }\r\n\r\n  isDisable = false\r\n}","import { CheckboxVM } from \"./CheckboxVM\"\r\n\r\nexport const get = (name, ischecked) => {\r\n  var qI = new CheckboxVM();\r\n  qI.ischecked = ischecked;\r\n  qI.name = name;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as checkboxVMUtil from '../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as util from './WorkpackageInputVMUtil'\r\nimport { Button } from 'antd';\r\n\r\nexport class WorkpackageInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  WorkpackageInput\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.WorkpackageInput.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.WorkpackageInput.Code = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.WorkpackageInput.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.WorkpackageInput.Name = v;\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.WorkpackageInput.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.WorkpackageInput.Description = v;\r\n  }\r\n\r\n  supItem = undefined\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    var input = this.WorkpackageInput;\r\n    if (!v) {\r\n      input.SupItem = v;\r\n    }else{\r\n      input.SupItem = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined\r\n  get WorkpackageVMStorageList(){\r\n    if (!this.workpackageVMStorageList){\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v){\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.SupItemSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItem = this.SupItem;\r\n  }\r\n\r\n  supItemSelectVM\r\n  get SupItemSelectVM(){\r\n    if (!this.supItemSelectVM){\r\n      var obj = this.supItemSelectVM = selectVMUtil.get\r\n        (this.WorkpackageVMStorageList, this.SupItem);\r\n      obj.Placeholder = 'công tác cha'\r\n      obj.CanClear = true;\r\n      obj.OnSelectedItemChanged = (v) => this.SupItem = v;\r\n    }\r\n    return this.supItemSelectVM;\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.WorkpackageInput.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.WorkpackageInput.IsNew = v;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n\r\n    if (!v) {\r\n      this.WorkpackageInput.Workpackage = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      this.WorkpackageInput.Workpackage = v.Workpackage;\r\n\r\n      var { Code, Name, Description, SupItem } = v;\r\n      this.CodeVM.Content = Code;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n\r\n      this.SupItemSelectVM.InitialItem = SupItem;\r\n\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Công tác mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  AsString = () => `${this.Code} ${this.Name} ${this.Description} ${this.IsNew}`\r\n\r\n  AddDatabase = () => {\r\n    this.WorkpackageInput.AddDatabase();\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  DeleteFunc = () => {\r\n    this.WorkpackageVM.Workpackage.Delete();\r\n    this.WorkpackageVM = undefined;\r\n  }\r\n\r\n  Clear = () => {\r\n    this.CodeVM.Content = null;\r\n    this.NameVM.Content = null;\r\n    this.DescriptionVM.Content = null;\r\n    this.IsNewVM.Ischecked = true;\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../single/form/PMDataVM\";\r\nimport { WorkpackageInputVM } from \"./WorkpackageInputVM\";\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageInputVM();\r\n  qI.WorkpackageInput = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  })\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} workpackage successfully`);\r\n    //qI.clear();\r\n  }\r\n\r\n  dict.OnAdd = (v) => {\r\n    qI.WorkpackageVM = v;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}","import { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport * as workpackageVMUtil from './WorkpackageVMUtil';\r\nimport * as workpackageInputVMUtil from './WorkpackageInputVMUtil';\r\n\r\nexport const get = (q) => {\r\n  var qI = new Workpackage_DictVM();\r\n  qI.Workpackage_Dict = q;\r\n\r\n  q.OnGetWorkpackagesDone = (v) => {\r\n    var obj = qI.WorkpackageVMs;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (item) => {\r\n    var itemView = workpackageVMUtil.get(item, qI);\r\n    qI.Add(itemView);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackageVMs = (dictVM) => {\r\n  var wps = dictVM.Workpackage_Dict.Workpackages;\r\n  if (!wps) return undefined;\r\n  return wps.map(x => workpackageVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetWorkpackageInputVM= (dictVM) => {\r\n  var input = dictVM.Workpackage_Dict.WorkpackageInput;\r\n  return workpackageInputVMUtil.get(input, dictVM);\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ElementFilterSetting_DictVMUtil'\r\n\r\nexport class ElementFilterSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  items  = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../../text/TextVMUtil';\r\n\r\nexport class SettingVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Name = v;\r\n    }\r\n  }\r\n\r\n  nameVM\r\n  get NameVM(){\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM = textUtil.get(this.Name, 'tên thiết lập ...');\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Description = v;\r\n    }\r\n  }\r\n\r\n  settingType\r\n  get SettingType() {\r\n    if (!this.settingType) {\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v) {\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  data\r\n  get Data(){\r\n    if (!this.data){\r\n      this.data = this.ModelItem.Data;\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n    if (!this.M2VM){\r\n      this.ModelItem.Data = v;\r\n    }\r\n  }\r\n\r\n  dataVM\r\n  get DataVM() {\r\n    if (!this.dataVM) {\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM(v) {\r\n    this.dataVM = v;\r\n\r\n    // Gọi hàm để đổ dữ liệu về\r\n    if (v && this.OnInitialSetDataVM){\r\n      this.OnInitialSetDataVM(v);\r\n    }\r\n\r\n    if (!this.M2VM) {\r\n      if (!v) {\r\n        this.Data = v;\r\n      }\r\n      else {\r\n        this.Data = v.ModelItem;\r\n      }\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM) {\r\n      return this.OnGetDataVM();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class ElementFilterSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var cateFilterVM = v.CategoryFilterVM;\r\n    if (cateFilterVM) {\r\n      cateFilterVM.OnInitialData();\r\n    }\r\n\r\n    var famFilterVM = v.FamilyFilterVM;\r\n    if (famFilterVM) {\r\n      famFilterVM.OnInitialData();\r\n    }\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as multiSelectVMUtil from '../../../select/MultiSelectVMUtil'\r\n\r\nexport class EntFilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  get pmDataVM () { return PMDataVM.Instance};\r\n\r\n  valueType\r\n  get ValueType() {\r\n    if (!this.valueType) {\r\n      this.valueType = this.ModelItem.ValueType;\r\n    }\r\n    return this.valueType;\r\n  }\r\n  set ValueType(v) {\r\n    this.valueType = v;\r\n    this.ModelItem.ValueType = v;\r\n  }\r\n\r\n  numberFilterType\r\n  get NumberFilterType() {\r\n    if (!this.numberFilterType) {\r\n      this.numberFilterType = this.ModelItem.NumberFilterType;\r\n    }\r\n    return this.numberFilterType;\r\n  }\r\n  set NumberFilterType(v) {\r\n    this.numberFilterType = v;\r\n    this.ModelItem.NumberFilterType = v;\r\n  }\r\n\r\n  stringFilterType\r\n  get StringFilterType() {\r\n    if (!this.stringFilterType) {\r\n      this.stringFilterType = this.ModelItem.StringFilterType;\r\n    }\r\n    return this.stringFilterType;\r\n  }\r\n  set StringFilterType(v) {\r\n    this.stringFilterType = v;\r\n    this.ModelItem.StringFilterType = v;\r\n  }\r\n\r\n  values\r\n  get Values() {\r\n    if (!this.values) {\r\n      this.values = this.ModelItem.Values;\r\n    }\r\n    return this.values;\r\n  }\r\n  set Values(v) {\r\n    this.values = v;\r\n    this.ModelItem.Values = v;\r\n  }\r\n\r\n  valueStorageList\r\n  get ValueStorageList() {\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = this.ModelItem.ValueStorageList;\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  ValueSelectPlaceholder\r\n\r\n  valueTypeSelectVM\r\n  get ValueTypeSelectVM() {\r\n    if (!this.valueTypeSelectVM) {\r\n      var obj =this.valueTypeSelectVM = selectVMUtil.get(this.pmDataVM.FilterValueTypes, this.ValueType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.ValueType = v;\r\n      }\r\n    }\r\n    return this.valueTypeSelectVM;\r\n  }\r\n\r\n  stringFilterTypeSelectVM\r\n  get StringFilterTypeSelectVM() {\r\n    if (!this.stringFilterTypeSelectVM){\r\n      var obj = this.stringFilterTypeSelectVM = selectVMUtil.get(this.pmDataVM.StringFilterTypes, this.StringFilterType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.StringFilterType = v;\r\n      }\r\n    }\r\n    return this.stringFilterTypeSelectVM;\r\n  }\r\n\r\n  valuesSelectVM\r\n  get ValuesSelectVM() {\r\n    if (!this.valuesSelectVM){\r\n      var obj = this.valuesSelectVM = multiSelectVMUtil.get(this.ValueStorageList, this.Values);\r\n\r\n      if (this.ValueSelectPlaceholder){\r\n        obj.Placeholder = this.ValueSelectPlaceholder;\r\n      }\r\n\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Values = v;\r\n      }\r\n    }\r\n    return this.valuesSelectVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    if (!v) return;\r\n\r\n    var {ValueType, NumberFilterType, StringFilterType, Values} = v;\r\n    this.ValueTypeSelectVM.InitialItem = ValueType;\r\n    this.StringFilterTypeSelectVM.InitialItem = StringFilterType;\r\n    this.ValuesSelectVM.InitialItems = Values;\r\n  }\r\n\r\n  OnInitialData = () => {\r\n    var valueType = this.ValueType;\r\n    var numberFilterType = this.NumberFilterType;\r\n    var stringFilterType = this.StringFilterType;\r\n    var values = this.Values;\r\n  }\r\n}","import { SettingVM } from \"../setting/base/SettingVM\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\n\r\nexport const get = (q) => {\r\n  if (!q) return undefined;\r\n  var qI = new EntFilterVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport default class ElementFilterSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isHaveFamilyFilter : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  categoryFilterVM\r\n  get CategoryFilterVM(){\r\n    if (!this.categoryFilterVM && this.ModelItem){\r\n      this.categoryFilterVM = this.GetCategoryFilterVM();\r\n    }\r\n    return this.categoryFilterVM;\r\n  }\r\n\r\n  GetCategoryFilterVM = () => {\r\n    var filter = this.ModelItem.CategoryFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilter = undefined\r\n  get IsHaveFamilyFilter(){\r\n    if (!this.isHaveFamilyFilter){\r\n      this.isHaveFamilyFilter = this.ModelItem.IsHaveFamilyFilter;\r\n    }\r\n    return this.isHaveFamilyFilter;\r\n  }\r\n  set IsHaveFamilyFilter(v){\r\n    this.isHaveFamilyFilter = v;\r\n    this.ModelItem.IsHaveFamilyFilter = v;\r\n  }\r\n\r\n  familyFilterVM\r\n  get FamilyFilterVM(){\r\n    if (!this.familyFilterVM && this.ModelItem){\r\n      this.familyFilterVM = this.GetFamilyFilterVM();\r\n    }\r\n    return this.familyFilterVM;\r\n  }\r\n\r\n  GetFamilyFilterVM = () => {\r\n    var filter = this.ModelItem.FamilyFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilterVM\r\n  get IsHaveFamilyFilterVM() {\r\n    if (!this.isHaveFamilyFilterVM) {\r\n      var obj = this.isHaveFamilyFilterVM\r\n        = checkboxVMUtil.get(\"Thiết lập lọc Family\", this.IsHaveFamilyFilter);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHaveFamilyFilter = v;\r\n      };\r\n    }\r\n    return this.isHaveFamilyFilterVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.CategoryFilterVM.SetData(v.CategoryFilterVM);\r\n\r\n    var ischecked = v.IsHaveFamilyFilter === true;\r\n    this.IsHaveFamilyFilterVM.Ischecked = ischecked;\r\n    \r\n    this.FamilyFilterVM.SetData(v.FamilyFilterVM);\r\n  }\r\n}","import ElementFilterSettingDataVM from './ElementFilterSettingDataVM';\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingDataVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import ElementFilterSettingVM from \"./ElementFilterSettingVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { message } from \"antd\";\r\nimport { SettingVM } from \"./SettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new SettingVM();\r\n  qI.Setting = q;\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as util from './SettingVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport { Button, message } from 'antd';\r\n\r\nexport default class SettingInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      dataVM : observable,\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  settingType\r\n  get SettingType(){\r\n    if (!this.settingType){\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v){\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên bộ lọc\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  settingTypeVM\r\n  get SettingTypeVM() {\r\n    if (!this.settingTypeVM){\r\n      var obj = this.settingTypeVM = \r\n        textVMUtil.get(this.SettingType, \"loại thiết lập\");\r\n      obj.onSetContent = (v) => this.SettingType = v;\r\n    }\r\n    return this.settingTypeVM;\r\n  }\r\n\r\n  dataVM = undefined\r\n  get DataVM(){\r\n    if (!this.dataVM){\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM (v){\r\n    if (this.DataVM.SetData){\r\n      this.DataVM.SetData(v);\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM){\r\n      var dataVM = this.OnGetDataVM();\r\n      return dataVM;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem() {\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v) {\r\n    this.editItem = v;\r\n\r\n    var input = this.ModelItem;\r\n    if (!v) {\r\n      input.EditItem = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      input.EditItem = v.ModelItem;\r\n\r\n      var { Name, Description, SettingType } = v;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n      this.SettingTypeVM.Content = SettingType;\r\n\r\n      this.DataVM = v.DataVM;\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.ModelItem.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.ModelItem.IsNew = v;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Thiết lập mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  \r\n  DeleteFunc = () => {\r\n    this.EditItem.ModelItem.Delete();\r\n    this.EditItem.Delete();\r\n    this.EditItem = undefined;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    this.ModelItem.AddDatabase();\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class ElementFilterSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport * as itemVMUtil from './ElementFilterSettingVMUtil'\r\nimport * as inputVMUtil from './ElementFilterSettingInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport ElementFilterSettingInputVM from \"./ElementFilterSettingInputVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} element filter setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../../filter/EntFilterVMUtil'\r\nimport * as util from './MES_ValueSettingVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MES_ValueSettingVM {\r\n  // constructor() {\r\n  //   makeObservable(this, {\r\n\r\n  //   })\r\n  // }\r\n\r\n  get Index() {\r\n    return this.Dict.ValueSettingVMs.indexOf(this);\r\n  }\r\n\r\n  retrieveType\r\n  get RetrieveType() {\r\n    if (!this.retrieveType) {\r\n      this.retrieveType = this.ModelItem.RetrieveType;\r\n    }\r\n    return this.retrieveType;\r\n  }\r\n  set RetrieveType(v) {\r\n    this.retrieveType = v;\r\n    this.ModelItem.RetrieveType = v;\r\n  }\r\n\r\n  get RetrieveTypeStorageList() {\r\n    return util.GetRetrieveTypeStorageList(this);\r\n  }\r\n\r\n  retrieveTypeSelectVM\r\n  get RetrieveTypeSelectVM() {\r\n    if (!this.retrieveTypeSelectVM) {\r\n      var obj = this.retrieveTypeSelectVM = selectVMUtil.get(this.RetrieveTypeStorageList, this.RetrieveType);\r\n      obj.OnSelectedItemChanged = (v) => this.RetrieveType = v;\r\n    }\r\n    return this.retrieveTypeSelectVM;\r\n  }\r\n\r\n  valueFilterVM\r\n  get ValueFilterVM() {\r\n    if (!this.valueFilterVM) {\r\n      var obj = this.valueFilterVM = filterVMUtil.get(this.ModelItem.ValueFilter);\r\n      obj.ValueSelectPlaceholder = 'giá trị parameter';\r\n    }\r\n    return this.valueFilterVM;\r\n  }\r\n  set ValueFilterVM(v) {\r\n    this.valueFilterVM = v;\r\n    if (!v) {\r\n      this.ModelItem.ValueFilter = v;\r\n    }\r\n    else {\r\n      this.ModelItem.ValueFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    if (!this.workpackageVM) {\r\n      this.workpackageVM = util.GetWorkpackageVM(this);\r\n    }\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.Workpackage = v;\r\n    }\r\n    else {\r\n      this.ModelItem.Workpackage = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined;\r\n  get WorkpackageVMStorageList() {\r\n    if (!this.workpackageVMStorageList) {\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v) {\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.WorkpackageSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = -1;\r\n  }\r\n\r\n  workpackageSelectVM\r\n  get WorkpackageSelectVM() {\r\n    if (!this.workpackageSelectVM) {\r\n      var storageList = this.WorkpackageVMStorageList ?\r\n        this.WorkpackageVMStorageList : [];\r\n\r\n      var obj = this.workpackageSelectVM = selectVMUtil.get\r\n        (storageList, this.WorkpackageVM);\r\n      obj.Placeholder = 'chọn công tác';\r\n      obj.OnSelectedItemChanged = (v) => this.WorkpackageVM = v;\r\n    }\r\n\r\n    return this.workpackageSelectVM;\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = this.ModelItem.MassType;\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n    this.ModelItem.MassType = v;\r\n  }\r\n\r\n  get MassTypeStorageList() {\r\n    return util.GetMassTypeStorageList(this);\r\n  }\r\n\r\n  massTypeSelectVM\r\n  get MassTypeSelectVM() {\r\n    if (!this.massTypeSelectVM) {\r\n      var obj = this.massTypeSelectVM = selectVMUtil.get(this.MassTypeStorageList, \r\n        this.MassType);\r\n      obj.Placeholder = 'loại khối lượng';\r\n      obj.OnSelectedItemChanged = (v) => this.MassType = v;\r\n    }\r\n    return this.massTypeSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.ValueSettingVMs;\r\n    list.splice(this.Index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.RetrieveTypeSelectVM.InitialItem = v.RetrieveType;\r\n    this.ValueFilterVM.SetData(v.ValueFilterVM);\r\n    this.WorkpackageSelectVM.InitialItem = v.WorkpackageVM;\r\n    this.MassTypeSelectVM.InitialItem = v.MassType;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSettingVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push((v) => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRetrieveTypeStorageList = (q) => {\r\n  return pmDataVM().ValueRetrieveTypes;\r\n}\r\n\r\nexport const GetWorkpackageVM = (q) => {\r\n  var workpackage = q.ModelItem.Workpackage;\r\n  if (!workpackage) return undefined;\r\n\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.Workpackage === workpackage);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}\r\n\r\nexport const GetMassTypeStorageList = (q) => {\r\n  return pmDataVM().MassTypes;\r\n}","import * as util from './MES_ValueSettingUtil'\r\n\r\nexport default class MES_ValueSetting{\r\n  get Index() {\r\n    return this.Dict.ValueSettings.indexOf(this);\r\n  }\r\n\r\n  RetrieveType\r\n\r\n  MassType\r\n  \r\n  ValueFiter\r\n\r\n  workpackageId\r\n  \r\n  workpackage\r\n  get Workpackage(){\r\n    if (!this.workpackage){\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.workpackageId = undefined;\r\n    }\r\n    else{\r\n      this.workpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ValueSettings.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byparameter = \"byparameter\";\r\nexport const bymaterial = \"bymaterial\";\r\nexport const byrebar = \"byrebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [byparameter, bymaterial, byrebar]\r\n}","import MES_ValueSetting from './MES_ValueSetting'\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as vrt from './MES_ValueRetrieveType'\r\nimport * as fvt from '../../../filter/FilterValueType'\r\nimport * as sft from '../../../filter/StringFilterType'\r\nimport * as fct from '../../../filter/FilterCategoryType'\r\nimport { EntFilter } from '../../../filter/EntFilter';\r\nimport { PMData } from '../../../../single/model/PMData'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.retrieveType;\r\n  qI.MassType = q.massType;\r\n  qI.ValueFilter = filterUtil.get(q.valueFilter, fct.parameter);\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.RetrieveType;\r\n  qI.MassType = q.MassType;\r\n  qI.ValueFilter = q.ValueFilter;\r\n  qI.Workpackage = q.Workpackage;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = vrt.byparameter;\r\n  qI.Dict = dict;\r\n  \r\n  var valueFilter = new EntFilter();\r\n  valueFilter.CategoryType = fct.parameter;\r\n  valueFilter.ValueType = fvt.bystring;\r\n  valueFilter.StringFilterType = sft.byequal;\r\n  valueFilter.Values = [ 'Volume' ];\r\n\r\n  qI.ValueFilter = valueFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackage = (q) => {\r\n  var workpackageId = q.workpackageId;\r\n  if (!workpackageId) return undefined;\r\n\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    retrieveType : q.RetrieveType,\r\n    massType : q.MassType,\r\n    valueFilter: q.ValueFilter.ApiData,\r\n    workpackageId : q.workpackageId\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassExportSettingDataVMUtil'\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport default class MassExportSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueSettingVMs: observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  elementFilterVM\r\n  get ElementFilterVM() {\r\n    if (!this.elementFilterVM) {\r\n      this.elementFilterVM = util.GetElementFilterVM(this);\r\n    }\r\n    return this.elementFilterVM;\r\n  }\r\n  set ElementFilterVM(v) {\r\n    this.elementFilterVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.ElementFilter = v;\r\n    }\r\n    else {\r\n      modelItem.ElementFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  elementFilterVMStorageList = undefined\r\n  get ElementFilterVMStorageList() {\r\n    if (!this.elementFilterVMStorageList) {\r\n      this.elementFilterVMStorageList = util.GetElementFilterVMStorageList(this);\r\n    }\r\n    return this.elementFilterVMStorageList;\r\n  }\r\n  set ElementFilterVMStorageList(v) {\r\n    this.elementFilterVMStorageList = v;\r\n\r\n    var selectVM = this.ElementFilterSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = 0;\r\n  }\r\n\r\n  elementFilterSelectVM\r\n  get ElementFilterSelectVM() {\r\n    if (!this.elementFilterSelectVM) {\r\n      var storageList = this.ElementFilterVMStorageList ? this.ElementFilterVMStorageList : [];\r\n\r\n      var obj = this.elementFilterSelectVM = selectVMUtil.get(storageList, this.ElementFilterVM);\r\n      obj.Placeholder = 'chọn bộ lọc'\r\n      obj.OnSelectedItemChanged = (v) => this.ElementFilterVM = v;\r\n    }\r\n    return this.elementFilterSelectVM;\r\n  }\r\n\r\n  valueSettingVMs = undefined\r\n  get ValueSettingVMs() {\r\n    if (!this.valueSettingVMs) {\r\n      this.valueSettingVMs = util.GetValueSettingVMs(this);\r\n    }\r\n    return this.valueSettingVMs;\r\n  }\r\n  set ValueSettingVMs(v) {\r\n    var list = this.valueSettingVMs;\r\n    var modelList = this.ModelItem.ValueSettings;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount) {\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount) {\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = valueSettingUtil.Clone\r\n          (originItemVM.ModelItem, this.ModelItem);\r\n        modelList.push(item);\r\n\r\n        var itemVM = valueSettingVMUtil.get(item, this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewValueSettingVM = () => {\r\n    var item = this.ModelItem.AddNewValueSetting();\r\n    var itemView = valueSettingVMUtil.get(item, this);\r\n    this.ValueSettingVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.ElementFilterSelectVM.InitialItem = v.ElementFilterVM;\r\n    this.ValueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassExportSettingDataVM from './MassExportSettingDataVM';\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  pmDataVM().ElementFilterSetting_DictVM.OnGetItemsDone = (v) => {\r\n    qI.ElementFilterVMStorageList = GetElementFilterVMStorageList(qI);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilterVM = (q) => {\r\n  var elemFilter = q.ModelItem.ElementFilter;\r\n  if (!elemFilter) return undefined;\r\n\r\n  var list = pmDataVM().ElementFilterSetting_DictVM.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.ModelItem === elemFilter);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetElementFilterVMStorageList = (q) => {\r\n  return pmDataVM().ElementFilterSetting_DictVM.Items;\r\n}\r\n\r\nexport const GetValueSettingVMs = (q) => {\r\n  var valueSettings = q.ModelItem.ValueSettings;\r\n  return valueSettings.map(x => valueSettingVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassExportSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var valueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport MassExportSettingVM from \"./MassExportSettingVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class MassExportSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassExportSetting_DictVMUtil'\r\n\r\nexport class MassExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassExportSettingVMUtil'\r\nimport * as inputVMUtil from './MassExportSettingInputVMUtil'\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\nimport MassExportSettingInputVM from \"./MassExportSettingInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassGroupSetting_DictVMUtil'\r\n\r\nexport class MassGroupSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassGroupSettingVMUtil'\r\nimport { MassGroupSetting_DictVM } from \"./MassGroupSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n","\r\nexport default class PhaseVM {\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  get DisplayContent () {\r\n    return `${this.Name}`;\r\n  }\r\n}","import PhaseVM from \"./PhaseVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new PhaseVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;  \r\n\r\n  return qI;\r\n}","export const addversion = 'addversion'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Phase_DictVMUtil'\r\nimport * as stateType from '../state/StateType'\r\nimport { message } from 'antd';\r\n\r\nexport class Phase_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      state : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  state = undefined\r\n  get State(){\r\n    return this.state;\r\n  }\r\n  set State(v){\r\n    this.state = v;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n\r\n  AddVersion = () => {\r\n    this.State = stateType.addversion;\r\n  }\r\n\r\n  Cancel = () => {\r\n    this.State = undefined;\r\n  }\r\n\r\n  OK = () => {\r\n    var name = this.Input.Name;\r\n    var index = this.Items.findIndex(x => x.Name === name);\r\n    if (index !== -1){\r\n      message.warning('version name already exists!');\r\n      return;\r\n    }\r\n\r\n    this.State = undefined;\r\n    this.ModelItem.AddMassVersion();\r\n  }\r\n}","import * as textVMUtil from '../../../text/TextVMUtil'\r\n\r\nexport default class PhaseInputVM {\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên version\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n}","import * as itemVMUtil from './PhaseVMUtil'\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport * as inputVMUtil from './PhaseInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new Phase_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  });\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputVMUtil.get(q.ModelItem.Input, q);\r\n}","import PhaseInputVM from \"./PhaseInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new PhaseInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ProjectVMUtil'\r\n\r\nexport default class ProjectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      typicalLevelSetting: observable,\r\n      typicalLevelSetting_ForEdit: observable\r\n    })\r\n  }\r\n\r\n  get _id() {\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.ModelItem.Code;\r\n    }\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.ModelItem.Code = v;\r\n  }\r\n\r\n  phase_DictVM\r\n  get Phase_DictVM() {\r\n    if (!this.phase_DictVM) {\r\n      this.phase_DictVM = util.GetPhase_DictVM(this);\r\n    }\r\n    return this.phase_DictVM;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = this.ModelItem.RebarMass_Dict;\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  get InputExportSet() {\r\n    return this.ModelItem.InputExportSet;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  get Level_Dict() {\r\n    return this.ModelItem.Level_Dict;\r\n  }\r\n\r\n  typicalLevelSetting = undefined\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      this.typicalLevelSetting = util.GetTypicalLevelSetting(this);\r\n    }\r\n    return this.typicalLevelSetting;\r\n  } set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit = undefined\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = util.GetTypicalLevelSetting_ForEdit(this);\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  get Url(){\r\n    return this.ModelItem.Url;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport React from 'react'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport * as ts from '../text/TextState'\r\n\r\nclass NewInputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.contentEditable = React.createRef();\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    var data = this.state;\r\n    data.Content = e.target.value;\r\n  };\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var Content = data.Content;\r\n    var style = this.props.style ? this.props.style : {};\r\n    if (!style.minWidth) {\r\n      style.minWidth = 150\r\n      style.fontFamily = 'password'\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <ContentEditable className='ant-input' innerRef={this.contentEditable}\r\n            placeholder={data.Placeholder}\r\n            style={style}\r\n            html={Content ? Content : ''}\r\n            onChange={this.handleChange} />\r\n          : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={Content} onChange={this.handleChange} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(NewInputView)","export const text = 'text'\r\nexport const input = 'input'","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport * as checkboxVMUtil from './CheckboxVMUtil'\r\nimport './Checkbox.css'\r\n\r\nclass CheckboxView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = checkboxVMUtil.get(false);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onCheckedChange = (e) => {\r\n    var data = this.state;\r\n    var { checked } = e.target;\r\n\r\n    if (data.OnCheckChanging) {\r\n      data.OnCheckChanging(checked);\r\n    }\r\n\r\n    if (!data.Cancel) {\r\n      data.Ischecked = checked;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var { ischecked, name, isDisable } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <label>\r\n          <input type=\"checkbox\"\r\n            checked={ischecked}\r\n            onChange={this.onCheckedChange} disabled={isDisable} />\r\n          <span className='checkbox__title'>{name}</span>\r\n        </label>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CheckboxView)","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport CheckboxView from '../../../../../checkbox/CheckboxView';\r\nimport * as checkBoxUtil from '../../../../../checkbox/CheckboxVMUtil';\r\nimport * as multiSelectUtil from \"../../../../../select/MultiSelectVMUtil\";\r\nimport * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport { text } from '../pageItem/TLS_PageItemStateType';\r\nimport * as util from './LevelGroupVMUtil'\r\n\r\nexport class LevelGroupVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      primary: observable,\r\n      isSelectOpen: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get Levels() {\r\n    return this.ModelItem.Levels;\r\n  } set Levels(v) {\r\n    this.ModelItem.Levels = v;\r\n  }\r\n\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  levelSelectVM\r\n  get LevelSelectVM() {\r\n    if (!this.levelSelectVM) {\r\n      var list = this.LevelStorageList;\r\n      if (!list) {\r\n        this.SettingVM.ModelItem.OnGetLevelStorageList_Funcs.push(() => {\r\n          var obj = this.levelSelectVM;\r\n          obj.Items = this.LevelStorageList;\r\n          obj.InitialItems = this.Levels;\r\n        })\r\n      }\r\n\r\n      list = list ? list : []\r\n      var obj = this.levelSelectVM = multiSelectUtil.get(list, this.Levels);\r\n      obj.Placeholder = 'chọn level ...';\r\n\r\n      obj.TitleRender = (item) => {\r\n        const getTriggerContent = () => {\r\n          return this.IsSelectOpen || this.Primary === item ? 'click' : 'hover';\r\n        }\r\n        var triggerVM = textUtil.get(getTriggerContent())\r\n\r\n        const getButtonType = () => {\r\n          return this.Primary === item ? 'primary' : 'dashed'\r\n        }\r\n        var buttonTypeVM = textUtil.get(getButtonType())\r\n\r\n        const getAddContent = () => {\r\n          return this.Primary === item ? '' : 'Set'\r\n        }\r\n        var addContentVM = textUtil.get(getAddContent())\r\n\r\n        const getItemCss = () => {\r\n          return this.Primary === item ? 'levelgroup__primary' : '';\r\n        }\r\n\r\n        return <Popover trigger={triggerVM.Content}\r\n          content={\r\n            <span>\r\n              {this.Primary !== item ?\r\n                <span className='levelgroup__addtext'>{addContentVM.Content}</span>\r\n                : ''}\r\n              <Button size='small'\r\n                type={buttonTypeVM.Content}\r\n                onClick={() => {\r\n                  this.Primary = item;\r\n                }}>Primary</Button>\r\n            </span>\r\n          }>\r\n          <span className={getItemCss()}>{item}</span>\r\n        </Popover>\r\n      }\r\n\r\n      obj.OnSetOpen = (v) => this.IsSelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Levels = v;\r\n        if (this.Levels.indexOf(this.Primary) === -1) {\r\n          this.Primary = util.GetDefaultPrimary(this);\r\n        }\r\n      }\r\n    }\r\n    return this.levelSelectVM;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.LevelGroups;\r\n    list.splice(this.Index, 1);\r\n\r\n    this.Primary = util.GetDefaultPrimary(this);\r\n  }\r\n\r\n  primary = undefined\r\n  get Primary() {\r\n    if (!this.primary) {\r\n      this.primary = this.ModelItem.Primary;\r\n    }\r\n    return this.primary\r\n  } set Primary(v) {\r\n    this.primary = this.ModelItem.Primary = v;\r\n  }\r\n\r\n  isSelectOpen = undefined\r\n  get IsSelectOpen() {\r\n    return this.isSelectOpen\r\n  } set IsSelectOpen(v) {\r\n    this.isSelectOpen = v;\r\n  }\r\n}","import { LevelGroupVM } from \"./LevelGroupVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new LevelGroupVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport * as genUtil from \"../../../../../../util/generalUtil\";\r\nimport * as it from './TLS_FilterValue_InputType'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from \"../../../../../input/NewInputView\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterValueVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      InputType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Values.indexOf(this);\r\n  }\r\n\r\n  get Values() {\r\n    return this.Dict.ModelItem.Values;\r\n  }\r\n\r\n  get Value() {\r\n    return this.Values[this.Index];\r\n  }\r\n  set Value(v) {\r\n    this.Values[this.Index] = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var obj = this.valueVM = textUtil.get(this.Value);\r\n      obj.onSetContent = (v) => {\r\n        this.Value = v;\r\n      }\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var list = ['Cột', 'Vách', 'Dầm', 'Sàn']\r\n      var obj = this.selectVM = selectUtil.get(list, this.Value);\r\n      obj.Placeholder = '...'\r\n      obj.OnSetOpen = (v) => this.SelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => this.Value = v;\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ModelItem.Values.splice(this.Index, 1);\r\n    this.Dict.Values.splice(this.Index, 1);\r\n  }\r\n\r\n  InputType = it.select\r\n\r\n  ToggleInputType = () => {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        this.SelectVM.InitialItem = this.Value;\r\n        this.Value = this.SelectVM.SelectedItem;\r\n        this.InputType = it.select\r\n        break;\r\n      case it.select:\r\n        if (this.Value) {\r\n          this.ValueVM.Content = this.Value;\r\n        } else{\r\n          if (!this.ValueVM.Content){\r\n            this.ValueVM.Content = 'value'\r\n          }\r\n          this.Value =this.ValueVM.Content;\r\n        }\r\n\r\n        this.InputType = it.input\r\n        break;\r\n    }\r\n  }\r\n\r\n  SwitchChecked_Funcs = () => this.InputType === it.select;\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        return <NewInputView store={this.ValueVM} className='tls_filter__value__input' />\r\n      case it.select:\r\n        return <SelectView store={this.SelectVM} className='tls_filter__value__select' />\r\n    }\r\n  }\r\n\r\n  selectOpen\r\n  get SelectOpen() {\r\n    if (this.selectOpen === undefined) {\r\n      this.selectOpen = this.SelectVM.Open;\r\n    }\r\n    return this.selectOpen;\r\n  }\r\n  set SelectOpen(v) {\r\n    this.selectOpen = v;\r\n    this.PopoverState.Content = util.GetPopoverState(this);\r\n  }\r\n\r\n  popoverState\r\n  get PopoverState() {\r\n    if (!this.popoverState) {\r\n      this.popoverState = textUtil.get(util.GetPopoverState(this));\r\n    }\r\n    return this.popoverState;\r\n  }\r\n}","import { TLS_FilterValueVM } from \"./TLS_FilterValueVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterValueVM();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPopoverState = (q) => {\r\n    return q.SelectOpen ? 'none' : 'hover';\r\n  }","import { makeObservable, observable, action } from 'mobx';\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterVMUtil'\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      values : observable\r\n    })\r\n  }\r\n\r\n  get id(){\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get Field(){\r\n    return this.ModelItem.Field;\r\n  } set Field(v){\r\n    this.ModelItem.Field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = \r\n        selectUtil.get(this.FieldStorageList, this.Field);\r\n      obj.Placeholder = 'chọn bộ lọc ...';\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  values = undefined\r\n  get Values(){\r\n    if (!this.values){\r\n      this.values = util.GetValues(this);\r\n    }\r\n    return this.values;\r\n  }\r\n\r\n  AddValue = () => {\r\n    var item = valueUtil.get(this.ModelItem.AddValue(),this);\r\n    this.Values.push(item);\r\n    return item;\r\n  }\r\n}\r\n","import { TLS_FilterVM } from \"./TLS_FilterVM\";\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetValues = (q) => {\r\n  return q.ModelItem.Values.map(x => valueUtil.get(x, q));\r\n}","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport * as textUtil from '../../../../../text/TextVMUtil';\r\nimport * as st from './TLS_PageItemStateType'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\nimport * as util from './TLS_PageItemVMUtil'\r\n\r\nexport class TLS_PageItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable,\r\n      State: observable,\r\n      levelGroups: observable,\r\n      filters: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem?.id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = this.ModelItem.Name = v;\r\n  }\r\n\r\n  State = st.text\r\n\r\n  ToggleState = () => {\r\n    switch (this.State) {\r\n      case st.text:\r\n        this.State = st.input\r\n        break;\r\n      case st.input:\r\n        this.NameVM.Content = this.Name;\r\n        this.State = st.text\r\n        break;\r\n    }\r\n  }\r\n\r\n  get DeleteMarginCss() {\r\n    return this.State === st.input ? 'tls_pageItem__deletemargin' : ''\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = textUtil.get(this.Name);\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  NameOK = () => {\r\n    this.State = st.text;\r\n    this.Name = this.NameVM.Content;\r\n  }\r\n\r\n  NameCancel = () => {\r\n    this.State = st.text;\r\n  }\r\n\r\n  get InputToolElement() {\r\n    return <div >\r\n      <Button type='primary' size='small'\r\n        onClick={this.NameOK}>ok</Button>\r\n      <Button type='dashed' size='small'\r\n        onClick={this.NameCancel}>cancel</Button>\r\n    </div>\r\n  }\r\n\r\n  get InputElement() {\r\n    var obj = <NewInputView className='tls_pageItem_input' store={this.NameVM} />\r\n    return obj;\r\n  }\r\n\r\n  get TitleElement() {\r\n    var delElem = <Button type='primary' size='small' onClick={this.Delete}\r\n      className='tls_pageItem__delete'>x</Button>\r\n\r\n    switch (this.State) {\r\n      case st.text:\r\n        return <>\r\n          <span>{this.Name}</span>\r\n          <Button type='primary' size='small' className='tls_pageItem__edit'\r\n            onClick={this.ToggleState}>e</Button>\r\n          {delElem}\r\n        </>\r\n      case st.input:\r\n        return <>\r\n          <Popover content={this.InputToolElement} trigger=\"focus\">\r\n            <span>\r\n              {this.InputElement}\r\n            </span>\r\n          </Popover>\r\n          {delElem}\r\n        </>\r\n    }\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.PageItems.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var index = this.Index;\r\n    var isLast = this.IsLast;\r\n\r\n    var dict = this.Dict;\r\n    var list = dict.PageItems;\r\n    list.splice(index, 1);\r\n    dict.AllTabs.splice(index, 1);\r\n\r\n    if (list.length !== 0) {\r\n      dict.IsModelChangePageKey = true;\r\n      dict.CurrentPageKey = (isLast ? list[index - 1] : list[index]).id\r\n    }\r\n  }\r\n\r\n  // Setting\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  // Level Group\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups = undefined\r\n  get LevelGroups() {\r\n    if (!this.levelGroups) {\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.get(this.ModelItem.AddLevelGroup(), this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  filters = undefined\r\n  get Filters() {\r\n    if (!this.filters) {\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.get(this.ModelItem.AddFilter(), this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n}","import { TLS_PageItemVM } from \"./TLS_PageItemVM\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_PageItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetLevelGroups = (q) => {\r\n  return q.ModelItem.LevelGroups.map(x => levelGroupUtil.get(x, q));\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return q.ModelItem.Filters.map(x => filterUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TypicalLevelSettingDataVMUtil'\r\nimport { ControlOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil';\r\n\r\nexport class TypicalLevelSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      pageItems: observable,\r\n      currentPageKey: observable,\r\n      allTabs: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  // Setting\r\n  get SettingVM (){\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Page Items\r\n  pageItems = undefined\r\n  get PageItems() {\r\n    if (!this.pageItems) {\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.get(this.ModelItem.AddPageItem(), this);\r\n    this.PageItems.push(item);\r\n\r\n    var i = this.IsHaveAddCommandTab ? 1 : 0;\r\n    this.AllTabs.splice(this.AllTabs.length - i, 0, item);\r\n\r\n    this.CurrentPageKey = item.id;\r\n\r\n    return item;\r\n  }\r\n\r\n  addCommandTab\r\n  get AddCommandTab() {\r\n    if (!this.addCommandTab) {\r\n      this.addCommandTab = {\r\n        id: 'add',\r\n        TitleElement: <Button className='tls__tabs__add'\r\n          type='text' size='small'\r\n          onClick={this.AddPageItem}>+</Button>\r\n      }\r\n    }\r\n    return this.addCommandTab;\r\n  }\r\n\r\n  IsHaveAddCommandTab = false\r\n\r\n  allTabs = undefined\r\n  get AllTabs() {\r\n    if (!this.allTabs) {\r\n      var obj = [...this.PageItems];\r\n      if (this.IsHaveAddCommandTab) {\r\n        obj.push(this.AddCommandTab);\r\n      }\r\n      this.allTabs = obj;\r\n    }\r\n    return this.allTabs;\r\n  }\r\n\r\n  currentPageKey = undefined\r\n  get CurrentPageKey() {\r\n    if (!this.currentPageKey) {\r\n      this.currentPageKey = this.PageItems[0].id;\r\n    }\r\n    return this.currentPageKey;\r\n  } set CurrentPageKey(v) {\r\n    this.currentPageKey = v;\r\n  }\r\n\r\n  IsModelChangePageKey = false\r\n\r\n  ChangePageKey = (v) => {\r\n    if (this.IsModelChangePageKey) {\r\n      this.IsModelChangePageKey = false; return;\r\n    }\r\n    this.CurrentPageKey = v;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TypicalLevelSettingDataVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return q.ModelItem.PageItems.map(x => pageItemUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as util from './TypicalLevelSettingVMUtil'\r\n\r\nexport class TypicalLevelSettingVM extends SettingVM {\r\n  get LevelStorageList() {\r\n    return this.ModelItem.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList(){\r\n    return this.ModelItem.FieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    this.ModelItem.Save();\r\n  }\r\n}","import * as dataVMUtil from './TypicalLevelSettingDataVMUtil'\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\n\r\nexport const get = (q, project) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new TypicalLevelSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Project = project;\r\n\r\n  // var level_Dict = project.Level_Dict;\r\n  // const getLevelsFunc = () => { \r\n  //   qI.LevelStorageList = level_Dict.Items.map(x => x.Name);\r\n  //   qI.GetLevelStorageList = true;\r\n  // }\r\n  // if (level_Dict.Items){\r\n  //   getLevelsFunc();\r\n  // } else{\r\n  //   level_Dict.OnGetItemsDone_Funcs.push(getLevelsFunc);\r\n  // }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data, qI);\r\n  }    \r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}","import * as phaseDictVMUtil from '../phase/Phase_DictVMUtil'\r\nimport ProjectVM from \"./ProjectVM\";\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new ProjectVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPhase_DictVM = (q) => {\r\n  var phaseDict = q.ModelItem.Phase_Dict;\r\n  return phaseDictVMUtil.get(phaseDict);\r\n}\r\n\r\nexport const GetTypicalLevelSetting_Func = (model, project) => {\r\n  return typicalLevelUtil.get(model, project);\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() =>\r\n      q.TypicalLevelSetting = GetTypicalLevelSetting_Func(project.TypicalLevelSetting, q));\r\n  }\r\n}\r\n\r\nexport const GetTypicalLevelSetting_ForEdit = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting_ForEdit;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TypicalLevelSetting_ForEdit = GetTypicalLevelSetting_Func(project.TypicalLevelSetting_ForEdit, q)\r\n    });\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Project_DictVMUtil'\r\n\r\nexport class Project_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.ModelItem.Items = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import * as itemVMUtil from './ProjectVMUtil'\r\nimport { Project_DictVM } from \"./Project_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new Project_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassResultCompVMUtil'\r\nimport * as multiSelectVMUtil from '../../../../select/MultiSelectVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport { Link } from 'react-router-dom';\r\nimport { Popover } from 'antd';\r\n\r\nexport default class MassResultCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsShowProjectSelect: observable,\r\n      CanHavePhase: observable,\r\n      isHavePhase: observable,\r\n      IsDataPending: observable\r\n    })\r\n  }\r\n\r\n  projects\r\n  get Projects() {\r\n    if (!this.projects) {\r\n      this.projects = this.ModelItem.Projects;\r\n    }\r\n    return this.projects;\r\n  }\r\n  set Projects(v) {\r\n    this.projects = v;\r\n    this.ModelItem.Projects = v;\r\n  }\r\n\r\n  projectVMs\r\n  get ProjectVMs() {\r\n    if (!this.projectVMs) {\r\n      this.projectVMs = util.GetProjectVMs(this);\r\n    }\r\n    return this.projectVMs;\r\n  }\r\n  set ProjectVMs(v) {\r\n    this.projectVMs = v;\r\n    this.Projects = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  projectVMStorageList\r\n  get ProjectVMStorageList() {\r\n    if (!this.projectVMStorageList) {\r\n      this.projectVMStorageList = util.GetProjectVMStorageList(this);\r\n    }\r\n    return this.projectVMStorageList;\r\n  }\r\n  set ProjectVMStorageList(v) {\r\n    this.projectVMStorageList = v;\r\n\r\n    this.projectVMs = util.GetProjectVMs(this);\r\n\r\n    var selectVM = this.ProjectSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.projectVMs;\r\n  }\r\n\r\n  projectSelectOpen\r\n  get ProjectSelectOpen(){\r\n    if (this.projectSelectOpen === undefined){\r\n      this.projectSelectOpen = this.ProjectSelectVM.Open;\r\n    }\r\n    return this.projectSelectOpen;\r\n  }\r\n  set ProjectSelectOpen(v){\r\n    this.projectSelectOpen = v;\r\n    this.ProjectPopoverState.Content = util.GetProjectPopoverStateValue(this);\r\n  }\r\n\r\n  projectPopoverState\r\n  get ProjectPopoverState(){\r\n    if (!this.projectPopoverState){\r\n      this.projectPopoverState = textUtil.get(util.GetProjectPopoverStateValue(this));\r\n    }\r\n    return this.projectPopoverState;\r\n  }\r\n\r\n  projectSelectVM\r\n  get ProjectSelectVM() {\r\n    if (!this.projectSelectVM) {\r\n      var list = this.ProjectVMStorageList ? this.ProjectVMStorageList : [];\r\n      var obj = this.projectSelectVM = multiSelectVMUtil.get(list, this.ProjectVMs);\r\n      obj.Placeholder = 'chọn dự án'\r\n      obj.TitleRender = (item) => <Popover trigger={this.ProjectPopoverState.Content}\r\n        placement=\"topLeft\"\r\n        content={\r\n          <a target='_blank' \r\n            // href={`/#/project/${item._id}`} \r\n            href={item.Url}\r\n            >View project</a>\r\n        }\r\n      >\r\n        {item.DisplayContent}\r\n      </Popover>\r\n\r\n      obj.OnSelectedItemChanged = (v) => this.ProjectVMs = v;\r\n      obj.OnSetOpen = (v) => this.ProjectSelectOpen = v;\r\n    }\r\n    return this.projectSelectVM;\r\n  }\r\n\r\n  IsShowProjectSelect = true\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = this.ModelItem.Phases;\r\n    }\r\n    return this.phases;\r\n  }\r\n  set Phases(v) {\r\n    this.phases = v;\r\n    this.ModelItem.Phases = v;\r\n  }\r\n\r\n  phaseVMs\r\n  get PhaseVMs() {\r\n    if (!this.phaseVMs) {\r\n      this.phaseVMs = util.GetPhaseVMs(this);\r\n    }\r\n    return this.phaseVMs;\r\n  }\r\n  set PhaseVMs(v) {\r\n    this.phaseVMs = v;\r\n    this.Phases = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict() {\r\n    if (!this.massItem_Dict) {\r\n      this.massItem_Dict = this.ModelItem.MassItem_Dict;\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  phaseVMStorageList\r\n  get PhaseVMStorageList() {\r\n    return this.phaseVMStorageList;\r\n  }\r\n  set PhaseVMStorageList(v) {\r\n    this.phaseVMStorageList = v;\r\n\r\n    this.phaseVMs = util.GetPhaseVMs(this);\r\n\r\n    var selectVM = this.PhaseSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.phaseVMs;\r\n  }\r\n\r\n  phaseSelectVM\r\n  get PhaseSelectVM() {\r\n    if (!this.phaseSelectVM) {\r\n      var list = this.PhaseVMStorageList ? this.PhaseVMStorageList : [];\r\n      var obj = this.phaseSelectVM = multiSelectVMUtil.get(list, this.PhaseVMs);\r\n      obj.Placeholder = 'chọn version'\r\n      obj.OnSelectedItemChanged = (v) => this.PhaseVMs = v;\r\n    }\r\n    return this.phaseSelectVM;\r\n  }\r\n\r\n  CanHavePhase = false\r\n\r\n  isHavePhase = undefined\r\n  get IsHavePhase() {\r\n    if (!this.isHavePhase) {\r\n      this.isHavePhase = this.ModelItem.IsHavePhase;\r\n    }\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v) {\r\n    this.isHavePhase = v;\r\n    this.ModelItem.IsHavePhase = v;\r\n  }\r\n\r\n  isShowPhaseSelectVM\r\n  get IsShowPhaseSelectVM() {\r\n    if (!this.isShowPhaseSelectVM) {\r\n      var obj = this.isShowPhaseSelectVM\r\n        = checkboxVMUtil.get(\"So sánh các version\", this.IsHavePhase);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHavePhase = v;\r\n      };\r\n    }\r\n    return this.isShowPhaseSelectVM;\r\n  }\r\n\r\n  get MassGroupSetting() {\r\n    return this.ModelItem.MassGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.ModelItem.MassGroupSetting = v;\r\n  }\r\n\r\n  massGroupSettingStorageList\r\n  get MassGroupSettingStorageList() {\r\n    if (!this.massGroupSettingStorageList) {\r\n      this.massGroupSettingStorageList =\r\n        util.GetMassGroupSettingStorageList(this);\r\n    }\r\n  }\r\n  set MassGroupSettingStorageList(v) {\r\n    this.massGroupSettingStorageList = v;\r\n\r\n    var selectVM = this.MassGroupSettingSelectVM;\r\n    selectVM.Items = v;\r\n  }\r\n\r\n  massGroupSettingSelectVM\r\n  get MassGroupSettingSelectVM() {\r\n    if (!this.massGroupSettingSelectVM) {\r\n      var list = this.MassGroupSettingStorageList ?\r\n        this.MassGroupSettingStorageList : [];\r\n      var obj = this.massGroupSettingSelectVM =\r\n        selectVMUtil.get(list);\r\n      obj.CanClear = true;\r\n      obj.Placeholder = 'chọn bộ set khối lượng'\r\n      obj.OnSelectedItemChanged = (v) => this.MassGroupSetting = v;\r\n    }\r\n    return this.massGroupSettingSelectVM;\r\n  }\r\n\r\n  IsDataPending = false;\r\n\r\n  get LoadingSpinTip() {\r\n    return `loading data ... (${(this.HandledRatio * 100).toFixed(1)}%)`;\r\n  }\r\n\r\n  loadingSpinTipVM\r\n  get LoadingSpinTipVM() {\r\n    if (!this.loadingSpinTipVM) {\r\n      this.loadingSpinTipVM = textUtil.get(this.LoadingSpinTip);\r\n    }\r\n    return this.loadingSpinTipVM;\r\n  }\r\n\r\n  handledRatio = 0\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  }\r\n  set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.LoadingSpinTipVM.Content = this.LoadingSpinTip;\r\n  }\r\n\r\n  // function\r\n  GetMassData = () => {\r\n    this.IsDataPending = true;\r\n    this.HandledRatio = 0;\r\n    this.ModelItem.GetMassData();\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassResultCompVM from \"./MassResultCompVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, isfetchProjects = true) => {\r\n  var qI = new MassResultCompVM();\r\n  qI.ModelItem = q;\r\n\r\n  if (isfetchProjects) {\r\n    pmDataVM().Project_DictVM.OnGetItemsDone = (v) => {\r\n      qI.ProjectVMStorageList = GetProjectVMStorageList(qI);\r\n    }\r\n  }\r\n\r\n  q.OnGetItemsDone_Funcs.push(() => {\r\n    message.success('get mass data successfully');\r\n  })\r\n\r\n  var massTable = q.MassItem_Dict.MassTable;\r\n  massTable.OnIsUpdateDataDone_Funcs.push(() => {\r\n    qI.IsDataPending = false;\r\n  })\r\n  massTable.OnSetHandledRatio_Funcs.push((v) => {\r\n    qI.HandledRatio = v;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProjectVMStorageList = (q) => {\r\n  return pmDataVM().Project_DictVM.Items;\r\n}\r\n\r\nexport const GetProjectVMs = (q) => {\r\n  var storageList = q.ProjectVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var projects = q.Projects;\r\n  projects.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetPhaseVMs = (q) => {\r\n  var storageList = q.PhaseVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var phases = q.Phases;\r\n  phases.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetMassGroupSettingStorageList = (q) => {\r\n  var dict = pmData().MassGroupSetting_Dict;\r\n  var items = dict.Items;\r\n  if (!items){\r\n    dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.MassGroupSettingStorageList = dict.Items;\r\n    })\r\n  }\r\n  return items;\r\n}\r\n\r\n\r\nexport const GetProjectPopoverStateValue = (q) => {\r\n  return q.ProjectSelectOpen ? 'none' : 'hover';\r\n}","export const _default = \"default\";\r\nexport const edit = \"edit\";","import * as util from './RenderItemUtil'\r\n\r\nexport default class RenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport RenderItem from \"./RenderItem\"\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new RenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (val) => val;\r\n    case rs.edit:\r\n      return (value, item, dataIndex) => {\r\n        if (!dataIndex) return value;\r\n\r\n        var inputVM = textUtil.get(value, 'input');\r\n\r\n        var length = dataIndex.length;\r\n        var obj = item;\r\n        dataIndex.filter((x, i) => i < length - 1)\r\n          .forEach((x) => obj = obj[x]);\r\n\r\n        inputVM.onSetContent = (v) => obj[dataIndex[length-1]] = v;\r\n        return <InputView store={inputVM} />\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './RenderItemUtil'\r\n\r\nexport default class Render_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport Render_Dict from './Render_Dict';\r\n\r\nexport default class TableColumn {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Title : observable,\r\n    })\r\n  }\r\n\r\n  RenderState = rs._default;\r\n\r\n  Title = undefined\r\n\r\n  render_Dict\r\n  get Render_Dict(){\r\n    if (!this.render_Dict){\r\n      this.render_Dict = new Render_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v){\r\n    this.render_Dict = v;\r\n  }\r\n}","import TableColumn from \"./TableColumn\"\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport { Button } from \"antd\";\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport const get = (title, dataIndex, renders, table) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n  qI.DataIndex = dataIndex;\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n  var dict = qI.Render_Dict;\r\n  if (renders) {\r\n    renders.forEach(x => {\r\n      dict.GetRender(x.State).Render = x.Render\r\n    });\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetActionColumn = (table) => {\r\n  var title = undefined;\r\n  if (table.CanAdd) {\r\n    var add = table.AddItem;\r\n\r\n    title = <Button type='primary' size='small'\r\n      onClick={add}>Add</Button>\r\n  }\r\n\r\n  var renders = [\r\n    renderUtil.get(rs._default, (val, item, dataIndex, cell, row) => {\r\n      var editElem = '';\r\n      if (table.CanEdit) {\r\n        var edit = () => row.Edit();\r\n        editElem = <Button type='primary' size='small'\r\n          style={{ backgroundColor: '#faad14', border: 'none' }}\r\n          onClick={edit}>Edit</Button>\r\n      }\r\n\r\n      var delElem = '';\r\n      if (table.CanDelete) {\r\n        var del = () => table.DeleteItem(item, row);\r\n\r\n        delElem = <Button type='primary' danger size='small'\r\n          onClick={del}>Delete</Button>\r\n      }\r\n      return <>\r\n        {editElem}{delElem}\r\n      </>\r\n    }),\r\n    renderUtil.get(rs.edit, (val, item, dataIndex, cell, row) => {\r\n      var ok = () => row.OK();\r\n      return <Button type='primary' size='small'\r\n        onClick={ok}>OK</Button>\r\n    })\r\n  ]\r\n\r\n  return get(title, null, renders, table);\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TableRowUtil'\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport default class TableRow {\r\n  key\r\n  get Key() {\r\n    if (!this.key) {\r\n      this.key = this.Item._id ? this.Item._id : this.Item.id;\r\n      if (!this.key){\r\n        this.key = genUtil.randomId();\r\n      }\r\n    }\r\n    return this.key;\r\n  }\r\n\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  Edit = () => {\r\n    this.Cells.forEach(x => x.RenderState = rs.edit);\r\n  }\r\n\r\n  OK = () => {\r\n    this.Cells.forEach(x => x.RenderState = rs._default);\r\n    this.Table.EditItem(this.Item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\n\r\nexport default class TableCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState: observable\r\n    })\r\n  }\r\n\r\n  get Key() {\r\n    return `${this.Column.Key}_${this.Row.Key}`;\r\n  }\r\n\r\n  get Item() {\r\n    return this.Row.Item;\r\n  }\r\n\r\n  renderState = undefined\r\n  get RenderState() {\r\n    if (!this.renderState){\r\n      this.renderState = this.Column.RenderState;\r\n    }\r\n    return this.renderState;\r\n  }\r\n  set RenderState(v){\r\n    this.renderState = v;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = this.Column.Render_Dict;\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n\r\n  get DataIndex() {\r\n    return this.Column.DataIndex;\r\n  }\r\n\r\n  Render = () => {\r\n    var dataIndex = this.DataIndex;\r\n    var item = this.Item;\r\n\r\n    var value = undefined;\r\n\r\n    if (dataIndex) {\r\n      value = item;\r\n      dataIndex.forEach(x => {\r\n        value = value[x]\r\n      })\r\n    }\r\n\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(value, item, dataIndex, this, this.Row);\r\n  }\r\n}","import TableRow from \"./TableRow\"\r\nimport * as cellUtil from './TableCellUtil'\r\n\r\nexport const get = (item, table) => {\r\n  var qI = new TableRow();\r\n  qI.Item = item;\r\n  qI.Table = table;\r\n  return qI;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var columns = q.Table.Columns;\r\n  return columns.map(x => cellUtil.get(q, x));\r\n}","import TableCell from \"./TableCell\"\r\n\r\nexport const get = (row, col) => {\r\n  var qI = new TableCell();\r\n  qI.Row = row;\r\n  qI.Column = col;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport TableColumn from './TableColumn';\r\nimport * as colUtil from './TableColumnUtil'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport * as rs from './RenderState'\r\nimport * as util from './TableVMUtil'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport InputView from '../input/InputView'\r\nimport { Button } from 'antd';\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as rowUtil from './TableRowUtil'\r\n\r\nexport default class TableVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      columns: observable,\r\n      dataSource: observable,\r\n      rows: observable,\r\n      CanAdd: observable,\r\n      CanDelete: observable,\r\n      CanEdit: observable,\r\n      IsShowActionColumn: observable\r\n    })\r\n  }\r\n\r\n  CanAdd = true\r\n  CanDelete = true\r\n  CanEdit = true\r\n  IsShowActionColumn = true\r\n\r\n  columns = undefined\r\n  get Columns() {\r\n    if (!this.columns) {\r\n      this.columns = [\r\n        colUtil.get('Tên cấu kiện', 'ElementName', null, this),\r\n        colUtil.get('Đường kính', 'Diameter', null, this),\r\n      ];\r\n\r\n      if (this.IsShowActionColumn) {\r\n        this.columns.push(colUtil.GetActionColumn(this));\r\n      }\r\n    }\r\n    return this.columns;\r\n  }\r\n  set Columns(v) {\r\n    this.columns = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  dataSource = undefined\r\n  get DataSource() {\r\n    if (!this.dataSource) {\r\n      this.dataSource = [\r\n        {\r\n          id: 1,\r\n          ElementName: 'W1',\r\n          Diameter: '18',\r\n          Weight: '30'\r\n        },\r\n        {\r\n          id: 2,\r\n          ElementName: 'W2',\r\n          Diameter: '20',\r\n          Weight: '3.7'\r\n        },\r\n      ]\r\n    }\r\n    return this.dataSource;\r\n  }\r\n  set DataSource(v) {\r\n    this.dataSource = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  rows = undefined\r\n  get Rows() {\r\n    if (!this.rows) {\r\n      this.rows = util.GetRows(this);\r\n    }\r\n    return this.rows;\r\n  }\r\n  set Rows(v) {\r\n    this.rows = v;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = undefined\r\n    if (this.OnGetItemForAdd) {\r\n      item = this.OnGetItemForAdd();\r\n    } else {\r\n      item = {\r\n        Key: genUtil.randomId()\r\n      };\r\n    }\r\n    this.DataSource.push(item);\r\n\r\n    var row = rowUtil.get(item, this);\r\n    this.Rows.push(row);\r\n    row.Edit();\r\n  }\r\n\r\n  DeleteItem = (item, row) => {\r\n    var list = this.DataSource;\r\n    var index = list.indexOf(item);\r\n    list.splice(index, 1);\r\n    this.Rows.splice(index, 1);\r\n\r\n    if (this.OnDeleteItem){\r\n      this.OnDeleteItem(item);\r\n    }\r\n  }\r\n\r\n  EditItem = (item) => {\r\n    if (this.OnEditItem){\r\n      this.OnEditItem(item);\r\n    }\r\n  }\r\n}","import * as rowUtil from './TableRowUtil'\r\n\r\nexport const GetRows = (q) => {\r\n  return q.DataSource.map(x => rowUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportDataVMUtil'\r\n\r\nexport class WorkItemExportDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      \r\n    })\r\n  }\r\n\r\n\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as checkboxUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport class WorkItemExportSettingVM extends SettingVM {\r\n  IsCategoryChecked = true\r\n\r\n  categoryCheckboxVM\r\n  get CategoryCheckboxVM(){\r\n    if (!this.categoryCheckboxVM){\r\n      debugger\r\n      var obj =this.categoryCheckboxVM = \r\n        checkboxUtil.get(undefined, this.IsCategoryChecked)\r\n    }\r\n    return this.categoryCheckboxVM;\r\n  }\r\n}","import * as dataVMUtil from './WorkItemExportDataVMUtil'\r\nimport { WorkItemExportSettingVM } from './WorkItemExportSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkItemExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { WorkItemExportDataVM } from './WorkItemExportDataVM';\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport class WorkItemExportSetting extends Setting {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportSetting_DictVMUtil'\r\nimport * as itemUtil from './WorkItemExportSettingVMUtil';\r\nimport { WorkItemExportSetting } from './WorkItemExportSetting';\r\n\r\nexport class WorkItemExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = [\r\n        itemUtil.get(new WorkItemExportSetting())\r\n      ]\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM) {\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","import TableVM from \"../../../../table/TableVM\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport CheckboxView from '../../../../checkbox/CheckboxView'\r\nimport { WorkItemExportSettingVM } from \"./WorkItemExportSettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n\r\n  var nameCol = colUtil.get('Tên thiết lập', ['Name'], null, qI);\r\n  var isCateCol = colUtil.get('Category', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      debugger\r\n      var checkBoxVM = item.CategoryCheckboxVM;\r\n      return <CheckboxView store={item.CategoryCheckboxVM}/>\r\n    })\r\n  ], qI);\r\n  var isSubWorkItemCol = colUtil.get('Hạng mục phụ', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      return <CheckboxView />\r\n    })\r\n  ], qI);\r\n\r\n  qI.Columns = [\r\n    nameCol, isCateCol, isSubWorkItemCol,\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return new WorkItemExportSettingVM();\r\n  }\r\n  \r\n  return qI;\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../model/PMData';\r\n\r\nimport * as workpackage_DictVMUtil from '../../entity/workpackage/Workpackage_DictVMUtil'\r\nimport * as elementFilterSetting_DictVMUtil from \r\n  '../../entity/setting/elementFilter/ElementFilterSetting_DictVMUtil'\r\nimport * as massExportSetting_DictVMUtil from \r\n  '../../entity/setting/massExport/MassExportSetting_DictVMUtil'\r\nimport * as massGroupSetting_DictVMUtil from \r\n  '../../entity/setting/massGroup/MassGroupSetting_DictVMUtil'\r\nimport * as project_DictVMUtil from '../../entity/project/Project_DictVMUtil'\r\n\r\nimport * as massResultCompVMUtil from '../../entity/mass/result/MassResultCompVMUtil'\r\n\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\n\r\nimport * as wieDictVMUtil from \r\n  '../../entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport const GetWorkpackage_DictVM = (data) => {\r\n  return workpackage_DictVMUtil.get(pmData().Workpackage_Dict);\r\n}\r\n\r\nexport const GetElementFilterSetting_DictVM = (data) => {\r\n  return elementFilterSetting_DictVMUtil.get\r\n    (pmData().ElementFilterSetting_Dict);\r\n}\r\n\r\nexport const GetMassExportSetting_DictVM = (data) => {\r\n  return massExportSetting_DictVMUtil.get\r\n    (pmData().MassExportSetting_Dict);\r\n}\r\n\r\nexport const GetMassGroupSetting_DictVM = (data) => {\r\n  return massGroupSetting_DictVMUtil.get\r\n    (pmData().MassGroupSetting_Dict);\r\n}\r\n\r\nexport const GetProject_DictVM = (data) => {\r\n  return project_DictVMUtil.get\r\n    (pmData().Project_Dict);\r\n}\r\n\r\nexport const GetMassResultCompVM= (data) => {\r\n  return massResultCompVMUtil.get\r\n  (pmData().MassResultComp);\r\n}\r\n\r\nexport const GetWorkItemExportSetting_Dict = (data) => {\r\n  return wieDictVMUtil.get(pmData().WorkItemExportSetting_Dict);\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMData } from '../model/PMData';\r\nimport * as util from './PMDataVMUtil'\r\n\r\nexport class PMDataVM {\r\n  constructor() {\r\n    \r\n  }\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMDataVM();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get pmData(){\r\n    return PMData.Instance;\r\n  }\r\n\r\n  workpackage_DictVM\r\n  get Workpackage_DictVM() {\r\n    if (!this.workpackage_DictVM){\r\n      this.workpackage_DictVM = util.GetWorkpackage_DictVM();\r\n    }\r\n    return this.workpackage_DictVM;\r\n  }\r\n\r\n  elementFilterSetting_DictVM\r\n  get ElementFilterSetting_DictVM() {\r\n    if (!this.elementFilterSetting_DictVM){\r\n      this.elementFilterSetting_DictVM = util.GetElementFilterSetting_DictVM();\r\n    }\r\n    return this.elementFilterSetting_DictVM;\r\n  }\r\n\r\n  massExportSetting_DictVM\r\n  get MassExportSetting_DictVM() {\r\n    if (!this.massExportSetting_DictVM){\r\n      this.massExportSetting_DictVM = util.GetMassExportSetting_DictVM();\r\n    }\r\n    return this.massExportSetting_DictVM;\r\n  }\r\n\r\n  massGroupSetting_DictVM\r\n  get MassGroupSetting_DictVM() {\r\n    if (!this.massGroupSetting_DictVM){\r\n      this.massGroupSetting_DictVM = util.GetMassGroupSetting_DictVM();\r\n    }\r\n    return this.massGroupSetting_DictVM;\r\n  }\r\n\r\n  project_DictVM\r\n  get Project_DictVM() {\r\n    if (!this.project_DictVM){\r\n      this.project_DictVM = util.GetProject_DictVM();\r\n    }\r\n    return this.project_DictVM;\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM(){\r\n    if (!this.massResultCompVM){\r\n      this.massResultCompVM = util.GetMassResultCompVM();\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n  set MassResultCompVM(v) {\r\n    this.massResultCompVM = v;\r\n    if (!v)\r\n    {\r\n      this.pmData.MassResultComp = v;\r\n    }\r\n    else{\r\n      this.pmData.MassResultComp = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = this.pmData.FilterValueTypes;\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = this.pmData.StringFilterTypes;\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.pmData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = this.pmData.ValueRetrieveTypes\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = this.pmData.ParameterNames;\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = this.pmData.MassPropertyNames;\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = this.pmData.MassTypes;\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = \r\n        util.GetWorkItemExportSetting_Dict(this);\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n}","import * as util from './MGS_FieldVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MGS_FieldVM {\r\n  get Index() {\r\n    return this.Dict.FieldVMs.indexOf(this);\r\n  }\r\n\r\n  get Fields(){\r\n    return this.Dict.ModelItem.Fields;\r\n  }\r\n\r\n  get Field(){\r\n    return this.Fields[this.Index];\r\n  }\r\n  set Field(v){\r\n    this.Fields[this.Index] = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return util.GetFieldStorageList();\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = selectVMUtil.get(this.FieldStorageList, this.Field);\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    var index = this.Index;\r\n    this.Fields.splice(index, 1);\r\n    \r\n    var list = this.Dict.FieldVMs;\r\n    list.splice(index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldSelectVM.InitialItem = v.Field;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MGS_FieldVM from \"./MGS_FieldVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MGS_FieldVM();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldStorageList = () => {\r\n  return pmDataVM().MassPropertyNames;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassGroupSettingDataVMUtil'\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport default class MassGroupSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fieldVMs : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  fieldVMs = undefined\r\n  get FieldVMs(){\r\n    if (!this.fieldVMs){\r\n      this.fieldVMs = util.GetFieldVMs(this);\r\n    }\r\n    return this.fieldVMs;\r\n  }\r\n  set FieldVMs(v){\r\n    var list = this.fieldVMs;\r\n    var modelList = this.ModelItem.Fields;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount){\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount){\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = originItemVM.Field;\r\n        modelList.push(item);\r\n\r\n        var itemVM = fieldVMUtil.get(item,this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewFieldVM = () => {\r\n    var item = this.ModelItem.AddNewField();\r\n    var itemView = fieldVMUtil.get(item, this);\r\n    this.FieldVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldVMs = v.FieldVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassGroupSettingDataVM from './MassGroupSettingDataVM';\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldVMs = (q) => {\r\n  var fields = q.ModelItem.Fields;\r\n  return fields.map(x => fieldVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassGroupSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    \r\n  }\r\n}","import * as dataVMUtil from './MassGroupSettingDataVMUtil'\r\nimport MassGroupSettingVM from './MassGroupSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as mif from '../item/MassItemField'\r\nimport MassColumn from './MassColumn';\r\nimport * as colUtil from './MassColumnUtil'\r\nimport * as rowUtil from './MassRowUtil'\r\nimport * as cellUtil from './MassCellUtil'\r\nimport * as util from './MassTableUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as st from '../../setting/base/SettingType'\r\nimport { message } from 'antd';\r\nimport * as mgsUtil from '../../setting/massGroup/MassGroupSettingUtil'\r\nimport * as mgsVMUtil from '../../setting/massGroup/MassGroupSettingVMUtil'\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport * as compUtil from './rowgroup/MassGroupComponentUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport default class MassTable {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsValidTable: observable,\r\n      Columns: observable,\r\n      MainRows: observable,\r\n      Cells: observable,\r\n      columnField: observable,\r\n      IsOnSaveMassGroup: observable\r\n    })\r\n  }\r\n\r\n\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    if (v && v.length !== 0) {\r\n      this.Build();\r\n      this.IsValidTable = true;\r\n    }\r\n    else {\r\n      this.IsValidTable = false;\r\n    }\r\n  }\r\n\r\n  IsValidTable = false\r\n\r\n  columnField = mif.Project\r\n  get ColumnField() {\r\n    return this.columnField;\r\n  }\r\n  set ColumnField(v) {\r\n    this.columnField = v;\r\n  }\r\n\r\n  massGroupSetting\r\n  get MassGroupSetting() {\r\n    return this.massGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.massGroupSetting = v;\r\n    if (!v) {\r\n      this.MainMGC = v;\r\n    } else {\r\n      this.MainMGC = compUtil.Clone(v.Data.MassGroupComponent);\r\n    }\r\n  }\r\n\r\n  mainMGC\r\n  get MainMGC() {\r\n    if (!this.mainMGC) {\r\n      this.mainMGC = util.GetMainMGC(this);\r\n    }\r\n    return this.mainMGC;\r\n  }\r\n  set MainMGC(v) {\r\n    this.mainMGC = v;\r\n    this.Init();\r\n    if (!v) {\r\n      this.MainMGI = undefined;\r\n    } else {\r\n      this.MainMGI = util.GetMainMGI(this);\r\n    }\r\n  }\r\n\r\n  mainMGI\r\n  get MainMGI() {\r\n    if (!this.mainMGI) {\r\n      this.mainMGI = util.GetMainMGI(this);\r\n    }\r\n    return this.mainMGI;\r\n  }\r\n  set MainMGI(v) {\r\n    this.mainMGI = v;\r\n  }\r\n\r\n  Columns = undefined\r\n  FullRows = undefined\r\n  MainRows = undefined\r\n  Cells = undefined\r\n\r\n  Init = () => {\r\n    this.Columns = [];\r\n    this.MainRows = [];\r\n    this.FullRows = [];\r\n    this.Cells = [];\r\n  }\r\n\r\n  get AllRows() {\r\n    return util.GetAllRows(this);\r\n  }\r\n\r\n  GetColumn = (v) => {\r\n    var list = this.Columns;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = colUtil.get(v, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetRow = (v, supItem) => {\r\n    var list = undefined;\r\n    if (supItem) {\r\n      list = supItem.SubItems;\r\n    } else {\r\n      list = this.MainRows;\r\n    }\r\n\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = rowUtil.get(v, this);\r\n      item.SupItem = supItem;\r\n\r\n      list.push(item);\r\n      this.FullRows.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetCell = (col, row) => {\r\n    var list = this.Cells;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Column === col && x.Row === row);\r\n    if (index === -1) {\r\n      item = cellUtil.get(col, row, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n\r\n  Build = () => {\r\n    var colField = this.ColumnField;\r\n\r\n    if (colField === mif.Phase) {\r\n      pmData().MassResultComp.Phases.forEach(x => {\r\n        var col = this.GetColumn(mif.GetValueString(x, colField));\r\n      })\r\n    }\r\n\r\n    this.Items.forEach(x => {\r\n      switch (colField) {\r\n        case mif.Phase:\r\n          x.ValidPhasesByInput.forEach(y => {\r\n            this.HandleItem(x, y);\r\n          })\r\n          break;\r\n        default:\r\n          this.HandleItem(x, x.GetValue(colField));\r\n          break;\r\n      }\r\n    })\r\n\r\n    if (!this.IsHaveAsyncData) {\r\n      this.UpdateData();\r\n    }\r\n  }\r\n\r\n  IsHaveAsyncData = false;\r\n  IsOnSaveMassGroup = false;\r\n\r\n  HandledItems = []\r\n\r\n  OnSetHandledRatio_Funcs = []\r\n\r\n  handledRatio\r\n  get HandledRatio(){\r\n    return this.handledRatio;\r\n  }set HandledRatio(v){\r\n    this.handledRatio = v;\r\n    this.OnSetHandledRatio_Funcs.forEach(x => x(v));\r\n  }\r\n\r\n  AddHandledItems = (item) => {\r\n    this.HandledItems.push(item);\r\n    this.HandledRatio = this.HandledItems.length / this.Items.length;\r\n\r\n    if (this.HandledItems.length === this.Items.length) {\r\n      this.UpdateData();\r\n      this.HandledItems = [];\r\n    }\r\n  }\r\n\r\n  UpdateData = () => {\r\n    this.MainRows.forEach(x => x.UpdateData());\r\n    this.MainRows = rowUtil.Order(this.MainRows);\r\n\r\n    this.Cells.forEach(x => x.UpdateData());\r\n    this.IsUpdateDataDone = true;\r\n  }\r\n\r\n  OnIsUpdateDataDone_Funcs = []\r\n\r\n  set IsUpdateDataDone(v){\r\n    this.OnIsUpdateDataDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  HandleItem = (item, colFieldValue, mgc, initialRow) => {\r\n    var col =\r\n      this.GetColumn(mif.GetValueString(colFieldValue, this.ColumnField));\r\n    var rows = initialRow ? [initialRow] : [];\r\n    var mgc = mgc ? mgc : this.MainMGC;\r\n\r\n    this.HandleRowFieldIndex(item, col, rows, mgc, 0);\r\n  }\r\n\r\n  // Xử lý tạo Row với giá trị tương ứng và Cell bên trong\r\n  GetRow_Value_FieldIndex = (item, col, rows, val, mgc, rowFieldIndex) => {\r\n    var mgis = mgc.Items;\r\n    var itemCount = mgis.length;\r\n    var mgi = mgis[rowFieldIndex];\r\n\r\n    var lastRow = rows.length !== 0 ? rows[rows.length - 1] : undefined\r\n    mgi.SupRow = lastRow;\r\n\r\n    var rowField = mgi.Field;\r\n    if (!rowField) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var valueString = mif.GetValueString(val, rowField);\r\n    var fullValue = lastRow ? `${lastRow.FullValue}__${valueString}` : valueString;\r\n\r\n    if (mgi.NotIncludeValues.includes(fullValue)) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var row = undefined;\r\n    const addRow = (supRow) => {\r\n      return this.Handle_AddRow(fullValue, supRow);\r\n    }\r\n\r\n    const handleRow = (row) => {\r\n      row.MassGroupItem = mgi;\r\n      rows.push(row);\r\n\r\n      var subMgcs = mgi.SubComponents;\r\n      var subIndex = subMgcs.findIndex(x =>\r\n        filterUtil.IsValid(x.Filter, fullValue));\r\n      if (subIndex !== -1) {\r\n        mgc = subMgcs[subIndex];\r\n        mgc.IsHaveMassItem = true;\r\n\r\n        rowFieldIndex = -1;\r\n        itemCount = mgc.Items.length;\r\n\r\n        row.SubMassGroupComponent = mgc;\r\n      }\r\n\r\n      var cell = this.GetCell(col, row);\r\n      cell.Items.push(item);\r\n\r\n      if (rowFieldIndex === itemCount - 1) {\r\n        this.AddHandledItems(item);\r\n      } else {\r\n        this.HandleRowFieldIndex(item, col, rows, mgc, rowFieldIndex + 1);\r\n      }\r\n    }\r\n\r\n    var mgiItem = mgi.GetItem(fullValue, valueString);\r\n    var replaceMgi = mgiItem.NewMGI;\r\n    if (replaceMgi) {\r\n      // Thêm Value-Title cho MassGroupItem\r\n      replaceMgi.GetItem(fullValue, valueString);\r\n\r\n      this.Handle_ReplaceMGI(replaceMgi, addRow, handleRow);\r\n    } else {\r\n      row = addRow(lastRow);\r\n      handleRow(row);\r\n    }\r\n  }\r\n\r\n  Handle_AddRow = (fullValue, supRow) => {\r\n    var r1 = this.GetRow(fullValue, supRow);\r\n    r1.FullValue = fullValue;\r\n    return r1;\r\n  }\r\n\r\n  Handle_ReplaceMGI = (replaceMgi, addRow, handleRow) => {\r\n    const awaitGetSupRowForAdd = () => {\r\n      var supRow = replaceMgi.SupRow;\r\n      var r2 = addRow(supRow);\r\n      r2.ReplaceMGI = replaceMgi;\r\n\r\n      return r2;\r\n    }\r\n\r\n    var row = undefined\r\n    if (replaceMgi.IsFirstSetSupRow) {\r\n      row = awaitGetSupRowForAdd();\r\n      handleRow(row);\r\n    } else {\r\n      replaceMgi.OnIsFirstSetSupRow_Funcs.push(() => {\r\n        row = awaitGetSupRowForAdd();\r\n        handleRow(row);\r\n      })\r\n    }\r\n  }\r\n\r\n  HandleRowFieldIndex = (item, col, rows, mgc, rowFieldIndex) => {\r\n    var rowField = mgc.Items[rowFieldIndex].Field;\r\n\r\n    var val = item.GetValue(rowField, (val) =>\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex));\r\n    if (!Array.isArray(val)) {\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex);\r\n    } else {\r\n      this.IsHaveAsyncData = true;\r\n    }\r\n  }\r\n\r\n  SaveMassGroup = () => {\r\n    this.IsOnSaveMassGroup = true;\r\n  }\r\n\r\n  massGroupName = undefined\r\n  get MassGroupName() {\r\n    if (!this.massGroupName) {\r\n      this.massGroupName = util.GetMassGroupName(this);\r\n    }\r\n    return this.massGroupName;\r\n  }\r\n  set MassGroupName(v) {\r\n    this.massGroupName = v;\r\n  }\r\n\r\n  massGroupNameVM\r\n  get MassGroupNameVM() {\r\n    if (!this.massGroupNameVM) {\r\n      var obj = this.massGroupNameVM =\r\n        textUtil.get(this.MassGroupName, 'Tên set khối lượng');\r\n      obj.onSetContent = (v) => this.MassGroupName = v;\r\n    }\r\n    return this.massGroupNameVM;\r\n  }\r\n\r\n  MassGroupInputOK = () => {\r\n    var items = pmData().MassGroupSetting_Dict.Items;\r\n    var index = items.findIndex(x => x.Name === this.MassGroupName);\r\n    var _id = undefined;\r\n    if (index !== -1) {\r\n      _id = items[index]._id;\r\n    }\r\n\r\n    var apiData = {\r\n      _id,\r\n      name: this.MassGroupName,\r\n      settingType: st.massgroup,\r\n      data: {\r\n        massGroupComponent: this.MainMGC.ApiData\r\n      }\r\n    };\r\n\r\n    var url = `https://api.bimdev.vn/api/hbs/mg`;\r\n\r\n    var command = _id ? 'edit' : 'add';\r\n    const apiFunc = () => _id ? api.put(`${url}/${command}`, apiData) :\r\n      api.post(`${url}/${command}`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        var dict = pmData().MassGroupSetting_Dict;\r\n        var item = mgsUtil.get(data, dict);\r\n        dict.Items.push(item);\r\n\r\n        var dictVM = pmDataVM().MassGroupSetting_DictVM;\r\n        var itemVM = mgsVMUtil.get(item, dictVM);\r\n        dictVM.Items.push(itemVM);\r\n\r\n        message.success(`${command} massgroup successfully`);\r\n      })\r\n\r\n    this.IsOnSaveMassGroup = false;\r\n    this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n  }\r\n\r\n  MassGroupInputCancel = () => {\r\n    this.IsOnSaveMassGroup = false;\r\n    this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n  }\r\n\r\n  AddMainRow = () => {\r\n    return rowUtil.Add(undefined, this);\r\n  }\r\n}","import MassColumn from \"./MassColumn\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassColumn();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import MassTable from \"../table/MassTable\";\r\n\r\nexport default class MassItem_Dict {\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n    this.MassTable.Items = v;\r\n  }\r\n\r\n  massTable\r\n  get MassTable() {\r\n    if (!this.massTable) {\r\n      this.massTable = new MassTable();\r\n    }\r\n    return this.massTable;\r\n  }\r\n\r\n  set MassGroupSetting(v)  {\r\n    this.MassTable.MassGroupSetting = v;\r\n  }\r\n}","import * as util from './MassItemUtil'\r\nimport * as mif from './MassItemField'\r\nimport { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport default class MassItem {\r\n  Value\r\n  Unit\r\n\r\n  projectId\r\n\r\n  project\r\n  get Project() {\r\n    if (!this.project) {\r\n      this.project = util.GetProject(this);\r\n    }\r\n    return this.project;\r\n  }\r\n\r\n  workpackageId\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    if (!this.workpackage) {\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = util.GetPhases(this);\r\n    }\r\n    return this.phases;\r\n  }\r\n\r\n  get ValidPhasesByInput() {\r\n    return util.GetValidPhasesByInput(this);\r\n  }\r\n\r\n  IsGetElement = false\r\n\r\n  OnGetElementDone_Funcs = []\r\n\r\n  set GetElementDone(v) {\r\n    this.OnGetElementDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  GetValue = (field) => {\r\n    if (!field) {\r\n      return;\r\n    }\r\n\r\n    var data = mif.GetFullFields(this, field);\r\n    var { fields, isFromElement } = data;\r\n\r\n    var getValFunc = () => {\r\n      var obj = this;\r\n      var isValid = true;\r\n\r\n      fields.forEach(x => {\r\n        if (isValid) {\r\n          var temp = obj[x];\r\n          obj = temp;\r\n          if (obj === undefined) {\r\n            isValid = false;\r\n          }\r\n        }\r\n      })\r\n\r\n      return obj;\r\n    }\r\n\r\n    if (!isFromElement || this.Element) {\r\n      return getValFunc();\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id: this._id,\r\n      projectId: this.projectId,\r\n      elementId: this.elementId,\r\n      workpackageId: this.workpackageId,\r\n      exportSetId: this.exportSetId,\r\n      exportSetVersionId: this.exportSetVersionId,\r\n      value: this.Value,\r\n      unit: this.Unit,\r\n      massType: this.MassType,\r\n      info: this.Info\r\n    }\r\n  }\r\n\r\n  AddDatabase = (handle) => {\r\n    var apiData = this.ApiData;\r\n    var { _id } = apiData;\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n\r\n    var command = _id ? 'edit' : 'add';\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/${command}`, apiData) : api.post(`${url}/${command}`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (command === 'add') {\r\n          this._id = data._id;\r\n        }\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`${command} mass successfully`);\r\n      })\r\n  }\r\n\r\n  DeleteDatabase = (handle) => {\r\n    var apiData = {\r\n      _id: this._id\r\n    };\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n    const apiFunc = () => api.put(`${url}/delete`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`delete mass successfully`);\r\n      })\r\n  }\r\n\r\n  Get_Count = 0;\r\n\r\n  IsGet_TLS_LevelGroup = false\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n  set Get_TLS_LevelGroup(v) {\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n    this.Get_Count ++;\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      this.tls_LevelGroup = util.GetTLS_LevelGroup(this);\r\n    }\r\n    return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true;\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    this.OnGet_FullValue_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  // bao gồm giá trị tầng điển hình\r\n  fullValue\r\n  get FullValue() {\r\n    if (!this.fullValue) {\r\n      this.fullValue = util.GetFullValue(this);\r\n    }\r\n    return this.fullValue;\r\n  } set FullValue(v) {\r\n    this.fullValue = v;\r\n    this.Get_FullValue = true;\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport MassItem from './MassItem';\r\nimport * as elementUtil from '../../element/ElementUtil'\r\nimport * as mt from '../MassType'\r\nimport * as ut from '../../value/ValueUnit'\r\nimport * as mif from './MassItemField'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new MassItem();\r\n\r\n  qI._id = q._id;\r\n  qI.Value = q.value;\r\n  qI.Unit = q.unit;\r\n  qI.MassType = q.massType;\r\n  qI.Info = q.info;\r\n  qI.projectId = q.projectId;\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.exportSetId = q.exportSetId;\r\n  qI.exportSetVersionId = q.exportSetVersionId;\r\n  qI.Element = q.Elements && q.Elements.length !== 0 ? q.Elements[0] : undefined;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultRebarMass = (project) => {\r\n  var qI = new MassItem();\r\n\r\n  qI.Unit = ut.kg;\r\n  qI.MassType = mt.rebar;\r\n  qI.Info = {}\r\n  qI.projectId = project._id;\r\n\r\n  const setExportSetData = (exportSet) => {\r\n    qI.exportSetId = exportSet._id;\r\n\r\n    var currentVersion = exportSet.CurrentVersion;\r\n    if (!currentVersion) {\r\n      exportSet.OnGetCurrentVersionDone_Func.push(() => {\r\n        currentVersion = exportSet.CurrentVersion;\r\n        qI.exportSetVersionId = currentVersion._id;\r\n      })\r\n    } else {\r\n      qI.exportSetVersionId = currentVersion._id;\r\n    }\r\n  }\r\n\r\n  var inputExportSet = project.InputExportSet;\r\n  if (!inputExportSet) {\r\n    project.OnGetInputExportSetDone_Funcs\r\n      .push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        setExportSetData(inputExportSet);\r\n      })\r\n  } else {\r\n    setExportSetData(inputExportSet);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProject = (q) => {\r\n  var list = pmData().Project_Dict.Items;\r\n  var { projectId } = q;\r\n  var index = list.findIndex(x => x._id === projectId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const getAll = (apiData, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbmr/newlist\";\r\n\r\n  //var start = window.performance.now();\r\n\r\n  api.post(url, apiData, undefined, 2000000)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      //var end = window.performance.now();\r\n      //console.log(`Execution time: ${(end - start)/1000} s`);\r\n\r\n      if (!data) {\r\n        console.log('mass result undefined');\r\n        return;\r\n      }\r\n\r\n      var items = data.map(x => {\r\n        return get(x)\r\n      })\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getRebars = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbmr/rebar?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = undefined;\r\n      if (!data) {\r\n        items = [];\r\n      } else {\r\n        var items = data.map(x => get(x))\r\n      }\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getByViewDetail = (_id, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbdv/massdetail?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var { viewDetail, masses } = data;\r\n      var isGetElement = mt.IsGetElement(viewDetail.massType);\r\n      var items = masses.map(x => get(x, isGetElement));\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetWorkpackage = (q) => {\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var { workpackageId } = q;\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetPhases = (q) => {\r\n  var list = [];\r\n  var phases = pmData().Phase_Dict.Items;\r\n  var exportSetVersionId = q.exportSetVersionId;\r\n  phases.forEach(x => {\r\n    if (x.exportSetVersionIds.includes(exportSetVersionId)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetValidPhasesByInput = (q) => {\r\n  var inputPhases = pmData().MassResultComp.Phases;\r\n  var phases = q.Phases;\r\n  var list = [];\r\n  phases.forEach(x => {\r\n    if (inputPhases.includes(x)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetElementAsync = (q) => {\r\n  var elemId = q.elementId\r\n  if (elemId) {\r\n    elementUtil.GetById(elemId, (data) => {\r\n      q.Element = data\r\n      q.IsGetElement = true;\r\n      q.GetElementDone = true;\r\n    });\r\n  } else {\r\n    q.IsGetElement = true;\r\n  }\r\n}\r\n\r\nexport const GetTLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  var project = q.Project;\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    var pi = GetValidTLS_PageItem(q, tls.Data);\r\n    return GetValidTLS_LevelGroup(q, pi);\r\n  }\r\n\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    return getLevelGroup_Func(tls);\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TLS_LevelGroup = getLevelGroup_Func(project.TypicalLevelSetting);\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      isValid = x.Values.includes(q.GetValue(field));\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // Kiểm tra Level hiện tại có trong tập hợp Level hay không\r\n    //if (!validLg && x.Levels.includes(q.GetValue(mif.level))) {\r\n\r\n    // Cách kiểm tra mới: Level primary tương ứng Leve hiện tại\r\n    if (!validLg && x.Primary === q.GetValue(mif.level)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\nexport const GetFullValue = (q) => {\r\n  if (q.IsGet_FullValue) return undefined;\r\n  q.IsGet_FullValue = true;\r\n\r\n  const getFullValue_Func = (lg) => {\r\n    var count = lg ? lg.Count : 1\r\n    return q.Value * count;\r\n  }\r\n\r\n  if (q.TLS_LevelGroup) {\r\n    return getFullValue_Func(q.TLS_LevelGroup)\r\n  } else {\r\n    genUtil.Add(q.OnGet_TLS_LevelGroup_Func_Dict,\r\n      () => q.FullValue = getFullValue_Func(q.TLS_LevelGroup));\r\n  }\r\n}","import MassItem_Dict from '../item/MassItem_Dict';\r\nimport * as util from './MassResultCompUtil'\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as mif from '../item/MassItemField'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassResultComp {\r\n  Projects = []\r\n\r\n  Phases = []\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict(){\r\n    if (!this.massItem_Dict){\r\n      this.massItem_Dict = new MassItem_Dict();\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  isHavePhase = false\r\n  get IsHavePhase(){\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v){\r\n    this.isHavePhase = v;\r\n    if (v){\r\n    this.MassItem_Dict.MassTable.ColumnField = mif.Phase\r\n    }else{\r\n      this.MassItem_Dict.MassTable.ColumnField = mif.Project\r\n    }\r\n  }\r\n\r\n  GetMassData = () => {\r\n    var wp_Dict = pmData().Workpackage_Dict;\r\n    if (wp_Dict.IsDataChanged){\r\n      wp_Dict.RefreshData();\r\n    }\r\n\r\n    massItemUtil.getAll(this.ApiData, (items) => {\r\n      var dict = this.MassItem_Dict;\r\n\r\n      dict.MassGroupSetting = this.MassGroupSetting ? \r\n        this.MassGroupSetting : undefined;\r\n      dict.Items = items;\r\n      \r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n}","export const GetApiData = (q) => {\r\n  return {\r\n    projectIds : q.Projects.map(x => x._id),\r\n    phaseIds : q.IsHavePhase ? q.Phases.map(x => x._id) : undefined\r\n  }\r\n}","import { Button, message, Space, Tag } from \"antd\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport TableVM from \"../../../../table/TableVM\";\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new RebarMass_Dict();\r\n  qI.Project = project;\r\n\r\n  var projectId = qI.projectId;\r\n  massItemUtil.getRebars(projectId, (items) => {\r\n    qI.Items = items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n  qI.Columns = [\r\n    colUtil.get('Tên cấu kiện', ['Info', 'elementName'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.elementName)\r\n      ], qI),\r\n\r\n    colUtil.get('Hạng mục', ['Info', 'workItem'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.workItem)\r\n      ], qI),\r\n\r\n    colUtil.get('Đường kính', ['Info', 'diameter'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.diameter)\r\n      ], qI),\r\n\r\n    colUtil.get('Khối lượng', ['Value'], null, qI),\r\n\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return massItemUtil.GetDefaultRebarMass(q.Project);\r\n  }\r\n\r\n  qI.OnEditItem = (item) => {\r\n    item.AddDatabase();\r\n  }\r\n\r\n  qI.OnDeleteItem = (item) => {\r\n    item.DeleteDatabase();\r\n  }\r\n\r\n  return qI;\r\n}","export const m = \"m\";\r\nexport const m2 = \"m2\";\r\nexport const m3 = \"m3\";\r\nexport const kg = \"kg\";","import * as util from './RebarMass_DictUtil'\r\n\r\nexport default class RebarMass_Dict {\r\n  project\r\n  get Project(){\r\n    return this.project;\r\n  }\r\n  set Project(v){\r\n    this.project = v;\r\n    this.projectId = v._id;\r\n  }\r\n\r\n  projectId\r\n\r\n  items = []\r\n  get Items(){\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.TableVM.DataSource = v;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM){\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","\r\nexport default class Phase {\r\n  exportSetVersions\r\n  get ExportSetVersions(){\r\n    return this.exportSetVersions;\r\n  }\r\n  set ExportSetVersions(v){\r\n    this.exportSetVersions = v;\r\n    this.exportSetVersionIds = v.map(x => x._id);\r\n  }\r\n\r\n  OnGetExportSetVersions_Func = [];\r\n\r\n  set GetExportSetVersions(v){\r\n    this.OnGetExportSetVersions_Func.forEach(x => x());\r\n  }\r\n\r\n  exportSetVersionIds\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport Phase from './Phase';\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Phase();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.Dict = dict;\r\n\r\n  GetExportSetVersionData(q._id, (data) => {\r\n    qI.ExportSetVersions = data;\r\n    qI.GetExportSetVersions = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbphase/list?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}\r\n\r\nexport const GetExportSetVersionData = (phaseId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/byphase?phaseId=${phaseId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}","import { message } from 'antd';\r\nimport * as util from './Phase_DictUtil'\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as itemUtil from './PhaseUtil'\r\nimport * as settingUtil from '../setting/base/SettingUtil'\r\n\r\nexport class Phase_Dict {\r\n  get Project() {\r\n    return this.Dict;\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n  \r\n  AddMassVersion = () => {\r\n    var apiData = this.Input.ApiData;\r\n    var url = `https://api.bimdev.vn/api/hbphase`;\r\n\r\n    const apiFunc = () => api.put(`${url}/mass/add`, apiData);\r\n    var project = this.Project;\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        var item = itemUtil.get(data, this);\r\n        this.Add(item);\r\n        message.success(\"create version successfully!\");\r\n\r\n        settingUtil.AddPhase(project._id, data._id);\r\n      })\r\n\r\n    // Thêm version mới cho InputExportSet sau khi lưu version\r\n    var addVersionFunc = (exportSet) => exportSet.AddVersion();\r\n\r\n    var inputExportSet = project.InputExportSet;\r\n    if (!inputExportSet){\r\n      project.OnGetInputExportSetDone_Funcs.push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        addVersionFunc(inputExportSet);\r\n      })\r\n    }else{\r\n      addVersionFunc(inputExportSet);\r\n    }\r\n  }\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport const AddPhase = (projectId, phaseId) => {\r\n  var apiData = {\r\n    projectId, phaseId\r\n  }\r\n  var url = `https://api.bimdev.vn/api/hbs`;\r\n\r\n  const apiFunc = () => api.post(`${url}/addphase`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      message.success(\"attach phase to settings successfully!\");\r\n    })\r\n}","export default class PhaseInput {\r\n  get ApiData(){\r\n    var projectId = this.Dict.Dict._id;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n\r\n    return {\r\n      projectId, name, description\r\n    }\r\n  }\r\n}","import { Phase_Dict } from \"./Phase_Dict\";\r\nimport * as phaseUtil from './PhaseUtil'\r\nimport * as inputUtil from './PhaseInputUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Phase_Dict();\r\n  qI.Dict = project;\r\n\r\n  phaseUtil.getByProject(project._id, (data) => {\r\n    qI.Items = data.map(x => phaseUtil.get(x, qI));\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputUtil.get(q);\r\n}","import PhaseInput from './PhaseInput';\r\n\r\nexport const get = (dict) => {\r\n  var qI = new PhaseInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Version 1';\r\n  qI.Description = 'mô tả phiên bản';\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './LevelGroupUtil'\r\n\r\nexport class LevelGroup {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.LevelGroups.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      levels : this.Levels ? this.Levels : [],\r\n      primary: this.Primary\r\n    }\r\n  }\r\n\r\n  get Count(){\r\n    return this.Levels.length\r\n  }\r\n\r\n\r\n  OnGetLevelStorageList_Func_Dict = []\r\n  get GetLevelStorageList(){\r\n    return this.getLevelStorageList;\r\n  }\r\n  set GetLevelStorageList(v){\r\n    this.getLevelStorageList = v;\r\n    this.OnGetLevelStorageList_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  IsGet_LevelStorageList\r\n\r\n  get LevelStorageList (){\r\n    var obj = this.Dict.LevelStorageList;\r\n    if (!obj && !this.IsGet_LevelStorageList){\r\n      this.IsGet_LevelStorageList = true;\r\n      this.Setting.OnGetLevelStorageList_Funcs.push(() => {\r\n        this.GetLevelStorageList = true\r\n      });\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Setting (){\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  get LevelIndexs(){\r\n    return this.Levels.map(x => this.LevelStorageList.indexOf(x));\r\n  }\r\n\r\n  get MinLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.min.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get MaxLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.max.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get Description(){\r\n    if (!this.LevelStorageList) return undefined;\r\n    return `Typ: ${this.MinLevel} - ${this.MaxLevel} (${this.Count})`;\r\n  }\r\n\r\n  get FullDescription() {\r\n    if (!this.Description) return undefined;\r\n    return `${this.Dict.FilterDescription} (${this.Description})`;\r\n  }\r\n\r\n  primary\r\n  get Primary(){\r\n    if (!this.primary){\r\n      this.primary = util.GetDefaultPrimary(this);\r\n    }\r\n    return this.primary\r\n  } set Primary(v){\r\n    this.primary = v;\r\n  }\r\n}","import { LevelGroup } from \"./LevelGroup\"\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new LevelGroup();\r\n\r\n  if (Array.isArray(data)) {\r\n    qI.Levels = data;\r\n  } else {\r\n    qI.Levels = data.levels;\r\n    qI.Primary = data.primary\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LevelGroup();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport class TLS_Filter {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  //Values = [ 'Cột' ]\r\n  Values = [ ]\r\n\r\n  AddValue = () => {\r\n    var item = undefined;\r\n    this.Values.push(item);\r\n    return item;\r\n  }\r\n\r\n  field\r\n  get Field(){\r\n    if (!this.field){\r\n      this.field = this.FieldStorageList[0]\r\n    }\r\n    return this.field;\r\n  } set Field(v){\r\n    this.field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      field : this.Field,\r\n      values : this.Values.filter(x => x && x.length !== 0)\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Description() {\r\n    var obj =  this.Values.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += ', ';\r\n      }\r\n      a += b;\r\n      return a;\r\n    }, '')\r\n\r\n    return `${this.Field}: ${obj}`;\r\n  }\r\n}","import { TLS_Filter } from \"./TLS_Filter\";\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Field = data.field;\r\n  qI.Values = data.values;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\nimport * as util from './TLS_PageItemUtil'\r\n\r\nexport class TLS_PageItem {\r\n  _id\r\n  get id(){\r\n    if (!this._id){\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  Name = 'tên setting'\r\n\r\n  get Index (){\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.PageItems.splice(this.Index, 1);\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  // Level Groups\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups\r\n  get LevelGroups(){\r\n    if (!this.levelGroups){\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  } set LevelGroups(v){\r\n    this.levelGroups = v;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.GetDefault(this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  filters\r\n  get Filters(){\r\n    if (!this.filters){\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  } set Filters(v){\r\n    this.filters = v;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.GetDefault(this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n\r\n  get FilterDescription() {\r\n    var obj = this.Filters.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += '; ';\r\n      }\r\n      a += b.Description;\r\n      return a;\r\n    }, '')\r\n    return obj;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      levelGroups : this.LevelGroups.map(x => x.ApiData).filter(x => x.levels.length !== 0),\r\n      filters : this.Filters.map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n}","import { TLS_PageItem } from \"./TLS_PageItem\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = data.name;\r\n  qI.Filters = data.filters.map(x => filterUtil.get(x, qI));\r\n  qI.LevelGroups = data.levelGroups ? data.levelGroups.map(x => levelGroupUtil.get(x, qI))\r\n     : data.levels.map(x => levelGroupUtil.get(x, qI))\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = 'setting 1';\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetLevelGroups = (q) => {\r\n  return [ levelGroupUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return [ filterUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport class TypicalLevelSettingData {\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n  \r\n  // Page Item\r\n  pageItems\r\n  get PageItems(){\r\n    if (!this.pageItems){\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  } set PageItems(v){\r\n    this.pageItems = v;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.GetDefault(this);\r\n    this.PageItems.push(item);\r\n    item.Name = `setting ${item.Index +1}`\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      pageItems : this.PageItems.map(x => x.ApiData)\r\n    }\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSettingData } from './TypicalLevelSettingData';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.PageItems = data.pageItems.map(x => pageItemUtil.get(x, qI));\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return [ pageItemUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingUtil'\r\n\r\nexport class TypicalLevelSetting extends Setting {\r\n  fieldFilterStorageList\r\n  get FieldFilterStorageList(){\r\n    if (!this.fieldFilterStorageList){\r\n      this.fieldFilterStorageList = util.GetFieldFilterStorageList();\r\n    }\r\n    return this.fieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    util.SaveDatabase(this)\r\n  }\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n    this.GetLevelStorageList = true;\r\n  }\r\n\r\n  OnGetLevelStorageList_Funcs = []\r\n\r\n  set GetLevelStorageList(v){\r\n    this.OnGetLevelStorageList_Funcs.forEach(x => x());\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './TypicalLevelSettingDataUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSetting } from './TypicalLevelSetting';\r\nimport * as st from '../base/SettingType'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\nimport { message } from 'antd';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (data, project, phase) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.SettingType = data.settingType;\r\n  qI.Data = dataUtil.get(data.data, qI);\r\n  qI.Project = project;\r\n  qI.Phase = phase;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (project) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI.Name = 'thiết lập ...';\r\n  qI.Description = 'Mô tả thiết lập ...';\r\n  qI.SettingType = st.typicallevel\r\n  qI.Data = dataUtil.GetTest(qI);\r\n  qI.Project = project;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFromDb_Async = (project, phase, handle) => {\r\n  var apiData = {\r\n    projectId : project._id,\r\n    phaseId : phase?._id\r\n  }\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  const apiFunc = () => api.post(`${url}/get`, apiData)\r\n  \r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      var resData = data ? get(data, project, phase) : undefined;\r\n      var editData = resData ? resData : GetTest(project);\r\n      handle(resData, editData);\r\n    })\r\n}\r\n\r\n// Property\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}\r\n\r\n// Method\r\nexport const SaveDatabase = (q) => {\r\n  var _id = q._id;\r\n  var apiData = q.ApiData;\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  var isNew = _id ? true : false\r\n  const apiFunc = () => isNew ?\r\n     api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n  \r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew) q._id = data._id\r\n      message.success('add setting successfully!');\r\n    })\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  var level_Dict = q.Project.Level_Dict;\r\n\r\n  const getLevelsFunc = (items) => { \r\n    return items.map(x => x.Name);\r\n  }\r\n\r\n  if (level_Dict.Items){\r\n    return getLevelsFunc();\r\n  } else{\r\n    level_Dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.LevelStorageList = getLevelsFunc(level_Dict.Items);\r\n    });\r\n  }\r\n}\r\n","import RebarMass_Dict from '../mass/rebar/RebarMass_Dict';\r\nimport * as phaseDictUtil from '../phase/Phase_DictUtil'\r\nimport * as util from './ProjectUtil'\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\nexport default class Project {\r\n  phase_Dict\r\n  get Phase_Dict() {\r\n    if (!this.phase_Dict) {\r\n      this.phase_Dict = phaseDictUtil.get(this);\r\n    }\r\n    return this.phase_Dict;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = util.GetRebarMass_Dict(this);\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  inputExportSet\r\n  get InputExportSet() {\r\n    if (!this.inputExportSet) {\r\n      util.GetInputExportSet_Async(this);\r\n    }\r\n    return this.inputExportSet;\r\n  }\r\n  set InputExportSet(v) {\r\n    this.inputExportSet = v;\r\n    this.GetInputExportSetDone = true;\r\n  }\r\n\r\n  OnGetInputExportSetDone_Funcs = []\r\n\r\n  getInputExportSetDone\r\n  get GetInputExportSetDone() {\r\n    return this.getInputExportSetDone;\r\n  }\r\n  set GetInputExportSetDone(v) {\r\n    this.getInputExportSetDone = v;\r\n    this.OnGetInputExportSetDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  level_Dict\r\n  get Level_Dict() {\r\n    if (!this.level_Dict) {\r\n      this.level_Dict = util.GetLevel_Dict(this);\r\n    }\r\n    return this.level_Dict;\r\n  }\r\n\r\n  OnGetTypicalLevelSetting_Funcs = []\r\n\r\n  set GetTypicalLevelSetting(v) {\r\n    this.OnGetTypicalLevelSetting_Funcs.forEach(x => x());\r\n  }\r\n\r\n  IsOnGetDb_Async\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this, null, (resData, editData) => {\r\n          this.TypicalLevelSetting = resData;\r\n          this.TypicalLevelSetting_ForEdit = editData;\r\n          this.GetTypicalLevelSetting = true\r\n        })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = this.TypicalLevelSetting;\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  url\r\n  get Url() {\r\n    if (!this.url) {\r\n      var isHash = true;\r\n      var obj = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/project`;\r\n      obj = `${obj}/${this._id}`;\r\n\r\n      this.url = obj;\r\n    }\r\n    return this.url;\r\n  }\r\n}","import * as util from './ExportSetUtil'\r\n\r\nexport class ExportSet {\r\n  currentVersion\r\n  get CurrentVersion(){\r\n    if (!this.currentVersion){\r\n      util.GetCurrentVersion_Async(this);\r\n    }\r\n    return this.currentVersion;\r\n  }\r\n  set CurrentVersion(v){\r\n    this.currentVersion = v;\r\n    this.GetCurrentVersionDone = v;\r\n  }\r\n\r\n  OnGetCurrentVersionDone_Func =[]\r\n\r\n  set GetCurrentVersionDone(v){\r\n    this.OnGetCurrentVersionDone_Func.forEach(x => x());\r\n  }\r\n\r\n  AddVersion = () => {\r\n    util.AddVersion_Async(this);\r\n  }\r\n}","export class ExportSetVersion {\r\n  \r\n}","import * as api from  '../../../../util/apiUtil'\r\nimport { ExportSetVersion } from \"./ExportSetVersion\";\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSetVersion();\r\n  qI._id = data._id;\r\n  return qI;\r\n}\r\n\r\nexport const getLastestByExportSet = (exportSetId, handle) => {\r\n  if (!exportSetId) return;\r\n  var url = `https://api.bimdev.vn/api/hbesv/last?exportSetId=${exportSetId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","import { ExportSet } from \"./ExportSet\"\r\nimport * as api from  '../../../../util/apiUtil'\r\nimport * as versionUtil from './ExportSetVersionUtil'\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSet();\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.RetrieveFrom = data.retrieveFrom;\r\n  return qI;\r\n}\r\n\r\nexport const GetCurrentVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  versionUtil.getLastestByExportSet(exportSetId, (item) => {\r\n    if (!item) {\r\n      AddVersion_Async(q);\r\n    } else {\r\n      q.CurrentVersion = item;\r\n    }\r\n  })\r\n}\r\n\r\nexport const AddVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  var apiData = {\r\n    exportSetId\r\n  }\r\n\r\n  versionUtil.add(apiData, (addItem) => {\r\n    q.CurrentVersion = addItem;\r\n  })\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbes/input?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbes/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","export class Level_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","export class Level\r\n{\r\n  Name\r\n  Elevation\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { Level } from \"./Level\"\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new Level();\r\n  qI.Name = data.name;\r\n  qI.Elevation = data.elevation;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (apiData, dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbl/list\";\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      if (!data) data = []\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport Project from './Project';\r\nimport * as rebarMassDictUtil from '../mass/rebar/RebarMass_DictUtil'\r\nimport * as exportSetUtil from '../exportset/ExportSetUtil'\r\nimport * as vrf from '../value/ValueRetrieveFrom'\r\nimport * as levelDictUtil from '../level/Level_DictUtil'\r\nimport * as levelTypicalUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Project();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Code = q.code;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getById = (_id, handle) => {\r\n  if (!_id) return undefined;\r\n  var url = `https://api.bimdev.vn/api/hbp/get?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      if (handle) {\r\n        handle(item);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetRebarMass_Dict = (q) => {\r\n  return rebarMassDictUtil.get(q);\r\n}\r\n\r\nexport const GetInputExportSet_Async = (q) => {\r\n  var projectId = q._id;\r\n\r\n  exportSetUtil.getByProject(projectId, (item) => {\r\n    if (!item) {\r\n      var apiData = {\r\n        projectId,\r\n        name: 'Dữ liệu khối lượng input',\r\n        description: 'mô tả dữ liệu',\r\n        retrieveFrom: vrf.input\r\n      }\r\n      exportSetUtil.add(apiData, (addItem) => {\r\n        q.InputExportSet = addItem;\r\n      })\r\n    } else {\r\n      q.InputExportSet = item;\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetLevel_Dict = (q) => {\r\n  return levelDictUtil.get(q)\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  return levelTypicalUtil.GetTest(q);\r\n}","export const model = \"model\";\r\nexport const input = \"input\";","import { Level_Dict } from \"./Level_Dict\"\r\nimport * as itemUtil from './LevelUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Level_Dict();\r\n  qI.Project = project;\r\n\r\n  itemUtil.getAll({ projectId : project._id }, qI, (items) => {\r\n    qI.Items = items.sort((a,b) => a.Elevation - b.Elevation);\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ProjectUtil'\r\n\r\nexport class Project_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class ElementFilterSetting extends Setting {\r\n  \r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './ElementFilterSettingDataUtil'\r\n\r\nexport default class ElementFilterSettingData {\r\n  CategoryFilter\r\n\r\n  IsHaveFamilyFilter\r\n\r\n  FamilyFilter\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport ElementFilterSettingData from './ElementFilterSettingData';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as fct from '../../filter/FilterCategoryType'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingData();\r\n  qI.CategoryFilter = filterUtil.get(q.categoryFilter);\r\n  return qI;\r\n}\r\n\r\nexport const getDefault = () => {\r\n  var qI = new ElementFilterSettingData();\r\n\r\n  var cateFilter = new EntFilter();\r\n  cateFilter.CategoryType = fct.category;\r\n  cateFilter.ValueType = fvt.bystring;\r\n  cateFilter.StringFilterType = sft.byequal;\r\n  cateFilter.Values = ['Floors'];\r\n  qI.CategoryFilter = cateFilter;\r\n\r\n  qI.IsHaveFamilyFilter = false;\r\n\r\n  var familyFilter = new EntFilter();\r\n  familyFilter.CategoryType = fct.family;\r\n  familyFilter.ValueType = fvt.bystring;\r\n  familyFilter.StringFilterType = sft.byequal;\r\n  familyFilter.Values = [];\r\n  qI.FamilyFilter = familyFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    categoryFilter : q.CategoryFilter.ApiData,\r\n    familyFilter : q.IsHaveFamilyFilter ? \r\n      q.FamilyFilter.ApiData : undefined\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport ElementFilterSetting from \"./ElementFilterSetting\"\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/ef/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as util from './SettingInputUtil'\r\n\r\nexport default class SettingInput {\r\n  Name\r\n  Description\r\n  SettingType\r\n\r\n  data\r\n  get Data() {\r\n    if (!this.data) {\r\n      this.data = this.GetData();\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n  }\r\n\r\n  GetData = () => {\r\n    if (this.OnGetData) {\r\n      return this.OnGetData();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem(){\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v){\r\n    this.editItem = v;\r\n    if (!v){\r\n      this.EditItemId = undefined;\r\n    }\r\n    else{\r\n      this.EditItemId = v._id;\r\n    }\r\n  }\r\n\r\n\r\n  EditItemId\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.EditItem = undefined;\r\n    }\r\n  }\r\n\r\n  urlPrefix\r\n  get UrlPrefix() {\r\n    if (!this.urlPrefix){\r\n      this.urlPrefix = util.GetUrlPrefix(this);\r\n    }\r\n    return this.urlPrefix;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.EditItemId;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var settingType = this.SettingType;\r\n    var data = this.Data.ApiData;\r\n    var prefix = this.UrlPrefix;\r\n\r\n    var apiData = {\r\n      _id, name, description, settingType, data\r\n    }\r\n    var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewItem = this.GetEditItem(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n}","import * as st from './SettingType'\r\n\r\nexport const GetUrlPrefix = (q) => {\r\n  var prefix = undefined\r\n  switch (q.SettingType) {\r\n    case st.elementfilter:\r\n      prefix = 'ef';\r\n      break;\r\n    case st.massexport:\r\n      prefix = 'me';\r\n      break;\r\n    case st.massgroup:\r\n      prefix = 'mg';\r\n      break;\r\n  }\r\n  return prefix;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as elementFilterSettingUtil from './ElementFilterSettingUtil'\r\n\r\nexport default class ElementFilterSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return elementFilterSettingUtil.get(data, dict);\r\n  }\r\n}","import ElementFilterSettingInput from \"./ElementFilterSettingInput\";\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new ElementFilterSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bộ lọc cột';\r\n  qI.Description = 'mô tả bộ lọc';\r\n  qI.SettingType = st.elementfilter;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.getDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ElementFilterSettingUtil'\r\nimport * as inputUtil from './ElementFilterSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class ElementFilterSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassExportSettingDataUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\nimport { reaction } from \"mobx\";\r\n\r\nexport default class MassExportSettingData {\r\n  elementFilterId\r\n\r\n  elementFilter\r\n  get ElementFilter(){\r\n    if (!this.elementFilter){\r\n      this.elementFilter = util.GetElementFilter(this);\r\n    }\r\n    return this.elementFilter;\r\n  }\r\n  set ElementFilter(v) {\r\n    this.elementFilter = v;\r\n    if (!v){\r\n      this.elementFilterId = undefined;\r\n    }\r\n    else{\r\n      this.elementFilterId = v._id;\r\n    }\r\n  }\r\n\r\n  valueSettings\r\n  get ValueSettings(){\r\n    if (!this.valueSettings){\r\n      this.valueSettings = util.GetDefaultValueSettings(this);\r\n    }\r\n    return this.valueSettings;\r\n  }\r\n  set ValueSettings(v){\r\n    this.valueSettings = v;\r\n  }\r\n\r\n  AddNewValueSetting = () => {\r\n    var modelList = this.ValueSettings;\r\n    var item = valueSettingUtil.GetDefault(this);\r\n    modelList.push(item);\r\n\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassExportSettingData from './MassExportSettingData';\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingData();\r\n  qI.elementFilterId = q.elementFilterId;\r\n  qI.ValueSettings = q.exportSettings.map(x => valueSettingUtil.get(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassExportSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilter = (q) => {\r\n  var elemFilterId = q.elementFilterId;\r\n  if (!elemFilterId) return undefined;\r\n\r\n  var list = pmData().ElementFilterSetting_Dict.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === elemFilterId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetDefaultValueSettings = (q) => {\r\n  return [ valueSettingUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    elementFilterId : q.elementFilterId,\r\n    exportSettings : q.ValueSettings.map(x => x.ApiData)\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassExportSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSetting from './MassExportSetting';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/me/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as massExportSettingUtil from './MassExportSettingUtil'\r\n\r\nexport default class MassExportSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return massExportSettingUtil.get(data, dict);\r\n  }\r\n}","import * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSettingInput from \"./MassExportSettingInput\";\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new MassExportSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bêtông sàn';\r\n  qI.Description = 'mô tả thiết lập';\r\n  qI.SettingType = st.massexport;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.GetDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './MassExportSettingUtil'\r\nimport * as inputUtil from './MassExportSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassExportSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import * as itemUtil from './MassGroupSettingUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassGroupSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n}","\r\nexport default class VCS_Item{\r\n  Color\r\n  Filter\r\n}","import * as util from './VersionCompareSettingUtil'\r\n\r\nexport default class VersionCompareSetting{\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems();\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as nft from '../../filter/NumberFilterType'\r\nimport VCS_Item from \"./VCS_Item\";\r\n\r\nexport const GetItems = (q) => {\r\n  var list = [];\r\n\r\n  // < 80\r\n  var item = new VCS_Item();\r\n  item.Color = '#1956c9';\r\n\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bysmaller;\r\n  filter.Values = [ 0.80 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n  // 80 -85\r\n  item = new VCS_Item();\r\n  item.Color = '#3f79d6';\r\n\r\n  filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bybetween;\r\n  filter.IsEqualLeft = true;\r\n  filter.Values = [ 0.80, 0.85 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n   // 85 -90\r\n   item = new VCS_Item();\r\n   item.Color = '#6f9fe9';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.85, 0.90 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 90 -95\r\n   item = new VCS_Item();\r\n   item.Color = '#a5c2f2';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.9, 0.95 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 95 -100\r\n   item = new VCS_Item();\r\n   item.Color = '#c9d9f6';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.95, 1 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 100 -105\r\n   item = new VCS_Item();\r\n   item.Color = '#f3cccc';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1, 1.05 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 105 -110\r\n   item = new VCS_Item();\r\n   item.Color = '#e9999a';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1.05, 1.10 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#de6568';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.10, 1.15 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#c90010';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.15, 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 115 -120\r\n    item = new VCS_Item();\r\n    item.Color = '#980009';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybigger;\r\n    filter.Values = [ 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    return list;\r\n}","\r\nexport class WorkItemExportSetting_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\n\r\nexport class WorkpackageInput {\r\n  Code\r\n  // = \"300\"\r\n  Name\r\n  // = \"Lắp đặt cốp thép\"\r\n  Description = 'mô tả công tác'\r\n  // = \"Mô tả quá trình lắp cốp thép\"\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.Workpackage = undefined;\r\n    }\r\n  }\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.WorkpackageId = undefined;\r\n    }\r\n    else{\r\n      this.WorkpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  WorkpackageId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    if (!v){\r\n      this.SupId = undefined;\r\n    }\r\n    else{\r\n      this.SupId = v._id;\r\n    }\r\n  }\r\n\r\n  SupId\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.WorkpackageId;\r\n    var code = this.Code;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var supId = this.SupId;\r\n\r\n    var apiData = {\r\n      _id, name, code, description, supId\r\n    };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp\";\r\n\r\n    const apiFunc =  () =>  _id ? \r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewWorkpackage = workpackageUtil.get(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  UpdateWorkpackage\r\n}","import { WorkpackageInput } from './WorkpackageInput';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\n\r\nexport class Workpackage_Dict {\r\n  constructor() {\r\n    workpackageUtil.getAll(this, (wps) => {\r\n      this.Workpackages = wps;\r\n      this.GetWorkpackagesDone = true;\r\n    });\r\n  }\r\n\r\n  Workpackages\r\n\r\n  set GetWorkpackagesDone(v) {\r\n    if (this.OnGetWorkpackagesDone) {\r\n      this.OnGetWorkpackagesDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentWorkpackage\r\n\r\n  workpackageInput\r\n  get WorkpackageInput() {\r\n    if (!this.workpackageInput){\r\n      var obj = this.workpackageInput = new WorkpackageInput();\r\n      obj.Dict = this;\r\n    }\r\n    return this.workpackageInput;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Workpackages.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.WorkpackageInput;\r\n    var wp = input.Workpackage;\r\n\r\n    if (!input.IsNew){\r\n      var action = () => { \r\n        wp.Code = input.Code;\r\n        wp.Name = input.Name;\r\n        wp.Description = input.Description;\r\n        wp.FullName = wp.GetFullName();\r\n      };\r\n      genUtil.UpdateFromModel(wp, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewWorkpackage);\r\n    }\r\n\r\n    this.IsDataChanged = true;\r\n  }\r\n\r\n  IsDataChanged\r\n\r\n  RefreshData = () => {\r\n    this.Workpackages.forEach(x => {\r\n      x.SubItems = undefined;\r\n      x.UpperList = undefined;\r\n      x.LowerList = undefined;\r\n      x.Rank = undefined\r\n    })\r\n\r\n    this.IsDataChanged = false;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workPackageUtil from '../../entity/workpackage/WorkpackageUtil'\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\nimport * as vrt from '../../entity/setting/massExport/exportSetting/MES_ValueRetrieveType'\r\nimport * as mpn from '../../entity/mass/MassPropertyName'\r\nimport * as mt from '../../entity/mass/MassType'\r\nimport * as mif from '../../entity/mass/item/MassItemField'\r\n\r\nexport const GetFilterValueTypes = (data) => {\r\n  return fvt.GetAll();\r\n}\r\n\r\nexport const GetStringFilterTypes = (data) => {\r\n  return sft.GetAll();\r\n}\r\n\r\nexport const GetValueRetrieveTypes = (data) => {\r\n  return vrt.GetAll();\r\n}\r\n\r\nexport const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Column']\r\n}\r\n\r\nexport const GetParameterNames = (data) => {\r\n  return ['Volume', 'HB_Formwork_Total']\r\n}\r\n\r\nexport const GetMassPropertyNames = (data) => {\r\n  return mpn.GetAll();\r\n}\r\n\r\nexport const GetMassItemFields = (data) => {\r\n  return mif.GetAll();\r\n}\r\n\r\nexport const GetMassTypes = (data) => {\r\n  return mt.GetAll();\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport MassResultComp from '../../entity/mass/result/MassResultComp';\r\nimport { Project_Dict } from '../../entity/project/Project_Dict';\r\nimport { ElementFilterSetting_Dict } from '../../entity/setting/elementFilter/ElementFilterSetting_Dict';\r\nimport { MassExportSetting_Dict } from '../../entity/setting/massExport/MassExportSetting_Dict';\r\nimport { MassGroupSetting_Dict } from '../../entity/setting/massGroup/MassGroupSetting_Dict';\r\nimport VersionCompareSetting from '../../entity/setting/versionCompare/VersionCompareSetting';\r\nimport { WorkItemExportSetting_Dict } from '../../entity/setting/workitemexport/WorkItemExportSetting_Dict';\r\nimport { Workpackage_Dict } from '../../entity/workpackage/Workpackage_Dict';\r\nimport { CategoryData } from './CategoryData';\r\nimport * as util from './PMDataUtil'\r\n\r\nexport class PMData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get categoryData(){\r\n    return CategoryData.Instance;\r\n  }\r\n\r\n  workpackage_Dict\r\n  get Workpackage_Dict() {\r\n    if (!this.workpackage_Dict){\r\n      this.workpackage_Dict = new Workpackage_Dict();\r\n    }\r\n    return this.workpackage_Dict;\r\n  }\r\n\r\n  elementFilterSetting_Dict\r\n  get ElementFilterSetting_Dict() {\r\n    if (!this.elementFilterSetting_Dict){\r\n      this.elementFilterSetting_Dict = new ElementFilterSetting_Dict();\r\n    }\r\n    return this.elementFilterSetting_Dict;\r\n  }\r\n\r\n  massExportSetting_Dict\r\n  get MassExportSetting_Dict() {\r\n    if (!this.massExportSetting_Dict){\r\n      this.massExportSetting_Dict = new MassExportSetting_Dict();\r\n    }\r\n    return this.massExportSetting_Dict;\r\n  }\r\n\r\n  massGroupSetting_Dict\r\n  get MassGroupSetting_Dict() {\r\n    if (!this.massGroupSetting_Dict){\r\n      this.massGroupSetting_Dict = new MassGroupSetting_Dict();\r\n    }\r\n    return this.massGroupSetting_Dict;\r\n  }\r\n\r\n  project_Dict\r\n  get Project_Dict() {\r\n    if (!this.project_Dict){\r\n      this.project_Dict = new Project_Dict();\r\n    }\r\n    return this.project_Dict;\r\n  }\r\n\r\n  massResultComp\r\n  get MassResultComp(){\r\n    if (!this.massResultComp){\r\n      this.massResultComp = new MassResultComp();\r\n    }\r\n    return this.massResultComp;\r\n  }\r\n  set MassResultComp(v){\r\n    this.massResultComp = v;\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = util.GetFilterValueTypes();\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = util.GetStringFilterTypes();\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = util.GetValueRetrieveTypes();\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.categoryData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = util.GetParameterNames();\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = util.GetMassPropertyNames();\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massItemFields\r\n  get MassItemFields(){\r\n    if (!this.massItemFields){\r\n      this.massItemFields = util.GetMassItemFields();\r\n    }\r\n    return this.massItemFields;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = util.GetMassTypes();\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  versionCompareSetting\r\n  get VersionCompareSetting(){\r\n    if (!this.versionCompareSetting){\r\n      this.versionCompareSetting = new VersionCompareSetting();\r\n    }\r\n    return this.versionCompareSetting;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = new WorkItemExportSetting_Dict();\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n\r\n  DebugPoints = []\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as util from './WorkpackageUtil'\r\n\r\nexport class Workpackage {\r\n  get Index() {\r\n    return this.Dict.Workpackages.indexOf(this);\r\n  }\r\n\r\n  _id\r\n\r\n  SupId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (this.OnCodeChanged) {\r\n      this.OnCodeChanged(v);\r\n    }\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (this.OnNameChanged) {\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged) {\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  fullName\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.GetFullName();\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n    if (this.OnFullNameChanged) {\r\n      this.OnFullNameChanged(v);\r\n    }\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n  set SubItems(v){\r\n    this.subItems = v;\r\n  }\r\n\r\n  upperList\r\n  get UpperList(){\r\n    if (!this.upperList){\r\n      this.upperList = util.GetUpperList(this);\r\n    }\r\n    return this.upperList;\r\n  }\r\n  set UpperList(v){\r\n    this.upperList = v;\r\n  }\r\n\r\n  lowerList\r\n  get LowerList(){\r\n    if (!this.lowerList){\r\n      this.lowerList = util.GetLowerList(this);\r\n    }\r\n    return this.lowerList;\r\n  }\r\n  set LowerList(v){\r\n    this.lowerList = v;\r\n  }\r\n\r\n  rank\r\n  get Rank() {\r\n    if (!this.rank){\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v){\r\n    this.rank = v;\r\n  }\r\n\r\n  get LowerIds() {\r\n    return this.LowerList.map(x => x._id);\r\n  }\r\n\r\n  GetFullName = () => {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  Delete = () => {\r\n    var { _id } = this;\r\n    var apiData = { _id };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete workpackage successfully'));\r\n\r\n    var dict = this.Dict;\r\n    dict.Workpackages.splice(this.Index, 1);\r\n    if (this.OnDelete) {\r\n      this.OnDelete();\r\n    }\r\n\r\n    dict.IsDataChanged = true;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../../single/model/PMData';\r\nimport { Workpackage } from \"./Workpackage\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (dbItem, dict) => {\r\n  var { _id, name, code, description, supId } = dbItem;\r\n\r\n  var qI = new Workpackage();\r\n  qI._id = _id;\r\n  qI.Name = name;\r\n  qI.Code = code;\r\n  qI.Description = description;\r\n  qI.SupId = supId;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supId = q.SupId;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var index = list.findIndex(x => x._id === supId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetSubItems = (q) => {\r\n  var id = q._id;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  return list.filter(x => x !== q && x.SupId === id);\r\n}\r\n\r\nexport const GetUpperList = (q) => {\r\n  var supItem = q.SupItem;\r\n  if (!supItem){\r\n    return [q];\r\n  }else{\r\n    var list = [...supItem.UpperList];\r\n    list.push(q);\r\n    return list;\r\n  }\r\n}\r\n\r\nexport const GetLowerList = (q) => {\r\n  var list = [q];\r\n  q.SubItems.forEach((x, i) => {\r\n    list.push.apply(list, x.LowerList);\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  var supItem = q.SupItem;\r\n  return supItem ? supItem.Rank +1 : 0;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbwp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var wps = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(wps);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as util from './Workpackage_DictVMUtil'\r\n\r\nexport class Workpackage_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      workpackageVMs: observable,\r\n    })\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  Workpackage_Dict\r\n\r\n  get M2VM() {\r\n    return this.Workpackage_Dict.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage_Dict.M2VM = v;\r\n  }\r\n\r\n  workpackageVMs = undefined\r\n  get WorkpackageVMs() {\r\n    if (!this.workpackageVMs){\r\n      this.workpackageVMs = util.GetWorkpackageVMs(this);\r\n    }\r\n    return this.workpackageVMs;\r\n  }\r\n\r\n  currentWorkpackageVM\r\n  set CurrentWorkpackageVM(v) {\r\n    this.Workpackage_Dict = v;\r\n    this.Workpackage_Dict.CurrentWorkpackage = v.Workpackage;\r\n\r\n    this.WorkpackageInputVM.WorkpackageVM = v;\r\n  }\r\n\r\n  workpackageInputMV\r\n  get WorkpackageInputVM() {\r\n    if (!this.workpackageInputVM){\r\n      this.workpackageInputVM = util.GetWorkpackageInputVM(this);\r\n    }\r\n    return this.workpackageInputVM;\r\n  }\r\n\r\n  Add = (itemView) => {\r\n    this.WorkpackageVMs.push(itemView);\r\n    if (this.OnAdd){\r\n      this.OnAdd(itemView);\r\n    }\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport CheckboxView from \"../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../select/SelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass Workpackage_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Workpackage_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n    var wp = data.CurrentWorkpackageVM = wps[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n\r\n    var elems = wps ? wps.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var inputVM = data.WorkpackageInputVM;\r\n    var commandVM = inputVM.CommandVM;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Công tác</b>\r\n        </Divider>\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search công tác\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={inputVM.CodeVM} />\r\n          <InputView store={inputVM.NameVM} />\r\n          <InputView store={inputVM.DescriptionVM} />\r\n          <SelectView store={inputVM.SupItemSelectVM} />\r\n          <div>\r\n            <CheckboxView store={inputVM.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={inputVM.AddDatabase}>{commandVM.Content}</Button>\r\n            {inputVM.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Workpackage_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\nimport SelectView from \"../../../select/SelectView\";\r\nimport { MultiSelectVM } from \"../../../select/MultiSelectVM\";\r\nimport MultiSelectView from \"../../../select/MultiSelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass EntFilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntFilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.ItemVMs;\r\n    var wp = data.CurrentItemVM = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <SelectView store={data.ValueTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <SelectView store={data.StringFilterTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <MultiSelectView store={data.ValuesSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntFilterView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataVM from \"./ElementFilterSettingDataVM\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { IsHaveFamilyFilter } = data;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập lọc Category\r\n        </Divider>\r\n        <EntFilterView store={data.CategoryFilterVM} />\r\n\r\n        <Divider orientation=\"left\" plain>\r\n          {/* Thiết lập lọc Family */}\r\n          <CheckboxView store={data.IsHaveFamilyFilterVM}/>\r\n        </Divider>\r\n        {IsHaveFamilyFilter? <EntFilterView store={data.FamilyFilterVM} /> : \"\"}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataView from \"./ElementFilterSettingDataView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    \r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Bộ lọc đối tượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search bộ lọc\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{marginTop:20}}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <ElementFilterSettingDataView store={input.DataVM}/>\r\n\r\n          <CheckboxView store={input.IsNewVM} />\r\n          <Button style={{margin:10}}\r\n            onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n          {input.DeleteView}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSetting_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../../input/InputView\";\r\nimport EntFilterView from \"../../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../../checkbox/CheckboxView\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as floatItemVMUtil from \"../../../../../float/FloatItemVMUtil\";\r\nimport FloatItemView from \"../../../../../float/FloatItemView\";\r\nimport { CloseCircleFilled } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MES_ValueSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MES_ValueSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var floatItemStore = floatItemVMUtil.get('top right')\r\n    floatItemStore.wrapper = <Button size='small' type='primary' \r\n      onClick={data.Delete}>x</Button>\r\n\r\n    return (\r\n      <>\r\n        <div style={{ padding: '10px 35px 10px 10px', margin: '8px auto', border: 'solid 0.5px', borderRadius: '10px', position:'relative' }}>\r\n          <FloatItemView store={floatItemStore} />\r\n          <SelectView store={data.RetrieveTypeSelectVM} />\r\n          <SelectView store={data.MassTypeSelectVM} />\r\n          <EntFilterView store={data.ValueFilterVM} />\r\n          <SelectView store={data.WorkpackageSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MES_ValueSettingView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleFilled } from \"@ant-design/icons\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassExportSettingDataVM from \"./MassExportSettingDataVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MES_ValueSettingView from \"./exportSetting/MES_ValueSettingView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var valueSettingElems = data.ValueSettingVMs.map((x, i) => {\r\n      return <MES_ValueSettingView key={i} store={x} />\r\n    })\r\n\r\n    return (\r\n      <>\r\n        <SelectView store={data.ElementFilterSelectVM} />\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập giá trị\r\n          <Button type='primary' size='small' onClick={data.AddNewValueSettingVM}\r\n            style={{marginLeft:15}}>+</Button>\r\n        </Divider>\r\n        {valueSettingElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MassExportSettingDataView from \"./MassExportSettingDataView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất khối lượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search thiết lập\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <MassExportSettingDataView store={input.DataVM} />\r\n\r\n          <div>\r\n            <CheckboxView store={input.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n            {input.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSetting_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Popover, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassCell from \"./MassCell\";\r\nimport './MassTable.css'\r\nimport Icon, { InfoCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassCellView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassCell();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <td style={data.TDStyle}>\r\n          <div className='masscell__div'>\r\n            <div className='masscell__value'>\r\n              {data.IsHaveWarning ?\r\n                <Popover trigger='hover'\r\n                  content={<div>\r\n                    {data.TLS_LevelGroup_Descriptions ?\r\n                      data.TLS_LevelGroup_Descriptions.map(x => {\r\n                        return <span key={x}>{x}</span>\r\n                      })\r\n                      : ''}\r\n                  </div>}>\r\n                  <InfoCircleOutlined className='masscell__warningicon' />\r\n                </Popover>\r\n                : ''}\r\n              <a style={data.AStyle}\r\n                onClick={data.ShowDetail}>\r\n                <TextView store={data.ContentVM} />\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassCellView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select, Space } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MultiSelectView from \"../../../../select/MultiSelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRow from \"./MassRow\";\r\nimport MassCellView from \"./MassCellView\";\r\nimport { DownCircleOutlined, EnterOutlined, UpCircleOutlined } from '@ant-design/icons';\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassRowView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var table = data.Dict;\r\n    var columns = table.Columns;\r\n\r\n    var subElems = data.IsShowSub ? data.SubItems.map((x, i) => {\r\n      return <MassRowView store={x} key={x.id} />\r\n    }) : ''\r\n\r\n    var toggleButton = data.IsHaveSub ?\r\n      <Button size='small' style={{ marginRight: 5, minWidth: 25 }} type='primary'\r\n        onClick={data.ToggleSub}>\r\n        <TextView store={data.ToggleButtonContentVM} />\r\n      </Button>\r\n      : <div style={{ padding: '0 15.5px' }} />;\r\n\r\n    return (\r\n      <>\r\n        <tr>\r\n          <th scope=\"row\" >\r\n            <div style={data.Style}>\r\n              {toggleButton}\r\n              {data.Title}\r\n\r\n              {data.HoverToolElement}\r\n              {data.ModalElement}\r\n            </div>\r\n          </th>\r\n          {columns.map((y, j) => {\r\n            var cell = table.GetCell(y, data);\r\n            return <MassCellView key={cell.id} store={cell} />\r\n          })}\r\n        </tr>\r\n        {subElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRowView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassTable from \"./MassTable\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRowView from \"./MassRowView\";\r\nimport './MassTable.css'\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var columns = data.Columns;\r\n    var rows = data.MainRows;\r\n\r\n    var thElems = columns ? columns.map((x, i) => {\r\n      return <th scope=\"col\" key={x.id} className='text-center masscell_th'>{x.Name}</th>\r\n    }) : '';\r\n\r\n    var tbodyElems = rows ? rows.map((x, i) => {\r\n      return <MassRowView key={x.id} store={x} />\r\n    }) : '';\r\n\r\n\r\n    return (\r\n      <>\r\n        {data.IsValidTable ?\r\n          <>\r\n            <h4 className=\"text-center\">\r\n              BẢNG TỔNG HỢP KHỐI LƯỢNG\r\n            <Button type='primary' size='small' style={{ marginLeft: 15 }}\r\n                disabled={data.IsOnSaveMassGroup}\r\n                onClick={data.SaveMassGroup}>s</Button>\r\n            </h4>\r\n\r\n            {data.IsOnSaveMassGroup ?\r\n              <Row style={{padding:7}}>\r\n                <Col span={4}/>\r\n                <Col span={16} style={{display:'flex'}}>\r\n                  <InputView store={data.MassGroupNameVM} />\r\n                  <Button type='primary' size='small'\r\n                    style={{marginLeft:10}}\r\n                    onClick={data.MassGroupInputOK}>ok</Button>\r\n                  <Button type='default' size='small'\r\n                    onClick={data.MassGroupInputCancel}>cancel</Button>\r\n                </Col>\r\n              </Row> : ''}\r\n\r\n            < table className=\"table table-bordered table-sm masstable\">\r\n              <thead className=\"thead-light\">\r\n                <tr>\r\n                  <th scope=\"col\" className='masstitle__th'>\r\n                    <Button onClick={data.AddMainRow} type='primary' size='small'\r\n                      style={{backgroundColor:'#52c41a', border:'none'}}>+</Button>\r\n                  </th>\r\n                  {thElems}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tbodyElems}\r\n              </tbody>\r\n            </table>\r\n          </> : ''\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassTableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport MassResultCompVM from \"./MassResultCompVM\";\r\nimport MultiSelectView from '../../../../select/MultiSelectView'\r\nimport MassTableView from \"../table/MassTableView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassResultCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassResultCompVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thông tin khối lượng</b>\r\n        </Divider>\r\n        {data.IsShowProjectSelect ?\r\n          <MultiSelectView store={data.ProjectSelectVM} /> : ''}\r\n\r\n        {data.CanHavePhase ?\r\n          <>\r\n            <CheckboxView store={data.IsShowPhaseSelectVM} />\r\n            {data.IsHavePhase ?\r\n              <MultiSelectView store={data.PhaseSelectVM} /> : ''}\r\n          </>\r\n          : ''\r\n        }\r\n\r\n        <div style={{ marginTop: 8 }} >\r\n          <SelectView store={data.MassGroupSettingSelectVM} />\r\n        </div>\r\n\r\n        <Button style={{ marginTop: 8 }} onClick={data.GetMassData}\r\n          size='middle' type='primary'>GET DATA</Button>\r\n        <div style={{ marginTop: 15 }}>\r\n          {data.IsDataPending ?\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <div>\r\n                <Spin />\r\n                <TextView store={data.LoadingSpinTipVM} />\r\n              </div>\r\n            </div> : <MassTableView store={data.MassItem_Dict.MassTable} />}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassResultCompView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport TableVM from \"./TableVM\";\r\nimport * as rs from './RenderState'\r\n\r\nconst { Option } = Select;\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TableVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var columns = data.Columns;\r\n\r\n    var rows = data.Rows;\r\n    var tableElem = '';\r\n    if (columns && rows) {\r\n      var theadElem = <thead className=\"thead-light\">\r\n        <tr>\r\n          {columns.map(x => {\r\n            return <th scope=\"col\" key={x.Key}>{x.Title}</th>\r\n          })}\r\n        </tr>\r\n      </thead>\r\n\r\n      var tbodyElem = <tbody>\r\n        {rows.map(x => {\r\n          return <tr key={x.Key}>\r\n            {x.Cells.map(y => {\r\n              return <td key={y.Key}>{y.Render()}</td>\r\n            })}\r\n          </tr>\r\n        })}\r\n      </tbody>\r\n\r\n      tableElem = <table className=\"table table-sm\">\r\n        {theadElem}{tbodyElem}\r\n      </table>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {tableElem}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport TableView from \"../../../../table/TableView\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass WorkItemExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new WorkItemExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất hạng mục</b>\r\n        </Divider>\r\n        \r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(WorkItemExportSetting_DictView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport Workpackage_DictView from '../../entity/workpackage/Workpackage_DictView';\r\nimport ElementFilterSetting_DictView from '../../entity/setting/elementFilter/ElementFilterSetting_DictView';\r\nimport MassExportSetting_DictView from '../../entity/setting/massExport/MassExportSetting_DictView';\r\n\r\nimport { PMDataVM } from './PMDataVM';\r\nimport MassResultCompView from '../../entity/mass/result/MassResultCompView';\r\nimport WorkItemExportSetting_DictView from '../../entity/setting/workitemexport/WorkItemExportSetting_DictView';\r\n\r\nclass PMDataView extends Component {\r\n  get pmDataVM() { return PMDataVM.Instance };\r\n\r\n  render() {\r\n    var data = this.pmDataVM;\r\n\r\n    return (\r\n      <>\r\n        <Row gutter={15} style={{ padding: 15 }}>\r\n          <Col span={3} />\r\n          <Col span={5}>\r\n            <Workpackage_DictView store={data.Workpackage_DictVM} />\r\n\r\n            <ElementFilterSetting_DictView store={data.ElementFilterSetting_DictVM} />\r\n\r\n            <MassExportSetting_DictView store={data.MassExportSetting_DictVM} />\r\n          </Col>\r\n          <Col span={13}>\r\n            <MassResultCompView store={data.MassResultCompVM} />\r\n          </Col>\r\n          <Col span={3} />\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(PMDataView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport PMDataView from '../main/single/form/PMDataView';\r\nimport { Col, Row } from 'antd';\r\n\r\nclass TestView extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <PMDataView />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TestView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class CellVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueString : observable\r\n    })\r\n  }\r\n\r\n  value\r\n  get Value(){\r\n    return this.value\r\n  }\r\n  set Value(v){\r\n    this.value = v;\r\n    this.ValueString = this.GetValueString();\r\n  }\r\n\r\n  valueString = undefined\r\n  get ValueString (){\r\n    if (!this.valueString){\r\n      this.valueString = this.GetValueString();\r\n    }\r\n    return this.valueString;\r\n  }\r\n  set ValueString(v){\r\n    this.valueString = v;\r\n  }\r\n\r\n  GetValueString = () => {\r\n    return this.OnGetValueString();\r\n  }\r\n}","export default class ColumnVM {\r\n  Cells = []\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class RowVM {\r\n  Cells = []\r\n}","import * as mt from '../MassType'\r\nimport * as mif from '../item/MassItemField'\r\nimport ColumnVM from '../../../../table/ColumnVM';\r\n\r\nexport const GetFields = (q) => {\r\n  var list = q.Items;\r\n  if (!list || list.length === 0) return [];\r\n\r\n  var massType = list[0].MassType;\r\n  switch (massType) {\r\n    case mt.rebar:\r\n      return [mif.partition, mif.rebarType, mif.Value, mif.Unit];\r\n    case mt.concrete:\r\n    case mt.formwork:\r\n      return [mif.level, mif.elementName, mif.Value, mif.Unit];\r\n    default:\r\n      return [mif.Value, mif.Unit]\r\n  }\r\n  return [];\r\n}\r\n\r\nexport const GetValueTitle = (q) => {\r\n  var list = q.Items;\r\n  if (!list || list.length === 0) return [];\r\n\r\n  var massType = list[0].MassType;\r\n  switch (massType) {\r\n    default:\r\n      return massType;\r\n  }\r\n}\r\n\r\nexport const GetColumns = (q) => {\r\n  return q.Fields.map(x => {\r\n    var col = new ColumnVM();\r\n    col.Name = x;\r\n    col.Title = x === mif.Value ? GetValueTitle(q) \r\n      : x;\r\n\r\n    return col;\r\n  })\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport CellVM from '../../../../table/CellVM';\r\nimport ColumnVM from '../../../../table/ColumnVM';\r\nimport RowVM from '../../../../table/RowVM';\r\nimport * as mif from '../item/MassItemField'\r\nimport * as util from './MassDetailTableUtil'\r\n\r\nexport default class MassDetailTable {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      rows: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    if (v && v.length !== 0) {\r\n      this.IsValidTable = true;\r\n    }\r\n    else {\r\n      this.IsValidTable = false;\r\n    }\r\n    this.Fields = util.GetFields(this);\r\n    this.Rows = this.GetRows();\r\n  }\r\n\r\n  IsValidTable = false\r\n\r\n  fields = undefined\r\n  get Fields() {\r\n    if (!this.fields) {\r\n      this.fields = util.GetFields(this);\r\n    }\r\n    return this.fields;\r\n  }\r\n  set Fields(v){\r\n    this.fields = v;\r\n    this.Columns = util.GetColumns(this);\r\n  }\r\n\r\n  columns = undefined\r\n  get Columns(){\r\n    if (!this.columns){\r\n      this.columns = util.GetColumns(this);\r\n    }\r\n    return this.columns;\r\n  }\r\n  set Columns(v){\r\n    this.columns = v;\r\n  }\r\n\r\n  rows = undefined\r\n  get Rows(){\r\n    if (!this.rows){\r\n      this.rows = this.GetRows();\r\n    }\r\n    return this.rows;\r\n  }\r\n  set Rows(v){\r\n    this.rows = v;\r\n  }\r\n\r\n  GetRows = () => {\r\n    var items = this.Items;\r\n    if (!items) return [];\r\n    var fields = this.Fields;\r\n\r\n    return items.map(x => {\r\n      var row = new RowVM();\r\n      row.Cells = fields.map(y => {\r\n        var cell = new CellVM();\r\n        cell.OnGetValueString = () => {\r\n          var value = cell.Value;\r\n          if(!isNaN(value)){\r\n           return parseFloat(value).toFixed(2);\r\n          }\r\n          return value;\r\n        }\r\n\r\n        const setValueFunc = () => cell.Value = mif.GetValueString(x.GetValue(y), y);\r\n        if (mif.GetIdentifyFields().includes(y) && !x.Element){\r\n          x.OnGetElementDone_Funcs.push(() => {\r\n            setValueFunc();\r\n          });\r\n        }else{\r\n          setValueFunc();\r\n        }\r\n\r\n        var className = 'text-center';\r\n        switch(y){\r\n          case mif.Value:\r\n            className='text-right';\r\n            break;\r\n        }\r\n        cell.className = className;\r\n\r\n        return cell;\r\n      })\r\n      return row;\r\n    })\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport MassDetailTable from './MassDetailTable';\r\n\r\nexport class MassDetailVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id(){\r\n    return this._id;\r\n  }\r\n  set id(v){\r\n    this._id = v;\r\n    massItemUtil.getByViewDetail(v, (items) => {\r\n      this.Items = items;\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    return this.items;\r\n  } \r\n  set Items(v){\r\n    this.items = v;\r\n    this.DetailTable.Items = v;\r\n  }\r\n\r\n  detailTable\r\n  get DetailTable() {\r\n    if (!this.detailTable){\r\n      this.detailTable = new MassDetailTable();\r\n    }\r\n    return this.detailTable;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport MassDetailTable from './MassDetailTable';\r\n\r\nclass MassDetailTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var colElems = data.Columns.map((x,i) => {\r\n      return <th scope=\"col\" key={i} className='text-center'>{x.Title}</th>\r\n    })\r\n\r\n    var rowElems = data.Rows.map((x, i) => {\r\n      var cellElems = x.Cells.map((y, j) => {\r\n        return <td key={j} className={y.className}>{y.ValueString}</td>\r\n      })\r\n      return <tr key={i}>\r\n        {cellElems}\r\n      </tr>\r\n    })\r\n\r\n    return (\r\n      <>\r\n        <table className=\"table table-bordered table-sm\">\r\n          <thead className=\"thead-light\">\r\n            <tr>\r\n             {colElems}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rowElems}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(MassDetailTableView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { MassDetailVM } from './MassDetailVM';\r\nimport MassDetailTableView from './MassDetailTableView';\r\n\r\nclass MassDetailView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Row gutter={10} style={{ padding: 15 }}>\r\n          <Col span={8}>\r\n            <h4 className='text-center'>BẢNG CHI TIẾT KHỐI LƯỢNG</h4>\r\n            <div>\r\n              <MassDetailTableView store={data.DetailTable} />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(MassDetailView));\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as projectUtil from '../ProjectUtil'\r\nimport * as projectVMUtil from '../ProjectVMUtil'\r\nimport * as util from './ProjectCompVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class ProjectCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectVM: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n    projectUtil.getById(v, (item) => {\r\n      this.ProjectVM = projectVMUtil.get(item);\r\n    })\r\n  }\r\n\r\n  projectVM = undefined\r\n  get ProjectVM() {\r\n    return this.projectVM;\r\n  }\r\n  set ProjectVM(v) {\r\n    this.projectVM = v;\r\n\r\n    var list = [v];\r\n    pmDataVM().Project_DictVM.Items = list;\r\n    pmData().Phase_Dict = v.ModelItem.Phase_Dict;\r\n\r\n    var massResComp = this.MassResultCompVM;\r\n    massResComp.ProjectVMStorageList = list;\r\n    massResComp.ProjectSelectVM.InitialItems = list;\r\n\r\n    var setItemsFuncs = () => massResComp.PhaseVMStorageList = phase_DictVM.Items;\r\n\r\n    var phase_DictVM = v.Phase_DictVM;\r\n    if (phase_DictVM.Items) {\r\n      setItemsFuncs();\r\n    } else {\r\n      phase_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n        setItemsFuncs();\r\n      })\r\n    }\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM() {\r\n    if (!this.massResultCompVM) {\r\n      var obj = this.massResultCompVM = util.GetMassResultCompVM(this);\r\n      pmDataVM().MassResultCompVM = obj;\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n}","import MassResultComp from '../../mass/result/MassResultComp'\r\nimport * as massResutlCompVMUtil from '../../mass/result/MassResultCompVMUtil'\r\n\r\nexport const GetMassResultCompVM = (q) => {\r\n  var obj = massResutlCompVMUtil.get(new MassResultComp(), false);\r\n  obj.IsShowProjectSelect = false;\r\n  obj.CanHavePhase = true;\r\n  return obj;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport * as stateType from '../state/StateType'\r\n\r\nconst { Option } = Select;\r\n\r\nclass Phase_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Phase_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var input = data.Input;\r\n    var state = data.State;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Phiên bản khối lượng</b>\r\n        </Divider>\r\n        <div>\r\n          <Button type='primary' size='middle' onClick={data.AddVersion}\r\n            disabled={state === stateType.addversion}>\r\n            <PlusCircleOutlined /> LƯU KẾT QUẢ HIỆN TẠI\r\n          </Button>\r\n\r\n          {state === stateType.addversion ? <div className=\"mt-3\">\r\n            <InputView store={input.NameVM} />\r\n            <InputView store={input.DescriptionVM} />\r\n            <div className=\"mt-2\">\r\n              <Button type='primary' size='small' onClick={data.OK}>OK</Button>\r\n              <Button type='default' size='small' onClick={data.Cancel}>Cancel</Button>\r\n            </div>\r\n          </div> : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Phase_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport TableView from \"../../../../table/TableView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass RebarMass_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new RebarMass_Dict();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Dữ liệu thép</b>\r\n        </Divider>\r\n        \r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(RebarMass_DictView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { Level_Dict } from './Level_Dict';\r\n\r\nclass Level_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Level_Dict();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(Level_DictView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { LevelGroupVM } from './LevelGroupVM';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './LevelGroup.css'\r\n\r\nclass LevelGroupView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new LevelGroupVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='levelgroup__container'>\r\n          <MultiSelectView store={data.LevelSelectVM} />\r\n          <Button size='small' type='text' \r\n            className='levelgroup__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='levelgroup__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LevelGroupView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Popover, Switch } from 'antd';\r\nimport { TLS_FilterValueVM } from './TLS_FilterValueVM';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport './TLS_FilterValue.css'\r\n\r\nclass TLS_FilterValueView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterValueVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n\r\n        <div className='tls_filter__value'>\r\n          {/* Input */}\r\n          <Popover\r\n            trigger={data.PopoverState.Content}\r\n            content={\r\n              <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n                checked={data.SwitchChecked_Funcs()} onChange={data.ToggleInputType} />\r\n            }>\r\n            <span>\r\n              {data.InputElement}\r\n            </span>\r\n          </Popover>\r\n          \r\n          {/* Delete */}\r\n          <Button type='primary' size='small' onClick={data.Delete}\r\n            className='tls_filter__value__delete'>x</Button>\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterValueView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { TLS_FilterVM } from './TLS_FilterVM';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport './TLS_Filter.css'\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport TLS_FilterValueView from './TLS_FilterValueView';\r\n\r\nclass TLS_FilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls_filter__div'>\r\n          {/* Field Select */}\r\n          <SelectView store={data.FieldSelectVM} />\r\n\r\n          <div className='tls_filter__valuediv__wrapper'>\r\n            {/* Add Value */}\r\n            <Button type='primary' size='small' onClick={data.AddValue}\r\n              className='tls_filter__valuediv__addbutton'>+</Button>\r\n\r\n            {/* Value List */}\r\n            <div className='tls_filter__valuediv'>\r\n              {data.Values.map(x => {\r\n                return <TLS_FilterValueView key={x.id} store={x} />\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <Button size='small' type='text'\r\n            className='tls_filter__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='tls_filter__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './TLS_PageItem.css'\r\nimport { TLS_PageItemVM } from './TLS_PageItemVM';\r\nimport TLS_FilterView from '../filter/TLS_FilterView';\r\nimport LevelGroupView from '../levelGroup/LevelGroupView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TLS_PageItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_PageItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__pageitem__wrapper'>\r\n          {/* Filters */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Filter */}\r\n              <Button type='primary' size='small' onClick={data.AddFilter}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập bộ lọc</b></span>\r\n            </div>\r\n\r\n            {/* Filter List */}\r\n            {data.Filters.map(x => {\r\n              return <TLS_FilterView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n\r\n          {/* LevelGroup */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Level */}\r\n              <Button type='primary' size='small' onClick={data.AddLevelGroup}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập level</b></span>\r\n            </div>\r\n\r\n            {/* Level List */}\r\n            {data.LevelGroups.map(x => {\r\n              return <LevelGroupView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_PageItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport LevelGroupView from './levelGroup/LevelGroupView';\r\nimport './TypicalLevelSettingData.css'\r\nimport './pageItem/TLS_PageItem.css'\r\nimport TLS_FilterView from './filter/TLS_FilterView';\r\nimport TLS_PageItemView from './pageItem/TLS_PageItemView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TypicalLevelSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onKeyDown = (v) => {\r\n    //console.log(v);\r\n    v.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <div className='tls__tabs__div'>\r\n            {/* Add Tab */}\r\n            {!data.IsHaveAddCommandTab ?\r\n            <Button type='primary' size='small' onClick={data.AddPageItem}\r\n              className='tls__tabs__add__outside'>+</Button>\r\n              : ''}\r\n\r\n            {/* Tabs */}\r\n            <Tabs type='card' className='tls__tabs'\r\n              onChange={data.ChangePageKey}\r\n              activeKey={data.CurrentPageKey}\r\n              onKeyDown={this.onKeyDown}>\r\n              {data.AllTabs.map(x => {\r\n                return <TabPane tab={x.TitleElement} key={x.id}>\r\n                  <TLS_PageItemView store={x} />\r\n                </TabPane>\r\n              })}\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingDataView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM';\r\nimport TypicalLevelSettingDataView from './TypicalLevelSettingDataView';\r\nimport NewInputView from '../../../../input/NewInputView';\r\nimport './TypicalLevelSetting.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nclass TypicalLevelSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain className='tls__info'>\r\n          <b>Thiết lập tầng điển hình</b>\r\n          <Button type='text' size='small' className='tls__save__button'\r\n            onClick={data.Save}>\r\n            <SaveFilled className='tls__save'/>\r\n          </Button>\r\n        </Divider>\r\n\r\n        {/* Data */}\r\n        <TypicalLevelSettingDataView store={data.DataVM} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport ProjectCompVM from './ProjectCompVM';\r\nimport Phase_DictView from '../../phase/Phase_DictView';\r\nimport MassResultCompView from '../../mass/result/MassResultCompView';\r\nimport RebarMass_DictView from '../../mass/rebar/RebarMass_DictView';\r\nimport Level_DictView from '../../level/Level_DictView';\r\nimport TypicalLevelSettingView from '../../setting/typicallevel/TypicalLevelSettingView';\r\n\r\nclass ProjectCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ProjectCompVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var projectVM = data.ProjectVM;\r\n\r\n    return (\r\n      <>\r\n        <div style={{ padding: 15 }}>\r\n          <Row gutter={10}>\r\n            <Col span={5}>\r\n            </Col>\r\n            <Col span={14}>\r\n              {projectVM ? <>\r\n                <h4 className='text-center'>Dự án {projectVM.Name}</h4>\r\n                <Phase_DictView store={projectVM.Phase_DictVM} />\r\n\r\n                <MassResultCompView store={data.MassResultCompVM} />\r\n\r\n                <RebarMass_DictView store={projectVM.RebarMass_Dict} />\r\n\r\n                {projectVM.TypicalLevelSetting_ForEdit ?\r\n                <TypicalLevelSettingView store={projectVM.TypicalLevelSetting_ForEdit} />\r\n                : '' }\r\n              </> : ''}\r\n            </Col>\r\n            <Col span={5}>\r\n            </Col>\r\n          </Row>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(ProjectCompView));\r\n","import './App.css';\r\nimport \"antd/dist/antd.css\";\r\nimport { Component } from 'react';\r\n\r\nimport TestView from './model/view/TestView';\r\n//import { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\r\nimport MassDetailView from './model/main/entity/mass/detail/MassDetailView';\r\nimport ProjectCompView from './model/main/entity/project/comp/ProjectCompView';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={TestView} />\r\n          <Route exact path=\"/massdetail/:id\" component={MassDetailView} />\r\n          <Route path=\"/project/:id\" component={ProjectCompView} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}