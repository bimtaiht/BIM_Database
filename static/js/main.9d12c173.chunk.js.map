{"version":3,"sources":["model/text/TextState.js","model/text/TextVM.js","model/text/TextVMUtil.js","model/main/entity/forge/View/Forge_Url.js","util/apiUtil.js","model/input/InputView.js","model/main/entity/svg/ShowView.js","model/main/entity/forge/Client.js","model/main/entity/forge/View/extensions/NestedViewerExtension.js","model/main/entity/forge/View/extensions/SetGhostingExtension.js","model/main/entity/forge/View/Forge_HelperUtil.js","util/generalUtil.js","util/commandUtil.js","model/main/entity/command/ProjectCommand.js","model/main/entity/forge/View/Forge.js","model/main/entity/forge/View/ForgeUtil.js","model/main/entity/mass/MassType.js","model/main/entity/mass/site/Site_FieldType.js","model/main/entity/mass/field/MassItemField.js","model/main/entity/phase/item/Phase_Url.js","model/main/entity/phase/item/Phase.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroup.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue_InputType.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueUtil.js","model/main/entity/setting/typicallevel/filter/TLS_Filter.js","model/main/entity/setting/typicallevel/filter/TLS_FilterUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItem.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemUtil.js","model/main/entity/setting/typicallevel/data/TypicalLevelSettingData.js","model/main/entity/setting/typicallevel/data/TypicalLevelSettingDataUtil.js","model/main/entity/setting/level/item/LS_Item.js","model/main/entity/setting/level/data/LevelSettingData.js","model/main/entity/setting/level/item/LS_ItemUtil.js","model/main/entity/setting/level/data/LevelSettingDataUtil.js","model/main/entity/setting/typicallevel/wrapper/TLS_Data_Wrapper.js","model/main/entity/setting/typicallevel/wrapper/TLS_Data_WrapperUtil.js","model/main/entity/setting/base/Setting.js","model/main/entity/mass/report/status/ReportStatusUtil.js","model/main/entity/mass/report/status/ReportStatusUrl.js","model/main/entity/setting/typicallevel/base/TypicalLevelSetting.js","model/main/entity/setting/base/SettingType.js","model/main/entity/setting/typicallevel/base/TypicalLevelSettingUtil.js","model/main/entity/phase/item/PhaseUtil.js","model/main/entity/setting/typicallevel/base/TypicalLevelSetting_Url.js","model/main/entity/phase/dict/Phase_Dict.js","model/main/entity/phase/dict/Phase_DictUtil.js","model/main/entity/level/dict/LevelDict.js","model/main/entity/level/base/LevelItem.js","model/main/entity/level/base/Level_Url.js","model/main/entity/level/base/LevelItemUtil.js","model/main/entity/level/dict/LevelDictUtil.js","model/main/entity/setting/level/base/LevelSetting_Url.js","model/main/entity/setting/level/base/LevelSetting.js","model/main/entity/exportset/item/base/ExportSet_Url.js","model/main/entity/exportset/item/base/ExportSet_RetrieveFrom.js","model/main/entity/exportset/item/base/ExportSet.js","model/main/entity/mass/result/data/DataUtil.js","model/main/entity/exportset/item/phase/item/Item.js","model/main/entity/exportset/item/phase/item/ItemUtil.js","model/main/entity/exportset/item/phase/item/Item_Url.js","model/main/entity/exportset/item/phase/dict/Dict.js","model/main/entity/exportset/item/base/ExportSetUtil.js","model/main/entity/exportset/item/phase/dict/DictUtil.js","model/main/entity/exportset/item/base/ExportSetVersion_Url.js","model/main/entity/mass/item/base/MassItemUrl.js","model/main/entity/exportset/dict/base/ExportSet_Dict.js","model/main/entity/exportset/dict/base/ExportSet_DictUtil.js","model/main/entity/project/base/Project_Url.js","model/main/entity/project/base/ProjectUtil.js","model/main/entity/setting/level/base/LevelSettingUtil.js","model/main/entity/project/base/ProjectCommand_Url.js","model/main/entity/project/base/Project.js","model/main/entity/mass/table/column/base/MassColumn.js","model/main/entity/mass/table/row/query/base/QueryTypeUtil.js","model/main/entity/mass/table/row/query/item/Item.js","model/main/entity/mass/table/row/query/item/ItemUtil.js","model/main/entity/mass/table/row/query/base/QueryUtil.js","model/main/entity/mass/table/column/query/Query.js","model/main/entity/mass/table/column/query/QueryUtil.js","model/main/entity/mass/table/column/base/MassColumnUtil.js","model/text/TextRenderState.js","model/select/MultiSelectVMUtil.js","model/select/MultiSelectVM.js","model/select/MultiSelectView.js","model/select/SelectVMUtil.js","model/select/SelectVM.js","model/float/FloatItemVM.js","model/float/FloatItemVMUtil.js","model/float/FloatItemView.js","model/select/SelectView.js","model/main/entity/mass/table/location/RRLF_LocationType.js","model/main/entity/mass/table/location/ReplaceRowLocationFactory.js","model/main/entity/mass/table/location/ReplaceRowLocationFactoryUtil.js","model/main/entity/mass/table/row/base/MassRow_Field_InputType.js","model/input/NewInputView.js","model/select/twocol/TwoCol_SelectVM.js","model/select/twocol/TwoCol_SelectVMUtil.js","model/select/twocol/TwoCol_SelectView.js","model/main/entity/mass/unit/MassUnitType.js","model/main/entity/update/Update_DirectionType.js","model/main/entity/mass/table/row/update/MRU_SectionName.js","model/main/entity/mass/table/cell/update/MCU_SectionName.js","model/main/entity/mass/table/row/delete/MR_DeleteType.js","model/main/entity/mass/table/command/item/base/CommandType.js","model/main/entity/mass/table/row/base/MassRow.js","model/main/entity/mass/table/row/unit/MR_Unit_SetType.js","model/text/TextRenderItem.js","model/text/TextRenderItemUtil.js","model/text/TextRender_Dict.js","model/text/EditableTextView.js","model/text/EditableTextVM.js","model/text/EditableTextVMUtil.js","util/inputUtil.js","model/main/entity/mass/table/tool/MassRow_ToolElementView.js","model/main/entity/mass/table/tool/MassRow_ToolElement.js","model/main/entity/mass/table/tool/MassRow_ToolElementUtil.js","model/main/entity/filter/EntFilter.js","model/main/entity/filter/FilterCategoryType.js","model/main/entity/filter/FilterValueType.js","model/main/entity/filter/StringFilterType.js","model/main/entity/filter/NumberFilterType.js","model/main/entity/filter/EntFilterUtil.js","model/main/entity/mass/table/cell/base/MassCell_Url.js","model/main/entity/mass/item/value/MI_ValueItem.js","model/main/entity/mass/table/cell/update/MC_Update.js","model/main/entity/mass/table/cell/viewdetail/ViewDetail.js","model/main/entity/mass/table/cell/viewdetail/ViewDetailUtil.js","model/main/entity/mass/table/cell/viewdetail/ViewDetail_Url.js","model/main/entity/mass/table/cell/value/Value_Url.js","model/main/entity/mass/table/cell/value/Value.js","model/main/entity/mass/table/cell/value/ValueUtil.js","model/main/entity/mass/table/cell/query/Query_Url.js","model/main/entity/mass/table/cell/query/Query.js","model/main/entity/mass/table/cell/query/QueryUtil.js","model/main/entity/mass/table/cell/subgroup/base/SubGroup_Url.js","model/main/entity/mass/table/cell/subgroup/base/SubGroup.js","model/main/entity/mass/table/cell/subgroup/item/Item_Url.js","model/main/entity/mass/table/cell/subgroup/item/Item.js","model/main/entity/mass/table/cell/subgroup/base/SubGroupUtil.js","model/main/entity/mass/table/cell/subgroup/item/ItemUtil.js","model/main/entity/mass/item/base/MassItem.js","model/main/entity/mass/item/levelValue/Level_Item.js","model/main/entity/mass/item/levelValue/Level_ItemUtil.js","model/main/entity/mass/item/value/MI_ValueItemUtil.js","model/main/entity/mass/site/Site.js","model/main/entity/mass/site/SiteUtil.js","model/main/entity/mass/site/SiteUrl.js","model/main/entity/mass/item/value/MI_ValueDictUtil.js","model/main/entity/mass/item/value/MI_ValueDict_GroupType.js","model/main/entity/mass/item/value/MI_ValueDict.js","model/main/entity/mass/report/ReportUrl.js","model/main/entity/mass/report/Report.js","model/main/entity/mass/item/base/MassItemUtil.js","model/main/entity/mass/table/cell/base/MassCell_CreateType.js","model/main/entity/mass/table/cell/color/Color.js","model/main/entity/mass/table/cell/color/ColorUtil.js","model/main/entity/mass/table/cell/base/MassCellUtil.js","model/main/entity/mass/table/cell/base/MassCell.js","model/main/entity/mass/table/row/unit/MR_Unit_RenderState.js","model/main/entity/mass/table/row/unit/MR_UnitUtil.js","model/main/entity/mass/table/row/unit/MR_Unit.js","model/delete/EntDelete_ToggleType.js","model/delete/EntDelete_VisibleType.js","model/delete/EntDelete_UseType.js","model/delete/EntDeleteView.js","model/delete/EntDelete.js","model/delete/EntDeleteUtil.js","model/main/entity/mass/table/row/delete/MR_Delete.js","model/main/entity/mass/table/row/delete/MR_DeleteUtil.js","model/main/entity/mass/table/row/update/MR_Update.js","model/main/entity/mass/site/SiteVM.js","util/dateUtil.js","model/datepicker/DatePickerUtil.js","model/datepicker/DatePicker.js","model/datepicker/DatePickerView.js","model/main/entity/mass/site/SiteVMUtil.js","model/main/entity/mass/table/row/groupfactory/Factory.js","model/main/entity/mass/table/row/groupfactory/FactoryUtil.js","model/main/entity/mass/table/row/base/MassRowUtil.js","model/main/entity/mass/table/row/base/MassRow_Url.js","model/main/entity/mass/table/command/item/base/CommandItem.js","model/main/entity/mass/table/command/item/data/value/ReplaceRow_ValueUtil.js","model/main/entity/mass/table/command/item/data/value/ReplaceRow_Value.js","model/main/entity/mass/table/command/item/data/base/Data.js","model/main/entity/mass/table/command/item/data/base/DataUtil.js","model/main/entity/mass/table/command/item/base/CommandItemUtil.js","model/main/entity/mass/table/command/item/base/Command_TargetType.js","model/main/entity/mass/table/command/dict/CommandDict.js","model/main/entity/svg/UndoView.js","model/main/entity/mass/table/command/dict/CommandDictUtil.js","model/main/entity/mass/table/savevalue/base/SaveValue.js","model/main/entity/mass/table/base/build/base/Build.js","model/main/entity/mass/table/base/build/bycell/Item.js","model/main/entity/mass/table/base/build/bycell/ItemUtil.js","model/main/entity/mass/table/base/build/byitem/base/Item.js","model/main/entity/mass/table/base/build/byitem/base/Item_RunType.js","model/main/entity/mass/table/base/build/byitem/valueItem/ValueItem.js","model/main/entity/mass/table/base/build/byitem/base/ItemUtil.js","model/main/entity/mass/table/base/build/byitem/valueItem/ValueItemUtil.js","model/main/entity/mass/table/base/build/base/BulidUtil.js","model/main/entity/mass/report/ReportUtil.js","model/main/entity/mass/table/base/instance/MassTableUtil.js","model/main/entity/mass/table/savevalue/base/SaveValueUtil.js","model/export/excel/ExcelExport.js","model/main/entity/mass/table/export/MT_Cell.js","model/main/entity/mass/table/export/MT_CellUtil.js","model/main/entity/mass/table/export/MT_Data_Row.js","model/main/entity/mass/table/export/MT_Cell_ValueType.js","model/main/entity/mass/table/export/MT_Data_RowUtil.js","model/main/entity/mass/table/export/MT_Data_Worksheet.js","model/main/entity/mass/table/export/MT_Data_WorksheetUtil.js","model/main/entity/mass/table/export/MT_RawData_Worksheet.js","model/main/entity/mass/table/export/MT_RawData_WorksheetUtil.js","model/main/entity/mass/table/export/MT_Workbook.js","model/main/entity/mass/table/export/MT_WorkbookUtil.js","model/text/TextView.js","model/main/entity/mass/table/cell/base/MassCellView.js","model/main/entity/mass/table/row/unit/MR_UnitView.js","model/main/entity/mass/table/row/base/MassRowView.js","model/main/entity/mass/table/tbody/MassTBody.js","model/main/entity/mass/table/tbody/MassTBody_View.js","model/main/entity/mass/table/base/instance/MassTableView.js","model/main/entity/mass/table/base/instance/MassTable.js","model/export/excel/ExcelExportUtil.js","model/main/entity/mass/item/base/MassItem_DictUtil.js","model/main/entity/mass/item/base/MassItem_Dict.js","model/main/entity/mass/result/base/MassResultCompUtil.js","model/main/entity/mass/result/base/MassResultComp.js","model/main/entity/setting/versionCompare/VCS_Item.js","model/main/entity/setting/versionCompare/VersionCompareSetting.js","model/main/entity/setting/versionCompare/VersionCompareSettingUtil.js","model/main/entity/tracking/TrackingItem.js","model/main/entity/tracking/Tracking.js","model/main/entity/mass/field/MassItemField_Dict.js","model/main/entity/project/dict/Project_Dict.js","model/main/entity/project/dict/Project_DictUtil.js","model/main/entity/setting/massGroup/dict/dict/MGS_Dict_Dict.js","model/main/entity/setting/massGroup/dict/base/MassGroupSetting_Dict.js","model/main/entity/setting/massGroup/item/command/CommandData_Url.js","model/main/entity/setting/massGroup/dict/base/MGS_Dict_UseType.js","model/main/entity/setting/massGroup/item/command/CommandData.js","model/main/entity/setting/massGroup/item/command/CommandDataUtil.js","model/main/entity/setting/massGroup/item/base/MassGroupSetting_Url.js","model/main/entity/setting/massGroup/item/base/MassGroupSetting.js","model/main/entity/setting/massGroup/item/addtemplate/AddTemplateUtil.js","model/main/entity/setting/massGroup/item/addtemplate/AddTemplate.js","model/main/entity/setting/massGroup/item/base/MassGroupSettingUtil.js","model/main/entity/setting/massGroup/save/Save.js","model/main/entity/setting/massGroup/save/SaveUtil.js","model/main/entity/setting/massGroup/dict/base/MGS_Dict_Category.js","model/main/entity/setting/massGroup/dict/base/MassGroupSetting_DictUtil.js","model/main/entity/setting/massGroup/dict/dict/MGS_Dict_DictUtil.js","model/main/entity/setting/massDetail/dict/dict/MDS_Dict_Dict.js","model/main/entity/setting/massDetail/dict/MassDetailSetting_Dict.js","model/main/entity/setting/massDetail/item/MassDetailSetting_Url.js","model/main/entity/setting/massDetail/item/MassDetailSetting.js","model/main/entity/setting/massDetail/item/MassDetailSettingUtil.js","model/main/entity/setting/massDetail/save/Save.js","model/main/entity/setting/massDetail/save/SaveUtil.js","model/main/entity/setting/massDetail/dict/MassDetailSetting_DictUtil.js","model/main/entity/setting/massDetail/dict/dict/MDS_Dict_DictUtil.js","model/main/entity/setting/sitesuggest/item/Item_Url.js","model/main/entity/setting/sitesuggest/item/Item.js","model/main/entity/setting/sitesuggest/item/ItemUtil.js","model/main/entity/setting/sitesuggest/dict/dict/Dict_Dict.js","model/main/entity/setting/sitesuggest/dict/base/Dict.js","model/main/entity/setting/sitesuggest/dict/base/Dict_UseType.js","model/main/entity/setting/sitesuggest/dict/base/DictUtil.js","model/main/entity/setting/sitesuggest/dict/dict/Dict_DictUtil.js","model/main/entity/massType/list/item/Item_Url.js","model/main/entity/massType/list/item/Item.js","model/main/entity/massType/list/item/ItemUtil.js","model/main/entity/massType/list/dict/DictUtil.js","model/main/entity/massType/list/dict/Dict.js","model/main/entity/massType/materialbinding/item/base/Item_Url.js","model/main/entity/massType/materialbinding/item/material/Material.js","model/main/entity/massType/materialbinding/item/material/MaterialUtil.js","model/main/entity/massType/materialbinding/item/base/Item.js","model/main/entity/massType/materialbinding/item/base/ItemUtil.js","model/main/entity/massType/materialbinding/dict/DictUtil.js","model/main/entity/massType/materialbinding/dict/Dict.js","model/main/entity/massType/categorybinding/item/base/Item_Url.js","model/main/entity/massType/categorybinding/item/base/Item.js","model/main/entity/massType/categorybinding/item/base/ItemUtil.js","model/main/entity/massType/categorybinding/dict/DictUtil.js","model/main/entity/massType/categorybinding/dict/Dict.js","model/main/entity/massType/systembinding/item/base/Item_Url.js","model/main/entity/massType/systembinding/item/system/type/Type.js","model/main/entity/massType/systembinding/item/system/type/TypeUtil.js","model/main/entity/massType/systembinding/item/system/base/System.js","model/main/entity/massType/systembinding/item/system/base/SystemUtil.js","model/main/entity/massType/systembinding/item/base/Item.js","model/main/entity/massType/systembinding/item/base/ItemUtil.js","model/main/entity/massType/systembinding/dict/DictUtil.js","model/main/entity/massType/systembinding/dict/Dict.js","model/main/entity/massType/base/Base.js","model/main/entity/massType/base/BaseUtil.js","model/main/entity/category/list/item/Item_Url.js","model/main/entity/category/list/item/Item.js","model/main/entity/category/list/item/ItemUtil.js","model/main/entity/category/list/dict/DictUtil.js","model/main/entity/category/list/dict/Dict.js","model/main/entity/parameter/list/item/Item_Url.js","model/main/entity/parameter/list/item/Item.js","model/main/entity/parameter/list/item/ItemUtil.js","model/main/entity/parameter/list/dict/DictUtil.js","model/main/entity/parameter/list/dict/Dict.js","model/main/entity/massExport/list/item/massinfo/masstypeexport/MTE_Type.js","model/main/entity/massExport/list/item/massinfo/masstypeexport/MassTypeExportUtil.js","model/main/entity/massExport/list/item/massinfo/masstypeexport/MassTypeExport.js","model/main/entity/massExport/list/item/massinfo/valueinfo/VI_RetrieveType.js","model/main/entity/massExport/list/item/massinfo/valueinfo/ValueInfo.js","model/main/entity/massExport/list/item/massinfo/valueinfo/ValueInfoUtil.js","model/main/entity/massExport/list/item/massinfo/base/MI_ClassifyValueBy.js","model/main/entity/massExport/list/item/massinfo/base/MassInfo.js","model/main/entity/massExport/list/item/massinfo/base/MassInfoUtil.js","model/main/entity/massExport/list/item/type/base/Type.js","model/main/entity/massExport/list/item/type/filter/Filter.js","model/main/entity/massExport/list/item/type/filter/FilterUtil.js","model/main/entity/massExport/list/item/type/base/TypeUtil.js","model/main/entity/massExport/list/item/page/PageItem.js","model/main/entity/massExport/list/item/page/PageItemUtil.js","model/main/entity/massExport/list/dict/Dict_Url.js","model/main/entity/massExport/list/dict/DictUtil.js","model/main/entity/massExport/list/dict/Dict.js","model/main/entity/workItem/item/Item.js","model/main/entity/workItem/item/Item_Url.js","model/main/entity/workItem/item/ItemUtil.js","model/main/entity/workItem/dict/DictUtil.js","model/main/entity/workItem/dict/Dict.js","model/user/dict/User_Dict.js","model/user/item/User.js","model/user/item/UserUtil.js","model/user/dict/User_DictUtil.js","model/main/entity/admin/main/Admin.js","model/main/entity/admin/usermanager/dict/Dict.js","model/main/entity/admin/usermanager/dict/DictUtil.js","model/main/entity/admin/project/item/Item_Url.js","model/main/entity/admin/project/item/Item.js","model/main/entity/admin/project/item/ItemUtil.js","model/main/entity/admin/project/dict/Dict.js","model/main/entity/admin/project/dict/DictUtil.js","model/main/entity/admin/projectgroup/item/Item_Url.js","model/main/entity/admin/projectgroup/item/Item.js","model/main/entity/admin/projectgroup/item/ItemUtil.js","model/main/entity/admin/projectgroup/dict/Dict.js","model/main/entity/admin/projectgroup/dict/DictUtil.js","model/main/entity/admin/main/AdminUtil.js","model/main/single/model/PMDataUtil.js","model/main/entity/mass/unit/MassUnitType_Dict.js","model/main/entity/project/base/ProjectGroupCommand_Url.js","model/main/entity/design/DesignOptionType.js","model/main/single/model/PMData.js","model/main/entity/project/base/ProjectViewType.js","model/main/entity/phase/item/PhaseVM.js","model/main/entity/phase/item/PhaseVMUtil.js","model/main/entity/phase/table/TableView.js","model/main/entity/phase/dict/Phase_DictVM.js","model/main/entity/phase/dict/Phase_DictVMUtil.js","model/checkbox/CheckboxView.js","model/checkbox/CheckboxVM.js","model/checkbox/CheckboxVMUtil.js","model/main/entity/project/base/ProjectVM.js","model/main/entity/setting/base/SettingVM.js","model/main/entity/setting/level/base/LevelSettingVM.js","model/main/entity/setting/level/item/LS_ItemVM.js","util/dragUtil.js","model/main/entity/setting/level/item/LS_ItemVMUtil.js","model/main/entity/setting/level/table/TableView.js","model/main/entity/setting/level/data/LevelSettingDataVM.js","model/table/RenderState.js","model/table/RenderItem.js","model/table/TableCell.js","model/table/TableCellUtil.js","model/table/RenderItemUtil.js","model/table/Render_Dict.js","model/table/TitleRenderItem.js","model/table/TitleRenderItemUtil.js","model/table/TitleRender_Dict.js","model/table/TableColumn_InputType.js","model/table/TableColumnUtil.js","model/table/TableColumn.js","model/table/TableRow.js","model/table/TableRowUtil.js","model/table/TableVM.js","model/table/TableVMUtil.js","model/main/entity/setting/level/data/LevelSettingDataVMUtil.js","model/main/entity/setting/typicallevel/wrapper/TLS_Data_WrapperVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemStateType.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVM.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVMUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVMUtil.js","model/main/entity/setting/typicallevel/data/TypicalLevelSettingDataVM.js","model/main/entity/setting/typicallevel/data/TypicalLevelSettingDataVMUtil.js","model/main/entity/setting/typicallevel/wrapper/TLS_Data_WrapperVMUtil.js","model/table/TableView.js","model/main/entity/setting/level/data/LevelSettingDataView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupView.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemView.js","model/main/entity/setting/typicallevel/data/TypicalLevelSettingDataView.js","model/main/entity/setting/typicallevel/base/TypicalLevelSettingVM.js","model/main/entity/setting/typicallevel/base/TypicalLevelSettingVMUtil.js","model/main/entity/exportset/item/massitem_table/column/Column_GroupType.js","model/main/entity/exportset/item/massitem_table/table/Table_UseType.js","model/main/entity/exportset/item/massitem_table/columngroup/ColumnGroup.js","model/main/entity/exportset/item/massitem_table/column/Column.js","model/main/entity/exportset/item/massitem_table/column/ColumnUtil.js","model/main/entity/exportset/item/massitem_table/columngroup/ColumnGroupUtil.js","model/main/entity/exportset/item/massitem_table/table/TableView.js","model/main/entity/exportset/item/massitem_table/table/TableUrl.js","model/main/entity/exportset/item/massitem_table/table/Table.js","model/main/entity/mass/detail/MassDetailVM.js","model/main/entity/mass/detail/MassDetailVMUtil.js","model/main/entity/exportset/item/massitem_table/table/TableUtil.js","model/main/entity/project/base/ProjectCommandType.js","model/main/entity/exportset/item/base/ExportSetVMUtil.js","model/main/entity/exportset/item/base/ExportSetVM.js","model/main/entity/exportset/table/TableItemView.js","model/main/entity/exportset/table/TableView.js","model/main/entity/exportset/dict/base/ExportSet_DictVM.js","model/main/entity/exportset/dict/view/View.js","model/main/entity/exportset/dict/view/ViewUtil.js","model/main/entity/exportset/dict/base/ExportSet_DictVMUtil.js","model/main/entity/project/base/ProjectVMUtil.js","model/main/entity/setting/level/base/LevelSettingVMUtil.js","model/main/entity/project/table/TableView.js","model/main/entity/project/dict/Project_DictVM.js","model/main/entity/project/dict/Project_DictVMUtil.js","model/main/entity/mass/item/base/MassItem_DictView.js","model/main/entity/mass/result/base/MassResultCompView.js","model/main/entity/mass/result/base/MassResultCompVM.js","model/main/entity/mass/result/base/MassResultCompVMUtil.js","model/main/entity/doc/comp/DO_Comp.js","model/main/entity/doc/DO_Element.js","model/main/entity/doc/DO_ElementType.js","model/main/entity/doc/DO_ElementUtil.js","model/main/entity/doc/DO_ElementVM.js","model/main/entity/doc/DO_ElementVMUtil.js","model/main/entity/doc/comp/DO_CompVMUtil.js","model/main/entity/doc/comp/DO_CompUtil.js","model/main/entity/doc/comp/DO_CompVM.js","model/main/entity/doc/DO_ElementView.js","model/main/entity/doc/comp/DO_CompView.js","model/main/entity/setting/massType/Category/Category_ItemVM.js","model/main/entity/setting/massType/Category/Category_ItemVMUtil.js","model/main/entity/setting/massType/MEP/MEP_ItemVM.js","model/main/entity/setting/massType/MEP/MEP_ItemVMUtil.js","model/main/entity/setting/massType/Item/MT_ItemVM.js","model/main/entity/setting/massType/Item/MT_ItemVMUtil.js","model/main/entity/setting/massType/MassTypeSettingDataVM.js","model/main/entity/setting/massType/CategorySettingDataVMUtil.js","model/main/entity/setting/massType/MEPSettingDataVMUtil.js","model/main/entity/setting/massType/MassTypeSettingDataVMUtil.js","model/main/entity/setting/massType/MassTypeSettingVM.js","model/main/entity/setting/massType/MassTypeSetting.js","model/main/entity/setting/massType/Item/MT_Item.js","model/main/entity/setting/massType/Category/Category_Item.js","model/main/entity/setting/massType/MassTypeSettingData.js","model/main/entity/setting/massType/Item/MT_ItemUtil.js","model/main/entity/setting/massType/Category/Category_ItemUtil.js","model/main/entity/setting/massType/MassTypeSettingDataUtil.js","model/main/entity/setting/massType/MassTypeSettingUtil.js","model/main/entity/setting/massType/MassTypeSettingVMUtil.js","model/main/entity/setting/massType/MassTypeSettingDataView.js","model/main/entity/setting/massType/MassTypeSettingView.js","model/main/entity/tab/Tab.js","model/main/entity/tab/TabUtil.js","model/main/entity/setting/massGroup/item/addtemplate/AddTemplateVM.js","model/main/entity/setting/massGroup/item/addtemplate/AddTemplateVMUtil.js","model/main/entity/setting/massGroup/item/base/MassGroupSettingVMUtil.js","model/main/entity/setting/massGroup/dict/dict/MGS_Dict_Dict_UseType.js","model/main/entity/setting/massGroup/item/base/MassGroupSettingVM.js","model/main/entity/setting/massGroup/table/TableItemView.js","model/main/entity/tab/TabView.js","model/main/entity/setting/massGroup/table/TableView.js","model/main/entity/setting/massGroup/dict/base/MassGroupSetting_DictVM.js","model/main/entity/setting/massGroup/save/SaveVM.js","model/main/entity/setting/massGroup/dict/base/MassGroupSetting_DictVMUtil.js","model/main/entity/setting/massGroup/save/SaveVMUtil.js","model/main/entity/setting/massGroup/dict/dict/MGS_Dict_DictVM.js","model/main/entity/setting/massGroup/dict/dict/MGS_Dict_DictVMUtil.js","model/main/entity/setting/massDetail/item/MassDetailSettingVMUtil.js","model/main/entity/setting/massDetail/dict/dict/MDS_Dict_Dict_UseType.js","model/main/entity/setting/massDetail/item/MassDetailSettingVM.js","model/main/entity/setting/massDetail/table/TableItemView.js","model/main/entity/setting/massDetail/table/TableView.js","model/main/entity/setting/massDetail/dict/MassDetailSetting_DictVM.js","model/main/entity/setting/massDetail/save/SaveVM.js","model/main/entity/setting/massDetail/dict/MassDetailSetting_DictVMUtil.js","model/main/entity/setting/massDetail/save/SaveVMUtil.js","model/main/entity/setting/massDetail/dict/dict/MDS_Dict_DictVM.js","model/main/entity/setting/massDetail/dict/dict/MDS_Dict_DictVMUtil.js","model/main/entity/setting/sitesuggest/item/ItemVMUtil.js","model/main/entity/setting/sitesuggest/item/ItemVM.js","model/main/entity/setting/sitesuggest/table/TableItemView.js","model/main/entity/setting/sitesuggest/table/TableView.js","model/main/entity/setting/sitesuggest/dict/base/DictVM.js","model/main/entity/setting/sitesuggest/dict/base/DictVMUtil.js","model/main/entity/setting/sitesuggest/dict/dict/Dict_DictVM.js","model/popover/EntPopover_TriggerType.js","model/popover/EntPopoverView.js","model/popover/EntPopover.js","model/popover/EntPopoverUtil.js","model/main/entity/setting/sitesuggest/dict/dict/Dict_DictVMUtil.js","model/main/entity/massType/base/BaseVM.js","model/main/entity/massType/list/item/ItemVMUtil.js","model/main/entity/massType/list/item/ItemVM.js","model/main/entity/massType/list/table/TableItemView.js","model/main/entity/massType/list/table/TableView.js","model/main/entity/massType/list/dict/DictVM.js","model/main/entity/massType/list/dict/DictVMUtil.js","model/main/entity/massType/categorybinding/item/base/ItemVMUtil.js","model/main/entity/massType/categorybinding/item/base/ItemVM.js","model/main/entity/massType/categorybinding/table/TableItemView.js","model/main/entity/massType/categorybinding/table/TableView.js","model/main/entity/massType/categorybinding/dict/DictVM.js","model/main/entity/massType/categorybinding/dict/DictVMUtil.js","model/main/entity/massType/materialbinding/item/material/MaterialVM.js","model/main/entity/massType/materialbinding/item/material/MaterialVMUtil.js","model/main/entity/massType/materialbinding/item/base/ItemVMUtil.js","model/main/entity/massType/materialbinding/item/base/ItemVM.js","model/main/entity/massType/materialbinding/table/TableItemView.js","model/main/entity/massType/materialbinding/table/TableView.js","model/main/entity/massType/materialbinding/dict/DictVM.js","model/main/entity/massType/materialbinding/dict/DictVMUtil.js","model/main/entity/massType/systembinding/item/system/type/TypeVM.js","model/main/entity/massType/systembinding/item/system/type/TypeVMUtil.js","model/main/entity/massType/systembinding/item/system/base/SystemVM.js","model/main/entity/massType/systembinding/item/system/base/SystemVMUtil.js","model/main/entity/massType/systembinding/item/base/ItemVMUtil.js","model/main/entity/massType/systembinding/item/base/ItemVM.js","model/main/entity/massType/systembinding/table/TableItemView.js","model/main/entity/massType/systembinding/table/TableView.js","model/main/entity/massType/systembinding/dict/DictVM.js","model/main/entity/massType/systembinding/dict/DictVMUtil.js","model/main/entity/massType/base/BaseVMUtil.js","model/main/entity/category/list/item/ItemVMUtil.js","model/main/entity/category/list/item/ItemVM.js","model/main/entity/category/list/table/TableItemView.js","model/main/entity/category/list/table/TableView.js","model/main/entity/category/list/dict/DictVM.js","model/main/entity/category/list/dict/DictVMUtil.js","model/main/entity/parameter/list/item/ItemVMUtil.js","model/main/entity/parameter/list/item/ItemVM.js","model/main/entity/parameter/list/table/TableItemView.js","model/main/entity/parameter/list/table/TableView.js","model/main/entity/parameter/list/dict/DictVM.js","model/main/entity/parameter/list/dict/DictVMUtil.js","model/main/entity/massExport/list/item/massinfo/valueinfo/ValueInfoView.js","model/main/entity/massExport/list/item/massinfo/valueinfo/ValueInfoVM.js","model/main/entity/massExport/list/item/massinfo/valueinfo/ValueInfoVMUtil.js","model/main/entity/massExport/list/item/massinfo/base/MassInfoVM.js","model/main/entity/massExport/list/item/massinfo/masstypeexport/MassTypeExportView.js","model/main/entity/massExport/list/item/massinfo/masstypeexport/MassTypeExportVM.js","model/main/entity/massExport/list/item/massinfo/masstypeexport/MassTypeExportVMUtil.js","model/main/entity/massExport/list/item/massinfo/base/MassInfoVMUtil.js","model/main/entity/massExport/list/item/type/base/TypeVM.js","model/main/entity/massExport/list/item/type/filter/FilterVM.js","model/main/entity/massExport/list/item/type/filter/FilterVMUtil.js","model/main/entity/massExport/list/item/type/base/TypeVMUtil.js","model/main/entity/massExport/list/item/page/PageItemVMUtil.js","model/main/entity/massExport/list/item/page/PageItemVM.js","model/main/entity/massExport/list/table/TableItemView.js","model/main/entity/massExport/list/table/TableView.js","model/main/entity/massExport/list/dict/DictVM.js","model/main/entity/massExport/list/dict/DictVMUtil.js","model/user/dict/User_Dict_ViewType.js","model/user/dict/User_DictVM.js","model/user/item/UserVM.js","model/user/item/UserVMUtil.js","model/user/login/Login.js","model/user/login/LoginUtil.js","model/user/newpassword/NewPassword.js","model/user/newpassword/NewPasswordUtil.js","model/user/dict/User_DictVMUtil.js","model/main/entity/admin/main/AdminVM.js","model/main/entity/admin/usermanager/table/TableView.js","model/main/entity/admin/usermanager/dict/DictVM.js","model/main/entity/admin/usermanager/dict/DictVMUtil.js","model/main/entity/admin/project/item/ItemVM.js","model/main/entity/admin/project/group/GroupVMUtil.js","model/main/entity/admin/project/group/GroupVM.js","model/main/entity/admin/project/item/ItemVMUtil.js","model/main/entity/admin/project/table/TableItemView.js","model/main/entity/admin/project/table/TableView.js","model/main/entity/admin/project/dict/DictVM.js","model/main/entity/admin/project/dict/DictVMUtil.js","model/main/entity/admin/projectgroup/item/ItemVM.js","model/main/entity/admin/projectgroup/item/ItemVMUtil.js","model/main/entity/admin/projectgroup/table/TableItemView.js","model/main/entity/admin/projectgroup/table/TableView.js","model/main/entity/admin/projectgroup/dict/DictVM.js","model/main/entity/admin/projectgroup/dict/DictVMUtil.js","model/main/entity/admin/main/AdminVMUtil.js","model/main/entity/nav/left/base/LeftNav.js","model/nav/dict/DictView.js","model/nav/dict/Dict.js","model/nav/item/ItemView.js","model/nav/item/Item.js","model/main/entity/nav/left/item/ItemUtil.js","model/main/entity/nav/left/base/LeftNavVMUtil.js","model/main/entity/nav/left/base/LeftNavUtil.js","model/nav/item/ItemUtil.js","model/main/entity/nav/left/base/LeftNavVM.js","model/main/entity/nav/left/base/LeftNavView.js","model/main/entity/mass/detail/MassDetailView.js","model/main/entity/project/comp/ProjectCompVM.js","model/main/entity/project/comp/ProjectCompVMUtil.js","model/main/entity/project/comp/ProjectCompView.js","model/main/entity/admin/main/AdminView.js","model/main/entity/command/Command.js","model/main/entity/home/HomeView.js","model/main/entity/project/comp/ProjectCompView__Router.js","model/main/single/form/PMDataVMUtil.js","model/main/single/form/PMDataVM.js","model/main/single/form/PMDataView.js","App.js","reportWebVitals.js","index.js"],"names":["text","password","TextVM","content","undefined","placeholder","State","ts","makeObservable","this","observable","v","onSetContent","OnSetContent","style","inputStyle","wrapper","position","get","q","qI","url","http","timeout","axios","create","baseURL","Accept","handleResponse","response","success","status","data","message","statusText","callApi","action","a","err","error","timeout_default","config","put","payload","result","post","InputView","props","onChange","e","value","target","state","Content","OnKeyDown","store","textVMUtil","Ref","React","createRef","className","onFocus","OnFocus","onBlur","OnBlur","onPaste","OnPaste","ref","onKeyDown","Password","Component","observer","UndoView","width","height","viewBox","d","Client","getaccesstoken","method","headers","require","stringify","process","then","catch","console","log","Autodesk","window","NestedViewerExtension","viewer","options","_filter","filter","_crossSelection","crossSelection","_group","_button","_panel","_onModelLoaded","onModelLoaded","bind","_onSelectionChanged","onSelectionChanged","addEventListener","Viewing","MODEL_ROOT_LOADED_EVENT","SELECTION_CHANGED_EVENT","removeEventListener","uninitialize","removeControl","getNumberOfControls","toolbar","urn","model","getData","vs","getSelection","ps","_viewer","isSelectionSame","select","sel1","sel2","length","i","getControl","UI","ControlGroup","addControl","Button","onClick","ev","NestedViewerPanel","isVisible","setVisible","removeClass","addClass","setToolTip","Extension","container","_urn","_parentViewer","top","right","title","createTitleBar","titleLabel","id","appendChild","_container","document","createElement","left","_overlay","display","backgroundColor","color","zIndex","justifyContent","alignItems","_dropdown","setProperty","setAttribute","_onDropdownChanged","stopPropagation","initializeMoveHandlers","_footer","createFooter","footerInstance","resizeCallback","resize","show","GuiViewer3D","start","dbids","innerHTML","Document","load","doc","_manifest","geometries","getRoot","search","type","geom","indexOf","role","map","guid","name","join","innerText","loadDocumentNode","findByGuid","_updateDropdown","DockingPanel","theExtensionManager","registerExtension","ExtensionId","SetGhostingExtension","setGhosting","getToken","accessToken","onDocumentLoadSuccess","handle","setGroundReflection","setGroundShadow","setOptimizeNavigation","loadExtension","replaceSpinner","spinners","getElementsByClassName","spinner","classList","remove","add","attribName","searchAncestors","getSubsetModel","dbIds","values","callback","newDbIds","getBulkProperties","propFilter","ignoreHidden","key1","key","item","externalId","push","dbId","getAllDbIdsMultipleModel","instanceTree","getInstanceTree","Object","keys","nodeAccess","dbIdToIndex","parseInt","randomId","Intl","DateTimeFormat","Math","random","toString","substr","newGUID","replace","c","crypto","getRandomValues","Uint8Array","MoveItem","list","oldIndex","newIndex","temp","InsertItem","sourceIndex","destIndex","splice","reorderedItem","Remove","dict","index","findIndex","x","Key","Add","func","isDelete","newfunc","Value","Add_2","IsDelete","Handle","newDict_Handle","forEach","ExcelCellName","row","col","n","ordA","charCodeAt","len","s","String","fromCharCode","floor","ExcelColumnName","ExcelRangeName","row1","col1","row2","col2","SaveDatabase","apiFunc","apiData","ApiData","_id","api","isNew","DeleteDatabase","GetPlainText","pasteEvent","originalEvent","clipboardData","SingleFilter","nullHandle","obj","IncreFunc","pmDataVM","PMDataVM","Instance","Validate","commands","Commands","ValidateInGroup","AdminCommands","includes","isValid","view","edit","GetList","Forge","OnSet_id_Func_Dict","documentId","Initial","IsLoggedIn","div","urns","token","access_token","Initializer","getElementById","extensions","viewables","getDefaultGeometry","getAecModelData","aec","keepCurrentModels","globalOffset","y","z","applyRefPoint","isAEC","helperUtil","DocumentIds","Can_Visible","ToggleVisible","Is_Initial","Input_Open","DocumentId","TempDocumentId","Edit_Urn","SelectElements","guids","mapIds","allModels","impl","modelQueue","getModels","DBids","visibilityManager","isolate","showMessage","genUtil","__id","tempId","TempId","size","VisibleButton_Style","ShowView","inputVM","Placeholder","comUtil","pct","InputVM","UnAuthorized_View","ModalViewerStyle","ModelView","projectId","PMData","CurrentProject","Dict","Concrete","AcceptanceNumberInternal","AcceptanceNumber","AcceptanceDate","SupervisorContractor","SupervisorConsultant","SupervisorClient","SubContractor","PaymentPeriodSubContractor","PaymentPeriodClient","GetKey","GetTitle","Project","Phase","Workpackage","Unit","elementName","MassType","workItem","level","diameter","rebarnumber","block","zone","typename","materialName","systemtype","systemclassification","familyName","roomName","roomNumber","elementId","ExportSet","GetBase","GetForMassGroup","GetForDetail","apply","sft","GetListForTypicalLevelFilter","GetName","field","Is_FirstCreated","OnGet_TypicalLevelSetting_Func","Run","util","Save","Delete","CurrentList","Index","description","typicalLevelSetting","Name","desciprtion","Description","Items","LevelGroup","LevelGroups","OnGetLevelStorageList_Func_Dict","IsEqual","other","levels","Levels","primary","Primary","getLevelStorageList","LevelStorageList","IsGet_LevelStorageList","Setting","OnGetLevelStorageList_Funcs","GetLevelStorageList","min","LevelIndexs","max","MinLevel","MaxLevel","Count","FilterDescription","Array","isArray","GetDefault","GetDefaultPrimary","GetPrimary_Values","Binding","Values","q1","q2","l1","l2","c_l2","input","TLS_FilterValue","InputType","it","inputType","TLS_Filter","Filters","AddItem","FieldStorageList","FieldFilterStorageList","Field","items","reduce","b","arr","Clone","valueUtil","i1","i2","c_i2","TLS_PageItem","PageItems","AddLevelGroup","levelGroupUtil","AddFilter","filterUtil","levelGroups","filters","GetLevelGroups","GetFilters","f1","f2","c_f2","TypicalLevelSettingData","AddPageItem","pageItemUtil","pageItems","GetTest","GetPageItems","p1","p2","LS_Item","LevelSettingData","itemUtil","Update_LevelData","OnSet_LevelStorageList_Func_Dict","Move","Insert","levelStorageList","GetFromDb","TLS_Data_Wrapper","binding","typical","Typical","OnDelete","Input","EditItemId","Url","OnNameChanged","OnDescriptionChanged","OnDataChanged","settingType","SettingType","Data","Update","isUpdated","TypicalLevelSetting","OldTypical","typicalUtil","report_statusUtil","fieldFilterStorageList","masstype","project","phase","ls_dataUtil","tls_dataUtil","dataUtil","GetFieldFilterStorageList","fieldUtil","level_Dict","Level_Dict","getLevelsFunc","OnGetItemsDone_Funcs","pmData","Handle_TypicalLevelSetting","IsGet_TypicalLevelSetting","phaseId","typlicalLevelSettingUtil","setObj","mainHandle","incre","save_esversions","save_report","save_levelsetting","save_exportset_value","Phase_Dict","OnSet_Items_Func","GetItem","host","Handle_Items","IsGet_Items","LevelDict","OnSet_Undefined_Item_Func","GetLevel","undefined_Item","LevelItem","Elevation","elevation","Handle_Undefined_Item","IsGet_Undefined_Item","itemUrl","Undefined_Item","getObj","LevelSetting","st","Old_MassMultiply","Mass_Multiply","NewVersion","SaveMassItems","OnSet_MassItems_Func","mass_Multiply","phaseDict","massTypeId","retrieveFrom","RetrieveFrom","massItems","GetData","Item","OnSet_Mass_Multiply_Func","exportSetId","Handle_Mass_Multiply","IsGet_Mass_Multiply","Handle_MassItems","IsGet_MassItems","MassItems","otherData","resultUtil","GetPhaseDict","phaseDictUtil","versionId","exportSetVersionId","ApiData_ForInput","addDataFunc","ExportSet_Dict","iUtil","Get_AddItem","getApi","Code","code","Fortest","fortest","GetExportSet_Dict","exportSetDictUtil","Handle_LevelDict","IsGet_LevelDict","Handle_LevelSetting","IsGet_LevelSetting","levelUtil","Handle_Commands","IsGet_Commands","UserDict","LoginUser","userId","OnSet_LevelDict_Func_Dict","OnSet_LevelSetting_Func_Dict","OnGetTypicalLevelSetting_Func_Dict","OnSet_Commands_Func","Reset_Commands","phase_Dict","exportSet_Dict","levelDict","levelSetting","getTypicalLevelSetting","IsOnGetDb_Async","resData","editData","typicalLevelUtil","TypicalLevelSetting_ForEdit","GetTypicalLevelSetting","typicalLevelSetting_ForEdit","order","MassColumn","Cells","OnSet_Project_Func","OnSet_Phase_Func","OnSet_Name_Func","Table","Columns","queryData","massItem_Handle","GetValueFrom","mif","valueId","AddQuery_Base","itemFunc","val","propname","propertyName","qt","getPropName","Query","AddQuery","baseUtil","Column","GetItems","projectItem","phaseItem","Handle_Name","IsGet_Name","Project_Dict","GetQueryData","queryUtil","GetField","Handle_Project","IsGet_Project","setObj2","Handle_Phase","IsGet_Phase","GetMassItem_Handle","massitem","_default","initialItems","MultiSelectVM","InitialItems","GetInitialIndexs","selectedIndexs","SetValue","SelectedItems","GetSelectedItems","SelectedIndexs","open","canOpen","disabled","IsSet_InitialItem","InitialIndexs","initialIndexs","selectedItems","OnSelectedItemChanged","titleRender","DisplayContent","OnSetOpen","GetDisabled_Func","Option","Select","MultiSelectView","onValueChange","onDropdownVisibleChange","Open","elems","displayContent","TitleRender","IdRender","isNaN","mode","optionFilterProp","filterOption","option","children","toLowerCase","CanOpen","Disabled","initialItem","SelectVM","InitialItem","GetInitialIndex","selectedIndex","SelectedItem","GetSelectedItem","SelectedIndex","CanClear","Clear","isDisabled","InitialIndex","initialIndex","selectedItem","padding","FloatItemVM","getClassName","location","loc","FloatItemView","getWrapperContent","floatItemVMUtil","SelectView","floatElem","floatItemStore","DivStyle","showSearch","IsDisabled","inside","lower","ReplaceRowLocationFactory","Location","lt","ToggleLocation","Color","border","NewInputView","handleChange","preventDefault","ctrlKey","which","keyCode","contentEditable","innerRef","TwoCol_SelectVM","inputTitle","outputTitle","availableItems","index1","AvailableItems","IsChanged","Unselect","render","Render","InputTitle","OutputTitle","GetRender","TwoCol_SelectView","each","upper","both","none","celldata","unitlist","unit","_delete","addsub","subcells","removedata","retitle","subgroup","move","changeunit","MassRow","supItem","Get_SubItems_FromApi","subGroupId","subItems","GetCell","subFields","isShowSub","rank","IsPending_HaveSub","IsToolVisible","FieldInputType","mr_f_it","Toggle_FieldInputType","TempField","FieldInputVM","FieldSelectVM","ReTitle","handleUndo","EditTitle","HideHover","Editable_TitleVM","RenderState","trs","GetCellByColumn","ToggleSub","MoveUp","MoveDown","AddSub","ReplaceOK","factory","ReplaceFactory","refRow","ReferenceRow","rrlf_lt","SupItem","Replace","Replace_SubItems","CommandDict","Do","tct","RetrieveData","Temp_SelectSubItems","Replace_SubItems_Main","undoFuncs","undo","IsShowSub","Original_SupRow","supRow","old_IsReplaced","IsReplaced","Section","u_sn","DeleteType","u_dt","oldSupItem","oldIsShowSubFieldSelect","IsShowSubFieldSelect","IsModalVisible","OpenModal","TitleVM","Title","fieldSelectVM","subFieldSelectVM","SubFieldSelectVM","SubFields","SelectSubItemsVM","LocationStorageList","locSelectVM","LocationSelectVM","ModalOK","IsCreatedByUser","GroupFactory","ModalCancel","PMS_WorkPackages","ShowHover","HoverData","Show","Hide","On_HandleTotalData_Cells_Func","HandleTotalData_Cells","AddHandleTotalData_Cell","cell","Is_HandleTotalData_Cells","IsHaveAdditionInformation","Is_SelectSubItems_ModalOpen","Open_SelectSubItems_Modal","SelectSubItems_ModalCancel","SelectSubItems_ModalOK","rawValue","ViewElements","GetValue_Mas","IsDataPending","Rank","currentList","SubItems","MainRows","AllItems","cells","update","concat","isReplaced","AdditionInformation","ToggleButtonContentVM","toggleButtonContent","toggleButtonContentVM","ToggleButtonContent","fieldInputVM","unCheckedChildren","checkedChildren","checked","titleVM","editable_TitleVM","AllRows","locationSelectVM","deleteData","replaceFactory","pms_WorkPackages_SelectVM","selectUtil","titleWidth","visible","onOk","onCancel","gutter","marginTop","flex","FieldInputElement","SelectSubItems_ModalElement","ViewItem","CanEdit_Site","Site","ModalView","hoverData","toolElement","trigger","ReplaceInformation","InfoCircleOutlined","info","ExportInfo","TotalValue","Infos","ExportValue","is_HandleTotalData_Cells","IsShow_RawValue","selectSubItemsVM","tc_selectUtil","marginLeft","RawValue","unit_SetType","UnitData","CurrentUnit","unitData","site","filterData","groupFactory","TextRenderItem","rs","context","ClassName","Style","onDoubleClick","OnDoubleClick","OnClick","Is_Tool_Visible","Is_Edit_Visible","Edit","Is_OK_Visible","EditOK","TextRender_Dict","renderUtil","EditableTextView","EditableTextVM","IsEditing","OnSet_RenderState_Func_Dict","renderState","CanChange_RenderState","Render_Dict","OnSet_Ref_Func_Dict","Focus","setFocus","Ref_Element","focus","titleFunc","render_Dict","ref_Element","current","getEl","canEdit","isToolVisible","enter","esc","Get_Shortcut","altKey","preFunc","postFunc","GetInput","postOkFunc","editTextUtil","set_default","IsEscape","MassRow_ToolElementView","MassRow_ToolElement","Is_Visible","Method","UpCircleOutlined","DownCircleOutlined","DeleteData","DeleteVM","View","editable_TitleVM_RenderState","EntFilter","valueStorageList","category","parameter","bystring","bynumber","byequal","bycontain","bynotcontain","bysmaller","bybigger","bybetween","GetValueStorageList","CategoryType","fct","ParameterNames","GetApiData","valueType","ValueType","numberFilterType","NumberFilterType","stringFilterType","StringFilterType","IsValid","filterValues","fvt","lowerVal","nft","leftVal","rightVal","IsEqualLeft","IsEqualRight","MI_ValueItem","roundingFactor","formatValue","toLocaleString","maximumFractionDigits","MC_Update","Update_SubCells","dirType","Host","SubCells","hUtil","Update_TotalValueData","ValueData","RefreshData","Update_Unit","Update_ValueCurrent","valueData","CurrentItem","OnGet_Data_Func","sections","isHostApplied","finish","segment_incre","s_incre","RunItem","si_incre","seg2_incre","secData","section","sn","ViewDetail","openTabFunc","getUrl","GetItems_FromApi","ColumnField","massIds","LinkOutlined","OnSet_Data_Func","currentItem","Cell","Row","cellId","reportId","Report","Handle_Data","IsGet_Data","totalVal_Data","m_ut","handledCount","setData","count","handle_Val","valData","IsMissing","hostValData","targetObj","ValueDict","GetPhaseItem","FullData","OnGet_FullData_Func_Dict","Is_Inherit_FromSup","Set_FromMassItem","Set_FromApi","QueryData","Get_AllItems","reverse","SubGroup","isValidSubGroup","IsHaveSub","SubField","HaveValue_SubCells","OnSet_HaveValue_SubCells_Func","subfield","hostId","cellIds","subs","sub_sg_Save_length","sub_sg_Save_i","sub_sg_Save_incre","saveSub_SubGroup","sub","SubGroupData","saveItem","main","res","find","subSave_length","subSave_i","subSave_incre","MassItem","OnSet_ExportSet_Func","IsGetElement","OnGetElementDone_Funcs","OnSet_MassType_Obj_Func","GetValue","isMappingLevel","isHandle","IsGet_Value","OnSet_Value_Func_Dict","IsHandle","MassType_Obj","massItem","fields","isFromElement","Element","groupName","getVal_FromFields","dt","getValFunc","finalVal","getVal","AddDatabase","command","OnGet_TLS_LevelGroup_Func_Dict","OnGet_FullValue_Func_Dict","exportSet","massType_Obj","WorkItem_Obj","Level_Obj","workpackageId","massType","Info","levelId","workItemId","get_TLS_LevelGroup","tls_LevelGroup","Get_TLS_LevelGroup","get_FullValue","valueDict","levelItem","originLevelItem","Level_Item","OnSet_Replace_Value_Func_Dict","originValue","replace_Value","mi","miPh_Item","GetOrigin_Value","Handle_Replace_Value","IsGet_Replace_Value","source","originVal","Origin_Value","tls","replaceVal","Replace_Value","Handle_Value","reVal","r","FilterData","massId","ft","handleSave","Handle_FullData","IsGet_FullData","typlevel_count","TLS_LevelGroup","exportset","es_multi","valueItemUtil","PhaseDict","raw","MI_ValueDict","group","gt","isFormat","ValueString","fullData","IsUpdate_MassType","versionIds","phaseIds","isUpdate_MassType","isDetailView","ExportSets","ExportSet_Dict_ForMass","massTypes","MassType_Dict","ListData","GetItemById","workItems","Elements","SiteInfos","siteUtil","Handle_TLS_LevelGroup","IsGet_TLS_LevelGroup","getLevelGroup_Func","pi","GetValidTLS_PageItem","GetValidTLS_LevelGroup","func1","validPi","IsValidTLS_PageItem","pageItem","qVal","validLg","primary_Values","Primary_Values","GetValueDict","GetLevelItem","OriginLevelItem","GetOriginLevelItem","levelItemUtil","bycell","BackgroundColor","fontWeight","GetBackgroundColor","VCS_Item","GetColor","GetVCS_Item","valueItem","ValueItem","compareValueItem","VersionCompareSetting","ratio","Filter","CreateType","mc_ct","column","masses","massItemUtil","MassItem_Handle","GetColorData","colorUtil","GetValueData","valueDataUtil","Get_SubCells","subRows","GetViewDetail","viewDetailUtil","GetSubGroupData","subGroupUtil","vd","saveValue","saveInfo","fullkey","FullValue","MassCell","vcs_Item","valueColor","tdBgColor","OnGet_TLS_LevelGroups_Func_Dict","isHaveWarning","tls_LevelGroup_Descriptions","IsGet_SupItem","subCells","haveValue_SubCells","IsGet_HaveValue_SubCells","sc_incre","sc","viewDetail","colorData","isHaveVCS_Item","MassResultComp","Phases","ColumnIndex","ValueColor","IsHaveVCS_Item","TDBgColor","tls_LevelGroups","IsGet_TLS_LevelGroups","checkadd_Val","TLS_LevelGroups","Get_TLS_LevelGroups","getWarningFunc","IsHaveWarning","IsGet_TLS_LevelGroup_Descriptions","TLS_LevelGroup_Descriptions","getDescFunc","FullDescription","OnGet_TLS_LevelGroups_Funcs","subGroupData","createType","supId","Handle_UnitDict","IsGet_UnitDict","unitDict","mapIndexs","x_unit","u","u_i","UnitDict","SelectUnit","SetUndo","oldUnit","SetUnit_FromHost","getRows","DirectionType","MR_Unit","OnSet_UnitDict_Func","Reset_UnitDict","currentUnitItem","IsUndo","Unit_SelectVM","IsMissing_Pending","OnMouseEnter","OnMouseLeave","SelectUnit_Main","CurrentUnitItem","ItemRender","update_DirectionType","currentUnit","Update_DirectionType","Sections","uc_sn","unit_SelectVM","Is_Unit_Select_Created","rUtil","Unit_RenderView","manual","mouseEvent","hidden","mobx","EntDeleteView","EntDelete","UseType","ut","WrapperStyle","WrapperView","AdditionElement","VisibleType","vt","BlankStyle","is_Visible","ToggleType","tt","is_Hover_Visible","Show_Hover","OnPre_ShowHover","Is_Hover_Visible","Toggle_Hover","PreRun","IsRun_Cancel","OnPreRun","PreCancel","Cancel","OnPreHide","OnSet_Is_Hover_Visible","run","OnRun","cancel","OnCancel","showHover_Button","Retrieve_ShowHover_Button","retrieve_ShowHover_Button","Retrieve_WrapperView","retrieve_WrapperView","Modal_ContentView","onVisibleChange","ShowHover_Button","modal_ButtonView","modal_InfoView","modal_ContentView","Modal_InfoView","Modal_ButtonView","MR_Delete","deleteType","table","removeRows","TBody","RemoveRows","IsContinue","DeleteHost","DeleteHost_Main","deleteVM","d_tt","MR_Update","Update_Units","ud","Update_CellData","Unit_SetType","Update_Delete","Update_AddSub","SiteVM","ModelItem","Run_SetValue","Is_Modal_Visible","Is_Run_Valid","Is_OK_Valid","warn","inputVMs","Is_DayString_Valid","dayS","day","Is_MonthString_Valid","monthS","month","Is_YearString_Valid","yearS","GetDate","dateString","format","refinedString","split","Date","dateUtil","DatePicker","date","dateOnPicker","SetDate","toLocaleDateString","weekday","year","Set_DateOnPicker","HidePopover","Is_Popover_Visible","ShowPopover","DateOnPicker","selected","inline","onSelect","DatePickerView","GetInputVMs","GetInputItem_Wrapper_Render","GetInputItem_Render","SG_Dict_Dict","button","popover","Popover_Render","CurrentField","CurrentMassType","CurrentPopover","GetInputView","InputVMs","GetModalView","footer","Factory","MainRun","TempSubFields","Fields","isSame","addUndo","updateSubFields","Update_SubFields","updateUnit","updateSubCells_Funcs","Setup_GroupComponent","oldShowSub","cell_length","cell_i","cell_incre","usc_incre","updateSubCells","Cell_Group","pf","oldSubItems","oldSubFields","pendingHandle","subGroup_Query","pendingFuncs","p_handle","p_incre","SubGroups_Query","Cell_GroupByCell","nextFields","sc_length","sc_i","groupByItem","Cell_GroupByItem","cellUtil","pending_finish","BuildData","ByItem","HandleItems","rows","newfields","newrows","Handle_FromCellData","cellData","rowValue","GetRow","subgroups","queries","mi_ValueItemUtil","GetRank","GetStyle","GetIsHaveSub","GetToggleButtonContent","GetFieldSelectVM","storageList","MassItemField_Dict","GetSubFieldSelectVM","multiSelectUtil","OnSet_SubFields","temps","isDiff","GetLocationSelectVM","GetFull_SubItems","Full_SupItems","Get_Original_Full_SupRows","Get_IsHaveAdditionInformation","Get_AdditionInformation","Original_Full_SupRows","GetHoverData","d_vt","ToolElement","Get_ToolElement","Get_Cells","GetFullValue","GetIsShow_RawValue","Get_DefaultUnit","isDone","GetUnitData","GetDeleteData","GetUpdate","GetSite","siteVMUtil","GetEditable_TitleVM","inputUtil","BindingCommand","Result","oldTitle","GetFilterData","getFilter","GetRetrieveData","GetFilterDict","FilterDict","GetGroupFactory","groupFactoryUtil","GetReplaceInformation","tempFields","gf","sfsFields","sub_pending","Current_MassTable","CommandItem","Action","Target","ReplaceRow_Value","GetRowValue","KeyValue","keyValue","RowValue","GetTarget","setUndo","Undo","setHandle","rowUtil","PreItems","ItemsForUndo","MaxLength","undoList","GetButtonView","SaveValue","incre_func","Save_MainRows","row_incre","save","Bulid","Finish","byitem","RunType","initialRow","mainhandle","HandleItem","vid","ValueItem_Data","HandledItems","On_Clear_Func","valueItem_Data","On_DeleteItem_Func","DeleteItem","GetValueItem_Data","rowFields","HandleRowFieldIndex","rowFieldIndex","rowField","GetRow_Value_FieldIndex","isHandleVal","lastRow","valueString","massFieldValue","FullName","handleRow","GetByCell","bycellUtil","GetByItem","byitemUtil","UpdateData","Run_Command","GetColumn","reportUtil","report","ByCell","handle_masses","CreatedByUser_Rows","Handled_CreatedByUser_Rows","Rows","mgs","Mgs_Dict_Dict","Current_MGS","cd","CommandData","c_fin","do_command","OnSet_CommandData_Func","Is_Render_Done","GetCommandDict","commandDictUtil","GetSaveValue","saveValueUtil","GetBuildData","buildUtil","ExcelExport","Export","excelBuffer","XLSX","Workbook","bookType","Blob","FileSaver","FileName","Override_Get_Workbook","workbook","Override_Get_FileName","fileName","MT_Cell","Override_Get_Row","Override_Get_Column","Override_Get_Formula","formula","isContinueSubRows","t","Type","f","Formula","Format","MT_Data_Row","Worksheet","FullRows","string","ws","GetSubItems","GetCells","vc_dict","ValueCell_Dict","firstCol","First_ValueColumn","firstRow","First_ValueRow","getRowFunc","FullIndex","titleCell","c_vt","columns","valueCell","IsContinueSubRows","Address","GetFullItems","FullItems","MT_Data_Worksheet","First_TitleColumn","First_TitleRow","mainRows","fullRows","valueCells","titleCells","fc","fr","font","bold","allCells","TitleCells","ValueCells","listCells","AllCells","range","minRow","minCol","maxRow","maxCol","RangeName","ResultData","MT_RawData_Worksheet","InfoFields","dataRows","Data_WS","tableRows","DataRows","records","ExportData","infoFields","Binding_DataRow","valueFields","Records","ifs","ifl","vfs","ValueFields","cell_val","data_cell","MT_Workbook","RawData_WS","data_WS","rawData_WS","Sheets","SheetNames","All_WS","GetData_WS","GetRawData_WS","TextView","MassCellView","ColorData","Td_Style","ValueStyle","MR_UnitView","onMouseEnter","onMouseLeave","MainView","MassRowView","toggleButton","marginRight","minWidth","MissingCss","scope","IsHave_Addition_Wrapper","ReplaceInformation_Element","RawValue_Element","ModalElement","IsDataPending_View","MassTBody","MassTBody_View","MassTableView","MassTable","thElems","Save_MGS_View","DownloadOutlined","ToggleView_Button","ButtonView","AddMainRow","columnField","fullValue","OnSetHandledRatio_Funcs","Add_Handled_CreatedByUser_Row","tbody","is_Render_Done","IsHavePhase","buildData","handledRatio","formatedDate","dayjs","now","wbUtil","excelExport","wb","ovrgFileName","ovrgWb","eeUtil","ExportTitle","ExcelWorkbook","commandDict","Handle_Forge","IsGet_Forge","forgeUtil","MassItem_Dict","massTable","isDataPending","OnSet_Forge_Func","forge","HandledRatio","toFixed","loadingSpinTipVM","textUtil","LoadingSpinTip","LoadingSpinTipVM","Projects","isHavePhase","GetMassData","Project_Dict_ForMassDetail","Is_First_Get_MassTable","massresult","MIF_Dict_ForInput","MIF_Dict_ForMassGroup","MassGroupSetting","GetItemsDone","projectIds","skip","take","massGroupId","massItem_Dict","TrackingItem","Tracking","list1","list2","isValidCheck","GetForInput","Get_Project","OnSet_AdminCommands_Func","MGS_Dict_Dict","current_MGS","MassGroupSetting_Dict","OnAddItem","main_CurrentItem","Used_MassGroupComponent","Used_MassGroupItem","template","mgsd_ut","Table_CommandDict","dictId","isSaveData","handle_func","saveData","save_command","c_handle","commandData","addTemplate","useType","InputName","setCommandItems","Command_Items","CanUser_ForTemplate","AddTemplate","GetAddTemplate","Handle_CommandData","IsGet_CommandData","commandItemUtil","commandDataUtil","massGroupSetting","mgsUtil","saveFunc","setCommand_Items","ReHandle_Items","pId","oldData","GetSave","saveUtil","GetCategory","mgsd_c","GetCategoryName","Category","mgsdUtil","MDS_Dict_Dict","current_MDS","Refresh_Columns","infos","MassDetail_Table","MassDetailSetting_Dict","MassDetailSetting","mdsUtil","mdsdUtil","Dict_Dict","AddData","dataItemUtil","OnAddData","OnSet_Data","Refresh_Items","OnSet_Items","partial","all","i_ut","Material","Materials","AddMaterial","materialUtil","materials","Categories","categories","Types","System","AddType","typeUtil","classification","Classification","types","Systems","AddSystem","systemUtil","systems","Base","listData","categoryBindingData","CategoryBindingData","materialBindingData","MaterialBindingData","systemBindingData","SystemBindingData","byname","MassTypeExport","ExportType","mte_t","retrieveType","defaultValue","byparameter","bysumparameters","bymaterialparameter","ValueInfo","RetrieveTypes","vi_rt","ParameterList","valueRetrieveTypes","Parameter","parameterList","ValueInfos","element","MassInfo","ClassifyValueBy","mi_cvb","AddValueInfo","valueInfoUtil","classifyValueBy","valueInfos","massTypeExport","MassInfos","massTypeExportUtil","GetMassTypeExport","AddMassInfo","massInfoUtil","massInfos","IsByCategory","isByCategory","GetFilter","PageItem","userToken","User_Dict","OnSet_LoginUser_Func","localStorage","getItem","setItem","removeItem","loginUser","Token","OnSet_LoginUser","User","GetApiData_Func","username","Username","GetUrl_Func","Handle_LoginUser","IsGet_LoginUser","userUtil","Config","Admin","OnSet_Users_Func","OnSet_Projects_Func","users","getUser_Func","projects","userManager_Dict","projectCommand_Dict","projectGroupCommand_Dict","Users","OnSet_User_Func","user","Handle_User","IsGet_User","GetGetUser_Func","UserManager_Dict","Handle_Users","IsGet_Users","GetUser_Func","Handle_Projects","IsGet_Projects","projectUtil","GetUserManager_Dict","umDictUtil","GetProjectCommand_Dict","pcDictUtil","GetProjectGroupCommand_Dict","pgcDictUtil","GetMassItemFields","GetMIF_Dict_ForMassGroup","GetMIF_Dict_ForDetail","GetMUT_Dict","mut","GetMgs_Dict_Dict","GetMds_Dict_Dict","Handle_SG_Dict_Dict","IsGet_SG_Dict_Dict","sgddUtil","GetUserDict","userDictUtil","Reset_AdminCommands","GetAdmin","adminUtil","fromType","Command_FromType","Handle_AdminCommands","IsGet_AdminCommands","web","massGroupSetting_Dict","OnSet_SG_Dict_Dict_Funcs","DebugPoints","IsDebug","OnSet_CurrentProject_Func_Dict","ApiUrl","UpdatedDate","LoggingItems","adminCommands","DesignOption","dot","project_Dict","projectDictUtil","project_Dict_ForMassDetail","currentProject","mgs_Dict_Dict","mds_Dict_Dict","sg_Dict_Dict","phase_Dict_ForMassDetail","massResultComp","massItemFields","mifs_ForMassGroup","mif_Dict_ForMassGroup","mif_Dict_ForDetail","mif_Dict_ForInput","mifd","mut_Dict","versionCompareSetting","tracking","userDict","admin","massType_Dict","category_Dict","Category_Dict","parameter_Dict","Parameter_Dict","massExport_Dict","MassExport_Dict","workItem_Dict","WorkItem_Dict","exportSet_Dict_ForMass","instance","mass","mappinglevel","typicallevel","inputdata","mt_list","mt_material_binding","mt_category_binding","mt_system_binding","massexport","PhaseVM","is_FirstCreated","nameVM","NameVM","descriptionVM","DescriptionVM","GetDeleteVM","GetRowView","NameView","DescriptionView","CheckCircleOutlined","TableView","Phase_DictVM","RowView","itemVM","OnGetItemsDone","selectVM","GetSelectVM","ProjectComp","ProjectVM","CheckboxView","onCheckedChange","OnCheckChanging","Ischecked","checkboxVMUtil","ischecked","isDisable","CheckboxVM","onCheckChange","codeVM","CodeVM","fortestVM","checkboxUtil","phase_DictVM","SettingVM","GetDataVM","OnGetDataVM","M2VM","dataVM","OnInitialSetDataVM","LevelSettingVM","LS_ItemVM","Is_ShowValue_Delete","ShowValue_Delete","HideValue_Delete","value_StorageList","ValueVM","valueVM","Value_StorageList","mulSelectUtil","getItemStyle","isDragging","draggableStyle","userSelect","background","Handle_Value_StorageList","IsGet_Value_StorageList","draggableId","provided","snapshot","draggableProps","dragUtil","dragHandleProps","DragOutlined","Value_Element","LevelSettingDataVM","onDragEnd","OnDragEnd","droppableId","droppableProps","destination","RenderItem","TableCell","dataIndex","DataIndex","Override_Get_CellRender","Override_Get_CellValue","TitleRenderItem","CanHandleColumn","IsShow_MoveCommand","CanEditColumn","CanDeleteColumn","danger","InputElement","OK","TitleRender_Dict","renders","TableColumn","GetByTitle","OnSetTitleOK_Funcs","GetActionColumn","editElem","CanHandleItem","CanEditItem","delElem","CanDeleteItem","IsAction","AddColumn","CanAddItem","TitleRenderState","Show_MoveCommand","Collapse_MoveCommand","MoveLeft","IsActive","MoveRight","titleRender_Dict","Column_InputType","AllColumnNames","AllNames","firstItem","Column_Title_SelectWidth","CanShow_MoveCommand","TableRow","EditItem","TableVM","CanAddColumn","IsShowActionColumn","dataSource","isEdit","OnGetItemForAdd","IsTypeNotDefined","DataSource","OnDeleteItem","OnEditItem","colUtil","actionCol_Index","cit","TLS_Data_WrapperVM","LevelGroupVM","isSelectOpen","LevelSelectVM","levelSelectVM","triggerVM","IsSelectOpen","buttonTypeVM","addContentVM","TLS_FilterValueVM","ToggleInputType","SwitchChecked_Funcs","SelectOpen","selectOpen","PopoverState","popoverState","GetPopoverState","TLS_FilterVM","TLS_PageItemVM","ToggleState","NameOK","NameCancel","isLast","IsLast","AllTabs","IsModelChangePageKey","CurrentPageKey","InputToolElement","TypicalLevelSettingDataVM","IsHaveAddCommandTab","allTabs","currentPageKey","ChangePageKey","addCommandTab","TitleElement","AddCommandTab","GetCurrentPageKey","GetBinding","bindingUtil","GetTypical","tableElem","theadElem","LeftCircleOutlined","RightCircleOutlined","tbodyElem","LevelSettingDataView","SaveFilled","TLS_FilterValueView","TLS_FilterView","DeleteFilled","LevelGroupView","TLS_PageItemView","Tabs","TabPane","TypicalLevelSettingDataView","activeKey","tab","TypicalLevelSettingVM","DataVM","dataVMUtil","detail","ColumnGroup","Refresh_ColumnCount","colSpan","ColumnsCount","Hide_Tool","Show_Tool","MassItem_Render","textVM","Group","cgt","titleSelect","TitleSelect","Tr_Style","TitleView","GetTitleSelect","t_ut","MUT_Dict","GetColumns","GetDefaultField","DefaultField","ColumnGroups","SetItems","Refresh_Info","ColumnCount","columnCount","columnGroups","GetColumnGroup","lastIndex","PasteVM","pasteContent","pasteVM","PasteContent","MassDetailVM","MainMassType","mt","DetailTable","detailTable","tableUtil","ExportSetVM","GetDefaultInfos","GetInfos","GetDefaultValues","GetValues","GetColumnGroups","qInfo","colGroupUtil","qValue","GetColumnCount","GetItems_FromPaste","rawData","isHandleItem_Done","isHandleInfo_Done","infoCount","totalCount","item_i","info_i","infoDict","q_infos","infoValues","valueValues","dbindexFields","info_item_i","info_length","handle_itemInfo_item","infoField","infoVal","setInfo","valueVal","parseFloat","Mds_Dict_Dict","OpenSave","Handle_MassItems_Table","IsGet_MassItems_Table","MassItems_Table","OnSet_MassType_Func","MassType_RenderState","MassType_Edit","MassType_EditOK","MassType_Select","TempMassType","isActive","Set_Active","currentField","erf","UnSet_Active","massItems_Table","CheckCommand","IsGet_MassType","MassType_Render","massType_Render","massType_Select","Mass_MultiplyVM","mass_MultiplyVM","activeTool","CloseCircleOutlined","ActiveStyle","NameWrapper_View","MassType_View","DescriptionWrapper_View","InfoView","ActiveTool","TableItemView","ExportSet_DictVM","AddVM","modelView","inputView","addVM","Table_WrapperView","PickView","ModelItems","InputItems","GetAddVM","PlusCircleOutlined","GetPickView","TempCurrentItem","hideVisible","GetModelView","viewUtil","GetPhase_DictVM","phaseDictVMUtil","levelSettingUtil","GetTypicalLevelSetting_Func","GetTypicalLevelSetting_ForEdit","CodeView","FortestVM","Project_DictVM","itemVMUtil","MassItem_DictView","MassResultCompView","MassResultCompVM","IsShowProjectSelect","ProjectSelectVM","CanHavePhase","IsShowPhaseSelectVM","PhaseSelectVM","Pick_MGS_View","phases","canEdit_Site","projectVMs","projectVMStorageList","projectSelectOpen","ProjectPopoverState","projectPopoverState","projectSelectVM","ProjectVMStorageList","multiSelectVMUtil","ProjectVMs","placement","rel","href","ProjectSelectOpen","phaseVMs","phaseSelectVM","isShowPhaseSelectVM","isfetchProjects","GetProjectVMStorageList","GetProjectVMs","Get_PhaseSelectVM","PhaseVMs","setList","GetProjectPopoverStateValue","Handle_MassGroupSetting_Dict","IsGet_MassGroupSetting_Dict","OnSet_MassGroupSetting_Dict_Func","GetCanEdit_Site","DO_Comp","DO_Element","elementinfo","elementinfo_identify","elementinfo_locate","et","DO_ElementVM","isOpenSub","IsOpenSub","ToggleSubContentVM","toggleSubContentVM","GetToggleSubContent","DO_CompVM","modelUtil","DO_ElementView","IsHaveButton","DO_CompView","Category_ItemVM","ItemCategories","TableCategory","SelectUtil","MEP_ItemVM","itemMEPs","TableMEP","systemClassificationVM","systemClassification","SystemClassificationVM","MT_ItemVM","MassTypeSettingDataVM","itemCategories","AddItemCategory","itemUtilCategory","AddItemMEP","itemUtilMEP","ItemMEPs","Update_MasstypeData","makeAutoObservable","tableCategory","nameCol","valCol","Name_Element","utilCategory","tableMEP","ClassCol","SystemClassification_Element","utilMEP","GetTable","MassTypeSettingVM","MassTypeStorageList","MassTypeSetting","MT_Item","Category_Item","MassTypeSettingData","masstypeStorageList","OnSet_MassTypeStorageList_Func_Dict","GetMassTypeStorageList","MassTypeSettingDataView","MassTypeSettingView","Tab","SetCurrent","IsHaveBorder","idRender","titleView_Render","active","contentRender","contentWrapper_Render","ContentRender","TitleView_Render","ContentWrapper_Render","BorderStyle","ContentView","ContentWrapper_View","AddTemplateVM","Tool","inputNameVM","tool","GetTool","InputNameVM","SetDict","v1","MassGroupSettingVM","DeleteView","addTemplateUtil","query","dd_UseType","DD_UseType","mgsdd_ut","D_UseType","SaveTable","CanEdit","saveTable","MassGroupSetting_DictVM","CategoryName","SaveVM","MGS_Dict_DictVM","Toggle_UseType","queryTab","saveTab","mainItem","add_MGS","GetMainItem","GetQueryTab","TableWrapper_View","GetSaveTab","MainItem","GetAdd_MGS","GetPick_MGS_View","Name_ForPick","GetSave_MGS_View","GetView","QueryTab","Add_MGS","SaveTab","SetUseType","MassDetailSettingVM","mdsdd_ut","MassDetailSetting_DictVM","MDS_Dict_DictVM","add_MDS","Current_MDS","GetAdd_MDS","GetPick_MDS_View","GetSave_MDS_View","Add_MDS","ItemVM","GetNameForView","nameForView","IsCancel","d_ut","NameForView","DictVM","addData","GetAddData","Dict_DictVM","currentMassType","Refine","popover_Render","hover","click","EntPopoverView","EntPopover","ClickRef","Trigger","ShowContent","HideContent","ToggleContent","Is_Content_Visible","is_Content_Visible","OnClickOutside","Init_ClickOutside","isInside","p","contains","from","PreSet_Is_Content_Visible","OnSet_Is_Content_Visible","GetDefault_TitleRender","GetDefault_ContentRender","GetDefaultPopover_Render","popoverUtil","removes","BaseVM","GetCategory_SelectVM","massType_SelectVM","MassType_SelectVM","category_SelectVM","MassTypeWrapper_View","Category_SelectVM","MaterialVM","rowSpan","RowSpan","NotFirst_Materials","TypeVM","SystemVM","ClassificationVM","classificationVM","ClassificationView","ClassificationWrapper_View","NotFirst_Types","GetTypes","span","NotFirst_Systems","GetListData","listDataUtil","GetCategoryBindingData","categoryBindingDataUtil","GetMaterialBindingData","materialBindingDataUtil","GetSystemBindingData","systemBindingDataUtil","MassTypeExportView","ValueInfoVM","RetrieveTypes_SelectVM","Parameter_SelectVM","ParameterList_SelectVM","retrieveTypes","retrieveTypes_SelectVM","parameter_SelectVM","parameterList_SelectVM","GetRetrieveTypes_SelectVM","GetParameter_SelectVM","GetParameterList_SelectVM","MassInfoVM","classifyValueBy_SelectVM","ClassifyValueBy_SelectVM","Wrapper_View","MassTypeExportVM","ExportType_SelectVM","MassType_Title","exportType","exportType_SelectVM","GetExportType_SelectVM","GetMassType_SelectVM","GetValueInfos","GetClassifyValueBy_SelectVM","NotFirst_MassInfos","FilterVM","GetMassInfos","PageItemVM","login","User_DictVM","Logout","viewType","ViewType","IsSet_Model","newPassword","loginRender","userRender","mainViewRender","MainViewRender","modalViewRender","ModalViewRender","viewRender","ViewRender","UserVM","IsSaveDatabase","UsernameVM","OnSet_RenderState","usernameVM","Login","pw","PasswordVM","passwordVM","GetUsernameVM","GetPasswordVM","GetMainView","dictVM","uUtil","uVMUtil","NewPassword","opw","OldPassword","npw","rnpw","ReNewPassword","OldPasswordVM","NewPasswordVM","ReNewPasswordVM","oldPasswordVM","newPasswordVM","reNewPasswordVM","oldpassword","newpassword","GetOldPasswordVM","GetNewPasswordVM","GetReNewPasswordVM","GetLogin","loginUtil","GetNewPassword","newpasswordUtil","Handle_ViewType","IsGet_ViewType","GetViewType","GetDefault_LoginRender","GetDefault_UserRender","GetDefault_MainViewRender","LoginRender","UserRender","GetDefault_ModalViewRender","GetDefault_ViewRender","AdminVM","iVM","GetItem_Func","getItem_Func","itemRender","GetDefault_ItemRender","UsernameView","PasswordView","ToolView_Render","GetGetItem_Func","ok","Project_Render","User_Render","user_Render","user_Select","User_Select","command_Select","Command_Select","GroupVM","itemDict","ivm","iVMUtil","project_Render","project_Select","Project_Select","Groups","Project_View","User_View","Command_View","GetUser_Render","GetUser_Select","setSelect","host2","GetCommand_Select","pc","groups","AddGroup","gUtil","removeItems","Handle_Groups","IsGet_Groups","mainFunc","xs","createGroupFunc","handleItemFunc","validFunc","ProjectCommand_Dict","ProjectGroupCommand_Dict","LeftNav","DictView","Current_WrapperCss","WrapperCss","Refine_WrapperCss","ItemCss","ItemView","Is_Sub_Visible","Sub_WrapperCss","Func","Active","Refine_ItemCss","MainCss","ActiveCss","CaretDownOutlined","CaretUpOutlined","pvt","LeftNavVM","GetPreTitle","menuDict","ItemDict","sup","menuItemUtil","ProjectViewType","preTitle","MenuDict","wc","ic","PreTitle","LeftNavView","navUtil","MassDetailView","match","params","Main_Classname","Pick_MDS_View","withRouter","ProjectCompVM","projectVM","projectVMUtil","massResComp","massResultCompVM","MappingView","TypicalView","GetMassResultCompVM","massResutlCompVMUtil","ProjectCompView","ViewElement","AdminView","HomeView","GetProject_DictVM","project_DictVMUtil","mgsddUtil","mdsddUtil","GetMassType_Dict","massTypeDictUtil","GetCategory_Dict","categoryDictUtil","GetParameter_Dict","parameterDictUtil","GetMassExport_Dict","massExportDictUtil","OnSet_ProjectViewType_Func_Dict","projectViewType","main_Classname","project_DictVM","projectComp","massResultCompVMUtil","basename","exact","path","component","ProjectCompView__Router","Is_AddOutsideEvent","PMDataView","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM"],"mappings":"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","file":"static/js/main.9d12c173.chunk.js","sourcesContent":["export const text = 'text'\r\nexport const password = 'password'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as ts from './TextState'\r\n\r\nexport class TextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder : observable,\r\n      State : observable\r\n    })\r\n  }\r\n\r\n  GetContentFunc\r\n\r\n  content = undefined\r\n  get Content(){\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n\r\n    if (this.OnSetContent) {\r\n      this.OnSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  inputStyle\r\n\r\n  style\r\n  get Style() {\r\n    if (!this.style) {\r\n      this.style = this.inputStyle ? this.inputStyle : {};\r\n\r\n      if (this.wrapper) {\r\n        this.style.position = 'relative';\r\n      }\r\n    }\r\n    return this.style;\r\n  }\r\n\r\n  State = ts.text\r\n}","import { TextVM } from \"./TextVM\"\r\n\r\nexport const get = (q, placeholder) => {\r\n  var qI = new TextVM();\r\n  qI.content = q;\r\n  qI.placeholder = placeholder;\r\n  return qI;\r\n}","export const url = \"https://api.bimdev.vn/api/hb_f\"","import axios from 'axios';\r\nimport { message } from 'antd';\r\n\r\nexport const API_URL = 'https://api.bimdev.vn/api';\r\n\r\n// const http = axios.create({\r\n//   baseURL: API_URL,\r\n//   Accept: 'application/json',\r\n//   'Content-Type': 'application/json',\r\n//   //timeout: 20000\r\n//   timeout: 20000000\r\n// });\r\n\r\nconst http = (timeout) => axios.create({\r\n    baseURL: API_URL,\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    timeout\r\n  });\r\n\r\nconst handleNetworkError = (err) => {\r\n  message.error(`Error sending request: ${err}`);\r\n  return {\r\n    success: false\r\n  };\r\n}\r\n\r\nconst handleResponse = (response) => {\r\n  // Parse the axios response\r\n  const success = response.status >= 200 && response.status < 300;\r\n  const data = response.data;\r\n  let message = response.statusText;\r\n  return {\r\n    success,\r\n    data,\r\n    message\r\n  };\r\n}\r\n\r\nexport const callApi = async (action) => {\r\n  try {\r\n    const response = await action;\r\n    return handleResponse(response);\r\n  } catch (err) {\r\n    return handleNetworkError(err);\r\n  } finally { }\r\n}\r\n\r\nexport const timeout_default = 20000\r\n\r\nexport const get = async (url, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  return callApi(http(timeout).get(url, config));\r\n}\r\n\r\nexport const put = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).put(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const post = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).post(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const del = async (url, payload,timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).delete(url, payload));\r\n  return result;\r\n}","import React, { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport * as ts from '../text/TextState'\r\n\r\nclass InputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n\r\n    var data = this.state;\r\n    data.Ref = React.createRef();\r\n  }\r\n\r\n  onChange = (e) => {\r\n    var { value } = e.target;\r\n    this.state.Content = value;\r\n  }\r\n\r\n  OnKeyDown = (e) => {\r\n    var data = this.state;\r\n    if (data.OnKeyDown) {\r\n      data.OnKeyDown(e)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { content, placeholder } = data;\r\n    var style = this.props.style\r\n    var className = this.props.className\r\n    var onFocus = this.props.onFocus ?\r\n      this.props.onFocus : data.OnFocus\r\n    var onBlur = this.props.onBlur ?\r\n      this.props.onBlur : data.OnBlur\r\n    var onPaste = this.props.onPaste ?\r\n      this.props.onPaste : data.OnPaste\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <Input ref={data.Ref} style={style} className={className}\r\n            value={content} onChange={this.onChange}\r\n            onKeyDown={this.OnKeyDown}\r\n            onFocus={onFocus} onBlur={onBlur}\r\n            onPaste={onPaste}\r\n            placeholder={placeholder} /> : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password ref={data.Ref} style={style} className={className}\r\n            value={content} onChange={this.onChange}\r\n            onFocus={onFocus} onBlur={onBlur}\r\n            onPaste={onPaste}\r\n            onKeyDown={this.OnKeyDown} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(InputView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nclass UndoView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      //this.state = new UserFormVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var width = this.props.width ? this.props.width : 512\r\n    var height = this.props.height ? this.props.height : 512\r\n    var className = this.props.className\r\n\r\n    return (\r\n      <>\r\n        <svg className={className} width={width} height={height}\r\n          viewBox=\"0 0 489.658 489.658\" >\r\n          <path d=\"M194.829,244.829c0,27.57,22.43,50,50,50s50-22.43,50-50s-22.43-50-50-50S194.829,217.259,194.829,244.829z\"/>\r\n\t<path d=\"M485.313,237.318c-23.974-41.44-58.446-76.197-99.691-100.511c-42.473-25.038-91.117-38.28-140.681-38.3\r\n\t\tc-0.037,0-0.074-0.001-0.112-0.001s-0.074,0.001-0.112,0.001c-49.564,0.02-98.208,13.262-140.681,38.3\r\n\t\tc-41.245,24.314-75.718,59.07-99.691,100.511L0,244.829l4.345,7.511c23.974,41.44,58.446,76.197,99.691,100.511\r\n\t\tc42.473,25.038,91.117,38.28,140.681,38.3c0.037,0,0.074,0.001,0.112,0.001s0.074-0.001,0.112-0.001\r\n\t\tc49.564-0.02,98.208-13.262,140.681-38.3c41.245-24.314,75.718-59.07,99.691-100.511l4.345-7.511L485.313,237.318z\r\n\t\t M361.152,244.829c0,64.105-52.125,116.264-116.217,116.322c-0.036,0-0.071,0.001-0.107,0.001s-0.071-0.001-0.107-0.001\r\n\t\tc-64.092-0.058-116.217-52.217-116.217-116.322s52.125-116.264,116.217-116.322c0.036,0,0.071-0.001,0.107-0.001\r\n\t\ts0.071,0.001,0.107,0.001C309.027,128.565,361.152,180.724,361.152,244.829z M34.839,244.829\r\n\t\tc22.94-36.587,54.809-66.03,91.791-86.144c-17.673,24.184-28.124,53.964-28.124,86.144s10.45,61.96,28.124,86.144\r\n\t\tC89.648,310.859,57.779,281.416,34.839,244.829z M363.029,330.973c17.673-24.184,28.124-53.964,28.124-86.144\r\n\t\ts-10.45-61.96-28.124-86.144c36.981,20.114,68.85,49.557,91.791,86.144C431.879,281.416,400.01,310.859,363.029,330.973z\"/>\r\n        </svg>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(UndoView);\r\n","/////////////////////////////////////////////////////////////////////////////////\r\n// Copyright (c) Autodesk, Inc. All rights reserved\r\n// Written by Jaime Rosales 2016 - Forge Developer Partner Services\r\n//\r\n// Permission to use, copy, modify, and distribute this software in\r\n// object code form for any purpose and without fee is hereby granted,\r\n// provided that the above copyright notice appears in all copies and\r\n// that both that copyright notice and the limited warranty and\r\n// restricted rights notice below appear in all supporting\r\n// documentation.\r\n//\r\n// AUTODESK PROVIDES THIS PROGRAM \"AS IS\" AND WITH ALL FAULTS.\r\n// AUTODESK SPECIFICALLY DISCLAIMS ANY IMPLIED WARRANTY OF\r\n// MERCHANTABILITY OR FITNESS FOR A PARTICULAR USE.  AUTODESK, INC.\r\n// DOES NOT WARRANT THAT THE OPERATION OF THE PROGRAM WILL BE\r\n// UNINTERRUPTED OR ERROR FREE.\r\n/////////////////////////////////////////////////////////////////////////////////\r\n\r\nimport axios from 'axios';\r\n\r\nfunction getaccesstoken() {\r\n\r\n\tvar qs = require('qs');\r\n\tvar data = qs.stringify({\r\n\t\t'client_id': process.env.REACT_APP_CLIENT_ID || 'jyHlwagmmY0Zx8XGvmt0EU2S9nUAwGKb',\r\n\t\t'client_secret': process.env.REACT_APP_CLIENT_SECRET || 'i0TzpGwtAOLATGU5',\r\n\r\n\t\t'grant_type': 'client_credentials',\r\n\t\t'scope': 'code:all data:write data:read bucket:create bucket:delete bucket:read'\r\n\t});\r\n\tvar config = {\r\n\t\tmethod: 'post',\r\n\t\turl: 'https://developer.api.autodesk.com/authentication/v1/authenticate',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/x-www-form-urlencoded',\r\n\t\t\t'Cookie': 'PF=Smw68bwi3kpiuv1Q4fnRcs'\r\n\t\t},\r\n\t\tdata: data\r\n\t};\r\n\r\n\treturn axios(config)\r\n\t\t.then(function (response) {\r\n\t\t\t//   console.log(JSON.stringify(response.data));\r\n\t\t\treturn response.data\r\n\t\t})\r\n\t\t.catch(function (error) {\r\n\t\t\tconsole.log(error);\r\n\t\t});\r\n\r\n}\r\nconst Client = { getaccesstoken };\r\nexport default Client;","const Autodesk = window.Autodesk;\r\n\r\nclass NestedViewerExtension extends Autodesk.Viewing.Extension {\r\n    constructor(viewer, options) {\r\n        super(viewer, options);\r\n        options = options || {};\r\n        this._filter = options.filter || ['2d', '3d'];\r\n        this._crossSelection = !!options.crossSelection;\r\n        this._group = null;\r\n        this._button = null;\r\n        this._panel = null;\r\n        this._onModelLoaded = this.onModelLoaded.bind(this);\r\n        this._onSelectionChanged = this.onSelectionChanged.bind(this);\r\n    }\r\n\r\n    load() {\r\n        this.viewer.addEventListener(Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT, this._onModelLoaded);\r\n        if (this._crossSelection) {\r\n            this.viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\r\n        }\r\n        //console.log('NestedViewerExtension has been loaded.');\r\n        return true;\r\n    }\r\n\r\n    unload() {\r\n        this.viewer.removeEventListener(Autodesk.Viewing.MODEL_ROOT_LOADED_EVENT, this._onModelLoaded);\r\n        if (this._crossSelection) {\r\n            this.viewer.removeEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this._onSelectionChanged);\r\n        }\r\n        if (this._panel) {\r\n            this._panel.uninitialize();\r\n        }\r\n        // Clean our UI elements if we added any\r\n        if (this._group) {\r\n            this._group.removeControl(this._button);\r\n            if (this._group.getNumberOfControls() === 0) {\r\n                this.viewer.toolbar.removeControl(this._group);\r\n            }\r\n        }\r\n        //console.log('NestedViewerExtension has been unloaded.');\r\n        return true;\r\n    }\r\n\r\n    onModelLoaded() {\r\n        if (this._panel) {\r\n            this._panel.urn = this.viewer.model.getData().urn;\r\n        }\r\n    }\r\n\r\n    onSelectionChanged() {\r\n        if (this._panel) {\r\n            // Avoid endless loop between main viewer and \r\n            // the nested viewer calling each other's select() method\r\n            let vs = this.viewer.getSelection();\r\n            let ps = this._panel._viewer.getSelection();\r\n            if (!this.isSelectionSame(vs, ps)) {\r\n                this._panel.select(vs);\r\n            }\r\n        }\r\n    }\r\n\r\n    isSelectionSame(sel1, sel2) {\r\n        if (sel1.length !== sel2.length)\r\n            return false;\r\n\r\n        for (let i = 0; i < sel1.length; i++) {\r\n            if (sel1[i] !== sel2[i])\r\n                return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    onToolbarCreated() {\r\n        this._group = this.viewer.toolbar.getControl('nestedViewerExtensionToolbar');\r\n        if (!this._group) {\r\n            this._group = new Autodesk.Viewing.UI.ControlGroup('nestedViewerExtensionToolbar');\r\n            this.viewer.toolbar.addControl(this._group);\r\n        }\r\n        this._button = new Autodesk.Viewing.UI.Button('nestedViewerExtensionButton');\r\n        this._button.onClick = (ev) => {\r\n            if (!this._panel) {\r\n                this._panel = new NestedViewerPanel(this.viewer, this._filter, this._crossSelection);\r\n                this._panel.urn = this.viewer.model.getData().urn;\r\n            }\r\n            if (this._panel.isVisible()) {\r\n                this._panel.setVisible(false);\r\n                this._button.removeClass('active');\r\n            } else {\r\n                this._panel.setVisible(true);\r\n                this._button.addClass('active');\r\n            }\r\n        };\r\n        this._button.setToolTip('Nested Viewer');\r\n        this._button.addClass('nestedViewerExtensionIcon');\r\n        this._group.addControl(this._button);\r\n    }\r\n}\r\n\r\nclass NestedViewerPanel extends Autodesk.Viewing.UI.DockingPanel {\r\n    constructor(viewer, filter, crossSelection) {\r\n        super(viewer.container, 'nested-viewer-panel', 'Nested Viewer');\r\n        this._urn = '';\r\n        this._parentViewer = viewer;\r\n        this._filter = filter;\r\n        this._crossSelection = crossSelection;\r\n    }\r\n\r\n    get urn() {\r\n        return this._urn;\r\n    }\r\n\r\n    set urn(value) {\r\n        if (this._urn !== value) {\r\n            this._urn = value;\r\n            this._updateDropdown();\r\n        }\r\n    }\r\n\r\n    initialize() {\r\n        this.container.style.top = '5em';\r\n        this.container.style.right = '5em';\r\n        this.container.style.width = '500px';\r\n        this.container.style.height = '400px';\r\n\r\n        this.title = this.createTitleBar(this.titleLabel || this.container.id);\r\n        this.container.appendChild(this.title);\r\n\r\n        this._container = document.createElement('div');\r\n        this._container.style.position = 'absolute';\r\n        this._container.style.left = '0';\r\n        this._container.style.top = '50px';\r\n        this._container.style.width = '100%';\r\n        this._container.style.height = '330px'; // 400px - 50px (title bar) - 20px (footer)\r\n        this.container.appendChild(this._container);\r\n\r\n        this._overlay = document.createElement('div');\r\n        this._overlay.style.width = '100%';\r\n        this._overlay.style.height = '100%';\r\n        this._overlay.style.display = 'none';\r\n        this._overlay.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';\r\n        this._overlay.style.color = 'white';\r\n        this._overlay.style.zIndex = '101';\r\n        this._overlay.style.justifyContent = 'center';\r\n        this._overlay.style.alignItems = 'center';\r\n        this._container.appendChild(this._overlay);\r\n\r\n        this._dropdown = document.createElement('select');\r\n        this._dropdown.style.position = 'absolute';\r\n        this._dropdown.style.left = '1em';\r\n        this._dropdown.style.top = '1em';\r\n        this._dropdown.style.setProperty('z-index', '100');\r\n        this._dropdown.setAttribute('id', 'nestedViewerExtensionDropdown');\r\n        this._dropdown.addEventListener('change', this._onDropdownChanged.bind(this))\r\n        this._dropdown.addEventListener('mousedown', function (ev) { ev.stopPropagation(); }); // prevent DockingPanel from kidnapping clicks on the dropdown\r\n        this._container.appendChild(this._dropdown);\r\n\r\n        this.initializeMoveHandlers(this.container);\r\n        this._footer = this.createFooter();\r\n        this.footerInstance.resizeCallback = (width, height) => {\r\n            this._container.style.height = `${height - 50 /* title bar */ - 20 /* footer */}px`;\r\n            if (this._viewer) {\r\n                this._viewer.resize();\r\n            }\r\n        };\r\n        this.container.appendChild(this._footer);\r\n    }\r\n\r\n    setVisible(show) {\r\n        super.setVisible(show);\r\n        if (show && !this._viewer) {\r\n            this._viewer = new Autodesk.Viewing.GuiViewer3D(this._container);\r\n            this._viewer.start();\r\n            this._onDropdownChanged();\r\n            if (this._crossSelection) {\r\n                this._viewer.addEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, () => {\r\n                    this._parentViewer.select(this._viewer.getSelection());\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    select(dbids) {\r\n        if (this._viewer) {\r\n            this._viewer.select(dbids);\r\n        }\r\n    }\r\n\r\n    _updateDropdown() {\r\n        const onDocumentLoadSuccess = (doc) => {\r\n            this._manifest = doc;\r\n            const filterGeom = (geom) => this._filter.indexOf(geom.data.role) !== -1;\r\n            const geometries = doc.getRoot().search({ type: 'geometry' }).filter(filterGeom);\r\n            if (geometries.length > 0) {\r\n                this._overlay.style.display = 'none';\r\n                this._dropdown.innerHTML = geometries.map(function (geom) {\r\n                    return `<option value=\"${geom.guid()}\">${geom.name()}</option>`;\r\n                }).join('\\n');\r\n            } else {\r\n                this._overlay.style.display = 'flex';\r\n                this._overlay.innerText = 'No viewables found';\r\n                this._dropdown.innerHTML = '';\r\n            }\r\n            this._onDropdownChanged();\r\n        };\r\n        const onDocumentLoadFailure = () => {\r\n            console.error('Could not load document.');\r\n        };\r\n        this._dropdown.innerHTML = '';\r\n        Autodesk.Viewing.Document.load('urn:' + this._urn, onDocumentLoadSuccess, onDocumentLoadFailure);\r\n    }\r\n\r\n    _onDropdownChanged() {\r\n        const guid = this._dropdown.value;\r\n        if (guid) {\r\n            this._viewer.loadDocumentNode(this._manifest, this._manifest.getRoot().findByGuid(guid));\r\n        }\r\n    }\r\n\r\n    static get ExtensionId() {\r\n\r\n        return 'Viewing.Extension.NestedViewer'\r\n      }\r\n}\r\n\r\nAutodesk.Viewing.theExtensionManager.registerExtension(NestedViewerExtension.ExtensionId, NestedViewerExtension);\r\n\r\nexport default 'Viewing.Extension.NestedViewer'","const Autodesk = window.Autodesk;\r\n\r\nclass SetGhostingExtension extends Autodesk.Viewing.Extension {\r\n  constructor(viewer, options) {\r\n    super(viewer, options);\r\n    this._group = null;\r\n    this._button = null;\r\n  }\r\n\r\n  load() {\r\n    return true;\r\n  }\r\n\r\n  unload() {\r\n    // Clean our UI elements if we added any\r\n    if (this._group) {\r\n      this._group.removeControl(this._button);\r\n      if (this._group.getNumberOfControls() === 0) {\r\n        this.viewer.toolbar.removeControl(this._group);\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  onToolbarCreated() {\r\n    this._group = this.viewer.toolbar.getControl(\r\n      \"nestedViewerExtensionToolbar\"\r\n    );\r\n    if (!this._group) {\r\n      this._group = new Autodesk.Viewing.UI.ControlGroup(\r\n        \"nestedViewerExtensionToolbar\"\r\n      );\r\n      this.viewer.toolbar.addControl(this._group);\r\n    }\r\n\r\n    // Add a new button to the toolbar group\r\n    this._button = new Autodesk.Viewing.UI.Button(\"setGhostingExtensionButton\");\r\n    this._button.onClick = (ev) => {\r\n      if (!this._panel) {\r\n        this._panel = false;\r\n      }\r\n\r\n      if (this._panel) {\r\n        this._panel = false;\r\n        this.viewer.setGhosting(false);\r\n      } else {\r\n        this._panel = true;\r\n        this.viewer.setGhosting(true);\r\n      }\r\n    };\r\n\r\n    this._button.setToolTip(\"Set Ghosting\");\r\n    this._button.addClass(\"setGhostingExtensionIcon\");\r\n    this._group.addControl(this._button);\r\n  }\r\n\r\n  static get ExtensionId() {\r\n    return \"SetGhostingExtension\";\r\n  }\r\n}\r\n\r\nAutodesk.Viewing.theExtensionManager.registerExtension(\r\n  SetGhostingExtension.ExtensionId,\r\n  SetGhostingExtension\r\n);\r\n\r\nexport default \"SetGhostingExtension\";\r\n","import Client from '../Client';\r\nimport NestedViewerExtension from \"./extensions/NestedViewerExtension\";\r\nimport SetGhostingExtension from './extensions/SetGhostingExtension';\r\n\r\nconst Autodesk = window.Autodesk;\r\nvar viewer;\r\nvar getToken = { accessToken: Client.getaccesstoken() };\r\n\r\nexport const launchViewer = (q, div, urns, handle) => {\r\n  getToken.accessToken.then((token) => {\r\n    var options = {\r\n      accessToken: token.access_token,\r\n    };\r\n    Autodesk.Viewing.Initializer(options, () => {\r\n      viewer = new Autodesk.Viewing.GuiViewer3D(document.getElementById(div), {\r\n        extensions: [\r\n          \"Autodesk.AEC.LevelsExtension\",\r\n          \"Autodesk.AEC.Minimap3DExtension\",\r\n          \"Autodesk.DocumentBrowser\",\r\n          \"Autodesk.MemoryLimited\"\r\n        ],\r\n      });\r\n\r\n      // Start View\r\n      viewer.start();\r\n\r\n      // Spinner chạy trước khi start View\r\n      replaceSpinner();\r\n\r\n      // debugger\r\n      urns.map((urn) => {\r\n        Autodesk.Viewing.Document.load(`urn:${urn}`, (doc) => {\r\n          var viewables = doc.getRoot().getDefaultGeometry();\r\n          Autodesk.Viewing.Document.getAecModelData(doc.getRoot())\r\n            .then(aec => console.log('AEC metadata', aec));\r\n\r\n          viewer\r\n            .loadDocumentNode(doc, viewables, {\r\n              keepCurrentModels: true,\r\n              globalOffset: { x: 0, y: 0, z: 0 },\r\n              applyRefPoint: true,\r\n              isAEC: true,\r\n            })\r\n            .then(() => {\r\n              onDocumentLoadSuccess(doc, handle)\r\n            });\r\n        });\r\n      });\r\n      loadExtension();\r\n    });\r\n  });\r\n}\r\n\r\nconst onDocumentLoadSuccess = (doc, handle) => {\r\n  viewer.setGroundReflection(false);\r\n  viewer.setGroundShadow(false);\r\n  viewer.setOptimizeNavigation(true);\r\n  loadExtension();\r\n\r\n  // Handle\r\n  if (handle) {\r\n    handle(true);\r\n  }\r\n}\r\n\r\nconst onDocumentLoadFailure = (viewerErrorCode, viewerErrorMsg) => {\r\n  console.error('onDocumentLoadFailure() - errorCode:' + viewerErrorCode + '\\n- errorMessage:' + viewerErrorMsg);\r\n}\r\n\r\n// Load Extension\r\nconst replaceSpinner = () => {\r\n  var spinners = document.getElementsByClassName(\"forge-spinner\");\r\n  if (spinners.length === 0) return;\r\n  var spinner = spinners[0];\r\n  spinner.classList.remove(\"forge-spinner\");\r\n  spinner.classList.add('lds-ring');\r\n  spinner.innerHTML = '<div></div>';\r\n}\r\n\r\nconst loadExtension = () => {\r\n  viewer.loadExtension(NestedViewerExtension.ExtensionId, {\r\n    filter: [\"2d\", \"3d\"],\r\n    crossSelection: true,\r\n  });\r\n  viewer.loadExtension(SetGhostingExtension, {\r\n    filter: [\"2d\", \"3d\"],\r\n    crossSelection: true,\r\n  });\r\n  viewer.loadExtension(\"Autodesk.VisualClusters\", {\r\n    attribName: \"Category\",\r\n    searchAncestors: false,\r\n  });\r\n}\r\n\r\nexport const showAllElement = () => {\r\n  // viewer.isolate();// Dùng cho model đơn\r\n  viewer.impl.visibilityManager.aggregateIsolate([]); //Dùng cho multiple models\r\n}\r\n\r\nexport const getElementWithExternalId = (mapIds) => {\r\n  var allModels = viewer.impl.modelQueue().getModels();\r\n  var DBids = allModels.map((a) => {\r\n    return getAllDbIdsMultipleModel(a);\r\n  });\r\n\r\n  for (let i = 0; i < allModels.length; i++) {\r\n    getSubsetModel(allModels[i], DBids[i], mapIds, (dbId) => {\r\n      if(dbId.length===0){\r\n        viewer.impl.visibilityManager.isolate([0], allModels[i]);\r\n      }else{\r\n        viewer.impl.visibilityManager.isolate(dbId, allModels[i]);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nconst getSubsetModel = (model, dbIds, values, callback) => {\r\n  var newDbIds = [];\r\n  model.getBulkProperties(\r\n    dbIds,\r\n    {\r\n      propFilter: [\"externalId\"],\r\n      ignoreHidden: true,\r\n    },\r\n\r\n    function (data) {\r\n      for (var key1 in values) {\r\n        var value = values[key1];\r\n        for (var key in data) {\r\n          var item = data[key];\r\n          if (item.externalId === value) {\r\n            newDbIds.push(item.dbId);\r\n          }\r\n        }\r\n      }\r\n      callback(newDbIds);\r\n    },\r\n    function (error) {}\r\n  );\r\n}\r\n\r\n// Mỗi lần load model, load tập hợp dbIds mới\r\nconst getAllDbIdsMultipleModel = (model) => {\r\n  var instanceTree = model.getInstanceTree();\r\n\r\n  var allDbIdsStr = Object.keys(instanceTree.nodeAccess.dbIdToIndex);\r\n\r\n  return allDbIdsStr.map(function (id) {\r\n    return parseInt(id);\r\n  });\r\n}","import * as api from './apiUtil'\r\n\r\nexport let dtFormat = new Intl.DateTimeFormat('en-GB');\r\n\r\nexport const deepClone = (q) => {\r\n  return JSON.parse(JSON.stringify(q));\r\n}\r\n\r\nexport const randomId = () => {\r\n  // Math.random should be unique because of its seeding algorithm.\r\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n  // after the decimal.\r\n  return Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const newGUID = () => {\r\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\r\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n  );\r\n}\r\n\r\nexport const UpdateFromModel = (obj, action) => {\r\n  obj.M2VM = true;\r\n  action();\r\n  obj.M2VM = false;\r\n}\r\n\r\nexport const MoveItem = (list, oldIndex, newIndex) => {\r\n  if (oldIndex === -1 || newIndex === -1 ||\r\n    oldIndex === newIndex) return;\r\n  var temp = list[oldIndex];\r\n  list[oldIndex] = list[newIndex];\r\n  list[newIndex] = temp;\r\n}\r\n\r\nexport const InsertItem = (list, sourceIndex, destIndex) => {\r\n  var [reorderedItem] = list.splice(sourceIndex, 1);\r\n  list.splice(destIndex, 0, reorderedItem);\r\n}\r\n\r\nexport const IsEqual = (list1, list2) => {\r\n  if (list1.length !== list2.length) return false;\r\n  var isValidCheck = true;\r\n  var isEqual = true;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && x !== list2[i]) {\r\n      isValidCheck = false; isEqual = false;\r\n    }\r\n  })\r\n\r\n  return isEqual;\r\n}\r\n\r\nexport const IsSameValues = (list1, list2) => {\r\n  var isValidCheck = true;\r\n  var isSame = true;\r\n\r\n  if (list1.length !== list2.length) return false;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && !list2.includes(x)) {\r\n      isValidCheck = false; isSame = false;\r\n    }\r\n  })\r\n\r\n  return isSame;\r\n}\r\n\r\nexport const GroupBy = (xs, key, createGroupFunc, handleItemFunc) => {\r\n  var groups = [];\r\n\r\n  xs.forEach(x => {\r\n    var val = x[key];\r\n    var group = undefined;\r\n    var index = groups.findIndex(y => val === y.Key);\r\n    if (index === -1) {\r\n      if (createGroupFunc) {\r\n        group = createGroupFunc(val);\r\n      } else {\r\n        group = {\r\n          Key: val,\r\n          Items: []\r\n        };\r\n      }\r\n\r\n      groups.push(group);\r\n    } else {\r\n      group = groups[index];\r\n    }\r\n\r\n    var item = handleItemFunc ? handleItemFunc(x, group) : x\r\n    group.Items.push(item);\r\n  })\r\n\r\n  return groups;\r\n};\r\n\r\nexport const Remove = (dict, key) => {\r\n  var index = dict.findIndex(x => x.Key === key);\r\n  if (index !== 0) {\r\n    return dict.splice(index, 1);\r\n  }\r\n}\r\n\r\nexport const Add = (dict, func, isDelete = true) => {\r\n  var key = newGUID();\r\n\r\n  var newfunc = () => {\r\n    func();\r\n    if (isDelete) {\r\n      Remove(dict, key);\r\n    }\r\n  }\r\n\r\n  dict.push({\r\n    Key: key,\r\n    Value: newfunc\r\n  });\r\n}\r\n\r\nexport const Add_2 = (dict, func, isDelete = true) => {\r\n  dict.push({\r\n    Key: newGUID(),\r\n    Value: func,\r\n    IsDelete: isDelete\r\n  });\r\n}\r\n\r\nexport const Handle = (dict, newDict_Handle) => {\r\n  dict.forEach(x => x.Value());\r\n\r\n  dict = dict.filter(x => !x.IsDelete);\r\n  newDict_Handle(dict);\r\n}\r\n\r\n// Truy xuất thông tin Excel\r\nexport const ExcelColumnName = (n) => {\r\n  var ordA = 'A'.charCodeAt(0);\r\n  var ordZ = 'Z'.charCodeAt(0);\r\n  var len = ordZ - ordA + 1;\r\n\r\n  var s = \"\";\r\n  while (n >= 0) {\r\n    s = String.fromCharCode(n % len + ordA) + s;\r\n    n = Math.floor(n / len) - 1;\r\n  }\r\n  return s;\r\n}\r\n\r\nexport const ExcelCellName = (row, col) => {\r\n  return `${ExcelColumnName(col)}${row + 1}`;\r\n}\r\n\r\nexport const ExcelRangeName = (row1, col1, row2, col2) => {\r\n  return `${ExcelCellName(row1, col1)}:${ExcelCellName(row2, col2)}`\r\n}\r\n\r\n// Max min\r\nexport const MinMax = (arr) => {\r\n  return arr.reduce(({ min, max }, v) => ({\r\n    min: min < v ? min : v,\r\n    max: max > v ? max : v,\r\n  }), { min: arr[0], max: arr[0] });\r\n}\r\n\r\n// Save Database\r\nexport const SaveDatabase = (q, url, handle, method) => {\r\n  var apiData = q.ApiData\r\n  var _id = apiData._id ? apiData._id : q._id;\r\n\r\n  var apiFunc\r\n\r\n  if (!method) {\r\n    var isNew = _id ? false : true\r\n    apiFunc = () => isNew ?\r\n      api.post(`${url}/add`, apiData) :\r\n      api.put(`${url}/edit`, apiData)\r\n  } else {\r\n    apiFunc = () => api.put(`${url}/${method}`, apiData)\r\n  }\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew) {\r\n        q._id = data._id\r\n      }\r\n      handle(data, isNew);\r\n    })\r\n}\r\n\r\nexport const DeleteDatabase = (q, url, handle) => {\r\n  var apiData = {\r\n    _id: q._id\r\n  }\r\n\r\n  const apiFunc = () => api.put(`${url}/delete`, apiData)\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      handle(data);\r\n    })\r\n}\r\n\r\n// Get plain text from paste\r\nexport const GetPlainText = (pasteEvent) => {\r\n  var text = (pasteEvent.originalEvent || pasteEvent).clipboardData.getData('text/plain');\r\n  return text;\r\n}\r\n\r\n// Remove new line\r\nexport const RemoveNewLine = (text) => {\r\n  return text.replace(/\\r?\\n|\\r/g, \"\");\r\n}\r\n\r\n// First - Last Item\r\nexport const GetFirst = (list) => {\r\n  return list.length !== 0 ? list[0] : undefined;\r\n}\r\n\r\nexport const GetLast = (list) => {\r\n  return list.length !== 0 ? list[list.length - 1] : undefined;\r\n}\r\n\r\nexport const SingleFilter = (list, filter, nullHandle) => {\r\n  var index = list.findIndex(filter);\r\n  var obj = index !== -1 ? list[index] : undefined\r\n\r\n  if (obj === undefined && nullHandle) {\r\n    var obj = nullHandle();\r\n    list.push(obj);\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\n// Incre Fun\r\nexport const IncreFunc = (length, handle) => {\r\n  var i = 0;\r\n\r\n  var increfunc = () => {\r\n    i ++;\r\n    if (i === length){\r\n      handle();\r\n    }\r\n  }\r\n\r\n  if (length === 0){\r\n    handle();\r\n  }\r\n\r\n  return increfunc;\r\n}","import { PMDataVM } from \"../model/main/single/form/PMDataVM\"\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport const Validate = (commands) => {\r\n  if (!commands) return false;\r\n  var list = pmDataVM().Commands;\r\n  if (ValidateInGroup(commands, list)) return true;\r\n  return ValidateInGroup(commands, pmDataVM().AdminCommands)\r\n}\r\n\r\nexport const ValidateInGroup = (commands, list) => {\r\n  var data = list;\r\n  if (!data) return false;\r\n  if (typeof commands === 'string') return data.includes(commands);\r\n\r\n  var isValid = false\r\n  commands.forEach(x => {\r\n    if (!isValid){\r\n      isValid = data.includes(x)\r\n    }\r\n  })\r\n  return isValid;\r\n}","export const view = 'view'\r\nexport const edit = 'edit'\r\n\r\nexport const GetList = () => {\r\n  return [\r\n    view, edit\r\n  ]\r\n}","import { Button, message } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport InputView from '../../../../input/InputView';\r\nimport { TextVM } from '../../../../text/TextVM';\r\nimport ShowView from '../../svg/ShowView';\r\nimport * as util from './ForgeUtil'\r\nimport * as helperUtil from './Forge_HelperUtil'\r\nimport { url } from './Forge_Url'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../util/commandUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport './Forge.css'\r\nimport './ForgeSpinner.css'\r\nimport * as pct from '../../command/ProjectCommand'\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\n\r\nconst pmData = () => PMData.Instance\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class Forge {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsLoggedIn: observable,\r\n      Can_Visible: observable,\r\n      documentId: observable\r\n    })\r\n  }\r\n\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // DocumentId = 'dXJuOmFkc2sud2lwcHJvZDpmcy5maWxlOnZmLl9ERHpscjFsVG8ycFJ2UEk4ZjhjNUE_dmVyc2lvbj0x';\r\n  documentId = undefined\r\n  get DocumentId() {\r\n    return this.documentId\r\n  } set DocumentId(v) {\r\n    this.documentId = v;\r\n  }\r\n\r\n  get DocumentIds() {\r\n    return [this.DocumentId]\r\n  }\r\n\r\n  Initial = (handle) => {\r\n    this.IsLoggedIn = true;\r\n    // util.LaunchViewer(this, 'viewerDiv', this.DocumentId, handle)\r\n    helperUtil.launchViewer(this, 'viewerDiv', this.DocumentIds, handle)\r\n  }\r\n\r\n  IsLoggedIn = undefined\r\n\r\n  Can_Visible = false\r\n\r\n  get Is_Visible() {\r\n    return this.DocumentId && this.Can_Visible\r\n  }\r\n\r\n  Is_Initial\r\n\r\n  ToggleVisible = () => {\r\n    var v = this.Can_Visible = !this.Can_Visible;\r\n    if (v && !this.Is_Initial) {\r\n      this.Initial();\r\n    }\r\n  }\r\n\r\n  get VisibleButton_Style() {\r\n    return this.Can_Visible ?\r\n      'forge__button close' : 'forge__button open'\r\n  }\r\n\r\n  get ToggleView_Button() {\r\n    var size = 12;\r\n    return <Button type='primary' size='small'\r\n      className={this.VisibleButton_Style}\r\n      onClick={this.ToggleVisible}>\r\n      <ShowView className='forge__togglevisible__icon' width={size} height={size} />\r\n    </Button>\r\n  }\r\n\r\n  get ModalViewerStyle() {\r\n    return this.Can_Visible ? undefined : { display: 'none' }\r\n  }\r\n\r\n  inputVM\r\n  get InputVM() {\r\n    if (!this.inputVM) {\r\n      var obj = this.inputVM = new TextVM();\r\n      obj.Placeholder = 'urn ...'\r\n      obj.Content = this.DocumentId\r\n      obj.OnSetContent = (v) => this.TempDocumentId = v\r\n    } return this.inputVM;\r\n  }\r\n\r\n  Input_Open = () => {\r\n    this.DocumentId = this.TempDocumentId;\r\n    this.Initial((status) => {\r\n      if (!status) {\r\n        message.error('Wrong urn!')\r\n        this.DocumentId = undefined\r\n      }\r\n      this.SaveDatabase(false)\r\n    });\r\n  }\r\n\r\n  get InputView() {\r\n    return <>\r\n      {comUtil.Validate(pct.edit) ?\r\n        <div>\r\n          <div className='forge__input__dec f-ac'>\r\n            <div className='forge__title'>urn:</div>\r\n            <InputView className='forge__input f1' store={this.InputVM} />\r\n          </div>\r\n          <Button type='primary' size='small'\r\n            onClick={this.Input_Open}>OPEN</Button>\r\n        </div>\r\n        : pmDataVM().UnAuthorized_View}\r\n    </>\r\n  }\r\n\r\n  Edit_Urn = () => {\r\n    this.DocumentId = undefined;\r\n  }\r\n\r\n  get ModelView() {\r\n    return <>\r\n      <div className='f'>\r\n        {comUtil.Validate(pct.edit) ?\r\n          <Button type='primary' size='small'\r\n            className='btn-warning'\r\n            onClick={this.Edit_Urn}>Edit Urn</Button>\r\n          : ''}\r\n      </div>\r\n      {\r\n        this.IsLoggedIn ?\r\n          <div className=\"forge-viewer\" id='viewerDiv' />\r\n          : ''\r\n      }\r\n    </>\r\n  }\r\n\r\n  get View() {\r\n    return <div className='forge__wrapper' style={this.ModalViewerStyle}>\r\n      {this.DocumentId ?\r\n        this.ModelView\r\n        : this.InputView\r\n      }\r\n    </div>\r\n  }\r\n\r\n  // Select\r\n  SelectElements = (guids) => {\r\n    // util.getElementWithExternalId(guids)\r\n    helperUtil.getElementWithExternalId(guids);\r\n  }\r\n\r\n  // Database\r\n  get ApiData() {\r\n    return {\r\n      _id: this._id,\r\n      projectId: pmData().CurrentProject._id,\r\n      documentId: this.DocumentId,\r\n    }\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n}","import { url } from './Forge_Url'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport { Forge } from './Forge';\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id;\r\n  qI.InputVM.Content = qI.DocumentId = data.documentId;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Forge();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","export const Concrete = \"Concrete\";\r\nexport const Formwork = \"Formwork\";\r\nexport const Rebar = \"Rebar\";\r\nexport const Structure = \"Structure\";\r\n\r\nexport const Sitework = \"Sitework\";\r\nexport const Tiling_Paving = \"Tiling & Paving\";\r\nexport const Masonry = \"Masonry\";\r\nexport const Metal = \"Metal\";\r\nexport const Painting = \"Painting\";\r\nexport const Plaster = \"Plaster\";\r\nexport const Screed = \"Screed\";\r\nexport const Roofing = \"Roofing\";\r\nexport const Wooden = \"Wooden\";\r\nexport const Mosaic = \"Mosaic\";\r\nexport const Gypsum = \"Gypsum\";\r\nexport const Carpet = \"Carpet\";\r\nexport const Vinyl = \"Vinyl\";\r\nexport const Skirting = \"Skirting\";\r\n\r\nexport const FloorFinish = \"FloorFinish\";\r\nexport const WallFinish = \"WallFinish\";\r\nexport const CeilingFinish = \"CeilingFinish\";\r\n\r\nexport const Staircase = \"Staircase\";\r\nexport const Ceiling = \"Ceiling\";\r\nexport const Door = \"Door\";\r\nexport const Window = \"Window\";\r\nexport const Furniture = \"Furniture\";\r\nexport const Lighting_Fixture = \"Lighting Fixture\";\r\nexport const Plumbing_Fixture = \"Plumbing Fixture\";\r\nexport const Railing = \"Railing\";\r\n\r\nexport const Arc = \"Arc\";\r\n\r\nexport const HVAC = \"HVAC\";\r\nexport const Electrical = \"Electrical\";\r\nexport const Plumbing = \"Plumbing\";\r\nexport const Firefighter = \"Firefighter\";\r\nexport const MEP = \"MEP\";\r\n\r\nexport const GetList = () => {\r\n return [\r\n   Concrete,\r\n   Formwork,\r\n   Rebar,\r\n   Structure,\r\n\r\n   Sitework,Tiling_Paving,Masonry, Metal,Painting,Plaster,\r\n   Screed, Roofing, Wooden, Mosaic, Gypsum, Carpet,\r\n   Vinyl, Skirting,\r\n\r\n   FloorFinish, WallFinish, CeilingFinish,\r\n\r\n   Staircase, Ceiling, Door, Window, Furniture, \r\n   Lighting_Fixture, Plumbing_Fixture, Railing,\r\n   Arc,\r\n\r\n   HVAC,\r\n   Electrical,\r\n   Plumbing,\r\n   Firefighter,\r\n   MEP\r\n ] \r\n}","export const AcceptanceNumberInternal = 'AcceptanceNumberInternal'\r\nexport const AcceptanceNumber = 'AcceptanceNumber'\r\nexport const AcceptanceDate = 'AcceptanceDate'\r\nexport const SupervisorContractor = 'SupervisorContractor'\r\nexport const SupervisorConsultant = 'SupervisorConsultant'\r\nexport const SupervisorClient = 'SupervisorClient'\r\nexport const SubContractor = 'SubContractor'\r\nexport const PaymentPeriodSubContractor = 'PaymentPeriodSubContractor'\r\nexport const PaymentPeriodClient = 'PaymentPeriodClient'\r\n\r\nexport const GetList = () => {\r\n  return [\r\n    AcceptanceNumberInternal,\r\n    AcceptanceNumber,\r\n    AcceptanceDate,\r\n    SupervisorContractor,\r\n    SupervisorConsultant,\r\n    SupervisorClient,\r\n    SubContractor,\r\n    PaymentPeriodSubContractor,\r\n    PaymentPeriodClient\r\n  ]\r\n}\r\n\r\nexport const GetKey = (v) => {\r\n  switch (v) {\r\n    case AcceptanceNumberInternal:\r\n      return 'acceptanceNumberInternal'\r\n    case AcceptanceNumber:\r\n      return 'acceptanceNumber'\r\n    case AcceptanceDate:\r\n      return 'acceptanceDate'\r\n    case SupervisorContractor:\r\n      return 'supervisorContractor'\r\n    case SupervisorConsultant:\r\n      return 'supervisorConsultant'\r\n    case SupervisorClient:\r\n      return 'supervisorClient'\r\n    case SubContractor:\r\n      return 'subContractor'\r\n    case PaymentPeriodSubContractor:\r\n      return 'paymentPeriodSubContractor'\r\n    case PaymentPeriodClient:\r\n      return 'paymentPeriodClient'\r\n  }\r\n}\r\n\r\nexport const GetTitle = (v) => {\r\n  switch (v) {\r\n    case AcceptanceNumberInternal:\r\n      return 'BBNT nội bộ'\r\n    case AcceptanceNumber:\r\n      return 'BBNT'\r\n    case AcceptanceDate:\r\n      return 'Ngày nghiệm thu'\r\n    case SupervisorContractor:\r\n      return 'Giám sát Nhà thầu'\r\n    case SupervisorConsultant:\r\n      return 'Giám sát Tư vấn'\r\n    case SupervisorClient:\r\n      return 'Giám sát CĐT'\r\n    case SubContractor:\r\n      return 'Thầu phụ'\r\n    case PaymentPeriodSubContractor:\r\n      return 'Kỳ thanh toán Thầu phụ'\r\n    case PaymentPeriodClient:\r\n      return 'Kỳ thanh toán Chủ đầu tư'\r\n  }\r\n}","import * as mt from '../MassType'\r\nimport * as sft from '../site/Site_FieldType'\r\n\r\nexport const Project = 'Project'\r\nexport const Phase = 'Phase'\r\nexport const Workpackage = 'Workpackage'\r\nexport const Value = 'Value'\r\nexport const Unit = 'Unit'\r\nexport const partition = 'partition'\r\nexport const rebarType = 'rebarType'\r\nexport const elementName = 'elementName'\r\nexport const MassType = 'MassType'\r\nexport const workItem = 'workItem'\r\nexport const level = 'level'\r\n\r\n// rebar\r\nexport const diameter = 'diameter'\r\nexport const rebarnumber = 'rebarnumber'\r\n\r\nexport const block = 'block'\r\nexport const discipline = 'discipline'\r\nexport const zone = 'zone'\r\nexport const typename = 'typename'\r\nexport const materialName = 'materialName'\r\nexport const systemtype = 'systemtype'\r\nexport const systemclassification = 'systemclassification'\r\nexport const familyName = 'familyName'\r\nexport const size = 'size'\r\nexport const roomName = 'roomName'\r\nexport const roomNumber = 'roomNumber'\r\n\r\nexport const guid = 'guid'\r\nexport const elementId = 'elementId'\r\n\r\nexport const ExportSet = 'ExportSet'\r\n\r\nexport const GetAll = () => {\r\n  return [MassType, workItem, level, block, elementName, diameter]\r\n}\r\n\r\nconst GetBase = () => {\r\n  return [\r\n    MassType, workItem, level, block, zone,\r\n    familyName, typename,\r\n    diameter, rebarnumber,\r\n    elementName, materialName, roomName, roomNumber,\r\n    systemtype, systemclassification, size,\r\n  ]\r\n}\r\n\r\nexport const GetForMassGroup = () => {\r\n  var list = GetForDetail();\r\n\r\n  list.push(ExportSet);\r\n  list.push.apply(list, sft.GetList());\r\n  return list;\r\n}\r\n\r\nexport const GetForDetail = () => {\r\n  var list = GetBase();\r\n  list.push.apply(list, [guid, elementId]);\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetForInput = () => {\r\n  return GetBase();\r\n}\r\n\r\nexport const GetDirectiveFields = () => {\r\n  return [Project, Workpackage, Value, Unit];\r\n}\r\n\r\nexport const GetIdentifyFields = () => {\r\n  return [elementName];\r\n}\r\n\r\nexport const Get_MassInfo_Fields = () => {\r\n  return [materialName]\r\n}\r\n\r\nexport const GetFullFields = (massItem, field) => {\r\n  switch (field) {\r\n    case Project:\r\n    case MassType:\r\n    case Phase:\r\n      return {\r\n        fields: [field],\r\n        isFromElement: false\r\n      };\r\n    case workItem:\r\n    case elementName:\r\n    case rebarType:\r\n    case partition:\r\n    case level:\r\n\r\n    // rebar\r\n    case diameter:\r\n    case rebarnumber:\r\n\r\n    case block:\r\n    case zone:\r\n    case typename:\r\n    case materialName:\r\n    case roomName:\r\n    case roomNumber:\r\n    case systemtype:\r\n    case systemclassification:\r\n    case familyName:\r\n    case size:\r\n\r\n    case guid:\r\n    case elementId:\r\n      // Kiểm tra có thể có trong Info của Mass hay không\r\n      switch (field) {\r\n        case materialName:\r\n          return {\r\n            fields: ['Info', field],\r\n            isFromElement: false\r\n          };\r\n        case zone:\r\n          return [\r\n            {\r\n              fields: ['Info', field],\r\n              isFromElement: false\r\n            },\r\n            {\r\n              fields: ['Element', 'info', 'locate', field],\r\n              isFromElement: true\r\n            }\r\n          ]\r\n        case workItem:\r\n          return [\r\n            {\r\n              fields: ['WorkItem'],\r\n              isFromElement: false\r\n            },\r\n            {\r\n              fields: ['Element', 'info', 'identify', field],\r\n              isFromElement: true\r\n            }\r\n          ]\r\n        case level:\r\n          return [\r\n            {\r\n              fields: ['Level'],\r\n              isFromElement: false\r\n            },\r\n            {\r\n              fields: ['Element', 'info', 'locate', field],\r\n              isFromElement: true\r\n            }\r\n          ]\r\n      }\r\n      if (!massItem.Element || field === materialName) {\r\n        return {\r\n          fields: ['Info', field],\r\n          isFromElement: false\r\n        };\r\n      } else {\r\n\r\n        var groupName = undefined;\r\n        // kiểm tra các phân nhóm trong Element: identify, locate ...\r\n        switch (field) {\r\n          // Thông tin định danh element\r\n          case guid:\r\n          case elementId:\r\n            return {\r\n              fields: ['Element', field],\r\n              isFromElement: true\r\n            }\r\n\r\n          case elementName:\r\n          case typename:\r\n          case systemtype:\r\n          case systemclassification:\r\n          case familyName:\r\n            groupName = 'identify';\r\n            break;\r\n          case block:\r\n          case roomName:\r\n          case roomNumber:\r\n            groupName = 'locate';\r\n            break;\r\n          case size:\r\n            groupName = 'geometry';\r\n            break;\r\n        }\r\n        return {\r\n          fields: ['Element', 'info', groupName, field],\r\n          isFromElement: true\r\n        }\r\n      }\r\n      break;\r\n    case ExportSet:\r\n      return {\r\n        fields: ['ExportSet', 'Name'],\r\n      }\r\n    default:\r\n      return {\r\n        fields: ['Site', field]\r\n      }\r\n  }\r\n}\r\n\r\nexport const GetValueString = (massFieldValue, field) => {\r\n  var value = undefined;\r\n\r\n  switch (field) {\r\n    case Project:\r\n    case Phase:\r\n      value = massFieldValue.Name;\r\n      break;\r\n    case Workpackage:\r\n      value = massFieldValue.FullName;\r\n      break;\r\n    default:\r\n      value = massFieldValue;\r\n      break;\r\n  }\r\n\r\n  return value ? value : 'undefined';\r\n}\r\n\r\nexport const GetListForTypicalLevelFilter = () => {\r\n  return [workItem, MassType, block]\r\n}\r\n\r\nexport const GetDefaultListValue = (field) => {\r\n  switch (field) {\r\n    case workItem:\r\n      return ['Dầm', 'Sàn', 'Cột', 'Vách'];\r\n    default:\r\n      return [];\r\n  }\r\n}\r\n\r\nexport const GetName = (field) => {\r\n  var name;\r\n\r\n  switch (field) {\r\n    case Project:\r\n      name = 'Dự án'\r\n      break;\r\n    case Phase:\r\n      name = \"Phiên bản\"\r\n      break;\r\n    case Workpackage:\r\n      name = \"Gói thầu\"\r\n      break;\r\n    case Value:\r\n      name = \"Giá trị\"\r\n      break;\r\n    case Unit:\r\n      name = \"Đơn vị\"\r\n      break;\r\n    case elementName:\r\n      name = \"Tên cấu kiện\"\r\n      break;\r\n    case MassType:\r\n      name = \"Đầu mục công việc\"\r\n      break;\r\n    case workItem:\r\n      name = \"Hạng mục\"\r\n      break;\r\n    case level:\r\n      name = \"Level\"\r\n      break;\r\n    case block:\r\n      name = \"Block\"\r\n      break;\r\n    case discipline:\r\n      name = \"Bộ môn\"\r\n      break;\r\n    case zone:\r\n      name = \"Zone\"\r\n      break\r\n    case typename:\r\n      name = \"Type\"\r\n      break;\r\n\r\n    // rebar\r\n    case diameter:\r\n      name = 'Đường kính'\r\n      break;\r\n    case rebarnumber:\r\n      name = 'Số hiệu thép'\r\n      break;\r\n\r\n    case materialName:\r\n      name = \"Vật liệu\"\r\n      break;\r\n    case systemtype:\r\n      name = \"System Type\"\r\n      break;\r\n    case systemclassification:\r\n      name = \"System Classification\"\r\n      break;\r\n    case familyName:\r\n      name = \"Family\"\r\n      break;\r\n    case size:\r\n      name = \"Size\"\r\n      break;\r\n    case roomName:\r\n      name = \"Room Name\";\r\n      break;\r\n    case roomNumber:\r\n      name = \"Room Numnber\";\r\n      break;\r\n    case guid:\r\n      name = \"Guid\";\r\n      break;\r\n    case elementId:\r\n      name = \"ElementId\"\r\n      break\r\n    case ExportSet:\r\n      name = \"ExportSet\"\r\n      break;\r\n    default:\r\n      name = sft.GetTitle(field)\r\n      break;\r\n  }\r\n\r\n  return name;\r\n}","export const url = \"https://api.bimdev.vn/api/hbphase\";","import * as util from './PhaseUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport { url } from './Phase_Url'\r\nimport { message } from 'antd'\r\nimport { PMData } from '../../../single/model/PMData'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\nexport default class Phase {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Data\r\n  name\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = 'tên version'\r\n    } return this.name\r\n  } set Name(v) {\r\n    this.name = v;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = 'mô tả'\r\n    } return this.description\r\n  } set Description(v) {\r\n    this.description = v\r\n  }\r\n\r\n  Is_FirstCreated = false\r\n\r\n  // typicalLevelSetting\r\n  OnGet_TypicalLevelSetting_Func = []\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      util.Handle_TypicalLevelSetting(this)\r\n    } return this.typicalLevelSetting\r\n  } set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n    genUtil.Handle(this.OnGet_TypicalLevelSetting_Func,\r\n      (v) => this.OnGet_TypicalLevelSetting_Func = v)\r\n  }\r\n\r\n  // ApiData\r\n  get ApiData() {\r\n    var obj = {\r\n      _id: this._id,\r\n      projectId: pmData().CurrentProject._id,\r\n      name: this.Name,\r\n      desciprtion: this.Description\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  // Run\r\n  Run = (handle) => {\r\n    util.Run(this, handle);\r\n  }\r\n\r\n  // Save\r\n  Save = (handle) => {\r\n    this.SaveDatabase(false, handle);\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  // Delete\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage) {\r\n        message.success('delete successflly!');\r\n      }\r\n      if (handle) {\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './LevelGroupUtil'\r\n\r\nexport class LevelGroup {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.LevelGroups.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      levels : this.Levels ? this.Levels : [],\r\n      primary: this.Primary\r\n    }\r\n  }\r\n\r\n  get Count(){\r\n    return this.Levels.length\r\n  }\r\n\r\n\r\n  OnGetLevelStorageList_Func_Dict = []\r\n  get GetLevelStorageList(){\r\n    return this.getLevelStorageList;\r\n  }\r\n  set GetLevelStorageList(v){\r\n    this.getLevelStorageList = v;\r\n    this.OnGetLevelStorageList_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  IsGet_LevelStorageList\r\n\r\n  get LevelStorageList (){\r\n    var obj = this.Dict.LevelStorageList;\r\n    if (!obj && !this.IsGet_LevelStorageList){\r\n      this.IsGet_LevelStorageList = true;\r\n      this.Setting.OnGetLevelStorageList_Funcs.push(() => {\r\n        this.GetLevelStorageList = true\r\n      });\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Setting (){\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  get LevelIndexs(){\r\n    return this.Levels.map(x => this.LevelStorageList.indexOf(x));\r\n  }\r\n\r\n  get MinLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.min.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get MaxLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.max.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get Description(){\r\n    if (!this.LevelStorageList) return undefined;\r\n    return `Typ: ${this.MinLevel} - ${this.MaxLevel} (${this.Count})`;\r\n  }\r\n\r\n  get FullDescription() {\r\n    if (!this.Description) return undefined;\r\n    return `${this.Dict.FilterDescription} (${this.Description})`;\r\n  }\r\n\r\n  primary\r\n  get Primary(){\r\n    if (!this.primary){\r\n      this.primary = util.GetDefaultPrimary(this);\r\n    }\r\n    return this.primary\r\n  } set Primary(v){\r\n    this.primary = v;\r\n  }\r\n\r\n  get Primary_Values(){\r\n    return util.GetPrimary_Values(this);\r\n  }\r\n\r\n  // Equal\r\n  IsEqual = (other) => {\r\n    return util.IsEqual(this, other);\r\n  }\r\n}","import { LevelGroup } from \"./LevelGroup\"\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new LevelGroup();\r\n\r\n  if (Array.isArray(data)) {\r\n    qI.Levels = data;\r\n  } else {\r\n    qI.Levels = data.levels;\r\n    qI.Primary = data.primary\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LevelGroup();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new LevelGroup();\r\n\r\n  qI.Levels = q.Levels;\r\n  qI.Primary = q.Primary;\r\n  qI.Dict = dict ? dict : q.Dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}\r\n\r\nexport const GetPrimary_Values = (q) => {\r\n  var primary = q.Primary;\r\n  var list = q.Setting.Binding.Items;\r\n\r\n  var index = list.findIndex(x => x.Name === primary);\r\n  return index !== -1 ? list[index].Values : []\r\n}\r\n\r\n// Method\r\nexport const IsEqual = (q1, q2) => {\r\n  if (q1.Primary !== q2.Primary) return false;\r\n\r\n  var l1 = q1.Levels;\r\n  var l2 = q2.Levels;\r\n  if (l1.length !== l2.length) return false;\r\n\r\n  var c_l2 = [...l2];\r\n  var isValid = true;\r\n\r\n  l1.forEach(x => {\r\n    if (isValid) {\r\n      var index = c_l2.findIndex(y => x === y);\r\n      if (index !== -1) {\r\n        c_l2.splice(index, 1);\r\n      } else {\r\n        isValid = false;\r\n      }\r\n    }\r\n  });\r\n\r\n  return isValid;\r\n}","export const input = 'input'\r\nexport const select = 'select'","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as it from './TLS_FilterValue_InputType'\r\nimport * as util from './TLS_FilterValueUtil'\r\n\r\nexport class TLS_FilterValue {\r\n  value\r\n  get Value(){\r\n    return this.value;\r\n  } set Value(v) {\r\n    this.value = v;\r\n  }\r\n  \r\n  InputType = it.select\r\n\r\n  // Api\r\n  get ApiData(){\r\n    var obj = {\r\n      value: this.Value,\r\n      inputType : this.InputType\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  // Equal\r\n  IsEqual = (other) => {\r\n    return util.IsEqual(this, other);\r\n  }\r\n}","import { TLS_FilterValue } from \"./TLS_FilterValue\"\r\n\r\nexport const Clone = (q) => {\r\n  var qI = new TLS_FilterValue();\r\n\r\n  qI.Value = q.Value;\r\n  qI.InputType = q.InputType;\r\n\r\n  return qI;\r\n}\r\n\r\n// Method\r\nexport const IsEqual = (q1, q2) => {\r\n  return q1.Value === q2.Value\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { TLS_FilterValue } from './TLS_FilterValue';\r\nimport * as util from './TLS_FilterUtil'\r\n\r\nexport class TLS_Filter {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  //Values = [ 'Cột' ]\r\n  get Values(){\r\n    return this.Items.filter(x => x.Value).map(x => x.Value);\r\n  }\r\n\r\n  Items = []\r\n\r\n  AddItem = () => {\r\n    var item = new TLS_FilterValue();\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  field\r\n  get Field(){\r\n    if (!this.field){\r\n      this.field = this.FieldStorageList[0]\r\n    }\r\n    return this.field;\r\n  } set Field(v){\r\n    this.field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      field : this.Field,\r\n      items : this.Items.filter(x => x.Value).map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Description() {\r\n    var obj =  this.Values.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += ', ';\r\n      }\r\n      a += b;\r\n      return a;\r\n    }, '')\r\n\r\n    return `${this.Field}: ${obj}`;\r\n  }\r\n\r\n  // Equal\r\n  IsEqual = (other) => {\r\n    return util.IsEqual(this, other);\r\n  }\r\n}","import { TLS_Filter } from \"./TLS_Filter\";\r\nimport { TLS_FilterValue } from \"./TLS_FilterValue\";\r\nimport * as valueUtil from './TLS_FilterValueUtil'\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Field = data.field;\r\n\r\n  if (data.items) {\r\n    qI.Items = data.items.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x.value;\r\n      obj.InputType = x.inputType\r\n      return obj;\r\n    })\r\n  } else {\r\n    qI.Items = data.values.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x;\r\n      return obj;\r\n    })\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new TLS_Filter();\r\n\r\n  qI.Field = q.Field;\r\n  qI.Items = q.Items.map(x => valueUtil.Clone(x));\r\n  qI.Dict = dict ? dict : q.Dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Method\r\nexport const IsEqual = (q1, q2) => {\r\n  if (q1.Field !== q2.Field) return false;\r\n\r\n  var i1 = q1.Items;\r\n  var i2 = q2.Items;\r\n  if (i1.length !== i2.length) return false;\r\n\r\n  var c_i2 = [...i2];\r\n  var isValid = true;\r\n\r\n  i1.forEach(x => {\r\n    if (isValid) {\r\n      var index = c_i2.findIndex(y => x.IsEqual(y));\r\n      if (index !== -1) {\r\n        c_i2.splice(index, 1);\r\n      } else {\r\n        isValid = false;\r\n      }\r\n    }\r\n  });\r\n\r\n  return isValid;\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\nimport * as util from './TLS_PageItemUtil'\r\n\r\nexport class TLS_PageItem {\r\n  _id\r\n  get id(){\r\n    if (!this._id){\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  Name = 'tên setting'\r\n\r\n  get Index (){\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.PageItems.splice(this.Index, 1);\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  // Level Groups\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups\r\n  get LevelGroups(){\r\n    if (!this.levelGroups){\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  } set LevelGroups(v){\r\n    this.levelGroups = v;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.GetDefault(this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  filters\r\n  get Filters(){\r\n    if (!this.filters){\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  } set Filters(v){\r\n    this.filters = v;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.GetDefault(this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n\r\n  get FilterDescription() {\r\n    var obj = this.Filters.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += '; ';\r\n      }\r\n      a += b.Description;\r\n      return a;\r\n    }, '')\r\n    return obj;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      levelGroups : this.LevelGroups.map(x => x.ApiData).filter(x => x.levels.length !== 0),\r\n      filters : this.Filters.map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  // Equal\r\n  IsEqual = (other) => {\r\n    return util.IsEqual(this, other);\r\n  }\r\n}","import { TLS_PageItem } from \"./TLS_PageItem\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = data.name;\r\n  qI.Filters = data.filters.map(x => filterUtil.get(x, qI));\r\n  qI.LevelGroups = data.levelGroups ? data.levelGroups.map(x => levelGroupUtil.get(x, qI))\r\n     : data.levels.map(x => levelGroupUtil.get(x, qI))\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = 'setting 1';\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new TLS_PageItem();\r\n\r\n  qI.Name = q.Name;\r\n  qI.Filters = q.Filters.map(x => filterUtil.Clone(x, qI));\r\n  qI.LevelGroups = q.LevelGroups.map(x => levelGroupUtil.Clone(x, qI));\r\n  qI.Dict = dict ? dict : q.Dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetLevelGroups = (q) => {\r\n  return [ levelGroupUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return [ filterUtil.GetDefault(q) ]\r\n}\r\n\r\n// Method\r\nexport const IsEqual = (q1, q2) => {\r\n  // Filter\r\n  var f1 = q1.Filters;\r\n  var f2 = q2.Filters;\r\n\r\n  if (f1.length !== f2.length) return false;\r\n\r\n  var c_f2 = [...f2];\r\n  var isValid = true;\r\n\r\n  f1.forEach(x => {\r\n    if (isValid) {\r\n      var index = c_f2.findIndex(y => x.IsEqual(y));\r\n      if (index !== -1) {\r\n        c_f2.splice(index, 1);\r\n      } else {\r\n        isValid = false;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (!isValid) return false;\r\n\r\n  // Level\r\n  var l1 = q1.LevelGroups;\r\n  var l2 = q2.LevelGroups;\r\n\r\n  if (l1.length !== l2.length) return false;\r\n\r\n  // Level phải đúng thứ tự và bằng nhau\r\n  l1.forEach((x, i) => {\r\n    if (isValid){\r\n      if (x.IsEqual(l2[i])){\r\n\r\n      }else {\r\n        isValid = false;\r\n      }\r\n    }\r\n  })\r\n\r\n  return isValid;\r\n}","import * as util from './TypicalLevelSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\nimport * as pageItemUtil from '../pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class TypicalLevelSettingData {\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n  \r\n  // Page Item\r\n  pageItems\r\n  get PageItems(){\r\n    if (!this.pageItems){\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  } set PageItems(v){\r\n    this.pageItems = v;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.GetDefault(this);\r\n    this.PageItems.push(item);\r\n    item.Name = `setting ${item.Index +1}`\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      pageItems : this.PageItems.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  // Equal\r\n  IsEqual = (other) => {\r\n    return util.IsEqual(this, other);\r\n  }\r\n}","import { PMData } from '../../../../single/model/PMData';\r\nimport { TypicalLevelSettingData } from './TypicalLevelSettingData';\r\nimport * as pageItemUtil from '../pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = ()  => PMData.Instance;\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.PageItems = data.pageItems.map(x => pageItemUtil.get(x, qI));\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n\r\n  qI.PageItems = q.PageItems.map(x => pageItemUtil.Clone(x, qI));\r\n  qI.Dict = dict ? dict : q.Dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetPageItems = (q) => {\r\n  return [ pageItemUtil.GetDefault(q) ]\r\n}\r\n\r\n// Method\r\nexport const IsEqual = (q1, q2) => {\r\n  // PageItem\r\n  var p1 = q1.PageItems;\r\n  var p2 = q2.PageItems;\r\n\r\n  if (p1.length !== p2.length) return false;\r\n\r\n  var isValid = true;\r\n  // PageItem phải đúng thứ tự và bằng nhau\r\n  p1.forEach((x, i) => {\r\n    if (isValid){\r\n      if (x.IsEqual(p2[i])){\r\n\r\n      }else {\r\n        isValid = false;\r\n      }\r\n    }\r\n  })\r\n\r\n  return isValid;\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './LS_ItemUtil'\r\n\r\nexport class LS_Item {\r\n  _id\r\n\r\n  tempId\r\n  get TempId(){\r\n    if (!this.tempId){\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n\r\n  // Data\r\n  Name = ''\r\n\r\n  Values = []\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      values: this.Values\r\n    }\r\n    return obj;\r\n  }\r\n}","import * as util from './LevelSettingDataUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\nimport * as itemUtil from '../item/LS_ItemUtil'\r\nimport * as genUtil from \"../../../../../../util/generalUtil\";\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class LevelSettingData {\r\n  // Items\r\n  Items = []\r\n\r\n  AddItem = () => {\r\n    var item = itemUtil.GetDefault(this);\r\n    item.Name = 'tên level';\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  Update_LevelData = () => {\r\n    this.LevelStorageList = util.GetLevelStorageList(this);\r\n  }\r\n\r\n  OnSet_LevelStorageList_Func_Dict = []\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n\r\n    genUtil.Handle(this.OnSet_LevelStorageList_Func_Dict,\r\n      (v) => this.OnSet_LevelStorageList_Func_Dict = v)\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      items : this.Items.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  // Move\r\n  Move = (i1, i2) => {\r\n    var list = this.Items;\r\n    genUtil.MoveItem(list, i1, i2);\r\n  }\r\n\r\n  Insert = (i1, i2) => {\r\n    var list = this.Items;\r\n    genUtil.InsertItem(list, i1, i2);\r\n  }\r\n}","import { LS_Item } from \"./LS_Item\"\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new LS_Item();\r\n\r\n  qI.Name = data.name;\r\n  qI.Values = data.values\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LS_Item();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n","import { PMData } from '../../../../single/model/PMData';\r\nimport { LevelSettingData } from './LevelSettingData';\r\nimport * as itemUtil from '../item/LS_ItemUtil';\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new LevelSettingData();\r\n  \r\n  qI.Items = data.items.map(x => itemUtil.GetFromDb(x, qI));\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LevelSettingData();\r\n\r\n  qI.Items = []\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetLevelStorageList = (q) => {\r\n  return q.Items.map(x => x.Name);\r\n}","import { PMData } from \"../../../../single/model/PMData\";\r\nimport * as util from './TLS_Data_WrapperUtil'\r\nimport * as genUtil from \"../../../../../../util/generalUtil\";\r\n\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport class TLS_Data_Wrapper {\r\n  // Ràng buộc Name với Values (F1 - Tầng 1, Tầng 1_SSL)\r\n  Binding\r\n\r\n  Typical\r\n\r\n  // Level StorageList\r\n  OnSet_LevelStorageList_Func_Dict = []\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n\r\n    genUtil.Handle(this.OnSet_LevelStorageList_Func_Dict,\r\n      (v) => this.OnSet_LevelStorageList_Func_Dict = v)\r\n  }\r\n\r\n  get FieldFilterStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      binding: this.Binding.ApiData,\r\n      typical: this.Typical.ApiData\r\n    }\r\n  }\r\n}","import * as tls_dataUtil from '../data/TypicalLevelSettingDataUtil'\r\nimport * as ls_dataUtil from '../../level/data/LevelSettingDataUtil'\r\nimport { TLS_Data_Wrapper } from './TLS_Data_Wrapper'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const GetFromData = (data, dict) => {\r\n  var qI = new TLS_Data_Wrapper();\r\n\r\n  var binding\r\n  // Setting mới: data phân ra thành binding và typical\r\n  if (data.typical){\r\n    binding = qI.Binding = ls_dataUtil.GetFromDb(data.binding, qI)\r\n\r\n    qI.Typical = tls_dataUtil.get(data.typical, qI);\r\n    qI.OldTypical = tls_dataUtil.Clone(qI.Typical);\r\n  }\r\n  // Setting cũ: data chính là typicallevelsetting\r\n  else {\r\n    binding = qI.Binding = ls_dataUtil.GetDefault(qI);\r\n    qI.Typical = tls_dataUtil.get(data, qI);\r\n  }\r\n  qI.Dict = dict;\r\n\r\n  // Gán sự kiện update Level cho Binding\r\n  genUtil.Add_2(\r\n    binding.OnSet_LevelStorageList_Func_Dict,\r\n    () => qI.LevelStorageList = GetLevelStorageList(qI),\r\n    false\r\n  );\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_Data_Wrapper();\r\n\r\n  var binding = qI.Binding = ls_dataUtil.GetDefault(qI);\r\n\r\n  qI.Typical = tls_dataUtil.GetTest(qI);\r\n  qI.OldTypical = tls_dataUtil.Clone(qI.Typical);\r\n\r\n  qI.Dict = dict;\r\n\r\n  // Gán sự kiện update Level cho Binding\r\n  genUtil.Add_2(\r\n    binding.OnSet_LevelStorageList_Func_Dict,\r\n    () => qI.LevelStorageList = GetLevelStorageList(qI),\r\n    false\r\n  );\r\n\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (dict) => {\r\n  var qI = new TLS_Data_Wrapper();\r\n\r\n  var binding = qI.Binding = ls_dataUtil.GetDefault(qI);\r\n\r\n  qI.Typical = tls_dataUtil.GetTest(qI);\r\n  qI.OldTypical = tls_dataUtil.Clone(qI.Typical);\r\n  \r\n  qI.Dict = dict;\r\n\r\n  // Gán sự kiện update Level cho Binding\r\n  genUtil.Add_2(\r\n    binding.OnSet_LevelStorageList_Func_Dict,\r\n    () => qI.LevelStorageList = GetLevelStorageList(qI),\r\n    false\r\n  );\r\n\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetLevelStorageList = (q) => {\r\n  return q.Binding.LevelStorageList\r\n}","import { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport default class Setting{\r\n  name\r\n  get Name(){\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    if (this.OnNameChanged){\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged){\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  SettingType\r\n\r\n  data\r\n  get Data(){\r\n    return this.data;\r\n  }\r\n  set Data(v){\r\n    this.data = v;\r\n    if (this.OnDataChanged){\r\n      this.OnDataChanged(v);\r\n    }\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    var {_id} = this;\r\n    var apiData = {_id};\r\n\r\n    var  url = \"https://api.bimdev.vn/api/hbs/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete setting successfully'))\r\n\r\n    this.Dict.Items.splice(this.Index, 1);\r\n\r\n    if (this.OnDelete){\r\n      this.OnDelete();\r\n    }\r\n\r\n    this.Dict.Input.EditItemId = undefined;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id : this._id,\r\n      projectId : this.Project?._id,\r\n      settingType : this.SettingType,\r\n      name : this.Name,\r\n      description : this.Description,\r\n      data : this.Data.ApiData\r\n    }\r\n  }\r\n\r\n  SaveDatabase = (handle) => {\r\n    genUtil.SaveDatabase(this, this.Url, (data, isNew) => {\r\n      var list = this.Dict.Items;\r\n      if (isNew) {\r\n        list.push(this);\r\n      } else {\r\n        var index = list.indexOf(x => x._id === this._id);\r\n        list[index] = this;\r\n      }\r\n\r\n      if (handle){\r\n        handle(data, isNew);\r\n      }\r\n    });\r\n  }\r\n}","import * as api from '../../../../../../util/apiUtil'\r\nimport { PMData } from '../../../../single/model/PMData'\r\nimport {url} from './ReportStatusUrl'\r\n\r\nconst pmData =() => PMData.Instance;\r\n\r\n// Method\r\nexport const Update = (handle) => {\r\n  var apiData = {\r\n    projectId : pmData().CurrentProject._id,\r\n    isUpdated: false\r\n  }\r\n\r\n  const apiFunc = () => api.post(`${url}/update`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle){\r\n        handle();\r\n      }\r\n    })\r\n}","export const url = \"https://api.bimdev.vn/api/hb_massreport_status\"","import Setting from \"../../base/Setting\";\r\nimport * as util from './TypicalLevelSettingUtil'\r\nimport * as typicalUtil from '../data/TypicalLevelSettingDataUtil'\r\nimport * as report_statusUtil from '../../../mass/report/status/ReportStatusUtil'\r\nimport { message } from \"antd\";\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\nexport class TypicalLevelSetting extends Setting {\r\n  fieldFilterStorageList\r\n  get FieldFilterStorageList(){\r\n    if (!this.fieldFilterStorageList){\r\n      this.fieldFilterStorageList = util.GetFieldFilterStorageList();\r\n    }\r\n    return this.fieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    util.SaveDatabase(this)\r\n\r\n    // Set TypicalSettingLevel\r\n    // if (pmData().CurrentProject){\r\n    //   pmData().CurrentProject.TypicalLevelSetting = this;\r\n    // }\r\n\r\n    // Check OldTypical Equal ?\r\n    var data = this.Data;\r\n    if (!data.OldTypical.IsEqual(data.Typical)){\r\n      data.OldTypical = typicalUtil.Clone(data.Typical);\r\n      report_statusUtil.Update();\r\n    }\r\n  }\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n    this.GetLevelStorageList = true;\r\n  }\r\n\r\n  OnGetLevelStorageList_Funcs = []\r\n\r\n  set GetLevelStorageList(v){\r\n    this.OnGetLevelStorageList_Funcs.forEach(x => x());\r\n  }\r\n}","export const elementfilter = \"elementfilter\";\r\nexport const massexport = \"massexport\";\r\nexport const massgroup = \"massgroup\";\r\nexport const level = \"level\"\r\nexport const typicallevel = \"typicallevel\";\r\nexport const massdetail = \"massdetail\";\r\nexport const masstype = \"masstype\";","import * as api from '../../../../../../util/apiUtil'\r\n//import * as dataUtil from './TypicalLevelSettingDataUtil'\r\nimport * as dataUtil from '../wrapper/TLS_Data_WrapperUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport { TypicalLevelSetting } from './TypicalLevelSetting';\r\nimport * as st from '../../base/SettingType'\r\nimport * as fieldUtil from '../../../mass/field/MassItemField'\r\nimport { message } from 'antd';\r\n\r\nexport const pmData = () => PMData.Instance;\r\n  \r\n// Instance\r\nexport const get = (data, project, phase) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.SettingType = data.settingType;\r\n\r\n  qI.Data = dataUtil.GetFromData(data.data, qI);\r\n\r\n  qI.Project = project;\r\n  qI.Phase = phase;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (project) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI.Name = 'thiết lập ...';\r\n  qI.Description = 'Mô tả thiết lập ...';\r\n  qI.SettingType = st.typicallevel\r\n\r\n  qI.Data = dataUtil.GetTest(qI);\r\n\r\n  qI.Project = project;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFromDb_Async = (project, phase, handle) => {\r\n  var apiData = {\r\n    projectId: project._id,\r\n    phaseId: phase?._id\r\n  }\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  const apiFunc = () => api.post(`${url}/get`, apiData)\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      var resData = data ? get(data, project, phase) : undefined;\r\n      var editData = resData ? resData : GetTest(project);\r\n      handle(resData, editData);\r\n    })\r\n}\r\n\r\n// Property\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}\r\n\r\n// Method\r\nexport const SaveDatabase = (q) => {\r\n  var _id = q._id;\r\n  var apiData = q.ApiData;\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  var isNew = _id ? true : false\r\n  const apiFunc = () => isNew ?\r\n    api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew) q._id = data._id\r\n      message.success('add setting successfully!');\r\n    })\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  var level_Dict = q.Project.Level_Dict;\r\n\r\n  const getLevelsFunc = (items) => {\r\n    return items.map(x => x.Name);\r\n  }\r\n\r\n  if (level_Dict.Items) {\r\n    return getLevelsFunc(level_Dict.Items);\r\n  } else {\r\n    level_Dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.LevelStorageList = getLevelsFunc(level_Dict.Items);\r\n    });\r\n  }\r\n}\r\n","import * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport Phase from './Phase';\r\nimport { url } from './Phase_Url'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport { message } from 'antd';\r\n\r\nimport { url as tls_url } from '../../setting/typicallevel/base/TypicalLevelSetting_Url'\r\nimport * as typlicalLevelSettingUtil from '../../setting/typicallevel/base/TypicalLevelSettingUtil'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  if (!data) return undefined;\r\n\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Phase();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}\r\n\r\n// Property\r\nexport const Handle_TypicalLevelSetting = (q) => {\r\n  if (q.IsGet_TypicalLevelSetting) return undefined;\r\n  q.IsGet_TypicalLevelSetting = true;\r\n\r\n  const setObj = (data) => {\r\n    q.TypicalLevelSetting = typlicalLevelSettingUtil.get(\r\n      data, pmData().CurrentProject, q);\r\n    q.IsGet_TypicalLevelSetting = false\r\n  }\r\n\r\n  var apiData = {\r\n    projectId: pmData().CurrentProject._id,\r\n    phaseId: q._id\r\n  }\r\n\r\n  api.post(`${tls_url}/get`, apiData)\r\n    .then(response => response.data).then(data => {\r\n      setObj(data)\r\n    })\r\n}\r\n\r\n// Method\r\nexport const Run = (q, mainHandle) => {\r\n  const finish = () => {\r\n    if (mainHandle) {\r\n      mainHandle();\r\n    }\r\n  }\r\n\r\n  var incre = genUtil.IncreFunc(4, finish);\r\n\r\n  const save_esversions = () => {\r\n    var apiData = {\r\n      phaseId: q._id,\r\n      projectId: pmData().CurrentProject._id\r\n    }\r\n\r\n    api.post(`${url}/save_exportsetversion`, apiData)\r\n      .then(response => response.data).then(data => {\r\n        incre();\r\n      })\r\n  }\r\n\r\n  const save_report = () => {\r\n    var apiData = {\r\n      phaseId: q._id,\r\n      projectId: pmData().CurrentProject._id\r\n    }\r\n\r\n    api.post(`${url}/save_report`, apiData)\r\n      .then(response => response.data).then(data => {\r\n        incre();\r\n      })\r\n  }\r\n\r\n  const save_levelsetting = () => {\r\n    var apiData = {\r\n      phaseId: q._id,\r\n      projectId: pmData().CurrentProject._id\r\n    }\r\n\r\n    api.post(`${url}/save_levelsetting`, apiData)\r\n      .then(response => response.data).then(data => {\r\n        incre();\r\n      })\r\n  }\r\n\r\n  const save_exportset_value = () => {\r\n    var apiData = {\r\n      phaseId: q._id,\r\n      projectId: pmData().CurrentProject._id\r\n    }\r\n\r\n    api.post(`${url}/save_exportset_value`, apiData)\r\n      .then(response => response.data).then(data => {\r\n        incre();\r\n      })\r\n  }\r\n\r\n  q.Save(() => {\r\n    save_esversions();\r\n    save_report();\r\n    save_levelsetting();\r\n    save_exportset_value();\r\n  });\r\n}","export const url = 'https://api.bimdev.vn/api/hbs/tl'","import * as itemUtil from '../item/PhaseUtil'\r\nimport * as util from './Phase_DictUtil'\r\nimport Project from '../../project/base/Project'\r\n\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class Phase_Dict {\r\n  // Dict\r\n  Dict\r\n\r\n  get Project() {\r\n    return this.Dict instanceof Project ? \r\n      this.Dict : undefined\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items;\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = itemUtil.get(this);\r\n    item.Is_FirstCreated = true;\r\n\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  GetItem = (phaseId, handle) => {\r\n    const setObj = (data) => {\r\n      var list = data;\r\n      var item = genUtil.SingleFilter(list, x => x._id === phaseId);\r\n      handle(item);\r\n    }\r\n\r\n    var host = this;\r\n    if (host.Items){\r\n      setObj(host.Items)\r\n    } else {\r\n      genUtil.Add_2(host.OnSet_Items_Func, () => setObj(host.Items));\r\n    }\r\n  }\r\n}","import { Phase_Dict } from \"./Phase_Dict\"\r\nimport * as itemUtil from '../item/PhaseUtil'\r\nimport { PMData } from \"../../../single/model/PMData\";\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Phase_Dict();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => itemUtil.GetFromDb(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var apiData = {\r\n    projectId : q.Project ? q.Project._id : pmData().CurrentProject._id\r\n  }\r\n\r\n  itemUtil.GetData(apiData, (data) => {\r\n    setObj(data)\r\n  })\r\n}","import { PMData } from \"../../../single/model/PMData\"\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as util from './LevelDictUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class LevelDict {\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      util.Handle_Items(this)\r\n    } return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  OnSet_Undefined_Item_Func = []\r\n\r\n  undefined_Item;\r\n  get Undefined_Item(){\r\n    if (!this.undefined_Item){\r\n      util.Handle_Undefined_Item(this)\r\n    } return this.undefined_Item\r\n  } set Undefined_Item(v){\r\n    this.undefined_Item = v;\r\n\r\n    genUtil.Handle(this.OnSet_Undefined_Item_Func,\r\n      (v) => this.OnSet_Undefined_Item_Func = v)\r\n  }\r\n\r\n  GetLevel = (name, handle) => {\r\n    util.GetLevel(this, name, handle)\r\n  }\r\n}","export class LevelItem {\r\n  Name\r\n\r\n  get name(){\r\n    return this.Name;\r\n  }\r\n\r\n  Elevation\r\n}","export const url = \"https://api.bimdev.vn/api/hbl\"","import { LevelItem } from \"./LevelItem\"\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport {url} from './Level_Url'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new LevelItem();\r\n\r\n  qI._id = data._id\r\n  qI.Name = data.name;\r\n  qI.Elevation = data.elevation\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n  }","import { LevelDict } from \"./LevelDict\"\r\nimport * as itemUtil from '../base/LevelItemUtil'\r\nimport { baseurl, url } from './LevelDict_Url'\r\nimport { url as itemUrl } from '../base/Level_Url'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const GetDefault = (project, handle) => {\r\n  // lấy từ LevelDict database\r\n  // GetApi(project._id, (data) => {\r\n  //   var qI = GetFromDb(data, project);\r\n  //   handle(qI);\r\n  // });\r\n\r\n  // Lấy từ Level database\r\n  var qI = get(project);\r\n  handle(qI);\r\n}\r\n\r\nexport const GetFromDb = (data, project) => {\r\n  var qI = get(project);\r\n\r\n  var items = data.data.items;\r\n  qI.Items = items ? items.map(x => itemUtil.GetFromDb(x, qI)) : []\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (project) => {\r\n  var qI = new LevelDict();\r\n  qI.Project = project;\r\n  return qI;\r\n}\r\n\r\n// Api\r\nexport const GetApi = (projectId, handle) => {\r\n  var data = {\r\n    projectId\r\n  }\r\n\r\n  var url = `${baseurl()}/get`;\r\n  api.post(url, data).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => itemUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var apiData = {\r\n    projectId: q.Project._id\r\n  }\r\n\r\n  itemUtil.GetData(apiData, (data) => setObj(data));\r\n}\r\n\r\nexport const Handle_Undefined_Item = (q) => {\r\n  if (q.IsGet_Undefined_Item) return undefined;\r\n  q.IsGet_Undefined_Item = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Undefined_Item = itemUtil.GetFromDb(data, q);\r\n    q.IsGet_Undefined_Item = false;\r\n  }\r\n\r\n  var apiData = {\r\n    type: 'undefined'\r\n  }\r\n\r\n  const apiFunc = () => api.post(`${itemUrl}/get`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      setObj(data)\r\n    })\r\n}\r\n\r\n// Method\r\nexport const GetLevel = (q, name, handle) => {\r\n  if (!name || name.length === 0) {\r\n    const getObj = () => {\r\n      handle(q.Undefined_Item)\r\n    }\r\n\r\n    if (q.Undefined_Item){\r\n      getObj();\r\n    } else {\r\n      genUtil.Add_2(q.OnSet_Undefined_Item_Func,\r\n        getObj);\r\n    }\r\n\r\n  } else {\r\n    const getObj = () => {\r\n      var list = q.Items;\r\n      var item = genUtil.SingleFilter(list, x => x.Name === name);\r\n      if (item) {\r\n        handle(item)\r\n      } else {\r\n        var apiData = {\r\n          projectId: q.Project._id,\r\n          name\r\n        }\r\n\r\n        const func = (data) => {\r\n          item = itemUtil.GetFromDb(data, q);\r\n          list.push(item);\r\n          handle(item);\r\n        }\r\n\r\n        const apiFunc = () => api.post(`${itemUrl}/add`, apiData);\r\n\r\n        apiFunc().then(response => response.data)\r\n          .then(data => {\r\n            func(data)\r\n          })\r\n      }\r\n    }\r\n\r\n    if (q.Items){\r\n      getObj();\r\n    } else {\r\n      genUtil.Add_2(q.OnSet_Items_Func,\r\n        getObj);\r\n    }\r\n  }\r\n}","export const url = 'https://api.bimdev.vn/api/hbs/lv'","import Setting from \"../../base/Setting\";\r\nimport { url } from './LevelSetting_Url'\r\nimport * as st from '../../base/SettingType'\r\n\r\nexport class LevelSetting extends Setting {\r\n  SettingType = st.level\r\n\r\n  Url = url\r\n}","export const url = \"https://api.bimdev.vn/api/hbes\"","export const model = 'model'\r\nexport const input = 'input'","import { message } from 'antd';\r\nimport { url } from './ExportSet_Url'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ExportSetUtil'\r\nimport * as rf from './ExportSet_RetrieveFrom'\r\nimport * as report_statusUtil from '../../../mass/report/status/ReportStatusUtil'\r\n\r\nexport class ExportSet {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Data\r\n  Name\r\n\r\n  Description\r\n\r\n  massTypeId\r\n\r\n  RetrieveFrom\r\n\r\n  mass_Multiply\r\n  get Mass_Multiply(){\r\n    if (!this.mass_Multiply){\r\n      this.mass_Multiply = 1;\r\n    } return this.mass_Multiply\r\n  } set Mass_Multiply(v){\r\n    this.mass_Multiply = v;\r\n  }\r\n\r\n  // Project\r\n  get Project(){\r\n    return this.Dict.Project;\r\n  }\r\n\r\n  phaseDict\r\n  get PhaseDict(){\r\n    if (!this.phaseDict){\r\n      this.phaseDict = util.GetPhaseDict(this);\r\n    } return this.phaseDict;\r\n  }\r\n\r\n  get ApiData() {\r\n    var dict = this.Dict;\r\n\r\n    var obj = {\r\n      _id: this._id,\r\n      projectId: dict.Project?._id,\r\n      name: this.Name,\r\n      description: this.Description,\r\n      // massType : this.MassType,\r\n      massTypeId : this.massTypeId,\r\n      retrieveFrom : this.RetrieveFrom,\r\n      mass_Multiply : this.Mass_Multiply\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  Save = (handle) => {\r\n    this.SaveDatabase(false, handle);\r\n\r\n    if (this.Old_MassMultiply !== this.Mass_Multiply){\r\n      this.Old_MassMultiply = this.Mass_Multiply\r\n      report_statusUtil.Update();\r\n    }\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage){\r\n        message.success('delete successflly!');\r\n      }\r\n      if (handle){\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n\r\n  // Version\r\n  NewVersion = (handle) => {\r\n    return util.NewVersion(this, handle)\r\n  }\r\n\r\n  // Save MassItems\r\n  SaveMassItems = () => {\r\n    util.SaveMassItems(this)\r\n  }\r\n  \r\n  // MassItem\r\n  OnSet_MassItems_Func = []\r\n\r\n  massItems\r\n  get MassItems(){\r\n    if (!this.massItems){\r\n      util.Handle_MassItems(this)\r\n    } return this.massItems\r\n  } set MassItems(v){\r\n    this.massItems = v;\r\n\r\n    genUtil.Handle(this.OnSet_MassItems_Func,\r\n      (v) => this.OnSet_MassItems_Func = v);\r\n  }\r\n}","import { PMData } from '../../../../single/model/PMData';\r\nimport { url } from '../../item/base/MassItemUrl'\r\nimport * as api from '../../../../../../util/apiUtil'\r\n\r\n// Method\r\nexport const GetData = (apiData, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbmr/list-210921\";\r\n\r\n  //var start = window.performance.now();\r\n  api.post(url, apiData, undefined, 2000000)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      handle(data)\r\n    });\r\n}","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\n\r\nexport class Item {\r\n  Dict\r\n\r\n  get exportSetId(){\r\n    return this.Dict.exportSetId\r\n  }\r\n  \r\n  phaseId\r\n\r\n  // Mass Multiply\r\n  OnSet_Mass_Multiply_Func = []\r\n\r\n  mass_Multiply\r\n  get Mass_Multiply(){\r\n    if (!this.mass_Multiply){\r\n      util.Handle_Mass_Multiply(this)\r\n    } return this.mass_Multiply\r\n  } set Mass_Multiply(v){\r\n    this.mass_Multiply = v;\r\n    genUtil.Handle(this.OnSet_Mass_Multiply_Func,\r\n      (v) => this.OnSet_Mass_Multiply_Func = v)\r\n  }\r\n}","import {Item} from './Item'\r\nimport {url} from './Item_Url'\r\n\r\nimport * as api from '../../../../../../../util/apiUtil'\r\n\r\n// instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id\r\n  qI.phaseId = data.phaseIds[0]\r\n  qI.Mass_Multiply = data.mass_Multiply\r\n\r\n  return qI\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n  \r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}\r\n\r\n// property\r\nexport const Handle_Mass_Multiply = (q) => {\r\n  if (q.IsGet_Mass_Multiply) return undefined;\r\n  q.IsGet_Mass_Multiply = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Mass_Multiply = data.mass_Multiply;\r\n    q.IsGet_Mass_Multiply = false\r\n  }\r\n\r\n  var apiData = {\r\n    exportSetId : q.exportSetId,\r\n    phaseId : q.phaseId\r\n  }\r\n\r\n  GetData(apiData, (data) => {\r\n    setObj(data[0])\r\n  })\r\n}","export const url = \"https://api.bimdev.vn/api/hb_exportset_phase\"","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as itemUtil from '../item/ItemUtil'\r\n\r\nexport class Dict {\r\n  Dict\r\n\r\n  get ExportSet() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get exportSetId() {\r\n    return this.ExportSet._id;\r\n  }\r\n\r\n  Items = []\r\n\r\n  GetItem = (phaseId, handle) => {\r\n    var list = this.Items\r\n    var item = genUtil.SingleFilter(list, x => x.phaseId === phaseId);\r\n    if (!item) {\r\n      item = itemUtil.get(this);\r\n      item.phaseId = phaseId;\r\n\r\n      list.push(item);\r\n    }\r\n\r\n    handle(item);\r\n  }\r\n}","import * as api from '../../../../../../util/apiUtil'\r\nimport { url } from './ExportSet_Url'\r\nimport { url as versionUrl } from './ExportSetVersion_Url'\r\nimport { url as massUrl } from '../../../mass/item/base/MassItemUrl'\r\nimport { ExportSet } from './ExportSet'\r\nimport { message } from 'antd'\r\nimport * as resultUtil from '../../../mass/result/data/DataUtil'\r\n\r\nimport * as phaseDictUtil from '../phase/dict/DictUtil'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new ExportSet();\r\n\r\n  qI._id = data._id\r\n  qI.projectId = data.projectId\r\n  qI.Name = data.name;\r\n  qI.Description = data.description\r\n\r\n  // qI.MassType = data.massType\r\n  qI.massTypeId = data.massTypeId\r\n\r\n  qI.Dict = dict;\r\n  qI.RetrieveFrom = data.retrieveFrom ? data.retrieveFrom : 'model'\r\n  qI.Old_MassMultiply = qI.Mass_Multiply = data.mass_Multiply\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new ExportSet();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_MassItems = (q) => {\r\n  if (q.IsGet_MassItems) return undefined;\r\n  q.IsGet_MassItems = true;\r\n\r\n  const setObj = (data) => {\r\n    q.MassItems = data;\r\n    q.IsGet_MassItems = false\r\n  }\r\n\r\n  if (q._id) {\r\n    var apiData = {\r\n      otherData: {\r\n        exportSetId: q._id\r\n      }\r\n    }\r\n\r\n    resultUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    });\r\n  } else {\r\n    setObj();\r\n  }\r\n}\r\n\r\nexport const GetPhaseDict = (q) => {\r\n  return phaseDictUtil.get(q);\r\n}\r\n\r\n// Method\r\nexport const NewVersion = (q, handle) => {\r\n  var apiData = {\r\n    exportSetId: q._id\r\n  }\r\n\r\n  const apiFunc = () => api.post(`${versionUrl}/add`, apiData);\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}\r\n\r\nexport const SaveMassItems = (q) => {\r\n  var data = q.MassItems;\r\n\r\n  const addDataFunc = (versionId) => {\r\n    var apiData = {\r\n      projectId: q.Project._id,\r\n      exportSetId: q._id,\r\n      exportSetVersionId: versionId,\r\n      items: data.map(x => x.ApiData_ForInput)\r\n    }\r\n\r\n    const apiFunc = () => api.post(`${massUrl}/addlist`, apiData);\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        message.success('import data successfully!')\r\n      })\r\n  }\r\n\r\n  q.NewVersion((v) => {\r\n    addDataFunc(v._id);\r\n  })\r\n}\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import {Dict} from './Dict'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","export const url = \"https://api.bimdev.vn/api/hbesv\"","export const url = \"https://api.bimdev.vn/api/hbm\"","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ExportSet_DictUtil'\r\nimport * as iUtil from '../../item/base/ExportSetUtil'\r\nimport * as erf from '../../item/base/ExportSet_RetrieveFrom'\r\n\r\nexport class ExportSet_Dict {\r\n  _id\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Project\r\n  Project\r\n\r\n  UseType\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  // AddItem = (v) => {\r\n  //   this.Items.push(v);\r\n  //   if (this.OnAddItem){\r\n  //     this.OnAddItem(v)\r\n  //   }\r\n  // }\r\n\r\n  AddItem = (retrieveFrom) => {\r\n    var item = iUtil.get(this);\r\n    item.Name = 'Tên bảng'\r\n    item.RetrieveFrom = retrieveFrom\r\n    item.SaveDatabase();\r\n    \r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  GetItem = (exportSetId, handle) => {\r\n    const setObj = (data) => {\r\n      var list = data;\r\n      var item = genUtil.SingleFilter(list, x => x._id === exportSetId);\r\n      handle(item);\r\n    }\r\n\r\n    var host = this;\r\n    if (host.Items){\r\n      setObj(host.Items)\r\n    } else {\r\n      genUtil.Add_2(host.OnSet_Items_Func, () => setObj(host.Items));\r\n    }\r\n  }\r\n\r\n  Get_AddItem = (data, handle) => {\r\n    const setObj = (list) => {\r\n      var item = genUtil.SingleFilter(list, x => x._id === data._id);\r\n\r\n      if (!item){\r\n        item = iUtil.GetFromDb(data, this);\r\n        list.push(item);\r\n      }\r\n      handle(item);\r\n    }\r\n\r\n    var host = this;\r\n    if (host.Items){\r\n      setObj(host.Items)\r\n    } else {\r\n      genUtil.Add_2(host.OnSet_Items_Func, () => setObj(host.Items));\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n}","import { ExportSet_Dict } from \"./ExportSet_Dict\"\r\nimport * as iUtil from '../../item/base/ExportSetUtil'\r\nimport Project from \"../../../project/base/Project\";\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new ExportSet_Dict();\r\n\r\n  if (dict instanceof Project) {\r\n    qI.Project = dict;\r\n  }\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n      projectId: q.Project?._id,\r\n      // retrieveFrom : rf.input\r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n\r\n// Method\r\n","export const url = \"https://api.bimdev.vn/api/hbp\";","import * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport Project from './Project';\r\nimport * as levelDictUtil from '../../level/dict/LevelDictUtil'\r\nimport * as levelTypicalUtil from '../../setting/typicallevel/base/TypicalLevelSettingUtil'\r\nimport * as levelUtil from '../../setting/level/base/LevelSettingUtil'\r\nimport * as exportSetDictUtil from '../../exportset/dict/base/ExportSet_DictUtil'\r\nimport { url } from './Project_Url'\r\nimport { url as pc_url } from './ProjectCommand_Url'\r\nimport { PMData } from '../../../single/model/PMData';\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  if (!data) return undefined;\r\n\r\n  // var qI = new Project();\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Code = data.code;\r\n  qI.Fortest = data.fortest\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Project();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// export const get = (q, dict) => {\r\n//   if (!q) return undefined;\r\n\r\n//   var qI = new Project();\r\n\r\n//   qI._id = q._id;\r\n//   qI.Name = q.name;\r\n//   qI.Code = q.code;\r\n//   qI.Dict = dict;\r\n\r\n//   return qI;\r\n// }\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbp/list\";\r\n  api.post(url, { }).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => GetFromDb(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getById = (_id, handle) => {\r\n  if (!_id) return undefined;\r\n  var url = `https://api.bimdev.vn/api/hbp/get?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = GetFromDb(data);\r\n      if (handle) {\r\n        handle(item);\r\n      }\r\n    });\r\n}\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}\r\n\r\n// Property\r\nexport const GetExportSet_Dict = (q) => {\r\n  return exportSetDictUtil.get(q)\r\n}\r\n\r\n// Level\r\nexport const Handle_LevelDict = (q) => {\r\n  if (q.IsGet_LevelDict) return undefined;\r\n  q.IsGet_LevelDict = true;\r\n\r\n  // const setLevelDict = (data) =>\r\n  //   q.LevelDict = levelDictUtil.GetFromDb(data, q);\r\n\r\n  // levelDictUtil.GetApi(q._id, setLevelDict);\r\n\r\n  levelDictUtil.GetDefault(q, (data) => {\r\n    q.LevelDict = data;\r\n    q.IsGet_LevelDict = false;\r\n  })\r\n}\r\n\r\n// LevelSetting\r\nexport const Handle_LevelSetting = (q) => {\r\n  if (q.IsGet_LevelSetting) return undefined\r\n  q.IsGet_LevelSetting = true;\r\n\r\n  q.LevelSetting = levelUtil.GetDefault(q);\r\n}\r\n\r\n// TypicalLevelSetting\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  return levelTypicalUtil.GetTest(q);\r\n}\r\n\r\n// Commands\r\nexport const Handle_Commands = (q) => {\r\n  if (q.IsGet_Commands) return undefined;\r\n  q.IsGet_Commands = true;\r\n\r\n  const setObj = (data, type) => {\r\n    if (type === 'invalid' && q.Commands){\r\n      return;\r\n    }\r\n\r\n    q.Commands = data && data.length !== 0 ? data[0].commands : []\r\n    q.IsGet_Commands = false;\r\n  }\r\n\r\n  var host = pmData().UserDict.LoginUser;\r\n  if (!host) {\r\n    setObj(undefined, 'invalid')\r\n  } else {\r\n    var apiData = {\r\n      userId: host._id,\r\n      projectId: q._id\r\n    }\r\n\r\n    const apiFunc = () => api.post(`${pc_url}/list`, apiData);\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        setObj(data)\r\n      })\r\n  }\r\n}\r\n\r\n","import * as api from '../../../../../../util/apiUtil'\r\nimport * as dataUtil from '../data/LevelSettingDataUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport { LevelSetting } from './LevelSetting';\r\nimport { message } from 'antd';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const GetFromDb = (data, project, phase) => {\r\n  var qI = new LevelSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.Data = dataUtil.GetFromDb(data.data, qI);\r\n  qI.Project = project;\r\n  qI.Phase = phase;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (project) => {\r\n  var qI = new LevelSetting();\r\n\r\n  qI.Name = 'thiết lập level';\r\n  qI.Description = 'Mô tả thiết lập';\r\n  qI.Data = dataUtil.GetDefault(qI);\r\n  qI.Project = project;\r\n\r\n  return qI;\r\n}","export const url = \"https://api.bimdev.vn/api/hb_upc\";","import * as phaseDictUtil from '../../phase/dict/Phase_DictUtil'\r\nimport * as util from './ProjectUtil'\r\nimport * as typicalLevelUtil from '../../setting/typicallevel/base/TypicalLevelSettingUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport {url} from './Project_Url'\r\nimport { message } from 'antd'\r\n\r\nexport default class Project {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Data\r\n  Name\r\n\r\n  Code\r\n\r\n  Fortest\r\n\r\n  // Phase\r\n  phase_Dict\r\n  get Phase_Dict() {\r\n    if (!this.phase_Dict) {\r\n      this.phase_Dict = phaseDictUtil.get(this);\r\n    }\r\n    return this.phase_Dict;\r\n  }\r\n\r\n  exportSet_Dict\r\n  get ExportSet_Dict(){\r\n    if (!this.exportSet_Dict){\r\n      this.exportSet_Dict = util.GetExportSet_Dict(this)\r\n    } return this.exportSet_Dict;\r\n  }\r\n\r\n  // Level\r\n  // New Version\r\n  OnSet_LevelDict_Func_Dict = []\r\n\r\n  levelDict\r\n  get LevelDict(){\r\n    if (!this.levelDict){\r\n      util.Handle_LevelDict(this);\r\n    }\r\n    return this.levelDict;\r\n  } set LevelDict(v){\r\n    this.levelDict = v;\r\n\r\n    genUtil.Handle(\r\n      this.OnSet_LevelDict_Func_Dict,\r\n      (v) => this.OnSet_LevelDict_Func_Dict = v)\r\n  }\r\n\r\n  // LevelSetting\r\n  OnSet_LevelSetting_Func_Dict = []\r\n\r\n  levelSetting\r\n  get LevelSetting() {\r\n    if (!this.levelSetting) {\r\n      util.Handle_LevelSetting(this)\r\n    }\r\n    return this.levelSetting\r\n  } set LevelSetting(v) {\r\n    this.levelSetting = v;\r\n\r\n    genUtil.Handle(\r\n      this.OnSet_LevelSetting_Func_Dict,\r\n      (v) => this.OnSet_LevelSetting_Func_Dict = v)\r\n  }\r\n\r\n  // TypicalLevelSetting\r\n  OnGetTypicalLevelSetting_Func_Dict = []\r\n\r\n  getTypicalLevelSetting\r\n  get GetTypicalLevelSetting(){\r\n    return this.getTypicalLevelSetting\r\n  }\r\n  set GetTypicalLevelSetting(v) {\r\n    this.getTypicalLevelSetting = v;\r\n    genUtil.Handle(this.OnGetTypicalLevelSetting_Func_Dict,\r\n      (v) => this.OnGetTypicalLevelSetting_Func_Dict = v)\r\n  }\r\n\r\n  IsOnGetDb_Async\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this, null,\r\n          (resData, editData) => {\r\n            this.TypicalLevelSetting = resData;\r\n            this.TypicalLevelSetting_ForEdit = editData;\r\n            this.GetTypicalLevelSetting = true\r\n          })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = this.TypicalLevelSetting;\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  url\r\n  get Url() {\r\n    if (!this.url) {\r\n      var isHash = true;\r\n      var obj = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/project`;\r\n      obj = `${obj}/${this._id}`;\r\n\r\n      this.url = obj;\r\n    }\r\n    return this.url;\r\n  }\r\n\r\n  // Commands\r\n  OnSet_Commands_Func = []\r\n\r\n  Reset_Commands = () => {\r\n    this.Commands = undefined;\r\n    util.Handle_Commands(this)\r\n  }\r\n\r\n  commands\r\n  get Commands(){\r\n    if (!this.commands){\r\n      util.Handle_Commands(this)\r\n    } return this.commands;\r\n  } set Commands(v){\r\n    this.commands = v\r\n\r\n    genUtil.Handle(this.OnSet_Commands_Func,\r\n      (v) => this.OnSet_Commands_Func = v)\r\n  }\r\n\r\n  // ApiData\r\n  get ApiData() {\r\n    var obj = {\r\n      _id: this._id,\r\n      name : this.Name,\r\n      code : this.Code,\r\n      fortest : this.Fortest ? this.Fortest : undefined,\r\n      order: this.Index,\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  // Save\r\n  Save = (handle) => {\r\n    this.SaveDatabase(false, handle);\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  // Delete\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage){\r\n        message.success('delete successflly!');\r\n      }\r\n      if (handle){\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './MassColumnUtil'\r\n\r\nexport default class MassColumn {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id){\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Table.Columns.indexOf(this);\r\n  }\r\n\r\n  Cells = []\r\n\r\n  key\r\n\r\n  field\r\n  get Field(){\r\n    if (!this.field){\r\n      this.field = util.GetField(this)\r\n    } return this.field;\r\n  }\r\n\r\n  // project\r\n  OnSet_Project_Func = []\r\n\r\n  project\r\n  get Project() {\r\n    if (!this.project){\r\n      util.Handle_Project(this)\r\n    } return this.project;\r\n  } set Project(v) {\r\n    this.project = v;\r\n    genUtil.Handle(this.OnSet_Project_Func,\r\n      (v) => this.OnSet_Project_Func = v)\r\n  }\r\n\r\n  // phase\r\n  OnSet_Phase_Func = []\r\n\r\n  phase\r\n  get Phase(){\r\n    if (!this.phase){\r\n      util.Handle_Phase(this)\r\n    } return this.phase;\r\n  } set Phase(v){\r\n    this.phase = v;\r\n    genUtil.Handle(this.OnSet_Phase_Func,\r\n      (v) => this.OnSet_Phase_Func = v)\r\n  }\r\n\r\n  // name\r\n  OnSet_Name_Func = []\r\n\r\n  name = undefined\r\n  get Name(){\r\n    if (!this.name){\r\n      util.Handle_Name(this)\r\n    } return this.name;\r\n  } set Name(v){\r\n    this.name = v;\r\n    genUtil.Handle(this.OnSet_Name_Func,\r\n      (v) => this.OnSet_Name_Func = v)\r\n  }\r\n\r\n  queryData\r\n  get QueryData(){\r\n    if (!this.queryData){\r\n      this.queryData = util.GetQueryData(this)\r\n    } return this.queryData\r\n  }\r\n\r\n  // massitem handle\r\n  massItem_Handle\r\n  get MassItem_Handle(){\r\n    if (!this.massItem_Handle){\r\n      this.massItem_Handle = util.GetMassItem_Handle(this);\r\n    } return this.massItem_Handle\r\n  }\r\n}","import * as mif from '../../../../field/MassItemField'\r\n\r\nexport const GetPropertyName_ForApi = (field) => {\r\n  switch (field) {\r\n    case mif.MassType:\r\n      return 'massType'\r\n    case mif.Project:\r\n      return 'project'\r\n    case mif.Phase:\r\n      return 'phase'\r\n    default:\r\n      return field;\r\n  }\r\n}\r\n\r\nexport const GetValueFrom = (field) => {\r\n  switch (field) {\r\n    case mif.MassType:\r\n      return 'MassType_Obj'\r\n    case mif.workItem:\r\n      return 'WorkItem_Obj'\r\n    case mif.level:\r\n      return 'Level_Obj'\r\n    default:\r\n      return undefined;\r\n  }\r\n}","\r\nexport class Item {\r\n  field\r\n\r\n  valueId\r\n\r\n  get ApiData(){\r\n    return {\r\n      field: this.field,\r\n      valueId: this.valueId \r\n    }\r\n  }\r\n}","import { Item } from './Item'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI.valueId = data.valueId;\r\n  qI.field = data.field;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import { Query } from \"./Query\"\r\nimport * as qt from './QueryTypeUtil'\r\nimport * as itemUtil from '../item/ItemUtil'\r\n\r\n// Instance\r\n// export const get = (dict) => {\r\n//   var qI = new Query();\r\n//   qI.Dict = dict;\r\n//   return qI;\r\n// }\r\n\r\n// Property\r\n// export const GetItems = (q) => {\r\n//   var qI = itemUtil.get(q);\r\n//   qI.field = q.Field;\r\n//   qI.valueId = q.valueId;\r\n\r\n//   return [qI];\r\n// }\r\n\r\n// Method\r\n// Áp dụng cho cả Query Row và Column\r\nexport const AddQuery_Base = (q, obj, type) => {\r\n  const itemFunc = (item) => {\r\n    var val = item.valueId;\r\n    if (!val) return;\r\n\r\n    const func = (propname) => {\r\n      if (type === 'object') {\r\n        obj[propname] = val;\r\n      }\r\n      else {\r\n        // array\r\n        propname = `${propname}s`\r\n        if (!obj[propname]) {\r\n          obj[propname] = []\r\n        }\r\n        obj[propname].push(val);\r\n      }\r\n    }\r\n\r\n    const getPropName = () => {\r\n      var propertyName = qt.GetPropertyName_ForApi(item.field)\r\n\r\n      propertyName = `${propertyName}Id`\r\n      return propertyName;\r\n    }\r\n\r\n    var propertyName = getPropName();\r\n\r\n    if (propertyName) {\r\n      func(propertyName)\r\n      return true;\r\n    } else {\r\n      throw 500;\r\n    }\r\n  }\r\n\r\n  q.Items.forEach(x => {\r\n    itemFunc(x);\r\n  })\r\n}","import * as mif from '../../../field/MassItemField'\r\nimport * as baseUtil from '../../row/query/base/QueryUtil'\r\nimport * as util from './QueryUtil'\r\n\r\nexport class Query {\r\n  Dict\r\n\r\n  get Column() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get Value(){\r\n    return this.Column.Data;\r\n  }\r\n\r\n  get valueId(){\r\n    return this.Value._id;\r\n  }\r\n\r\n  get Field() {\r\n    return this.Column.Field\r\n  }\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = util.GetItems(this)\r\n    } return this.items;\r\n  }\r\n\r\n  AddQuery = (obj, type='object') => {\r\n    baseUtil.AddQuery_Base(this,obj, type);\r\n  }\r\n\r\n  get ApiData(){\r\n    var obj = {};\r\n    this.AddQuery(obj);\r\n    return obj;\r\n  }\r\n}","import { Query } from \"./Query\"\r\nimport * as itemUtil from '../../row/query/item/ItemUtil'\r\nimport * as mif from '../../../field/MassItemField'\r\nimport { PMData } from '../../../../../single/model/PMData'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Query();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  var {key, Field }= q.Column;\r\n\r\n  switch (Field) {\r\n    case mif.Project:\r\n      var qI = itemUtil.get(q);\r\n      qI.field = mif.Project;\r\n      qI.valueId = key.value;\r\n\r\n      return [qI]\r\n    case mif.Phase:\r\n      var projectItem = itemUtil.get(q);\r\n      projectItem.field = mif.Project;\r\n      projectItem.valueId = pmData().CurrentProject._id;\r\n\r\n      var phaseItem = itemUtil.get(q);\r\n      phaseItem.field = mif.Phase;\r\n      phaseItem.valueId = key.value;\r\n\r\n      return [projectItem, phaseItem]\r\n  }\r\n}","import Project from \"../../../../project/base/Project\";\r\nimport MassColumn from \"./MassColumn\"\r\nimport * as mif from '../../../field/MassItemField'\r\nimport * as queryUtil from '../query/QueryUtil'\r\nimport { PMData } from \"../../../../../single/model/PMData\";\r\n\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\n// export const get = (q, dict, data) => {\r\n//   var qI = new MassColumn();\r\n\r\n//   qI.Name = q;\r\n//   qI.Dict = dict;\r\n//   qI.Data = data;\r\n\r\n//   return qI;\r\n// }\r\n\r\n// Property\r\nexport const Handle_Name = (q) => {\r\n  if (q.IsGet_Name) return undefined;\r\n  q.IsGet_Name = true;\r\n\r\n  var key = q.key\r\n\r\n  const setObj = (data) => {\r\n    q.Name = genUtil.SingleFilter(data, x => x._id === key.value).Name;\r\n    q.IsGet_Name = false;\r\n  }\r\n\r\n  var host\r\n  switch (key.field) {\r\n    case 'project':\r\n      host = pmData().Project_Dict;\r\n      break;\r\n    case 'phase':\r\n      host = pmData().CurrentProject.Phase_Dict\r\n      break;\r\n  }\r\n\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(host.OnSet_Items_Func,\r\n      () => setObj(host.Items))\r\n  }\r\n}\r\n\r\nexport const GetQueryData = (q) => {\r\n  return queryUtil.get(q);\r\n}\r\n\r\nexport const GetField = (q) => {\r\n  return q.key.field === 'project' ? mif.Project : mif.Phase;\r\n}\r\n\r\nexport const Handle_Project = (q) => {\r\n  if (q.IsGet_Project) return undefined\r\n  q.IsGet_Project = true\r\n\r\n  const setObj = (data) => {\r\n    q.Project = data\r\n    q.IsGet_Project = false\r\n  }\r\n\r\n  switch (q.Field) {\r\n    case mif.Project:\r\n      const setObj2 = (list) => {\r\n        var item = genUtil.SingleFilter(list, x => x._id === q.key.value)\r\n        setObj(item);\r\n      }\r\n\r\n      var host = pmData().Project_Dict\r\n      if (host.Items) {\r\n        setObj2(host.Items)\r\n      } else {\r\n        genUtil.Add_2(host.OnSet_Items_Func, () => setObj2(host.Items))\r\n      }\r\n      break;\r\n    case mif.Phase:\r\n      setObj(pmData().CurrentProject)\r\n      break;\r\n  }\r\n}\r\n\r\nexport const Handle_Phase = (q) => {\r\n  if (q.IsGet_Phase) return undefined\r\n  q.IsGet_Phase = true\r\n\r\n  const setObj = (data) => {\r\n    q.Phase = data\r\n    q.IsGet_Phase = false\r\n  }\r\n\r\n  switch (q.Field) {\r\n    case mif.Phase:\r\n      pmData().CurrentProject.Phase_Dict.GetItem(q.key.value, setObj)\r\n      break;\r\n  }\r\n}\r\n\r\nexport const GetMassItem_Handle = (q) => {\r\n  switch (q.Field) {\r\n    case mif.Project:\r\n      return (massitem) => massitem.Project = q.Project\r\n    case mif.Phase:\r\n      return (massitem) => massitem.Phase = q.Phase\r\n  }\r\n}","export const _default = \"default\";\r\nexport const edit = \"edit\";","import { MultiSelectVM } from \"./MultiSelectVM\";\r\n\r\nexport const get = (items, initialItems) => {\r\n  var qI = new MultiSelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItems = initialItems;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport MultiSelectView from './MultiSelectView';\r\nimport * as util from './MultiSelectVMUtil'\r\n\r\nexport class MultiSelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      selectedIndexs: observable,\r\n      open: observable,\r\n      canOpen: observable,\r\n      disabled : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  initialItems;\r\n  get InitialItems() {\r\n    return this.initialItems;\r\n  }\r\n  set InitialItems(v) {\r\n    this.IsSet_InitialItem = true;\r\n    this.initialItems = v;\r\n    this.InitialIndexs = this.GetInitialIndexs();\r\n    this.SelectedIndexs = this.InitialIndexs;\r\n  }\r\n\r\n  initialIndexs;\r\n  get InitialIndexs() {\r\n    if (!this.initialIndexs) {\r\n      this.initialIndexs = this.GetInitialIndexs();\r\n    }\r\n    return this.initialIndexs;\r\n  }\r\n  set InitialIndexs(v) {\r\n    this.initialIndexs = v;\r\n  }\r\n\r\n  GetInitialIndexs = () => {\r\n    var initialItems = this.InitialItems;\r\n    if (!initialItems) return [];\r\n    return initialItems.map(x => this.Items.indexOf(x)).filter(x => x !== -1);\r\n  }\r\n\r\n  selectedIndexs = []\r\n  get SelectedIndexs() {\r\n    return this.selectedIndexs;\r\n  }\r\n  set SelectedIndexs(v) {\r\n    this.selectedIndexs = v;\r\n    this.SelectedItems = this.GetSelectedItems();\r\n  }\r\n\r\n  selectedItems\r\n  get SelectedItems() {\r\n    if (!this.selectedItems) {\r\n      this.selectedItems = this.GetSelectedItems();\r\n    }\r\n    return this.selectedItems;\r\n  }\r\n  set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n\r\n    if (this.IsSet_InitialItem) {\r\n      this.IsSet_InitialItem = false\r\n    } else if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  SetValue = (v) => {\r\n    this.InitialItems = this.SelectedItems = v;\r\n  }\r\n\r\n  GetSelectedItems = () => {\r\n    return this.SelectedIndexs.map(x => this.Items[x]);\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder() {\r\n    if (!this.placeholder) {\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender) {\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender(v) {\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open() {\r\n    return this.open;\r\n  }\r\n  set Open(v) {\r\n    this.open = v;\r\n    if (this.OnSetOpen) {\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen() {\r\n    return this.canOpen;\r\n  } set CanOpen(v) {\r\n    this.canOpen = v;\r\n  }\r\n\r\n  // disabled\r\n  disabled = false\r\n  get Disabled(){\r\n    if (this.GetDisabled_Func){\r\n      return this.GetDisabled_Func();\r\n    }\r\n    return this.disabled\r\n  } set Disabled(v){\r\n    this.disabled = v;\r\n  }\r\n\r\n  // IdRender\r\n  IdRender\r\n\r\n  // View\r\n  get View(){\r\n    return <MultiSelectView store={this}/>\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { MultiSelectVM } from \"./MultiSelectVM\";\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nconst { Option } = Select;\r\n\r\nclass MultiSelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MultiSelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style ? this.props.style : { width: '100%' };\r\n    var { Placeholder, Items, SelectedIndexs, InitialIndexs } = data;\r\n\r\n    if (SelectedIndexs.length === 0) {\r\n      SelectedIndexs = InitialIndexs;\r\n      data.InitialIndexs = [];\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (data.IdRender) {\r\n        id = data.IdRender(item)\r\n      } else {\r\n        if (item === undefined) {\r\n          id = genUtil.randomId();\r\n        } else if (typeof item === 'string' || !isNaN(item)) {\r\n          id = item;\r\n        } else {\r\n          id = item._id ? item._id : item.id;\r\n        }\r\n      }\r\n      \r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    return (\r\n      <>\r\n        <Select style={style}\r\n          mode=\"multiple\"\r\n          placeholder={Placeholder}\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={SelectedIndexs}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n          open={data.CanOpen && data.Open}\r\n          onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n          disabled={data.Disabled}\r\n        >\r\n          {elems}\r\n        </Select>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MultiSelectView)","import { SelectVM } from \"./SelectVM\";\r\n\r\nexport const get = (items, initialItem) => {\r\n  var qI = new SelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItem = initialItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport SelectView from './SelectView';\r\nimport * as util from './SelectVMUtil'\r\n\r\nexport class SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      selectedIndex : observable,\r\n      CanClear :observable,\r\n      open : observable,\r\n      canOpen : observable,\r\n      isDisabled : observable,\r\n      disabled : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = [];\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  initialItem = undefined\r\n  get InitialItem() {\r\n    return this.initialItem;\r\n  }\r\n  set InitialItem(v){\r\n    this.IsSet_InitialItem = true;\r\n    this.initialItem = v;\r\n    this.InitialIndex = this.GetInitialIndex();\r\n    this.SelectedIndex = this.InitialIndex;\r\n  }\r\n\r\n  initialIndex\r\n  get InitialIndex(){\r\n    if (!this.initialIndex){\r\n      this.initialIndex = this.GetInitialIndex();\r\n    }\r\n    return this.initialIndex;\r\n  }\r\n  set InitialIndex(v){\r\n    this.initialIndex = v;\r\n  }\r\n\r\n  GetInitialIndex = () => {\r\n    var index = this.Items.indexOf(this.InitialItem);\r\n    return index !== -1 ? index : null;\r\n  }\r\n\r\n  selectedIndex = undefined\r\n  get SelectedIndex(){\r\n    return this.selectedIndex;\r\n  }\r\n  set SelectedIndex(v){\r\n    this.selectedIndex = v;\r\n    this.SelectedItem = this.GetSelectedItem();\r\n  }\r\n\r\n  selectedItem\r\n  get SelectedItem (){\r\n    if (!this.selectedItem){\r\n      this.selectedItem = this.GetSelectedItem();\r\n    }\r\n    return this.selectedItem;\r\n  }\r\n  set SelectedItem (v) {\r\n    this.selectedItem = v;\r\n\r\n    if (this.IsSet_InitialItem){\r\n      this.IsSet_InitialItem = false\r\n    } else if (this.OnSelectedItemChanged){\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  SetValue = (v) => {\r\n    this.InitialItem = this.SelectedItem = v;\r\n  }\r\n\r\n  GetSelectedItem = () => {\r\n    var index = this.SelectedIndex;\r\n    if (index === -1) return undefined;\r\n    return this.Items[index];\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder(){\r\n    if (!this.placeholder){\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v){\r\n    this.placeholder = v;\r\n  }\r\n\r\n  CanClear = false\r\n\r\n  Clear = () => {\r\n    this.SelectedIndex = null\r\n  }\r\n  \r\n  get DivStyle() {\r\n    return this.CanClear ? { \r\n      position: 'relative', \r\n      padding: '0 22px 0 0' \r\n    } : {};\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n\r\n  isDisabled = false\r\n  get IsDisabled(){\r\n    return this.isDisabled;\r\n  } set IsDisabled(v){\r\n    this.isDisabled = v;\r\n  }\r\n\r\n   // disabled\r\n   disabled = false\r\n   get Disabled(){\r\n     if (this.GetDisabled_Func){\r\n       return this.GetDisabled_Func();\r\n     }\r\n     return this.disabled\r\n   } set Disabled(v){\r\n     this.disabled = v;\r\n   }\r\n\r\n   IdRender\r\n\r\n   // View\r\n   get View(){\r\n     return <SelectView store={this}/>\r\n   }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class FloatItemVM {\r\n  location\r\n\r\n  className\r\n  getClassName = () => {\r\n    if (!this.className){\r\n      this.className = `float ${this.location}`;\r\n    }\r\n    return this.className\r\n  }\r\n}","import FloatItemVM from \"./FloatItemVM\";\r\n\r\nexport const get = (loc) => {\r\n  var qI = new FloatItemVM();\r\n  qI.location = loc;\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport * as floatItemVMUtil from './FloatItemVMUtil'\r\n\r\nclass FloatItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = floatItemVMUtil.get('top right', 'Test')\r\n    }else{\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className={data.getClassName()}>{this.getWrapperContent()}</span>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(FloatItemView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { SelectVM } from \"./SelectVM\";\r\nimport * as floatItemVMUtil from '../float/FloatItemVMUtil'\r\nimport FloatItemView from \"../float/FloatItemView\";\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport './Select.css'\r\n\r\nconst { Option } = Select;\r\n\r\nclass SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new SelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var className = this.props.className ? this.props.className : ''\r\n    var style = this.props.style ? this.props.style : { width: '100%' };\r\n    var { Placeholder, Items, SelectedIndex, InitialIndex } = data;\r\n\r\n    if (SelectedIndex === -1) {\r\n      SelectedIndex = InitialIndex;\r\n      data.InitialIndex = -1;\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (data.IdRender) {\r\n        id = data.IdRender(item)\r\n      } else {\r\n        if (item === undefined) {\r\n          id = genUtil.randomId();\r\n        } else if (typeof item === 'string' || !isNaN(item)) {\r\n          id = item;\r\n        } else {\r\n          id = item._id ? item._id : item.id;\r\n        }\r\n      }\r\n      \r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    var floatElem = ''\r\n    if (data.CanClear) {\r\n      var floatItemStore = floatItemVMUtil.get('right')\r\n      floatItemStore.wrapper = <Button size='small' type='primary'\r\n        onClick={data.Clear}>x</Button>\r\n\r\n      floatElem = <FloatItemView store={floatItemStore} />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={`select__wrapper ${className}`}\r\n          style={data.DivStyle} >\r\n          {floatElem}\r\n          <Select style={style}\r\n            showSearch\r\n            placeholder={Placeholder}\r\n            optionFilterProp=\"children\"\r\n            onChange={this.onValueChange}\r\n            value={SelectedIndex}\r\n            filterOption={(input, option) =>\r\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            }\r\n            open={data.CanOpen && data.Open}\r\n            onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n            disabled={data.Disabled || data.IsDisabled}\r\n          >\r\n            {elems}\r\n          </Select>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(SelectView)","export const inside = 'inside'\r\nexport const lower = 'lower'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ReplaceRowLocationFactoryUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport * as lt from './RRLF_LocationType'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance\r\n}\r\n\r\nexport default class ReplaceRowLocationFactory {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Location: observable,\r\n    })\r\n  }\r\n\r\n  ReferenceRow\r\n  Location = lt.inside\r\n\r\n  get Color(){\r\n    return util.GetColor(this);\r\n  }\r\n\r\n  get ButtonStyle(){\r\n    return {\r\n      width: 50,\r\n      backgroundColor: this.Color,\r\n      border: 'none'\r\n    };\r\n  }\r\n\r\n  ToggleLocation = () =>{\r\n    switch (this.Location) {\r\n      case lt.inside:\r\n        this.Location = lt.lower;\r\n        break;\r\n      case lt.lower:\r\n        this.Location = lt.inside;\r\n        break;\r\n    }\r\n  }\r\n}","import * as lt from './RRLF_LocationType'\r\n\r\nexport const GetColor = (v) => {\r\n  switch (v.Location) {\r\n    case lt.inside:\r\n      return \"#52c41a\";\r\n    case lt.lower:\r\n      return \"#faad14\";\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { Component } from \"react\";\r\nimport React from 'react'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport * as ts from '../text/TextState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nclass NewInputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.contentEditable = React.createRef();\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n\r\n    var data = this.state;\r\n    data.Ref = React.createRef();\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    var data = this.state;\r\n    data.Content = e.target.value;\r\n  };\r\n\r\n  OnPaste = (e) => {\r\n    e.preventDefault();\r\n    var text = genUtil.GetPlainText(e);\r\n\r\n    var data = this.state;\r\n    data.Content = text;\r\n  }\r\n\r\n  OnKeyDown = (e) => {\r\n    var data = this.state;\r\n    if (data.OnKeyDown){\r\n      data.OnKeyDown(e)\r\n      return;\r\n    }\r\n\r\n    // Ctrl + B\r\n    if (e.ctrlKey && e.which == 66) {\r\n      e.preventDefault();\r\n    }\r\n    // Ctrl + I\r\n    else if (e.ctrlKey && e.which == 73) {\r\n      e.preventDefault();\r\n    }\r\n    // Enter\r\n    else if (e.keyCode == 13) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var Content = data.Content;\r\n    var className = this.props.className ? this.props.className : ''\r\n    var style = this.props.style\r\n    var onFocus = this.props.onFocus ? \r\n      this.props.onFocus : data.OnFocus\r\n    \r\n    data.OnKeyDown = data.OnKeyDown ?\r\n      data.OnKeyDown : this.props.onKeyDown\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <ContentEditable ref={data.Ref}\r\n            className={`ant-input ${className}`}\r\n            style={style}\r\n            innerRef={this.contentEditable}\r\n            placeholder={data.Placeholder}\r\n            style={style}\r\n            html={Content ? Content : ''}\r\n            onChange={this.handleChange}\r\n            onPaste={this.OnPaste}\r\n            onKeyDown={this.OnKeyDown} \r\n            onFocus={onFocus}/>\r\n          : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={Content} onChange={this.handleChange}\r\n            className={className}\r\n            style={style} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(NewInputView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TwoCol_SelectVMUtil'\r\nimport * as genUtil from '../../../util/generalUtil'\r\n\r\nexport class TwoCol_SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      availableItems: observable,\r\n      selectedItems: observable,\r\n      inputTitle: observable,\r\n      outputTitle: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    this.AvailableItems = [...this.Items];\r\n    this.SelectedItems = [];\r\n  }\r\n\r\n  inputTitle = undefined\r\n  get InputTitle(){\r\n    if (!this.inputTitle){\r\n      this.inputTitle = 'Dữ liệu input'\r\n    }\r\n    return this.inputTitle;\r\n  } set InputTitle(v){\r\n    this.inputTitle = v;\r\n  }\r\n\r\n  outputTitle = undefined\r\n  get OutputTitle(){\r\n    if (!this.outputTitle){\r\n      this.outputTitle = 'Dữ liệu output'\r\n    }\r\n    return this.outputTitle;\r\n  } set OutputTitle(v){\r\n    this.outputTitle = v;\r\n  }\r\n\r\n  availableItems = undefined\r\n  get AvailableItems() {\r\n    return this.availableItems;\r\n  } set AvailableItems(v) {\r\n    this.availableItems = v;\r\n  }\r\n\r\n  selectedItems = []\r\n  get SelectedItems() {\r\n    return this.selectedItems;\r\n  } set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n  }\r\n\r\n  GetKey = (item) => {\r\n    if (typeof item === 'string') return item;\r\n    var id = item.id ? item.id : genUtil.newGUID();\r\n    return id;\r\n  }\r\n\r\n  Select = (item) => {\r\n    var index1 = this.AvailableItems.indexOf(item);\r\n    this.AvailableItems.splice(index1, 1);\r\n\r\n    this.SelectedItems.push(item);\r\n\r\n    this.IsChanged = true;\r\n  }\r\n\r\n  Unselect = (item) => {\r\n    var index1 = this.SelectedItems.indexOf(item);\r\n    this.SelectedItems.splice(index1, 1);\r\n\r\n    var index = this.Items.indexOf(item);\r\n    if (index < this.AvailableItems.length) {\r\n      this.AvailableItems.splice(index, 0, item);\r\n    } else {\r\n      this.AvailableItems.push(item);\r\n    }\r\n\r\n    this.IsChanged = true;\r\n  }\r\n\r\n  set IsChanged(v) {\r\n    if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(this.SelectedItems);\r\n    }\r\n  }\r\n\r\n  render\r\n  get Render() {\r\n    if (!this.render) {\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v) {\r\n    this.render = v;\r\n  }\r\n}","import { TwoCol_SelectVM } from \"./TwoCol_SelectVM\";\r\n\r\n// Instance\r\nexport const get = (items, render, inputTitle, outputTitle) => {\r\n  var qI = new TwoCol_SelectVM();\r\n\r\n  qI.Items = items;\r\n  qI.Render = render;\r\n  qI.InputTitle = inputTitle;\r\n  qI.OutputTitle = outputTitle;\r\n  \r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(\r\n    [\r\n      'a', 'b', 'c',\r\n      'd', 'e', 'f',\r\n      'g', 'h', 'i',\r\n      'j', 'k', 'q',\r\n      'r', 's', 't',\r\n    ]\r\n  )\r\n}\r\n\r\n// Property\r\nexport const GetRender = (q) => {\r\n  return (item) => item;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { TwoCol_SelectVM } from \"./TwoCol_SelectVM\";\r\nimport * as util from './TwoCol_SelectVMUtil'\r\nimport './TwoCol_Select.css'\r\n\r\nclass TwoCol_SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style;\r\n\r\n    return (\r\n      <>\r\n        <table className='tc_table'>\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <div className='tc_table__title'>\r\n                  <span>\r\n                    {data.InputTitle}\r\n                  </span>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className='tc_table__title'>\r\n                  {data.OutputTitle}\r\n                </div>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <span className='tc_select__partition__items'>\r\n                  {data.AvailableItems.map(x => {\r\n                    return <span key={data.GetKey(x)} onClick={() => data.Select(x)}>\r\n                      {data.Render(x)}\r\n                    </span>\r\n                  })}\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span className='tc_select__partition__items'>\r\n                  {data.SelectedItems.map(x => {\r\n                    return <span key={data.GetKey(x)} onClick={() => data.Unselect(x)}>\r\n                      {data.Render(x)}\r\n                    </span>\r\n                  })}\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TwoCol_SelectView)","export const m = 'm'\r\nexport const m2 = 'm2'\r\nexport const m3 = 'm3'\r\nexport const kg = 'kg'\r\nexport const each = 'each'\r\n\r\nexport const GetList = () => {\r\n  return [m, m2, m3, kg, each]\r\n}\r\n\r\nexport const GetName = (v) => {\r\n  var name\r\n\r\n  switch (v) {\r\n    case each:\r\n      name = 'Số lượng (cái)'\r\n      break;\r\n    case m:\r\n      name = 'Chiều dài (m)'\r\n      break;\r\n    case m2:\r\n      name = 'Diện tích (m2)'\r\n      break;\r\n    case m3:\r\n      name = 'Thể tích (m3)'\r\n      break;\r\n    case kg:\r\n      name = 'Khối lượng (kg)'\r\n      break;\r\n  }\r\n\r\n  return name;\r\n}","export const lower = 'lower'\r\nexport const upper = 'upper'\r\nexport const both = 'both'\r\nexport const none = 'none'","export const celllist = 'celllist'\r\nexport const celldata = 'celldata'\r\nexport const cellunit = 'cellunit'\r\nexport const unitlist = 'unitlist'\r\nexport const unit = 'unit'\r\nexport const _delete = 'delete'\r\nexport const addsub = 'addsub'","export const subcells = 'subcells'\r\nexport const valuelist = 'valuelist'\r\nexport const unit = 'unit'\r\nexport const valuecurrent = 'valuecurrent'","export const _default = 'default'\r\nexport const removedata = 'removedata'","// export const addrow = 'addrow'\r\n// export const renamerow = 'renamerow'\r\n// export const deleterow = 'deleterow'\r\n// export const moveuprow = 'moveuprow'\r\n// export const movedownrow = 'movedownrow'\r\n// export const setsubfieldsrow = 'setsubfieldsrow'\r\n// export const replacerow = 'replacerow'\r\n// export const replacerows = 'replacerows'\r\nexport const changeunitrow = 'changeunitrow'\r\n\r\n// New\r\nexport const retitle = 'retitle';\r\nexport const subgroup = 'subgroup'\r\nexport const _delete = 'delete'\r\nexport const replace = 'replace'\r\nexport const add = 'add'\r\nexport const move = 'move'\r\nexport const changeunit = 'unit'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../../../text/TextVMUtil'\r\nimport * as trs from '../../../../../../text/TextRenderState';\r\nimport * as util from './MassRowUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport MultiSelectView from '../../../../../../select/MultiSelectView';\r\nimport { Col, Row, Space, Button, Switch, message, Popover, Spin } from 'antd';\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\nimport SelectView from '../../../../../../select/SelectView';\r\nimport ReplaceRowLocationFactory from '../../location/ReplaceRowLocationFactory';\r\nimport * as rrlf_lt from '../../location/RRLF_LocationType';\r\nimport { PMData } from '../../../../../single/model/PMData';\r\nimport * as mif from '../../../field/MassItemField'\r\nimport * as selectUtil from '../../../../../../select/SelectVMUtil';\r\nimport * as mr_f_it from './MassRow_Field_InputType'\r\nimport NewInputView from '../../../../../../input/NewInputView';\r\nimport * as tc_selectUtil from '../../../../../../select/twocol/TwoCol_SelectVMUtil';\r\nimport TwoCol_SelectView from \"../../../../../../select/twocol/TwoCol_SelectView\";\r\nimport * as u_st from '../unit/MR_Unit_SetType'\r\nimport * as ut from '../../../unit/MassUnitType'\r\nimport * as u_dt from '../../../../update/Update_DirectionType'\r\nimport * as u_sn from '../update/MRU_SectionName'\r\nimport * as uc_sn from '../../cell/update/MCU_SectionName'\r\nimport * as delType from '../delete/MR_DeleteType'\r\n\r\n// Command\r\nimport * as tct from '../../command/item/base/CommandType'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class MassRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      rank: observable,\r\n      isShowSub: observable,\r\n      IsToolVisible: observable,\r\n      subItems: observable,\r\n      IsModalVisible: observable,\r\n      title: observable,\r\n      rawValue: observable,\r\n      FieldInputType: observable,\r\n      IsHaveAdditionInformation: observable,\r\n      Is_SelectSubItems_ModalOpen: observable,\r\n      Temp_SelectSubItems: observable,\r\n      IsDataPending: observable,\r\n      IsPending_HaveSub: observable,\r\n      supItem: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  // SupItem\r\n  // Nguyên bản là SupRow gốc của Row (đã bị thay đổi vị trí)\r\n  Is_Original_SupRow\r\n\r\n  supItem = undefined\r\n  get SupItem() {\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v) {\r\n    this.supItem = v;\r\n    this.CurrentList = undefined;\r\n    this.Rank = undefined;\r\n  }\r\n\r\n  get Full_SupItems() {\r\n    return util.GetFull_SubItems(this)\r\n  }\r\n\r\n  currentList\r\n  get CurrentList() {\r\n    if (!this.currentList) {\r\n      this.currentList = this.SupItem ? this.SupItem.SubItems\r\n        : this.Table.MainRows;\r\n    }\r\n    return this.currentList;\r\n  }\r\n  set CurrentList(v) {\r\n    this.currentList = v;\r\n  }\r\n\r\n  get Table() {\r\n    return this.Dict ? this.Dict : this.SupItem.Table\r\n  }\r\n\r\n  // SubItems\r\n  Get_SubItems_FromApi = (subGroupId, col, handle) => {\r\n    util.Get_SubItems_FromApi(this, subGroupId, col, handle)\r\n  }\r\n\r\n  subItems = []\r\n  get SubItems() {\r\n    return this.subItems;\r\n  } set SubItems(v) {\r\n    this.subItems = v;\r\n  }\r\n\r\n  get AllItems() {\r\n    var list = [];\r\n    list.push(this);\r\n    this.SubItems.forEach(x => {\r\n      list.push.apply(list, x.AllItems)\r\n    });\r\n    return list;\r\n  }\r\n\r\n  // Cells\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.Get_Cells(this)\r\n    } return this.cells;\r\n  }\r\n\r\n  GetCell = (col) => {\r\n    return genUtil.SingleFilter(this.Cells,\r\n      x => x.Column === col)\r\n  }\r\n\r\n  // Update\r\n  update\r\n  get Update() {\r\n    if (!this.update) {\r\n      this.update = util.GetUpdate(this)\r\n    } return this.update\r\n  }\r\n\r\n  get Items() {\r\n    var items = this.Cells.reduce((a, b) => a.concat(b.Items), []);\r\n    items = items.filter((x, i, a) => a.indexOf(x) === i);\r\n    return items;\r\n  }\r\n\r\n  isReplaced\r\n  get IsReplaced() {\r\n    return this.isReplaced;\r\n  } set IsReplaced(v) {\r\n    this.isReplaced = v;\r\n    var obj = this.IsHaveAdditionInformation\r\n      = util.Get_IsHaveAdditionInformation(this);\r\n\r\n    if (obj) {\r\n      this.AdditionInformation = util.Get_AdditionInformation(this);\r\n    }\r\n  }\r\n\r\n  Original_SupRow\r\n\r\n  get Original_Full_SupRows() {\r\n    return util.Get_Original_Full_SupRows(this);\r\n  }\r\n\r\n  subFields = []\r\n  get SubFields() {\r\n    return this.subFields\r\n  }\r\n  set SubFields(v) {\r\n    this.subFields = v;\r\n\r\n    util.OnSet_SubFields(this, v);\r\n  }\r\n\r\n  TempSubFields\r\n\r\n  isShowSub = false\r\n  get IsShowSub() {\r\n    return this.isShowSub;\r\n  } set IsShowSub(v) {\r\n    this.isShowSub = v;\r\n    this.ToggleButtonContentVM.Content = util.GetToggleButtonContent(this);\r\n  }\r\n\r\n  toggleButtonContent\r\n  get ToggleButtonContent() {\r\n    if (!this.toggleButtonContent) {\r\n      this.toggleButtonContent = util.GetToggleButtonContent(this);\r\n    } return this.toggleButtonContent;\r\n  }\r\n  set ToggleButtonContent(v) {\r\n    this.toggleButtonContent = v;\r\n  }\r\n\r\n  toggleButtonContentVM\r\n  get ToggleButtonContentVM() {\r\n    if (!this.toggleButtonContentVM) {\r\n      var obj = this.toggleButtonContentVM = textVMUtil.get(this.ToggleButtonContent);\r\n      obj.OnSetContent = (v) => this.ToggleButtonContent = v;\r\n    }\r\n    return this.toggleButtonContentVM;\r\n  }\r\n\r\n  rank = undefined\r\n  get Rank() {\r\n    if (this.rank === undefined) {\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v) {\r\n    this.rank = v;\r\n    this.SubItems.forEach(x => x.Rank = undefined);\r\n  }\r\n\r\n  // Tham biến set sẵn SubField vào Row, \r\n  // khi bấm vào ToggleSub, run GroupFactory để chạy ra SubItems\r\n  IsPending_HaveSub = undefined\r\n\r\n  get IsHaveSub() {\r\n    return util.GetIsHaveSub(this);\r\n  }\r\n\r\n  get Style() {\r\n    return util.GetStyle(this);\r\n  }\r\n\r\n  IsToolVisible = false\r\n\r\n  FieldInputType = mr_f_it.select\r\n\r\n  Toggle_FieldInputType = () => {\r\n    switch (this.FieldInputType) {\r\n      case mr_f_it.select:\r\n        this.TempField = this.FieldInputVM.Content;\r\n        this.FieldInputType = mr_f_it.input;\r\n        break;\r\n      case mr_f_it.input:\r\n        this.FieldSelectVM.InitialItem = this.TempField\r\n        this.FieldInputType = mr_f_it.select;\r\n        break;\r\n    }\r\n  }\r\n\r\n  TempField\r\n\r\n  fieldInputVM\r\n  get FieldInputVM() {\r\n    if (!this.fieldInputVM) {\r\n      var obj = this.fieldInputVM = textVMUtil.get();\r\n      obj.onSetContent = (v) => this.TempField = v;\r\n    }\r\n    return this.fieldInputVM;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM() {\r\n    if (!this.fieldSelectVM) {\r\n      this.fieldSelectVM = util.GetFieldSelectVM(this);\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get FieldInputElement() {\r\n    return <>\r\n      <div className='massrow__fieldinput_wrapper'>\r\n        <div className='massrow__fieldinput'>\r\n          {this.FieldInputType === mr_f_it.select ?\r\n            <SelectView store={this.FieldSelectVM} /> :\r\n            <NewInputView store={this.FieldInputVM} />\r\n          }\r\n        </div>\r\n        {this.IsCreatedByUser ?\r\n          <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n            checked={this.FieldInputType === mr_f_it.select}\r\n            onChange={this.Toggle_FieldInputType} />\r\n          : ''}\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  subFieldSelectVM\r\n  get SubFieldSelectVM() {\r\n    if (!this.subFieldSelectVM) {\r\n      this.subFieldSelectVM = util.GetSubFieldSelectVM(this);\r\n    }\r\n    return this.subFieldSelectVM;\r\n  }\r\n\r\n  // Title\r\n  title = undefined\r\n  get Title() {\r\n    return this.title;\r\n  }\r\n  set Title(v) {\r\n    this.title = v;\r\n    this.TitleVM.Content = v;\r\n    this.Editable_TitleVM.Content = v;\r\n  }\r\n\r\n  ReTitle = (value, handle, handleUndo) => {\r\n    util.ReTitle(this, value, handle, handleUndo);\r\n  }\r\n\r\n  titleVM\r\n  get TitleVM() {\r\n    if (!this.titleVM) {\r\n      this.titleVM = textVMUtil.get(this.Title, 'tiêu đề');\r\n    }\r\n    return this.titleVM;\r\n  }\r\n\r\n  EditTitle = () => {\r\n    this.HideHover();\r\n    this.Editable_TitleVM.RenderState = trs.edit\r\n  }\r\n\r\n  editable_TitleVM\r\n  get Editable_TitleVM() {\r\n    if (!this.editable_TitleVM) {\r\n      this.editable_TitleVM = util.GetEditable_TitleVM(this)\r\n    }\r\n    return this.editable_TitleVM;\r\n  }\r\n\r\n  get LocationStorageList() {\r\n    return this.Table.AllRows;\r\n  }\r\n\r\n  locationSelectVM\r\n  get LocationSelectVM() {\r\n    if (!this.locationSelectVM) {\r\n      this.locationSelectVM = util.GetLocationSelectVM(this);\r\n    }\r\n    return this.locationSelectVM;\r\n  }\r\n\r\n  GetCellByColumn = (col) => {\r\n    var index = this.Cells.findIndex(x => x.Column === col);\r\n    return index !== -1 ? this.Cells[index] : undefined;\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    util.ToggleSub(this);\r\n  }\r\n\r\n  MoveUp = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (0 === index) return;\r\n\r\n    util.Move(this, list[index - 1]);\r\n  }\r\n\r\n  MoveDown = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (list.length - 1 === index) return;\r\n\r\n    util.Move(this, list[index + 1]);\r\n  }\r\n\r\n  AddSub = () => {\r\n    util.Add(this, this.Table);\r\n  }\r\n\r\n  // Delete\r\n  deleteData\r\n  get DeleteData() {\r\n    if (!this.deleteData) {\r\n      this.deleteData = util.GetDeleteData(this)\r\n    } return this.deleteData\r\n  }\r\n\r\n  replaceFactory\r\n  get ReplaceFactory() {\r\n    if (!this.replaceFactory) {\r\n      this.replaceFactory = new ReplaceRowLocationFactory();\r\n    }\r\n    return this.replaceFactory;\r\n  }\r\n\r\n  ReplaceOK = (handleUndo) => {\r\n    var factory = this.ReplaceFactory;\r\n    var refRow = factory.ReferenceRow;\r\n\r\n    if (!refRow) return;\r\n\r\n    var loc = factory.Location;\r\n    if ((refRow === this && loc === rrlf_lt.lower) ||\r\n      (refRow === this.SupItem && loc === rrlf_lt.inside)) {\r\n      return\r\n    }\r\n\r\n    this.Replace(refRow, loc, handleUndo);\r\n\r\n    factory.Location = rrlf_lt.inside;\r\n  }\r\n\r\n  Replace_SubItems = () => {\r\n    this.Table.CommandDict.Do(\r\n      {\r\n        action: tct.replace,\r\n        target: {\r\n          type: 'row',\r\n          key: this.RetrieveData\r\n        },\r\n        value: this.Temp_SelectSubItems\r\n      }, this\r\n    )\r\n  }\r\n\r\n  Replace_SubItems_Main = (value, handle, handleUndo) => {\r\n    // Undo\r\n    var undoFuncs\r\n    if (handleUndo) {\r\n      undoFuncs = []\r\n      handleUndo(() => {\r\n        undoFuncs.forEach(x => x());\r\n      });\r\n    }\r\n\r\n    var subItems = value\r\n    subItems.forEach(x => {\r\n      x.Replace(this, rrlf_lt.inside,\r\n        (undo) => {\r\n          if (undoFuncs) {\r\n            undoFuncs.push(undo)\r\n          }\r\n        })\r\n    })\r\n\r\n    this.IsShowSub = true;\r\n\r\n    if (handle) {\r\n      handle();\r\n    }\r\n  }\r\n\r\n  Replace = (refRow, loc, handleUndo) => {\r\n    var osr = this.Original_SupRow;\r\n\r\n    // Save data\r\n    var supRow = undefined;\r\n\r\n    switch (loc) {\r\n      case rrlf_lt.inside:\r\n        supRow = refRow;\r\n        break;\r\n      case rrlf_lt.lower:\r\n        supRow = refRow.SupItem;\r\n        break;\r\n    }\r\n\r\n    // Đối tượng đã nằm trong mục cần đặt\r\n    if (this.SupItem === supRow) return;\r\n\r\n    // Undo\r\n    var undoFuncs = []\r\n    var undo = () => {\r\n      undoFuncs.forEach(x => x());\r\n    }\r\n\r\n    // Init OriginalSupRow && IsReplaced\r\n    // Undo\r\n    var old_IsReplaced = this.IsReplaced;\r\n    undoFuncs.push(() => this.IsReplaced = old_IsReplaced)\r\n\r\n    this.IsReplaced = true;\r\n\r\n    // Delete Row trong tập hợp cũ\r\n    this.Update.Run({\r\n      Section: u_sn._delete,\r\n      Data: { DeleteType: delType._default }\r\n    }, u_dt.upper, true, (undo) => undoFuncs.push(undo))\r\n\r\n    // Add Row trong tập hợp mới\r\n    // Undo\r\n    if (handleUndo) {\r\n      var oldSupItem = this.SupItem;\r\n      undoFuncs.push(() => this.SupItem = oldSupItem);\r\n    }\r\n    // Do\r\n    this.SupItem = supRow;\r\n\r\n    supRow.Update.Run({\r\n      Section: u_sn.addsub,\r\n      Data: { Item: this }\r\n    }, u_dt.none, true, (undo) => undoFuncs.push(undo))\r\n\r\n    var oldIsShowSubFieldSelect = this.IsShowSubFieldSelect;\r\n    undoFuncs.push(() => {\r\n      this.IsShowSubFieldSelect = oldIsShowSubFieldSelect\r\n    });\r\n\r\n    this.IsShowSubFieldSelect = false;\r\n\r\n    if (handleUndo) {\r\n      handleUndo(undo)\r\n    }\r\n  }\r\n\r\n  IsModalVisible = false\r\n\r\n  OpenModal = () => {\r\n    this.IsModalVisible = true\r\n    var list\r\n\r\n    // Set tiêu đề hiện tại\r\n    this.TitleVM.Content = this.Title;\r\n\r\n    // Set giá trị nhóm hiện tại\r\n    this.FieldInputVM.Content = this.Field\r\n\r\n    //this.FieldSelectVM.InitialItem = this.Field;\r\n    var fieldSelectVM = this.FieldSelectVM\r\n    list = fieldSelectVM.Items;\r\n    var index = list.findIndex(x => x.Value === this.Field);\r\n    fieldSelectVM.InitialItem = index !== -1 ? list[index] : undefined\r\n\r\n    this.TempField = this.Field;\r\n\r\n    // Set giá trị phân nhóm hiện tại\r\n    var subFieldSelectVM = this.SubFieldSelectVM;\r\n    //subFieldSelectVM.InitialItems = this.SubFields;\r\n    list = subFieldSelectVM.Items;\r\n    subFieldSelectVM.InitialItems =\r\n      list.filter(x => this.SubFields.indexOf(x.Value) !== -1);\r\n\r\n    // Reset lại giá trị Select SubItems\r\n    this.Temp_SelectSubItems = undefined\r\n    this.SelectSubItemsVM.Items = this.LocationStorageList;\r\n\r\n    var locSelectVM = this.LocationSelectVM;\r\n    locSelectVM.Items = this.LocationStorageList\r\n    locSelectVM.InitialItem = undefined;\r\n  }\r\n\r\n  ModalOK = () => {\r\n    this.IsModalVisible = false;\r\n\r\n    // Thiết lập nhóm hiện tại\r\n    if (this.Field !== this.TempField) {\r\n      // Do\r\n      this.Field = this.TempField;\r\n    }\r\n\r\n    // Thiết lập phân nhóm hiện tại\r\n    // chỉ áp dụng cho Row tự sinh\r\n    if (!this.IsCreatedByUser) {\r\n      this.GroupFactory.Run()\r\n    }\r\n\r\n    var subItems = this.Temp_SelectSubItems;\r\n    if (subItems) {\r\n      // Dịch chuyển tập hợp con\r\n      this.Replace_SubItems();\r\n    }\r\n    // else {\r\n    //   // Dịch chuyển vị trí\r\n    //   this.ReplaceOK((undo) => {\r\n    //     undoFuncs.push(undo)\r\n    //   });\r\n    // }\r\n  }\r\n\r\n  ModalCancel = () => {\r\n    this.IsModalVisible = false;\r\n  }\r\n\r\n  PMS_WorkPackages = [\r\n    'THI CÔNG CHÍNH (HBC)',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM (PHƯƠNG ...)',\r\n    'Kết thúc thô - Bàn giao'\r\n  ]\r\n\r\n  pms_WorkPackages_SelectVM\r\n  get PMS_WorkPackages_SelectVM() {\r\n    if (!this.pms_WorkPackages_SelectVM) {\r\n      this.pms_WorkPackages_SelectVM = selectUtil.get(this.PMS_WorkPackages);\r\n    }\r\n    return this.pms_WorkPackages_SelectVM;\r\n  }\r\n\r\n  get ModalElement() {\r\n    var factory = this.ReplaceFactory;\r\n    var titleWidth = '180px';\r\n\r\n    return <Modal title={this.Title} visible={this.IsModalVisible}\r\n      width={700}\r\n      onOk={this.ModalOK} onCancel={this.ModalCancel}>\r\n      {/* Tiêu đề */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Tiêu đề:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <b>{this.TitleVM.Content}</b>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập nhóm hiện tại */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Nhóm hiện tại:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          {this.FieldInputElement}\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập phân nhóm */}\r\n      {!this.IsCreatedByUser ? <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Thiết lập phân nhóm:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <MultiSelectView store={this.SubFieldSelectVM} />\r\n        </Col>\r\n      </Row> : ''}\r\n\r\n      {/* Đổi vị trí */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth} className='mass__modal__title__wrapper'>\r\n          <b>Đổi vị trí:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <Button type='primary' size='small'\r\n            className={this.Temp_SelectSubItems ?\r\n              'mass__modal__title__selectsubitems__button' : ''}\r\n            onClick={this.Open_SelectSubItems_Modal}>chọn tập con</Button>\r\n          {this.SelectSubItems_ModalElement}\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Hiển thị 1 Project và ko phải Phase */}\r\n      {this.Table.Dict.Dict.ViewItem.CanEdit_Site ?\r\n        <Row gutter={15} style={{ marginTop: 10 }}>\r\n          <Col flex={titleWidth}>\r\n            <b>Thông tin công trường:</b>\r\n          </Col>\r\n          <Col flex=\"auto\">\r\n            <Button type='primary' size='small'\r\n              className='btn-warning'\r\n              onClick={this.Site.OpenModal}>...</Button>\r\n            {this.Site.ModalView}\r\n          </Col>\r\n        </Row>\r\n        : ''}\r\n\r\n      {/* Gói công việc PMS */}\r\n      {/* <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Gói công việc PMS:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <SelectView store={this.PMS_WorkPackages_SelectVM} />\r\n        </Col>\r\n      </Row> */}\r\n    </Modal>\r\n  }\r\n\r\n  hoverData\r\n  get HoverData() {\r\n    if (!this.hoverData) {\r\n      this.hoverData = util.GetHoverData(this)\r\n    } return this.hoverData\r\n  }\r\n\r\n  ShowHover = () => {\r\n    if (this.Editable_TitleVM.RenderState === trs.edit) {\r\n      return\r\n    }\r\n    this.HoverData.Show();\r\n  }\r\n\r\n  HideHover = () => {\r\n    this.HoverData.Hide();\r\n  }\r\n\r\n  toolElement\r\n  get ToolElement() {\r\n    if (!this.toolElement) {\r\n      this.toolElement = util.Get_ToolElement(this);\r\n    }\r\n    return this.toolElement;\r\n  }\r\n\r\n  get ReplaceInformation_Element() {\r\n    return <>\r\n      {this.IsHaveAdditionInformation ?\r\n        <Popover trigger='hover'\r\n          content={\r\n            <span className='info'>\r\n              {this.ReplaceInformation}\r\n            </span>\r\n          } >\r\n          <InfoCircleOutlined className='info' />\r\n        </Popover>\r\n        : ''}\r\n    </>\r\n  }\r\n\r\n  // Excel Export\r\n  get ExportInfo() {\r\n    var key = this.Field;\r\n    var info = {\r\n      Key: key,\r\n      Value: this.Title\r\n    }\r\n\r\n    var list\r\n    if (!this.SupItem) {\r\n      list = [info]\r\n    } else {\r\n      list = [...this.SupItem.ExportInfo]\r\n      list.push(info);\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportValue() {\r\n    var list = []\r\n    this.Cells.forEach(x => {\r\n      list.push({\r\n        Key: x.Column.Name,\r\n        Value: x.TotalValue\r\n      })\r\n    })\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportData() {\r\n    return {\r\n      Infos: this.ExportInfo,\r\n      Values: this.ExportValue\r\n    }\r\n  }\r\n\r\n  // HandleTotal_Cells\r\n  // On_HandleTotal_Cells_Done_Dict_Funcs = []\r\n\r\n  // set Is_HandleTotal_Cells_Done(v) {\r\n  //   this.On_HandleTotal_Cells_Done_Dict_Funcs\r\n  //     .forEach(x => x.Value())\r\n  // }\r\n\r\n  // HandleTotal_Cells\r\n\r\n  // AddHandleTotal_Cell = (cell) => {\r\n  //   if (!this.HandleTotal_Cells) {\r\n  //     this.HandleTotal_Cells = []\r\n  //   };\r\n\r\n  //   var list = this.HandleTotal_Cells\r\n\r\n  //   list.push(cell);\r\n\r\n  //   if (list.length === this.Cells.length) {\r\n  //     this.HandleTotal_Cells = undefined\r\n  //     this.Is_HandleTotal_Cells_Done = true;\r\n\r\n  //     // // nếu IsCreatedByUser \r\n  //     // // => thêm thông tin vào danh sách Handled_CreatedByUser_Rows \r\n  //     // // đối tượng Table\r\n  //     // if (this.IsCreatedByUser) {\r\n  //     //   this.Table.Add_Handled_CreatedByUser_Row(this);\r\n  //     // }\r\n  //   }\r\n  // }\r\n\r\n  // HandleTotalData_Cells\r\n  On_HandleTotalData_Cells_Func = []\r\n\r\n  is_HandleTotalData_Cells\r\n  get Is_HandleTotalData_Cells() {\r\n    return this.is_HandleTotalData_Cells\r\n  }\r\n  set Is_HandleTotalData_Cells(v) {\r\n    genUtil.Handle(this.On_HandleTotalData_Cells_Func,\r\n      (v) => this.On_HandleTotalData_Cells_Func = v)\r\n\r\n    this.is_HandleTotalData_Cells = v;\r\n  }\r\n\r\n  HandleTotalData_Cells = undefined\r\n\r\n  AddHandleTotalData_Cell = (cell) => {\r\n    if (!this.HandleTotalData_Cells) {\r\n      this.HandleTotalData_Cells = []\r\n    }\r\n\r\n    var list = this.HandleTotalData_Cells\r\n\r\n    list.push(cell);\r\n\r\n    if (list.length === this.Cells.length) {\r\n      this.HandleTotalData_Cells = undefined\r\n\r\n      this.Is_HandleTotalData_Cells = true;\r\n\r\n      // nếu IsCreatedByUser \r\n      // => thêm thông tin vào danh sách Handled_CreatedByUser_Rows \r\n      // đối tượng Table\r\n      // if (this.IsCreatedByUser) {\r\n      //   this.Table.Add_Handled_CreatedByUser_Row(this);\r\n      // }\r\n    }\r\n  }\r\n\r\n  // AdditionInformation\r\n  IsHaveAdditionInformation = false\r\n\r\n  get IsHave_Addition_Wrapper() {\r\n    return this.IsHaveAdditionInformation || this.IsShow_RawValue\r\n  }\r\n\r\n  get ReplaceInformation() {\r\n    return util.GetReplaceInformation(this);\r\n  }\r\n\r\n  // Tùy chọn SelectSubItems\r\n  Is_SelectSubItems_ModalOpen = false\r\n\r\n  get SelectSubItems_ModalElement() {\r\n    return <Modal\r\n      title='Chọn tập hợp đầu mục con'\r\n      visible={this.Is_SelectSubItems_ModalOpen}\r\n      onOk={this.SelectSubItems_ModalOK}\r\n      onCancel={this.SelectSubItems_ModalCancel}>\r\n      <div className='mass__subitemmodal__wrapper'>\r\n        <TwoCol_SelectView store={this.SelectSubItemsVM} />\r\n      </div>\r\n    </Modal>\r\n  }\r\n\r\n  Open_SelectSubItems_Modal = () => {\r\n    this.Is_SelectSubItems_ModalOpen = true;\r\n  }\r\n\r\n  SelectSubItems_ModalCancel = () => {\r\n    this.Is_SelectSubItems_ModalOpen = false;\r\n  }\r\n\r\n  SelectSubItems_ModalOK = () => {\r\n    this.Is_SelectSubItems_ModalOpen = false;\r\n  }\r\n\r\n  selectSubItemsVM\r\n  get SelectSubItemsVM() {\r\n    if (!this.selectSubItemsVM) {\r\n      var obj = this.selectSubItemsVM = tc_selectUtil.get(\r\n        [],\r\n        (item) => {\r\n          var marginLeft = item.Rank * 15;\r\n          return <div\r\n            style={{ marginLeft }}>\r\n            {item.Title}\r\n          </div>\r\n        },\r\n        'Tập hợp vị trí',\r\n        'Vị trí được chọn'\r\n      )\r\n      obj.OnSelectedItemChanged = (v) => this.Temp_SelectSubItems = v;\r\n    }\r\n    return this.selectSubItemsVM;\r\n  }\r\n\r\n  Temp_SelectSubItems = undefined\r\n\r\n  // Value\r\n  get FullValue() {\r\n    return util.GetFullValue(this)\r\n  }\r\n\r\n  rawValue = undefined\r\n  get RawValue() {\r\n    return this.rawValue\r\n  } set RawValue(v) {\r\n    this.rawValue = v\r\n\r\n    if (!this.IsCreatedByUser && !this.Title) {\r\n      this.Title = v;\r\n    }\r\n  }\r\n\r\n  get IsShow_RawValue() {\r\n    return util.GetIsShow_RawValue(this);\r\n  }\r\n\r\n  get RawValue_Element() {\r\n    return <>\r\n      {this.IsShow_RawValue ?\r\n        <Popover trigger='hover'\r\n          content={\r\n            <span className='success'>\r\n              {this.RawValue}\r\n            </span>\r\n          }\r\n        >\r\n          <InfoCircleOutlined className='success' />\r\n        </Popover>\r\n        : ''}\r\n    </>\r\n  }\r\n\r\n  IsCreatedByUser\r\n\r\n  // Unit\r\n  unit_SetType\r\n  get Unit_SetType() {\r\n    if (!this.unit_SetType) {\r\n      this.unit_SetType = this.SubItems.length === 0\r\n        ? u_st.upper : u_st.both\r\n    }\r\n    return this.unit_SetType\r\n  } set Unit_SetType(v) {\r\n    this.unit_SetType = v;\r\n  }\r\n\r\n  get Unit() {\r\n    return this.UnitData.CurrentUnit\r\n  }\r\n\r\n  unitData\r\n  get UnitData() {\r\n    if (!this.unitData) {\r\n      this.unitData = util.GetUnitData(this)\r\n    } return this.unitData\r\n  }\r\n\r\n  // Site\r\n  site\r\n  get Site() {\r\n    if (!this.site) {\r\n      this.site = util.GetSite(this)\r\n    } return this.site;\r\n  }\r\n\r\n  // Forge\r\n  ViewElements = () => {\r\n    var forge = this.Table.Dict.Forge;\r\n    forge.SelectElements(this.Items.map(x => x.GetValue_Mas(mif.guid)));\r\n  }\r\n\r\n  // FilterData\r\n  filterData\r\n  get FilterData() {\r\n    if (!this.filterData) {\r\n      this.filterData = util.GetFilterData(this)\r\n    } return this.filterData\r\n  }\r\n\r\n  get RetrieveData() {\r\n    return util.GetRetrieveData(this)\r\n  }\r\n\r\n  // Tập hợp tất cả filter trong Row\r\n  // Row tạo bởi người dùng: tập hợp các filter của các Row con\r\n  // Row tự sinh: 1 filter tương ứng với Origin_Full_SupRows\r\n  get FilterDict() {\r\n    return util.GetFilterDict(this)\r\n  }\r\n\r\n  // Field : lưu thông tin gom nhóm và truy xuất subitems\r\n  Field\r\n\r\n  // QueryData\r\n  // Dữ liệu để truy xuất các MassItem ...\r\n  // Ex: MassTypeId\r\n  // queryData\r\n  // get QueryData() {\r\n  //   if (!this.queryData) {\r\n  //     this.queryData = util.GetQueryData(this)\r\n  //   } return this.queryData;\r\n  // }\r\n\r\n  // PendingData\r\n  IsDataPending = false;\r\n\r\n  get IsDataPending_View() {\r\n    return this.IsDataPending ?\r\n      <tr>\r\n        <td>\r\n          <Spin />\r\n          <span>loading data ...</span>\r\n        </td>\r\n      </tr>\r\n      : undefined\r\n  }\r\n\r\n  // groupfactory\r\n  // xử lý gom nhóm các SubRow bêntrong\r\n  groupFactory\r\n  get GroupFactory() {\r\n    if (!this.groupFactory) {\r\n      this.groupFactory = util.GetGroupFactory(this)\r\n    } return this.groupFactory;\r\n  }\r\n\r\n  // Save\r\n  // Lưu thông tin các đầu mục bên trong\r\n  // saveData\r\n  // get SaveData() {\r\n  //   if (!this.saveData) {\r\n  //     this.saveData = util.GetSaveData(this)\r\n  //   } return this.saveData;\r\n  // }\r\n}","export const lower = 'lower'\r\nexport const upper = 'upper'\r\nexport const both = 'both'\r\nexport const none = 'none'","import * as util from './TextRenderItemUtil'\r\n\r\nexport class TextRenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport * as rs from './TextRenderState'\r\nimport { TextRenderItem } from \"./TextRenderItem\";\r\nimport { Button } from \"antd\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new TextRenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (content, context) => {\r\n        var className = context.ClassName;\r\n        var style = context.Style;\r\n        var onDoubleClick = context.OnDoubleClick\r\n        var onClick = context.OnClick\r\n\r\n        return <>\r\n          <span className={`value__wrapper ${className}`} \r\n            style={style}\r\n            onDoubleClick={onDoubleClick}\r\n            onClick={onClick}>\r\n            {content}\r\n          </span>\r\n          { context.Is_Tool_Visible && context.Is_Edit_Visible ?\r\n            <Button type='primary' size='small'\r\n              className='left10 btn-warning' onClick={context.Edit}\r\n            >e</Button>\r\n            : ''}\r\n        </>\r\n      }\r\n    case rs.edit:\r\n      return (content, context) => {\r\n        var className = context.ClassName;\r\n        var style = context.Style;\r\n        var onFocus = context.OnFocus\r\n        \r\n        return <>\r\n          <div className={`input__wrapper ${className}`}>\r\n            <InputView ref={context.Ref}\r\n              className='input__main'\r\n              style={style}\r\n              store={context}\r\n              ref={context.Ref}\r\n              onFocus={onFocus} />\r\n            {context.Is_Tool_Visible && context.Is_OK_Visible ?\r\n              <Button type='primary' size='small'\r\n                onClick={context.EditOK}>ok</Button>\r\n              : ''}\r\n          </div>\r\n        </>\r\n      }\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './TextRenderItemUtil'\r\n\r\nexport default class TextRender_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\nimport { EditableTextVM } from \"./EditableTextVM\";\r\nimport './Text.css'\r\n\r\nclass EditableTextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EditableTextVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n\r\n    var data = this.state;\r\n    data.Ref = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    data.ClassName = this.props.className ? this.props.className : ''\r\n    data.Style = this.props.style\r\n\r\n    data.OnFocus = data.OnFocus ?\r\n      data.OnFocus : this.props.onFocus\r\n\r\n    data.OnDoubleClick = data.OnDoubleClick ?\r\n      data.OnDoubleClick : this.props.onDoubleClick\r\n\r\n    data.OnClick = data.OnClick ?\r\n      data.OnClick : this.props.onClick\r\n\r\n    return (\r\n      <>\r\n        {data.Render()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EditableTextView)","import { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../input/NewInputView';\r\nimport TextRender_Dict from './TextRender_Dict';\r\nimport * as ts from './TextState'\r\nimport * as rs from './TextRenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport EditableTextView from './EditableTextView';\r\n\r\nexport class EditableTextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder: observable,\r\n      State: observable,\r\n      IsEditing: observable,\r\n      renderState: observable,\r\n      Is_Tool_Visible: observable,\r\n      Is_Edit_Visible: observable,\r\n      Is_OK_Visible: observable,\r\n      CanChange_RenderState: observable\r\n    })\r\n  }\r\n\r\n  content = undefined\r\n  get Content() {\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  State = ts.text\r\n\r\n  IsEditing = false\r\n\r\n  titleFunc\r\n  get TitleFunc() {\r\n    if (!this.titleFunc) {\r\n      this.titleFunc = () => this.Content;\r\n    }\r\n    return this.titleFunc;\r\n  } set TitleFunc(v) {\r\n    this.titleFunc = v;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = new TextRender_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v) {\r\n    this.render_Dict = v;\r\n  }\r\n\r\n  OnSet_RenderState_Func_Dict = []\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState;\r\n  } set RenderState(v) {\r\n    if (!this.CanChange_RenderState) {\r\n      return;\r\n    }\r\n\r\n    this.renderState = v;\r\n    this.OnSet_RenderState_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  CanChange_RenderState = true\r\n\r\n  Is_Tool_Visible = true\r\n  Is_Edit_Visible = true\r\n  Is_OK_Visible = true;\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n    }\r\n  }\r\n\r\n  EditOK = () => {\r\n    this.RenderState = rs._default\r\n  }\r\n\r\n  Render = () => {\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(this.Content, this);\r\n  }\r\n\r\n  OnSet_Ref_Func_Dict = []\r\n\r\n  ref\r\n  get Ref() {\r\n    return this.ref\r\n  } set Ref(v) {\r\n    this.ref = v;\r\n\r\n    genUtil.Handle(this.OnSet_Ref_Func_Dict,\r\n      (v) => this.OnSet_Ref_Func_Dict = v)\r\n  }\r\n\r\n  ref_Element\r\n  get Ref_Element() {\r\n    if (!this.ref_Element) {\r\n      var obj = this.Ref.current\r\n      if (obj && obj.getEl) {\r\n        obj = obj.getEl();\r\n      }\r\n\r\n      this.ref_Element = obj;\r\n    }\r\n    return this.ref_Element;\r\n  }\r\n\r\n  Focus = () => {\r\n    const setFocus = () => {\r\n      this.Ref_Element?.focus();\r\n    }\r\n\r\n    if (this.Ref) {\r\n      setFocus()\r\n    } else {\r\n      genUtil.Add_2(\r\n        this.OnSet_Ref_Func_Dict,\r\n        () => setFocus()\r\n      )\r\n    }\r\n  }\r\n\r\n  // View\r\n  get View(){\r\n    return <EditableTextView store={this}/>\r\n  }\r\n}","import { EditableTextVM } from \"./EditableTextVM\"\r\n\r\nexport const get = (content, canEdit = true, isToolVisible) => {\r\n  var qI = new EditableTextVM();\r\n  \r\n  qI.Content = content;\r\n  qI.CanChange_RenderState = canEdit;\r\n\r\n  if (isToolVisible === undefined){\r\n    isToolVisible = canEdit;\r\n  }\r\n\r\n  qI.Is_Tool_Visible = isToolVisible;\r\n\r\n  return qI;\r\n}","import * as editTextUtil from '../model/text/EditableTextVMUtil'\r\nimport * as genUtil from './generalUtil'\r\n\r\nexport const alt = 'alt'\r\nexport const alt_enter = 'alt_enter'\r\n\r\nexport const ctrl = 'ctrl'\r\nexport const ctrl_b = 'ctrl_b'\r\nexport const ctrl_i = 'ctrl_i'\r\n\r\nexport const enter = 'enter'\r\nexport const tab = 'tab'\r\nexport const backspace = 'backspace'\r\nexport const del = 'del'\r\nexport const esc = 'esc'\r\n\r\nexport const Get_Shortcut = (e) => {\r\n  var key ;\r\n  if (e.altKey && e.keyCode == 13) {\r\n      key = alt_enter\r\n  } else if (e.ctrlKey && e.which == 66) {\r\n    key = ctrl_b\r\n  } else if (e.ctrlKey && e.which == 73) {\r\n    key = ctrl_i\r\n  } else if (e.ctrlKey){\r\n    key = ctrl\r\n  } else if (e.altKey){\r\n    key = alt\r\n  } else if (e.keyCode == 13) {\r\n    key = enter\r\n  } else if (e.keyCode == 9){\r\n    key = tab\r\n  } else if (e.keyCode == 8){\r\n    key = backspace\r\n  } else if (e.keyCode == 46){\r\n    key = del\r\n  } else if (e.keyCode == 27){\r\n    key = esc\r\n  }\r\n\r\n  return {\r\n    key,\r\n    value : e.key\r\n  }\r\n}\r\n\r\n// Edit RenderState\r\nexport const Edit = (q, preFunc, postFunc) => {\r\n  var isValid = preFunc ? preFunc() : true;\r\n  if (!isValid) return;\r\n\r\n  if (q.RenderState === 'default') {\r\n    q.RenderState = 'edit';\r\n\r\n    if (postFunc) {\r\n      postFunc();\r\n    }\r\n  }\r\n}\r\n\r\nexport const EditOK = (q, postFunc) => {\r\n  q.RenderState = 'default';\r\n\r\n  if (postFunc){\r\n    postFunc();\r\n  }\r\n}\r\n\r\n// Get InputView\r\nexport const GetInput = (q, field, postOkFunc) => {\r\n  var obj = editTextUtil.get(q[field]);\r\n\r\n  const set_default = () => \r\n    EditOK(obj);\r\n\r\n  obj.Is_Tool_Visible = false\r\n  obj.OnKeyDown = (e) => {\r\n    var { key, value } = Get_Shortcut(e);\r\n    switch (key) {\r\n      case enter:\r\n        set_default();\r\n        break;\r\n      case esc:\r\n        obj.IsEscape = true;\r\n        set_default();\r\n        break;\r\n    }\r\n  }\r\n\r\n  genUtil.Add(\r\n    obj.OnSet_RenderState_Func_Dict,\r\n    () => {\r\n      if (obj.RenderState === 'default') {\r\n        if (obj.IsEscape) {\r\n          obj.Content = q[field]\r\n          obj.IsEscape = false\r\n          return;\r\n        }\r\n\r\n        if (obj.Content === q[field]) return;\r\n\r\n        q[field] = obj.Content;\r\n        if (postOkFunc){\r\n          postOkFunc();\r\n        }\r\n      }\r\n    },\r\n    false\r\n  )\r\n\r\n  return obj;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport MassRow_ToolElement from \"./MassRow_ToolElement\";\r\nimport { Button } from \"antd\";\r\nimport { DownCircleOutlined, ReloadOutlined, UpCircleOutlined } from \"@ant-design/icons\";\r\nimport * as trs from '../../../../../text/TextRenderState';\r\nimport ShowView from '../../../svg/ShowView'\r\n\r\n\r\nclass MassRow_ToolElementView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow_ToolElement();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='f'>\r\n          {\r\n            data.Dict.Table.Dict.Forge?.Is_Visible ?\r\n              <Button type='primary' size='small'\r\n                onClick={data.Method('ViewElements')}>\r\n                <ShowView className='forge__togglevisible__icon' width={12} height={12} />\r\n              </Button>\r\n              : ''\r\n          }\r\n\r\n          <Button size='small' type='primary'\r\n            className='btn-success'\r\n            onClick={data.Method('MoveUp')}>\r\n            <UpCircleOutlined />\r\n          </Button>\r\n          <Button size='small' type='primary'\r\n            className='btn-success'\r\n            onClick={data.Method('MoveDown')}>\r\n            <DownCircleOutlined />\r\n          </Button>\r\n\r\n          <Button type='primary' size='small'\r\n            className='btn-warning'\r\n            onClick={data.Method('OpenModal')}>...</Button>\r\n\r\n          <Button size='small' type='primary'\r\n            className='btn-success'\r\n            onClick={data.Method('AddSub')}>+</Button>\r\n\r\n          {/* Delete */}\r\n          {data.Dict.DeleteData.DeleteVM.View}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRow_ToolElementView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassRow_ToolElementUtil'\r\nimport MassRow_ToolElementView from './MassRow_ToolElementView';\r\n\r\nexport default class MassRow_ToolElement {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      editable_TitleVM_RenderState: observable\r\n    })\r\n  }\r\n\r\n  get Editable_TitleVM() {\r\n    return this.Dict.Editable_TitleVM;\r\n  }\r\n\r\n  editable_TitleVM_RenderState = undefined\r\n  get Editable_TitleVM_RenderState() {\r\n    if (this.editable_TitleVM_RenderState === undefined) {\r\n      this.editable_TitleVM_RenderState =\r\n        util.GetEditable_TitleVM_RenderState(this);\r\n    }\r\n    return this.editable_TitleVM_RenderState;\r\n  } set Editable_TitleVM_RenderState(v) {\r\n    this.editable_TitleVM_RenderState = v;\r\n\r\n    this.Editable_TitleVM.RenderState = v;\r\n  }\r\n\r\n  Method = (name) => {\r\n    return this.Dict[name];\r\n  }\r\n\r\n  get View() {\r\n    return <MassRow_ToolElementView store={this} />\r\n  }\r\n}","import MassRow_ToolElement from \"./MassRow_ToolElement\";\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new MassRow_ToolElement()\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetEditable_TitleVM_RenderState = (q) => {\r\n  return q.Editable_TitleVM.RenderState;\r\n}","import * as util from './EntFilterUtil'\r\n\r\nexport class EntFilter\r\n{\r\n  ValueType\r\n  NumberFilterType\r\n  StringFilterType\r\n  IsEqualLeft\r\n  IsEqualRight\r\n\r\n  values\r\n  get Values(){\r\n    return this.values;\r\n  }\r\n  set Values(v){\r\n    this.values = v;\r\n  }\r\n\r\n  CategoryType\r\n\r\n  valueStorageList\r\n  get ValueStorageList(){\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = util.GetValueStorageList(this);\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const category = \"category\";\r\nexport const family = \"family\";\r\nexport const parameter = 'parameter'\r\n\r\nexport const GetAll = () => {\r\n  return [ category, family, parameter ];\r\n}","export const bystring = \"bystring\";\r\nexport const bynumber = \"bynumber\";\r\n\r\nexport const GetAll = () => {\r\n  return [ bystring, bynumber ];\r\n}","export const byequal = \"byequal\";\r\nexport const bycontain = \"bycontain\";\r\nexport const bynotcontain = \"bynotcontain\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bycontain, bynotcontain ];\r\n}","export const byequal = \"byequal\";\r\nexport const bysmaller = \"bysmaller\";\r\nexport const bysmallerorequal = \"bysmallerorequal\";\r\nexport const bybigger = \"bybigger\";\r\nexport const bybiggerorequal = \"bybiggerorequal\";\r\nexport const bybetween = \"bybetween\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bysmaller, bybigger, bybetween ];\r\n}","import { PMData } from \"../../single/model/PMData\";\r\nimport { EntFilter } from \"./EntFilter\"\r\nimport * as fct from './FilterCategoryType'\r\nimport * as fvt from './FilterValueType'\r\nimport * as sft from './StringFilterType'\r\nimport * as nft from './NumberFilterType'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, categoryType) => {\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.valueType;\r\n  qI.NumberFilterType = q.numberFilterType;\r\n  qI.StringFilterType = q.stringFilterType;\r\n  qI.Values = q.values;\r\n  qI.CategoryType = categoryType;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  if (!q) return q;\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.ValueType;\r\n  qI.NumberFilterType = q.NumberFilterType;\r\n  qI.StringFilterType = q.StringFilterType;\r\n  qI.Values = [...q.Values];\r\n  qI.CategoryType = q.CategoryType;\r\n  return qI;\r\n}\r\n\r\nexport const GetValueStorageList = (q) => {\r\n  var list = [];\r\n\r\n  switch (q.CategoryType) {\r\n    case fct.category:\r\n      list = [];\r\n      break;\r\n    case fct.parameter:\r\n      list = pmData().ParameterNames;\r\n      break;\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    valueType: q.ValueType,\r\n    numberFilterType: q.NumberFilterType,\r\n    stringFilterType: q.StringFilterType,\r\n    values: q.Values\r\n  }\r\n}\r\n\r\nexport const IsValid = (filter, value) => {\r\n  if (value === undefined || value === null) return false;\r\n\r\n  var isValid = false;\r\n  var filterValues = filter.Values;\r\n  switch (filter.ValueType) {\r\n    case fvt.bystring:\r\n      if (typeof value === 'string') {\r\n        var filterType = filter.StringFilterType;\r\n        switch (filterType) {\r\n          case sft.byequal:\r\n            filterValues.forEach(x => {\r\n              if (!isValid && x === value) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bycontain:\r\n            var lowerVal = value.toLowerCase();\r\n            filterValues.forEach(x => {\r\n              if (!isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bynotcontain:\r\n            var lowerVal = value.toLowerCase();\r\n            isValid = true;\r\n            filterValues.forEach(x => {\r\n              if (isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = false;\r\n              }\r\n            })\r\n            break;\r\n        }\r\n      }\r\n      break;\r\n    case fvt.bynumber:\r\n      if (!isNaN(value)) {\r\n        var filterType = filter.NumberFilterType;\r\n        switch (filterType) {\r\n          case nft.byequal:\r\n            return value === filterValues[0];\r\n          case nft.bysmaller:\r\n            return value < filterValues[0];\r\n          case nft.bysmallerorequal:\r\n            return value <= filterValues[0];\r\n          case nft.bybigger:\r\n            return value > filterValues[0];\r\n          case nft.bybiggerorequal:\r\n            return value >= filterValues[0];\r\n          case nft.bybetween:\r\n            var leftVal = filterValues[0];\r\n            var rightVal = filterValues[1];\r\n            return (filter.IsEqualLeft && leftVal === value) ||\r\n              leftVal < value && value < rightVal\r\n              || (filter.IsEqualRight && value === rightVal);\r\n        }\r\n      }\r\n      break;\r\n  }\r\n\r\n  L1:\r\n  return isValid;\r\n}","export const url = \"https://api.bimdev.vn/api/hb_masscell\"","export class MI_ValueItem {\r\n  Unit\r\n\r\n  Value = 0\r\n\r\n  get ValueString() {\r\n    var roundingFactor = 2;\r\n    var unit = this.Unit;\r\n    switch (unit) {\r\n      case 'each':\r\n        roundingFactor = 0;\r\n        break;\r\n      default:\r\n        roundingFactor = 2;\r\n        break;\r\n    }\r\n\r\n    var formatValue = this.Value.toLocaleString('en-US', { maximumFractionDigits: roundingFactor });\r\n    return `${formatValue}`;\r\n  }\r\n\r\n  get ApiData(){\r\n    return {\r\n      unit : this.Unit,\r\n      value : this.Value\r\n    }\r\n  }\r\n}","import * as sn from './MCU_SectionName'\r\nimport * as u_dt from '../../../../update/Update_DirectionType'\r\nimport { message } from 'antd'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as hUtil from '../base/MassCellUtil'\r\n\r\nexport class MC_Update {\r\n  Update_SubCells = (data, dirType, mainHandle) => {\r\n    var q = this.Host;\r\n    q.SubCells = hUtil.Get_SubCells(q);\r\n    this.Update_TotalValueData(undefined, dirType, mainHandle)\r\n  }\r\n\r\n  Update_TotalValueData = (data, dirType, mainHandle) => {\r\n    // hUtil.ReHandle_TotalValueData(this.Host);\r\n    this.Host.ValueData.RefreshData(mainHandle);\r\n  }\r\n\r\n  Update_Unit = (data, dirType, mainHandle) => {\r\n    var host = this.Host;\r\n    this.Update_ValueCurrent(undefined, dirType, mainHandle);\r\n  }\r\n\r\n  Update_ValueCurrent = (data, dirType, mainHandle) => {\r\n    var host = this.Host\r\n    var valueData = host.ValueData\r\n    var unit = host.Unit\r\n\r\n    const setObj = () => {\r\n      valueData.CurrentItem =\r\n        genUtil.SingleFilter(valueData.Data,\r\n          (x) => x.Unit === unit)\r\n\r\n      if (mainHandle){\r\n        mainHandle();\r\n      }\r\n    }\r\n\r\n    if (valueData.Data) {\r\n      setObj()\r\n    } else {\r\n      genUtil.Add_2(\r\n        valueData.OnGet_Data_Func,\r\n        setObj\r\n      )\r\n    }\r\n  }\r\n\r\n  Run = (sections, dirType = u_dt.none, isHostApplied = true, mainHandle) => {\r\n    if (!Array.isArray(sections)) {\r\n      sections = [sections]\r\n    }\r\n\r\n    if (!dirType){\r\n      dirType = u_dt.none\r\n    }\r\n\r\n    if (isHostApplied === undefined){\r\n      isHostApplied = true;\r\n    }\r\n\r\n    // handle\r\n    const finish = () => {\r\n      if (mainHandle){\r\n        mainHandle();\r\n      }\r\n    }\r\n\r\n    var segment_incre = genUtil.IncreFunc(2, finish)\r\n\r\n    if (isHostApplied) {\r\n      var s_incre = genUtil.IncreFunc(sections.length, segment_incre)\r\n\r\n      sections.forEach(x => {\r\n        this.RunItem(x, dirType, s_incre)\r\n      })\r\n    } else {\r\n      segment_incre();\r\n    }\r\n\r\n    switch (dirType) {\r\n      case u_dt.none:\r\n        segment_incre();\r\n        break;\r\n      case u_dt.lower:\r\n        var subItems = this.SubItems;\r\n        var si_incre = genUtil.IncreFunc(subItems.length, segment_incre)\r\n\r\n        subItems.forEach(x => {\r\n          x.Update.Run(sections, dirType, si_incre)\r\n        })\r\n        break;\r\n      case u_dt.upper:\r\n        this.SupItem?.Update.Run(sections, dirType, segment_incre)\r\n        break;\r\n      case u_dt.both:\r\n        var seg2_incre = genUtil.IncreFunc(2, segment_incre)\r\n\r\n        var subItems = this.SubItems;\r\n        var si_incre = genUtil.IncreFunc(subItems.length, seg2_incre)\r\n\r\n        // Update Sub trước sau đó đến Sub\r\n        subItems.forEach(x => {\r\n          x.Update.Run(sections, u_dt.lower)\r\n        })\r\n        this.SupItem?.Update.Run(sections, u_dt.upper, seg2_incre)\r\n        break;\r\n    }\r\n  }\r\n\r\n  RunItem = (secData, dirType, mainHandle) => {\r\n    var section = typeof secData === 'string' ?\r\n      secData : secData.Section\r\n    var data = secData.Data\r\n\r\n    switch (section) {\r\n      case sn.subcells:\r\n        this.Update_SubCells(data, dirType, mainHandle);\r\n        break;\r\n      case sn.valuelist:\r\n        this.Update_TotalValueData(data, dirType, mainHandle);\r\n        break;\r\n      case sn.unit:\r\n        this.Update_Unit(data, dirType, mainHandle);\r\n        break;\r\n      case sn.valuecurrent:\r\n        this.Update_ValueCurrent(data, dirType, mainHandle);\r\n        break;\r\n    }\r\n  }\r\n}","import { LinkOutlined } from '@ant-design/icons';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as mif from '../../../field/MassItemField'\r\nimport * as util from './ViewDetailUtil'\r\nimport * as api from '../../../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\n\r\nexport class ViewDetail {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  Dict\r\n\r\n  get ApiData() {\r\n    var host = this.Dict;\r\n    var phaseId\r\n    if (host.Table.ColumnField === mif.Phase) {\r\n      phaseId = host.Column.Data._id;\r\n    }\r\n\r\n    var massIds = host.AllItems.map(x => x._id);\r\n    return {\r\n      massIds,\r\n      phaseId\r\n    };\r\n  }\r\n\r\n  Open = () => {\r\n    const func = () => {\r\n      var isHash = true;\r\n      var url = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/massdetail`;\r\n      var getUrl = (v) => `${url}/${v}`;\r\n      var openTabFunc = (v) =>\r\n        window.open(getUrl(v), \"_blank\");\r\n\r\n      var func = () => {\r\n        openTabFunc(this._id);\r\n      }\r\n\r\n      if (this._id) {\r\n        func()\r\n      } else {\r\n        var apiData = this.ApiData;\r\n        util.GetData(apiData, (data) => {\r\n          this._id = data._id;\r\n          func();\r\n        })\r\n      }\r\n    }\r\n\r\n    var cell = this.Dict;\r\n    if (cell.Items){\r\n      func();\r\n    } else {\r\n      cell.GetItems_FromApi();\r\n      genUtil.Add_2(cell.OnSet_Items_Func,\r\n        func);\r\n    }\r\n  }\r\n\r\n  // View\r\n  get View() {\r\n    return <a className='ml-10' onClick={this.Open}>\r\n      <LinkOutlined />\r\n    </a>\r\n  }\r\n}","import { ViewDetail } from \"./ViewDetail\"\r\nimport {url} from './ViewDetail_Url'\r\nimport * as api from '../../../../../../../util/apiUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new ViewDetail();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","export const url = \"https://api.bimdev.vn/api/hbdv/updatemass\"","export const url = \"https://api.bimdev.vn/api/hb_masscell_valuedata\"","import { LinkOutlined } from '@ant-design/icons';\r\nimport { message } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { PMData } from '../../../../../single/model/PMData';\r\nimport * as util from './ValueUtil'\r\nimport { url } from './Value_Url'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\nexport class Value {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      currentItem: observable,\r\n      data : observable\r\n    })\r\n  }\r\n\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Dict\r\n\r\n  get Cell() {\r\n    return this.Dict;\r\n  }\r\n\r\n  // Data\r\n  OnSet_Data_Func = []\r\n\r\n  data = undefined\r\n  get Data() {\r\n    if (this.data === undefined) {\r\n      util.Handle_Data(this)\r\n    } return this.data;\r\n  } set Data(v) {\r\n    this.data = v;\r\n    \r\n    // if (this.Cell.Row.Title === 'TẦNG 1'){\r\n    //   console.log(v);\r\n    // }\r\n\r\n    this.Cell.Row.AddHandleTotalData_Cell(this.Cell);\r\n\r\n    genUtil.Handle(this.OnSet_Data_Func,\r\n      (v) => this.OnSet_Data_Func = v)\r\n  }\r\n\r\n  RefreshData = (handle) => {\r\n    util.Handle_Data(this, handle)\r\n  }\r\n\r\n  currentItem = undefined\r\n  get CurrentItem() {\r\n    return this.currentItem\r\n  } set CurrentItem(v) {\r\n    this.currentItem = v;\r\n  }\r\n\r\n  // Api\r\n  get ApiData() {\r\n    var obj = {\r\n      // _id : this._id,\r\n      cellId: this.Cell._id,\r\n      reportId: this.Cell.Column.Report._id,\r\n      valueData: this.Data.map(x => x.ApiData)\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  Save = (handle) => {\r\n    this.SaveDatabase(false, handle);\r\n  }\r\n\r\n  // Database\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n}","import { Value } from \"./Value\"\r\nimport { url } from './Value_Url'\r\nimport * as api from '../../../../../../../util/apiUtil'\r\nimport * as m_ut from '../../../unit/MassUnitType'\r\nimport { MI_ValueItem } from \"../../../item/value/MI_ValueItem\";\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as mif from '../../../field/MassItemField'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Value();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Data = (q, handle) => {\r\n  if (q.IsGet_Data) return undefined;\r\n  q.IsGet_Data = true;\r\n\r\n  var host = q.Dict;\r\n\r\n  // TotalValue Data;\r\n  var totalVal_Data = m_ut.GetList().map(x => {\r\n    var obj = new MI_ValueItem();\r\n    obj.Unit = x;\r\n    return obj;\r\n  })\r\n\r\n  var handledCount = 0;\r\n\r\n  const setData = () => {\r\n    // Lọc các Value = 0\r\n    totalVal_Data = totalVal_Data\r\n      .filter(x => x.Value)\r\n    q.Data = totalVal_Data;\r\n    q.IsGet_Data = false;\r\n\r\n    if (handle){\r\n      handle();\r\n    }\r\n  }\r\n\r\n  var list = host.SubCells ? host.SubCells : host.Items\r\n  if (!list) {\r\n    if (host.Row.IsCreatedByUser) {\r\n      // Nếu Row tạo bởi người dùng và không có Row con \r\n      setData();\r\n      return\r\n    }\r\n  }\r\n\r\n  var count = list.length\r\n  if (count === 0) {\r\n    setData();\r\n    return;\r\n  }\r\n\r\n  const handle_Val = (valData, item) => {\r\n    handledCount++;\r\n\r\n    totalVal_Data.forEach((x, i) => {\r\n      var unit = x.Unit;\r\n      var item = genUtil.SingleFilter(valData,\r\n        (a) => a.Unit === unit);\r\n\r\n      if (item === undefined) {\r\n        x.IsMissing = true;\r\n      } else {\r\n        x.Value += item.Value;\r\n      }\r\n    })\r\n\r\n    if (handledCount === count) {\r\n      setData();\r\n    }\r\n  }\r\n\r\n  if (host.SubCells) {\r\n    // Tồn tại sub cells\r\n    host.SubCells.forEach(x => {\r\n      var hostValData = x.ValueData;\r\n      if (hostValData.Data) {\r\n        handle_Val(hostValData.Data, x)\r\n      } else {\r\n        genUtil.Add_2(hostValData.OnSet_Data_Func,\r\n          () => {\r\n            handle_Val(hostValData.Data, x)\r\n          });\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    host.Items.forEach(x => {\r\n      var targetObj = x.ValueDict;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.FullData !== undefined) {\r\n        handle_Val(targetObj.FullData, x)\r\n      } else {\r\n        genUtil.Add_2(targetObj.OnGet_FullData_Func_Dict,\r\n          () => {\r\n            handle_Val(targetObj.FullData, x)\r\n          });\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","export const url = \"https://api.bimdev.vn/api/hb_masscell_query\"","import { message } from 'antd';\r\nimport * as mif from '../../../field/MassItemField'\r\nimport { url } from './Query_Url'\r\nimport * as util from './QueryUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as qt from '../../row/query/base/QueryTypeUtil'\r\nimport * as baseUtil from '../../row/query/base/QueryUtil'\r\nimport * as itemUtil from '../../row/query/item/ItemUtil'\r\n\r\nexport class Query {\r\n  Dict\r\n\r\n  get Cell() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get Row() {\r\n    return this.Cell.Row;\r\n  }\r\n\r\n  // value\r\n  value\r\n  get Value() {\r\n    return this.value\r\n  } set Value(v) {\r\n    this.value = v;\r\n    this.valueId = v?._id;\r\n  }\r\n\r\n  valueId\r\n\r\n  // field\r\n  get Field() {\r\n    return this.Row.Field\r\n  } set Field(v) {\r\n    this.Row.Field = v;\r\n  }\r\n\r\n  // items\r\n  Is_Inherit_FromSup = true;\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = util.GetItems(this)\r\n    } return this.items;\r\n  } set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  get AllItems() {\r\n    return util.Get_AllItems(this)\r\n  }\r\n\r\n  // set value\r\n  Set_FromMassItem = (item) => {\r\n    var valField = qt.GetValueFrom(this.Field);\r\n    if (valField) {\r\n      this.Value = item[qt.GetValueFrom(this.Field)]\r\n    }\r\n  }\r\n\r\n  Set_FromApi = (data) => {\r\n    this.Is_Inherit_FromSup = false;\r\n    this.Items = data.map(x => itemUtil.GetFromDb(x, this));\r\n  }\r\n\r\n  // AddQuery\r\n  AddQuery = (obj, type = 'object') => {\r\n    baseUtil.AddQuery_Base(this, obj, type);\r\n\r\n    if (this.Is_Inherit_FromSup) {\r\n      var cell = this.Cell\r\n      if (cell.SupItem) {\r\n        cell.SupItem.QueryData.AddQuery(obj, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  // apidata\r\n  get ApiData() {\r\n    var obj = {\r\n      cellId: this.Cell._id,\r\n      // items : this.Row.QueryData.ApiData\r\n      items: this.AllItems.map(x => x.ApiData)\r\n    }\r\n\r\n    // thêm trường thông tin lấy từ Query Row\r\n    // this.Row.QueryData.AddQuery(obj);\r\n\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n}","import { Query } from \"./Query\"\r\nimport * as itemUtil from '../../row/query/item/ItemUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Query();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// property\r\nexport const GetItems = (q) => {\r\n  var qI = itemUtil.get(q);\r\n  qI.field = q.Field;\r\n  qI.valueId = q.valueId;\r\n\r\n  return [qI];\r\n}\r\n\r\nexport const Get_AllItems = (q) => {\r\n  var list = [q.Items]\r\n  if (q.Is_Inherit_FromSup) {\r\n    var cell = q.Cell\r\n    if (cell.SupItem) {\r\n      list.push(cell.SupItem.QueryData.AllItems);\r\n    }\r\n  }\r\n\r\n  list.reverse();\r\n  return list.reduce((a, b) => {\r\n    a.push.apply(a, b)\r\n    return a\r\n  }, []);\r\n}","export const url = \"https://api.bimdev.vn/api/hb_masscell_subgroup\"","import { message } from 'antd';\r\nimport * as mif from '../../../../field/MassItemField'\r\nimport { url } from './SubGroup_Url'\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\nimport * as util from './SubGroupUtil'\r\nimport { PMData } from '../../../../../../single/model/PMData';\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\nexport class SubGroup {\r\n  Dict\r\n\r\n  get Cell() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get Row() {\r\n    return this.Cell.Row;\r\n  }\r\n\r\n  get Column() {\r\n    return this.Cell.Column\r\n  }\r\n\r\n  get SubField() {\r\n    return this.Row.SubFields[0]\r\n  }\r\n\r\n  item\r\n  get Item() {\r\n    if (!this.item) {\r\n      this.item = util.GetItem(this)\r\n    } return this.item;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      cellId: this.Cell._id,\r\n      // reportId : pmData().MassReport._id,\r\n      reportId: this.Column.Report._id,\r\n      subfield: this.SubField\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  Save = (handle) => {\r\n    var isValidSubGroup = true\r\n\r\n    // have sub\r\n    var row = this.Row;\r\n    if (!row.IsHaveSub) {\r\n      isValidSubGroup = false;\r\n    }\r\n\r\n    // valid field\r\n    switch (this.SubField) {\r\n      case mif.MassType:\r\n      case mif.workItem:\r\n      case mif.level:\r\n\r\n        break;\r\n      default:\r\n        isValidSubGroup = false;\r\n        break;\r\n    }\r\n\r\n    if (!isValidSubGroup) {\r\n      if (handle) {\r\n        handle();\r\n      }\r\n      return;\r\n    }\r\n\r\n    this._id = undefined\r\n    const func = () => util.Save(this, handle)\r\n\r\n    if (this.Cell.HaveValue_SubCells){\r\n      func();\r\n    } else {\r\n      genUtil.Add_2(this.Cell.OnSet_HaveValue_SubCells_Func,\r\n        func)\r\n    }\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hb_masscell_subgroup_item\"","import { message } from 'antd';\r\nimport * as mif from '../../../../field/MassItemField'\r\nimport {url} from './Item_Url'\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\n\r\nexport class Item {\r\n  Dict\r\n\r\n  get Cell() {\r\n    return this.Dict.Cell;\r\n  }\r\n\r\n  get Row(){\r\n    return this.Cell.Row;\r\n  }\r\n\r\n  get ApiData(){\r\n    var obj = {\r\n      hostId : this.Dict._id,\r\n      cellIds : this.Cell.HaveValue_SubCells.map(x => x._id)\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  Save = (handle) => {\r\n    this._id = undefined\r\n\r\n    this.SaveDatabase(false, handle);\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n}","import { SubGroup } from \"./SubGroup\"\r\nimport * as itemUtil from '../item/ItemUtil'\r\nimport { url } from './SubGroup_Url'\r\nimport * as api from '../../../../../../../../util/apiUtil';\r\nimport * as genUtil from '../../../../../../../../util/generalUtil';\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new SubGroup();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItem = (q) => {\r\n  return itemUtil.get(q);\r\n}\r\n\r\n// Method\r\nexport const Save = (q, mainHandle) => {\r\n  // save\r\n  const finish = () => {\r\n    if (mainHandle){\r\n      mainHandle();\r\n    }\r\n  }\r\n\r\n  // var subs = q.Dict.SubCells\r\n  var subs = q.Dict.HaveValue_SubCells\r\n  \r\n  // save subgroup of subcells\r\n  var sub_sg_Save_length = subs.length;\r\n  var sub_sg_Save_i = 0;\r\n  const sub_sg_Save_incre = () => {\r\n    sub_sg_Save_i++\r\n    if (sub_sg_Save_i === sub_sg_Save_length) {\r\n      finish();\r\n    }\r\n  }\r\n\r\n  const saveSub_SubGroup = () => {\r\n    subs.forEach(sub => {\r\n      sub.SubGroupData.Save(sub_sg_Save_incre)\r\n    })\r\n  }\r\n\r\n  // Save subgroup item\r\n  const saveItem = (handle) => {\r\n    q.Item.Save(handle);\r\n  }\r\n\r\n  // save subgroup\r\n  const save = (handle) => {\r\n    q.SaveDatabase(false, handle)\r\n  }\r\n\r\n  // find subgroup\r\n  const find = (handle) => {\r\n    var apiData = q.ApiData\r\n\r\n    const apiFunc = () => api.post(`${url}/find`, apiData);\r\n    apiFunc().then(res => res.data).then(data => {\r\n      data = data.length === 1 ? data[0] : undefined\r\n      handle(data)\r\n    })\r\n  }\r\n\r\n  // hàm xử lý chính\r\n  const main = () => {\r\n    find(data => {\r\n      if (!data) {\r\n        save(() => saveItem(saveSub_SubGroup))\r\n      } else {\r\n        q._id = data._id;\r\n\r\n        saveItem(saveSub_SubGroup)\r\n      }\r\n    })\r\n  }\r\n\r\n  // save các subcell - valuedata\r\n  var subSave_length = subs.length;\r\n  var subSave_i = 0;\r\n  const subSave_incre = () => {\r\n    subSave_i++\r\n    if (subSave_i === subSave_length) {\r\n      main();\r\n    }\r\n  }\r\n\r\n  subs.forEach(sub => {\r\n    sub.Save(subSave_incre);\r\n  })\r\n}","import { Item } from \"./Item\"\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import * as util from './MassItemUtil'\r\nimport * as mif from '../../field/MassItemField'\r\nimport { message } from 'antd'\r\nimport * as api from '../../../../../../util/apiUtil'\r\nimport { PMData } from '../../../../single/model/PMData'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport default class MassItem {\r\n  // project\r\n  Project\r\n  \r\n  // projectId\r\n\r\n  // OnSet_Project_Func = []\r\n\r\n  // project\r\n  // get Project() {\r\n  //   return this.project;\r\n  // } set Project(v) {\r\n  //   this.project = v;\r\n  //   genUtil.Handle(this.OnSet_Project_Func,\r\n  //     (v) => this.OnSet_Project_Func = v)\r\n  // }\r\n\r\n  // phases\r\n  // get Phases() {\r\n  //   if (!this.phases) {\r\n  //     this.phases = util.GetPhases(this);\r\n  //   }\r\n  //   return this.phases;\r\n  // } set Phases(v) {\r\n  //   this.phases = v;\r\n  // }\r\n\r\n  // get ValidPhasesByInput() {\r\n  //   return util.GetValidPhasesByInput(this);\r\n  // }\r\n\r\n  // phase\r\n  Phase\r\n\r\n  // OnSet_Phase_Func = []\r\n\r\n  // phase\r\n  // get Phase(){\r\n  //   return this.phase\r\n  // } set Phase(v){\r\n  //   this.phase = v;\r\n  //   genUtil.Handle(this.OnSet_Phase_Func,\r\n  //     (v) => this.OnSet_Phase_Func = v)\r\n  // }\r\n\r\n  // exportset\r\n  OnSet_ExportSet_Func = []\r\n\r\n  exportSet\r\n  get ExportSet(){\r\n    return this.exportSet\r\n  } set ExportSet(v){\r\n    this.exportSet = v;\r\n    genUtil.Handle(this.OnSet_ExportSet_Func,\r\n      (v) => this.OnSet_ExportSet_Func = v)\r\n  }\r\n\r\n  // Element\r\n  IsGetElement = false\r\n\r\n  OnGetElementDone_Funcs = []\r\n\r\n  set GetElementDone(v) {\r\n    this.OnGetElementDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  // MassType\r\n  // Đối tượng được lưu trên Databse\r\n  OnSet_MassType_Obj_Func = []\r\n\r\n  massType_Obj\r\n  get MassType_Obj() {\r\n    return this.massType_Obj\r\n  } set MassType_Obj(v) {\r\n    this.massType_Obj = v;\r\n\r\n    genUtil.Handle(this.OnSet_MassType_Obj_Func,\r\n      (v) => this.OnSet_MassType_Obj_Func = v)\r\n  }\r\n\r\n  get MassType() {\r\n    return this.MassType_Obj?.name;\r\n  }\r\n\r\n  // WorkItem\r\n  WorkItem_Obj\r\n\r\n  get workItemId() {\r\n    return this.WorkItem_Obj?._id\r\n  }\r\n\r\n  get WorkItem() {\r\n    return this.WorkItem_Obj?.name\r\n  }\r\n\r\n  // Level\r\n  Level_Obj\r\n\r\n  get levelId() {\r\n    return this.Level_Obj?._id\r\n  }\r\n\r\n  get Level() {\r\n    return this.Level_Obj?.name\r\n  }\r\n\r\n  GetValue = (field, handle, isMappingLevel = true) => {\r\n    if (!field) {\r\n      return;\r\n    }\r\n\r\n    var isHandle\r\n\r\n    if (field === mif.level && isMappingLevel) {\r\n      // Truy xuất thông tin Level\r\n      var obj = this.LevelItem;\r\n\r\n      // Chưa truy xuất Value\r\n      if (!obj.IsGet_Value && handle) {\r\n        isHandle = true;\r\n\r\n        genUtil.Add_2(\r\n          obj.OnSet_Value_Func_Dict,\r\n          () => {\r\n            handle(obj.Value)\r\n          }\r\n        );\r\n      }\r\n\r\n      // return obj.Value;\r\n      return {\r\n        Value: obj.Value,\r\n        IsHandle: isHandle\r\n      }\r\n    } else if (field === mif.MassType){\r\n      // Truy xuất thông tin MassType\r\n      isHandle = true;\r\n\r\n      if (this.MassType_Obj){\r\n        handle(this.GetValue_Mas(field))\r\n      } else {\r\n        genUtil.Add_2(this.OnSet_MassType_Obj_Func,\r\n          () => handle(this.GetValue_Mas(field)))\r\n      }\r\n\r\n      return {\r\n        IsHandle : isHandle\r\n      }\r\n    } else if (field === mif.Project){\r\n       // Truy xuất thông tin Project\r\n       isHandle = true;\r\n\r\n       if (this.Project){\r\n         handle(this.GetValue_Mas(field))\r\n       } else {\r\n         genUtil.Add_2(this.OnSet_Project_Func,\r\n           () => handle(this.GetValue_Mas(field)))\r\n       }\r\n \r\n       return {\r\n         IsHandle : isHandle\r\n       }\r\n    }\r\n\r\n    return {\r\n      Value: this.GetValue_Mas(field),\r\n      IsHandle: isHandle\r\n    }\r\n  }\r\n\r\n  GetValue_Mas = (field) => {\r\n    if (!field) {\r\n      return;\r\n    }\r\n\r\n    var data = mif.GetFullFields(this, field);\r\n\r\n    const getVal_FromFields = (dt) => {\r\n      var { fields, isFromElement } = dt;\r\n\r\n      const getValFunc = () => {\r\n        var obj = this;\r\n        var isValid = true;\r\n\r\n        fields.forEach(x => {\r\n          if (isValid) {\r\n            var temp = obj[x];\r\n\r\n            obj = temp;\r\n            if (obj === undefined || obj === null) {\r\n              isValid = false;\r\n            }\r\n          }\r\n        })\r\n\r\n        if (field === mif.Value) {\r\n          var roundingFactor = 2;\r\n\r\n          if (this.Unit === 'each') {\r\n            roundingFactor = 0;\r\n          }\r\n\r\n          obj = obj.toLocaleString('en-US', { maximumFractionDigits: roundingFactor });\r\n        }\r\n\r\n        return obj;\r\n      }\r\n\r\n      if (!isFromElement || this.Element) {\r\n        var val = getValFunc();\r\n        return val;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n\r\n    const getVal = () => {\r\n      if (Array.isArray(data)) {\r\n        var isValid = false;\r\n        var finalVal\r\n\r\n        data.forEach(x => {\r\n          if (isValid) return;\r\n\r\n          var val = getVal_FromFields(x);\r\n          if (val) {\r\n            finalVal = val;\r\n            isValid = true;\r\n          }\r\n        })\r\n\r\n        return finalVal;\r\n      } else {\r\n        return getVal_FromFields(data);\r\n      }\r\n    }\r\n\r\n    return getVal();\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id: this._id,\r\n      projectId: this.projectId,\r\n      elementId: this.elementId,\r\n      workpackageId: this.workpackageId,\r\n      exportSetId: this.exportSetId,\r\n      exportSetVersionId: this.exportSetVersionId,\r\n      value: this.Value,\r\n      unit: this.Unit,\r\n      massType: this.MassType,\r\n      info: this.Info\r\n    }\r\n  }\r\n\r\n  get ApiData_ForInput() {\r\n    var obj = {\r\n      valueData: this.ValueDict.Data.map(x => x.ApiData),\r\n      info: this.Info,\r\n      levelId: this.levelId,\r\n      workItemId: this.workItemId\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  AddDatabase = (handle) => {\r\n    var apiData = this.ApiData;\r\n    var { _id } = apiData;\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n\r\n    var command = _id ? 'edit' : 'add';\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/${command}`, apiData) : api.post(`${url}/${command}`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (command === 'add') {\r\n          this._id = data._id;\r\n        }\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`${command} mass successfully`);\r\n      })\r\n  }\r\n\r\n  DeleteDatabase = (handle) => {\r\n    var apiData = {\r\n      _id: this._id\r\n    };\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n    const apiFunc = () => api.put(`${url}/delete`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`delete mass successfully`);\r\n      })\r\n  }\r\n\r\n  // LevelGroup\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n\r\n  get_TLS_LevelGroup\r\n  get Get_TLS_LevelGroup() {\r\n    return this.get_TLS_LevelGroup\r\n  } set Get_TLS_LevelGroup(v) {\r\n    this.get_TLS_LevelGroup = v;\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      util.Handle_TLS_LevelGroup(this);\r\n    } return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true\r\n\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    genUtil.Handle(this.OnGet_FullValue_Func_Dict,\r\n      (v) => this.OnGet_FullValue_Func_Dict = v);\r\n\r\n    this.get_FullValue = v;\r\n  }\r\n\r\n  // ValueDict\r\n  valueDict\r\n  get ValueDict() {\r\n    if (!this.valueDict) {\r\n      this.valueDict = util.GetValueDict(this)\r\n    } return this.valueDict\r\n  }\r\n\r\n  // Phase\r\n  // phaseItems\r\n  // get PhaseItems() {\r\n  //   if (!this.phaseItems) {\r\n  //     this.phaseItems = util.GetPhaseItems(this);\r\n  //   }\r\n  //   return this.phaseItems;\r\n  // }\r\n\r\n  // GetPhaseItem = (phaseName) => {\r\n  //   var list = this.PhaseItems;\r\n  //   var index = list.findIndex(x => x.Phase.Name === phaseName);\r\n  //   return list[index];\r\n  // }\r\n\r\n  // lastest_PhaseItem\r\n  // get Lastest_PhaseItem() {\r\n  //   if (!this.lastest_PhaseItem) {\r\n  //     this.lastest_PhaseItem = util.Get_Lastest_PhaseItem(this);\r\n  //   }\r\n  //   return this.lastest_PhaseItem;\r\n  // }\r\n\r\n  // Level\r\n  levelItem\r\n  get LevelItem() {\r\n    if (!this.levelItem) {\r\n      this.levelItem = util.GetLevelItem(this);\r\n    }\r\n    return this.levelItem;\r\n  }\r\n\r\n  // LevelItem của phiên bản mới nhất\r\n  originLevelItem\r\n  get OriginLevelItem() {\r\n    if (!this.originLevelItem) {\r\n      this.originLevelItem = util.GetOriginLevelItem(this);\r\n    }\r\n    return this.originLevelItem;\r\n  }\r\n\r\n  // Site\r\n  site\r\n  get Site() {\r\n    return this.site\r\n  } set Site(v) {\r\n    this.site = v;\r\n  }\r\n}","import * as util from './Level_ItemUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport class Level_Item {\r\n  originValue\r\n  get Origin_Value(){\r\n    if (!this.originValue){\r\n      this.originValue = util.GetOrigin_Value(this);\r\n    }\r\n    return this.originValue;\r\n  }\r\n\r\n  OnSet_Replace_Value_Func_Dict = []\r\n\r\n  replace_Value\r\n  get Replace_Value(){\r\n    if (!this.replace_Value){\r\n      util.Handle_Replace_Value(this);\r\n    }\r\n    return this.replace_Value;\r\n  } set Replace_Value(v){\r\n    this.replace_Value = v;\r\n\r\n    genUtil.Handle(\r\n      this.OnSet_Replace_Value_Func_Dict,\r\n      (v) => this.OnSet_Replace_Value_Func_Dict = v\r\n    )\r\n  }\r\n\r\n  // get Project(){\r\n  //   return this.MassItem.Project\r\n  // }\r\n\r\n  // get Phase(){\r\n  //   return this.MassPhase_Item?.Phase\r\n  // }\r\n\r\n  OnSet_Value_Func_Dict = []\r\n\r\n  value\r\n  get Value(){\r\n    if (!this.value){\r\n      util.Handle_Value(this);\r\n    }\r\n    return this.value;\r\n  } set Value(v){\r\n    this.value = v;\r\n\r\n    genUtil.Handle(\r\n      this.OnSet_Value_Func_Dict,\r\n      (v) => this.OnSet_Value_Func_Dict = v\r\n    )\r\n  }\r\n}","import { Level_Item } from \"./Level_Item\"\r\nimport * as mif from '../../field/MassItemField'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (mi, miPh_Item) => {\r\n  var qI = new Level_Item();\r\n  qI.MassItem = mi;\r\n  // qI.MassPhase_Item = miPh_Item;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetOrigin_Value = (q) => {\r\n  var massItem = q.MassItem;\r\n\r\n  var qI = massItem.GetValue_Mas(mif.level);\r\n  return qI;\r\n}\r\n\r\nexport const Handle_Replace_Value = (q) => {\r\n  if (q.IsGet_Replace_Value) return undefined;\r\n  q.IsGet_Replace_Value = true;\r\n\r\n  // Truy xuất từ dự án hoặc phase\r\n  //var project = q.Project\r\n\r\n  var massItem = q.MassItem;\r\n  var source = massItem.Phase ? massItem.Phase : massItem.Project\r\n  var originVal = q.Origin_Value;\r\n\r\n  const setObj = (tls) => {\r\n    var list = tls.Data.Binding.Items;\r\n    var isValid = false;\r\n    var replaceVal\r\n\r\n    list.forEach((x) => {\r\n      if (!isValid && x.Values.includes(originVal)) {\r\n        isValid = true;\r\n        replaceVal = x.Name;\r\n      }\r\n    })\r\n\r\n    q.Replace_Value = replaceVal ? replaceVal : originVal;\r\n    q.IsGet_Replace_Value = false;\r\n  }\r\n\r\n  if (source.TypicalLevelSetting) {\r\n    setObj(source.TypicalLevelSetting);\r\n  } else {\r\n    genUtil.Add_2(\r\n      source.OnGetTypicalLevelSetting_Func_Dict,\r\n      () => setObj(source.TypicalLevelSetting),\r\n      false\r\n    )\r\n  }\r\n}\r\n\r\nexport const Handle_Value = (q) => {\r\n  if (q.IsGet_Value) return undefined;\r\n  q.IsGet_Value = true;\r\n\r\n  const setObj = (reVal) => {\r\n    q.Value = reVal;\r\n  }\r\n\r\n  if (q.Replace_Value){\r\n    setObj(q.Replace_Value);\r\n  } else {\r\n    // Thiết lập trước bằng Origin, không dùng thuộc tính để bỏ qua Func\r\n    //setObj(q.Origin_Value);\r\n    q.value = q.Origin_Value;\r\n\r\n    // Sau khi truy xuất xong Replace => thay đổi thông tin\r\n    genUtil.Add_2(\r\n      q.OnSet_Replace_Value_Func_Dict,\r\n      () => setObj(q.Replace_Value),\r\n      false\r\n    )\r\n  }\r\n}","import { MI_ValueItem } from \"./MI_ValueItem\"\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new MI_ValueItem();\r\n\r\n  qI.Value = data.value\r\n  qI.Unit = data.unit\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  if (!dict){\r\n    dict = q.Dict;\r\n  }\r\n\r\n  var qI = new MI_ValueItem();\r\n\r\n  qI.Value = q.Value\r\n  qI.Unit = q.Unit\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n","import * as ft from './Site_FieldType'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport { message } from 'antd';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as util from './SiteUtil'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\nexport class Site {\r\n  _id\r\n\r\n  Row\r\n\r\n  MassItem\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      _id : this._id\r\n    }\r\n\r\n    var info\r\n\r\n    if (this.Row) {\r\n      // projectId\r\n      obj.projectId = pmData().CurrentProject._id\r\n\r\n      var r = this.Row;\r\n      // Filter\r\n      var filter = obj.filter = r.FilterData\r\n\r\n      info = obj.input = {}\r\n    } else {\r\n      obj.massId = this.MassItem._id;\r\n      info = obj;\r\n    }\r\n\r\n    ft.GetList().forEach(x => {\r\n      info[ft.GetKey(x)] = this[x]\r\n    })\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, this.Url,\r\n      () => {\r\n        if (this.Row){\r\n          this._id = undefined;\r\n        }\r\n\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Run Input Row\r\n  Run = () => {\r\n    util.Run(this)\r\n  }\r\n}","import { message } from \"antd\";\r\nimport MassItem from \"../item/base/MassItem\";\r\nimport MassRow from \"../table/row/base/MassRow\";\r\nimport { Site } from \"./Site\"\r\nimport * as urlUtil from './SiteUrl'\r\nimport * as ft from './Site_FieldType'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id;\r\n  ft.GetList().forEach(x => {\r\n    qI[x] = data[ft.GetKey(x)]\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Site();\r\n\r\n  if (dict instanceof MassRow){\r\n    qI.Url = urlUtil.siteexport_url;\r\n    qI.Row = dict;\r\n  } else if (dict instanceof MassItem){\r\n    qI.Url = urlUtil.siteinfo_url;\r\n    qI.MassItem = dict;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = get(dict);\r\n\r\n  ft.GetList().forEach(x => {\r\n    qI[x] = q[x]\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\n// Method\r\nexport const Run = (q) => {\r\n  q.SaveDatabase(false);\r\n\r\n  var list = q.Row.Items;\r\n  var length = list.length\r\n  var i = 0;\r\n  const handleSave = () => {\r\n    i++;\r\n    if (i === length){\r\n      message.success('save successfully!');\r\n    }\r\n  }\r\n\r\n  list.forEach(x => {\r\n    var _id = x.Site?._id;\r\n\r\n    var qI = x.Site = Clone(q, x);\r\n    qI._id = _id;\r\n\r\n    qI.SaveDatabase(false, handleSave);\r\n  })\r\n}","export const siteexport_url = \"https://api.bimdev.vn/api/hb_se\"\r\nexport const siteinfo_url = \"https://api.bimdev.vn/api/hb_si\"","import * as valueItemUtil from './MI_ValueItemUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Property\r\nexport const Handle_FullData = (q) => {\r\n  if (q.IsGet_FullData) return undefined;\r\n  q.IsGet_FullData = true;\r\n\r\n  var massItem = q.Dict;\r\n\r\n  const setObj = () => {\r\n    var typlevel_count = massItem.TLS_LevelGroup ?\r\n      massItem.TLS_LevelGroup.Count : 1\r\n\r\n    var exportset = massItem.ExportSet\r\n\r\n    const setObj2 = (es_multi) => {\r\n      q.FullData = q.Data.map(x => {\r\n        var obj = valueItemUtil.Clone(x);\r\n        obj.Value *= typlevel_count * es_multi;\r\n        return obj;\r\n      });\r\n      q.IsGet_FullData = false;\r\n    }\r\n\r\n    if (!massItem.Phase){\r\n      var es_multi = exportset.Mass_Multiply ? exportset.Mass_Multiply : 1\r\n      setObj2(es_multi);\r\n    } else {\r\n      exportset.PhaseDict.GetItem(massItem.Phase._id, (item) => {\r\n        if (item.Mass_Multiply){\r\n          setObj2(item.Mass_Multiply);\r\n        } else {\r\n          genUtil.Add_2(item.OnSet_Mass_Multiply_Func,\r\n            () => setObj2(item.Mass_Multiply))\r\n        }\r\n      })\r\n    }    \r\n  }\r\n\r\n  var incre = genUtil.IncreFunc(2, setObj);\r\n\r\n  var host = massItem;\r\n  if (host.TLS_LevelGroup || host.Get_TLS_LevelGroup) {\r\n    incre();\r\n  } else {\r\n    genUtil.Add_2(host.OnGet_TLS_LevelGroup_Func_Dict, incre);\r\n  }\r\n\r\n  if (host.ExportSet) {\r\n    incre();\r\n  } else {\r\n    genUtil.Add_2(host.OnSet_ExportSet_Func, incre)\r\n  }\r\n}","export const raw = 'raw'\r\nexport const full = 'full'","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './MI_ValueDictUtil'\r\nimport * as gt from './MI_ValueDict_GroupType'\r\nimport { MI_ValueItem } from './MI_ValueItem'\r\n\r\nexport class MI_ValueDict {\r\n  Data = []\r\n\r\n  // NewVersion\r\n  OnGet_FullData_Func_Dict = []\r\n\r\n  fullData\r\n  get FullData() {\r\n    if (!this.fullData) {\r\n      util.Handle_FullData(this)\r\n    }\r\n    return this.fullData;\r\n  } set FullData(v) {\r\n    this.fullData = v;\r\n\r\n    genUtil.Handle(this.OnGet_FullData_Func_Dict,\r\n      (v) => this.OnGet_FullData_Func_Dict = v);\r\n  }\r\n\r\n  GetItem = (field, group = gt.raw, handle) => {\r\n    const getObj = () => {\r\n      var list = group === gt.raw ? this.Data : this.FullData\r\n      var qI = genUtil.SingleFilter(list, x => x.Unit === field);\r\n      if (!qI && group === gt.raw) {\r\n        qI = new MI_ValueItem();\r\n        qI.Unit = field;\r\n        list.push(qI);\r\n      }\r\n      return qI;\r\n    }\r\n\r\n    if (group === gt.raw || !this.FullData) {\r\n      return getObj();\r\n    } else {\r\n      genUtil.Add_2(\r\n        this.OnGet_FullData_Func_Dict,\r\n        () => {\r\n          var obj = getObj();\r\n          if (handle) {\r\n            handle(obj)\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  GetValue = (field, group = gt.raw, handle, isFormat = false) => {\r\n    const getObj = () => {\r\n      var list = group === gt.raw ? this.Data : this.FullData\r\n      var qI = genUtil.SingleFilter(list, x => x.Unit === field);\r\n      var value = qI ? (isFormat ? qI.ValueString : qI.Value) : undefined;\r\n      return value;\r\n    }\r\n\r\n    if (group === gt.raw || !this.FullData) {\r\n      return getObj();\r\n    } else {\r\n      genUtil.Add_2(\r\n        this.OnGet_FullData_Func_Dict,\r\n        () => {\r\n          var obj = getObj();\r\n          if (handle) {\r\n            handle(obj)\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hb_massreport\"","import * as util from './ReportUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport {url} from './ReportUrl'\r\nimport { message } from 'antd'\r\n\r\nexport class Report {\r\n  projectId\r\n\r\n  versionIds\r\n\r\n  phaseIds\r\n\r\n  IsUpdate_MassType = false\r\n\r\n  // Api\r\n  get ApiData() {\r\n    return {\r\n      _id: this._id,\r\n      projectId : this.projectId,\r\n      versionIds : this.versionIds,\r\n      phaseIds : this.phaseIds,\r\n      isUpdate_MassType : this.IsUpdate_MassType\r\n    }\r\n  }\r\n\r\n  Update = (handle) => {\r\n    this.IsUpdate_MassType = true;\r\n    this.SaveDatabase(false, handle);\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n}","import * as api from '../../../../../../util/apiUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport MassItem from './MassItem';\r\nimport * as elementUtil from '../../../element/ElementUtil'\r\nimport * as mt from '../../MassType'\r\nimport * as ut from '../../../value/ValueUnit'\r\nimport * as mif from '../../field/MassItemField'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as phaseItemUtil from '../phaseValue/MIPh_ItemUtil'\r\nimport * as levelItemUtil from '../levelValue/Level_ItemUtil'\r\nimport * as valueItemUtil from '../value/MI_ValueItemUtil'\r\nimport * as siteUtil from '../../site/SiteUtil'\r\nimport { MI_ValueDict } from '../value/MI_ValueDict';\r\nimport * as exportSetUtil from '../../../exportset/item/base/ExportSetUtil'\r\nimport * as rowFilterUtil from '../../table/row/filter/FilterUtil'\r\nimport * as reportUtil from '../../report/ReportUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (q, isDetailView) => {\r\n  var qI = new MassItem();\r\n\r\n  qI._id = q._id;\r\n\r\n  // ValueData\r\n  if (q.valueData) {\r\n    qI.ValueDict.Data = q.valueData.map\r\n      (x => valueItemUtil.GetFromDb(x, qI))\r\n  } else {\r\n    qI.ValueDict.Data = [\r\n      valueItemUtil.GetFromDb(q, qI)\r\n    ]\r\n  }\r\n\r\n  if (q.ExportSets && q.ExportSets.length !== 0) {\r\n    // var exportSet = exportSetUtil.GetFromDb(q.ExportSets[0])\r\n    // qI.ExportSet = exportSet;\r\n    \r\n    pmData().ExportSet_Dict_ForMass.Get_AddItem(q.ExportSets[0],\r\n      (data) => qI.ExportSet = data)\r\n  }\r\n\r\n  if (q.massTypes.length !== 0) {\r\n    qI.MassType_Obj = q.massTypes[0];\r\n  } else if (qI.ExportSet) {\r\n    var massType_Dict = pmData().MassType_Dict.ListData\r\n    massType_Dict.GetItemById(qI.ExportSet.massTypeId,\r\n      (v) => qI.MassType_Obj = v)\r\n  }\r\n\r\n  if (q.workItems.length !== 0) {\r\n    qI.WorkItem_Obj = q.workItems[0]\r\n  }\r\n\r\n  if (q.levels.length !== 0) {\r\n    qI.Level_Obj = q.levels[0]\r\n  }\r\n\r\n  qI.Info = q.info;\r\n  qI.projectId = q.projectId;\r\n  qI.exportSetId = q.exportSetId;\r\n  qI.exportSetVersionId = q.exportSetVersionId;\r\n  qI.Element = q.Elements && q.Elements.length !== 0 ? q.Elements[0] : undefined;\r\n  qI.Site = q.SiteInfos.length !== 0 ?\r\n    siteUtil.GetFromDb(q.SiteInfos[0], qI) : undefined\r\n\r\n  // //var projectDict = pmData().Project_Dict_ForMassDetail;\r\n  // // Sửa thông tin Project lấy từ ProjectDict\r\n  // var projectDict = pmData().Project_Dict;\r\n  // const setProject = () => {\r\n  //   project = qI.Project = projectDict.Get_Project(projectData);\r\n\r\n  //   if (isDetailView) {\r\n  //     qI.IsDetailView = true;\r\n\r\n  //     if (phase) {\r\n  //       qI.IsHavePhase = true;\r\n  //       var dict = pmData().Phase_Dict_ForMassDetail\r\n  //       var phase = dict.GetItem(phase)\r\n\r\n  //       phase.Project = project;\r\n  //       qI.Phases = [phase]\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // var project\r\n  // var projectData = q.Projects && q.Projects.length !== 0 ? q.Projects[0] : undefined;\r\n  // if (projectData) {\r\n  //   // var dict = pmData().Project_Dict_ForMassDetail\r\n  //   // Cập nhập hoặc lọc thông tin dự án\r\n  //   // project = qI.Project = dict.Get_Project(projectData);\r\n\r\n  //   if (projectDict.Items) {\r\n  //     setProject();\r\n  //   } else {\r\n  //     genUtil.Add_2(projectDict.OnSet_Items_Func, setProject);\r\n  //   }\r\n  // }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProject = (q) => {\r\n  var list = pmData().Project_Dict.Items;\r\n  var { projectId } = q;\r\n  var index = list.findIndex(x => x._id === projectId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\n// Property\r\nexport const GetElementAsync = (q) => {\r\n  var elemId = q.elementId\r\n  if (elemId) {\r\n    elementUtil.GetById(elemId, (data) => {\r\n      q.Element = data\r\n      q.IsGetElement = true;\r\n      q.GetElementDone = true;\r\n    });\r\n  } else {\r\n    q.IsGetElement = true;\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  const setObj = (data) => {\r\n    q.TLS_LevelGroup = data;\r\n    q.IsGet_TLS_LevelGroup = false\r\n  }\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    // Thiết lập tầng điển hình mới nằm trong data.Typical\r\n    var data = tls.Data.Typical\r\n\r\n    var pi = GetValidTLS_PageItem(q, data);\r\n    var obj = GetValidTLS_LevelGroup(q, pi);\r\n    return obj;\r\n  }\r\n\r\n  const func1 = () => {\r\n    if (!q.Phase) {\r\n      // get by project\r\n      var project = q.Project;\r\n      var tls = project.TypicalLevelSetting;\r\n      if (project.GetTypicalLevelSetting || tls) {\r\n        setObj(getLevelGroup_Func(tls));\r\n      } else {\r\n        genUtil.Add_2(\r\n          project.OnGetTypicalLevelSetting_Func_Dict,\r\n          () => setObj(getLevelGroup_Func(project.TypicalLevelSetting))\r\n        )\r\n      }\r\n    } else {\r\n      // get by phase\r\n      var phase = q.Phase;\r\n      if (phase.TypicalLevelSetting){\r\n        setObj(getLevelGroup_Func(phase.TypicalLevelSetting));\r\n      } else {\r\n        genUtil.Add_2(\r\n          phase.OnGet_TypicalLevelSetting_Func,\r\n          () => setObj(getLevelGroup_Func(phase.TypicalLevelSetting))\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  func1();\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      var qVal = q.GetValue_Mas(field);\r\n      isValid = x.Values.includes(qVal);\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  var qVal = q.GetValue_Mas(mif.level);\r\n\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // New Version\r\n    var primary_Values = x.Primary_Values\r\n    if (!validLg && primary_Values.includes(qVal)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\n// ValueDict\r\nexport const GetValueDict = (q) => {\r\n  var qI = new MI_ValueDict();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n// PhaseItem\r\n// export const GetPhaseItems = (q) => {\r\n//   return q.ValidPhasesByInput.map(x => phaseItemUtil.get(x, q));\r\n// }\r\n\r\n// export const Get_Lastest_PhaseItem = (q) => {\r\n//   if (q.IsGet_Lastest_PhaseItem) return undefined;\r\n//   q.IsGet_Lastest_PhaseItem = true;\r\n\r\n//   var list = q.PhaseItems;\r\n//   if (!list || list.length === 0) return undefined;\r\n\r\n//   if (list.length === 1) return list[0];\r\n\r\n//   list.sort((a, b) =>\r\n//     b.Phase.CreatedDate - a.Phase.CreatedDate);\r\n\r\n//   return list[0];\r\n// }\r\n\r\n// LevelItem\r\nexport const GetLevelItem = (q) => {\r\n  return q.OriginLevelItem\r\n  // if (!pmData().CurrentProject) {\r\n  //   return q.OriginLevelItem\r\n  // }\r\n\r\n  // if (q.IsDetailView && !q.IsHavePhase) {\r\n  //   return q.OriginLevelItem\r\n  // }\r\n  // var phaseItem = q.Lastest_PhaseItem;\r\n  // return phaseItem ? phaseItem.LevelItem : q.OriginLevelItem\r\n}\r\n\r\nexport const GetOriginLevelItem = (q) => {\r\n  return levelItemUtil.get(q);\r\n}\r\n\r\n// Method\r\nexport const getByViewDetail = (_id, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbdv/massdetail?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var { viewDetail, masses, phase } = data;\r\n      var items = masses.map(x => {\r\n        return get(x, true, phase)\r\n      });\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","export const byitem = 'byitem'\r\nexport const bycell = 'bycell'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ColorUtil'\r\n\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\n\r\nexport class Color {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      // backgroundColor: observable,\r\n      // color: observable\r\n    })\r\n  }\r\n\r\n  Dict\r\n\r\n  get Cell() {\r\n    return this.Dict\r\n  }\r\n\r\n  get Column() {\r\n    return this.Cell.Column\r\n  }\r\n\r\n  get ValueItem() {\r\n    return this.Cell.ValueData.CurrentItem\r\n  }\r\n\r\n  // background\r\n  // OnSet_BackgroundColor_Func = []\r\n\r\n  // backgroundColor = undefined\r\n  // get BackgroundColor() {\r\n  //   if (!this.backgroundColor) {\r\n  //     util.Handle_BackgroundColor(this)\r\n  //   } return this.backgroundColor\r\n  // } set BackgroundColor(v) {\r\n  //   this.backgroundColor = v;\r\n\r\n  //   genUtil.Handle(this.OnSet_BackgroundColor_Func,\r\n  //     (v) => this.OnSet_BackgroundColor_Func = v)\r\n  // }\r\n\r\n  // background\r\n  get BackgroundColor() {\r\n    return util.GetBackgroundColor(this)\r\n  }\r\n\r\n  get Td_Style() {\r\n    return this.BackgroundColor ?\r\n      {\r\n        backgroundColor: this.BackgroundColor\r\n      }\r\n      : undefined\r\n  }\r\n\r\n  // color\r\n  // color = '#1890ff'\r\n  // get Color() {\r\n  //   return this.color\r\n  // } set Color(v) {\r\n  //   this.color = v;\r\n  // }\r\n\r\n  get Color(){\r\n    return util.GetColor(this)\r\n  }\r\n\r\n  get ValueStyle() {\r\n    return this.Color ?\r\n      {\r\n        color: this.Color,\r\n        fontWeight: 'bold'\r\n      }\r\n      :\r\n      {\r\n        fontWeight: 'bold'\r\n      }\r\n  }\r\n\r\n  get VCS_Item() {\r\n    return util.GetVCS_Item(this)\r\n  }\r\n}","import { PMData } from \"../../../../../single/model/PMData\";\r\nimport { Color } from \"./Color\"\r\n\r\nimport * as filterUtil from '../../../../filter/EntFilterUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\n// instance\r\nexport const get = (dict) => {\r\n  var qI = new Color();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// property\r\nexport const Handle_BackgroundColor = (q) => {\r\n  if (q.IsGet_BackgroundColor) return undefined\r\n  q.IsGet_BackgroundColor = true;\r\n\r\n  const setObj = (vcs_item) => {\r\n    q.BackgroundColor = vcs_item ? vcs_item.Color : '#FFFFFF';\r\n    q.IsGet_BackgroundColor = false;\r\n  }\r\n\r\n  var column = q.Column\r\n  if (column.key.field === 'project' || column.Index === 0\r\n    || pmData().Current_MassTable.Columns.length !== 2) {\r\n    setObj();\r\n  } else {\r\n\r\n  }\r\n}\r\n\r\nexport const GetBackgroundColor = (q) => {\r\n  return q.VCS_Item ? q.VCS_Item.Color : '#FFFFFF'\r\n}\r\n\r\nexport const GetColor = (q) => {\r\n  return q.VCS_Item ? '#FFFFFF' : '#1890ff'\r\n}\r\n\r\nexport const GetVCS_Item = (q) => {\r\n  var valueItem = q.ValueItem;\r\n  var compareValueItem = q.Cell.Row.Cells[0].ValueData.CurrentItem\r\n\r\n  if (!valueItem || !compareValueItem) return undefined;\r\n\r\n  var list = pmData().VersionCompareSetting.Items;\r\n  var ratio = valueItem.Value / compareValueItem.Value\r\n  var item = genUtil.SingleFilter(list, x => filterUtil.IsValid(x.Filter, ratio))\r\n\r\n  return item;\r\n}","import { PMData } from \"../../../../../single/model/PMData\";\r\nimport * as mif from '../../../field/MassItemField'\r\nimport * as filterUtil from '../../../../filter/EntFilterUtil'\r\n\r\nimport * as api from '../../../../../../../util/apiUtil';\r\nimport { url } from './MassCell_Url'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\n\r\nimport { MI_ValueItem } from \"../../../item/value/MI_ValueItem\";\r\nimport * as m_ut from '../../../unit/MassUnitType'\r\nimport { MC_Update } from \"../update/MC_Update\"\r\nimport * as dataUtil from '../../../result/data/DataUtil'\r\nimport * as viewDetailUtil from \"../viewdetail/ViewDetailUtil\";\r\nimport * as valueDataUtil from \"../value/ValueUtil\";\r\nimport * as queryUtil from '../query/QueryUtil'\r\nimport * as subGroupUtil from '../subgroup/base/SubGroupUtil'\r\n\r\nimport * as massItemUtil from '../../../item/base/MassItemUtil'\r\nimport * as mc_ct from './MassCell_CreateType'\r\n\r\n// color\r\nimport * as colorUtil from '../color/ColorUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (col, row, dict) => {\r\n  var qI = genUtil.SingleFilter(row.Cells, (x) => x.Column === col)\r\n  col.Cells.push(qI)\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n// Áp dụng cho CreateType = byitem\r\nexport const GetItems = (q) => {\r\n  if (q.CreateType === mc_ct.bycell) {\r\n    return undefined\r\n  }\r\n\r\n  return []\r\n}\r\n\r\n// Áp dụng cho CreateType = bycell\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  var column = q.Column;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data[0].masses.map(x => {\r\n      var qI = massItemUtil.get(x)\r\n      column.MassItem_Handle(qI);\r\n      return qI;\r\n    });\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var queryData = {}\r\n    var apiData = {\r\n      queryData\r\n    }\r\n\r\n    // q.Row.QueryData.AddQuery(queryData);\r\n    q.QueryData.AddQuery(queryData)\r\n    column.QueryData.AddQuery(apiData, 'list');\r\n\r\n    dataUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n// color data\r\nexport const GetColorData = (q) => {\r\n  return colorUtil.get(q);\r\n}\r\n\r\n// vcs\r\nexport const GetIsHaveVCS_Item = (q) => {\r\n  return q.Dict.ColumnField === mif.Phase\r\n    && pmData().MassResultComp.Phases.length === 2\r\n    && q.ColumnIndex === 1;\r\n}\r\n\r\nexport const GetValueColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return '#FFFFFF';\r\n  } else {\r\n    return '#1890ff';\r\n  }\r\n}\r\n\r\nexport const GetTDBgColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return q.VCS_Item.Color;\r\n  } else {\r\n    return '#FFFFFF';\r\n  }\r\n}\r\n\r\n// Liên quan tới việc lấy TotalValue\r\nexport const Handle_VCS_Item = (q) => {\r\n  var list = pmData().VersionCompareSetting.Items;\r\n\r\n  var cells = q.Row.Cells;\r\n  var compareIndex = cells.findIndex(x => x.ColumnIndex === 0);\r\n  if (compareIndex === -1) {\r\n    q.VCS_Item = undefined;\r\n    return\r\n  }\r\n  var compareItem = cells[compareIndex];\r\n\r\n  const getItem = () => {\r\n    var ratio = q.TotalValue / compareItem.TotalValue;\r\n    var index = list\r\n      .findIndex(x => filterUtil.IsValid(x.Filter, ratio));\r\n    return index !== -1 ? list[index] : undefined;\r\n  }\r\n\r\n  if (compareItem.TotalValue !== undefined) {\r\n    q.VCS_Item = getItem();\r\n  } else {\r\n    genUtil.Add(compareItem.OnGet_TotalValue_Func_Dict, () =>\r\n      q.VCS_Item = getItem())\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroups = (q) => {\r\n  if (q.IsGet_TLS_LevelGroups) return undefined;\r\n  q.IsGet_TLS_LevelGroups = true;\r\n\r\n  var list = [];\r\n  var handledCount = 0;\r\n  var count = q.SubCells ?\r\n    q.SubCells.length : q.Items.length;\r\n\r\n  const checkadd_Val = (val, list) => {\r\n    if (list.findIndex(x => x.id === val.id) === -1) {\r\n      list.push(val);\r\n    }\r\n  }\r\n\r\n  const handle_Val = (val) => {\r\n    handledCount++;\r\n    if (val) {\r\n      if (Array.isArray(val)) {\r\n        val.forEach(x => checkadd_Val(x, list));\r\n      } else {\r\n        checkadd_Val(val, list)\r\n      }\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroups = list;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        genUtil.Add(x.OnGet_TLS_LevelGroups_Func_Dict,\r\n          () => handle_Val(x.TLS_LevelGroup));\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      // var table = q.Dict;\r\n      // var colField = table.ColumnField;\r\n      // if (colField === mif.Phase) {\r\n      //   // Khối lượng theo Phase\r\n      //   targetObj = x.GetPhaseItem(q.Column.Name);\r\n      // } else {\r\n      //   // Khối lượng theo các thuộc tính khác\r\n      // }\r\n\r\n      if (targetObj.TLS_LevelGroup || targetObj.Get_TLS_LevelGroup) {\r\n        handle_Val(targetObj.TLS_LevelGroup);\r\n      } else {\r\n        genUtil.Add(targetObj.OnGet_TLS_LevelGroup_Func_Dict,\r\n          () => handle_Val(targetObj.TLS_LevelGroup));\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// ValueData\r\nexport const GetValueData = (q) => {\r\n  var qI = valueDataUtil.get(q);\r\n  return qI;\r\n}\r\n\r\n// TotalValue\r\nexport const ReHandle_TotalValueData = (q) => {\r\n  q.IsGet_TotalValueData = false;\r\n  Handle_TotalValueData(q);\r\n}\r\n\r\nexport const Handle_TotalValueData = (q) => {\r\n  if (q.IsGet_TotalValueData) return undefined;\r\n  q.IsGet_TotalValueData = true;\r\n\r\n  var totalVal_Data = m_ut.GetList().map(x => {\r\n    var obj = new MI_ValueItem();\r\n    obj.Unit = x;\r\n    return obj;\r\n  })\r\n\r\n  var handledCount = 0;\r\n  var list = q.SubCells ? q.SubCells : q.Items\r\n  var count = list.length\r\n\r\n  const handle_Val = (valData, item) => {\r\n    handledCount++;\r\n\r\n    var deleteIds = []\r\n    totalVal_Data.forEach((x, i) => {\r\n      var unit = x.Unit;\r\n      var item = genUtil.SingleFilter(valData,\r\n        (a) => a.Unit === unit);\r\n\r\n      if (item === undefined) {\r\n        // deleteIds.push(i);\r\n        x.IsMissing = true;\r\n      } else {\r\n        x.Value += item.Value;\r\n      }\r\n    })\r\n\r\n    // deleteIds.forEach((x, i) => {\r\n    //   totalVal_Data.splice(x - i, 1);\r\n    // })\r\n\r\n    if (handledCount === count) {\r\n      // Lọc các Value = 0\r\n      totalVal_Data = totalVal_Data\r\n        .filter(x => x.Value)\r\n      q.TotalValueData = totalVal_Data;\r\n      q.IsGet_TotalValueData = false;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TotalValueData) {\r\n        handle_Val(x.TotalValueData, x)\r\n      } else {\r\n        genUtil.Add_2(x.OnGet_TotalValueData_Func,\r\n          () => {\r\n            handle_Val(x.TotalValueData, x)\r\n          });\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x.ValueDict;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.FullData !== undefined) {\r\n        handle_Val(targetObj.FullData, x)\r\n      } else {\r\n        genUtil.Add_2(targetObj.OnGet_FullData_Func_Dict,\r\n          () => {\r\n            handle_Val(targetObj.FullData, x)\r\n          });\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const Set_TotalValueData = (q, v) => {\r\n  q.Row.AddHandleTotalData_Cell(q);\r\n}\r\n\r\nexport const Handle_CurrentTotalValueItem = (q) => {\r\n  var unit = q.Unit;\r\n  if (!unit) return;\r\n\r\n  const setObj = () => {\r\n    q.CurrentTotalValueItem =\r\n      genUtil.SingleFilter(q.TotalValueData,\r\n        (x) => x.Unit === unit)\r\n  }\r\n\r\n  if (q.TotalValueData) {\r\n    setObj()\r\n  } else {\r\n    genUtil.Add_2(\r\n      q.OnGet_TotalValueData_Func,\r\n      setObj\r\n    )\r\n  }\r\n}\r\n\r\n// Warning\r\nexport const GetIsHaveWarning = (q) => {\r\n  if (q.Row.Field !== mif.level) {\r\n    return false\r\n  } else {\r\n    const getWarningFunc = (levelGroups) => {\r\n      return levelGroups.length !== 0;\r\n    }\r\n\r\n    if (q.TLS_LevelGroups) {\r\n      return getWarningFunc(q.TLS_LevelGroups);\r\n    } else {\r\n      genUtil.Add(q.OnGet_TLS_LevelGroups_Func_Dict,\r\n        () => {\r\n          q.IsHaveWarning = getWarningFunc(q.TLS_LevelGroups)\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup_Descriptions = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup_Descriptions) return undefined;\r\n  q.IsGet_TLS_LevelGroup_Descriptions = true;\r\n\r\n  const handle_Val = (val, list, handledCount, count) => {\r\n    handledCount++;\r\n    if (list.indexOf(val) === -1) {\r\n      list.push(val);\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroup_Descriptions = list;\r\n    }\r\n  }\r\n\r\n  const getDescFunc = (levelGroups) => {\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = levelGroups.length\r\n\r\n    levelGroups.forEach(x => {\r\n      if (x.FullDescription) {\r\n        handle_Val(x.FullDescription, list, handledCount, count);\r\n      } else {\r\n        // Để false, xử lý nhiều Funcs hơn, nhưng thực thi thành công :v\r\n        genUtil.Add(x.OnGetLevelStorageList_Func_Dict, () => {\r\n          handle_Val(x.FullDescription, list, handledCount, count)\r\n        }, false)\r\n      }\r\n    })\r\n  }\r\n\r\n  if (q.TLS_LevelGroups) {\r\n    getDescFunc(q.TLS_LevelGroups)\r\n  } else {\r\n    q.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n      getDescFunc(q.TLS_LevelGroups)\r\n    })\r\n  }\r\n}\r\n\r\n// Sup - Sub\r\nexport const Get_SupItem = (q) => {\r\n  if (q.IsGet_SupItem) return undefined;\r\n  q.IsGet_SupItem = true;\r\n\r\n  var supRow = q.Row.SupItem;\r\n  if (!supRow) return null;\r\n\r\n  var list = supRow.Cells;\r\n  var index = list.findIndex(x => x.Column === q.Column);\r\n  return index !== -1 ? list[index] : null\r\n}\r\n\r\nexport const Get_SubCells = (q) => {\r\n  var subRows = q.Row.SubItems;\r\n\r\n  if (subRows && subRows.length !== 0) {\r\n    var col = q.Column;\r\n    var list = subRows.map((x, i, a) => {\r\n      var obj = x.GetCellByColumn(col)\r\n      return obj;\r\n    }).filter(x => x !== undefined);\r\n\r\n    return list;\r\n  }\r\n}\r\n\r\nexport const Handle_HaveValue_SubCells = (q) => {\r\n  if (q.IsGet_HaveValue_SubCells) return undefined\r\n  q.IsGet_HaveValue_SubCells = true;\r\n\r\n  var subcells = q.SubCells\r\n\r\n  const setObj = () => {\r\n    q.HaveValue_SubCells = subcells.filter(x => \r\n      x.ValueData.Data.length !== 0)\r\n    q.IsGet_HaveValue_SubCells = false;\r\n  }\r\n\r\n  var sc_incre = genUtil.IncreFunc(subcells.length, setObj);\r\n\r\n  subcells.forEach(sc => {\r\n    var vd = sc.ValueData;\r\n    if (vd.Data){\r\n      sc_incre();\r\n    } else {\r\n      genUtil.Add_2(vd.OnSet_Data_Func, sc_incre);\r\n    }\r\n  })\r\n}\r\n\r\n// Update\r\nexport const GetUpdate = (q) => {\r\n  var qI = new MC_Update();\r\n  qI.Host = q;\r\n\r\n  return qI;\r\n}\r\n\r\n// ViewDetail\r\nexport const GetViewDetail = (q) => {\r\n  var qI = viewDetailUtil.get(q);\r\n  return qI;\r\n}\r\n\r\n// Query\r\nexport const GetQueryData = (q) => {\r\n  return queryUtil.get(q);\r\n}\r\n\r\n// Subgroup\r\nexport const GetSubGroupData = (q) => {\r\n  return subGroupUtil.get(q);\r\n}\r\n\r\n// Method\r\n// Save\r\nexport const Save = (q, mainHandle) => {\r\n  // valuedata\r\n  var vd = q.ValueData;\r\n\r\n  // Save thông tin Info (Key, FullKey) - Query (Field-Value) - ValueData \r\n  const saveQuery = () => {\r\n    q.QueryData.SaveDatabase(false)\r\n  }\r\n\r\n  const saveValue = () => {\r\n    // var vd = q.ValueData;\r\n    const s_vd = () => {\r\n      vd.Save();\r\n    }\r\n\r\n    s_vd();\r\n\r\n    // if (vd.Data) {\r\n    //   s_vd();\r\n    // } else {\r\n    //   genUtil.Add_2(vd.OnSet_Data_Func,\r\n    //     s_vd);\r\n    // }\r\n  }\r\n\r\n  const saveInfo = (handle) => {\r\n    q.SaveDatabase(false, () => {\r\n      if (handle) {\r\n        handle();\r\n      }\r\n\r\n      // Sau khi lấy Id -> lưu query và value\r\n      saveQuery();\r\n      saveValue();\r\n    });\r\n  }\r\n\r\n  // find fullkey database, kiểm tra thông tin có tồn tại hay không\r\n  const find = (handle) => {\r\n    var apiData = {\r\n      fullkey: q.Row.FullValue\r\n    }\r\n\r\n    var column =q.Column;\r\n    column.QueryData.AddQuery(apiData);\r\n    apiData.reportId = column.Report._id\r\n\r\n    const apiFunc = () => api.post(`${url}/find`, apiData);\r\n    apiFunc().then(res => res.data).then(data => {\r\n      data = data.length === 1 ? data[0] : undefined\r\n      handle(data)\r\n    })\r\n  }\r\n\r\n  // Hàm xử lý chính\r\n  const main = () => {\r\n    // Không có giá trị, ta bỏ qua lưu vết cột này\r\n    if (vd.Data.length === 0){\r\n      mainHandle();\r\n      return;\r\n    }\r\n\r\n    find(data => {\r\n      if (!data) {\r\n        saveInfo(mainHandle);\r\n      } else {\r\n        q._id = data._id;\r\n\r\n        if (mainHandle) {\r\n          mainHandle();\r\n        }\r\n\r\n        saveValue();\r\n      }\r\n    })\r\n  }\r\n\r\n  // process\r\n  if (vd.Data) {\r\n    main();\r\n  } else {\r\n    genUtil.Add_2(vd.OnSet_Data_Func, main);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as mif from '../../../field/MassItemField'\r\nimport { PMData } from '../../../../../single/model/PMData';\r\nimport * as util from './MassCellUtil'\r\nimport { message } from 'antd';\r\nimport {url} from './MassCell_Url'\r\n\r\nimport * as mc_ct from './MassCell_CreateType'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueColor: observable,\r\n      tdBgColor: observable,\r\n      isHaveWarning: observable,\r\n      tls_LevelGroup_Descriptions: observable,\r\n      vcs_Item: observable,\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  get Table() {\r\n    return this.Dict\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Column.Index;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    } return this.items;\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  GetItems_FromApi = () => {\r\n    util.Handle_Items(this)\r\n  }\r\n\r\n  // Unit\r\n  get Unit() {\r\n    return this.Row.Unit\r\n  }\r\n\r\n  // ValueData\r\n  valueData\r\n  get ValueData(){\r\n    if (!this.valueData){\r\n      this.valueData = util.GetValueData(this)\r\n    } return this.valueData\r\n  }\r\n\r\n  // Sup - Sub\r\n  supItem\r\n  get SupItem() {\r\n    if (this.supItem === undefined) {\r\n      this.supItem = util.Get_SupItem(this);\r\n    }\r\n    return this.supItem;\r\n  } set SupItem(v) {\r\n    this.supItem = v;\r\n  }\r\n\r\n  subCells\r\n  get SubCells() {\r\n    if (!this.subCells) {\r\n      this.subCells = util.Get_SubCells(this);\r\n    }\r\n    return this.subCells;\r\n  } set SubCells(v) {\r\n    this.subCells = v;\r\n\r\n    // reset haveValue subcells\r\n    this.HaveValue_SubCells = undefined\r\n  }\r\n\r\n  OnSet_HaveValue_SubCells_Func = []\r\n\r\n  haveValue_SubCells\r\n  get HaveValue_SubCells(){\r\n    if (!this.haveValue_SubCells){\r\n      util.Handle_HaveValue_SubCells(this)\r\n    } return this.haveValue_SubCells;\r\n  } set HaveValue_SubCells(v){\r\n    this.haveValue_SubCells = v;\r\n\r\n    genUtil.Handle(this.OnSet_HaveValue_SubCells_Func,\r\n      (v) => this.OnSet_HaveValue_SubCells_Func = v)\r\n  }\r\n\r\n  // AsString = () => {\r\n  //   console.log(`${this.Column.Name} - ${this.Row.Name} - ${this.TotalValue}`)\r\n  // }\r\n\r\n  // Update\r\n  update\r\n  get Update() {\r\n    if (!this.update) {\r\n      this.update = util.GetUpdate(this)\r\n    } return this.update\r\n  }\r\n\r\n  // ViewDetail\r\n  viewDetail\r\n  get ViewDetail(){\r\n    if (!this.viewDetail){\r\n      this.viewDetail = util.GetViewDetail(this)\r\n    } return this.viewDetail;\r\n  }\r\n\r\n  get AllItems() {\r\n    if (this.SubCells) {\r\n      return this.SubCells.map(x => x.Items).reduce((a, b) => a.concat(b), []);\r\n    }\r\n    return this.Items;\r\n  }\r\n\r\n  // color data\r\n  colorData\r\n  get ColorData(){\r\n    if (!this.colorData){\r\n      this.colorData = util.GetColorData(this)\r\n    } return this.colorData\r\n  }\r\n\r\n  isHaveVCS_Item\r\n  get IsHaveVCS_Item() {\r\n    if (!this.isHaveVCS_Item) {\r\n      this.isHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n    }\r\n    return this.isHaveVCS_Item;\r\n  }\r\n  set IsHaveVCS_Item(v) {\r\n    this.isHaveVCS_Item = v;\r\n  }\r\n\r\n  vcs_Item = undefined\r\n  get VCS_Item() {\r\n    return this.vcs_Item;\r\n  }\r\n  set VCS_Item(v) {\r\n    this.vcs_Item = v;\r\n\r\n    this.ValueColor = util.GetValueColor(this);\r\n    this.TDBgColor = util.GetTDBgColor(this)\r\n  }\r\n\r\n  valueColor = '#1890ff'\r\n  get ValueColor() {\r\n    return this.valueColor;\r\n  }\r\n  set ValueColor(v) {\r\n    this.valueColor = v\r\n  }\r\n\r\n  tdBgColor = undefined\r\n  get TDBgColor() {\r\n    return this.tdBgColor;\r\n  }\r\n  set TDBgColor(v) {\r\n    this.tdBgColor = v;\r\n  }\r\n\r\n  get AStyle() {\r\n    return {\r\n      color: this.ValueColor,\r\n      fontWeight: 'bold'\r\n    }\r\n  }\r\n\r\n  get TDStyle() {\r\n    return {\r\n      backgroundColor: this.TDBgColor\r\n    }\r\n  }\r\n\r\n  OnGet_TLS_LevelGroups_Func_Dict = []\r\n  set Get_TLS_LevelGroups(v) {\r\n    this.OnGet_TLS_LevelGroups_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  tls_LevelGroups\r\n  get TLS_LevelGroups() {\r\n    if (!this.tls_LevelGroups) {\r\n      util.Handle_TLS_LevelGroups(this);\r\n    }\r\n    return this.tls_LevelGroups;\r\n  } set TLS_LevelGroups(v) {\r\n    this.tls_LevelGroups = v;\r\n    this.Get_TLS_LevelGroups = true;\r\n  }\r\n\r\n  isHaveWarning = undefined\r\n  get IsHaveWarning() {\r\n    if (this.isHaveWarning === undefined) {\r\n      this.isHaveWarning = util.GetIsHaveWarning(this);\r\n    }\r\n    return this.isHaveWarning;\r\n  } set IsHaveWarning(v) {\r\n    this.isHaveWarning = v;\r\n  }\r\n\r\n  tls_LevelGroup_Descriptions = undefined\r\n  get TLS_LevelGroup_Descriptions() {\r\n    if (!this.tls_LevelGroup_Descriptions) {\r\n      util.Handle_TLS_LevelGroup_Descriptions(this);\r\n    }\r\n    return this.tls_LevelGroup_Descriptions;\r\n  } set TLS_LevelGroup_Descriptions(v) {\r\n    this.tls_LevelGroup_Descriptions = v;\r\n  }\r\n\r\n  // Query\r\n  queryData\r\n  get QueryData(){\r\n    if (!this.queryData){\r\n      this.queryData = util.GetQueryData(this)\r\n    } return this.queryData;\r\n  }\r\n\r\n  // SubGroup\r\n  subGroupData\r\n  get SubGroupData(){\r\n    if (!this.subGroupData){\r\n      this.subGroupData = util.GetSubGroupData(this)\r\n    } return this.subGroupData;\r\n  }\r\n\r\n  // CreateType\r\n  // Tạo bằng cắc lặp qua MassItem (byitem) hay tính toán sẵn (bycell)\r\n  // mặc định là byitem\r\n  createType\r\n  get CreateType(){\r\n    if (!this.createType){\r\n      this.createType = mc_ct.byitem\r\n    } return this.createType\r\n  } set CreateType(v){\r\n    this.createType = v;\r\n\r\n    this.Items = util.GetItems(this);\r\n  }\r\n\r\n  // Api\r\n  get ApiData(){\r\n    var column = this.Column;\r\n\r\n    var obj = {\r\n      _id : this._id,\r\n      // projectId : this.Column.Data._id,\r\n      supId : this.SupItem?._id,\r\n      key : this.Row.RawValue,\r\n      fullkey : this.Row.FullValue\r\n    }\r\n\r\n    column.QueryData.AddQuery(obj);\r\n    obj.reportId = column.Report._id\r\n\r\n    return obj;\r\n  }\r\n\r\n  // Database\r\n  // Lưu thông tin Cell và ValueData\r\n  Save = (handle) => {\r\n    util.Save(this, handle)\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n}","export const text = 'text'\r\nexport const select = 'select'","import { SelectVM } from \"../../../../../../select/SelectVM\";\r\nimport * as textUtil from \"../../../../../../text/TextVMUtil\";\r\nimport * as genUtil from '../../../../../../../util/generalUtil';\r\nimport * as rs from './MR_Unit_RenderState'\r\nimport * as rUtil from '../base/MassRowUtil'\r\nimport * as u_sn from '../update/MRU_SectionName'\r\nimport * as u_dt from '../../../../update/Update_DirectionType'\r\nimport * as uc_sn from '../../cell/update/MCU_SectionName'\r\nimport { InfoCircleOutlined } from \"@ant-design/icons\";\r\nimport { Popover } from \"antd\";\r\n\r\n// Command\r\nimport * as tct from '../../command/item/base/CommandType'\r\n\r\n// Instance\r\n\r\n\r\n// Property\r\nexport const GetUpdate_DirectionType = (q) => {\r\n  return q.Dict.SubItems.length === 0 ? u_dt.upper\r\n    : u_dt.none\r\n}\r\n\r\nexport const GetUnit_SelectVM = (q) => {\r\n  var qI = new SelectVM();\r\n  qI.Placeholder = '...'\r\n\r\n  const setObj = () => {\r\n    var data = q.UnitDict\r\n    qI.Items = data\r\n    qI.IdRender = (v) => v.Unit\r\n    qI.TitleRender = (v) => q.ItemRender(v)\r\n\r\n    // Chỉ làm việc này khi khởi tạo SelectVM\r\n    if (!q.Is_Unit_Select_Created) {\r\n      var host = q.Dict;\r\n      q.Is_Unit_Select_Created = true;\r\n\r\n      if (q.Update_DirectionType === u_dt.upper) {\r\n        q.SetUnit_FromHost(rUtil.Get_DefaultUnit(host));\r\n      }\r\n    }\r\n  }\r\n\r\n  if (q.UnitDict) {\r\n    setObj()\r\n  }\r\n\r\n  // Khi cập nhập Units, tự động cập nhập List ở trên\r\n  genUtil.Add_2(\r\n    q.OnSet_UnitDict_Func,\r\n    setObj, false)\r\n\r\n  qI.OnSelectedItemChanged = (v) => {\r\n    if (!q.IsUndo) {\r\n      q.IsUndo = true;\r\n      q.CurrentUnitItem = v;\r\n    } else {\r\n      SelectUnit(q, v);\r\n      // var table = q.Table\r\n      // SetUndo(q, (undo) => {\r\n      //   table.CommandDict.Add(\r\n      //     {\r\n      //       Key: tct.changeunitrow,\r\n      //       Undo: undo\r\n      //     })\r\n      // });\r\n    }\r\n  }\r\n\r\n  qI.OnSetOpen = (v) => {\r\n    if (!v) {\r\n      q.RenderState = rs.text\r\n    }\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetUnit_RenderVM = (q) => {\r\n  var qI = textUtil.get(q.CurrentUnit)\r\n  return qI;\r\n}\r\n\r\nexport const GetUnit_RenderView = (q) => {\r\n  return q.ItemRender(q.CurrentUnitItem)\r\n}\r\n\r\n// Units\r\nexport const Handle_UnitDict = (q) => {\r\n  if (q.IsGet_UnitDict) return undefined;\r\n  q.IsGet_UnitDict = true;\r\n\r\n  var host = q.Dict;\r\n\r\n  const setObj = () => {\r\n    // if (q.Row.Title === '30 Degree'){\r\n    //   q.IsDebug = true;\r\n    // }\r\n\r\n    var list = host.Cells.map(x => x.ValueData.Data);\r\n    var unitDict\r\n\r\n    list.forEach((x, i) => {\r\n      // if (q.IsDebug){\r\n      //   debugger\r\n      // }\r\n\r\n      if (i === 0) {\r\n        unitDict = x.map(y => {\r\n          return {\r\n            Unit: y.Unit,\r\n            IsMissing: y.IsMissing\r\n          }\r\n        });\r\n      } else {\r\n        // unitDict.forEach((y, j) => {\r\n        //   var item = genUtil.SingleFilter(x, (a) => y === a.Unit);\r\n        //   if (!item) {\r\n        //     // Unit trong UnitDict không có trong phần tử (x,i)\r\n        //     y.IsMissing = true;\r\n        //   }\r\n        // })\r\n\r\n        var mapIndexs = []\r\n        // Kiểm tra Unit không có trong UnitDict\r\n        x.forEach(x_unit => {\r\n          var index = unitDict.findIndex(u => u.Unit === x_unit.Unit);\r\n          if (index === -1){\r\n            // không có x_unit trong unitDict\r\n            unitDict.push({\r\n              Unit : x_unit.Unit,\r\n              IsMissing: x_unit.IsMissing\r\n            })\r\n            mapIndexs.push(unitDict.length-1);\r\n          } else {\r\n            mapIndexs.push(index);\r\n          }\r\n        })\r\n\r\n        // Kiểm tra Unit chưa đc map\r\n        for (let u_i = 0; u_i < unitDict.length; u_i++) {\r\n          if (!mapIndexs.includes(u_i)){\r\n            // mapIndexs không chứa u_i đang xét\r\n            unitDict[u_i].IsMissing = true;\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    q.UnitDict = unitDict;\r\n    q.IsGet_UnitDict = false\r\n  }\r\n\r\n  if (host.Is_HandleTotalData_Cells) {\r\n    setObj()\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.On_HandleTotalData_Cells_Func,\r\n      setObj\r\n    )\r\n  }\r\n}\r\n\r\nexport const Set_CurrentUnit = (q, v) => {\r\n  var dirType = q.Update_DirectionType\r\n  var qI = q.Dict;\r\n\r\n  // Update Data hiện tại\r\n  qI.Update.Run({\r\n    Section: u_sn.celldata,\r\n    Data: { Sections: uc_sn.unit }\r\n  }, u_dt.none)\r\n\r\n  if (dirType !== u_dt.none) {\r\n    qI.Update.Run(u_sn.unit, dirType, false)\r\n  }\r\n\r\n  q.Update_DirectionType = u_dt.both\r\n}\r\n\r\n// Method\r\nexport const SelectUnit = (q, v) => {\r\n  var row = q.Dict;\r\n\r\n  // Command\r\n  q.Table.CommandDict.Do(\r\n    {\r\n      action: tct.changeunit,\r\n      target: {\r\n        type: 'row',\r\n        key: row.RetrieveData\r\n      },\r\n      value: v\r\n    }, row\r\n  )\r\n}\r\n\r\nexport const SelectUnit_Main = (q, value, handle, handleUndo) => {\r\n  SetUndo(q, handleUndo);\r\n\r\n  q.CurrentUnitItem = value;\r\n\r\n  if (handle){\r\n    handle();\r\n  }\r\n}\r\n\r\nexport const SetUndo = (q, handleUndo) => {\r\n  var oldUnit = q.CurrentUnit;\r\n\r\n  var undo\r\n  if (oldUnit) {\r\n    undo = () => {\r\n      q.SetUnit_FromHost(oldUnit);\r\n    }\r\n  } else {\r\n    // Lưu các ô có Unit bên trong\r\n    var dict = []\r\n    var row = q.Dict;\r\n    const getRows = (r) => {\r\n      var unit = r.UnitData.CurrentUnit;\r\n      if (r !== row && r.UnitData.CurrentUnit) {\r\n        dict.push({\r\n          Row: r,\r\n          Unit: unit,\r\n          DirectionType: u_dt.lower\r\n        })\r\n      } else {\r\n        dict.push({\r\n          Row: r,\r\n          Unit: undefined,\r\n          DirectionType: r === row ? u_dt.upper : u_dt.none\r\n        })\r\n        r.SubItems.forEach(x => getRows(x));\r\n      }\r\n    }\r\n\r\n    getRows(row);\r\n\r\n    undo = () => {\r\n      dict.forEach(x => {\r\n        x.Row.Update.Run({\r\n          Section: u_sn.unit,\r\n          Data: { Unit: x.Unit }\r\n        }, x.DirectionType)\r\n      })\r\n    }\r\n  }\r\n\r\n  handleUndo(undo);\r\n}\r\n\r\n// ItemRender\r\nexport const ItemRender = (q, v) => {\r\n  return <>\r\n    {v ? <div className='f-ac'>\r\n      <div className='f1'>{v.Unit}</div>\r\n      {v.IsMissing ?\r\n        <Popover trigger='hover'\r\n          content={<span className='warning'>\r\n            Một số đầu mục con không có đơn vị này!\r\n          </span>}>\r\n          <InfoCircleOutlined className='warning' />\r\n        </Popover>\r\n        : ''}\r\n    </div>\r\n      : ''}\r\n  </>\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MR_UnitUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as rs from './MR_Unit_RenderState'\r\nimport SelectView from '../../../../../../select/SelectView';\r\nimport * as u_dt from '../../../../update/Update_DirectionType'\r\n\r\nexport class MR_Unit {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      unitDict: observable,\r\n      renderState: observable,\r\n      currentUnitItem : observable,\r\n      IsMissing : observable\r\n    })\r\n  }\r\n\r\n  get Row(){\r\n    return this.Dict;\r\n  }\r\n\r\n  get Table() {\r\n    return this.Row.Table\r\n  }\r\n\r\n  // Update\r\n  update_DirectionType\r\n  get Update_DirectionType() {\r\n    if (!this.update_DirectionType) {\r\n      this.update_DirectionType =\r\n        util.GetUpdate_DirectionType(this)\r\n    } return this.update_DirectionType\r\n  } set Update_DirectionType(v) {\r\n    this.update_DirectionType = v\r\n  }\r\n\r\n  // Unit\r\n  OnSet_UnitDict_Func = []\r\n\r\n  unitDict = undefined\r\n  get UnitDict() {\r\n    if (!this.unitDict) {\r\n      util.Handle_UnitDict(this)\r\n    } return this.unitDict\r\n  } set UnitDict(v) {\r\n    this.unitDict = v;\r\n    genUtil.Handle(this.OnSet_UnitDict_Func,\r\n      (v) => this.OnSet_UnitDict_Func = v)\r\n  }\r\n\r\n  Reset_UnitDict = () => {\r\n    util.Handle_UnitDict(this);\r\n  }\r\n\r\n  currentUnitItem = undefined\r\n  get CurrentUnitItem() {\r\n    return this.currentUnitItem\r\n  } set CurrentUnitItem(v) {\r\n    this.currentUnitItem = v;\r\n\r\n    // Check Missing\r\n    if (this.IsMissing_Pending){\r\n      this.IsMissing_Pending = false;\r\n      this.IsMissing = true;\r\n    } else {\r\n      this.IsMissing = false;\r\n    }\r\n\r\n    // Set CurrentUnit\r\n    this.CurrentUnit = v?.Unit\r\n  }\r\n\r\n  currentUnit\r\n  get CurrentUnit() {\r\n    return this.currentUnit\r\n  } set CurrentUnit(v) {\r\n    if (this.currentUnit === v) {\r\n      this.Update_DirectionType = u_dt.none\r\n      // return\r\n    }\r\n\r\n    this.currentUnit = v\r\n    util.Set_CurrentUnit(this, v);\r\n  }\r\n\r\n  SetUnit_FromHost = (v) => {\r\n    const setObj = () => {\r\n      this.IsUndo = false;\r\n\r\n      if (!v) {\r\n        this.Unit_SelectVM.SetValue(v);\r\n      }\r\n      else {\r\n        var list = this.UnitDict;\r\n        var index = list.findIndex(x => x.Unit === v);\r\n        if (index !== -1) {\r\n          this.Unit_SelectVM.SetValue(list[index]);\r\n        } else {\r\n          this.IsMissing_Pending = true;\r\n          this.Unit_SelectVM.SetValue(undefined);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.UnitDict) {\r\n      setObj()\r\n    } else {\r\n      genUtil.Add_2(\r\n        this.OnSet_UnitDict_Func,\r\n        setObj\r\n      )\r\n    }\r\n  }\r\n\r\n  Is_Unit_Select_Created\r\n\r\n  unit_SelectVM\r\n  get Unit_SelectVM() {\r\n    if (!this.unit_SelectVM) {\r\n      this.unit_SelectVM = util.GetUnit_SelectVM(this)\r\n    } return this.unit_SelectVM;\r\n  }\r\n\r\n  get Unit_RenderView() {\r\n    return util.GetUnit_RenderView(this)\r\n  }\r\n\r\n  renderState = rs.text\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n  }\r\n\r\n  OnMouseEnter = () => {\r\n    this.RenderState = rs.select\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    if (this.Unit_SelectVM.Open) {\r\n      return\r\n    }\r\n    this.RenderState = rs.text\r\n  }\r\n\r\n  get MainView() {\r\n    var obj = this.Unit_SelectVM;\r\n\r\n    switch (this.RenderState) {\r\n      case rs.select:\r\n        return <SelectView className='massrow__unit__select'\r\n          store={this.Unit_SelectVM} />\r\n      case rs.text:\r\n        return this.Unit_RenderView\r\n    }\r\n  }\r\n\r\n  get Update() {\r\n    return this.Row.Update\r\n  }\r\n\r\n  IsUndo = true;\r\n\r\n  SelectUnit_Main = (value, handle, handleUndo) => {\r\n    util.SelectUnit_Main(this, value, handle, handleUndo);\r\n  }\r\n\r\n  SetUndo = (handleUndo) => {\r\n    util.SetUndo(this, handleUndo)\r\n  }\r\n\r\n  // Render\r\n  ItemRender = (v) => {\r\n    return util.ItemRender(this, v)\r\n  }\r\n\r\n  IsMissing = false\r\n\r\n  get MissingCss(){\r\n    return this.IsMissing ? 'mr__unit__missing' : ''\r\n  }\r\n}","export const manual = 'manual'\r\nexport const mouseEvent = 'mouseEvent'","export const collapse = 'collapse'\r\nexport const hidden = 'hidden'","export const mobx = 'mobx'\r\nexport const style = 'style'","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { EntDelete } from './EntDelete';\r\nimport { Button, Popover } from 'antd';\r\nimport './EntDelete.css'\r\nimport * as vt from './EntDelete_VisibleType'\r\nimport * as ut from './EntDelete_UseType'\r\n\r\nclass EntDeleteView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntDelete()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    data.ClassName = data.ClassName ? data.ClassName :\r\n      (this.props.className ? this.props.className : '')\r\n    data.Style = data.Style ? data.Style : this.props.style\r\n\r\n    return (\r\n      <>\r\n        {data.UseType === ut.style || data.Is_Visible ?\r\n          <>\r\n            <div style={data.WrapperStyle}>\r\n              {/* Popover */}\r\n              {data.WrapperView}\r\n\r\n              {/* Addition Element */}\r\n              {data.AdditionElement}\r\n            </div>\r\n          </>\r\n          : (data.VisibleType === vt.hidden ?\r\n            <div className={data.BlankStyle} />\r\n            :\r\n            '')\r\n        }\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(EntDeleteView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as tt from './EntDelete_ToggleType'\r\nimport * as vt from './EntDelete_VisibleType'\r\nimport * as ut from './EntDelete_UseType'\r\nimport * as util from './EntDeleteUtil'\r\nimport EntDeleteView from './EntDeleteView';\r\nimport { TextVM } from '../text/TextVM';\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport class EntDelete {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      is_Visible: observable,\r\n      is_Hover_Visible: observable,\r\n      VisibleType: observable,\r\n      UseType: observable,\r\n      ClassName: observable,\r\n      Style: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    } return this._id;\r\n  } set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  is_Visible = undefined\r\n  get Is_Visible() {\r\n    if (!this.is_Visible) {\r\n      this.is_Visible = util.GetDefault_Is_Visible(this)\r\n    } return this.is_Visible\r\n  } set Is_Visible(v) {\r\n    this.is_Visible = v;\r\n  }\r\n\r\n  ToggleType = tt.manual\r\n\r\n  VisibleType = vt.collapse\r\n\r\n  is_Hover_Visible = undefined\r\n  get Is_Hover_Visible() {\r\n    return this.is_Hover_Visible\r\n  } set Is_Hover_Visible(v) {\r\n    this.is_Hover_Visible = v;\r\n\r\n    if (this.ToggleType === tt.mouseEvent) {\r\n      if (!v) {\r\n        this.Is_Visible = false\r\n      }\r\n    }\r\n\r\n    if (this.OnSet_Is_Hover_Visible) {\r\n      this.OnSet_Is_Hover_Visible(v);\r\n    }\r\n  }\r\n\r\n  Show_Hover = (e) => {\r\n    e.stopPropagation();\r\n\r\n    if (this.OnPre_ShowHover) {\r\n      this.OnPre_ShowHover();\r\n    }\r\n\r\n    this.Is_Hover_Visible = true;\r\n  }\r\n\r\n  Toggle_Hover = (v) => {\r\n    this.Is_Hover_Visible = v\r\n  }\r\n\r\n  // Run\r\n  IsRun_Cancel\r\n\r\n  PreRun = (e) => {\r\n    e.stopPropagation();\r\n\r\n    this.IsRun_Cancel = false\r\n    if (this.OnPreRun) {\r\n      this.OnPreRun()\r\n    }\r\n\r\n    if (!this.IsRun_Cancel) {\r\n      this.Run();\r\n    }\r\n  }\r\n\r\n  run\r\n  get Run() {\r\n    if (!this.run) {\r\n      this.run = util.GetDefault_Run(this)\r\n    } return this.run\r\n  } set Run(v) {\r\n    this.run = v;\r\n  }\r\n\r\n  PreCancel = (e) => {\r\n    e.stopPropagation();\r\n    this.Cancel();\r\n  }\r\n\r\n  cancel\r\n  get Cancel() {\r\n    if (!this.cancel) {\r\n      this.cancel = util.GetDefault_Cancel(this)\r\n    } return this.cancel\r\n  } set Cancel(v) {\r\n    this.cancel = v;\r\n  }\r\n\r\n  Show = () => {\r\n    this.Is_Visible = true\r\n  }\r\n\r\n  // Hide\r\n  Hide = () => {\r\n    this.IsRun_Cancel = false\r\n    if (this.OnPreHide) {\r\n      this.OnPreHide()\r\n    }\r\n\r\n    if (this.IsRun_Cancel) return\r\n\r\n    if (!this.Is_Hover_Visible) {\r\n      this.Is_Visible = false\r\n    }\r\n  }\r\n\r\n  // Style\r\n  ClassName = undefined\r\n\r\n  Style = undefined\r\n\r\n  AdditionElement = ''\r\n\r\n  BlankStyle = 'delete__blank'\r\n\r\n  Title = \"Xác nhận lệnh?\"\r\n\r\n  showHover_Button\r\n  get ShowHover_Button() {\r\n    return this.showHover_Button ? this.showHover_Button\r\n      : this.Retrieve_ShowHover_Button();\r\n  } set ShowHover_Button(v) {\r\n    this.showHover_Button = v;\r\n  }\r\n\r\n  retrieve_ShowHover_Button\r\n  get Retrieve_ShowHover_Button() {\r\n    if (!this.retrieve_ShowHover_Button) {\r\n      this.retrieve_ShowHover_Button =\r\n        util.GetDefault_Retrieve_ShowHover_Button(this)\r\n    } return this.retrieve_ShowHover_Button\r\n  } set Retrieve_ShowHover_Button(v) {\r\n    this.retrieve_ShowHover_Button = v;\r\n  }\r\n\r\n  get View() {\r\n    return <EntDeleteView key={this.id} store={this} />\r\n  }\r\n\r\n  // Modal\r\n  get WrapperView() {\r\n    return this.Retrieve_WrapperView();\r\n  }\r\n\r\n  retrieve_WrapperView\r\n  get Retrieve_WrapperView() {\r\n    if (!this.retrieve_WrapperView) {\r\n      this.retrieve_WrapperView = util.GetDefault_Retrieve_WrapperView(this)\r\n    } return this.retrieve_WrapperView\r\n  } set Retrieve_WrapperView(v) {\r\n    this.retrieve_WrapperView = v;\r\n  }\r\n\r\n  modal_ButtonView\r\n  get Modal_ButtonView() {\r\n    if (!this.modal_ButtonView) {\r\n      this.modal_ButtonView = util.GetDefault_Modal_ButtonView(this)\r\n    }\r\n    return this.modal_ButtonView\r\n  } set Modal_ButtonView(v) {\r\n    this.modal_ButtonView = v;\r\n  }\r\n\r\n  modal_InfoView\r\n  get Modal_InfoView() {\r\n    if (!this.modal_InfoView) {\r\n      this.modal_InfoView = util.GetDefault_Modal_InfoView(this)\r\n    }\r\n    return this.modal_InfoView\r\n  } set Modal_InfoView(v) {\r\n    this.modal_InfoView = v;\r\n  }\r\n\r\n  modal_ContentView\r\n  get Modal_ContentView() {\r\n    if (!this.modal_ContentView) {\r\n      this.modal_ContentView = util.GetDefault_Modal_ContentView(this)\r\n    } return this.modal_ContentView\r\n  } set Modal_ContentView(v) {\r\n    this.modal_ContentView = v;\r\n  }\r\n\r\n  // UseStyle\r\n  UseType = ut.mobx\r\n\r\n  get WrapperStyle() {\r\n    switch (this.UseType) {\r\n      case ut.mobx:\r\n        return undefined\r\n      case ut.style:\r\n        return this.Is_Visible ? undefined : { display:'none' }\r\n    }\r\n  }\r\n}","import { Button, Popover } from 'antd'\r\nimport * as tt from './EntDelete_ToggleType'\r\n\r\n// Property\r\nexport const GetDefault_Is_Visible = (q) => {\r\n  return q.ToggleType === tt.manual ?\r\n    true : false\r\n}\r\n\r\nexport const GetDefault_Retrieve_ShowHover_Button = (q) => {\r\n  return () => <Button type='primary' size='small'\r\n    className={`btn_delete ${q.ClassName}`}\r\n    style={q.Style}\r\n    onClick={q.Show_Hover}\r\n  >x</Button>\r\n}\r\n\r\nexport const GetDefault_Run = (q) => {\r\n  return () => {\r\n    q.Is_Hover_Visible = false;\r\n    if (q.OnRun) {\r\n      q.OnRun();\r\n    }\r\n  }\r\n}\r\n\r\nexport const GetDefault_Cancel = (q) => {\r\n  return () => {\r\n    q.Is_Hover_Visible = false;\r\n    if (q.OnCancel) {\r\n      q.OnCancel();\r\n    }\r\n  }\r\n}\r\n\r\nexport const GetDefault_Retrieve_WrapperView = (q) => {\r\n  return () => <Popover\r\n    content={\r\n      <>\r\n        {q.Modal_ContentView}\r\n      </>\r\n    }\r\n    title={q.Title}\r\n    trigger=\"click\"\r\n    visible={q.Is_Hover_Visible}\r\n    onVisibleChange={q.Toggle_Hover}\r\n  >\r\n    {q.ShowHover_Button}\r\n  </Popover>\r\n}\r\n\r\nexport const GetDefault_Modal_ButtonView = (q) => {\r\n  return <div className='delete__btn-group'>\r\n    <Button type='primary' size='small'\r\n      onClick={q.PreRun}>ok</Button>\r\n    <Button type='text' size='small'\r\n      className='btn_blank'\r\n      onClick={q.PreCancel}>cancel</Button>\r\n  </div>\r\n}\r\n\r\nexport const GetDefault_Modal_InfoView = (q) => {\r\n  return ''\r\n}\r\n\r\nexport const GetDefault_Modal_ContentView = (q) => {\r\n  return <>\r\n    {q.Modal_InfoView}\r\n    {q.Modal_ButtonView}\r\n  </>\r\n}","import * as u_dt from '../../../../update/Update_DirectionType'\r\nimport * as u_sn from '../update/MRU_SectionName'\r\nimport * as uc_sn from '../../cell/update/MCU_SectionName'\r\nimport * as dt from './MR_DeleteType'\r\nimport * as util from './MR_DeleteUtil'\r\n\r\n// Command\r\nimport * as tct from '../../command/item/base/CommandType'\r\n\r\nexport class MR_Delete {\r\n  Run = (data, handleUndo) => {\r\n    util.Run(this, data, handleUndo)\r\n  }\r\n\r\n  DeleteHost = () => {\r\n    var row = this.Host;\r\n    var table = row.Table\r\n\r\n    // Command\r\n    table.CommandDict.Do(\r\n      {\r\n        action: tct._delete,\r\n        target: {\r\n          type: 'row',\r\n          key: row.RetrieveData\r\n        }\r\n      }, row\r\n    )\r\n  }\r\n\r\n  DeleteHost_Main = (handle, handleUndo) => {\r\n    var row = this.Host;\r\n\r\n    row.Update.Run({\r\n      Section: u_sn._delete,\r\n      Data: { DeleteType: dt.removedata }\r\n    }, u_dt.upper, true,\r\n      handleUndo)\r\n\r\n    if (handle){\r\n      handle();\r\n    }\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport * as dt from './MR_DeleteType'\r\nimport * as u_dt from '../../../../update/Update_DirectionType'\r\nimport * as u_sn from '../update/MRU_SectionName'\r\nimport * as uc_sn from '../../cell/update/MCU_SectionName'\r\nimport { PMData } from '../../../../../single/model/PMData';\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.OnRun = () => {\r\n    q.DeleteHost();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// Method\r\n// Hàm xử lý theo lưu vết Report (New)\r\nexport const Run = (q, data, handleUndo) => {\r\n  // undo\r\n  undoFuncs = undefined\r\n  if (handleUndo) {\r\n    var undoFuncs = []\r\n    handleUndo(() => {\r\n      undoFuncs.forEach(x => x())\r\n    });\r\n  }\r\n\r\n\r\n  var deleteType = data.DeleteType\r\n  var row = q.Host\r\n  var table = row.Table\r\n\r\n  var supItem = row.SupItem;\r\n  var list = row.CurrentList;\r\n\r\n  // remove row chứ ko phải replace\r\n  if (deleteType === dt.removedata) {\r\n    // Add Table_TBody_RemoveRows\r\n    var removeRows = table.TBody.RemoveRows;\r\n\r\n    // Undo\r\n    var index = removeRows.length;\r\n    if (handleUndo) {\r\n      undoFuncs.push(() => {\r\n        removeRows.splice(index, 1)\r\n      });\r\n    }\r\n\r\n    // Do\r\n    removeRows.push(row);\r\n  }\r\n\r\n  if (supItem && list.length === 1) {\r\n    data.IsContinue = true\r\n  } else {\r\n    data.IsContinue = false\r\n\r\n    var index = row.Index\r\n\r\n    // Undo\r\n    if (handleUndo) {\r\n      undoFuncs.push(() => {\r\n        list.splice(index, 0, row)\r\n      });\r\n    }\r\n    // Do\r\n    list.splice(index, 1);\r\n\r\n    if (supItem) {\r\n      // Undo\r\n      if (handleUndo) {\r\n        undoFuncs.push(() => {\r\n          supItem.Update.Run(\r\n            [\r\n              { Section: u_sn.celldata, Data: { Sections: uc_sn.subcells } },\r\n              u_sn.unitlist\r\n            ],\r\n            u_dt.upper\r\n          )\r\n        })\r\n\r\n        // Thực hiện undo\r\n        supItem.UnitData.SetUndo((undo) => {\r\n          undoFuncs.push(undo);\r\n        });\r\n      }\r\n      // Do\r\n      supItem.Update.Run(\r\n        [\r\n          { Section: u_sn.celldata, Data: { Sections: uc_sn.subcells } },\r\n          u_sn.unitlist, u_sn.unit],\r\n        u_dt.upper\r\n      )\r\n    }\r\n  }\r\n}","import * as u_dt from '../../../../update/Update_DirectionType'\r\nimport * as sn from './MRU_SectionName'\r\nimport * as uc_sn from '../../cell/update/MCU_SectionName'\r\nimport * as hUtil from '../base/MassRowUtil'\r\nimport { message } from 'antd'\r\n\r\nexport class MR_Update {\r\n  get UnitData() {\r\n    return this.Host.UnitData\r\n  }\r\n\r\n  get Cells() {\r\n    return this.Host.Cells\r\n  }\r\n\r\n  get SupItem() {\r\n    return this.Host.SupItem\r\n  }\r\n\r\n  get SubItems() {\r\n    return this.Host.SubItems\r\n  }\r\n\r\n  Update_Units = (data, dirType) => {\r\n    this.UnitData.Reset_UnitDict();\r\n  }\r\n\r\n  // *Set vào phần UnitData\r\n  Update_Unit = (data, dirType) => {\r\n    var unit\r\n    if (data) {\r\n      //unit = data.Unit ? data.Unit : ut.each\r\n      unit = data.Unit;\r\n    } else {\r\n      switch (dirType) {\r\n        case u_dt.upper:\r\n          unit = hUtil.Get_DefaultUnit(this.Host)\r\n          break;\r\n        case u_dt.lower:\r\n          unit = this.Host.SupItem.Unit\r\n          break;\r\n      }\r\n    }\r\n\r\n    var ud = this.UnitData\r\n    ud.Update_DirectionType = u_dt.none\r\n    ud.SetUnit_FromHost(unit);\r\n  }\r\n\r\n  Update_CellData = (data, dirType) => {\r\n    if (data && data.Unit_SetType) {\r\n      this.Host.Unit_SetType = data.Unit_SetType\r\n    }\r\n\r\n    if (data && data.Sections) {\r\n      this.Cells.forEach(x => x.Update.Run(data.Sections));\r\n    } else {\r\n      throw 'invalid'\r\n    }\r\n  }\r\n\r\n  Update_Delete = (data, dirType, handleUndo) => {\r\n    this.Host.DeleteData.Run(data, handleUndo);\r\n    this.IsContinue = data.IsContinue;\r\n  }\r\n\r\n  Update_AddSub = (data, dirType, handleUndo) => {\r\n    var q = this.Host;\r\n    var list = q.SubItems;\r\n\r\n    var undoFuncs\r\n    if (handleUndo) {\r\n      undoFuncs = []\r\n      handleUndo(() => {\r\n        undoFuncs.forEach(x => x())\r\n      })\r\n\r\n      undoFuncs.push(() => {\r\n        list.splice(list.length - 1, 1);\r\n\r\n        q.Update.Run(\r\n          [{ Section: sn.celldata, Data: { Sections: uc_sn.subcells } },\r\n          sn.unitlist\r\n          ],\r\n          u_dt.upper\r\n        )\r\n      })\r\n\r\n      q.UnitData.SetUndo((undo) => {\r\n        undoFuncs.push(undo)\r\n      })\r\n    }\r\n\r\n    list.push(data.Item);\r\n\r\n    q.Update.Run(\r\n      [{ Section: sn.celldata, Data: { Sections: uc_sn.subcells } },\r\n      sn.unitlist, sn.unit\r\n      ],\r\n      u_dt.upper\r\n    )\r\n\r\n    this.IsContinue = false;\r\n  }\r\n\r\n  Run = (sections, dirType, isHostApplied = true, handleUndo) => {\r\n    if (!dirType) {\r\n      message.error(\"dirType is undefined!\");\r\n      return\r\n    }\r\n\r\n    // Undo\r\n    var undoFuncs = []\r\n    var undo = () => {\r\n      undoFuncs.forEach(x => x());\r\n    }\r\n\r\n    if (!Array.isArray(sections)) {\r\n      sections = [sections]\r\n    }\r\n\r\n    if (isHostApplied) {\r\n      sections.forEach(x => {\r\n        this.RunItem(x, dirType, (undo) => {\r\n          undoFuncs.push(undo)\r\n        })\r\n      })\r\n    }\r\n\r\n\r\n\r\n    if (!this.IsContinue) {\r\n      this.IsContinue = true\r\n    }\r\n    else {\r\n      switch (dirType) {\r\n        case u_dt.none:\r\n          break;\r\n        case u_dt.lower:\r\n          this.SubItems.forEach(x => {\r\n            x.Update.Run(sections, dirType)\r\n          })\r\n          break;\r\n        case u_dt.upper:\r\n          this.SupItem?.Update.Run(sections, dirType)\r\n          break;\r\n        case u_dt.both:\r\n          // Update Sub trước sau đó đến Sub\r\n          this.SubItems.forEach(x => {\r\n            x.Update.Run(sections, u_dt.lower)\r\n          })\r\n          this.SupItem?.Update.Run(sections, u_dt.upper)\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (handleUndo) {\r\n      handleUndo(undo)\r\n    }\r\n  }\r\n\r\n  RunItem = (secData, dirType, handleUndo) => {\r\n    var section = typeof secData === 'string' ?\r\n      secData : secData.Section\r\n    var data = secData.Data\r\n\r\n    switch (section) {\r\n      case sn.unitlist:\r\n        this.Update_Units(data, dirType, handleUndo);\r\n        break;\r\n      case sn.unit:\r\n        this.Update_Unit(data, dirType, handleUndo);\r\n        break;\r\n      case sn.celldata:\r\n        this.Update_CellData(data, dirType, handleUndo);\r\n        break;\r\n      case sn._delete:\r\n        this.Update_Delete(data, dirType, handleUndo);\r\n        break;\r\n      case sn.addsub:\r\n        this.Update_AddSub(data, dirType, handleUndo);\r\n        break;\r\n    }\r\n  }\r\n\r\n  IsContinue = true\r\n}","import * as util from './SiteVMUtil'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\n\r\n\r\nexport class SiteVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Is_Modal_Visible: observable,\r\n    })\r\n  }\r\n\r\n  GetValue = (field) => {\r\n    return this.ModelItem[field]\r\n  }\r\n  SetValue = (field, v) => {\r\n    this.ModelItem[field] = v;\r\n  }\r\n\r\n  inputVMs\r\n  get InputVMs() {\r\n    if (!this.inputVMs) {\r\n      this.inputVMs = util.GetInputVMs(this)\r\n    } return this.inputVMs;\r\n  }\r\n\r\n  Initial = () => {\r\n    util.Initial(this)\r\n  }\r\n\r\n  Run_SetValue = () => {\r\n    util.Run_SetValue(this)\r\n  }\r\n\r\n  OpenModal = () => {\r\n    this.Initial();\r\n    this.Is_Modal_Visible = true;\r\n    this.Is_Run_Valid = false;\r\n  }\r\n\r\n  ModalCancel = () => {\r\n    this.Is_Modal_Visible = false\r\n  }\r\n\r\n  ModalOK = () => {\r\n    this.Run_SetValue();\r\n\r\n    if (this.Is_OK_Valid) {\r\n      this.Is_Modal_Visible = false\r\n      this.Is_Run_Valid = true;\r\n\r\n      this.Run();\r\n    } else {\r\n      message.warn('Bạn phải điền đủ các trường thông tin!');\r\n    }\r\n  }\r\n\r\n  Run = () => {\r\n    if (this.Is_Run_Valid) {\r\n      this.ModelItem.Run();\r\n    }\r\n  }\r\n\r\n  // Database\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle);\r\n  }\r\n\r\n  // View\r\n  get InputView() {\r\n    return util.GetInputView(this)\r\n  }\r\n\r\n  Is_Modal_Visible = false\r\n\r\n  get ModalView() {\r\n    return util.GetModalView(this)\r\n  }\r\n}","export const RemoveTime = (dateTime) => {\r\n  var year = dateTime.getFullYear()\r\n  var month = dateTime.getMonth()\r\n  var date = dateTime.getDate()\r\n\r\n  return new Date(year, month, date)\r\n}\r\n\r\nexport const ConvertToDate = (dateString, format) => {\r\n  if (!dateString) return undefined;\r\n\r\n  var refinedString\r\n  switch (format) {\r\n    case 'dd/MM/yyyy':\r\n      var q1 = dateString.split('/')\r\n      if (q1.length !== 3) {\r\n        return undefined;\r\n      }\r\n\r\n      if (!Is_DayString_Valid(q1[0])\r\n      || !Is_MonthString_Valid(q1[1])\r\n      || !Is_YearString_Valid(q1[2])){\r\n        return undefined\r\n      }\r\n      \r\n      refinedString = q1.reverse().join('-')\r\n      break;\r\n    default:\r\n      refinedString = dateString;\r\n      break;\r\n  }\r\n\r\n  return new Date(refinedString)\r\n}\r\n\r\nconst Is_DayString_Valid = (dayS) => {\r\n  if (dayS.length < 1 || dayS.length > 2) return false;\r\n  if (isNaN(dayS)) return false\r\n\r\n  var day = parseInt(dayS)\r\n  if (day < 1 || day > 31) return false;\r\n  return true;\r\n}\r\n\r\nconst Is_MonthString_Valid = (monthS) => {\r\n  if (monthS.length < 1 || monthS.length > 2) return false;\r\n  if (isNaN(monthS)) return false\r\n\r\n  var month = parseInt(monthS)\r\n  if (month < 1 || month > 12) return false;\r\n  return true;\r\n}\r\n\r\nconst Is_YearString_Valid = (yearS) => {\r\n  if (yearS.length !== 4) return false;\r\n  if (isNaN(yearS)) return false\r\n\r\n  return true;\r\n}\r\n\r\nexport const ConvertToString = (date, format) => {\r\n  if (!date) return undefined\r\n\r\n  var weekday = date.toLocaleDateString(\"en-US\", { weekday: 'short' })\r\n  var day = date.toLocaleDateString(\"en-US\", { day: 'numeric' })\r\n  var month = date.toLocaleDateString(\"en-US\", { month: '2-digit' })\r\n  var year = date.toLocaleDateString(\"en-US\", { year: 'numeric' })\r\n\r\n  switch(format){\r\n    case 'dd/MM/yyyy':\r\n    default:\r\n      return `${day}/${month}/${year}`;\r\n  }\r\n}","import * as dateUtil from '../../util/dateUtil'\r\n\r\n// Property\r\nexport const GetDate = (q) => {\r\n  return dateUtil.ConvertToDate(q.Content, 'dd/MM/yyyy')\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DatePickerUtil'\r\nimport * as dateUtil from '../../util/dateUtil'\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport { Button } from \"antd\";\r\nimport './DatePicker.css'\r\n\r\nexport class DatePicker {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder: observable,\r\n      dateOnPicker: observable,\r\n      Is_Popover_Visible: observable\r\n    })\r\n  }\r\n\r\n  GetContentFunc\r\n\r\n  content = undefined\r\n  get Content() {\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    this.Date = util.GetDate(this)\r\n  }\r\n\r\n  date = undefined\r\n  get Date() {\r\n    if (!this.date) {\r\n      this.date = util.GetDate(this)\r\n    } return this.date\r\n  } set Date(v) {\r\n    this.date = v;\r\n    this.DateOnPicker = v;\r\n  }\r\n\r\n  dateOnPicker = undefined\r\n  get DateOnPicker() {\r\n    if (!this.dateOnPicker) {\r\n      this.dateOnPicker = this.Date\r\n    } return this.dateOnPicker\r\n  } set DateOnPicker(v) {\r\n    if (v) {\r\n      this.dateOnPicker = v\r\n    }\r\n  }\r\n\r\n  SetDate = (v) => {\r\n    this.Date = v;\r\n    this.content = dateUtil.ConvertToString(v, 'dd/MM/yyyy');\r\n  }\r\n\r\n  Set_DateOnPicker = (v) => {\r\n    this.HidePopover();\r\n    this.SetDate(v);\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  State = 'text'\r\n\r\n  get DatePickerView() {\r\n    return <div className='datepicker__popover__wrapper'>\r\n      <ReactDatePicker selected={this.DateOnPicker} inline\r\n        value={this.DateOnPicker}\r\n        // onChange={this.Set_DateOnPicker}\r\n        onSelect={this.Set_DateOnPicker}\r\n      />\r\n      <Button type='primary' size='small'\r\n        className='btn-danger' onClick={this.HidePopover}>x</Button>\r\n    </div>\r\n  }\r\n\r\n  Is_Popover_Visible = false\r\n\r\n  ShowPopover = () => {\r\n    this.Is_Popover_Visible = true\r\n  }\r\n\r\n  HidePopover = () => {\r\n    this.Is_Popover_Visible = false\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { DatePicker } from \"./DatePicker\";\r\nimport InputView from \"../input/InputView\";\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport { Popover } from \"antd\";\r\n\r\nclass DatePickerView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DatePicker();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state\r\n\r\n    return (\r\n      <>\r\n        <Popover content={data.DatePickerView}\r\n          visible={data.Is_Popover_Visible} >\r\n          <InputView store={data} \r\n            onFocus={data.ShowPopover} />\r\n        </Popover>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DatePickerView)","import { TextVM } from \"../../../../text/TextVM\";\r\nimport { SiteVM } from \"./SiteVM\"\r\nimport * as ft from './Site_FieldType'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport InputView from \"../../../../input/InputView\";\r\nimport { Button } from \"antd\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport './Site.css'\r\nimport ReactDatePicker from \"react-datepicker\";\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport * as dateUtil from '../../../../../util/dateUtil'\r\nimport DatePickerView from \"../../../../datepicker/DatePickerView\";\r\nimport { DatePicker } from \"../../../../datepicker/DatePicker\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new SiteVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetInputVMs = (q) => {\r\n  return ft.GetList().map(x => {\r\n    var qI\r\n    switch (x) {\r\n      case ft.AcceptanceDate:\r\n        qI = new DatePicker();\r\n        break;\r\n      default:\r\n        qI = new TextVM();\r\n        break;\r\n    }\r\n\r\n    qI.Placeholder = ''\r\n    qI.Field = x;\r\n\r\n    return qI;\r\n  })\r\n}\r\n\r\n// View\r\nconst GetInputItem_Render = (q, x) => {\r\n  switch (x.Field) {\r\n    case ft.AcceptanceDate:\r\n      x.Initial = () => x.SetDate(q.GetValue(x.Field))\r\n      x.GetValue = () => x.Date\r\n      return <DatePickerView store={x} />\r\n    default:\r\n      x.Initial = () => x.Content = q.GetValue(x.Field)\r\n      x.GetValue = () => x.Content\r\n      return <InputView store={x} />\r\n  }\r\n}\r\n\r\nconst GetInputItem_Wrapper_Render = (q, x) => {\r\n  var item = GetInputItem_Render(q, x);\r\n  var field = x.Field;\r\n\r\n  switch (field) {\r\n    case ft.SupervisorContractor:\r\n    case ft.SupervisorConsultant:\r\n    case ft.SupervisorClient:\r\n    case ft.SubContractor:\r\n      var qI = pmDataVM().SG_Dict_Dict;\r\n\r\n      var func = []\r\n      var funcWrapper = () => func[0]();\r\n\r\n      var button = <Button type='primary' size='small'\r\n        className='btn-warning'\r\n        onClick={funcWrapper}>\r\n        ...\r\n      </Button>\r\n\r\n      var popover = qI.Popover_Render(button);\r\n\r\n      func.push(() => {\r\n        qI.CurrentField = field\r\n        qI.CurrentMassType = q.Dict.MassType\r\n        qI.SetValue = (v) => x.Content = v;\r\n        qI.CurrentPopover = popover\r\n      })\r\n\r\n      return <div className='f-ac'>\r\n        <div className='f1'>\r\n          {item}\r\n        </div>\r\n        {popover.View}\r\n      </div>\r\n    default:\r\n      return item\r\n  }\r\n}\r\n\r\nexport const GetInputView = (q) => {\r\n  var obj = <table className='siteinput__table'>\r\n    <tbody>\r\n      {q.InputVMs.map(x => {\r\n        return <tr className='siteinput__tr' key={genUtil.randomId()}>\r\n          <th className='siteinput__title'>{ft.GetTitle(x.Field) + ':'}</th>\r\n          <td className='siteinput__input'>\r\n            {/* <InputView store={x} /> */}\r\n            {GetInputItem_Wrapper_Render(q, x)}\r\n          </td>\r\n        </tr>\r\n      })}\r\n    </tbody>\r\n  </table>\r\n\r\n  return obj;\r\n}\r\n\r\nexport const GetModalView = (q) => {\r\n  return <Modal title='Thông tin công trường' visible={q.Is_Modal_Visible}\r\n    footer={\r\n      <>\r\n        <Button type='primary' size='small' onClick={q.ModalOK}>run</Button>\r\n        <Button type='text' size='small' onClick={q.ModalCancel}>cancel</Button>\r\n      </>\r\n    }>\r\n    {q.InputView}\r\n  </Modal>\r\n}\r\n\r\n// Method\r\nexport const Initial = (q) => {\r\n  q.InputVMs.forEach(x => {\r\n    // x.Content = q.GetValue(x.Field)\r\n    x.Initial();\r\n  })\r\n}\r\n\r\nexport const Run_SetValue = (q) => {\r\n  var isValid = q.Is_OK_Valid = true;\r\n  q.InputVMs.forEach(x => {\r\n    if (isValid) {\r\n      // var content = x.Content;\r\n      var content = x.GetValue();\r\n      if (content && (typeof content !== 'string' || content.length !== 0)) {\r\n        q.SetValue(x.Field, content);\r\n      } else {\r\n        q.Is_OK_Valid = false\r\n      }\r\n    }\r\n  })\r\n}","import * as util from './FactoryUtil'\r\n\r\nexport class Factory {\r\n  Dict\r\n\r\n  get Row(){\r\n    return this.Dict;\r\n  }\r\n\r\n  get Fields(){\r\n    return this.Row.TempSubFields\r\n  } set Fields(v){\r\n    this.Row.TempSubFields = v;\r\n  }\r\n\r\n  Run = () => {\r\n    util.Run(this);\r\n  }\r\n\r\n  MainRun = (value,  mainHandle, handleUndo) => {\r\n    util.MainRun(this, value, mainHandle, handleUndo);\r\n  }\r\n}","import { Factory } from \"./Factory\"\r\nimport * as genUtil from '../../../../../../../util/generalUtil';\r\nimport * as cellUtil from '../../cell/base/MassCellUtil'\r\n\r\nimport * as mif from '../../../field/MassItemField'\r\n\r\nimport * as ut from '../../../unit/MassUnitType'\r\nimport * as u_dt from '../../../../update/Update_DirectionType'\r\nimport * as u_sn from '../update/MRU_SectionName'\r\nimport * as uc_sn from '../../cell/update/MCU_SectionName'\r\nimport * as r_st from '../save/SaveType'\r\nimport { PMData } from \"../../../../../single/model/PMData\";\r\n\r\n// Command\r\nimport * as tct from '../../command/item/base/CommandType'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Factory();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Method\r\nexport const Run = (q) => {\r\n  if (!Validate(q)) return\r\n\r\n  var row = q.Row;\r\n  var table = row.Table\r\n  // Command\r\n  table.CommandDict.Do(\r\n    {\r\n      action: tct.subgroup,\r\n      target: {\r\n        type: 'row',\r\n        key: row.RetrieveData\r\n      },\r\n      value: q.Fields\r\n    }, row\r\n  )\r\n}\r\n\r\nconst Validate = (q) => {\r\n  if (!q.Fields) {\r\n    q.Fields = []\r\n  }\r\n\r\n  var subFields = q.Fields;\r\n  var row = q.Row;\r\n\r\n  var isSame = true;\r\n  if (row.SubFields.length !== subFields.length) {\r\n    isSame = false;\r\n  } else {\r\n    row.SubFields.forEach((x, i) => {\r\n      if (isSame && x !== subFields[i]) {\r\n        isSame = false;\r\n      }\r\n    })\r\n  }\r\n  if (isSame) return false;\r\n\r\n  return true;\r\n}\r\n\r\nexport const MainRun = (q, value, mainHandle, handleUndo) => {\r\n  q.Fields = value;\r\n\r\n  // Undo\r\n  var undoFuncs\r\n  if (handleUndo) {\r\n    undoFuncs = []\r\n    handleUndo(() => {\r\n      undoFuncs.forEach(x => x());\r\n    });\r\n  };\r\n\r\n  const addUndo = (undo) => {\r\n    if (handleUndo) {\r\n      undoFuncs.push(undo);\r\n    }\r\n  }\r\n\r\n  var row = q.Row;\r\n\r\n  // set subcells\r\n  const finish = () => {\r\n    row.IsDataPending = false\r\n    if (mainHandle) {\r\n      mainHandle();\r\n    }\r\n  }\r\n\r\n  const updateSubFields = () => {\r\n    Update_SubFields(q, finish);\r\n  }\r\n\r\n  const updateUnit = () => {\r\n    Update_Unit(q, updateSubFields, addUndo)\r\n  }\r\n\r\n  var updateSubCells_Funcs = []\r\n  const updateSubCells = () => {\r\n    var usc_incre = genUtil.IncreFunc(updateSubCells_Funcs.length,\r\n      updateUnit)\r\n\r\n    updateSubCells_Funcs.forEach(x => x(usc_incre));\r\n  }\r\n\r\n  // Thiết lập SubComponent\r\n  Setup_GroupComponent(q, addUndo)\r\n\r\n  // OpenSub\r\n  // Undo\r\n  var oldShowSub = row.IsShowSub;\r\n  if (handleUndo) {\r\n    undoFuncs.push(() => {\r\n      row.IsShowSub = oldShowSub\r\n    })\r\n  }\r\n\r\n  // Do\r\n  row.IsShowSub = true;\r\n\r\n  // Thể hiện trang thái xử lý dữ liệu\r\n  row.IsDataPending = true;\r\n\r\n  var subFields = q.Fields;\r\n\r\n  // Tính toán cell byitem hoặc bycell\r\n  var cells = row.Cells;\r\n\r\n  var cell_length = cells.length;\r\n  var cell_i = 0;\r\n  const cell_incre = () => {\r\n    cell_i++;\r\n    if (cell_i === cell_length) {\r\n      // setSubCells();\r\n      //updateUnit();\r\n      updateSubCells();\r\n    }\r\n  }\r\n\r\n  cells.forEach(cell => {\r\n    Cell_Group(cell, subFields, cell_incre, undefined,\r\n      (pf) => updateSubCells_Funcs.push(pf))\r\n  })\r\n}\r\n\r\n// Thiết lập các thông tin SubFields trước khi chạy lệnh\r\nconst Setup_GroupComponent = (q, handleUndo) => {\r\n  // Undo\r\n  var undoFuncs\r\n  if (handleUndo) {\r\n    undoFuncs = []\r\n    handleUndo(() => {\r\n      undoFuncs.forEach(x => x());\r\n    });\r\n  };\r\n\r\n  var row = q.Row;\r\n  var subFields = q.Fields;\r\n\r\n  // Undo\r\n  if (handleUndo) {\r\n    var oldSubItems = row.SubItems;\r\n    undoFuncs.push(() => {\r\n      row.SubItems = oldSubItems\r\n    })\r\n  }\r\n  // Do\r\n  row.SubItems = []\r\n\r\n  // Undo\r\n  var oldSubFields = row.SubFields;\r\n  if (handleUndo) {\r\n    undoFuncs.push(() => {\r\n      row.SubFields = oldSubFields\r\n    });\r\n  }\r\n  // Do\r\n  row.SubFields = subFields;\r\n}\r\n\r\nconst Cell_Group = (cell, fields, mainHandle, handleUndo, pendingHandle) => {\r\n  // Pending Func\r\n  var pendingFuncs = []\r\n\r\n  pendingHandle((p_handle) => {\r\n    var p_incre = genUtil.IncreFunc(pendingFuncs.length, p_handle)\r\n    pendingFuncs.forEach(x => x(p_incre));\r\n  });\r\n\r\n  var subGroup_Query\r\n  if (cell.SubGroups_Query) {\r\n    subGroup_Query = genUtil.SingleFilter(cell.SubGroups_Query,\r\n      (x) => x.subfield === fields[0]);\r\n  }\r\n\r\n  if (subGroup_Query) {\r\n    const nextFields_Func = () => {\r\n      // Next SubFields\r\n      var nextFields = fields.filter((x, i) => i !== 0);\r\n      if (nextFields.length !== 0) {\r\n        var subCells = cell.SubCells\r\n\r\n        var sc_length = subCells.length;\r\n        var sc_i = 0;\r\n        const sc_incre = () => {\r\n          sc_i++;\r\n          if (sc_i === sc_length) {\r\n            mainHandle();\r\n          }\r\n        }\r\n\r\n        cell.SubCells.forEach(sc => {\r\n          Cell_Group(sc, nextFields, sc_incre, undefined, (pf) => pendingFuncs.push(pf))\r\n        })\r\n      } else {\r\n        mainHandle();\r\n      }\r\n    }\r\n\r\n    Cell_GroupByCell(cell, subGroup_Query, nextFields_Func, undefined,\r\n      (pf) => pendingFuncs.push(pf));\r\n  } else {\r\n    const groupByItem = () =>\r\n      Cell_GroupByItem(cell, fields, mainHandle, undefined,\r\n        (pf) => pendingFuncs.push(pf));\r\n\r\n    if (cell.Items) {\r\n      groupByItem();\r\n    } else {\r\n      genUtil.Add_2(\r\n        cell.OnSet_Items_Func,\r\n        groupByItem\r\n      )\r\n\r\n      cell.GetItems_FromApi();\r\n    }\r\n  }\r\n}\r\n\r\nconst Cell_GroupByCell = (cell, subGroup_Query, mainHandle, handleUndo, pendingHandle) => {\r\n  var row = cell.Row\r\n  var col = cell.Column\r\n\r\n  const finish = () => {\r\n    mainHandle();\r\n  }\r\n\r\n  const set_subcells = () => {\r\n    var subcells = cell.SubCells = cellUtil.Get_SubCells(cell)\r\n\r\n    // thiết lập giá trị rỗng cho các cells chưa tính toán Data\r\n    subcells.map(sc => sc.ValueData)\r\n      .filter(vd => !vd.Data).forEach(vd => {\r\n        vd.Data = []\r\n      })\r\n  }\r\n\r\n  pendingHandle((handle) => {\r\n    set_subcells();\r\n\r\n    handle();\r\n  })\r\n\r\n  row.Get_SubItems_FromApi(subGroup_Query._id, col, finish);\r\n}\r\n\r\nconst Cell_GroupByItem = (cell, fields, mainHandle, handleUndo, pendingHandle) => {\r\n  const finish = () => {\r\n    mainHandle();\r\n  }\r\n\r\n  // items\r\n  var items = cell.Items;\r\n\r\n  pendingHandle((handle) => {\r\n    const pending_finish = () => {\r\n      handle();\r\n    }\r\n\r\n    if (items.length !== 0) {\r\n      // save subgroup\r\n      const subgroup_save = () => {\r\n        cell.SubGroupData.Save(pending_finish);\r\n      }\r\n\r\n      // Refresh value\r\n      // (đã bao gôm setup SubCells)\r\n      cell.Update.Run(uc_sn.subcells, undefined, undefined,\r\n        subgroup_save);\r\n    } else {\r\n      // set data rỗng khi cell không có items\r\n      var subcells = cell.SubCells = cellUtil.Get_SubCells(cell)\r\n\r\n      // thiết lập giá trị rỗng cho các cells chưa tính toán Data\r\n      subcells.map(sc => sc.ValueData).forEach(vd => {\r\n        vd.Data = []\r\n      })\r\n      pending_finish();\r\n    }\r\n  })\r\n\r\n  if (items.length === 0) {\r\n    finish();\r\n    return;\r\n  }\r\n\r\n  var row = cell.Row\r\n  var table = row.Table;\r\n  const build = table.BuildData.ByItem\r\n  build.HandleItems(cell.Items, cell.Column, row, fields, finish)\r\n}\r\n\r\n// Phương thức để refresh SubCells của Row.Cells\r\nconst Set_SubCells = (q, mainHandle, handleUndo) => {\r\n  var row = q.Row;\r\n\r\n  // Undo Func\r\n  var undoFuncs\r\n  if (handleUndo) {\r\n    undoFuncs = []\r\n    handleUndo(() => {\r\n      undoFuncs.forEach(x => x());\r\n    });\r\n  }\r\n\r\n  row.Cells.forEach(x => {\r\n    // Undo\r\n    var oldSubCells = x.SubCells\r\n    undoFuncs.push(() => {\r\n      x.SubCells = oldSubCells\r\n    })\r\n\r\n    // Do\r\n    x.SubCells = cellUtil.Get_SubCells(x);\r\n  })\r\n\r\n  if (mainHandle) {\r\n    mainHandle();\r\n  }\r\n}\r\n\r\n// Phương thức update các giá trị và unit sau khi gom nhóm\r\nconst Update_Unit = (q, mainHandle, handleUndo) => {\r\n  // Undo Func\r\n  var undoFuncs\r\n  if (handleUndo) {\r\n    undoFuncs = []\r\n    handleUndo(() => {\r\n      undoFuncs.forEach(x => x());\r\n    });\r\n  }\r\n\r\n  var row = q.Row;\r\n\r\n  // Update\r\n  // UpdateCell với Unit_SetType là Both cho các SubCell\r\n  // row.Update.Run(\r\n  //   {\r\n  //     Section: u_sn.celldata,\r\n  //     Data: { Sections: uc_sn.subcells }\r\n  //   },\r\n  //   u_dt.lower, false\r\n  // )\r\n\r\n  // Update Unit với SubCell\r\n  // Undo\r\n  if (handleUndo) {\r\n    var oldUnit = row.Unit\r\n    undoFuncs.push(() => {\r\n      row.Update.Run(\r\n        {\r\n          Section: u_sn.unit,\r\n          Data: { Unit: oldUnit }\r\n        },\r\n        u_dt.none\r\n      )\r\n    })\r\n  }\r\n  // Do\r\n  row.Update.Run(\r\n    {\r\n      Section: u_sn.unit,\r\n      Data: { Unit: row.Unit ? row.Unit : ut.each }\r\n    },\r\n    u_dt.lower\r\n  )\r\n\r\n  if (mainHandle) {\r\n    mainHandle();\r\n  }\r\n}\r\n\r\nconst Update_SubFields = (q, mainHandle) => {\r\n  const func = (fields, rows) => {\r\n    var newfields = fields.filter((x, i) => i !== 0);\r\n    var newrows = []\r\n\r\n    if (newfields.length !== 0) {\r\n      rows.forEach(row => {\r\n        var subItems = row.SubItems;\r\n        subItems.forEach(sub => {\r\n          sub.SubFields = newfields;\r\n        })\r\n\r\n        //newrows.push(subItems);\r\n        newrows.push.apply(newrows, subItems)\r\n      })\r\n\r\n      if (newfields.length > 1) {\r\n        func(newfields, newrows);\r\n      } else {\r\n        mainHandle();\r\n      }\r\n    } else {\r\n      mainHandle();\r\n    }\r\n  }\r\n\r\n  func(q.Fields, [q.Row]);\r\n}","import { PMData } from \"../../../../../single/model/PMData\";\r\nimport MassRow from \"./MassRow\";\r\nimport * as multiSelectUtil from '../../../../../../select/MultiSelectVMUtil';\r\nimport * as selectUtil from '../../../../../../select/SelectVMUtil';\r\n\r\nimport * as genUtil from '../../../../../../../util/generalUtil';\r\nimport * as api from '../../../../../../../util/apiUtil';\r\nimport * as inputUtil from '../../../../../../../util/inputUtil';\r\n\r\nimport * as mif from '../../../field/MassItemField'\r\nimport MassRow_ToolElement from \"../../tool/MassRow_ToolElement\";\r\nimport * as trs from '../../../../../../text/TextRenderState';\r\nimport MassCell from \"../../cell/base/MassCell\";\r\nimport { MR_Unit } from \"../unit/MR_Unit\";\r\nimport { MR_Delete } from \"../delete/MR_Delete\";\r\nimport { MR_Update } from \"../update/MR_Update\";\r\nimport * as siteVMUtil from '../../../site/SiteVMUtil'\r\nimport * as siteUtil from '../../../site/SiteUtil'\r\nimport * as editTextUtil from '../../../../../../text/EditableTextVMUtil';\r\nimport { EntDelete } from \"../../../../../../delete/EntDelete\";\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport * as d_vt from '../../../../../../delete/EntDelete_VisibleType'\r\n\r\nimport * as u_st from '../unit/MR_Unit_SetType'\r\nimport * as ut from '../../../unit/MassUnitType'\r\nimport * as u_dt from '../../../../update/Update_DirectionType'\r\nimport * as u_sn from '../update/MRU_SectionName'\r\nimport * as uc_sn from '../../cell/update/MCU_SectionName'\r\n\r\n// import * as queryUtil from '../query/base/QueryUtil'\r\nimport * as groupFactoryUtil from '../groupfactory/FactoryUtil'\r\n// import * as saveUtil from '../save/SaveUtil'\r\nimport * as mi_ValueItemUtil from '../../../item/value/MI_ValueItemUtil'\r\n\r\nimport { url } from './MassRow_Url'\r\n\r\n// Command\r\nimport * as tct from '../../command/item/base/CommandType'\r\nimport { message } from \"antd\";\r\n\r\nconst pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const Handle_FromCellData = (cellData, col, supItem, table, handle) => {\r\n  const getRows = () => {\r\n    var list = []\r\n\r\n    cellData.forEach(x => {\r\n      var rowValue = x.key\r\n\r\n      var q = table.GetRow(rowValue, supItem);\r\n\r\n      // // Query\r\n      // if (x.queries.length !== 0) {\r\n      //   q.QueryData.Set_FromApi(x.queries[0].items);\r\n      // }\r\n\r\n      var cell = q.GetCell(col);\r\n      cell.SubGroups_Query = x.subgroups;\r\n\r\n      // Query\r\n      if (x.queries.length !== 0) {\r\n        cell.QueryData.Set_FromApi(x.queries[0].items);\r\n      }\r\n\r\n      cell._id = x._id\r\n      cell.CreateType = 'bycell'\r\n      cell.ValueData.Data =\r\n        x.valueData.map(x => mi_ValueItemUtil.GetFromDb(x));\r\n\r\n      list.push(q);\r\n    })\r\n\r\n    if (handle) {\r\n      handle(list);\r\n    }\r\n  }\r\n\r\n  getRows();\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassRow();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  var qI = new MassRow();\r\n  qI._id = q._id;\r\n\r\n}\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}\r\n\r\n// Property\r\nexport const GetRank = (q) => {\r\n  return q.SupItem ? q.SupItem.Rank + 1 : 0;\r\n}\r\n\r\nexport const GetStyle = (q) => {\r\n  return {\r\n    marginLeft: q.Rank * 20\r\n  }\r\n}\r\n\r\nexport const GetIsHaveSub = (q) => {\r\n  return q.IsPending_HaveSub || q.SubItems.length !== 0;\r\n}\r\n\r\nexport const GetToggleButtonContent = (q) => {\r\n  return q.IsShowSub ? '-' : '+';\r\n}\r\n\r\nexport const GetFieldSelectVM = (q) => {\r\n  var dict = q.Table.Dict.Dict;\r\n  var storageList = dict.MassItemField_Dict;\r\n\r\n  var obj = selectUtil.get(storageList, q.Field);\r\n\r\n  obj.TitleRender = (v) => v.Name;\r\n  obj.Placeholder = 'chọn nhóm'\r\n  obj.IsDisabled = !q.IsCreatedByUser\r\n\r\n  obj.OnSelectedItemChanged = (v) => q.TempField = v?.Value;\r\n  return obj;\r\n}\r\n\r\n// SubFields\r\nexport const GetSubFieldSelectVM = (q) => {\r\n  var dict = q.Table.Dict.Dict;\r\n  var storageList = dict.MassItemField_Dict;\r\n\r\n  var obj = multiSelectUtil.get(storageList, undefined);\r\n  obj.TitleRender = (v) => v.Name;\r\n  obj.Placeholder = 'chọn phân nhóm'\r\n  obj.OnSelectedItemChanged = (v) =>\r\n    q.TempSubFields = v.map(x => x.Value);\r\n  return obj;\r\n}\r\n\r\n// thiết lập giá trị subfields\r\nexport const OnSet_SubFields = (q, v) => {\r\n  var temps = q.TempSubFields;\r\n\r\n  var isDiff = true\r\n  if (temps && temps.length === v.length) {\r\n    var isValid = true;\r\n\r\n    v.forEach((field, i) => {\r\n      if (isValid) {\r\n        if (temps.indexOf(field) !== i) {\r\n          isValid = false\r\n        }\r\n      }\r\n    })\r\n\r\n    isDiff = !isValid;\r\n  }\r\n\r\n  if (isDiff) {\r\n    q.SubFieldSelectVM.SetValue(v);\r\n  }\r\n}\r\n\r\n// Order\r\nexport const Order = (list) => {\r\n  if (list.length === 0) return list;\r\n\r\n  var firstRow = list[0]\r\n  var mgi = firstRow.OrderMGI;\r\n  if (!mgi.IsHaveValueOrder) return list;\r\n\r\n  var orderValues = mgi.OrderValues;\r\n  return list.sort((a, b) => {\r\n    return orderValues.indexOf(a.FullValue) - orderValues.indexOf(b.FullValue);\r\n  });\r\n}\r\n\r\nexport const Handle_Title = (q) => {\r\n  var field = q.MassGroupItem.Field;\r\n  if (field !== mif.level) {\r\n    q.Title = q.Name;\r\n  } else {\r\n    // Xử lý phần tiêu đề của Row dựa trên Name và thông tin Tầng điển hình\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = q.Cells.length;\r\n\r\n    const handle_LS = (ls) => {\r\n      if (ls.Description) {\r\n        q.Title = ls.Description;\r\n      } else {\r\n        ls.OnGetLevelStorageList_Funcs.push(() => {\r\n          q.Title = ls.Description;\r\n        })\r\n      }\r\n    }\r\n\r\n    const handle_Val = (val) => {\r\n      handledCount++;\r\n      list.push.apply(list, val);\r\n      if (handledCount === count) {\r\n        if (list.length === 1) {\r\n          handle_LS(list[0]);\r\n        } else {\r\n          q.Title = q.Name;\r\n        }\r\n      }\r\n    }\r\n\r\n    q.Cells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        x.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n          handle_Val(x.TLS_LevelGroups);\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetLocationSelectVM = (q) => {\r\n  var obj = selectUtil.get([], undefined);\r\n  obj.Placeholder = 'chọn vị trí'\r\n  obj.TitleRender = (item) => {\r\n    var marginLeft = item.Rank * 15;\r\n    return <div\r\n      style={{ marginLeft }}>\r\n      {item.Title}\r\n    </div>\r\n  }\r\n  obj.OnSelectedItemChanged = (v) => {\r\n    var factory = q.ReplaceFactory;\r\n    factory.ReferenceRow = v;\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport const GetOriginal_SubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].MassGroupItem;\r\n}\r\n\r\nexport const GetReplace_SubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].ReplaceMGI;\r\n}\r\n\r\n// Method\r\n// Add\r\nexport const Add = (supRow, table) => {\r\n  // Command\r\n  table.CommandDict.Do(\r\n    {\r\n      action: tct.add,\r\n      target: {\r\n        type: 'row',\r\n        key: supRow?.RetrieveData\r\n      }\r\n    }, supRow\r\n  )\r\n}\r\n\r\nexport const Add_Main = (supRow, result, handle, handleUndo) => {\r\n  var table = pmData().Current_MassTable\r\n\r\n  var undoFuncs = []\r\n  if (handleUndo) {\r\n    handleUndo(() => {\r\n      undoFuncs.forEach(x => x())\r\n    });\r\n  }\r\n\r\n  var row = new MassRow();\r\n  row.IsCreatedByUser = true;\r\n\r\n  row.RawValue = result ? result.raw : genUtil.randomId();\r\n  //row.Title = \"Tên hạng mục\"\r\n\r\n  if (supRow) {\r\n    row.SupItem = supRow\r\n    supRow.IsShowSub = true;\r\n  } else {\r\n    row.Dict = table;\r\n  }\r\n\r\n  // Undo\r\n  undoFuncs.push(() => {\r\n    row.CurrentList.splice(row.CurrentList.length - 1, 1);\r\n  })\r\n  // Do\r\n  row.CurrentList.push(row);\r\n\r\n  if (result) {\r\n    row.Title = result.title;\r\n  } else {\r\n    row.Editable_TitleVM.RenderState = trs.edit;\r\n  }\r\n\r\n  if (handle) {\r\n    handle();\r\n  }\r\n\r\n  return row;\r\n}\r\n\r\n// SupItem\r\nexport const GetFull_SubItems = (q) => {\r\n  var supItem = q.SupItem;\r\n\r\n  var list = []\r\n  if (supItem) {\r\n    list = [...supItem.Full_SupItems];\r\n    list.push(supItem);\r\n  }\r\n  return list;\r\n}\r\n\r\nexport const Get_Original_Full_SupRows = (q) => {\r\n  var list = [];\r\n  var supItem = q.Original_SupRow;\r\n\r\n  while (supItem) {\r\n    list.push(supItem);\r\n    supItem = supItem.Original_SupRow;\r\n  }\r\n\r\n  list.reverse();\r\n  return list;\r\n}\r\n\r\n// Aditional Infomation\r\nexport const Get_IsHaveAdditionInformation = (q) => {\r\n  return q.IsReplaced ? true : false\r\n}\r\n\r\nexport const Get_AdditionInformation = (q) => {\r\n  var obj = q.Original_Full_SupRows.reduce((a, x, i) => {\r\n    if (i != 0) {\r\n      a += ' > '\r\n    }\r\n    a += x.Title;\r\n    return a;\r\n  }, '')\r\n\r\n  return obj;\r\n}\r\n\r\nexport const GetHoverData = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.VisibleType = d_vt.hidden\r\n  qI.BlankStyle = 'massrow__hover__blank'\r\n\r\n  qI.OnPreHide = () => {\r\n    if (q.DeleteData.DeleteVM.Is_Hover_Visible) {\r\n      qI.IsRun_Cancel = true;\r\n    }\r\n  }\r\n\r\n  qI.Retrieve_WrapperView = () => q.ToolElement.View\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Get_ToolElement = (q) => {\r\n  var qI = new MassRow_ToolElement();\r\n\r\n  qI.Dict = q;\r\n\r\n  return qI;\r\n}\r\n\r\n// Cells\r\nexport const Get_Cells = (q) => {\r\n  // if (!q.IsCreatedByUser) return [];\r\n  var table = q.Table;\r\n\r\n  var list = table.Columns.map(x => {\r\n    var qI = new MassCell();\r\n    qI.Column = x;\r\n    qI.Row = q;\r\n    qI.Dict = table;\r\n\r\n    return qI;\r\n  });\r\n\r\n  return list;\r\n}\r\n\r\n// Value\r\nexport const GetFullValue = (q) => {\r\n  return q.Original_SupRow ?\r\n    `${q.Original_SupRow.FullValue}__${q.RawValue}` : q.RawValue\r\n}\r\n\r\nexport const GetIsShow_RawValue = (q) => {\r\n  return !q.IsCreatedByUser && q.RawValue !== q.Title;\r\n}\r\n\r\n// Unit\r\nexport const Get_DefaultUnit = (q) => {\r\n  var unit\r\n  var isDone = false\r\n\r\n  if (q.SubItems.length !== 0) {\r\n    q.SubItems.forEach(x => {\r\n      if (!isDone) {\r\n        if (unit === undefined) {\r\n          unit = x.Unit;\r\n        }\r\n\r\n        if (!unit || unit !== x.Unit) {\r\n          unit = undefined\r\n          isDone = true;\r\n        }\r\n      }\r\n    })\r\n  } else {\r\n    unit = ut.each;\r\n  }\r\n\r\n  return unit;\r\n}\r\n\r\nexport const GetUnitData = (q) => {\r\n  var qI = new MR_Unit();\r\n  qI.Dict = q;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDeleteData = (q) => {\r\n  var qI = new MR_Delete();\r\n  qI.Host = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetUpdate = (q) => {\r\n  var qI = new MR_Update();\r\n  qI.Host = q\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSite = (q) => {\r\n  return siteVMUtil.get(siteUtil.get(q), q);\r\n}\r\n\r\n// Title\r\nexport const GetEditable_TitleVM = (q) => {\r\n  var qI = editTextUtil.get(q.Title);\r\n\r\n  qI.Is_Tool_Visible = false\r\n  qI.Placeholder = 'tên đầu mục ...'\r\n\r\n  qI.OnKeyDown = (e) => {\r\n    var { key, value } = inputUtil.Get_Shortcut(e);\r\n    switch (key) {\r\n      case inputUtil.enter:\r\n        if (!qI.Content || qI.Content.length === 0) {\r\n          message.warn('Bạn phải điền tên Đầu mục!');\r\n          return\r\n        }\r\n        qI.RenderState = trs._default\r\n        break\r\n      case inputUtil.esc:\r\n        qI.IsEscape = true;\r\n        qI.RenderState = trs._default\r\n        break;\r\n    }\r\n  }\r\n\r\n  genUtil.Add(\r\n    qI.OnSet_RenderState_Func_Dict,\r\n    () => {\r\n      if (qI.RenderState === trs._default) {\r\n        if (qI.IsEscape) {\r\n          qI.Content = q.Title\r\n          qI.IsEscape = false\r\n          return;\r\n        }\r\n\r\n        if (qI.Content === q.Title) return;\r\n\r\n        // Đang trong lệnh Add\r\n        if (q.BindingCommand) {\r\n          q.ReTitle(qI.Content);\r\n\r\n          var bc = q.BindingCommand;\r\n          bc.Result(q);\r\n          q.BindingCommand = undefined\r\n        } else {\r\n          // Command\r\n          q.Table.CommandDict.Do(\r\n            {\r\n              action: tct.retitle,\r\n              target: {\r\n                type: 'row',\r\n                key: q.RetrieveData\r\n              },\r\n              value: qI.Content\r\n            }, q\r\n          )\r\n        }\r\n      }\r\n    },\r\n    false\r\n  )\r\n\r\n  return qI;\r\n}\r\n\r\nexport const ReTitle = (q, value, handle, handleUndo) => {\r\n  // Undo\r\n  var undoFuncs = []\r\n  if (handleUndo) {\r\n    undoFuncs = []\r\n    handleUndo(() => {\r\n      undoFuncs.forEach(x => x());\r\n    });\r\n  };\r\n\r\n  var qI = q.Editable_TitleVM\r\n\r\n  // Lưu thông tin Title\r\n  // Undo\r\n  var oldTitle = q.Title;\r\n  undoFuncs.push(() => q.Title = oldTitle);\r\n  // Do\r\n  q.Title = value;\r\n\r\n  q.ToolElement.editable_TitleVM_RenderState = qI.RenderState\r\n\r\n  if (handle) {\r\n    handle();\r\n  }\r\n}\r\n\r\n// FilterData\r\nexport const GetFilterData = (q) => {\r\n  const getFilter = (x) => {\r\n    return {\r\n      field: x.Field,\r\n      value: x.RawValue\r\n    }\r\n  }\r\n\r\n  var filters = q.Original_Full_SupRows\r\n    .map(x => getFilter(x));\r\n  filters.push(getFilter(q));\r\n\r\n  return filters;\r\n}\r\n\r\nexport const GetRetrieveData = (q) => {\r\n  var f_s = q.Full_SupItems;\r\n  var list = f_s.map(x => x.FullValue);\r\n  list.push(q.FullValue);\r\n  return list;\r\n}\r\n\r\n// Tập hợp tất cả filter trong Row\r\n// Row tạo bởi người dùng: tập hợp các filter của các Row con\r\n// Row tự sinh: 1 filter tương ứng với Origin_Full_SupRows\r\nexport const GetFilterDict = (q) => {\r\n  if (!q.IsCreatedByUser) {\r\n    return q.FilterData\r\n  } else {\r\n    if (q.SubItems.length === 0) {\r\n      return []\r\n    } else {\r\n      return q.SubItems.map(x => x.FilterDict).filter(x => x.length !== 0)\r\n    }\r\n  }\r\n}\r\n\r\n// Query\r\n// export const GetQueryData = (q) => {\r\n//   return queryUtil.get(q);\r\n// }\r\n\r\n// GroupFactory\r\nexport const GetGroupFactory = (q) => {\r\n  return groupFactoryUtil.get(q);\r\n}\r\n\r\n// Save\r\n// export const GetSaveData = (q) => {\r\n//   return saveUtil.get(q);\r\n// }\r\n\r\n// ReplaceInfomation\r\nexport const GetReplaceInformation = (q) => {\r\n  if (q.SupItem === q.Original_SupRow) return ''\r\n  var info = 'Replace';\r\n\r\n  var list = q.Original_Full_SupRows;\r\n  var length = list.length;\r\n\r\n  list.forEach((x, i) => {\r\n    if (i == 0) {\r\n      info += ': '\r\n    }\r\n\r\n    info += x.Title;\r\n\r\n    if (length > 1 && i !== length - 1) {\r\n      info += ' > '\r\n    }\r\n  })\r\n\r\n  return info;\r\n}\r\n\r\n// SubItems\r\nexport const Get_SubItems_FromApi = (q, subGroupId, col, handle) => {\r\n  var apiData = {\r\n    hostId: subGroupId,\r\n    reportId: col.Report._id\r\n  }\r\n\r\n  GetData(apiData, (data) => {\r\n    Handle_FromCellData(data, col, q, q.Table, (rows) => {\r\n      if (handle) {\r\n        handle();\r\n      }\r\n    });\r\n  })\r\n}\r\n\r\n// ToggleSub\r\nexport const ToggleSub = (q) => {\r\n  // Nếu đang Pending_HaveSub, truy vấn thông tin Sub\r\n  if (q.IsPending_HaveSub) {\r\n    var tempFields = q.SubFields;\r\n\r\n    const finish = () => {\r\n      q.SubFields = tempFields;\r\n      q.IsPending_HaveSub = false;\r\n    }\r\n\r\n    const sub_pending = (handle) => {\r\n      // Tiếp tục Pending_HaveSub ở mục con\r\n      if (tempFields.length > 1) {\r\n        var sfsFields = tempFields.filter((x, i) => i !== 0);\r\n        q.SubItems.forEach(x => {\r\n          x.SubFields = sfsFields;\r\n          x.IsPending_HaveSub = true;\r\n        })\r\n      }\r\n\r\n      if (handle) {\r\n        handle();\r\n      }\r\n    }\r\n\r\n    var gf = q.GroupFactory\r\n    // Chỉ lấy SubFields đầu tiên để tính toán\r\n    gf.Fields = [tempFields[0]];\r\n    q.SubFields = [];\r\n    gf.Run(() => sub_pending(finish));\r\n\r\n  } else {\r\n    q.IsShowSub = !q.IsShowSub;\r\n  }\r\n}\r\n\r\n// Move\r\nexport const Move = (row1, row2) => {\r\n  var table = pmData().Current_MassTable;\r\n  table.CommandDict.Do(\r\n    {\r\n      action: tct.move,\r\n      target: {\r\n        type: 'rowlist',\r\n        key: [\r\n          row1.RetrieveData,\r\n          row2.RetrieveData\r\n        ]\r\n      }\r\n    }, [row1, row2]\r\n  )\r\n}\r\n\r\nexport const Move_Main = (row1, row2, handle, handleUndo) => {\r\n  // Undo\r\n  var undoFuncs\r\n  if (handleUndo) {\r\n    undoFuncs = []\r\n    handleUndo(() => {\r\n      undoFuncs.forEach(x => x());\r\n    });\r\n  }\r\n\r\n  var list = row1.CurrentList;\r\n\r\n  // Undo\r\n  if (handleUndo) {\r\n    undoFuncs.push(() => {\r\n      genUtil.MoveItem(list, row1.Index, row2.Index);\r\n    })\r\n  }\r\n  // Do\r\n  genUtil.MoveItem(list, row1.Index, row2.Index);\r\n\r\n  if (handle) {\r\n    handle();\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hb_masscell\"","import * as util from './CommandItemUtil'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { PMData } from '../../../../../../single/model/PMData';\r\nimport * as tct from './CommandType'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\nexport class CommandItem {\r\n  Data\r\n\r\n  Dict\r\n\r\n  get Table() {\r\n    return pmData().Current_MassTable\r\n  }\r\n\r\n  target\r\n  get Target() {\r\n    if (!this.target) {\r\n      this.target = util.GetTarget(this)\r\n    } return this.target\r\n  } set Target(v) {\r\n    this.target = v;\r\n  }\r\n\r\n  Do = (handle) => {\r\n    util.Do(this, handle);\r\n  }\r\n\r\n  Result = (obj) => {\r\n    util.Result(this, obj)\r\n  }\r\n\r\n  get ApiData() {\r\n    return this.Data.ApiData;\r\n  }\r\n\r\n  Clone = () => {\r\n    return util.Clone(this)\r\n  }\r\n\r\n  // Template\r\n  get CanUser_ForTemplate() {\r\n    var data = this.Data;\r\n\r\n    switch (data.Action) {\r\n      case tct.replace:\r\n        return false;\r\n      case tct.add:\r\n        return !data.Target.key\r\n      default:\r\n        return data.Target.key.length === 1\r\n    }\r\n  }\r\n}","import { ReplaceRow_Value } from \"./ReplaceRow_Value\"\r\nimport MassRow from '../../../../row/base/MassRow'\r\nimport { PMData } from \"../../../../../../../single/model/PMData\";\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  if (data[0] instanceof MassRow) {\r\n    qI.RowValue = data\r\n    var kv = qI.KeyValue\r\n  } else {\r\n    qI.KeyValue = data;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new ReplaceRow_Value();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  var qI = new ReplaceRow_Value();\r\n\r\n  qI.KeyValue = q.KeyValue;\r\n  qI.Dict = q.Dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetKeyValue = (q) => {\r\n  return q.RowValue.map(x => x.RetrieveData);\r\n}\r\n\r\nexport const GetRowValue = (q) => {\r\n  return q.KeyValue.map(x => pmData().Current_MassTable.TBody.GetRow(x));\r\n}","import * as util from './ReplaceRow_ValueUtil'\r\n\r\nexport class ReplaceRow_Value {\r\n  rowValue\r\n  get RowValue(){\r\n    if (!this.rowValue){\r\n      this.rowValue = util.GetRowValue(this)\r\n    } return this.rowValue;\r\n  } set RowValue(v){\r\n    this.rowValue = v;\r\n  }\r\n\r\n  keyValue\r\n  get KeyValue(){\r\n    if (!this.keyValue){\r\n      this.keyValue = util.GetKeyValue(this)\r\n    } return this.keyValue\r\n  } set KeyValue(v){\r\n    this.keyValue = v;\r\n  }\r\n\r\n  get ApiData(){\r\n    return this.KeyValue;\r\n  }\r\n\r\n  Clone = () => {\r\n    return util.Clone(this)\r\n  }\r\n}","import * as util from './DataUtil'\r\nimport { ReplaceRow_Value } from \"../value/ReplaceRow_Value\"\r\n\r\nexport class Data {\r\n  Action\r\n\r\n  Target\r\n\r\n  Value\r\n\r\n  Result\r\n\r\n  get ApiData(){\r\n    var obj = {\r\n      action : this.Action,\r\n      target: this.Target,\r\n      result: this.Result\r\n    }\r\n\r\n    if (this.Value instanceof ReplaceRow_Value){\r\n      obj['value']  = this.Value.ApiData\r\n    } else {\r\n      obj['value']  = this.Value\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  Clone = () => {\r\n    return util.Clone(this)\r\n  }\r\n}","import { Data } from \"./Data\"\r\nimport * as tct from '../../base/CommandType'\r\nimport * as valueUtil from '../value/ReplaceRow_ValueUtil'\r\nimport { ReplaceRow_Value } from \"../value/ReplaceRow_Value\";\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  var action = qI.Action = data.action;\r\n  qI.Target = data.target;\r\n  qI.Result = data.result;\r\n\r\n  if (action === tct.replace) {\r\n    qI.Value = valueUtil.GetFromDb(data.value, qI);\r\n  } else {\r\n    qI.Value = data.value;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Data();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  var qI = new Data();\r\n\r\n  qI.Action = q.Action;\r\n  qI.Target = q.Target\r\n\r\n  if (q.Value instanceof ReplaceRow_Value) {\r\n    qI.Value = q.Value.Clone();\r\n  } else {\r\n    qI.Value = q.Value\r\n  }\r\n\r\n  qI.Result = q.Result\r\n  qI.Dict = q.Dict;\r\n\r\n  return qI;\r\n}","import { CommandItem } from \"./CommandItem\"\r\nimport * as tct from './CommandType'\r\nimport * as tctt from './Command_TargetType'\r\nimport * as dataUtil from '../data/base/DataUtil'\r\nimport * as rowUtil from '../../../row/base/MassRowUtil'\r\n\r\n// Instance\r\nexport const get = (data, target, dict) => {\r\n  var qI = new CommandItem();\r\n\r\n  qI.Data = dataUtil.GetFromDb(data, qI);\r\n  qI.Target = target\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new CommandItem();\r\n\r\n  qI.Data = q.Data.Clone();\r\n  qI.Dict = dict ? dict : q.Dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetTarget = (q) => {\r\n  var { Target } = q.Data\r\n  var { type, key } = Target\r\n  if (!key) return undefined\r\n\r\n  var table = q.Table\r\n\r\n  switch (type) {\r\n    case tctt.row:\r\n      return table.TBody.GetRow(key);\r\n    case tctt.rowlist:\r\n      return key.map(x => table.TBody.GetRow(x))\r\n  }\r\n}\r\n\r\n// Method\r\nexport const Do = (q, handle) => {\r\n  var target = q.Target\r\n  var data = q.Data;\r\n\r\n  var action = data.Action;\r\n  var value = data.Value;\r\n  var result = data.Result;\r\n\r\n  var type = data.Target.type;\r\n\r\n  const setUndo = (undo) => q.Undo = undo;\r\n  const setHandle = () => {\r\n    if (handle) {\r\n      handle();\r\n    }\r\n  }\r\n\r\n  switch (action) {\r\n    case tct.retitle:\r\n      target.ReTitle(value, setHandle, setUndo);\r\n      break;\r\n    case tct.subgroup:\r\n      target.GroupFactory.MainRun(value, setHandle, setUndo);\r\n      break;\r\n    case tct._delete:\r\n      {\r\n        switch (type) {\r\n          case tctt.row:\r\n            target.DeleteData.DeleteHost_Main(setHandle, setUndo)\r\n            break;\r\n        }\r\n      }\r\n      break;\r\n    case tct.replace:\r\n      target.Replace_SubItems_Main(value.RowValue, setHandle, setUndo);\r\n      break;\r\n    case tct.add:\r\n      var row = rowUtil.Add_Main(target, result, setHandle, setUndo)\r\n\r\n      // Ràng buộc command đang set vào lưu vết thông tin về sau\r\n      // khi không tồn tại Result\r\n      if (!result) {\r\n        row.BindingCommand = q;\r\n      }\r\n      break\r\n    case tct.move:\r\n      rowUtil.Move_Main(target[0], target[1], setHandle, setUndo);\r\n      break;\r\n    case tct.changeunit:\r\n      target.UnitData.SelectUnit_Main(value, setHandle, setUndo);\r\n      break;\r\n  }\r\n}\r\n\r\nexport const Result = (q, obj) => {\r\n  var data = q.Data;\r\n\r\n  var action = data.Action;\r\n\r\n  switch (action) {\r\n    case tct.add:\r\n      data.Result = {\r\n        raw: obj.RawValue,\r\n        title: obj.Title\r\n      }\r\n      break;\r\n  }\r\n}","export const row = 'row'\r\nexport const rowlist = 'rowlist'\r\nexport const cell = 'cell'","import * as util from './CommandDictUtil'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as itemUtil from '../item/base/CommandItemUtil'\r\nimport { PMData } from '../../../../../single/model/PMData';\r\nimport * as tct from '../item/base/CommandType'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\nexport class CommandDict {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      ItemsForUndo: observable,\r\n    })\r\n  }\r\n\r\n  Dict\r\n\r\n  get Table() {\r\n    return pmData().Current_MassTable\r\n  }\r\n\r\n  PreItems = []\r\n\r\n  Items = []\r\n\r\n  ItemsForUndo = []\r\n\r\n  get AllItems() {\r\n    return this.PreItems.concat(this.Items);\r\n  }\r\n\r\n  MaxLength = 15\r\n\r\n  Do = (data, target) => {\r\n    var qI = this.Add(data, target);\r\n    qI.Do();\r\n  }\r\n\r\n  Add = (data, target) => {\r\n    var qI = itemUtil.get(data, target, this);\r\n\r\n    var list = this.Items;\r\n    list.push(qI)\r\n\r\n    var undoList = this.ItemsForUndo;\r\n    if (undoList.length === this.MaxLength) {\r\n      undoList.splice(0, 1);\r\n    }\r\n    undoList.push(qI);\r\n\r\n    return qI;\r\n  }\r\n\r\n  Undo = () => {\r\n    var list = this.Items;\r\n    var undoList = this.ItemsForUndo;\r\n\r\n    if (undoList.length === 0) return;\r\n    var q = list.splice(list.length - 1, 1)[0];\r\n    undoList.splice(undoList.length - 1, 1);\r\n    q.Undo();\r\n  }\r\n\r\n  get ButtonView() {\r\n    return util.GetButtonView(this)\r\n  }\r\n\r\n  get Disabled() {\r\n    return this.ItemsForUndo.length === 0\r\n  }\r\n\r\n  // Clear = () => {\r\n  //   this.Items = []\r\n  // }\r\n\r\n  get ApiData() {\r\n    return this.Items.map(x => x.ApiData);\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\n\r\nclass UndoView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      //this.state = new UserFormVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var width = this.props.width ? this.props.width : 512\r\n    var height = this.props.height ? this.props.height : 512\r\n    var className = this.props.className\r\n\r\n    return (\r\n      <>\r\n        <svg className={className} width={width} height={height}\r\n          viewBox=\"0 0 25.64 25.64\" >\r\n          <path d=\"M10.385,1.499C10.096,1.378,9.76,1.446,9.537,1.667L0.228,8.98c-0.304,0.302-0.304,0.797,0,1.1\r\n\t\t\tl9.309,7.278c0.148,0.15,0.348,0.229,0.549,0.229c0.102,0,0.203-0.021,0.299-0.059c0.291-0.121,0.465-0.404,0.465-0.719V12.45\r\n\t\t\tc9.955,0,14.309,2.808,13.646,11.751C28.713,9.893,20.619,6.659,10.85,6.659V2.217C10.849,1.902,10.676,1.619,10.385,1.499z\"/>\r\n        </svg>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(UndoView);\r\n","import { CommandDict } from \"./CommandDict\"\r\nimport { Button } from 'antd';\r\nimport UndoView from \"../../../../svg/UndoView\";\r\nimport './CommandDict.css'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new CommandDict();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetButtonView = (q) => {\r\n  var size = 12\r\n  return <Button type='primary' size='small'\r\n    className='commanddict__button btn-warning' onClick={q.Undo}\r\n    disabled={q.Disabled}>\r\n    <UndoView width={size} height={size} />\r\n  </Button>\r\n}","import { PMData } from '../../../../../single/model/PMData'\r\nimport * as util from './SaveValueUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as mc_ct from '../../cell/base/MassCell_CreateType'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\nexport class SaveValue {\r\n  Table\r\n\r\n  Run = () => {\r\n    const func = () => {\r\n      var columns = this.Table.Columns\r\n      columns.forEach(col => {\r\n        col.Report.Update();\r\n      })\r\n    }\r\n\r\n    const incre_func = genUtil.IncreFunc(1, () => {\r\n      func();\r\n    })\r\n\r\n    this.Save_MainRows(incre_func);\r\n  }\r\n\r\n  Save_MainRows = (mainHandle) => {\r\n    var rows = this.Table.MainRows\r\n    var row_incre = genUtil.IncreFunc(rows.length, mainHandle);\r\n\r\n    // Foreach Row\r\n    rows.forEach(row => {\r\n      var cells = row.Cells;\r\n      var cell_incre = genUtil.IncreFunc(cells.length, row_incre);\r\n\r\n      // Foreach cells\r\n      cells.forEach(cell => {\r\n        const save = () => {\r\n          cell.Save(cell_incre);\r\n          // cell_incre();\r\n        }\r\n\r\n        if (cell.CreateType === mc_ct.bycell) {\r\n          cell_incre();\r\n        } else {\r\n          var valueData = cell.ValueData;\r\n          if (valueData.Data) {\r\n            save();\r\n          } else {\r\n            genUtil.Add_2(valueData.OnSet_Data_Func,\r\n              save);\r\n          }\r\n        }\r\n      })\r\n    })\r\n  }\r\n}","import * as util from './BulidUtil'\r\n\r\nexport class Bulid {\r\n  Table\r\n\r\n  get Data(){\r\n    return this.Table.Data;\r\n  }\r\n\r\n  bycell\r\n  get ByCell(){\r\n    if (!this.bycell){\r\n      this.bycell = util.GetByCell(this)\r\n    } return this.bycell\r\n  }\r\n\r\n  byitem\r\n  get ByItem(){\r\n    if (!this.byitem){\r\n      this.byitem = util.GetByItem(this)\r\n    } return this.byitem\r\n  }\r\n\r\n  Run = () => {\r\n    util.Run(this)\r\n  }\r\n\r\n  Finish = () => {\r\n    util.Finish(this)\r\n  }\r\n\r\n  Initial = () => {\r\n    util.Initial(this)\r\n  }\r\n}","import * as util from './ItemUtil'\r\n\r\nexport class Item {\r\n  Dict\r\n\r\n  get Table(){\r\n    return this.Dict.Table\r\n  }\r\n\r\n  // massCells\r\n  // get MassCells(){\r\n  //   if (!this.massCells){\r\n  //     this.massCells = this.Dict.Data.MassCells\r\n  //   }\r\n  //   return this.massCells\r\n  // }\r\n\r\n  Run = (cells, col,  mainHandle) => {\r\n    util.Run(this, cells, col, mainHandle)\r\n  }\r\n}","import { Item } from \"./Item\"\r\nimport * as mi_ValueItemUtil from '../../../../item/value/MI_ValueItemUtil'\r\nimport * as mif from '../../../../field/MassItemField'\r\nimport * as rowUtil from '../../../row/base/MassRowUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Method\r\nexport const Run = (q, cells, col, mainHandle) => {\r\n  var table = q.Table;\r\n\r\n  rowUtil.Handle_FromCellData(cells, col, undefined, table, (rows) => {\r\n    // table.TBody.Rows = rows\r\n\r\n    if (mainHandle){\r\n      mainHandle();\r\n    }\r\n  });\r\n}\r\n","import * as util from './ItemUtil'\r\nimport * as rt from './Item_RunType'\r\nimport * as genUtil from '../../../../../../../../../util/generalUtil'\r\nimport { PMData } from '../../../../../../../single/model/PMData'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\nexport class Item {\r\n  Dict\r\n\r\n  get Table(){\r\n    return this.Dict.Table\r\n  }\r\n\r\n  // masses\r\n  // get Masses(){\r\n  //   if (!this.masses){\r\n  //     debugger\r\n  //     console.log(this.Dict.Data);\r\n  //     throw 500;\r\n  //     // this.masses = this.Dict.Data.Masses\r\n  //   }\r\n  //   return this.masses\r\n  // }\r\n\r\n  // Handled_Masses = []\r\n  // Handled_MassPhases = []\r\n\r\n  // Lưu vết các phần tử hiện đang lấy Value theo Field\r\n  valueItem_Data\r\n  get ValueItem_Data(){\r\n    if (!this.valueItem_Data){\r\n      this.valueItem_Data = util.GetValueItem_Data(this)\r\n    } return this.valueItem_Data;\r\n  }\r\n\r\n  // Run = (mainHandle) => {\r\n  //   this.MainHandle = mainHandle;\r\n    \r\n  //   util.Run(this)\r\n  // }\r\n\r\n  RunType = rt.overview\r\n\r\n  // HandleItem = (item, colFieldValue, initialRow, fields, handle) => {\r\n  //   // this.RunType = rt.partial\r\n  //   util.HandleItem(this, item, colFieldValue, fields, initialRow);\r\n\r\n  //   // Lồng function ở ngoài vào để xử lý async\r\n  //   if (handle){\r\n  //     var vid = this.ValueItem_Data\r\n  //     if (vid.HandledItems.length === 0){\r\n  //       handle()\r\n  //     } else {\r\n  //       genUtil.Add_2(\r\n  //         vid.On_Clear_Func,\r\n  //         () => {\r\n  //           handle()\r\n  //         }\r\n  //       )\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  HandleItems = (items, col, initialRow, fields, mainhandle) => {\r\n    // this.RunType = rt.partial\r\n\r\n    var length = items.length;\r\n    var i = 0;\r\n    const incre_func = () => {\r\n      i++;\r\n      if (i === length){\r\n        if (mainhandle){\r\n          mainhandle();\r\n        }\r\n      }\r\n    }\r\n\r\n    items.forEach(x => this.HandleItem(x, col, initialRow, fields, incre_func))\r\n  }\r\n\r\n  HandleItem = (item, col, initialRow, fields, handle) => {\r\n    // this.RunType = rt.partial\r\n\r\n    util.HandleItem(this, item, col, fields, initialRow);\r\n\r\n    // Lồng function ở ngoài vào để xử lý async\r\n    if (handle){\r\n      var vid = this.ValueItem_Data\r\n      if (vid.HandledItems.length === 0){\r\n        handle()\r\n      } else {\r\n        genUtil.Add_2(\r\n          vid.On_Clear_Func,\r\n          () => {\r\n            handle()\r\n          }\r\n        )\r\n      }\r\n    }\r\n  }\r\n}","export const overview = 'overview'\r\nexport const partial = 'partial'","import * as genUtil from '../../../../../../../../../util/generalUtil'\r\nimport { PMData } from '../../../../../../../single/model/PMData'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\nexport class ValueItem {\r\n  Dict\r\n\r\n  HandledItems = []\r\n\r\n  AddItem = (v) => {\r\n    this.HandledItems.push(v);\r\n  }\r\n\r\n  On_DeleteItem_Func = []\r\n\r\n  On_Clear_Func = []\r\n\r\n  DeleteItem = (v) => {\r\n    var list = this.HandledItems;\r\n    var index = list.findIndex(x => {\r\n      return x == v\r\n    })\r\n\r\n    if (index === -1) return;\r\n\r\n    list.splice(list.indexOf(v), 1);\r\n\r\n    genUtil.Handle(this.On_DeleteItem_Func,\r\n      (v) => this.On_DeleteItem_Func = v)\r\n\r\n    if (list.length === 0) {\r\n      genUtil.Handle(this.On_Clear_Func,\r\n        (v) => this.On_Clear_Func = v)\r\n    }\r\n  }\r\n}","import { Item } from \"./Item\"\r\nimport * as mif from '../../../../../field/MassItemField'\r\nimport { PMData } from \"../../../../../../../single/model/PMData\";\r\nimport * as filterUtil from '../../../../../../filter/EntFilterUtil'\r\nimport * as genUtil from '../../../../../../../../../util/generalUtil'\r\nimport * as u_sn from '../../../../row/update/MRU_SectionName'\r\nimport * as uc_sn from '../../../../cell/update/MCU_SectionName'\r\nimport * as u_dt from '../../../../../../update/Update_DirectionType'\r\nimport * as rowUtil from '../../../../row/base/MassRowUtil'\r\nimport * as rt from './Item_RunType'\r\nimport * as valueItemUtil from '../valueItem/ValueItemUtil'\r\n\r\nimport MassRow from \"../../../../row/base/MassRow\";\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetValueItem_Data = (q) => {\r\n  return valueItemUtil.get(q);\r\n}\r\n\r\n// Method\r\n// export const Run = (q) => {\r\n//   debugger\r\n//   var table = q.Table;\r\n//   var colField = table.ColumnField;\r\n//   var rowFields = [mif.MassType]\r\n\r\n//   const handleItem = (massItem, colVal) => {\r\n//     HandleItem(q, massItem, colVal, rowFields);\r\n//   }\r\n\r\n//   q.Masses.forEach(x => {\r\n//     switch (colField) {\r\n//       case mif.Phase:\r\n//         x.ValidPhasesByInput.forEach(y => {\r\n//           handleItem(x, y);\r\n//         })\r\n//         break;\r\n//       default:\r\n//         x.GetValue(colField, (val) => {\r\n//           handleItem(x, val)\r\n//         });\r\n//         break;\r\n//     }\r\n//   })\r\n// }\r\n\r\n// export const HandleItem = (q, item, colFieldValue, rowFields, initialRow) => {\r\n//   var table = q.Table;\r\n\r\n//   var name = mif.GetValueString(colFieldValue, table.ColumnField);\r\n//   var data = colFieldValue;\r\n//   var col = table.GetColumn(name, data);\r\n\r\n//   var rows = initialRow ? [initialRow] : [];\r\n\r\n//   HandleRowFieldIndex(q, item, col, rows, rowFields, 0);\r\n// }\r\n\r\nexport const HandleItem = (q, item, col, rowFields, initialRow) => {\r\n  var rows = initialRow ? [initialRow] : [];\r\n  HandleRowFieldIndex(q, item, col, rows, rowFields, 0);\r\n}\r\n\r\n\r\nconst HandleRowFieldIndex = (q, item, col, rows, rowFields, rowFieldIndex) => {\r\n  var rowField = rowFields[rowFieldIndex]\r\n\r\n  const func = (val) => {\r\n    GetRow_Value_FieldIndex(q, item, col, rows, val, rowFields, rowFieldIndex);\r\n  }\r\n\r\n  // NewVersion: trả về data và có xử lý sau đó ko (isHandle ?)\r\n  // Đầu mục từ tạo không có field\r\n  if (!rowField) {\r\n    func();\r\n  } else {\r\n    // Lưu vết các Handled_ValueItems khi async\r\n    var vid = q.ValueItem_Data\r\n    var valueItem = {\r\n      Item: item,\r\n      Field: rowField\r\n    }\r\n    var isHandleVal = false;\r\n\r\n    var data = item.GetValue(rowField, (val) => {\r\n      func(val)\r\n      // Xóa phần tử sau khi thực hiện lấy Value thành công\r\n      vid.DeleteItem(valueItem);\r\n\r\n      isHandleVal = true;\r\n    });\r\n\r\n    if (!data.IsHandle) {\r\n      var val = data.Value;\r\n      func(val);\r\n    } else {\r\n      // Lưu vết Value cần lấy async\r\n      if (!isHandleVal) {\r\n        vid.AddItem(valueItem);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Xử lý tạo Row với giá trị tương ứng và Cell bên trong\r\nconst GetRow_Value_FieldIndex = (q, item, col, rows, val, rowFields, rowFieldIndex) => {\r\n  var table = q.Table;\r\n\r\n  // Sup Row của dòng khối lượng đang xét\r\n  var lastRow = rows.length !== 0 ? rows[rows.length - 1] : undefined\r\n\r\n  var rowField = rowFields[rowFieldIndex];\r\n  if (!rowField) {\r\n    // AddHandledItems(q, item);\r\n    return;\r\n  }\r\n\r\n  var valueString = mif.GetValueString(val, rowField);\r\n  var fullValue = lastRow ? `${lastRow.FullValue}__${valueString}` : valueString;\r\n\r\n  var row = undefined;\r\n  const handleRow = (row) => {\r\n    // Nếu Field là Công tác, thêm vào các đầu mục công tác của Table\r\n    row.Field = rowField;\r\n\r\n    // // Thiết lập tham số truy xuất để gom nhóm về sau\r\n    // row.QueryData.Set_FromMassItem(item);\r\n\r\n    // Gắn thông tin gốc vào Row\r\n    // row.RawValue = valueString;\r\n    rows.push(row);\r\n\r\n    // var cell = table.GetCell(col, row);\r\n    var cell = row.GetCell(col);\r\n    // Thiết lập tham số truy xuất để gom nhóm về sau\r\n    cell.QueryData.Set_FromMassItem(item);\r\n    cell.Items.push(item);\r\n\r\n    if (rowFieldIndex === rowFields.length - 1) {\r\n      // AddHandledItems(q, item);\r\n    } else {\r\n      HandleRowFieldIndex(q, item, col, rows, rowFields, rowFieldIndex + 1);\r\n    }\r\n  }\r\n\r\n  row = table.GetRow(valueString, lastRow)\r\n  // addRow(lastRow);\r\n\r\n  handleRow(row);\r\n}\r\n\r\n// const Handle_ReplaceMGI = (q, replaceMgi, supName, addRow, handleRow, originalSupRow) => {\r\n//   var isGet_SupRow_Done\r\n\r\n//   // Lấy SupRow phù hợp có trong ReplaceMGI\r\n//   const getSupRow = () => {\r\n//     var list = replaceMgi.SupRows;\r\n//     var index = list.findIndex(x => x.Name === supName);\r\n//     if (index !== -1) {\r\n//       isGet_SupRow_Done = true;\r\n//       return list[index]\r\n//     }\r\n//     return undefined;\r\n//   }\r\n\r\n//   // Thêm Row vào SupRow\r\n//   const awaitGetSupRowForAdd = (supRow) => {\r\n//     var r2 = addRow(supRow);\r\n//     r2.ReplaceMGI = replaceMgi;\r\n\r\n//     return r2;\r\n//   }\r\n\r\n//   // Đính thông tin OriginSupRow\r\n//   const setOriginal_SupRow = (row) => {\r\n//     row.Original_SupRow = originalSupRow;\r\n//     row.IsReplaced = true;\r\n//   }\r\n\r\n//   // Tổn hợp các Phương thức ở trên\r\n//   const fullFunc = () => {\r\n//     var sr = getSupRow();\r\n//     if (sr) {\r\n//       var r = awaitGetSupRowForAdd(sr);\r\n//       setOriginal_SupRow(r);\r\n//       handleRow(r);\r\n//     }\r\n//   }\r\n\r\n//   fullFunc();\r\n//   genUtil.Add_2(\r\n//     replaceMgi.On_AddSupRow_Func_Dict,\r\n//     () => {\r\n//       if (!isGet_SupRow_Done && replaceMgi.NewRow?.Name === supName) {\r\n//         fullFunc();\r\n//       }\r\n//     },\r\n//     false);\r\n// }\r\n\r\n// Handle Item\r\n// const AddHandledItems = (q, item) => {\r\n//   if (q.RunType === rt.partial) {\r\n//     return;\r\n//   }\r\n\r\n//   var table = q.Table;\r\n\r\n//   var handledItems = q.Handled_Masses\r\n//   const additem_func = () => {\r\n//     handledItems.push(item);\r\n//   }\r\n\r\n//   if (table.ColumnField !== mif.Phase) {\r\n//     additem_func();\r\n//   } else {\r\n//     var handlePhases = q.Handled_MassPhases;\r\n//     var index = handlePhases.findIndex(x => x.Item === item);\r\n//     var obj = undefined;\r\n//     if (index === -1) {\r\n//       obj = {\r\n//         Item: item,\r\n//         Count: 0\r\n//       };\r\n//       handlePhases.push(obj);\r\n//     } else {\r\n//       obj = handlePhases[index];\r\n//     }\r\n//     obj.Count++;\r\n\r\n//     if (obj.Count === item.ValidPhasesByInput.length) {\r\n//       additem_func();\r\n//     }\r\n//   }\r\n\r\n//   var handledCount = handledItems.length;\r\n//   var count = q.Masses.length\r\n//   table.HandledRatio = handledCount / count;\r\n\r\n//   if (handledCount === count) {\r\n//     UpdateData(q);\r\n//     q.Handled_Masses = [];\r\n//   }\r\n// }\r\n\r\n// // UpdateData\r\n// const UpdateData = (q) => {\r\n//   var table = q.Table;\r\n\r\n//   var rows = table.MainRows\r\n//   rows.forEach(x => {\r\n//     x.Update.Run(\r\n//       {\r\n//         Section: u_sn.celldata,\r\n//         Data: { Sections: uc_sn.subcells }\r\n//       },\r\n//       u_dt.lower\r\n//     )\r\n//   })\r\n\r\n//   // Update SaveValue - MassType, Category, Level ...\r\n//   table.SaveValue.Run();\r\n\r\n//   table.TBody.Rows = rows;\r\n//   if (q.MainHandle) {\r\n//     q.MainHandle();\r\n//   }\r\n// }","import { ValueItem } from \"./ValueItem\"\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new ValueItem();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n// Method\r\n","import * as genUtil from '../../../../../../../../util/generalUtil'\r\nimport { Bulid } from \"./Build\"\r\nimport * as bycellUtil from '../bycell/ItemUtil'\r\nimport * as byitemUtil from '../byitem/base/ItemUtil'\r\nimport * as mif from '../../../../field/MassItemField'\r\nimport { PMData } from '../../../../../../single/model/PMData'\r\n\r\nimport * as u_sn from '../../../row/update/MRU_SectionName'\r\nimport * as uc_sn from '../../../cell/update/MCU_SectionName'\r\nimport * as u_dt from '../../../../../update/Update_DirectionType'\r\n\r\nimport * as massItemUtil from '../../../../item/base/MassItemUtil'\r\nimport * as reportUtil from '../../../../report/ReportUtil'\r\n\r\nimport * as mc_ct from '../../../cell/base/MassCell_CreateType'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new Bulid();\r\n  qI.Table = q;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetByCell = (q) => {\r\n  return bycellUtil.get(q)\r\n}\r\n\r\nexport const GetByItem = (q) => {\r\n  return byitemUtil.get(q)\r\n}\r\n\r\n// Method\r\nexport const Run = (q) => {\r\n  var table = q.Table;\r\n\r\n  // Initial\r\n  q.Initial();\r\n\r\n  var data = q.Data;\r\n\r\n  var length = data.length;\r\n  var i = 0;\r\n  const incre_func = () => {\r\n    i++;\r\n    if (i === length) {\r\n      UpdateData(q, () => Run_Command(q, q.Finish))\r\n    }\r\n  }\r\n\r\n  // set columns\r\n  data.forEach(x => {\r\n    var col = table.GetColumn(x.key);\r\n    col.Report = reportUtil.GetFromDb(x.report);\r\n  })\r\n\r\n  // set rows\r\n  data.forEach(x => {\r\n    var col = table.GetColumn(x.key);\r\n\r\n    if (x.cells) {\r\n      // cells\r\n      q.ByCell.Run(x.cells, col, incre_func)\r\n    } else {\r\n      const handle_masses = () => {\r\n        // masses\r\n        var masses = x.masses.map(x => {\r\n          var qI = massItemUtil.get(x)\r\n          col.MassItem_Handle(qI);\r\n          return qI;\r\n        });\r\n        q.ByItem.HandleItems(\r\n          masses, col, undefined, [mif.MassType], incre_func)\r\n      }\r\n\r\n      switch (x.key.field) {\r\n        case 'project':\r\n          if (col.Project) {\r\n            handle_masses();\r\n          } else {\r\n            genUtil.Add_2(col.OnSet_Project_Func, handle_masses);\r\n          }\r\n          break;\r\n        case 'phase':\r\n          if (col.Phase) {\r\n            handle_masses()\r\n          } else {\r\n            genUtil.Add_2(col.OnSet_Phase_Func, handle_masses);\r\n          }\r\n          break;\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport const Initial = (q) => {\r\n  var qI = q.Table;\r\n\r\n  qI.Columns = [];\r\n\r\n  // Reset các dòng tạo bởi người dùng\r\n  qI.CreatedByUser_Rows = []\r\n  qI.Handled_CreatedByUser_Rows = []\r\n}\r\n\r\nconst UpdateData = (q, handle) => {\r\n  var table = q.Table;\r\n\r\n  var rows = table.MainRows\r\n\r\n  // Update SaveValue - MassType, Category, Level ...\r\n  table.SaveValue.Run();\r\n\r\n  table.TBody.Rows = rows;\r\n\r\n  if (handle) {\r\n    handle();\r\n  }\r\n}\r\n\r\n// Run pre command\r\nconst Run_Command = (q, handle) => {\r\n  var table = q.Table;\r\n\r\n  var mgs = pmData().Mgs_Dict_Dict.Current_MGS\r\n  if (mgs) {\r\n    const func1 = () => {\r\n      var cd = table.CommandDict\r\n      var list = cd.PreItems = mgs.CommandData.Items.map(x => x.Clone(cd));\r\n\r\n      var count = list.length\r\n\r\n      const c_fin = () => {\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      }\r\n\r\n      if (count !== 0) {\r\n        var i = 0;\r\n\r\n        const do_command = () => {\r\n          var ci = list[i];\r\n          ci.Do(() => {\r\n            i++;\r\n            if (i === count) {\r\n              c_fin();\r\n            } else {\r\n              do_command();\r\n            }\r\n          });\r\n        }\r\n\r\n        do_command();\r\n      } else {\r\n        c_fin();\r\n      }\r\n    }\r\n\r\n    if (mgs.CommandData) {\r\n      func1();\r\n    } else {\r\n      genUtil.Add_2(mgs.OnSet_CommandData_Func, func1)\r\n    }\r\n  } else {\r\n    if (handle) {\r\n      handle();\r\n    }\r\n  }\r\n}\r\n\r\nexport const Finish = (q) => {\r\n  var qI = q.Table;\r\n\r\n  qI.Is_Render_Done = true;\r\n}","import { Report } from \"./Report\"\r\n\r\n// Instance\r\nexport const GetFromDb = (data) => {\r\n  var qI = new Report();\r\n\r\n  qI._id = data._id\r\n  qI.projectId = data.projectId\r\n  qI.versionIds = data.versionIds\r\n  qI.phaseIds = data.phaseIds\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n","import * as mif from '../../../field/MassItemField'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as commandDictUtil from '../../command/dict/CommandDictUtil'\r\nimport * as saveValueUtil from '../../savevalue/base/SaveValueUtil'\r\nimport * as buildUtil from '../build/base/BulidUtil'\r\n\r\n// Property\r\nexport const GetMassGroupName = (q) => {\r\n  return q.MassGroupSetting ? q.MassGroupSetting.Name\r\n    : '';\r\n}\r\n\r\nexport const GetAllRows = (q) => {\r\n  var list = [];\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.AllItems)\r\n  });\r\n  return list;\r\n}\r\n\r\n// columnfield\r\nexport const GetColumnField = (q) => {\r\n  var qI = q.Dict.Dict.IsHavePhase ? mif.Phase : mif.Project\r\n  return qI;\r\n}\r\n\r\n// backup\r\nexport const GetCommandDict = (q) => {\r\n  return commandDictUtil.get(q)\r\n}\r\n\r\n// savevalue\r\nexport const GetSaveValue = (q) => {\r\n  return saveValueUtil.get(q)\r\n}\r\n\r\n// build\r\nexport const GetBuildData = (q) => {\r\n  return buildUtil.get(q);\r\n}","import { SaveValue } from \"./SaveValue\"\r\nimport { PMData } from \"../../../../../single/model/PMData\";\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new SaveValue();\r\n  qI.Table = dict;\r\n  return qI;\r\n}\r\n\r\n// Property","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport class ExcelExport {\r\n  workbook\r\n  get Workbook(){\r\n    if (this.Override_Get_Workbook){\r\n      return this.Override_Get_Workbook()\r\n    }\r\n    return this.workbook;\r\n  } set Workbook(v){\r\n    this.workbook = v;\r\n  }\r\n\r\n  fileName\r\n  get FileName() {\r\n    if (this.Override_Get_FileName) {\r\n      return this.Override_Get_FileName();\r\n    }\r\n    return this.fileName;\r\n  } set FileName(v) {\r\n    this.fileName = v;\r\n  }\r\n\r\n  Export = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    \r\n    const excelBuffer = XLSX.write(this.Workbook, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './MT_CellUtil'\r\n\r\nexport class MT_Cell {\r\n  // Lấy thứ tự trong lập trình\r\n  row = 0\r\n  get Row(){\r\n    if (this.Override_Get_Row){\r\n      return this.Override_Get_Row();\r\n    }\r\n    return this.row;\r\n  } set Row(v){\r\n    this.row = v;\r\n    this.Override_Get_Row = undefined;\r\n  }\r\n\r\n  // Lấy thứ tự trong lập trình\r\n  column = 0\r\n  get Column(){\r\n    if (this.Override_Get_Column){\r\n      return this.Override_Get_Column();\r\n    }\r\n    return this.column\r\n  } set Column(v){\r\n    this.column = v;\r\n    this.Override_Get_Column = undefined;\r\n  }\r\n\r\n  Type \r\n  Value\r\n\r\n  formula\r\n  get Formula(){\r\n    if (this.Override_Get_Formula){\r\n      return this.Override_Get_Formula();\r\n    }\r\n    return this.formula;\r\n  } set Formula(v){\r\n    this.formula = v;\r\n    this.Override_Get_Formula = undefined;\r\n  }\r\n\r\n  get Address(){\r\n    var obj = genUtil.ExcelCellName(this.Row, this.Column);\r\n    return obj;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  isContinueSubRows\r\n  get IsContinueSubRows(){\r\n    if (this.isContinueSubRows === undefined){\r\n      this.isContinueSubRows = util.GetIsContinueSubRows(this);\r\n    }\r\n    return this.isContinueSubRows;\r\n  }\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      t : this.Type,\r\n      v : this.Value,\r\n      f : this.Formula,\r\n      z : this.Format,\r\n      s : this.Style\r\n    }\r\n    return obj;\r\n  }\r\n}","// Property\r\nexport const GetSubItems = (q) => {\r\n  var column = q.Column;\r\n  return q.Dict.SubItems.map(x => {\r\n    var list = x.Cells;\r\n    var index = list.findIndex(y => y.Column === column);\r\n    return index !== -1 ? list[index] : undefined;\r\n  }).filter(x => x !== undefined);\r\n}\r\n\r\nexport const GetIsContinueSubRows = (q) => {\r\n  var isValid = true;\r\n\r\n  q.SubItems.forEach(x => {\r\n    if (isValid && x.SubItems.length !== 0){\r\n      isValid = false;\r\n    }\r\n  })\r\n\r\n  return isValid;\r\n}","import * as util from './MT_Data_RowUtil'\r\n\r\nexport class MT_Data_Row {\r\n  Worksheet\r\n\r\n  Row\r\n\r\n  get Rank(){\r\n    return this.Row.Rank;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  get FullItems(){\r\n    return util.GetFullItems(this);\r\n  }\r\n\r\n  cells\r\n  get Cells(){\r\n    if (!this.cells){\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  get FullIndex() {\r\n    return this.Worksheet.FullRows.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  }\r\n}","export const string = 's'\r\nexport const number = 'n'","import { MT_Cell } from \"./MT_Cell\";\r\nimport { MT_Data_Row } from \"./MT_Data_Row\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\n\r\n// Instance\r\nexport const get = (row, ws, supItem) => {\r\n  var qI = new MT_Data_Row();\r\n\r\n  qI.Row = row;\r\n  qI.Worksheet = ws;\r\n  qI.SupItem = supItem;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetSubItems = (q) => {\r\n  return q.Row.SubItems.map(x => get(x, q.Worksheet, q));\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  var row = q.Row;\r\n  var title = '';\r\n\r\n  for (var i = 0; i < row.Rank; i++) {\r\n    title += '  ';\r\n  }\r\n\r\n  title += row.Title;\r\n\r\n  return title;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var vc_dict = q.ValueCell_Dict = [];\r\n\r\n  var firstCol = q.Worksheet.First_ValueColumn;\r\n  var firstRow = q.Worksheet.First_ValueRow;\r\n\r\n  var row = q.Row;\r\n  var list = []\r\n  var getRowFunc = () => q.FullIndex + firstRow;\r\n\r\n  var titleCell = new MT_Cell();\r\n  titleCell.Dict = q;\r\n  titleCell.Type = c_vt.string;\r\n\r\n  titleCell.Value = q.Title;\r\n  titleCell.Column = 0 + firstCol;\r\n  titleCell.Override_Get_Row = getRowFunc\r\n  list.push(titleCell);\r\n\r\n  var columns = row.Table.Columns\r\n  row.Cells.forEach(x => {\r\n    var valueCell = new MT_Cell()\r\n    valueCell.Dict = q;\r\n    valueCell.Type = c_vt.number;\r\n    valueCell.Value = x.TotalValue\r\n    valueCell.Format = '0.00'\r\n    valueCell.Column = \r\n      columns.indexOf(x.Column) + 1 + firstCol\r\n    valueCell.Override_Get_Row = getRowFunc\r\n\r\n    valueCell.Override_Get_Formula = () => {\r\n      var subItems = valueCell.SubItems;\r\n      var length = subItems.length;\r\n      if (length === 0) return undefined;\r\n\r\n      var formula\r\n      if (!valueCell.IsContinueSubRows) {\r\n        formula = subItems.reduce((a, x, i) => {\r\n          if (i !== 0) {\r\n            a += ','\r\n          };\r\n          a += x.Address\r\n          return a\r\n        }, 'SUM(');\r\n\r\n        formula += ')';\r\n      } else {\r\n        formula = `SUM(${subItems[0].Address}:${subItems[length-1].Address})`\r\n      }\r\n\r\n      return formula;\r\n    }\r\n\r\n    var key = x.Column.Name\r\n    list.push(valueCell);\r\n    vc_dict.push({\r\n      Key: key,\r\n      Value: valueCell\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetFullItems = (q) => {\r\n  var list = [q];\r\n\r\n  q.SubItems.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  });\r\n\r\n  return list;\r\n}","import * as util from './MT_Data_WorksheetUtil'\r\n\r\nexport class MT_Data_Worksheet {\r\n  get Table(){\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  mainRows\r\n  get MainRows(){\r\n    if (!this.mainRows){\r\n      this.mainRows = util.GetMainRows(this)\r\n    }\r\n    return this.mainRows;\r\n  }\r\n\r\n  fullRows\r\n  get FullRows(){\r\n    if (!this.fullRows){\r\n      this.fullRows = util.GetFullRows(this);\r\n    }\r\n    return this.fullRows;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells(){\r\n    if (!this.valueCells){\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells;\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName(){\r\n    return util.GetRangeName(this); \r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      '!ref' : this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import * as rowUtil from './MT_Data_RowUtil'\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { MT_Cell } from './MT_Cell';\r\n\r\n// Property\r\nexport const GetMainRows = (q) => {\r\n  return q.Table.MainRows.map(x => rowUtil.get(x, q));\r\n}\r\n\r\nexport const GetFullRows = (q) => {\r\n  var list = [];\r\n\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var list = [];\r\n\r\n  q.FullRows.forEach(x => {\r\n    list.push.apply(list, x.Cells);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var list = [];\r\n  q.Table.Columns.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x.Name;\r\n    cell.Column = i + fc + 1;\r\n    cell.Row = fr\r\n    cell.Style = {\r\n      font : {\r\n        bold : true\r\n      }\r\n    }\r\n\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_RawData_WorksheetUtil'\r\n\r\nexport class MT_RawData_Worksheet {\r\n  Workbook\r\n\r\n  get Table() {\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  dataRows\r\n  get DataRows(){\r\n    if (!this.dataRows){\r\n      this.dataRows = util.GetDataRows(this);\r\n    }\r\n    return this.dataRows;\r\n  }\r\n\r\n  tableRows\r\n  get TableRows() {\r\n    if (!this.tableRows) {\r\n      this.tableRows = util.GetTableRows(this);\r\n    }\r\n    return this.tableRows;\r\n  }\r\n\r\n  records\r\n  get Records() {\r\n    if (!this.records) {\r\n      this.records = util.GetRecords(this);\r\n    }\r\n    return this.records\r\n  }\r\n\r\n  InfoFields = []\r\n\r\n  valueFields\r\n  get ValueFields() {\r\n    if (!this.valueFields) {\r\n      this.valueFields = util.GetValueFields(this);\r\n    }\r\n    return this.valueFields;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells() {\r\n    if (!this.valueCells) {\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName() {\r\n    return util.GetRangeName(this);\r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData() {\r\n    var obj = {\r\n      '!ref': this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Cell } from \"./MT_Cell\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Property\r\nexport const GetDataRows = (q) => {\r\n  return q.Workbook.Data_WS.FullRows\r\n    .filter(x => x.SubItems.length === 0)\r\n}\r\n\r\nexport const GetTableRows = (q) => {\r\n  return q.DataRows.map(x => x.Row)\r\n}\r\n\r\nexport const GetValueFields = (q) => {\r\n  return q.Table.Columns.map(x => x.Name);\r\n}\r\n\r\nexport const GetRecords = (q) => {\r\n  return q.DataRows.map(x => {\r\n    // Init Cells\r\n    var cells = x.Cells;\r\n\r\n    var obj = x.Row.ExportData;\r\n\r\n    // Xử lý phần sắp xếp  Info Fields\r\n    var infoFields = q.InfoFields;\r\n    obj.Infos.map(x => x.Key).forEach(y => {\r\n      if (!infoFields.includes(y)) {\r\n        infoFields.push(y);\r\n      }\r\n    });\r\n\r\n    return {\r\n      Binding_DataRow: x,\r\n      Value: obj\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var fc = q.First_ValueColumn;\r\n  var fr = q.First_ValueRow;\r\n\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var list = [];\r\n  var ifs = q.InfoFields;\r\n  var ifl = ifs.length\r\n  var vfs = q.ValueFields;\r\n\r\n  records.forEach((x, i) => {\r\n    // Truy xuất phần binding\r\n    var vc_dict = x.Binding_DataRow.ValueCell_Dict\r\n\r\n    // Xử lý phần Value Object\r\n    var value = x.Value;\r\n    var cell\r\n    var row = i + fr;\r\n\r\n    // Xử lý Info\r\n    value.Infos.forEach(y => {\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.string;\r\n      cell.Value = y.Value;\r\n      cell.Column = ifs.indexOf(y.Key) + fc;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n    })\r\n\r\n    // Xử lý Value\r\n    value.Values.forEach(y => {\r\n      var key = y.Key;\r\n      var cell_val = y.Value;\r\n\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.number;\r\n      cell.Value = cell_val;\r\n      cell.Format = '0.00'\r\n      cell.Column = vfs.indexOf(key) + fc + ifl;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n\r\n      // Xử lý phần Binding\r\n      //debugger\r\n      var index = vc_dict.findIndex(z => z.Key === key);\r\n      var data_cell = vc_dict[index].Value;\r\n\r\n      if (cell_val) {\r\n        data_cell.Formula = `raw_data!${cell.Address}`;\r\n      }\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var fields = q.InfoFields.concat(q.ValueFields)\r\n\r\n  var list = [];\r\n  fields.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x;\r\n    cell.Column = i + fc;\r\n    cell.Row = fr\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_WorkbookUtil'\r\n\r\nexport class MT_Workbook {\r\n  Table\r\n\r\n  get All_WS(){\r\n    return [ this.RawData_WS, this.Data_WS]\r\n    //return [ this.Data_WS, this.RawData_WS]\r\n    //return [ this.Data_WS ]\r\n  }\r\n\r\n  data_WS\r\n  get Data_WS(){\r\n    if (!this.data_WS){\r\n      this.data_WS = util.GetData_WS(this);\r\n    }\r\n    return this.data_WS;\r\n  }\r\n\r\n  rawData_WS\r\n  get RawData_WS(){\r\n    if (!this.rawData_WS){\r\n      this.rawData_WS = util.GetRawData_WS(this);\r\n    }\r\n    return this.rawData_WS;\r\n  }\r\n\r\n  get ResultData (){\r\n    var obj = {\r\n      Sheets : { },\r\n      SheetNames : []\r\n    }\r\n\r\n    this.All_WS.forEach(x => {\r\n      obj.Sheets[x.Title] = x.ResultData\r\n      obj.SheetNames.push(x.Title);\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Data_Worksheet } from \"./MT_Data_Worksheet\";\r\nimport { MT_RawData_Worksheet } from \"./MT_RawData_Worksheet\";\r\nimport { MT_Workbook } from \"./MT_Workbook\"\r\n\r\n// Instance\r\nexport const get = (table) => {\r\n  var qI = new MT_Workbook();\r\n\r\n  qI.Table = table;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetData_WS = (q) =>{\r\n  var qI = new MT_Data_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'data'\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRawData_WS = (q) => {\r\n  var qI = new MT_RawData_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'raw_data'\r\n\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\n\r\nclass TextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = {\r\n        content: `Nội dung`\r\n      }\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var { content } = this.state;\r\n    var className = this.props.className\r\n    var style = this.props.style\r\n\r\n    return (\r\n      <>\r\n        <span className={className} style={style}>{content}</span>\r\n        {this.getWrapperContent()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TextView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Popover, Row, Select } from \"antd\";\r\nimport MassCell from \"./MassCell\";\r\nimport './MassCell.css'\r\nimport Icon, { InfoCircleOutlined, LinkOutlined } from '@ant-design/icons';\r\n// import MassCell_ValueView from \"./value/MassCell_ValueView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassCellView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassCell();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* <td style={data.TDStyle}> */}\r\n        <td style={data.ColorData.Td_Style}>\r\n          <div className='masscell__div'>\r\n            <div className='masscell__value'>\r\n              {data.IsHaveWarning ?\r\n                <Popover trigger='hover'\r\n                  content={<div>\r\n                    {data.TLS_LevelGroup_Descriptions ?\r\n                      data.TLS_LevelGroup_Descriptions.map(x => {\r\n                        return <span key={x}>{x}</span>\r\n                      })\r\n                      : ''}\r\n                  </div>}>\r\n                  <InfoCircleOutlined className='masscell__warningicon' />\r\n                </Popover>\r\n                : ''}\r\n              {/* <div style={data.AStyle}> */}\r\n              <div style={data.ColorData.ValueStyle}>\r\n                {data.ValueData.CurrentItem?.ValueString}\r\n\r\n                {/* ViewDetail */}\r\n                {!data.Items || data.Items.length !== 0 ?\r\n                  data.ViewDetail.View\r\n                  : ''}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassCellView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select, Space } from \"antd\";\r\nimport SelectView from \"../../../../../../select/SelectView\";\r\nimport { MR_Unit } from \"./MR_Unit\";\r\nimport './MR_Unit.css'\r\n\r\nconst { Option } = Select;\r\n\r\nclass MR_UnitView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MR_Unit();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <td className='massrow__unit__td'\r\n          onMouseEnter={data.OnMouseEnter}\r\n          onMouseLeave={data.OnMouseLeave}>\r\n          {data.MainView}\r\n        </td>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MR_UnitView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport TextView from \"../../../../../../text/TextView\";\r\nimport MassRow from \"./MassRow\";\r\nimport MassCellView from \"../../cell/base/MassCellView\";\r\nimport EditableTextView from \"../../../../../../text/EditableTextView\";\r\nimport './MassRow.css'\r\nimport MR_UnitView from \"../unit/MR_UnitView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassRowView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    // debugger\r\n    // var unitData = data.UnitData\r\n\r\n    var toggleButton = data.IsHaveSub ?\r\n      <Button size='small' style={{ marginRight: 5, minWidth: 25 }} type='primary'\r\n        onClick={data.ToggleSub}>\r\n        <TextView store={data.ToggleButtonContentVM} />\r\n      </Button>\r\n      : <div style={{ padding: '0 15.5px' }} />;\r\n\r\n    return (\r\n      <>\r\n        <tr className={data.UnitData.MissingCss}>\r\n          <th scope='row' >\r\n            <div className='massrow__title__wrapper'\r\n              onMouseEnter={data.ShowHover}\r\n              onMouseLeave={data.HideHover}>\r\n              <div className='f' style={data.Style}>\r\n                {toggleButton}\r\n\r\n                <div className='f1 f-ac'>\r\n                  <span onDoubleClick={data.EditTitle}>\r\n                    <EditableTextView store={data.Editable_TitleVM} />\r\n                  </span>\r\n\r\n                  {data.IsHave_Addition_Wrapper ?\r\n                    <div className='massrow__addition__wrapper'>\r\n                      {data.ReplaceInformation_Element}\r\n                      {data.RawValue_Element}\r\n                    </div>\r\n                    : ''}\r\n                </div>\r\n\r\n                <div className='massrow__hover__wrapper'>\r\n                  {data.HoverData.View}\r\n                  {data.ModalElement}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </th>\r\n\r\n          {/* Cells */}\r\n          {data.Cells.map(x => {\r\n            return <MassCellView key={x.id} store={x} />\r\n          })}\r\n\r\n          <MR_UnitView store={data.UnitData} />\r\n        </tr>\r\n\r\n        {/* Thể hiện trang thái xử lý dữ liệu */}\r\n        {data.IsDataPending_View}\r\n\r\n        {data.IsShowSub ? data.SubItems.map((x, i) => {\r\n          return <MassRowView store={x} key={x.id} />\r\n        }) : undefined}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRowView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport MassRowView from '../row/base/MassRowView';\r\n\r\nexport class MassTBody {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      rows : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  rows = []\r\n  get Rows() {\r\n    return this.rows\r\n  } set Rows(v){\r\n    this.rows = v;\r\n  }\r\n\r\n  RemoveRows = []\r\n\r\n  get View() {\r\n    return <tbody>\r\n      {this.Rows ? this.Rows.map((x, i) => {\r\n        return <MassRowView key={x.id} store={x} />\r\n      }) : <tr/>}\r\n    </tbody>\r\n  }\r\n\r\n  GetRow = (key) => {\r\n    var list = this.Rows;\r\n    var item\r\n\r\n    key.forEach(x => {\r\n      item = genUtil.SingleFilter(list, y => y.FullValue === x);\r\n      list = item.SubItems\r\n    });\r\n\r\n    return item;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { MassTBody } from \"./MassTBody\";\r\n\r\nclass MassTBody_View extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassTBody();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.View}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassTBody_View)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport MassTable from \"./MassTable\";\r\nimport './MassTable.css'\r\nimport { DownloadOutlined, SaveFilled } from \"@ant-design/icons\";\r\nimport { PMDataVM } from \"../../../../../single/form/PMDataVM\";\r\nimport MassTBody_View from \"../../tbody/MassTBody_View\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nclass MassTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var columns = data.Columns\r\n    var thElems = columns ? columns.map((x, i) => {\r\n      return <th scope=\"col\" key={x.id} className='text-center masscell_th'>{x.Name}</th>\r\n    }) : '';\r\n\r\n    return (\r\n      <>\r\n        {data.Is_Render_Done ?\r\n          <>\r\n            <div className='masstable__wrapper'>\r\n              <div className=\"masstable__title__wrapper f-jc\">\r\n                <div className='f'>\r\n                  <h4 className=\"masstable__title\">\r\n                    BẢNG TỔNG HỢP KHỐI LƯỢNG\r\n                  </h4>\r\n                  <div className='masstable__title__tool f'>\r\n                    {/* Save MassGroupSetting */}\r\n                    {pmDataVM().Mgs_Dict_Dict.Save_MGS_View}\r\n\r\n                    <Button type='primary' size='small' onClick={data.Export}\r\n                      className='masstable__export'>\r\n                      <DownloadOutlined />\r\n                    </Button>\r\n\r\n                    {/* Forge View */}\r\n                    {data.Dict.Forge?.ToggleView_Button}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className='f-jc'>\r\n                <div className='f'>\r\n                  <div className='masstable__undo'>\r\n                    {/* Undo */}\r\n                    {data.CommandDict.ButtonView}\r\n                  </div>\r\n\r\n                  {/* Table */}\r\n                  <table className=\"table table-bordered table-sm masstable\">\r\n                    <thead className=\"thead-light\">\r\n                      <tr>\r\n                        <th scope=\"col\" className='masstitle__th'>\r\n                          <Button onClick={data.AddMainRow} type='primary' size='small'\r\n                            style={{ backgroundColor: '#52c41a', border: 'none' }}>+</Button>\r\n                        </th>\r\n                        {thElems}\r\n                      </tr>\r\n                    </thead>\r\n\r\n                    {/* {data.TBody.View} */}\r\n                    <MassTBody_View key={data.TBody.id} store={data.TBody} />\r\n                  </table>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </> : ''\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassTableView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as mif from '../../../field/MassItemField'\r\nimport * as colUtil from '../../column/base/MassColumnUtil'\r\nimport * as rowUtil from '../../row/base/MassRowUtil'\r\nimport * as cellUtil from '../../cell/base/MassCellUtil'\r\nimport * as util from './MassTableUtil'\r\nimport { PMData } from '../../../../../single/model/PMData';\r\nimport { PMDataVM } from '../../../../../single/form/PMDataVM';\r\nimport dayjs from 'dayjs';\r\nimport * as eeUtil from '../../../../../../export/excel/ExcelExportUtil';\r\nimport * as wbUtil from '../../export/MT_WorkbookUtil';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { MassTBody } from '../../tbody/MassTBody'\r\nimport MassTableView from './MassTableView'\r\nimport MassColumn from '../../column/base/MassColumn';\r\nimport MassRow from '../../row/base/MassRow';\r\n\r\n\r\nexport const pmData = () => PMData.Instance;\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nexport default class MassTable {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      is_Render_Done: observable,\r\n      Columns: observable,\r\n      // MainRows: observable,\r\n      // Cells: observable,\r\n      columnField: observable,\r\n      tbody: observable\r\n    })\r\n  }\r\n\r\n  // id\r\n  _id\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  //columnField = mif.Project\r\n  columnField = undefined\r\n  get ColumnField() {\r\n    if (!this.columnField){\r\n      this.columnField = util.GetColumnField(this)\r\n    } return this.columnField;\r\n  } set ColumnField(v) {\r\n    this.columnField = v;\r\n  }\r\n\r\n  Columns = undefined\r\n\r\n  get MainRows(){\r\n    return this.TBody.Rows;\r\n  } set MainRows(v){\r\n    this.TBody.Rows = v\r\n  }\r\n\r\n  // Cells = undefined\r\n\r\n  get AllRows() {\r\n    return util.GetAllRows(this);\r\n  }\r\n\r\n  GetColumn = (key) => {\r\n    var list = this.Columns;\r\n    var item = genUtil.SingleFilter(list, x => x.key.value === key.value)\r\n    if (!item){\r\n      item = new MassColumn();\r\n      item.Table = this;\r\n      item.key = key;\r\n      list.push(item);\r\n    }\r\n    return item;\r\n  }\r\n\r\n  GetRow = (rawValue, supRow) => {\r\n    var list = supRow ? supRow.SubItems : this.MainRows;\r\n    var fullValue = supRow ? `${supRow.FullValue}__${rawValue}` : rawValue;\r\n    var item = genUtil.SingleFilter(list, x => x.FullValue === fullValue);\r\n    if (!item){\r\n      var item = new MassRow();\r\n      item.Original_SupRow = item.SupItem = supRow\r\n      item.RawValue = rawValue;\r\n\r\n      if (!supRow){\r\n        item.Dict = this;\r\n      }\r\n\r\n      list.push(item);\r\n    }\r\n    return item;\r\n  }\r\n\r\n  // GetColumn = (name, data) => {\r\n  //   var list = this.Columns;\r\n  //   var item = undefined;\r\n  //   var index = list.findIndex(x => x.Name === name);\r\n  //   if (index === -1) {\r\n  //     item = colUtil.get(name, this, data);\r\n  //     list.push(item);\r\n  //     return item;\r\n  //   }\r\n  //   else {\r\n  //     return list[index];\r\n  //   }\r\n  // }\r\n\r\n  // Data\r\n  get Data() {\r\n    return this.Dict.Data;\r\n  }\r\n\r\n  // Build\r\n  buildData\r\n  get BuildData() {\r\n    if (!this.buildData) {\r\n      this.buildData = util.GetBuildData(this)\r\n    } return this.buildData\r\n  }\r\n\r\n  OnSetHandledRatio_Funcs = []\r\n\r\n  handledRatio\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  } set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.OnSetHandledRatio_Funcs.forEach(x => x(v));\r\n  }\r\n\r\n  // MassGroupSetting\r\n  // get MassGroupSetting_DictVM() {\r\n  //   return pmDataVM().MassGroupSetting_Dict\r\n  // }\r\n\r\n  // get Mgs_Dict_Dict() {\r\n  //   return pmData().Mgs_Dict_Dict\r\n  // }\r\n\r\n  AddMainRow = () => {\r\n    return rowUtil.Add(undefined, this);\r\n  }\r\n\r\n  // Excel Export\r\n  get ExportTitle() {\r\n    var text = pmData().CurrentProject?.Name;\r\n    text = text ? text + '_' : '';\r\n\r\n    if (this.ColumnField === mif.Phase) {\r\n      text += 'phase_'\r\n    }\r\n\r\n    const formatedDate = dayjs(Date.now()).format(\"YYMMDD\");\r\n    text += `masstable_${formatedDate}`\r\n    return text;\r\n  }\r\n\r\n  get ExcelWorkbook() {\r\n    return wbUtil.get(this).ResultData;\r\n  }\r\n\r\n  excelExport\r\n  get ExcelExport() {\r\n    if (!this.excelExport) {\r\n      this.excelExport = eeUtil.get(\r\n        undefined, undefined,\r\n        () => this.ExportTitle,\r\n        () => this.ExcelWorkbook);\r\n    }\r\n    return this.excelExport;\r\n  }\r\n\r\n  Export = () => {\r\n    this.ExcelExport.Export();\r\n  }\r\n\r\n  // Lưu trữ các Row tạo bởi người dùng\r\n  // Trước mặt dùng để xử lý lỗi không update TotalValue\r\n  // trong lần đầu tiên truy xuất bảng khối lượng\r\n  CreatedByUser_Rows\r\n  Handled_CreatedByUser_Rows\r\n\r\n  Add_Handled_CreatedByUser_Row = (row) => {\r\n    this.Handled_CreatedByUser_Rows.push(row);\r\n\r\n    if (this.CreatedByUser_Rows.length === this.Handled_CreatedByUser_Rows.length) {\r\n      // Xử lý TotalValue thành công với tất cả các CreatedByUser_Row\r\n    }\r\n  }\r\n\r\n  // Body\r\n  tbody = undefined\r\n  get TBody() {\r\n    if (!this.tbody) {\r\n      var obj = this.tbody = new MassTBody();\r\n      obj.Dict = this\r\n    } return this.tbody\r\n  }\r\n\r\n  // Backup\r\n  commandDict\r\n  get CommandDict() {\r\n    if (!this.commandDict) {\r\n      this.commandDict = util.GetCommandDict(this)\r\n    } return this.commandDict;\r\n  }\r\n\r\n  // SaveValue\r\n  saveValue\r\n  get SaveValue() {\r\n    if (!this.saveValue) {\r\n      this.saveValue = util.GetSaveValue(this)\r\n    } return this.saveValue;\r\n  }\r\n\r\n  // Render\r\n  is_Render_Done = undefined\r\n  get Is_Render_Done(){\r\n    return this.is_Render_Done\r\n  } set Is_Render_Done(v){\r\n    this.is_Render_Done = v;\r\n    this.Dict.IsDataPending = false;\r\n  }\r\n\r\n  // View\r\n  get View() {\r\n    return <MassTableView key={this.id} store={this} />\r\n  }\r\n}","import {ExcelExport} from './ExcelExport'\r\n\r\nexport const get = (fileName, wb, ovrgFileName, ovrgWb) => {\r\n  var qI = new ExcelExport();\r\n\r\n  qI.FileName = fileName;\r\n  qI.Override_Get_FileName = ovrgFileName;\r\n  qI.Workbook = wb;\r\n  qI.Override_Get_Workbook = ovrgWb;\r\n\r\n  return qI;\r\n}","import { PMData } from \"../../../../single/model/PMData\";\r\nimport * as forgeUtil from \"../../../forge/View/ForgeUtil\";\r\nimport MassTable from \"../../table/base/instance/MassTable\";\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\n// Property\r\nexport const GetMassTable = (q) => {\r\n  // Lưu Table vào pmData để có truy vết sau này (phần undo)\r\n  var qI = pmData().Current_MassTable = new MassTable();\r\n\r\n  qI.OnSetHandledRatio_Funcs.push((v) => {\r\n    // q1.HandledRatio = v;\r\n    q.HandledRatio = v;\r\n  })\r\n\r\n  qI.Dict = q;\r\n  qI.BuildData.Run();\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Handle_Forge = (q) => {\r\n  if (q.IsGet_Forge) return undefined;\r\n  q.IsGet_Forge = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Forge = data ?\r\n      (data.length != 0 ?\r\n        forgeUtil.GetFromDb(data[0], q) : forgeUtil.get(q))\r\n      : undefined\r\n    q.IsGet_Forge = false;\r\n  }\r\n\r\n  if (!q.MassTable || !pmData().CurrentProject) {\r\n    setObj();\r\n  } else {\r\n    var apiData = {\r\n      projectId: pmData().CurrentProject._id\r\n    }\r\n\r\n    forgeUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../../../text/TextVMUtil'\r\nimport * as util from './MassItem_DictUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport default class MassItem_Dict {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      massTable: observable,\r\n      isDataPending: observable,\r\n      forge: observable\r\n    })\r\n  }\r\n\r\n  data\r\n  get Data() {\r\n    return this.data\r\n  } set Data(v) {\r\n    this.data = v;\r\n\r\n    this.IsDataPending = true;\r\n    this.MassTable = util.GetMassTable(this)\r\n  }\r\n\r\n  // Table\r\n  massTable = undefined\r\n  get MassTable() {\r\n    return this.massTable\r\n  } set MassTable(v) {\r\n    this.massTable = v\r\n  }\r\n\r\n  // Loading\r\n  isDataPending = false;\r\n  get IsDataPending(){\r\n    return this.isDataPending\r\n  } set IsDataPending(v){\r\n    this.isDataPending = v;\r\n  }\r\n\r\n  get LoadingSpinTip() {\r\n    return `loading data ... (${(this.HandledRatio * 100).toFixed(1)}%)`;\r\n  }\r\n\r\n  loadingSpinTipVM\r\n  get LoadingSpinTipVM() {\r\n    if (!this.loadingSpinTipVM) {\r\n      this.loadingSpinTipVM = textUtil.get(this.LoadingSpinTip);\r\n    }\r\n    return this.loadingSpinTipVM;\r\n  }\r\n\r\n  handledRatio = 0\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  }\r\n  set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.LoadingSpinTipVM.Content = this.LoadingSpinTip;\r\n  }\r\n\r\n  // Forge\r\n  OnSet_Forge_Func = []\r\n\r\n  forge = undefined\r\n  get Forge() {\r\n    if (!this.forge){\r\n      util.Handle_Forge(this);\r\n    } return this.forge\r\n  } set Forge(v) {\r\n    this.forge = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Forge_Func,\r\n      (v) => this.OnSet_Forge_Func = v)\r\n  }\r\n}","import { PMData } from \"../../../../single/model/PMData\";\r\nimport MassItem_Dict from \"../../item/base/MassItem_Dict\"\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\n// Property\r\nexport const GetMassItem_Dict = (q) => {\r\n  var qI = new MassItem_Dict();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetMassGroupField_Dict = (q) => {\r\n  return q.Projects.length === 0 && !q.IsHavePhase ?\r\n    pmData().MIF_Dict_ForMassGroup : pmData().MIF_Dict_ForInput\r\n}\r\n\r\n// Method\r\nexport const GetApiData = (q) => {\r\n  var skip;\r\n  var take;\r\n\r\n  var obj = {\r\n    projectIds :  pmData().CurrentProject ? \r\n      [ pmData().CurrentProject._id ] : q.Projects.map(x => x._id),\r\n    phaseIds : q.IsHavePhase ? q.Phases.map(x => x._id) : undefined,\r\n    otherData : {\r\n      skip, take,\r\n      massGroupId : pmData().Mgs_Dict_Dict.Current_MGS?._id\r\n    }\r\n  }\r\n  \r\n  return obj;\r\n}","import * as util from './MassResultCompUtil'\r\nimport * as massItemUtil from '../../item/base/MassItemUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport * as mif from '../../field/MassItemField'\r\nimport * as dataUtil from '../data/DataUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassResultComp {\r\n  Projects = []\r\n\r\n  Phases = []\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict() {\r\n    if (!this.massItem_Dict) {\r\n      this.massItem_Dict = util.GetMassItem_Dict(this);\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone(v) {\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  isHavePhase = false\r\n  get IsHavePhase() {\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v) {\r\n    this.isHavePhase = v;\r\n    // if (v) {\r\n    //   this.MassItem_Dict.MassTable.ColumnField = mif.Phase\r\n    // } else {\r\n    //   this.MassItem_Dict.MassTable.ColumnField = mif.Project\r\n    // }\r\n  }\r\n\r\n  MassItemField_Dict\r\n\r\n  GetMassData = () => {\r\n    // // Refresh MGC và MGI\r\n    // var q1 = pmData().Mgs_Dict_Dict\r\n    // q1.Used_MassGroupComponent = undefined\r\n    // q1.Used_MassGroupItem = undefined\r\n\r\n    // Refresh ProjectDict MassDetail\r\n    pmData().Project_Dict_ForMassDetail = undefined\r\n\r\n    var dict = this.MassItem_Dict;\r\n    dict.IsDataPending = true;\r\n\r\n    // Gắn thông tin truy xuất lần đầu hay không\r\n    if (pmData().Is_First_Get_MassTable === undefined) {\r\n      // undefined => truy xuất lần đầu\r\n      pmData().Is_First_Get_MassTable = true;\r\n    } else {\r\n      // có giá trị => không phải lần đầu\r\n      pmData().Is_First_Get_MassTable = false;\r\n    }\r\n\r\n    dataUtil.GetData(this.ApiData, (massresult) => {\r\n      // Setup MassItemField\r\n      this.MassItemField_Dict = util.GetMassGroupField_Dict(this)\r\n\r\n      // Setup Table Data\r\n      var dict = this.MassItem_Dict;\r\n\r\n      dict.MassGroupSetting = this.MassGroupSetting ?\r\n        this.MassGroupSetting : undefined;\r\n      dict.Data = massresult\r\n\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n}","\r\nexport default class VCS_Item{\r\n  Color\r\n  Filter\r\n}","import * as util from './VersionCompareSettingUtil'\r\n\r\nexport default class VersionCompareSetting{\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems();\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as nft from '../../filter/NumberFilterType'\r\nimport VCS_Item from \"./VCS_Item\";\r\n\r\nexport const GetItems = (q) => {\r\n  var list = [];\r\n\r\n  // < 80\r\n  var item = new VCS_Item();\r\n  item.Color = '#1956c9';\r\n\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bysmaller;\r\n  filter.Values = [ 0.80 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n  // 80 -85\r\n  item = new VCS_Item();\r\n  item.Color = '#3f79d6';\r\n\r\n  filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bybetween;\r\n  filter.IsEqualLeft = true;\r\n  filter.Values = [ 0.80, 0.85 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n   // 85 -90\r\n   item = new VCS_Item();\r\n   item.Color = '#6f9fe9';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.85, 0.90 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 90 -95\r\n   item = new VCS_Item();\r\n   item.Color = '#a5c2f2';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.9, 0.95 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 95 -100\r\n   item = new VCS_Item();\r\n   item.Color = '#c9d9f6';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.95, 1 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 100 -105\r\n   item = new VCS_Item();\r\n   item.Color = '#f3cccc';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1, 1.05 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 105 -110\r\n   item = new VCS_Item();\r\n   item.Color = '#e9999a';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1.05, 1.10 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#de6568';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.10, 1.15 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#c90010';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.15, 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 115 -120\r\n    item = new VCS_Item();\r\n    item.Color = '#980009';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybigger;\r\n    filter.Values = [ 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    return list;\r\n}","export class TrackingItem{\r\n  Values = []\r\n\r\n  Count = 0\r\n}","import * as genUtil from '../../../../util/generalUtil'\r\nimport { TrackingItem } from './TrackingItem';\r\n\r\nexport class Tracking{\r\n  Items = []\r\n\r\n  AddItem = (values) => {\r\n    var list = this.Items;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => genUtil.IsSameValues(x.Values, values));\r\n    if (index === -1){\r\n      item = new TrackingItem();\r\n      item.Values = values;\r\n      list.push(item);\r\n    } else {\r\n      item = list[index];\r\n    }\r\n\r\n    item.Count ++;\r\n    return item;\r\n  }\r\n}","import * as mif from './MassItemField'\r\nimport * as sft from '../site/Site_FieldType'\r\n\r\nexport const GetForMassGroup = () => {\r\n  return mif.GetForMassGroup().map(x => {\r\n    return {\r\n      _id: x,\r\n      Name: mif.GetName(x),\r\n      Value: x\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetForDetail = () => {\r\n  return mif.GetForDetail().map(x => {\r\n    return {\r\n      _id: x,\r\n      Name: mif.GetName(x),\r\n      Value: x\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetForInput = () => {\r\n  return mif.GetForInput().map(x => {\r\n    return {\r\n      _id: x,\r\n      Name: mif.GetName(x),\r\n      Value: x\r\n    }\r\n  })\r\n}","import * as itemUtil from '../base/ProjectUtil'\r\nimport * as util from './Project_DictUtil'\r\n\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class Project_Dict {\r\n  // items\r\n  // get Items(){\r\n  //   if (!this.items){\r\n  //     this.items = []\r\n  //   }\r\n  //   return this.items;\r\n  // } set Items(v){\r\n  //   this.items = v;\r\n\r\n  //   this.GetItemsDone = true;\r\n  // }\r\n\r\n  // set GetItemsDone (v){\r\n  //   if (this.OnGetItemsDone){\r\n  //     this.OnGetItemsDone(v);\r\n  //   }\r\n  // }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      util.Handle_Items(this)\r\n    }return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = itemUtil.get(this);\r\n    item.Name = 'Tên dự án'\r\n\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  Get_Project = (data) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x._id === data._id);\r\n    if (index === -1){\r\n      var item = itemUtil.GetFromDb(data, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n\r\n  // Move\r\n  Move = (i1, i2) => {\r\n    var list = this.Items;\r\n    genUtil.MoveItem(list, i1, i2);\r\n\r\n    list[i1].Save();\r\n    list[i2].Save();\r\n  }\r\n\r\n  Insert = (i1, i2) => {\r\n    var list = this.Items;\r\n    genUtil.InsertItem(list, i1, i2);\r\n\r\n    var max = i1 > i2 ? i1 : i2\r\n    for (let i = 0; i < max + 1; i++) {\r\n      list[i].Save();\r\n    }\r\n  }\r\n}","import { Project_Dict } from \"./Project_Dict\"\r\nimport * as itemUtil from '../base/ProjectUtil'\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport { url } from '../base/Project_Url'\r\n\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../util/commandUtil'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (isAuto_GetData = true) => {\r\n  var qI = new Project_Dict();\r\n\r\n  // if (isAuto_GetData) {\r\n  //   itemUtil.getAll(qI, (items) => {\r\n  //     qI.Items = items;\r\n  //   })\r\n  // }\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => itemUtil.GetFromDb(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const func1 = () => {\r\n    var apiData = {}\r\n\r\n    // if (commands && commands.includes('admin')) {\r\n    if (comUtil.Validate('admin')) {\r\n      apiData.fortest = true;\r\n    }\r\n\r\n    itemUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  var host = pmData();\r\n  func1(host.AdminCommands);\r\n\r\n  genUtil.Add_2(host.OnSet_AdminCommands_Func,\r\n    () => Handle_Items(q), false);\r\n}","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './MGS_Dict_DictUtil'\r\n\r\nexport class MGS_Dict_Dict {\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this)\r\n    } return this.items;\r\n  }\r\n\r\n  current_MGS\r\n  get Current_MGS(){\r\n    return this.current_MGS\r\n  } set Current_MGS(v){\r\n    this.current_MGS = v;\r\n  }\r\n}","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './MassGroupSetting_DictUtil'\r\n\r\nexport class MassGroupSetting_Dict {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Project\r\n  project\r\n  get Project() {\r\n    return this.project\r\n  } set Project(v) {\r\n    if (this.project === v) return;\r\n    this.project = v;\r\n    util.ReHandle_Items(this);\r\n  }\r\n\r\n  UseType\r\n\r\n  get Category(){\r\n    return util.GetCategory(this)\r\n  }\r\n\r\n  get CategoryName(){\r\n    return util.GetCategoryName(this)\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = (v) => {\r\n    this.Items.push(v);\r\n    if (this.OnAddItem){\r\n      this.OnAddItem(v)\r\n    }\r\n  }\r\n\r\n  main_CurrentItem\r\n  get Main_CurrentItem() {\r\n    return this.main_CurrentItem\r\n  } set Main_CurrentItem(v) {\r\n    this.main_CurrentItem = v;\r\n    this.Used_MassGroupComponent = undefined\r\n    this.Used_MassGroupItem = undefined\r\n  }\r\n\r\n  save\r\n  get Save() {\r\n    if (!this.save) {\r\n      this.save = util.GetSave(this)\r\n    } return this.save\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hb_mgs_command\"","export const project = 'project'\r\nexport const template = 'template'","import { message } from 'antd'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { url } from './CommandData_Url'\r\nimport * as util from './CommandDataUtil'\r\nimport { PMData } from '../../../../../single/model/PMData'\r\nimport * as mgsd_ut from '../../dict/base/MGS_Dict_UseType'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\nexport class CommandData {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  get Table() {\r\n    return pmData().Current_MassTable\r\n  }\r\n\r\n  get Table_CommandDict() {\r\n    return this.Table.CommandDict\r\n  }\r\n\r\n  Items\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      _id: this._id,\r\n      dictId: this.Dict._id,\r\n      items: this.Items.map(x => x.ApiData),\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  Save = (handle) => {\r\n    if (this.Dict.UseType === mgsd_ut.project) {\r\n      this.Items = this.Table_CommandDict.AllItems;\r\n    }\r\n\r\n    this.SaveDatabase(false, handle);\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      }, 'edit');\r\n  }\r\n}","import { PMData } from \"../../../../../single/model/PMData\"\r\nimport { CommandData } from \"./CommandData\";\r\nimport { url } from './CommandData_Url'\r\nimport * as api from '../../../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as commandItemUtil from '../../../../mass/table/command/item/base/CommandItemUtil'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\n// instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  if (!data) {\r\n    return qI;\r\n  }\r\n\r\n  qI._id = data._id;\r\n  if (data.items){\r\n    qI.Items = data.items.map(x => commandItemUtil.get(x));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new CommandData();\r\n\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}\r\n\r\n// property\r\n// export const GetItemsForSave = (q) => {\r\n//   var mainrows = pmData().Current_MassTable.TBody.Rows\r\n//   // Giả định lấy từ View mặc định ra\r\n//   var list = []\r\n\r\n//   const getobj = (row) => {\r\n//     var item = genUtil.SingleFilter(list, x => x.key === row.FullValue);\r\n//     if (!item) {\r\n//       item = {\r\n//         key: row.FullValue\r\n//       }\r\n//       list.push(item);\r\n//     }\r\n\r\n//     item.title = row.Title;\r\n//     item.subfields = row.SubFields;\r\n\r\n//     row.SubItems.forEach(x => getobj(x))\r\n//   }\r\n\r\n//   mainrows.forEach(x => getobj(x));\r\n\r\n//   return list;\r\n// }\r\n\r\n// export const GetRemoveItemsForSave = (q) => {\r\n//   var removerows = pmData().Current_MassTable.TBody.RemoveRows\r\n//   // Giả định lấy từ View mặc định ra\r\n//   var list = [];\r\n\r\n//   const getobj = (row) => {\r\n//     var item = genUtil.SingleFilter(list, x => x === row.FullValue);\r\n//     if (!item) {\r\n//       list.push(row.FullValue)\r\n//     }\r\n//   }\r\n\r\n//   removerows.forEach(x => getobj(x))\r\n\r\n//   return list;\r\n// }\r\n\r\n// Method\r\nexport const Check_Remove_Rename = (q, row) => {\r\n  var removeitems = q.RemoveItems;\r\n  var items = q.Items;\r\n\r\n  var fv = row.FullValue;\r\n  // remove\r\n  var ri = removeitems.findIndex(x => x === fv)\r\n  if (ri !== -1) {\r\n    row.Invalid = true;\r\n    return;\r\n  }\r\n\r\n  // rename\r\n  var index = items.findIndex(x => x.key === fv);\r\n  if (index !== -1) {\r\n    row.Title = items[index].title;\r\n    var sfs = row.SubFields = items[index].subfields\r\n    if (sfs && sfs.length !== 0) {\r\n      row.IsPending_HaveSub = true;\r\n    }\r\n  }\r\n}\r\n\r\nexport const InitialForSave = (q) => {\r\n  var tbody = pmData().Current_MassTable.TBody;\r\n\r\n  var cellvalue_moredata = {\r\n    mgsId: q.Dict._id\r\n  }\r\n\r\n  // Xử lý Items\r\n  var mainrows = tbody.Rows\r\n\r\n  // Giả định lấy từ View mặc định ra\r\n  var items = []\r\n\r\n  const getitem = (row) => {\r\n    // Lưu thông tin Row\r\n    var item = genUtil.SingleFilter(items, x => x.key === row.FullValue);\r\n    if (!item) {\r\n      item = {\r\n        key: row.FullValue\r\n      }\r\n      items.push(item);\r\n    }\r\n\r\n    item.title = row.Title;\r\n    item.subfields = row.SubFields;\r\n\r\n    // Lưu thông tin CellValue\r\n    var cell = row.Cells[0];\r\n    if (cell._id) {\r\n      var cellValue = row.Cells[0].ValueData\r\n      cellValue.Save(cellvalue_moredata);\r\n    }\r\n\r\n    row.SubItems.forEach(x => getitem(x))\r\n  }\r\n\r\n  mainrows.forEach(x => getitem(x));\r\n  q.Items = items;\r\n\r\n  // Xử lý RemoveItems\r\n  var removerows = tbody.RemoveRows\r\n\r\n  // Giả định lấy từ View mặc định ra\r\n  var removeItems = [];\r\n\r\n  const getremoveitem = (row) => {\r\n    var item = genUtil.SingleFilter(removeItems, x => x === row.FullValue);\r\n    if (!item) {\r\n      removeItems.push(row.FullValue)\r\n    }\r\n  }\r\n\r\n  removerows.forEach(x => getremoveitem(x))\r\n  q.RemoveItems = removeItems;\r\n}","export const url = \"https://api.bimdev.vn/api/hb_mgs\"","import { message } from 'antd';\r\nimport { url } from './MassGroupSetting_Url'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './MassGroupSettingUtil'\r\n\r\nexport class MassGroupSetting {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  Description\r\n\r\n  // // CellName\r\n  // OnSet_CellData_Func = []\r\n\r\n  // cellData\r\n  // get CellData(){\r\n  //   if (!this.cellData){\r\n  //     util.Handle_CellData(this)\r\n  //   } return this.cellData;\r\n  // } set CellData(v){\r\n  //   this.cellData = v;\r\n  //   genUtil.Handle(this.OnSet_CellData_Func,\r\n  //     (v) => this.OnSet_CellData_Func = v)\r\n  // }\r\n\r\n  // Command\r\n  OnSet_CommandData_Func = []\r\n\r\n  commandData\r\n  get CommandData() {\r\n    if (!this.commandData) {\r\n      util.Handle_CommandData(this)\r\n    } return this.commandData\r\n  } set CommandData(v) {\r\n    this.commandData = v;\r\n    genUtil.Handle(this.OnSet_CommandData_Func,\r\n      (v) => this.OnSet_CommandData_Func = v)\r\n  }\r\n\r\n  // AddTemplate\r\n  addTemplate\r\n  get AddTemplate() {\r\n    if (!this.addTemplate) {\r\n      this.addTemplate = util.GetAddTemplate(this)\r\n    } return this.addTemplate\r\n  }\r\n\r\n  // UseType\r\n  get UseType() {\r\n    return this.Dict.UseType;\r\n  }\r\n\r\n  get ApiData() {\r\n    var dict = this.Dict;\r\n\r\n    var obj = {\r\n      _id: this._id,\r\n      projectId: dict.Project?._id,\r\n      useType: dict.UseType,\r\n      name: this.Name,\r\n      description: this.Description\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle, isSaveData = true) => {\r\n    const handle_func = () => {\r\n      if (handle) {\r\n        handle();\r\n      }\r\n    }\r\n\r\n    if (isSaveData) {\r\n      const saveData = (handle) => {\r\n        const save_command = (c_handle) => {\r\n          this.CommandData.Save(c_handle);\r\n        }\r\n\r\n        if (this.CommandData) {\r\n          save_command(handle);\r\n        } else {\r\n          genUtil.Add_2(this.OnSet_CommandData_Func,\r\n            () => save_command(handle))\r\n        }\r\n      }\r\n\r\n      if (this._id) {\r\n        saveData(handle_func);\r\n      } else {\r\n        genUtil.Add_2(\r\n          this.OnSet_id_Func_Dict,\r\n          () => saveData(handle_func)\r\n        )\r\n      }\r\n    }\r\n\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (!isSaveData) {\r\n          handle_func();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage) {\r\n        message.success('delete successfully!');\r\n      }\r\n      if (handle) {\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import { PMData } from \"../../../../../single/model/PMData\";\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as mgsd_ut from '../../dict/base/MGS_Dict_UseType'\r\n\r\nexport const pmData = () => PMData.Instance\r\n\r\nexport const Run = (q) => {\r\n  var mgs = q.Dict;\r\n\r\n  var mgsd = genUtil.SingleFilter(pmData().Mgs_Dict_Dict.Items, \r\n    (x) => x.UseType === mgsd_ut.template)\r\n  var save = mgsd.Save;\r\n  save.Name = q.InputName\r\n\r\n  const run = () => save.Run();\r\n  \r\n  // CommandItem\r\n  const setCommandItems = (data) => {\r\n    save.Command_Items = \r\n      data.Items.filter(x => x.CanUser_ForTemplate);\r\n    run();\r\n  }\r\n\r\n  if (mgs.CommandData){\r\n    setCommandItems(mgs.CommandData)\r\n  } else {\r\n    genUtil.Add_2(mgs.OnSet_CommandData_Func,\r\n      () => setCommandItems(mgs.CommandData))\r\n  }\r\n}","import * as util from './AddTemplateUtil'\r\n\r\nexport class AddTemplate {\r\n  InputName\r\n\r\n  Run = () => {\r\n    util.Run(this)\r\n  }\r\n}","import * as api from '../../../../../../../util/apiUtil'\r\nimport * as commandDataUtil from '../command/CommandDataUtil'\r\n\r\nimport { url } from './MassGroupSetting_Url'\r\nimport { MassGroupSetting } from './MassGroupSetting'\r\nimport { AddTemplate } from '../addtemplate/AddTemplate'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new MassGroupSetting();\r\n\r\n  qI._id = data._id\r\n  qI.projectId = data.projectId\r\n  qI.Name = data.name;\r\n  qI.Description = data.description\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new MassGroupSetting();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetAddTemplate = (q) => {\r\n  var qI = new AddTemplate();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n// CellData\r\n// export const Handle_CellData = (q) => {\r\n//   if (q.IsGet_CellData) return undefined;\r\n//   q.IsGet_CellData = true;\r\n\r\n//   const setObj = (data) => {\r\n//     q.CellData = cellDataUtil.GetFromDb(data[0], q)\r\n//     q.IsGet_CellData = false;\r\n//   }\r\n\r\n//   const getApi = () => {\r\n//     var apiData = {\r\n//       dictId : q._id\r\n//     }\r\n\r\n//     cellDataUtil.GetData(apiData, (data) => {\r\n//       setObj(data)\r\n//     })\r\n//   }\r\n\r\n//   getApi()\r\n// }\r\n\r\nexport const Handle_CommandData = (q) => {\r\n  if (q.IsGet_CommandData) return undefined;\r\n  q.IsGet_CommandData = true;\r\n\r\n  const setObj = (data) => {\r\n    q.CommandData = data ? \r\n      commandDataUtil.GetFromDb(data[0], q) :\r\n      commandDataUtil.get(q);\r\n\r\n    q.IsGet_CommandData = false;\r\n  }\r\n\r\n  if (q._id) {\r\n    const getApi = () => {\r\n      var apiData = {\r\n        dictId: q._id\r\n      }\r\n\r\n      commandDataUtil.GetData(apiData, (data) => {\r\n        setObj(data)\r\n      })\r\n    }\r\n\r\n    getApi()\r\n  } else {\r\n    setObj();\r\n  }\r\n}\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import { message } from 'antd';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './SaveUtil'\r\n\r\nexport class Save {\r\n  Name\r\n\r\n  Run = () => {\r\n    util.Run(this);\r\n  }\r\n\r\n  // MassGroupSettingForSave\r\n  massGroupSetting\r\n  get MassGroupSetting(){\r\n    return this.massGroupSetting\r\n  } set MassGroupSetting(v){\r\n    this.massGroupSetting =v\r\n  }\r\n\r\n  // // MassGroupComponent\r\n  // OnSet_MassGroupComponent_Func = []\r\n\r\n  // massGroupComponent = undefined\r\n  // get MassGroupComponent(){\r\n  //   if (!this.massGroupComponent){\r\n  //     util.Handle_MassGroupComponent(this)\r\n  //   } return this.massGroupComponent\r\n  // } set MassGroupComponent(v){\r\n  //   this.massGroupComponent = v;\r\n  //   genUtil.Handle(this.OnSet_MassGroupComponent_Func,\r\n  //     (v) => this.OnSet_MassGroupComponent_Func = v)\r\n  // }\r\n\r\n  // OnSet_Retrieve_MassGroupComponent_Func = []\r\n\r\n  // retrieve_MassGroupComponent\r\n  // get Retrieve_MassGroupComponent(){\r\n  //   if (!this.retrieve_MassGroupComponent){\r\n  //     util.Handle_Retrieve_MassGroupComponent(this)\r\n  //   } return this.retrieve_MassGroupComponent;\r\n  // } set Retrieve_MassGroupComponent(v){\r\n  //   this.retrieve_MassGroupComponent = v;\r\n  //   genUtil.Handle(this.OnSet_Retrieve_MassGroupComponent_Func,\r\n  //     (v) => this.OnSet_Retrieve_MassGroupComponent_Func = v)\r\n  // }\r\n\r\n  // // Refresh\r\n  // Refresh = () => {\r\n  //   util.Refresh(this)\r\n  // }\r\n}","import { Save } from \"./Save\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as mgsUtil from \"../item/base/MassGroupSettingUtil\";\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\nimport * as mgsd_ut from '../dict/base/MGS_Dict_UseType'\r\nimport { message } from \"antd\";\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Save();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// Method\r\nexport const Run = (q) => {\r\n  var host = q.Dict;\r\n\r\n  const setObj = () => {\r\n    var items = host.Items\r\n    var name = q.Name\r\n\r\n    const setObj2 = () => {\r\n      var item = genUtil.SingleFilter(items, (x) => x.Name === name);\r\n      if (!item) {\r\n        item = mgsUtil.get(host);\r\n        item.Name = name;\r\n        // items.push(item);\r\n        host.AddItem(item);\r\n      }\r\n\r\n      const saveFunc = () => {\r\n        item.SaveDatabase(false, () => {\r\n          const successFunc = () => {\r\n            // Khi lưu thành công, ko cho phép cách command trước đó\r\n            // pmData().Current_MassTable.CommandDict.Clear();\r\n            message.success('save successfully!');\r\n          }\r\n\r\n          successFunc();\r\n        });\r\n      }\r\n\r\n      // Nếu Setting là template thì truy xuất thông tin \r\n      // CommandItems cần lưu trước\r\n      if (item.UseType === mgsd_ut.template) {\r\n        const setCommand_Items = () => {\r\n          item.CommandData.Items = q.Command_Items;\r\n          saveFunc();\r\n        }\r\n\r\n        if (item.CommandData) {\r\n          setCommand_Items()\r\n        } else {\r\n          genUtil.Add_2(item.OnSet_CommandData_Func,\r\n            setCommand_Items)\r\n        }\r\n      } else {\r\n        saveFunc();\r\n      }\r\n    }\r\n\r\n    setObj2()\r\n  }\r\n\r\n  if (host.Items) {\r\n    setObj()\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      setObj\r\n    )\r\n  }\r\n}\r\n\r\n// Refresh","export const main = 'main'\r\nexport const template = 'template'","import { MassGroupSetting_Dict } from \"./MassGroupSetting_Dict\"\r\nimport * as iUtil from '../../item/base/MassGroupSettingUtil'\r\nimport * as saveUtil from '../../save/SaveUtil'\r\nimport { PMData } from \"../../../../../single/model/PMData\";\r\nimport * as mgsd_ut from './MGS_Dict_UseType'\r\nimport * as mgsd_c from './MGS_Dict_Category'\r\n\r\nexport const pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const get = (useType, dict) => {\r\n  var qI = new MassGroupSetting_Dict();\r\n\r\n  qI.UseType = useType\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const ReHandle_Items = (q) => {\r\n  q.IsGet_Items = false;\r\n  Handle_Items(q);\r\n}\r\n\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    // Ưu tiên data có projectId\r\n    var isValid = true;\r\n\r\n    if (q.UseType === mgsd_ut.project) {\r\n      var pId = pmData().CurrentProject?._id;\r\n      if (pId) {\r\n        if (data.length !== 0) {\r\n          isValid = data[0].projectId === pId\r\n        } else {\r\n          var oldData = q.Items;\r\n          if (oldData && oldData.length !== 0) {\r\n            isValid = oldData[0].projectId !== pId\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isValid) {\r\n      q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n      q.IsGet_Items = false;\r\n    }\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n      projectId: q.Project?._id,\r\n      useType: q.UseType\r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\nexport const GetSave = (q) => {\r\n  return saveUtil.get(q);\r\n}\r\n\r\nexport const GetCategory = (q) => {\r\n  switch (q.UseType) {\r\n    case mgsd_ut.project:\r\n      return mgsd_c.main;\r\n    case mgsd_ut.template:\r\n      return mgsd_c.template;\r\n  }\r\n}\r\n\r\nexport const GetCategoryName = (q) => {\r\n  switch (q.Category) {\r\n    case mgsd_c.main:\r\n      return 'Main'\r\n    case mgsd_c.template:\r\n      return 'Template'\r\n  }\r\n}\r\n\r\n// Method\r\n","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { MGS_Dict_Dict } from './MGS_Dict_Dict'\r\nimport * as mgsdUtil from '../base/MassGroupSetting_DictUtil'\r\nimport * as mgsd_ut from '../base/MGS_Dict_UseType'\r\n\r\n// Instance\r\nexport const get = () => {\r\n  return new MGS_Dict_Dict();\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return [\r\n    mgsdUtil.get(mgsd_ut.project, q),\r\n    mgsdUtil.get(mgsd_ut.template, q),\r\n  ]\r\n}","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { PMData } from '../../../../../single/model/PMData'\r\nimport * as util from './MDS_Dict_DictUtil'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\nexport class MDS_Dict_Dict {\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this)\r\n    } return this.items;\r\n  }\r\n\r\n  current_MDS\r\n  get Current_MDS(){\r\n    return this.current_MDS\r\n  } set Current_MDS(v){\r\n    this.current_MDS = v;\r\n\r\n    if (v){\r\n      var data = v.Data;\r\n      this.Table.Refresh_Columns(data.infos, data.values);\r\n    }\r\n  }\r\n\r\n  // Table\r\n  get Table(){\r\n    return pmData().MassDetail_Table\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './MassDetailSetting_DictUtil'\r\n\r\nexport class MassDetailSetting_Dict {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Project\r\n  project\r\n  get Project() {\r\n    return this.project\r\n  } set Project(v) {\r\n    if (this.project === v) return;\r\n    this.project = v;\r\n    util.ReHandle_Items(this);\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = (v) => {\r\n    this.Items.push(v);\r\n    if (this.OnAddItem){\r\n      this.OnAddItem(v)\r\n    }\r\n  }\r\n\r\n  save\r\n  get Save() {\r\n    if (!this.save) {\r\n      this.save = util.GetSave(this)\r\n    } return this.save\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hb_mds\"","import { message } from 'antd';\r\nimport { url } from './MassDetailSetting_Url'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './MassDetailSettingUtil'\r\n\r\nexport class MassDetailSetting {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  Description\r\n\r\n  // Data\r\n  OnSet_Data_Func = []\r\n\r\n  Data\r\n\r\n  get ApiData() {\r\n    var dict = this.Dict;\r\n\r\n    var obj = {\r\n      _id: this._id,\r\n      name: this.Name,\r\n      description: this.Description,\r\n      data : this.Data\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage){\r\n        message.success('delete successfully!');\r\n      }\r\n      if (handle){\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as api from '../../../../../../util/apiUtil'\r\nimport { url } from './MassDetailSetting_Url'\r\nimport { MassDetailSetting } from './MassDetailSetting'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict)\r\n\r\n  qI._id = data._id\r\n  qI.Name = data.name;\r\n  qI.Description = data.description\r\n  qI.Data = data.data\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new MassDetailSetting();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import { message } from 'antd';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './SaveUtil'\r\n\r\nexport class Save {\r\n  Name\r\n\r\n  Run = () => {\r\n    util.Run(this);\r\n  }\r\n\r\n  // MassGroupSettingForSave\r\n  massGroupSetting\r\n  get MassGroupSetting(){\r\n    return this.massGroupSetting\r\n  } set MassGroupSetting(v){\r\n    this.massGroupSetting =v\r\n  }\r\n}","import { Save } from \"./Save\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as mdsUtil from \"../item/MassDetailSettingUtil\";\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\nimport { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\n\r\nexport const pmData = () => PMData.Instance;\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Save();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// Method\r\nexport const Run = (q) => {\r\n  var host = q.Dict;\r\n\r\n  var setObj = () => {\r\n    var items = host.Items\r\n    var name = q.Name\r\n\r\n    var item = genUtil.SingleFilter(items, (x) => x.Name === name);\r\n    if (!item) {\r\n      item = mdsUtil.get(host);\r\n      item.Name = name;\r\n      // items.push(item);\r\n      host.AddItem(item);\r\n    }\r\n\r\n    item.Data = item.Dict.Dict.Table.ApiData\r\n    item.SaveDatabase(true);\r\n  }\r\n\r\n  if (host.Items) {\r\n    setObj()\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      setObj\r\n    )\r\n  }\r\n}","import { MassDetailSetting_Dict } from \"./MassDetailSetting_Dict\"\r\nimport * as iUtil from '../item/MassDetailSettingUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as saveUtil from '../save/SaveUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\n\r\nexport const pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new MassDetailSetting_Dict();\r\n\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const ReHandle_Items = (q) => {\r\n  q.IsGet_Items = false;\r\n  Handle_Items(q);\r\n}\r\n\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n\r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\nexport const GetSave = (q) => {\r\n  return saveUtil.get(q);\r\n}\r\n\r\n// Method\r\n","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { MDS_Dict_Dict } from './MDS_Dict_Dict'\r\nimport * as mdsdUtil from '../MassDetailSetting_DictUtil'\r\n\r\n// Instance\r\nexport const get = () => {\r\n  return new MDS_Dict_Dict();\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return [\r\n    mdsdUtil.get(q),\r\n  ]\r\n}","export const url = \"https://api.bimdev.vn/api/hb_sg\"","import { message } from 'antd';\r\nimport { url } from './Item_Url'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\n\r\nexport class Item {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  MassType\r\n\r\n  Field\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      massType : this.MassType,\r\n      field : this.Field\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    // genUtil.SaveDatabase(this, url,\r\n    //   () => {\r\n    //     if (showMessage) {\r\n    //       message.success('save successfully!')\r\n    //     }\r\n    //     if (handle) {\r\n    //       handle();\r\n    //     }\r\n    //   });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Data\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.Dict.Items.forEach(x => {\r\n      x.Items.splice(x.Items.indexOf(this), 1)\r\n    })\r\n\r\n    \r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    // genUtil.DeleteDatabase(this, url, () => {\r\n    //   if (showMessage){\r\n    //     message.success('delete successfully!');\r\n    //   }\r\n    //   if (handle){\r\n    //     handle()\r\n    //   }\r\n    // });\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as api from '../../../../../../util/apiUtil'\r\nimport { url } from './Item_Url'\r\nimport { Item } from './Item'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict)\r\n  \r\n  qI.Name = data.name;\r\n  qI.MassType = data.massType\r\n  qI.Field = data.field;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import * as util from './Dict_DictUtil'\r\nimport * as dataItemUtil from '../../item/ItemUtil'\r\nimport { PMData } from '../../../../../single/model/PMData'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport {url } from '../../item/Item_Url'\r\nimport { message } from 'antd'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\nexport class Dict_Dict {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this)\r\n    } return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    return this.currentItem\r\n  } set CurrentItem(v){\r\n    this.currentItem = v;\r\n  }\r\n\r\n  CurrentField\r\n\r\n  CurrentMassType\r\n\r\n  data = []\r\n  get Data(){\r\n    return this.data;\r\n  } set Data(v){\r\n    this.data = v;\r\n    if (this.OnSet_Data){\r\n      this.OnSet_Data(v)\r\n    }\r\n  }\r\n\r\n  AddData = () => {\r\n    var qI = dataItemUtil.get(this);\r\n    qI.MassType = this.CurrentMassType;\r\n    qI.Field = this.CurrentField\r\n    this.Data.push(qI)\r\n    \r\n    this.Items.forEach(x => {\r\n      x.Items.push(qI)\r\n    })\r\n\r\n    if (this.OnAddData){\r\n      this.OnAddData(qI)\r\n    }\r\n  }\r\n\r\n  Initial = () => {\r\n    util.Initial(this)\r\n  }\r\n\r\n  get ApiData() {\r\n    var project = pmData().CurrentProject;\r\n\r\n    var obj = {\r\n      _id : this._id,\r\n      projectId : project._id,\r\n      data : this.Data.map(x => x.ApiData)\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n}","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { PMData } from '../../../../../single/model/PMData'\r\nimport * as util from './DictUtil'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\nexport class Dict {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Project\r\n  get Project() {\r\n    return pmData().CurrentProject\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  Refresh_Items = () => {\r\n    this.Items = util.GetItems(this);\r\n  }\r\n\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this)\r\n    }\r\n    return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n    if (this.OnSet_Items){\r\n      this.OnSet_Items(v)\r\n    }\r\n  }\r\n}","export const partial = \"partial\"\r\nexport const all = \"all\"\r\n\r\nexport const GetName = (v) => {\r\n  switch (v) {\r\n    case partial:\r\n      return 'Công tác'\r\n    case all:\r\n      return 'All'\r\n  }\r\n}","import { Dict } from \"./Dict\"\r\nimport { PMData } from \"../../../../../single/model/PMData\";\r\nimport * as ut from './Dict_UseType'\r\n\r\nexport const pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const get = (useType, dict) => {\r\n  var qI = new Dict();\r\n\r\n  qI.Dict = dict\r\n  qI.UseType = useType;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  var list = q.Dict.Data;\r\n  var field = q.Dict.CurrentField\r\n  \r\n  switch (q.UseType) {\r\n    case ut.partial:\r\n      var massType = q.Dict.CurrentMassType;\r\n      return list.filter(x => x.MassType === massType && \r\n        x.Field === field);\r\n    case ut.all:\r\n      return list.filter(x => x.Field === field);\r\n  }\r\n}\r\n\r\n// Method\r\n","import { Dict_Dict } from './Dict_Dict'\r\nimport * as iUtil from '../base/DictUtil'\r\nimport * as i_ut from '../base/Dict_UseType'\r\nimport * as dataUtil from '../../item/ItemUtil'\r\nimport * as api from '../../../../../../../util/apiUtil'\r\nimport {url} from '../../item/Item_Url'\r\n\r\n// Instance\r\nexport const GetFromDb = (data) => {\r\n  var qI = get();\r\n  \r\n  qI._id = data._id\r\n  qI.Data = data.data.map(x => dataUtil.GetFromDb(x, qI))\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = () => {\r\n  var qI = new Dict_Dict();\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return [\r\n    iUtil.get(i_ut.partial, q), iUtil.get(i_ut.all, q)\r\n  ]\r\n}\r\n\r\n// Method\r\nexport const Initial = (q) => {\r\n  q.Items.forEach(x => {\r\n    x.Refresh_Items()\r\n  })\r\n}\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","export const url = \"https://api.bimdev.vn/api/hbmt\"","import { message } from 'antd';\r\nimport { url } from './Item_Url'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\n\r\nexport class Item {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  get name(){\r\n    return this.Name;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id: this._id,\r\n      name: this.Name\r\n    }\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle, isSaveData = true) => {\r\n    if (isSaveData) {\r\n      const saveData = () => this.Data.SaveDatabase(false);\r\n      if (this._id) {\r\n        saveData();\r\n      } else {\r\n        genUtil.Add_2(\r\n          this.OnSet_id_Func_Dict,\r\n          saveData\r\n        )\r\n      }\r\n    }\r\n\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage){\r\n        message.success('delete successfully!');\r\n      }\r\n      if (handle){\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import * as api from '../../../../../../util/apiUtil'\r\nimport { url } from './Item_Url'\r\nimport { Item } from './Item'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id\r\n  qI.Name = data.name;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import { Dict } from \"./Dict\"\r\nimport * as iUtil from '../item/ItemUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    // Ưu tiên data có projectId\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n      \r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n// Method\r\nexport const GetItemById = (q, id, handle) => {\r\n  const getObj = () => {\r\n    var list = q.Items;\r\n    var item = genUtil.SingleFilter(list, x => x._id === id);\r\n    handle(item);\r\n  }\r\n\r\n  if (q.Items){\r\n    getObj();\r\n  } else {\r\n    genUtil.Add_2(q.OnSet_Items_Func,\r\n      getObj);\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport * as iUtil from '../item/ItemUtil'\r\n\r\nexport class Dict {\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = iUtil.get(this)\r\n    this.Items.push(q)\r\n    return q;\r\n  }\r\n\r\n  GetItemById = (id, handle) => {\r\n    util.GetItemById(this, id, handle);\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hbmt_mb\"","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './MaterialUtil'\r\n\r\nexport class Material {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Materials\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n  }\r\n}","import { Material } from \"./Material\"\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n  qI.Name = data;\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Material();\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// Method\r\n","import { message } from 'antd';\r\nimport { url } from './Item_Url'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\nimport * as materialUtil from '../material/MaterialUtil'\r\n\r\nexport class Item {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  MassType\r\n\r\n  // Material\r\n  Materials = []\r\n\r\n  AddMaterial = () => {\r\n    var q = materialUtil.get(this);\r\n    this.Materials.push(q);\r\n    return q;\r\n  }\r\n\r\n  get ApiData() {\r\n    var dict = this.Dict;\r\n\r\n    var obj = {\r\n      _id : this._id,\r\n      massType : this.MassType,\r\n      materials: this.Materials.map(x => x.Name)\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage){\r\n        message.success('delete successfully!');\r\n      }\r\n      if (handle){\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import * as api from '../../../../../../../util/apiUtil'\r\nimport { url } from './Item_Url'\r\nimport { Item } from './Item'\r\nimport * as materialUtil from '../material/MaterialUtil'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id\r\n  qI.MassType = data.massType\r\n  qI.Materials = data.materials.map(x => materialUtil.GetFromDb(x, qI))\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import { Dict } from \"./Dict\"\r\nimport * as iUtil from '../item/base/ItemUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    // Ưu tiên data có projectId\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n      \r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n// Method\r\n","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport * as iUtil from '../item/base/ItemUtil'\r\n\r\nexport class Dict {\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = iUtil.get(this)\r\n    this.Items.push(q)\r\n    return q;\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hbmt_cb\"","import { message } from 'antd';\r\nimport { url } from './Item_Url'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\n\r\nexport class Item {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  MassType\r\n\r\n  // Category\r\n  Categories = []\r\n\r\n  get ApiData() {\r\n    var dict = this.Dict;\r\n\r\n    var obj = {\r\n      _id: this._id,\r\n      massType: this.MassType,\r\n      categories: this.Categories\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage) {\r\n        message.success('delete successfully!');\r\n      }\r\n      if (handle) {\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import * as api from '../../../../../../../util/apiUtil'\r\nimport { url } from './Item_Url'\r\nimport { Item } from './Item'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id\r\n  qI.MassType = data.massType\r\n  qI.Categories = data.categories\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import { Dict } from \"./Dict\"\r\nimport * as iUtil from '../item/base/ItemUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    // Ưu tiên data có projectId\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n      \r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n// Method\r\n","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport * as iUtil from '../item/base/ItemUtil'\r\n\r\nexport class Dict {\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = iUtil.get(this)\r\n    this.Items.push(q)\r\n    return q;\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hbmt_sb\"","import * as genUtil from '../../../../../../../../util/generalUtil'\r\nimport * as util from './TypeUtil'\r\n\r\nexport class Type {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Types\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n  }\r\n}","import { System, Type } from \"./Type\"\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n  qI.Name = data\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Type();\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// Method\r\n","import * as genUtil from '../../../../../../../../util/generalUtil'\r\nimport * as util from './SystemUtil'\r\nimport * as typeUtil from '../type/TypeUtil'\r\n\r\nexport class System {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Classification\r\n\r\n  // Types\r\n  Types = []\r\n\r\n  AddType = () => {\r\n    var q = typeUtil.get(this)\r\n    this.Types.push(q)\r\n    return q\r\n  }\r\n\r\n  // Api\r\n  get ApiData() {\r\n    return {\r\n      classification : this.Classification,\r\n      types : this.Types.map(x => x.Name)\r\n    }\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Systems\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n  }\r\n}","import { System } from \"./System\"\r\nimport * as typeUtil from '../type/TypeUtil'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n  qI.Classification = data.classification\r\n  qI.Types = data.types.map(x => typeUtil.GetFromDb(x, qI))\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new System();\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// Method\r\n","import { message } from 'antd';\r\nimport { url } from './Item_Url'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\nimport * as systemUtil from '../system/base/SystemUtil'\r\n\r\nexport class Item {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  MassType\r\n\r\n  // Systems\r\n  Systems = []\r\n\r\n  AddSystem = () => {\r\n    var q = systemUtil.get(this);\r\n    this.Systems.push(q);\r\n    return q;\r\n  }\r\n\r\n  get ApiData() {\r\n    var dict = this.Dict;\r\n\r\n    var obj = {\r\n      _id: this._id,\r\n      massType : this.MassType,\r\n      systems: this.Systems.map(x => x.ApiData)\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle, isSaveData = true) => {\r\n    if (isSaveData) {\r\n      const saveData = () => this.Data.SaveDatabase(false);\r\n      if (this._id) {\r\n        saveData();\r\n      } else {\r\n        genUtil.Add_2(\r\n          this.OnSet_id_Func_Dict,\r\n          saveData\r\n        )\r\n      }\r\n    }\r\n\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage){\r\n        message.success('delete successfully!');\r\n      }\r\n      if (handle){\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import * as api from '../../../../../../../util/apiUtil'\r\nimport { url } from './Item_Url'\r\nimport { Item } from './Item'\r\nimport * as systemUtil from '../system/base/SystemUtil'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id\r\n  qI.MassType = data.massType\r\n  qI.Systems = data.systems.map(x => systemUtil.GetFromDb(x, qI))\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import { Dict } from \"./Dict\"\r\nimport * as iUtil from '../item/base/ItemUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    // Ưu tiên data có projectId\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n      \r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n// Method\r\n","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport * as iUtil from '../item/base/ItemUtil'\r\n\r\nexport class Dict {\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = iUtil.get(this)\r\n    this.Items.push(q)\r\n    return q;\r\n  }\r\n}","import * as genUtil from '../../../../../util/generalUtil'\r\nimport * as util from './BaseUtil'\r\n\r\nexport class Base {\r\n  listData\r\n  get ListData(){\r\n    if (!this.listData){\r\n      this.listData = util.GetListData(this)\r\n    } return this.listData\r\n  }\r\n\r\n  categoryBindingData\r\n  get CategoryBindingData(){\r\n    if (!this.categoryBindingData){\r\n      this.categoryBindingData = util.GetCategoryBindingData(this)\r\n    } return this.categoryBindingData\r\n  }\r\n\r\n  materialBindingData\r\n  get MaterialBindingData(){\r\n    if (!this.materialBindingData){\r\n      this.materialBindingData = util.GetMaterialBindingData(this)\r\n    } return this.materialBindingData\r\n  }\r\n\r\n  systemBindingData\r\n  get SystemBindingData(){\r\n    if (!this.systemBindingData){\r\n      this.systemBindingData = util.GetSystemBindingData(this)\r\n    } return this.systemBindingData\r\n  }\r\n}","import { Base } from \"./Base\"\r\nimport { Dict as ListData } from '../list/dict/Dict'\r\nimport { Dict as MaterialBindingData } from '../materialbinding/dict/Dict'\r\nimport { Dict as CategoryBindingData } from '../categorybinding/dict/Dict'\r\nimport { Dict as SystemBindingData } from '../systembinding/dict/Dict'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Base();\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetListData = (q) => {\r\n  var qI = new ListData();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetCategoryBindingData = (q) => {\r\n  var qI = new CategoryBindingData();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetMaterialBindingData = (q) => {\r\n  var qI = new MaterialBindingData();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetSystemBindingData = (q) => {\r\n  var qI = new SystemBindingData();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n\r\n\r\n// Method\r\n","export const url = \"https://api.bimdev.vn/api/hbcategory\"","import { message } from 'antd';\r\nimport { url } from './Item_Url'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\n\r\nexport class Item {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  get ApiData() {\r\n    var dict = this.Dict;\r\n\r\n    var obj = {\r\n      _id: this._id,\r\n      name: this.Name\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle, isSaveData = true) => {\r\n    if (isSaveData) {\r\n      const saveData = () => this.Data.SaveDatabase(false);\r\n      if (this._id) {\r\n        saveData();\r\n      } else {\r\n        genUtil.Add_2(\r\n          this.OnSet_id_Func_Dict,\r\n          saveData\r\n        )\r\n      }\r\n    }\r\n\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage){\r\n        message.success('delete successfully!');\r\n      }\r\n      if (handle){\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import * as api from '../../../../../../util/apiUtil'\r\nimport { url } from './Item_Url'\r\nimport { Item } from './Item'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id\r\n  qI.Name = data.name;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import { Dict } from \"./Dict\"\r\nimport * as iUtil from '../item/ItemUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    // Ưu tiên data có projectId\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n      \r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n// Method\r\n","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport * as iUtil from '../item/ItemUtil'\r\n\r\nexport class Dict {\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = iUtil.get(this)\r\n    this.Items.push(q)\r\n    return q;\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hb_parameter\"","import { message } from 'antd';\r\nimport { url } from './Item_Url'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\n\r\nexport class Item {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  get ApiData() {\r\n    var dict = this.Dict;\r\n\r\n    var obj = {\r\n      _id: this._id,\r\n      name: this.Name\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle, isSaveData = true) => {\r\n    if (isSaveData) {\r\n      const saveData = () => this.Data.SaveDatabase(false);\r\n      if (this._id) {\r\n        saveData();\r\n      } else {\r\n        genUtil.Add_2(\r\n          this.OnSet_id_Func_Dict,\r\n          saveData\r\n        )\r\n      }\r\n    }\r\n\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.DeleteDatabase(true)\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage){\r\n        message.success('delete successfully!');\r\n      }\r\n      if (handle){\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import * as api from '../../../../../../util/apiUtil'\r\nimport { url } from './Item_Url'\r\nimport { Item } from './Item'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI._id = data._id\r\n  qI.Name = data.name;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import { Dict } from \"./Dict\"\r\nimport * as iUtil from '../item/ItemUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    // Ưu tiên data có projectId\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n      \r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n// Method\r\n","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport * as iUtil from '../item/ItemUtil'\r\n\r\nexport class Dict {\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = iUtil.get(this)\r\n    this.Items.push(q)\r\n    return q;\r\n  }\r\n}","export const byname = 'byname'\r\nexport const bymaterial = 'bymaterial'\r\nexport const bycategory = 'bycategory'\r\nexport const bysystem = 'bysystem'\r\n\r\nexport const GetList = () => {\r\n  return [\r\n    byname, bymaterial, bycategory, bysystem\r\n  ]\r\n}","import { MassTypeExport } from './MassTypeExport'\r\nimport * as mte_t from './MTE_Type'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI.ExportType = data.retrieveType;\r\n\r\n  switch (data.retrieveType) {\r\n    case mte_t.byname:\r\n      qI.MassType = data.name\r\n      break\r\n    default:\r\n      qI.MassType = data.defaultValue\r\n      break\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new MassTypeExport();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\n","import { message } from 'antd';\r\n// import { url } from './PageItem_Url'\r\nimport * as util from './MassTypeExportUtil'\r\nimport * as mte_t from './MTE_Type'\r\n\r\nexport class MassTypeExport {\r\n  ExportType = mte_t.byname\r\n\r\n  MassType\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      retrieveType: this.ExportType,\r\n    }\r\n\r\n    switch (this.ExportType) {\r\n      case mte_t.byname:\r\n        obj.name = this.MassType\r\n        break;\r\n      default:\r\n        obj.defaultValue = this.MassType\r\n        break;\r\n    }\r\n\r\n    return obj;\r\n  }\r\n}","export const byparameter = 'byparameter'\r\nexport const bysumparameters = 'bysumparameters'\r\nexport const bymaterialparameter = 'bymaterialparameter'\r\n\r\nexport const GetList = () => {\r\n  return [\r\n    byparameter, bysumparameters, bymaterialparameter\r\n  ]\r\n}","import { message } from 'antd';\r\n// import { url } from './PageItem_Url'\r\nimport * as util from './ValueInfoUtil'\r\nimport * as vi_rt from './VI_RetrieveType'\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\n\r\nexport class ValueInfo {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  RetrieveTypes = [vi_rt.byparameter]\r\n\r\n  Parameter\r\n\r\n  ParameterList = []\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      valueRetrieveTypes: this.RetrieveTypes\r\n    }\r\n\r\n    if (this.RetrieveTypes.includes(vi_rt.bymaterialparameter) ||\r\n      this.RetrieveTypes.includes(vi_rt.byparameter)) {\r\n        obj.parameter = this.Parameter;\r\n    }\r\n    if (this.RetrieveTypes.includes(vi_rt.bysumparameters)){\r\n      obj.parameterList = this.ParameterList;\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.ValueInfos\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    // this.DeleteDatabase(true)\r\n  }\r\n}","import { ValueInfo } from './ValueInfo'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n  \r\n  qI.RetrieveTypes = data.valueRetrieveTypes\r\n  qI.Parameter = data.parameter\r\n  qI.ParameterList = data.parameterList ? data.parameterList : []\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new ValueInfo();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\n","export const element = \"element\";\r\nexport const material = \"material\";\r\n\r\nexport const GetList = () => {\r\n  return [element, material]\r\n}","import { message } from 'antd';\r\n// import { url } from './PageItem_Url'\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\nimport * as util from './MassInfoUtil'\r\nimport * as valueInfoUtil from '../valueinfo/ValueInfoUtil'\r\nimport * as mi_cvb from './MI_ClassifyValueBy'\r\n\r\nexport class MassInfo {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      massType : this.MassTypeExport.ApiData,\r\n      classifyValueBy : this.ClassifyValueBy,\r\n      valueInfos : this.ValueInfos.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  // Data\r\n  massTypeExport\r\n  get MassTypeExport(){\r\n    if (!this.massTypeExport){\r\n      this.massTypeExport = util.GetMassTypeExport(this)\r\n    } return this.massTypeExport\r\n  } set MassTypeExport(v){\r\n    this.massTypeExport = v;\r\n  }\r\n\r\n  ClassifyValueBy = mi_cvb.element\r\n\r\n  ValueInfos = []\r\n\r\n  AddValueInfo = () => {\r\n    var q = valueInfoUtil.get(this);\r\n    this.ValueInfos.push(q)\r\n    return q;\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.MassInfos\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    // this.DeleteDatabase(true)\r\n  }\r\n}","import { MassTypeExport } from '../masstypeexport/MassTypeExport';\r\nimport { MassInfo } from './MassInfo'\r\nimport * as massTypeExportUtil from '../masstypeexport/MassTypeExportUtil'\r\nimport * as valueInfoUtil from '../valueinfo/ValueInfoUtil'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n  \r\n  qI.MassTypeExport = massTypeExportUtil.GetFromDb(data.massType, qI);\r\n  qI.ClassifyValueBy = data.classifyValueBy\r\n  qI.ValueInfos = data.valueInfos.map(x => valueInfoUtil.GetFromDb(x, qI))\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new MassInfo();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetMassTypeExport = (q) => {\r\n  var qI = new MassTypeExport();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n// api\r\n","import { message } from 'antd';\r\n// import { url } from './PageItem_Url'\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\nimport * as util from './TypeUtil'\r\nimport * as massInfoUtil from '../../massinfo/base/MassInfoUtil'\r\n\r\nexport class Type {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  // Category\r\n  Categories = []\r\n\r\n  // Filter\r\n  filter\r\n  get Filter(){\r\n    if (!this.filter){\r\n      this.filter = util.GetFilter(this)\r\n    } return this.filter\r\n  } set Filter(v){\r\n    this.filter = v;\r\n  }\r\n\r\n  // MassInfo\r\n  MassInfos = []\r\n\r\n  AddMassInfo = () => {\r\n    var q = massInfoUtil.get(this)\r\n    this.MassInfos.push(q);\r\n    return q;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      name : this.Name,\r\n      filter: this.Filter.ApiData,\r\n      massInfos : this.MassInfos.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Types\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    // this.DeleteDatabase(true)\r\n  }\r\n}","import { message } from 'antd';\r\n// import { url } from './PageItem_Url'\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\nimport * as util from './FilterUtil'\r\n\r\nexport class Filter {\r\n  IsByCategory = true;\r\n\r\n  // Category\r\n  Categories = []\r\n\r\n  get ApiData() {\r\n    return {\r\n      isByCategory: this.IsByCategory,\r\n      categories: this.Categories\r\n    }\r\n  }\r\n}","import { Filter } from './Filter'\r\nimport * as massInfoUtil from '../../massinfo/base/MassInfoUtil'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI.IsByCategory = data.isByCategory !== undefined ? data.isByCategory : true\r\n  qI.Categories = data.categories\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Filter();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\n","import { Type } from './Type'\r\nimport * as massInfoUtil from '../../massinfo/base/MassInfoUtil'\r\nimport * as filterUtil from '../filter/FilterUtil'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n  \r\n  qI.Name = data.name;\r\n  qI.Filter = filterUtil.GetFromDb(data.filter, qI)\r\n  qI.MassInfos = data.massInfos.map(x => massInfoUtil.GetFromDb(x, qI))\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Type();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetFilter = (q) => {\r\n  return filterUtil.get(q);\r\n}\r\n\r\n// api\r\n","import { message } from 'antd';\r\n// import { url } from './PageItem_Url'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './PageItemUtil'\r\nimport * as typeUtil from '../type/base/TypeUtil'\r\n\r\nexport class PageItem {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Name\r\n\r\n  // Type\r\n  Types = []\r\n\r\n  AddType = () => {\r\n    var q = typeUtil.get(this)\r\n    this.Types.push(q)\r\n    return q\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      name : this.Name,\r\n      items : this.Types.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  // SaveDatabase = (showMessage = true, handle, isSaveData = true) => {\r\n  //   if (isSaveData) {\r\n  //     const saveData = () => this.Data.SaveDatabase(false);\r\n  //     if (this._id) {\r\n  //       saveData();\r\n  //     } else {\r\n  //       genUtil.Add_2(\r\n  //         this.OnSet_id_Func_Dict,\r\n  //         saveData\r\n  //       )\r\n  //     }\r\n  //   }\r\n\r\n  //   genUtil.SaveDatabase(this, url,\r\n  //     () => {\r\n  //       if (showMessage) {\r\n  //         message.success('save successfully!')\r\n  //       }\r\n  //       if (handle) {\r\n  //         handle();\r\n  //       }\r\n  //     });\r\n  // }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    // this.DeleteDatabase(true)\r\n  }\r\n\r\n  // DeleteDatabase = (showMessage = true, handle) => {\r\n  //   genUtil.DeleteDatabase(this, url, () => {\r\n  //     if (showMessage){\r\n  //       message.success('delete successfully!');\r\n  //     }\r\n  //     if (handle){\r\n  //       handle()\r\n  //     }\r\n  //   });\r\n  // }\r\n}","import * as api from '../../../../../../../util/apiUtil'\r\nimport { PageItem } from './PageItem'\r\nimport * as typeUtil from '../type/base/TypeUtil'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n\r\n  qI.Name = data.name;\r\n  qI.Types = data.items.map(x => typeUtil.GetFromDb(x, qI))\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new PageItem();\r\n\r\n  qI.Dict = dict;\r\n  \r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// api\r\n// export const GetData = (apiData, handle) => {\r\n//   var apiData = apiData ? apiData : {}\r\n//   const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n//   apiFunc().then(response => response.data)\r\n//     .then(data => {\r\n//       if (handle) {\r\n//         handle(data)\r\n//       }\r\n//     })\r\n// }","export const url = \"https://api.bimdev.vn/api/hb_mes\"","import { Dict } from \"./Dict\"\r\nimport * as iUtil from '../item/page/PageItemUtil'\r\nimport * as api from '../../../../../../util/apiUtil'\r\nimport {url} from './Dict_Url'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n      \r\n    }\r\n\r\n    // iUtil.GetData(apiData, (data) => {\r\n    //   setObj(data)\r\n    // })\r\n\r\n    GetData(apiData, (data) => {\r\n      var dict = data.length !== 0 ? data[0] : undefined;\r\n      q._id = dict ? dict._id : undefined;\r\n      var items = dict ? dict.pageItems : []\r\n      setObj(items);\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n// Method\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport * as iUtil from '../item/page/PageItemUtil'\r\nimport {url} from './Dict_Url'\r\nimport { message } from 'antd'\r\n\r\nexport class Dict {\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = iUtil.get(this)\r\n    this.Items.push(q)\r\n    return q;\r\n  }\r\n\r\n  // Api\r\n  get ApiData() {\r\n    return {\r\n      _id : this._id,\r\n      pageItems : this.Items.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n}","export class Item {\r\n  Name\r\n\r\n  get name(){\r\n    return this.Name;\r\n  }\r\n}","export const url = \"https://api.bimdev.vn/api/hb_workitem\"","import { Item } from \"./Item\"\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport {url} from './Item_Url'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new Item();\r\n\r\n  qI._id = data._id\r\n  qI.Name = data.name;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n  }","import { Dict } from \"./Dict\"\r\nimport * as itemUtil from '../item/ItemUtil'\r\nimport { url } from '../item/Item_Url'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Api\r\n\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => itemUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var apiData = {\r\n    \r\n  }\r\n\r\n  itemUtil.GetData(apiData, (data) => setObj(data));\r\n}\r\n\r\nexport const Handle_Undefined_Item = (q) => {\r\n  if (q.IsGet_Undefined_Item) return undefined;\r\n  q.IsGet_Undefined_Item = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Undefined_Item = genUtil.SingleFilter(data, x => x.Name ==='undefined');\r\n    q.IsGet_Undefined_Item = false;\r\n  }\r\n\r\n  if (q.Items){\r\n    setObj(q.Items)\r\n  } else {\r\n    genUtil.Add_2(q.OnSet_Items_Func,\r\n      () => setObj(q.Items))\r\n  }\r\n}\r\n\r\n// Method\r\nexport const GetItem = (q, name, handle) => {\r\n  if (!name || name.length === 0) {\r\n    const getObj = () => {\r\n      handle(q.Undefined_Item)\r\n    }\r\n\r\n    if (q.Undefined_Item){\r\n      getObj();\r\n    } else {\r\n      genUtil.Add_2(q.OnSet_Undefined_Item_Func,\r\n        getObj);\r\n    }\r\n\r\n  } else {\r\n    const getObj = () => {\r\n      var list = q.Items;\r\n      var item = genUtil.SingleFilter(list, x => x.Name === name);\r\n      if (item) {\r\n        handle(item)\r\n      } else {\r\n        var apiData = {\r\n          name\r\n        }\r\n\r\n        const func = (data) => {\r\n          item = itemUtil.GetFromDb(data, q);\r\n          list.push(item);\r\n          handle(item);\r\n        }\r\n\r\n        const apiFunc = () => api.post(`${url}/add`, apiData);\r\n\r\n        apiFunc().then(response => response.data)\r\n          .then(data => {\r\n            func(data)\r\n          })\r\n      }\r\n    }\r\n\r\n    if (q.Items){\r\n      getObj();\r\n    } else {\r\n      genUtil.Add_2(q.OnSet_Items_Func,\r\n        getObj);\r\n    }\r\n  }\r\n}","import * as genUtil from '../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\n\r\nexport class Dict {\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      util.Handle_Items(this)\r\n    } return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  OnSet_Undefined_Item_Func = []\r\n\r\n  undefined_Item;\r\n  get Undefined_Item(){\r\n    if (!this.undefined_Item){\r\n      util.Handle_Undefined_Item(this)\r\n    } return this.undefined_Item\r\n  } set Undefined_Item(v){\r\n    this.undefined_Item = v;\r\n\r\n    genUtil.Handle(this.OnSet_Undefined_Item_Func,\r\n      (v) => this.OnSet_Undefined_Item_Func = v)\r\n  }\r\n\r\n  GetItem = (name, handle) => {\r\n    util.GetItem(this, name, handle)\r\n  }\r\n}","import * as util from './User_DictUtil'\r\nimport * as genUtil from '../../../util/generalUtil'\r\n\r\nconst userToken = 'userToken'\r\n\r\nexport class User_Dict {\r\n  Url\r\n\r\n  token\r\n  get Token(){\r\n    if (!this.token){\r\n      this.token = localStorage.getItem(userToken);\r\n    } return this.token\r\n  } set Token(v){\r\n    this.token = v\r\n    if (!v){\r\n      localStorage.removeItem(userToken)\r\n    } else {\r\n      localStorage.setItem(userToken,v)\r\n    }\r\n  }\r\n  \r\n  // LoginUser\r\n  OnSet_LoginUser_Func =[]\r\n\r\n  loginUser\r\n  get LoginUser(){\r\n    if (!this.loginUser){\r\n      util.Handle_LoginUser(this)\r\n    } return this.loginUser;\r\n  } set LoginUser(v){\r\n    this.loginUser = v;\r\n\r\n    if (!v){\r\n      this.Token = v;\r\n    }\r\n\r\n    if (this.OnSet_LoginUser){\r\n      this.OnSet_LoginUser(v);\r\n    }\r\n\r\n    genUtil.Handle(this.OnSet_LoginUser_Func,\r\n      (v) => this.OnSet_LoginUser_Func = v)\r\n  }\r\n\r\n  get Config(){\r\n    return {\r\n      headers : {\r\n        'Authorization': 'Bearer ' + this.Token\r\n      }\r\n    }\r\n  }\r\n}","import { message } from 'antd';\r\nimport * as genUtil from '../../../util/generalUtil'\r\n\r\nexport class User {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Username\r\n\r\n  Name\r\n\r\n  get ApiData() {\r\n    if (this.GetApiData_Func) {\r\n      return this.GetApiData_Func();\r\n    }\r\n\r\n    var obj = {\r\n      _id: this._id,\r\n      username : this.Username,\r\n      name : this.Name\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  GetUrl_Func\r\n\r\n  get Url() {\r\n    return this.GetUrl_Func();\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, this.Url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n\r\n    if (this._id) {\r\n      this.DeleteDatabase(false)\r\n    }\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, this.Url, () => {\r\n      if (showMessage) {\r\n        message.success('delete successflly!');\r\n      }\r\n      if (handle) {\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import { User } from \"./User\"\r\nimport * as api from '../../../util/apiUtil'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n  qI._id = data._id\r\n  qI.Username = data.username;\r\n  qI.Name = data.name;\r\n\r\n  if (data.userToken){\r\n    dict.Token = data.userToken\r\n  }\r\n  \r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new User();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Api\r\nexport const GetData = (url, apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import { User_Dict } from \"./User_Dict\"\r\nimport * as api from '../../../util/apiUtil'\r\nimport * as userUtil from '../item/UserUtil'\r\n\r\n// Instance\r\nexport const get = (url, dict) => {\r\n  var qI = new User_Dict();\r\n  qI.Url = url\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_LoginUser = (q) => {\r\n  if (q.IsGet_LoginUser) return undefined;\r\n  q.IsGet_LoginUser = true;\r\n\r\n  const setObj = (data) => {\r\n    q.LoginUser = data ? userUtil.GetFromDb(data, q) : undefined;\r\n    q.IsGet_LoginUser = true;\r\n  }\r\n\r\n  if (q.Token) {\r\n    const apiFunc = () => api.post(`${q.Url}/token`, {}, q.Config);\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        setObj(data)\r\n      })\r\n  } else {\r\n    setObj();\r\n  }\r\n}","import * as util from './AdminUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class Admin {\r\n  // Users\r\n  OnSet_Users_Func = []\r\n\r\n  users\r\n  get Users(){\r\n    if (!this.users){\r\n      util.Handle_Users(this)\r\n    } return this.users\r\n  } set Users(v){\r\n    this.users = v;\r\n    genUtil.Handle(this.OnSet_Users_Func,\r\n      (v) => this.OnSet_Users_Func = v)\r\n  }\r\n\r\n  getUser_Func\r\n  get GetUser_Func(){\r\n    if (!this.getUser_Func){\r\n      this.getUser_Func = util.GetGetUser_Func(this)\r\n    } return this.getUser_Func;\r\n  }\r\n\r\n  // Projects\r\n  OnSet_Projects_Func = []\r\n\r\n  projects\r\n  get Projects(){\r\n    if (!this.projects){\r\n      util.Handle_Projects(this)\r\n    } return this.projects\r\n  } set Projects(v){\r\n    this.projects = v;\r\n    genUtil.Handle(this.OnSet_Projects_Func,\r\n      (v) => this.OnSet_Projects_Func = v)\r\n  }\r\n\r\n  // Dict\r\n  userManager_Dict\r\n  get UserManager_Dict(){\r\n    if (!this.userManager_Dict){\r\n      this.userManager_Dict = util.GetUserManager_Dict(this)\r\n    } return this.userManager_Dict;\r\n  }\r\n\r\n  projectCommand_Dict\r\n  get ProjectCommand_Dict(){\r\n    if (!this.projectCommand_Dict){\r\n      this.projectCommand_Dict = util.GetProjectCommand_Dict(this)\r\n    } return this.projectCommand_Dict\r\n  }\r\n\r\n  projectGroupCommand_Dict\r\n  get ProjectGroupCommand_Dict(){\r\n    if (!this.projectGroupCommand_Dict){\r\n      this.projectGroupCommand_Dict = \r\n        util.GetProjectGroupCommand_Dict(this)\r\n    } return this.projectGroupCommand_Dict\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport { message } from 'antd'\r\n\r\nexport class Dict {\r\n  _id\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = (v) => {\r\n    this.Items.push(v);\r\n    if (this.OnAddItem){\r\n      this.OnAddItem(v)\r\n    }\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    var items = this.Items;\r\n    var count = items.length\r\n    if (count === 0){\r\n      message.success('update data successfully!');\r\n    } else {\r\n      var i = -1;\r\n      const func = () => {\r\n        i++;\r\n        if (i === count-1){\r\n          message.success('update data successfully!');\r\n        }\r\n      }\r\n      \r\n      items.forEach(x => {\r\n        x.SaveDatabase(false, func)\r\n      })\r\n    }\r\n  }\r\n}","import { Dict, ExportSet_Dict } from \"./Dict\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.Dict;\r\n  if (host.Users){\r\n    setObj(host.Users)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Users_Func,\r\n      () => setObj(host.Users)\r\n    )\r\n  }\r\n}\r\n\r\n\r\n// Method\r\n","export const url = \"https://api.bimdev.vn/api/hb_upc\"","import { message } from 'antd';\r\nimport { url } from './Item_Url'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\n\r\nexport class Item {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // User\r\n  userId\r\n\r\n  OnSet_User_Func = []\r\n\r\n  user\r\n  get User() {\r\n    if (this.user === undefined){\r\n      util.Handle_User(this)\r\n    }\r\n    return this.user;\r\n  } set User(v) {\r\n    this.user = v;\r\n    this.userId = v?._id\r\n\r\n    genUtil.Handle(this.OnSet_User_Func,\r\n      (v) => this.OnSet_User_Func = v)\r\n  }\r\n\r\n  //Project\r\n  projectId\r\n\r\n  OnSet_Project_Func = []\r\n\r\n  project\r\n  get Project() {\r\n    if (this.project === undefined){\r\n      util.Handle_Project(this)\r\n    }\r\n    return this.project;\r\n  } set Project(v) {\r\n    this.project = v;\r\n    this.projectId = v?._id\r\n\r\n    genUtil.Handle(this.OnSet_Project_Func,\r\n      (v) => this.OnSet_Project_Func = v)\r\n  }\r\n\r\n  Commands = []\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      _id: this._id,\r\n      userId: this.userId,\r\n      projectId: this.projectId,\r\n      commands: this.Commands\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n\r\n    if (this._id) {\r\n      this.DeleteDatabase(false)\r\n    }\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage) {\r\n        message.success('delete successflly!');\r\n      }\r\n      if (handle) {\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import * as api from '../../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { url } from './Item_Url'\r\nimport { Item } from './Item'\r\nimport { message } from 'antd'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict)\r\n\r\n  qI._id = data._id\r\n  qI.projectId = data.projectId\r\n  qI.userId = data.userId\r\n  qI.Commands = data.commands\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_User = (q) => {\r\n  if (q.IsGet_User) return undefined;\r\n  q.IsGet_User = true;\r\n\r\n  const setObj = (data) => {\r\n    if (data) {\r\n      q.User = genUtil.SingleFilter(data, x => x._id === q.userId)\r\n    } else {\r\n      q.User = null\r\n    }\r\n    q.IsGet_User = false;\r\n  }\r\n\r\n  if (!q.userId){\r\n    setObj();\r\n  } else {\r\n    var host = q.Dict.Dict\r\n    if (host.Users){\r\n      setObj(host.Users)\r\n    } else {\r\n      genUtil.Add_2(\r\n        host.OnSet_Users_Func,\r\n        () => setObj(host.Users)\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport const Handle_Project = (q) => {\r\n  if (q.IsGet_Project) return undefined;\r\n  q.IsGet_Project = true;\r\n\r\n  const setObj = (data) => {\r\n    if (data) {\r\n      q.Project = genUtil.SingleFilter(data, x => x._id === q.projectId)\r\n    } else {\r\n      q.Project = null\r\n    }\r\n    q.IsGet_Project = false;\r\n  }\r\n\r\n  if (!q.projectId){\r\n    setObj();\r\n  } else {\r\n    var host = q.Dict.Dict\r\n    if (host.Projects){\r\n      setObj(host.Projects)\r\n    } else {\r\n      genUtil.Add_2(\r\n        host.OnSet_Projects_Func,\r\n        () => setObj(host.Projects)\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n// Method\r\n\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport * as iUtil from '../item/ItemUtil'\r\nimport { message } from 'antd'\r\n\r\nexport class Dict {\r\n  _id\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = (v) => {\r\n    this.Items.push(v);\r\n    if (this.OnAddItem){\r\n      this.OnAddItem(v)\r\n    }\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    var items = this.Items;\r\n    var count = items.length\r\n    if (count === 0){\r\n      message.success('update data successfully!');\r\n    } else {\r\n      var i = -1;\r\n      const func = () => {\r\n        i++;\r\n        if (i === count-1){\r\n          message.success('update data successfully!');\r\n        }\r\n      }\r\n      \r\n      items.forEach(x => {\r\n        x.SaveDatabase(false, func)\r\n      })\r\n    }\r\n  }\r\n}","import { Dict, ExportSet_Dict } from \"./Dict\"\r\nimport * as iUtil from '../item/ItemUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n\r\n// Method\r\n","export const url = \"https://api.bimdev.vn/api/hb_upgc\"","import { message } from 'antd';\r\nimport { url } from './Item_Url'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ItemUtil'\r\n\r\nexport class Item {\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // User\r\n  userId\r\n\r\n  OnSet_User_Func = []\r\n\r\n  user\r\n  get User() {\r\n    if (this.user === undefined){\r\n      util.Handle_User(this)\r\n    }\r\n    return this.user;\r\n  } set User(v) {\r\n    this.user = v;\r\n    this.userId = v?._id\r\n\r\n    genUtil.Handle(this.OnSet_User_Func,\r\n      (v) => this.OnSet_User_Func = v)\r\n  }\r\n\r\n  Commands = []\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      _id: this._id,\r\n      userId: this.userId,\r\n      commands: this.Commands\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n\r\n    if (this._id) {\r\n      this.DeleteDatabase(false)\r\n    }\r\n  }\r\n\r\n  DeleteDatabase = (showMessage = true, handle) => {\r\n    genUtil.DeleteDatabase(this, url, () => {\r\n      if (showMessage) {\r\n        message.success('delete successflly!');\r\n      }\r\n      if (handle) {\r\n        handle()\r\n      }\r\n    });\r\n  }\r\n}","import * as api from '../../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { url } from './Item_Url'\r\nimport { Item } from './Item'\r\nimport { message } from 'antd'\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict)\r\n\r\n  qI._id = data._id\r\n  qI.userId = data.userId\r\n  qI.Commands = data.commands\r\n\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_User = (q) => {\r\n  if (q.IsGet_User) return undefined;\r\n  q.IsGet_User = true;\r\n\r\n  const setObj = (data) => {\r\n    if (data) {\r\n      q.User = genUtil.SingleFilter(data, x => x._id === q.userId)\r\n    } else {\r\n      q.User = null\r\n    }\r\n    q.IsGet_User = false;\r\n  }\r\n\r\n  if (!q.userId){\r\n    setObj();\r\n  } else {\r\n    var host = q.Dict.Dict\r\n    if (host.Users){\r\n      setObj(host.Users)\r\n    } else {\r\n      genUtil.Add_2(\r\n        host.OnSet_Users_Func,\r\n        () => setObj(host.Users)\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n// Method\r\n\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './DictUtil'\r\nimport * as iUtil from '../item/ItemUtil'\r\nimport { message } from 'antd'\r\n\r\nexport class Dict {\r\n  _id\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n    \r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = (v) => {\r\n    this.Items.push(v);\r\n    if (this.OnAddItem){\r\n      this.OnAddItem(v)\r\n    }\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    var items = this.Items;\r\n    var count = items.length\r\n    if (count === 0){\r\n      message.success('update data successfully!');\r\n    } else {\r\n      var i = -1;\r\n      const func = () => {\r\n        i++;\r\n        if (i === count-1){\r\n          message.success('update data successfully!');\r\n        }\r\n      }\r\n      \r\n      items.forEach(x => {\r\n        x.SaveDatabase(false, func)\r\n      })\r\n    }\r\n  }\r\n}","import { Dict, ExportSet_Dict } from \"./Dict\"\r\nimport * as iUtil from '../item/ItemUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Dict();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.GetFromDb(x, q))\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  const getApi = () => {\r\n    var apiData = {\r\n    }\r\n\r\n    iUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n\r\n  getApi()\r\n}\r\n\r\n\r\n// Method\r\n","import { Admin } from \"./Admin\";\r\nimport * as userUtil from '../../../../user/item/UserUtil'\r\nimport * as projectUtil from '../../project/base/ProjectUtil'\r\n\r\nimport * as umDictUtil from '../usermanager/dict/DictUtil'\r\nimport * as pcDictUtil from '../project/dict/DictUtil'\r\nimport * as pgcDictUtil from '../projectgroup/dict/DictUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Admin();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetGetUser_Func = (q) => {\r\n  return (x) => {\r\n    var qI = x ? userUtil.GetFromDb(x) : userUtil.get()\r\n\r\n    qI.GetUrl_Func = () => \"https://api.bimdev.vn/api/hbu\"\r\n    qI.GetApiData_Func = () => {\r\n      return {\r\n        _id: qI._id,\r\n        username : qI.Username,\r\n        name : qI.Name,\r\n        password: qI.Password\r\n      }\r\n    }\r\n    qI.Dict = q.UserManager_Dict\r\n    \r\n    return qI;\r\n  }\r\n}\r\n\r\nexport const Handle_Users = (q) => {\r\n  if (q.IsGet_Users) return undefined\r\n  q.IsGet_Users = true;\r\n\r\n  var url = \"https://api.bimdev.vn/api/hbu\"\r\n\r\n  const setObj = (data) => {\r\n    q.Users = data.map(x => {\r\n      return q.GetUser_Func(x)\r\n    });\r\n    q.IsGet_Users = false;\r\n  }\r\n\r\n  var apiData = {}\r\n\r\n  userUtil.GetData(\r\n    url,\r\n    apiData, (data) => setObj(data)\r\n  )\r\n}\r\n\r\nexport const Handle_Projects = (q) => {\r\n  if (q.IsGet_Projects) return undefined\r\n  q.IsGet_Projects = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Projects = data.map(x => projectUtil.GetFromDb(x));\r\n    q.IsGet_Projects = false;\r\n  }\r\n\r\n  var apiData = {\r\n    fortest : true\r\n  }\r\n\r\n  projectUtil.GetData(\r\n    apiData, (data) => setObj(data)\r\n  )\r\n}\r\n\r\nexport const GetUserManager_Dict = (q) => {\r\n  return umDictUtil.get(q);\r\n}\r\n\r\nexport const GetProjectCommand_Dict = (q) => {\r\n  return pcDictUtil.get(q)\r\n}\r\n\r\nexport const GetProjectGroupCommand_Dict = (q) => {\r\n  return pgcDictUtil.get(q)\r\n}\r\n\r\n// Method\r\n","import * as genUtil from '../../../../util/generalUtil'\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as mif from '../../entity/mass/field/MassItemField'\r\nimport * as mifd from '../../entity/mass/field/MassItemField_Dict'\r\nimport * as mutd from '../../entity/mass/unit/MassUnitType_Dict'\r\nimport * as projectDictUtil from '../../entity/project/dict/Project_DictUtil'\r\nimport * as phaseDictUtil from '../../entity/phase/dict/Phase_DictUtil'\r\n\r\n// MassGroup\r\nimport * as mgsddUtil from '../../entity/setting/massGroup/dict/dict/MGS_Dict_DictUtil'\r\nimport * as mgsdUtil from '../../entity/setting/massGroup/dict/base/MassGroupSetting_DictUtil'\r\nimport * as mgsd_ut from '../../entity/setting/massGroup/dict/base/MGS_Dict_UseType'\r\n\r\n// MassDetail\r\nimport * as mdsddUtil from '../../entity/setting/massDetail/dict/dict/MDS_Dict_DictUtil'\r\n\r\n// SiteSuggest\r\nimport * as sgddUtil from '../../entity/setting/sitesuggest/dict/dict/Dict_DictUtil'\r\n\r\n// MassType\r\nimport {Base as MassType_Dict} from '../../entity/massType/base/Base'\r\n\r\n// Category\r\nimport {Dict as Category_Dict} from '../../entity/category/list/dict/Dict'\r\n\r\n// Parameter\r\nimport {Dict as Parameter_Dict} from '../../entity/parameter/list/dict/Dict'\r\n\r\n// MassExport\r\nimport {Dict as MassExport_Dict} from '../../entity/massExport/list/dict/Dict'\r\n\r\n// WorkItem\r\nimport {Dict as WorkItem_Dict} from '../../entity/workItem/dict/Dict'\r\n\r\nimport * as userDictUtil from '../../../user/dict/User_DictUtil'\r\nimport * as adminUtil from '../../entity/admin/main/AdminUtil'\r\nimport { url as pgc_url } from '../../entity/project/base/ProjectGroupCommand_Url'\r\nimport { ExportSet_Dict } from '../../entity/exportset/dict/base/ExportSet_Dict'\r\nconst uc_url = \"https://api.bimdev.vn/api/hb_uc\"\r\n\r\nexport const GetMassItemFields = (data) => {\r\n  return mif.GetAll();\r\n}\r\n\r\nexport const GetMIFs_ForMassGroup = () => {\r\n  return mif.GetForMassGroup();\r\n}\r\n\r\n// Tên và Value của MassGroupField\r\nexport const GetMIF_Dict_ForMassGroup = () => {\r\n  return mifd.GetForMassGroup();\r\n}\r\n\r\n// Thêm Unit và Value\r\nexport const GetMIF_Dict_ForDetail = () => {\r\n  return mifd.GetForDetail();\r\n}\r\n\r\n// List cho Input\r\nexport const GetMIF_Dict_ForInput = () => {\r\n  return mifd.GetForInput();\r\n}\r\n\r\n// UnitType\r\nexport const GetMUT_Dict = () => {\r\n  return mutd.GetDict();\r\n}\r\n\r\n// Project\r\nexport const Get_Project_Dict = (data) => {\r\n  return projectDictUtil.get(true);\r\n}\r\n\r\nexport const Get_Project_Dict_ForMassDetail = (data) => {\r\n  return projectDictUtil.get();\r\n}\r\n\r\n// Phase\r\nexport const Get_Phase_Dict_ForMassDetail = (data) => {\r\n  return phaseDictUtil.get();\r\n}\r\n\r\n// MassGroup\r\nexport const GetMgs_Dict_Dict = (data) => {\r\n  return mgsddUtil.get();\r\n}\r\n\r\nexport const GetMassGroupSetting_Dict = (data) => {\r\n  return genUtil.SingleFilter\r\n    (data.Mgs_Dict_Dict.Items, (x) => x.UseType === mgsd_ut.project);\r\n}\r\n\r\n// MassDetail\r\nexport const GetMds_Dict_Dict = (data) => {\r\n  return mdsddUtil.get();\r\n}\r\n\r\n// SiteDict\r\nexport const Handle_SG_Dict_Dict = (q) => {\r\n  if (q.IsGet_SG_Dict_Dict) return undefined;\r\n  q.IsGet_SG_Dict_Dict = true;\r\n\r\n  const setObj = (data) => {\r\n    if (data) {\r\n      q.SG_Dict_Dict = data.length !== 0 ?\r\n        sgddUtil.GetFromDb(data[0])\r\n        : sgddUtil.get()\r\n    }\r\n    q.IsGet_SG_Dict_Dict = false;\r\n  }\r\n\r\n  var host = q.CurrentProject;\r\n  if (!host) {\r\n    setObj();\r\n  } else {\r\n    var apiData = {\r\n      projectId: host._id,\r\n    }\r\n\r\n    sgddUtil.GetData(apiData, (data) => {\r\n      setObj(data)\r\n    })\r\n  }\r\n}\r\n\r\n// UserDict\r\nexport const GetUserDict = (data) => {\r\n  var qI = userDictUtil.get(\r\n    \"https://api.bimdev.vn/api/hbu\",\r\n    data);\r\n\r\n  qI.OnSet_LoginUser = (v) => {\r\n    if (data.CurrentProject) {\r\n      data.CurrentProject.Reset_Commands();\r\n    }\r\n    data.Reset_Commands();\r\n    data.Reset_AdminCommands();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetAdmin = (data) => {\r\n  return adminUtil.get(data);\r\n}\r\n\r\n// Commands\r\nexport const Handle_Commands = (q) => {\r\n  if (q.IsGet_Commands) return undefined;\r\n  q.IsGet_Commands = true;\r\n\r\n  const setObj = (data, fromType) => {\r\n    // Ưu tiên data có projectId\r\n\r\n    if (fromType === 'api') {\r\n      // Nếu đã có data phần project, bỏ qua thiết lập này\r\n      if (q.Command_FromType === 'project') {\r\n        return\r\n      } else {\r\n        q.Commands = data && data.length !== 0 ? data[0].commands : []\r\n      }\r\n    } else {\r\n      q.Commands = data\r\n    }\r\n\r\n    q.Command_FromType = fromType;\r\n    q.IsGet_Commands = false;\r\n  }\r\n\r\n  var host = q.CurrentProject;\r\n  if (host) {\r\n    if (host.Commands) {\r\n      setObj(host.Commands)\r\n    } else {\r\n      genUtil.Add_2(host.OnSet_Commands_Func,\r\n        () => {\r\n          setObj(host.Commands, 'project')\r\n        })\r\n    }\r\n  } else {\r\n    var user = q.UserDict.LoginUser\r\n    if (!user) {\r\n      setObj(undefined, 'api');\r\n    } else {\r\n      var apiData = {\r\n        userId: user._id\r\n      }\r\n\r\n      const apiFunc = () => api.post(`${pgc_url}/list`, apiData);\r\n      apiFunc().then(response => response.data)\r\n        .then(data => {\r\n          setObj(data, 'api')\r\n        })\r\n    }\r\n  }\r\n}\r\n\r\n// Admin Command\r\nexport const Handle_AdminCommands = (q) => {\r\n  if (q.IsGet_AdminCommands) return undefined;\r\n  q.IsGet_AdminCommands = true;\r\n\r\n  const setObj = (data) => {\r\n    q.AdminCommands = data && data.length !== 0 ? \r\n      data[0].commands : []\r\n    q.IsGet_AdminCommands = false;\r\n  }\r\n\r\n  var user = q.UserDict.LoginUser\r\n  if (!user) {\r\n    setObj();\r\n  } else {\r\n    var apiData = {\r\n      userId: user._id\r\n    }\r\n\r\n    const apiFunc = () => api.post(`${uc_url}/list`, apiData);\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        setObj(data)\r\n      })\r\n  }\r\n}\r\n\r\n// MassType\r\nexport const GetMassType_Dict = (q) => {\r\n  var qI = new MassType_Dict();\r\n  return qI;\r\n}\r\n\r\n// Category\r\nexport const GetCategory_Dict = (q) => {\r\n  var qI = new Category_Dict();\r\n  return qI;\r\n}\r\n\r\n// Parameter\r\nexport const GetParameter_Dict = (q) => {\r\n  var qI = new Parameter_Dict();\r\n  return qI;\r\n}\r\n\r\n// MassExport\r\nexport const GetMassExport_Dict = (q) => {\r\n  var qI = new MassExport_Dict();\r\n  return qI;\r\n}\r\n\r\n// WorkItem\r\nexport const GetWorkItem_Dict = (q) => {\r\n  var qI = new WorkItem_Dict();\r\n  return qI;\r\n}\r\n\r\n// exportset\r\nexport const GetExportSet_Dict_ForMass = (q) => {\r\n  var qI = new ExportSet_Dict();\r\n  qI.Items = []\r\n  return qI;\r\n}","import * as mut from './MassUnitType'\r\n\r\nexport const GetDict = () => {\r\n  return mut.GetList().map(x => {\r\n    return {\r\n      _id: x,\r\n      Name: mut.GetName(x),\r\n      Value: x\r\n    }\r\n  })\r\n}","export const url = \"https://api.bimdev.vn/api/hb_upgc\";","export const web = 'web'\r\nexport const portal_plugin = 'portal_plugin'","\r\nimport MassResultComp from '../../entity/mass/result/base/MassResultComp';\r\nimport VersionCompareSetting from '../../entity/setting/versionCompare/VersionCompareSetting';\r\nimport { Tracking } from '../../entity/tracking/Tracking';\r\nimport * as util from './PMDataUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\nimport * as dot from '../../entity/design/DesignOptionType'\r\n\r\nexport class PMData {\r\n  constructor() {\r\n\r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  // Project\r\n  project_Dict\r\n  get Project_Dict() {\r\n    if (!this.project_Dict){\r\n      this.project_Dict = util.Get_Project_Dict(this);\r\n    }\r\n    return this.project_Dict;\r\n  }\r\n\r\n  project_Dict_ForMassDetail\r\n  get Project_Dict_ForMassDetail() {\r\n    if (!this.project_Dict_ForMassDetail){\r\n      this.project_Dict_ForMassDetail =\r\n        util.Get_Project_Dict_ForMassDetail(this);\r\n    }\r\n    return this.project_Dict_ForMassDetail;\r\n  } set Project_Dict_ForMassDetail(v){\r\n    this.project_Dict_ForMassDetail = v\r\n  }\r\n\r\n  currentProject\r\n  get CurrentProject(){\r\n    return this.currentProject\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n\r\n    this.Reset_Commands(this);\r\n    this.MassGroupSetting_Dict.Project = v;\r\n  }\r\n  \r\n  // MassGroup\r\n  mgs_Dict_Dict\r\n  get Mgs_Dict_Dict(){\r\n    if (!this.mgs_Dict_Dict){\r\n      this.mgs_Dict_Dict = util.GetMgs_Dict_Dict(this)\r\n    } return this.mgs_Dict_Dict\r\n  }\r\n\r\n  massGroupSetting_Dict = undefined\r\n  get MassGroupSetting_Dict(){\r\n    if (!this.massGroupSetting_Dict){\r\n      this.massGroupSetting_Dict = util.GetMassGroupSetting_Dict(this)\r\n    }return this.massGroupSetting_Dict\r\n  }\r\n\r\n  // MassDetail\r\n  mds_Dict_Dict\r\n  get Mds_Dict_Dict(){\r\n    if (!this.mds_Dict_Dict){\r\n      this.mds_Dict_Dict = util.GetMds_Dict_Dict(this)\r\n    } return this.mds_Dict_Dict\r\n  }\r\n\r\n  // SiteSuggest\r\n  OnSet_SG_Dict_Dict_Funcs = []\r\n\r\n  sg_Dict_Dict\r\n  get SG_Dict_Dict(){\r\n    if (!this.sg_Dict_Dict){\r\n      util.Handle_SG_Dict_Dict(this)\r\n    } return this.sg_Dict_Dict\r\n  } set SG_Dict_Dict(v){\r\n    this.sg_Dict_Dict = v\r\n    genUtil.Handle(this.OnSet_SG_Dict_Dict_Funcs,\r\n      (v) => this.OnSet_SG_Dict_Dict_Funcs = v)\r\n  }\r\n\r\n  phase_Dict_ForMassDetail\r\n  get Phase_Dict_ForMassDetail() {\r\n    if (!this.phase_Dict_ForMassDetail){\r\n      this.phase_Dict_ForMassDetail =\r\n        util.Get_Phase_Dict_ForMassDetail(this);\r\n    }\r\n    return this.phase_Dict_ForMassDetail;\r\n  }\r\n\r\n  massResultComp\r\n  get MassResultComp(){\r\n    if (!this.massResultComp){\r\n      this.massResultComp = new MassResultComp();\r\n    }\r\n    return this.massResultComp;\r\n  }\r\n  set MassResultComp(v){\r\n    this.massResultComp = v;\r\n  }\r\n\r\n  massItemFields\r\n  get MassItemFields(){\r\n    if (!this.massItemFields){\r\n      this.massItemFields = util.GetMassItemFields();\r\n    }\r\n    return this.massItemFields;\r\n  }\r\n\r\n  mifs_ForMassGroup\r\n  get MIFs_ForMassGroup(){\r\n    if (!this.mifs_ForMassGroup){\r\n      this.mifs_ForMassGroup = util.GetMIFs_ForMassGroup();\r\n    }\r\n    return this.mifs_ForMassGroup;\r\n  }\r\n\r\n  // Tên và Value của MassGroupField\r\n  mif_Dict_ForMassGroup\r\n  get MIF_Dict_ForMassGroup(){\r\n    if (!this.mif_Dict_ForMassGroup){\r\n      this.mif_Dict_ForMassGroup = util.GetMIF_Dict_ForMassGroup();\r\n    }\r\n    return this.mif_Dict_ForMassGroup;\r\n  }\r\n\r\n  // Thêm Unit và Value\r\n  mif_Dict_ForDetail\r\n  get MIF_Dict_ForDetail(){\r\n    if (!this.mif_Dict_ForDetail){\r\n      this.mif_Dict_ForDetail = util.GetMIF_Dict_ForDetail();\r\n    }\r\n    return this.mif_Dict_ForDetail;\r\n  }\r\n\r\n  // List dành cho Input\r\n  mif_Dict_ForInput\r\n  get MIF_Dict_ForInput(){\r\n    if (!this.mif_Dict_ForInput){\r\n      this.mif_Dict_ForInput = util.GetMIF_Dict_ForInput();\r\n    }\r\n    return this.mif_Dict_ForInput;\r\n  }\r\n\r\n  // UnitType\r\n  mut_Dict\r\n  get MUT_Dict(){\r\n    if (!this.mut_Dict){\r\n      this.mut_Dict = util.GetMUT_Dict(this)\r\n    } return this.mut_Dict\r\n  }\r\n\r\n  versionCompareSetting\r\n  get VersionCompareSetting(){\r\n    if (!this.versionCompareSetting){\r\n      this.versionCompareSetting = new VersionCompareSetting();\r\n    }\r\n    return this.versionCompareSetting;\r\n  }\r\n\r\n  DebugPoints = []\r\n\r\n  tracking\r\n  get Tracking(){\r\n    if (!this.tracking){\r\n      this.tracking = new Tracking();\r\n    }\r\n    return this.tracking;\r\n  }\r\n\r\n  IsDebug = false\r\n\r\n  OnSet_CurrentProject_Func_Dict = []\r\n\r\n  ApiUrl = 'https://api.bimdev.vn/api'\r\n\r\n  UpdatedDate = '24/09/2021'\r\n\r\n  // Kiểm tra có phải lần đầu truy xuất bảng khối lượng\r\n  // sau khi mở trang web hay ko?\r\n  Is_First_Get_MassTable\r\n\r\n  // Đối tượng noted trong debug\r\n  LoggingItems = []\r\n\r\n  // UserDict\r\n  userDict\r\n  get UserDict(){\r\n    if (!this.userDict){\r\n      this.userDict = util.GetUserDict(this)\r\n    } return this.userDict;\r\n  }\r\n\r\n  // Admin\r\n  admin\r\n  get Admin(){\r\n    if(!this.admin){\r\n      this.admin = util.GetAdmin(this)\r\n    } return this.admin\r\n  }\r\n\r\n  // Commands\r\n  OnSet_Commands_Func = []\r\n\r\n  commands\r\n  get Commands(){\r\n    if (!this.commands){\r\n      util.Handle_Commands(this)\r\n    } return this.commands\r\n  } set Commands(v){\r\n    this.commands = v;\r\n\r\n    genUtil.Handle(this.OnSet_Commands_Func,\r\n      (v) => this.OnSet_Commands_Func = v)\r\n  }\r\n\r\n  Reset_Commands = () => {\r\n    this.Commands = undefined;\r\n    this.IsGet_Commands = false\r\n    util.Handle_Commands(this)\r\n  }\r\n\r\n  // Admin Command\r\n  OnSet_AdminCommands_Func = []\r\n\r\n  Reset_AdminCommands = () => {\r\n    this.adminCommands = undefined;\r\n    this.IsGet_AdminCommands = false\r\n    util.Handle_AdminCommands(this)\r\n  }\r\n\r\n  adminCommands\r\n  get AdminCommands(){\r\n    if (!this.adminCommands){\r\n      util.Handle_AdminCommands(this)\r\n    } return this.adminCommands\r\n  } set AdminCommands(v){\r\n    this.adminCommands = v;\r\n\r\n    genUtil.Handle(this.OnSet_AdminCommands_Func,\r\n      (v) => this.OnSet_AdminCommands_Func = v)\r\n  }\r\n\r\n  // MassType\r\n  massType_Dict\r\n  get MassType_Dict(){\r\n    if (!this.massType_Dict){\r\n      this.massType_Dict = util.GetMassType_Dict(this);\r\n    }return this.massType_Dict;\r\n  }\r\n\r\n  // Category\r\n  category_Dict\r\n  get Category_Dict(){\r\n    if (!this.category_Dict){\r\n      this.category_Dict = util.GetCategory_Dict(this);\r\n    }return this.category_Dict;\r\n  }\r\n\r\n  // Parameter\r\n  parameter_Dict\r\n  get Parameter_Dict(){\r\n    if (!this.parameter_Dict){\r\n      this.parameter_Dict = util.GetParameter_Dict(this);\r\n    }return this.parameter_Dict;\r\n  }\r\n\r\n  // MassExport\r\n  massExport_Dict\r\n  get MassExport_Dict(){\r\n    if (!this.massExport_Dict){\r\n      this.massExport_Dict = util.GetMassExport_Dict(this);\r\n    }return this.massExport_Dict;\r\n  }\r\n\r\n  // WorkItem\r\n  workItem_Dict\r\n  get WorkItem_Dict(){\r\n    if(!this.workItem_Dict){\r\n      this.workItem_Dict = util.GetWorkItem_Dict(this)\r\n    } return this.workItem_Dict;\r\n  }\r\n\r\n  // exportset\r\n  exportSet_Dict_ForMass\r\n  get ExportSet_Dict_ForMass(){\r\n    if (!this.exportSet_Dict_ForMass){\r\n      this.exportSet_Dict_ForMass = util.GetExportSet_Dict_ForMass(this)\r\n    } return this.exportSet_Dict_ForMass\r\n  }\r\n\r\n  // MassTable\r\n  Current_MassTable\r\n\r\n  get MassReport(){\r\n    throw 500;\r\n  }\r\n\r\n  // DesignOption\r\n  DesignOption = dot.web\r\n  // DesignOption = dot.portal_plugin\r\n}","export const mass = 'mass'\r\n\r\nexport const level = 'level'\r\nexport const mappinglevel = 'mappinglevel'\r\nexport const typicallevel = 'typicallevel'\r\n\r\nexport const exportset = 'exportset'\r\n\r\nexport const phase = 'phase'\r\n\r\nexport const inputdata = 'inputdata'\r\n\r\nexport const mepsetting = 'mepsetting'\r\n\r\nexport const document = 'document'\r\n\r\nexport const category = 'category'\r\n\r\nexport const parameter = 'parameter'\r\n\r\nexport const masstype = 'masstype'\r\nexport const mt_list = 'mt_list'\r\nexport const mt_material_binding = 'mt_material_binding'\r\nexport const mt_category_binding = 'mt_category_binding'\r\nexport const mt_system_binding = 'mt_system_binding'\r\n\r\nexport const massexport = 'massexport'\r\n\r\nexport const project = 'project'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './PhaseVMUtil'\r\n\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as inputUtil from '../../../../../util/inputUtil'\r\n\r\nimport EditableTextView from '../../../../text/EditableTextView';\r\nimport { message } from 'antd';\r\n\r\nexport default class PhaseVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      is_FirstCreated : observable\r\n    })\r\n  }\r\n\r\n  get _id() {\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = inputUtil.GetInput(this, 'Name', () => this.Save());\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  // Code\r\n  get Description() {\r\n    return this.ModelItem.Description;\r\n  } set Description(v) {\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      this.descriptionVM = inputUtil.GetInput(this, 'Description', () => this.Save());\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  get DescriptionView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.DescriptionVM} />\r\n  }\r\n\r\n  is_FirstCreated = undefined\r\n  get Is_FirstCreated() {\r\n    if (this.is_FirstCreated === undefined) {\r\n      this.is_FirstCreated = this.ModelItem.Is_FirstCreated\r\n    } return this.is_FirstCreated\r\n  } set Is_FirstCreated(v) {\r\n    this.is_FirstCreated = v;\r\n    this.ModelItem.Is_FirstCreated = v\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return util.GetRowView(this)\r\n  }\r\n\r\n  // Run\r\n  Run = () => {\r\n    this.ModelItem.Run(() => {\r\n      this.Is_FirstCreated = false;\r\n      message.success('save successfully!');\r\n    });\r\n  }\r\n\r\n  // Save\r\n  Save = (handle) => {\r\n    // tạo lần đầu\r\n    if (this.Is_FirstCreated) {\r\n      if (handle) {\r\n        handle();\r\n      }\r\n      return;\r\n    }\r\n    this.ModelItem.Save(handle);\r\n  }\r\n\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import PhaseVM from \"./PhaseVM\";\r\n\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as inputUtil from '../../../../../util/inputUtil'\r\nimport * as comUtil from '../../../../../util/commandUtil'\r\nimport { EntDelete } from \"../../../../delete/EntDelete\";\r\nimport { Button } from \"antd\";\r\nimport { CheckCircleOutlined } from \"@ant-design/icons\";\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new PhaseVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Delete\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = 'manual'\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// View\r\nexport const GetRowView = (q, i) => {\r\n  return <tr key={q.id}>\r\n    {/* Name */}\r\n    <td\r\n      onMouseEnter={\r\n        () => inputUtil.Edit(q.NameVM, () => comUtil.Validate('edit'))}\r\n      onMouseLeave={\r\n        () => inputUtil.EditOK(q.NameVM)\r\n      }\r\n    >{q.NameView}</td>\r\n\r\n    {/* Code */}\r\n    <td\r\n      onMouseEnter={\r\n        () => inputUtil.Edit(q.DescriptionVM, () => comUtil.Validate('edit'))}\r\n      onMouseLeave={\r\n        () => inputUtil.EditOK(q.DescriptionVM)\r\n      }\r\n    >{q.DescriptionView}</td>\r\n\r\n    {/* Command */}\r\n    <td>\r\n      <div className='f-jc'>\r\n        <div>\r\n          {q.Is_FirstCreated ?\r\n            <Button type='primary' size='small' onClick={q.Run}>Run</Button>\r\n            : <CheckCircleOutlined />}\r\n        </div>\r\n      </div>\r\n    </td>\r\n  </tr>\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport './Table.css'\r\nimport { Phase_DictVM } from '../dict/Phase_DictVM';\r\nimport * as itemUtil from '../item/PhaseVMUtil'\r\n\r\nimport * as comUtil from '../../../../../util/commandUtil'\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Phase_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='es__thead'>\r\n            <tr>\r\n              <th className='phase__table__name'>Tên</th>\r\n              <th className='text-center'>Mô tả</th>\r\n              <th className='phase__table__command' />\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items?.map(x => x.RowView)}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Phase_DictVMUtil'\r\nimport TableView from '../table/TableView'\r\nimport * as itemUtil from '../item/PhaseVMUtil'\r\n\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../util/commandUtil'\r\nimport { Button } from 'antd';\r\n\r\nexport class Phase_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this);\r\n    } return this.items;\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    this.GetItemsDone = true;\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  set GetItemsDone(v) {\r\n    if (this.OnGetItemsDone) {\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = this.ModelItem.AddItem();\r\n    var itemVM = itemUtil.get(item, this);\r\n\r\n    this.Items.push(itemVM);\r\n    return itemVM;\r\n  }\r\n\r\n  // select\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      this.selectVM = util.GetSelectVM(this)\r\n    } return this.selectVM;\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get View() {\r\n    return <div className='f'>\r\n      {comUtil.Validate('edit') ?\r\n        <div className='es__add'>\r\n          <Button type='primary' size='small'\r\n            className='btn-success addproject'\r\n            onClick={this.AddItem}>+</Button>\r\n        </div>\r\n        : ''}\r\n      <div className='es__main f1'>\r\n        <TableView store={this} />\r\n      </div>\r\n    </div>\r\n  }\r\n}","import { SelectVM } from '../../../../select/SelectVM';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport * as itemUtil from '../item/PhaseVMUtil'\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport { MultiSelectVM } from '../../../../select/MultiSelectVM';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport const get = (q) => {\r\n  var qI = new Phase_DictVM();\r\n\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (v) => {\r\n    q.Items = v.map(x => itemUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var qI = q.ModelItem;\r\n  if (qI.Items && qI.Items.length !== 0) {\r\n    setObj(qI.Items);\r\n  }\r\n\r\n  genUtil.Add_2(qI.OnSet_Items_Func,\r\n    () => setObj(qI.Items), false);\r\n}\r\n\r\nexport const GetSelectVM = (q) => {\r\n  var qI = new MultiSelectVM();\r\n  q.Placeholder = \"chọn version\";\r\n\r\n  const setObj = () => {\r\n    var list = qI.Items = q.Items;\r\n    qI.TitleRender = (item) => item.Name;\r\n\r\n    qI.OnSelectedItemChanged = (v) => {\r\n      pmDataVM().ProjectComp.ProjectVM = v;\r\n    }\r\n\r\n    qI.SetValue(list[0]);\r\n  }\r\n\r\n  if (q.Items) {\r\n    setObj();\r\n  } else {\r\n    genUtil.Add_2(q.OnSet_Items_Func,\r\n      setObj)\r\n  }\r\n\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport * as checkboxVMUtil from './CheckboxVMUtil'\r\nimport './Checkbox.css'\r\n\r\nclass CheckboxView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = checkboxVMUtil.get(false);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onCheckedChange = (e) => {\r\n    var data = this.state;\r\n    var { checked } = e.target;\r\n\r\n    if (data.OnCheckChanging) {\r\n      data.OnCheckChanging(checked);\r\n    }\r\n\r\n    if (!data.Cancel) {\r\n      data.Ischecked = checked;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var { ischecked, name, isDisable } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <label>\r\n          <input type=\"checkbox\"\r\n            checked={ischecked}\r\n            onChange={this.onCheckedChange} disabled={isDisable} />\r\n          <span className='checkbox__title'>{name}</span>\r\n        </label>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CheckboxView)","import { makeObservable, observable, action } from 'mobx';\r\nimport CheckboxView from './CheckboxView';\r\n\r\nexport class CheckboxVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      ischecked: observable,\r\n      isDisable : observable,\r\n      Cancel : observable\r\n    })\r\n  }\r\n\r\n  name\r\n\r\n  OnCheckChanging\r\n\r\n  Cancel = false;\r\n\r\n  ischecked = undefined\r\n  set Ischecked(v) {\r\n    this.ischecked = v;\r\n    if (this.onCheckChange) {\r\n      this.onCheckChange(v);\r\n    }\r\n  }\r\n\r\n  isDisable = false\r\n\r\n  get View(){\r\n    return <CheckboxView store={this} />\r\n  }\r\n}","import { CheckboxVM } from \"./CheckboxVM\"\r\n\r\nexport const get = (name, ischecked) => {\r\n  var qI = new CheckboxVM();\r\n  qI.ischecked = ischecked;\r\n  qI.name = name;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ProjectVMUtil'\r\n\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as inputUtil from '../../../../../util/inputUtil'\r\n\r\nimport EditableTextView from '../../../../text/EditableTextView';\r\nimport * as checkboxUtil from '../../../../checkbox/CheckboxVMUtil';\r\n\r\nexport default class ProjectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      typicalLevelSetting: observable,\r\n      typicalLevelSetting_ForEdit: observable,\r\n      commands: observable\r\n    })\r\n  }\r\n\r\n  get _id() {\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = inputUtil.GetInput(this, 'Name', () => this.Save());\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  // Code\r\n  get Code() {\r\n    return this.ModelItem.Code;\r\n  } set Code(v) {\r\n    this.ModelItem.Code = v;\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      this.codeVM = inputUtil.GetInput(this, 'Code', () => this.Save());\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  get CodeView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.CodeVM} />\r\n  }\r\n\r\n  // fortest\r\n  get Fortest(){\r\n    return this.ModelItem.Fortest\r\n  } set Fortest(v){\r\n    this.ModelItem.Fortest = v;\r\n  }\r\n\r\n  fortestVM\r\n  get FortestVM(){\r\n    if (!this.fortestVM){\r\n      var obj = this.fortestVM = checkboxUtil.get('', this.Fortest);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.Fortest = v;\r\n        this.Save();\r\n      };\r\n    } return this.fortestVM;\r\n  }\r\n\r\n  // Phase\r\n  phase_DictVM\r\n  get Phase_DictVM() {\r\n    if (!this.phase_DictVM) {\r\n      this.phase_DictVM = util.GetPhase_DictVM(this);\r\n    }\r\n    return this.phase_DictVM;\r\n  }\r\n\r\n  exportSet_Dict\r\n  get ExportSet_Dict() {\r\n    if (!this.exportSet_Dict) {\r\n      this.exportSet_Dict = util.GetExportSet_Dict(this)\r\n    } return this.exportSet_Dict;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  // Old Version\r\n  get Level_Dict() {\r\n    return this.ModelItem.Level_Dict;\r\n  }\r\n\r\n  // LevelSetting\r\n  OnSet_LevelSetting_Func_Dict = []\r\n\r\n  levelSetting\r\n  get LevelSetting() {\r\n    if (!this.levelSetting) {\r\n      util.Handle_LevelSetting(this)\r\n    }\r\n    return this.levelSetting;\r\n  } set LevelSetting(v) {\r\n    this.levelSetting = v;\r\n\r\n    genUtil.Handle(\r\n      this.OnSet_LevelSetting_Func_Dict,\r\n      (v) => this.OnSet_LevelSetting_Func_Dict = v)\r\n  }\r\n\r\n  // TypicalLevelSetting\r\n  typicalLevelSetting = undefined\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      this.typicalLevelSetting = util.GetTypicalLevelSetting(this);\r\n    }\r\n    return this.typicalLevelSetting;\r\n  } set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit = undefined\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = util.GetTypicalLevelSetting_ForEdit(this);\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  get Url() {\r\n    return this.ModelItem.Url;\r\n  }\r\n\r\n  // Commands\r\n  commands = undefined\r\n  get Commands() {\r\n    if (!this.commands) {\r\n      util.Handle_Commands(this)\r\n    } return this.commands;\r\n  } set Commands(v) {\r\n    this.commands = v\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return util.GetRowView(this)\r\n  }\r\n\r\n  // Save\r\n  Save = (handle) => {\r\n    this.ModelItem.Save(handle);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../../text/TextVMUtil';\r\n\r\nexport class SettingVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Name = v;\r\n    }\r\n  }\r\n\r\n  nameVM\r\n  get NameVM(){\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM = textUtil.get(this.Name, 'tên thiết lập ...');\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Description = v;\r\n    }\r\n  }\r\n\r\n  settingType\r\n  get SettingType() {\r\n    if (!this.settingType) {\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v) {\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  data\r\n  get Data(){\r\n    if (!this.data){\r\n      this.data = this.ModelItem.Data;\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n    if (!this.M2VM){\r\n      this.ModelItem.Data = v;\r\n    }\r\n  }\r\n\r\n  dataVM\r\n  get DataVM() {\r\n    if (!this.dataVM) {\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM(v) {\r\n    this.dataVM = v;\r\n\r\n    // Gọi hàm để đổ dữ liệu về\r\n    if (v && this.OnInitialSetDataVM){\r\n      this.OnInitialSetDataVM(v);\r\n    }\r\n\r\n    if (!this.M2VM) {\r\n      if (!v) {\r\n        this.Data = v;\r\n      }\r\n      else {\r\n        this.Data = v.ModelItem;\r\n      }\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM) {\r\n      return this.OnGetDataVM();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n}","import { SettingVM } from \"../../base/SettingVM\";\r\nimport * as util from './LevelSettingVMUtil'\r\n\r\nexport class LevelSettingVM extends SettingVM {\r\n\r\n}","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\n\r\nimport * as genUtil from '../../../../../../util/generalUtil';\r\nimport * as inputUtil from '../../../../../../util/inputUtil';\r\nimport * as comUtil from '../../../../../../util/commandUtil';\r\n\r\nimport * as util from './LS_ItemVMUtil'\r\nimport * as mulSelectUtil from '../../../../../select/MultiSelectVMUtil';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport * as pct from '../../../command/ProjectCommand'\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport EditableTextView from '../../../../../text/EditableTextView';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class LS_ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Is_ShowValue_Delete: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Data\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  }\r\n  set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = inputUtil.GetInput(this, 'Name');\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get Values() {\r\n    return this.ModelItem.Values;\r\n  }\r\n  set Values(v) {\r\n    this.ModelItem.Values = v;\r\n  }\r\n\r\n  value_StorageList\r\n  get Value_StorageList() {\r\n    if (!this.value_StorageList) {\r\n      util.Handle_Value_StorageList(this);\r\n    }\r\n    return this.value_StorageList;\r\n  } set Value_StorageList(v) {\r\n    this.value_StorageList = v;\r\n\r\n    var obj = this.ValueVM;\r\n    obj.Items = v;\r\n    obj.InitialItems = this.Values;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var list = this.Value_StorageList ? this.Value_StorageList : []\r\n      var obj = this.valueVM = mulSelectUtil.get(list, this.Values);\r\n      obj.Placeholder = 'Chọn dữ liệu'\r\n      obj.OnSelectedItemChanged = (v) => this.Values = v;\r\n      obj.GetDisabled_Func = () => !this.Commands.includes(pct.edit)\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  Is_ShowValue_Delete = undefined\r\n\r\n  ShowValue_Delete = () => {\r\n    if (this.Commands.includes(pct.edit)) {\r\n      this.Is_ShowValue_Delete = true;\r\n    }\r\n  }\r\n\r\n  HideValue_Delete = () => {\r\n    this.Is_ShowValue_Delete = false;\r\n  }\r\n\r\n  get Value_Element() {\r\n    return <>\r\n      <div className='ls_item__value__wrapper'\r\n        onMouseEnter={this.ShowValue_Delete}\r\n        onMouseLeave={this.HideValue_Delete}>\r\n        <MultiSelectView store={this.ValueVM} />\r\n\r\n        <div className='ls_item__value__delete'>\r\n          {comUtil.Validate(pct.edit) ? this.DeleteVM.View : <div />}\r\n        </div>\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  // Index\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.Items.length - 1 === this.Index;\r\n  }\r\n\r\n  // Delete\r\n  Delete = () => {\r\n    var dict = this.Dict;\r\n    dict.Items.splice(this.Index, 1);\r\n    \r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n\r\n\r\n  get Project() {\r\n    return this.Dict.Project\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return util.GetRowView(this)\r\n  }\r\n}","export const getItemStyle = (isDragging, draggableStyle) => ({\r\n  // some basic styles to make the items look a bit nicer\r\n  userSelect: \"none\",\r\n  // change background colour if dragging\r\n  background: isDragging ? \"lightgreen\" : '',\r\n\r\n  // styles we need to apply on draggables\r\n  ...draggableStyle\r\n});","import { LS_ItemVM } from \"./LS_ItemVM\"\r\nimport { EntDelete } from \"../../../../../delete/EntDelete\";\r\nimport './LS_Item.css'\r\n\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as inputUtil from \"../../../../../../util/inputUtil\";\r\nimport * as dragUtil from \"../../../../../../util/dragUtil\";\r\nimport * as comUtil from \"../../../../../../util/commandUtil\";\r\n\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { DragOutlined } from \"@ant-design/icons\";\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new LS_ItemVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Proeprty\r\nexport const Handle_Value_StorageList = (q) => {\r\n  if (q.IsGet_Value_StorageList) return undefined;\r\n  q.IsGet_Value_StorageList = true;\r\n\r\n  var project = q.Project.ModelItem\r\n\r\n  var setObj = (levelDict) => {\r\n\r\n    var setObj2 = (items) => {\r\n      q.Value_StorageList = items.map(x => x.Name);\r\n      q.IsGet_Value_StorageList = false;\r\n    }\r\n\r\n    if (levelDict.Items) {\r\n      setObj2(levelDict.Items)\r\n    } else {\r\n      genUtil.Add_2(\r\n        levelDict.OnSet_Items_Func,\r\n        () => setObj2(levelDict.Items)\r\n      )\r\n    }\r\n\r\n  }\r\n\r\n  if (project.LevelDict) {\r\n    setObj(project.LevelDict)\r\n  } else {\r\n    genUtil.Add_2(\r\n      project.OnSet_LevelDict_Func_Dict,\r\n      () => {\r\n        setObj(project.LevelDict)\r\n      }, false);\r\n  }\r\n}\r\n\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = 'manual'\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// Row\r\n// export const GetRowView = (q) => {\r\n//   return <tr key={q.id}>\r\n//     <td\r\n//       onMouseEnter={\r\n//         () => inputUtil.Edit(q.NameVM, q.CheckCommand)}\r\n//       onMouseLeave={\r\n//         () => inputUtil.EditOK(q.NameVM)\r\n//       }\r\n//     >{q.NameView}</td>\r\n//     <td>\r\n//       {q.Value_Element}\r\n//     </td>\r\n//   </tr>\r\n// }\r\n\r\nexport const GetRowView = (q, i) => {\r\n  return <Draggable key={q.id} draggableId={q.id} index={i}>\r\n    {(provided, snapshot) =>\r\n      <tr {...provided.draggableProps} ref={provided.innerRef}\r\n        style={dragUtil.getItemStyle(\r\n          snapshot.isDragging,\r\n          provided.draggableProps.style\r\n        )}>\r\n        <td {...provided.dragHandleProps}\r\n          className='levelsetting__move__td'>\r\n          <DragOutlined />\r\n        </td>\r\n        <td onMouseEnter={\r\n          () => inputUtil.Edit(q.NameVM, () => comUtil.Validate('edit'))}\r\n          onMouseLeave={\r\n            () => inputUtil.EditOK(q.NameVM)\r\n          }\r\n        >{q.NameView}</td>\r\n        <td>\r\n          {q.Value_Element}\r\n        </td>\r\n      </tr>\r\n    }\r\n  </Draggable>\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { LevelSettingDataVM } from '../data/LevelSettingDataVM';\r\nimport './Table.css'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nimport * as itemUtil from '../item/LS_ItemVMUtil'\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new LevelSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    var data = this.state;\r\n    console.log(`mapping level count : ${data.Items?.length}`)\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mt__thead'>\r\n            <tr>\r\n              <th className='mt__table__move'></th>\r\n              <th className='mt__table__name'>Tên</th>\r\n              <th>Tương đương với</th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <DragDropContext onDragEnd={data.OnDragEnd}>\r\n            <Droppable droppableId='mapping-level'>\r\n              {(provided) =>\r\n                <tbody {...provided.droppableProps} ref={provided.innerRef}>\r\n                  {data.Items.map((x, i) => itemUtil.GetRowView(x, i))}\r\n                  {provided.placeholder}\r\n                </tbody>\r\n              }\r\n            </Droppable>\r\n          </DragDropContext>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './LevelSettingDataVMUtil'\r\nimport { Button, message } from 'antd';\r\nimport * as itemUtil from '../item/LS_ItemVMUtil'\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport TableView from '../table/TableView';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class LevelSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  } set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  get Project() {\r\n    return this.Dict.Project\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = itemUtil.get(this.ModelItem.AddItem(), this);\r\n\r\n    // item.NameVM.RenderState = rs.edit\r\n\r\n    this.Items.push(item);\r\n    // this.Table.AddItem(item);\r\n    return item;\r\n  }\r\n\r\n  get Project() {\r\n    return this.Dict.Project\r\n  }\r\n\r\n  Update_LevelData = () => {\r\n    this.ModelItem.Update_LevelData();\r\n    message.success('save successfully!');\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  // Move\r\n  Move = (i1, i2) => {\r\n    var list = this.Items;\r\n    genUtil.MoveItem(list, i1, i2);\r\n\r\n    this.ModelItem.Move(i1, i2);\r\n  }\r\n\r\n  Insert = (i1, i2) => {\r\n    var list = this.Items;\r\n    genUtil.InsertItem(list, i1, i2);\r\n\r\n    this.ModelItem.Insert(i1, i2);\r\n  }\r\n\r\n  OnDragEnd = (res) => {\r\n    if (!res.destination) return;\r\n\r\n    var i1 = res.source.index;\r\n    var i2 = res.destination.index;\r\n\r\n    this.Insert(i1,i2);\r\n  }\r\n}","export const _default = \"default\";\r\nexport const edit = \"edit\";","import * as util from './RenderItemUtil'\r\n\r\nexport default class RenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport * as util from './TableCellUtil'\r\n\r\nexport default class TableCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState: observable\r\n    })\r\n  }\r\n\r\n  get Key() {\r\n    return `${this.Column.Key}_${this.Row.Key}`;\r\n  }\r\n\r\n  get Item() {\r\n    return this.Row.Item;\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Row.Cells.indexOf(this);\r\n  }\r\n\r\n  get RowIndex() {\r\n    return this.Row.Index;\r\n  }\r\n\r\n  renderState = undefined\r\n  get RenderState() {\r\n    if (!this.renderState) {\r\n      this.renderState = this.Column.RenderState;\r\n    }\r\n    return this.renderState;\r\n  }\r\n  set RenderState(v) {\r\n    this.renderState = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM(){\r\n    if (!this.valueVM){\r\n      var val = util.GetValue(this);\r\n      this.valueVM = textUtil.get(val);\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = this.Column.Render_Dict;\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n\r\n  get DataIndex() {\r\n    return this.Column.DataIndex;\r\n  }\r\n\r\n  Render = () => {\r\n    var dataIndex = this.DataIndex;\r\n    var item = this.Item;\r\n    var value  = util.GetValue(this);\r\n\r\n    if (this.Table.Override_Get_CellRender){\r\n      return this.Table.Override_Get_CellRender(value, item, dataIndex, this, this.Row, this.Column);\r\n    }\r\n\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(value, item, dataIndex, this, this.Row, this.Column);\r\n  }\r\n}","import { PMData } from \"../main/single/model/PMData\";\r\nimport TableCell from \"./TableCell\"\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (row, col) => {\r\n  var qI = new TableCell();\r\n  qI.Row = row;\r\n  qI.Column = col;\r\n  qI.Table = row.Table;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetValue = (q) => {\r\n  var dataIndex = q.DataIndex;\r\n  var item = q.Item;\r\n\r\n  if (q.Table.Override_Get_CellValue){\r\n    var val = q.Table.Override_Get_CellValue(item, q, q.Row, q.Column);\r\n    return val;\r\n  }\r\n\r\n  var value = undefined;\r\n\r\n  if (dataIndex) {\r\n    value = item;\r\n    dataIndex.forEach(x => {\r\n      value = value[x]\r\n    })\r\n  }\r\n\r\n  return value;\r\n}","import InputView from \"../input/InputView\";\r\nimport RenderItem from \"./RenderItem\"\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport TextView from \"../text/TextView\";\r\nimport * as cellUtil from './TableCellUtil'\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new RenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (val, item, dataIndex, cell, row, col) => {\r\n        return cell.ValueVM.Content;\r\n      };\r\n    case rs.edit:\r\n      return (value, item, dataIndex, cell, row, col) => {\r\n        if (!dataIndex) return value;\r\n\r\n        var inputVM = cell.ValueVM;\r\n\r\n        var length = dataIndex.length;\r\n        var obj = item;\r\n        dataIndex.filter((x, i) => i < length - 1)\r\n          .forEach((x) => obj = obj[x]);\r\n\r\n        inputVM.onSetContent = (v) => {\r\n          obj[dataIndex[length - 1]] = v;\r\n        }\r\n        return <InputView store={inputVM} />\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './RenderItemUtil'\r\n\r\nexport default class Render_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import * as util from './TitleRenderItemUtil'\r\n\r\nexport default class TitleRenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport TitleRenderItem from \"./TitleRenderItem\";\r\nimport { Button } from \"antd\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new TitleRenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (title, column, table) => {\r\n        return <>\r\n          <div className='column__title__wrapper'>\r\n            {title}\r\n            {table.CanHandleColumn &&  column.IsShow_MoveCommand ?\r\n              <div className='column__title__tool'>\r\n                {table.CanEditColumn ?\r\n                  <Button type='primary' size='small'\r\n                    style={{ backgroundColor: '#faad14', border: 'none' }}\r\n                    onClick={column.Edit}>e</Button> : ''}\r\n                {table.CanDeleteColumn ? <Button type='primary' danger size='small'\r\n                  onClick={column.Delete}>x</Button> : ''}\r\n              </div>\r\n              : ''}\r\n          </div>\r\n        </>\r\n      };\r\n    case rs.edit:\r\n      return (title, column, table) => {\r\n        return <>\r\n          <div className='column__title__wrapper'>\r\n            {column.InputElement}\r\n            <Button type='primary' size='small'\r\n              onClick={column.OK}>ok</Button>\r\n          </div>\r\n        </>\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './TitleRenderItemUtil'\r\n\r\nexport default class TitleRender_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","export const select = 'select'\r\nexport const input = 'input'","import TableColumn from \"./TableColumn\"\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport { Button } from \"antd\";\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as it from './TableColumn_InputType'\r\n\r\n// Instance\r\nexport const get = (title, dataIndex, renders, table) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n\r\n  if (Array.isArray(dataIndex)) {\r\n    qI.DataIndex = dataIndex;\r\n  } else {\r\n    qI.DataIndex = [dataIndex];\r\n  }\r\n\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n  var dict = qI.Render_Dict;\r\n  if (renders) {\r\n    renders.forEach(x => {\r\n      dict.GetRender(x.State).Render = x.Render\r\n    });\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetByTitle = (title, table, dataIndex) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n\r\n  // Nếu có dataIndex lấy bằng dataIndex, không lấy theo Title\r\n  qI.DataIndex = dataIndex ? [dataIndex] : [title];\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n\r\n  qI.OnSetTitleOK_Funcs.push(() => {\r\n    if (qI.InputType === it.input) {\r\n      qI.DataIndex = [qI.Title];\r\n    }\r\n    table.Update();\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetActionColumn = (table) => {\r\n  var title = undefined;\r\n\r\n  var renders = [\r\n    renderUtil.get(rs._default, (val, item, dataIndex, cell, row) => {\r\n      var editElem = '';\r\n      if (table.CanHandleItem && table.CanEditItem) {\r\n        var edit = () => row.Edit();\r\n        editElem = <Button type='primary' size='small'\r\n          style={{ backgroundColor: '#faad14', border: 'none' }}\r\n          onClick={edit}>edit</Button>\r\n      }\r\n\r\n      var delElem = '';\r\n      if (table.CanHandleItem && table.CanDeleteItem) {\r\n        var del = () => table.DeleteItem(item, row);\r\n\r\n        delElem = <Button type='primary' danger size='small'\r\n          onClick={del}>x</Button>\r\n      }\r\n      return <>\r\n        {editElem}{delElem}\r\n      </>\r\n    }),\r\n    renderUtil.get(rs.edit, (val, item, dataIndex, cell, row) => {\r\n      var ok = () => row.OK();\r\n      return <Button type='primary' size='small'\r\n        onClick={ok}>ok</Button>\r\n    })\r\n  ]\r\n\r\n  var col = get(title, null, renders, table);\r\n\r\n  // Đính thông tin là Action Column\r\n  col.IsAction = true;\r\n\r\n  col.TitleRender_Dict.GetRender(rs._default).Render = () =>\r\n    <div style={{ display: 'flex' }}>\r\n      <Button type='primary' size='small'\r\n        onClick={table.AddColumn}>\r\n        (+) c\r\n        </Button>\r\n      {table.CanHandleItem && table.CanAddItem ?\r\n        <Button type='primary' size='small'\r\n          onClick={table.AddItem}>\r\n          (+) r\r\n        </Button>\r\n        : ''}\r\n    </div>\r\n\r\n  return col;\r\n}\r\n\r\n// Property\r\nexport const GetTitle = (q) => {\r\n  switch (q.InputType) {\r\n    case it.input:\r\n      return undefined;\r\n    case it.select:\r\n      return q.AllNames[0];\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport Render_Dict from './Render_Dict';\r\nimport TitleRender_Dict from './TitleRender_Dict';\r\nimport * as it from './TableColumn_InputType'\r\nimport * as selectUtil from '../select/SelectVMUtil';\r\nimport * as textUtil from '../text/TextVMUtil';\r\nimport InputView from '../input/InputView';\r\nimport SelectView from '../select/SelectView';\r\nimport { PMData } from '../main/single/model/PMData';\r\nimport * as util from './TableColumnUtil'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport default class TableColumn {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      title: observable,\r\n      TitleRenderState: observable,\r\n      inputType: observable,\r\n      IsShow_MoveCommand: observable\r\n    })\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  get CurrentList() {\r\n    return this.Table.Columns;\r\n  } set CurrentList(v) {\r\n    this.Table.Columns = v;\r\n  }\r\n\r\n  TitleRenderState = rs._default\r\n  RenderState = rs._default;\r\n\r\n  title = undefined\r\n  get Title() {\r\n    // Bỏ việc khởi tạo sẵn đối tượng\r\n    // if (!this.title) {\r\n    //   this.title = util.GetTitle(this);\r\n    // }\r\n    return this.title;\r\n  } set Title(v) {\r\n    this.title = v;\r\n  }\r\n\r\n  dataIndex = undefined\r\n  get DataIndex(){\r\n    return this.dataIndex;\r\n  } set DataIndex(v){\r\n    this.dataIndex = v;\r\n  }\r\n\r\n  key\r\n  get Key(){\r\n    if (!this.key){\r\n      this.key = genUtil.newGUID();\r\n    }\r\n    return this.key;\r\n  } set Key(v){\r\n    this.key = v;\r\n  }\r\n\r\n  OnSetTitleOK_Funcs = []\r\n\r\n  titleRender_Dict\r\n  get TitleRender_Dict() {\r\n    if (!this.titleRender_Dict) {\r\n      this.titleRender_Dict = new TitleRender_Dict();\r\n    }\r\n    return this.titleRender_Dict;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = new Render_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v) {\r\n    this.render_Dict = v;\r\n  }\r\n\r\n  Edit = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleColumn && table.CanEditColumn) {\r\n      this.TitleRenderState = rs.edit;\r\n    }\r\n  }\r\n\r\n  OK = () => {\r\n    this.TitleRenderState = rs._default;\r\n    this.OnSetTitleOK_Funcs.forEach(x => x(this));\r\n  }\r\n\r\n  Delete = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleColumn && table.CanDeleteColumn) {\r\n      table.Columns.splice(this.Index, 1);\r\n      table.Update();\r\n    }\r\n  }\r\n\r\n  TitleRender = () => {\r\n    var title = this.Title;\r\n    var table = this.Table;\r\n\r\n    var render = this.TitleRender_Dict.GetRender(this.TitleRenderState);\r\n    return render.Render(title, this, table);\r\n  }\r\n\r\n  inputType = undefined\r\n  get InputType() {\r\n    if (!this.inputType) {\r\n      this.inputType = this.Table.Column_InputType\r\n    }\r\n    return this.inputType;\r\n  }\r\n\r\n  // Thuộc tính sử dụng khi select đầu mục cột\r\n  get AllNames() {\r\n    return this.Table.AllColumnNames\r\n  }\r\n\r\n  inputVM\r\n  get InputVM() {\r\n    if (!this.inputVM) {\r\n      var obj = this.inputVM = textUtil.get(this.Title);\r\n      obj.onSetContent = (v) => this.Title = v;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var list = this.AllNames;\r\n      var obj = this.selectVM = selectUtil.get(this.AllNames);\r\n      obj.TitleRender = (x) => x.Name\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Title = v.Name;\r\n        this.DataIndex = [ v.Value ];\r\n      }\r\n\r\n      // Nếu không có thông tin Title\r\n      if (!this.Title) {\r\n        var firstItem = list[0]\r\n        this.Title = firstItem.Name;\r\n        this.DataIndex = [firstItem.Value]\r\n\r\n        obj.InitialItem = firstItem;\r\n      } else {\r\n        // Có Title mà chưa có InitialItem\r\n        if (!obj.InitialItem) {\r\n          var index = list.findIndex(x => x.Name === this.Title);\r\n          obj.InitialItem = list[index];\r\n        }\r\n      }\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        return <InputView store={this.InputVM} />\r\n      case it.select:\r\n        var width = this.Table.Column_Title_SelectWidth\r\n        return <div style={{ width }}>\r\n          <SelectView store={this.SelectVM} />\r\n        </div>\r\n    }\r\n  }\r\n\r\n  IsShow_MoveCommand = false\r\n\r\n  get CanShow_MoveCommand() {\r\n    return this.Table.CanShow_MoveCommand;\r\n  }\r\n\r\n  Show_MoveCommand = () => {\r\n    this.IsShow_MoveCommand = true;\r\n  }\r\n\r\n  Collapse_MoveCommand = () => {\r\n    this.IsShow_MoveCommand = false;\r\n  }\r\n\r\n  MoveLeft = () => {\r\n    var index = this.Index;\r\n    if (index === 0) return;\r\n\r\n    var list = this.CurrentList;\r\n    var l1 = list.filter(x => !x.IsActive);\r\n    if (l1.length === 1) return;\r\n\r\n    genUtil.MoveItem(list, index, index - 1);\r\n    this.Table.Update();\r\n  }\r\n\r\n  MoveRight = () => {\r\n    var index = this.Index;\r\n\r\n    var list = this.CurrentList;\r\n    var l1 = list.filter(x => !x.IsActive);\r\n\r\n    if (l1.length === 1 || index === l1.length) {\r\n      return\r\n    }\r\n\r\n    genUtil.MoveItem(list, index, index + 1);\r\n    this.Table.Update();\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TableRowUtil'\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport default class TableRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Item: observable\r\n    })\r\n  }\r\n\r\n  key\r\n  get Key() {\r\n    if (!this.key) {\r\n      this.key = this.Item._id ? this.Item._id : this.Item.id;\r\n      if (!this.key) {\r\n        this.key = genUtil.randomId();\r\n      }\r\n    }\r\n    return this.key;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Table.Rows.indexOf(this);\r\n  }\r\n\r\n  Item = undefined;\r\n\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  Edit = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleItem && table.CanEditItem) {\r\n      this.Cells.forEach(x => x.RenderState = rs.edit);\r\n    }\r\n  }\r\n\r\n  OK = () => {\r\n    this.Cells.forEach(x => x.RenderState = rs._default);\r\n    this.Table.EditItem(this.Item);\r\n  }\r\n}","import TableRow from \"./TableRow\"\r\nimport * as cellUtil from './TableCellUtil'\r\nimport { PMData } from \"../main/single/model/PMData\";\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport const get = (item, table) => {\r\n  var qI = new TableRow();\r\n  qI.Item = item;\r\n  qI.Table = table;\r\n  return qI;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var columns = q.Table.Columns;\r\n  return columns.map(x => cellUtil.get(q, x));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport TableColumn from './TableColumn';\r\nimport * as colUtil from './TableColumnUtil'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport * as rs from './RenderState'\r\nimport * as util from './TableVMUtil'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport InputView from '../input/InputView'\r\nimport { Button } from 'antd';\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as rowUtil from './TableRowUtil'\r\nimport * as cit from './TableColumn_InputType'\r\n\r\nexport default class TableVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      columns: observable,\r\n      dataSource: observable,\r\n      rows: observable,\r\n\r\n      AllColumnNames: observable,\r\n      Column_InputType: observable,\r\n\r\n      CanHandleItem: observable,\r\n      CanAddItem: observable,\r\n      CanDeleteItem: observable,\r\n      CanEditItem: observable,\r\n\r\n      CanHandleItem: observable,\r\n      CanAddItem: observable,\r\n      CanDeleteItem: observable,\r\n      CanEditItem: observable,\r\n      IsShowActionColumn: observable,\r\n    })\r\n  }\r\n\r\n  // Có thể xử lý dữ liệu 1 dòng (bao gồm Xóa, Thêm, Sửa)\r\n  CanHandleItem = true\r\n\r\n  // Thêm 1 dòng\r\n  CanAddItem = true\r\n\r\n  // Xóa 1 dòng\r\n  CanDeleteItem = true\r\n\r\n  // Dùng để chỉnh sửa thông tin 1 Dòng\r\n  CanEditItem = true\r\n\r\n  // Có thể xử lý dữ liệu 1 cột (bao gồm Xóa, Thêm, Sửa)\r\n  CanHandleColumn = true\r\n\r\n  // Thêm 1 cột\r\n  CanAddColumn = true\r\n\r\n  // Xóa 1 cột\r\n  CanDeleteColumn = true\r\n\r\n  // Chỉnh sửa thông tin 1 cột\r\n  CanEditColumn = true\r\n\r\n  IsShowActionColumn = true\r\n\r\n  columns = undefined\r\n  get Columns() {\r\n    if (!this.columns) {\r\n      this.columns = [\r\n        colUtil.get('Tên cấu kiện', 'ElementName', null, this),\r\n        colUtil.get('Đường kính', 'Diameter', null, this),\r\n      ];\r\n\r\n      if (this.IsShowActionColumn) {\r\n        this.columns.push(colUtil.GetActionColumn(this));\r\n      }\r\n    }\r\n    return this.columns;\r\n  }\r\n  set Columns(v) {\r\n    this.columns = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  dataSource = undefined\r\n  get DataSource() {\r\n    if (!this.dataSource) {\r\n      this.dataSource = []\r\n    }\r\n    return this.dataSource;\r\n  }\r\n  set DataSource(v) {\r\n    this.dataSource = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  rows = undefined\r\n  get Rows() {\r\n    if (!this.rows) {\r\n      this.rows = util.GetRows(this);\r\n    }\r\n    return this.rows;\r\n  }\r\n  set Rows(v) {\r\n    this.rows = v;\r\n  }\r\n\r\n  AddItem = (item, isEdit = false) => {\r\n    if (this.CanHandleItem && this.CanAddItem) {\r\n      if (item === undefined) {\r\n        if (this.OnGetItemForAdd) {\r\n          item = this.OnGetItemForAdd();\r\n        } else {\r\n          item = {\r\n            Key: genUtil.randomId(),\r\n            IsTypeNotDefined: true\r\n          };\r\n        }\r\n      }\r\n      this.DataSource.push(item);\r\n\r\n      var row = rowUtil.get(item, this);\r\n      this.Rows.push(row);\r\n\r\n      if (isEdit) {\r\n        row.Edit();\r\n      }\r\n    }\r\n  }\r\n\r\n  DeleteItem = (item, row) => {\r\n    if (this.CanHandleItem && this.CanDeleteItem) {\r\n      var list = this.DataSource;\r\n      var index = list.indexOf(item);\r\n      list.splice(index, 1);\r\n      this.Rows.splice(index, 1);\r\n\r\n      if (this.OnDeleteItem) {\r\n        this.OnDeleteItem(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  EditItem = (item) => {\r\n    if (this.CanHandleItem && this.CanEditItem) {\r\n      if (item.IsTypeNotDefined) {\r\n        var index = this.DataSource.findIndex(x => x.Key === item.Key);\r\n        item = this.DataSource[index] = { ...item };\r\n      }\r\n\r\n      if (this.OnEditItem) {\r\n        this.OnEditItem(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddColumn = () => {\r\n    if (this.CanHandleColumn && this.CanDeleteColumn) {\r\n      var col = colUtil.GetByTitle(null, this);\r\n\r\n      var actionCol_Index = this.Columns.findIndex(x => x.IsAction);\r\n      if (actionCol_Index !== -1) {\r\n        this.Columns.splice(actionCol_Index, 0, col);\r\n      } else {\r\n        this.Columns.push(col);\r\n      }\r\n\r\n      col.Edit();\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    this.Rows = null;\r\n  }\r\n\r\n  // Ghi đè cách truy xuất giá trị 1 cell theo Item, Cell, Row, Col\r\n  Override_Get_CellValue\r\n\r\n  // Ghi đè cách render 1 cell theo Item, Cell, Row, Col\r\n  Override_Get_CellRender\r\n\r\n  // Khi hiệu chỉnh đầu mục cột,\r\n  // sử dụng 2 cách để hiểu chỉnh: select và input\r\n  Column_InputType = cit.input\r\n  AllColumnNames = []\r\n\r\n  // Có thể di chuyển vị trí các cột hay không\r\n  CanShow_MoveCommand = true\r\n\r\n  // Thiết lập sẵn bề rỗng của \r\n  Column_Title_SelectWidth\r\n}","import * as rowUtil from './TableRowUtil'\r\nimport * as colUtil from './TableColumnUtil'\r\nimport TableVM from './TableVM';\r\n\r\n// Instance\r\nexport const get = (data) => {\r\n  var qI = new TableVM();\r\n  qI.Columns = data.columns.map(x => colUtil.GetByTitle(x, qI));\r\n  qI.DataSource = data.dataSource;\r\n  return qI;\r\n}\r\n\r\nexport const GetByColumn_Data = (colNames, data, isHaveAction = true) => {\r\n  var qI = new TableVM();\r\n  \r\n  var cols = colNames.map(x => colUtil.GetByTitle(x, qI));\r\n  if (isHaveAction){\r\n    cols.push(colUtil.GetActionColumn(qI));\r\n  }\r\n\r\n  qI.Columns = cols;\r\n\r\n  qI.DataSource = data;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetRows = (q) => {\r\n  return q.DataSource.map(x => rowUtil.get(x, q));\r\n}","import { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport { LevelSettingDataVM } from './LevelSettingDataVM';\r\nimport * as itemUtil from '../item/LS_ItemVMUtil'\r\nimport TableVM from '../../../../../table/TableVM';\r\nimport TableColumn from '../../../../../table/TableColumn';\r\n\r\nimport * as genUtil from '../../../../../../util/generalUtil';\r\nimport * as inputUtil from '../../../../../../util/inputUtil';\r\nimport * as comUtil from '../../../../../../util/commandUtil';\r\n\r\nimport EditableTextView from '../../../../../text/EditableTextView';\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new LevelSettingDataVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => itemUtil.get(x, q));\r\n}","import * as util from './TLS_Data_WrapperVMUtil'\r\nimport * as genUtil from \"../../../../../../util/generalUtil\";\r\n\r\nexport class TLS_Data_WrapperVM {\r\n  binding\r\n  get Binding(){\r\n    if (!this.binding){\r\n      this.binding = util.GetBinding(this);\r\n    }\r\n    return this.binding \r\n  }\r\n\r\n  typical\r\n  get Typical(){\r\n    if (!this.typical){\r\n      this.typical = util.GetTypical(this);\r\n    }\r\n    return this.typical;\r\n  }\r\n\r\n  // Old versoin\r\n  // get LevelStorageList() {\r\n  //   return this.Dict.LevelStorageList;\r\n  // }\r\n\r\n  // Level StorageList\r\n  OnSet_LevelStorageList_Func_Dict = []\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n\r\n    genUtil.Handle(this.OnSet_LevelStorageList_Func_Dict,\r\n      (v) => this.OnSet_LevelStorageList_Func_Dict = v)\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  get SettingVM (){\r\n    return this.Dict;\r\n  }\r\n\r\n  get Project(){\r\n    return this.Dict.Project\r\n  }\r\n}","export const text = 'text'\r\nexport const input = 'input'","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport CheckboxView from '../../../../../checkbox/CheckboxView';\r\nimport * as checkBoxUtil from '../../../../../checkbox/CheckboxVMUtil';\r\nimport * as multiSelectUtil from \"../../../../../select/MultiSelectVMUtil\";\r\nimport * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport { text } from '../pageItem/TLS_PageItemStateType';\r\nimport * as util from './LevelGroupVMUtil'\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class LevelGroupVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      primary: observable,\r\n      isSelectOpen: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n   // Level StorageList\r\n   levelStorageList\r\n   get LevelStorageList(){\r\n     if (!this.levelStorageList){\r\n       this.levelStorageList = util.GetLevelStorageList(this);\r\n     }\r\n     return this.levelStorageList;\r\n   } set LevelStorageList(v){\r\n     this.levelStorageList = v;\r\n\r\n     var selectVM = this.LevelSelectVM;\r\n     selectVM.Items = v;\r\n     selectVM.InitialItems = this.Levels;\r\n   }\r\n\r\n  get Levels() {\r\n    return this.ModelItem.Levels;\r\n  } set Levels(v) {\r\n    this.ModelItem.Levels = v;\r\n  }\r\n\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  levelSelectVM\r\n  get LevelSelectVM() {\r\n    if (!this.levelSelectVM) {\r\n      var list = this.LevelStorageList;\r\n      if (!list) {\r\n        this.SettingVM.ModelItem.OnGetLevelStorageList_Funcs.push(() => {\r\n          var obj = this.levelSelectVM;\r\n          obj.Items = this.LevelStorageList;\r\n          obj.InitialItems = this.Levels;\r\n        })\r\n      }\r\n\r\n      list = list ? list : []\r\n      var obj = this.levelSelectVM = multiSelectUtil.get(list, this.Levels);\r\n      obj.Placeholder = 'chọn level ...';\r\n      obj.GetDisabled_Func = () => !this.Commands.includes(pct.edit)\r\n\r\n      obj.TitleRender = (item) => {\r\n        const getTriggerContent = () => {\r\n          return this.IsSelectOpen || this.Primary === item ? 'click' : 'hover';\r\n        }\r\n        var triggerVM = textUtil.get(getTriggerContent())\r\n\r\n        const getButtonType = () => {\r\n          return this.Primary === item ? 'primary' : 'dashed'\r\n        }\r\n        var buttonTypeVM = textUtil.get(getButtonType())\r\n\r\n        const getAddContent = () => {\r\n          return this.Primary === item ? '' : 'Set'\r\n        }\r\n        var addContentVM = textUtil.get(getAddContent())\r\n\r\n        const getItemCss = () => {\r\n          return this.Primary === item ? 'levelgroup__primary' : '';\r\n        }\r\n\r\n        return <Popover trigger={triggerVM.Content}\r\n          content={\r\n            <span>\r\n              {this.Primary !== item ?\r\n                <span className='levelgroup__addtext'>{addContentVM.Content}</span>\r\n                : ''}\r\n              <Button size='small'\r\n                type={buttonTypeVM.Content}\r\n                onClick={() => {\r\n                  this.Primary = item;\r\n                }}>Primary</Button>\r\n            </span>\r\n          }>\r\n          <span className={getItemCss()}>{item}</span>\r\n        </Popover>\r\n      }\r\n\r\n      obj.OnSetOpen = (v) => this.IsSelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Levels = v;\r\n        if (this.Levels.indexOf(this.Primary) === -1) {\r\n          this.Primary = util.GetDefaultPrimary(this);\r\n        }\r\n      }\r\n    }\r\n    return this.levelSelectVM;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.LevelGroups;\r\n    list.splice(this.Index, 1);\r\n\r\n    this.Primary = util.GetDefaultPrimary(this);\r\n  }\r\n\r\n  primary = undefined\r\n  get Primary() {\r\n    if (!this.primary) {\r\n      this.primary = this.ModelItem.Primary;\r\n    }\r\n    return this.primary\r\n  } set Primary(v) {\r\n    this.primary = this.ModelItem.Primary = v;\r\n  }\r\n\r\n  isSelectOpen = undefined\r\n  get IsSelectOpen() {\r\n    return this.isSelectOpen\r\n  } set IsSelectOpen(v) {\r\n    this.isSelectOpen = v;\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n}","import { LevelGroupVM } from \"./LevelGroupVM\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new LevelGroupVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  genUtil.Add_2(\r\n    dict.OnSet_LevelStorageList_Func_Dict,\r\n    () => qI.LevelStorageList = GetLevelStorageList(qI),\r\n    false\r\n  );\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  return q.Dict.LevelStorageList;\r\n}","import * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport * as genUtil from \"../../../../../../util/generalUtil\";\r\nimport * as it from './TLS_FilterValue_InputType'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterValueVMUtil'\r\nimport InputView from \"../../../../../input/InputView\";\r\nimport { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class TLS_FilterValueVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      inputType: observable,\r\n      value : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  get Values() {\r\n    return this.Dict.ModelItem.Items;\r\n  }\r\n\r\n  value = undefined\r\n  get Value() {\r\n    if (!this.value){\r\n      this.value = this.Values[this.Index].Value;\r\n    } return this.value\r\n  }\r\n  set Value(v) {\r\n    this.value = this.Values[this.Index].Value = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var obj = this.valueVM = textUtil.get(this.Value);\r\n      obj.onSetContent = (v) => {\r\n        this.Value = v;\r\n      }\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var list = ['Cột', 'Vách', 'Dầm', 'Sàn']\r\n      var obj = this.selectVM = selectUtil.get(list, this.Value);\r\n      obj.Placeholder = '...'\r\n      obj.OnSetOpen = (v) => this.SelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => this.Value = v;\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ModelItem.Items.splice(this.Index, 1);\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n\r\n  inputType = undefined\r\n  get InputType(){\r\n    if (!this.inputType){\r\n      this.inputType = this.ModelItem.InputType\r\n    }\r\n    return this.inputType;\r\n  } set InputType(v){\r\n    this.inputType = this.ModelItem.InputType = v;\r\n  }\r\n\r\n  ToggleInputType = () => {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        this.SelectVM.InitialItem = this.Value;\r\n        this.Value = this.SelectVM.SelectedItem;\r\n        this.InputType = it.select\r\n        break;\r\n      case it.select:\r\n        if (this.Value) {\r\n          this.ValueVM.Content = this.Value;\r\n        } else{\r\n          if (!this.ValueVM.Content){\r\n            this.ValueVM.Content = 'value'\r\n          }\r\n          this.Value =this.ValueVM.Content;\r\n        }\r\n\r\n        this.InputType = it.input\r\n        break;\r\n    }\r\n  }\r\n\r\n  SwitchChecked_Funcs = () => this.InputType === it.select;\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        // return <NewInputView store={this.ValueVM} \r\n        //   className='tls_filter__value__input' />\r\n        return <InputView store={this.ValueVM} \r\n          className='tls_filter__value__input' />\r\n      case it.select:\r\n        return <SelectView store={this.SelectVM} \r\n          className='tls_filter__value__select' />\r\n    }\r\n  }\r\n\r\n  selectOpen\r\n  get SelectOpen() {\r\n    if (this.selectOpen === undefined) {\r\n      this.selectOpen = this.SelectVM.Open;\r\n    }\r\n    return this.selectOpen;\r\n  }\r\n  set SelectOpen(v) {\r\n    this.selectOpen = v;\r\n    this.PopoverState.Content = util.GetPopoverState(this);\r\n  }\r\n\r\n  popoverState\r\n  get PopoverState() {\r\n    if (!this.popoverState) {\r\n      this.popoverState = textUtil.get(util.GetPopoverState(this));\r\n    }\r\n    return this.popoverState;\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n}","import { TLS_FilterValueVM } from \"./TLS_FilterValueVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterValueVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPopoverState = (q) => {\r\n    return q.SelectOpen ? 'none' : 'hover';\r\n  }","import { makeObservable, observable, action } from 'mobx';\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterVMUtil'\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class TLS_FilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get id(){\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get Field(){\r\n    return this.ModelItem.Field;\r\n  } set Field(v){\r\n    this.ModelItem.Field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = \r\n        selectUtil.get(this.FieldStorageList, this.Field);\r\n      obj.Placeholder = 'chọn bộ lọc ...';\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n      obj.GetDisabled_Func = () => !this.Commands.includes(pct.edit)\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = valueUtil.get(this.ModelItem.AddItem(),this);\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n}\r\n","import { TLS_FilterVM } from \"./TLS_FilterVM\";\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => valueUtil.get(x, q));\r\n}","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport * as textUtil from '../../../../../text/TextVMUtil';\r\nimport * as st from './TLS_PageItemStateType'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\nimport * as util from './TLS_PageItemVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class TLS_PageItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable,\r\n      State: observable,\r\n      levelGroups: observable,\r\n      filters: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem?.id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = this.ModelItem.Name = v;\r\n  }\r\n\r\n  State = st.text\r\n\r\n  ToggleState = () => {\r\n    switch (this.State) {\r\n      case st.text:\r\n        this.State = st.input\r\n        break;\r\n      case st.input:\r\n        this.NameVM.Content = this.Name;\r\n        this.State = st.text\r\n        break;\r\n    }\r\n  }\r\n\r\n  get DeleteMarginCss() {\r\n    return this.State === st.input ? 'tls_pageItem__deletemargin' : ''\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = textUtil.get(this.Name);\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  NameOK = () => {\r\n    this.State = st.text;\r\n    this.Name = this.NameVM.Content;\r\n  }\r\n\r\n  NameCancel = () => {\r\n    this.State = st.text;\r\n  }\r\n\r\n  get InputToolElement() {\r\n    return <div >\r\n      <Button type='primary' size='small'\r\n        onClick={this.NameOK}>ok</Button>\r\n      <Button type='dashed' size='small'\r\n        onClick={this.NameCancel}>cancel</Button>\r\n    </div>\r\n  }\r\n\r\n  get InputElement() {\r\n    var obj = <NewInputView className='tls_pageItem_input' store={this.NameVM} />\r\n    return obj;\r\n  }\r\n\r\n  get TitleElement() {\r\n    var delElem = <Button type='primary' size='small' onClick={this.Delete}\r\n      className='tls_pageItem__delete'>x</Button>\r\n\r\n    switch (this.State) {\r\n      case st.text:\r\n        return <>\r\n          <span>{this.Name}</span>\r\n          {this.Commands.includes(pct.edit) ?\r\n            <>\r\n              <Button type='primary' size='small' className='tls_pageItem__edit'\r\n                onClick={this.ToggleState}>e</Button>\r\n              {delElem}\r\n            </>\r\n            : ''}\r\n        </>\r\n      case st.input:\r\n        return <>\r\n          <Popover content={this.InputToolElement} trigger=\"focus\">\r\n            <span>\r\n              {this.InputElement}\r\n            </span>\r\n          </Popover>\r\n          {delElem}\r\n        </>\r\n    }\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.PageItems.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var index = this.Index;\r\n    var isLast = this.IsLast;\r\n\r\n    var dict = this.Dict;\r\n    var list = dict.PageItems;\r\n    list.splice(index, 1);\r\n    dict.AllTabs.splice(index, 1);\r\n\r\n    if (list.length !== 0) {\r\n      dict.IsModelChangePageKey = true;\r\n      dict.CurrentPageKey = (isLast ? list[index - 1] : list[index]).id\r\n    }\r\n  }\r\n\r\n  // Setting\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  // Level StorageList\r\n  OnSet_LevelStorageList_Func_Dict = []\r\n\r\n  levelStorageList\r\n  get LevelStorageList() {\r\n    if (!this.levelStorageList) {\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v) {\r\n    this.levelStorageList = v;\r\n\r\n    genUtil.Handle(this.OnSet_LevelStorageList_Func_Dict,\r\n      (v) => this.OnSet_LevelStorageList_Func_Dict = v)\r\n  }\r\n\r\n  levelGroups = undefined\r\n  get LevelGroups() {\r\n    if (!this.levelGroups) {\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.get(this.ModelItem.AddLevelGroup(), this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  filters = undefined\r\n  get Filters() {\r\n    if (!this.filters) {\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.get(this.ModelItem.AddFilter(), this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n}","import { TLS_PageItemVM } from \"./TLS_PageItemVM\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_PageItemVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  genUtil.Add_2(\r\n    dict.OnSet_LevelStorageList_Func_Dict,\r\n    () => qI.LevelStorageList = GetLevelStorageList(qI),\r\n    false\r\n  );\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetLevelGroups = (q) => {\r\n  return q.ModelItem.LevelGroups.map(x => levelGroupUtil.get(x, q));\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return q.ModelItem.Filters.map(x => filterUtil.get(x, q));\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  return q.Dict.LevelStorageList;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TypicalLevelSettingDataVMUtil'\r\nimport { Button } from 'antd';\r\nimport * as pageItemUtil from '../pageItem/TLS_PageItemVMUtil';\r\nimport * as genUtil from \"../../../../../../util/generalUtil\"\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class TypicalLevelSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      pageItems: observable,\r\n      currentPageKey: observable,\r\n      allTabs: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  // Setting\r\n  get SettingVM (){\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  // Level StorageList\r\n  OnSet_LevelStorageList_Func_Dict = []\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n\r\n    genUtil.Handle(this.OnSet_LevelStorageList_Func_Dict,\r\n      (v) => this.OnSet_LevelStorageList_Func_Dict = v)\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Page Items\r\n  pageItems = undefined\r\n  get PageItems() {\r\n    if (!this.pageItems) {\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.get(this.ModelItem.AddPageItem(), this);\r\n    this.PageItems.push(item);\r\n\r\n    var i = this.IsHaveAddCommandTab ? 1 : 0;\r\n    this.AllTabs.splice(this.AllTabs.length - i, 0, item);\r\n\r\n    this.CurrentPageKey = item.id;\r\n\r\n    return item;\r\n  }\r\n\r\n  addCommandTab\r\n  get AddCommandTab() {\r\n    if (!this.addCommandTab) {\r\n      this.addCommandTab = {\r\n        id: 'add',\r\n        TitleElement: <Button className='tls__tabs__add'\r\n          type='text' size='small'\r\n          onClick={this.AddPageItem}>+</Button>\r\n      }\r\n    }\r\n    return this.addCommandTab;\r\n  }\r\n\r\n  IsHaveAddCommandTab = false\r\n\r\n  allTabs = undefined\r\n  get AllTabs() {\r\n    if (!this.allTabs) {\r\n      var obj = [...this.PageItems];\r\n      if (this.IsHaveAddCommandTab) {\r\n        obj.push(this.AddCommandTab);\r\n      }\r\n      this.allTabs = obj;\r\n    }\r\n    return this.allTabs;\r\n  }\r\n\r\n  currentPageKey = undefined\r\n  get CurrentPageKey() {\r\n    if (!this.currentPageKey) {\r\n      this.currentPageKey = util.GetCurrentPageKey(this)\r\n    } return this.currentPageKey;\r\n  } set CurrentPageKey(v) {\r\n    this.currentPageKey = v;\r\n  }\r\n\r\n  IsModelChangePageKey = false\r\n\r\n  ChangePageKey = (v) => {\r\n    if (this.IsModelChangePageKey) {\r\n      this.IsModelChangePageKey = false; return;\r\n    }\r\n    this.CurrentPageKey = v;\r\n  }\r\n\r\n  Save = () => {\r\n    this.SettingVM.Save();\r\n  }\r\n\r\n  // Commands\r\n  get Commands(){\r\n    return pmDataVM().Commands;\r\n  }\r\n}","import { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport * as pageItemUtil from '../pageItem/TLS_PageItemVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new TypicalLevelSettingDataVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  genUtil.Add_2(\r\n    dict.OnSet_LevelStorageList_Func_Dict,\r\n    () => qI.LevelStorageList = GetLevelStorageList(qI),\r\n    false\r\n  );\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetPageItems = (q) => {\r\n  return q.ModelItem.PageItems.map(x => pageItemUtil.get(x, q));\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  return q.Dict.LevelStorageList\r\n}\r\n\r\nexport const GetCurrentPageKey = (q) => {\r\n  return q.PageItems.length !== 0 ? q.PageItems[0].id : undefined\r\n}","import { TLS_Data_WrapperVM } from \"./TLS_Data_WrapperVM\"\r\nimport * as bindingUtil from '../../level/data/LevelSettingDataVMUtil'\r\nimport * as typicalUtil from '../data/TypicalLevelSettingDataVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_Data_WrapperVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  // Gán sự kiện update Level cho Binding\r\n  genUtil.Add_2(\r\n    q.OnSet_LevelStorageList_Func_Dict,\r\n    () => qI.LevelStorageList = GetLevelStorageList(qI),\r\n    false\r\n  );\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetBinding = (q) => {\r\n  return bindingUtil.get(q.ModelItem.Binding, q);\r\n}\r\n\r\nexport const GetTypical = (q) => {\r\n  return typicalUtil.get(q.ModelItem.Typical, q);\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  return q.ModelItem.LevelStorageList;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport TableVM from \"./TableVM\";\r\nimport * as rs from './RenderState'\r\nimport './Table.css'\r\nimport { LeftCircleOutlined, RightCircleOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TableVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var columns = data.Columns;\r\n    var className = this.props.className\r\n    var style = this.props.style\r\n\r\n    var rows = data.Rows;\r\n    var tableElem = '';\r\n    if (columns && rows) {\r\n      var theadElem = <thead className=\"thead-light\">\r\n        <tr>\r\n          {columns.map(x => {\r\n            return <th scope=\"col\" key={x.Key}\r\n              className={x.ClassName}>\r\n              <div className='column__title__wrapper'\r\n                onMouseEnter={x.Show_MoveCommand}\r\n                onMouseLeave={x.Collapse_MoveCommand}>\r\n\r\n                {x.CanShow_MoveCommand ?\r\n                  <div className='column__title__left'>\r\n                    {x.IsShow_MoveCommand ?\r\n                      <Button type='primary' size='small'\r\n                        className='column__title__move__button'\r\n                        onClick={x.MoveLeft}>\r\n                        <LeftCircleOutlined />\r\n                      </Button>\r\n                      : <div className='column__title__move__blank' />}\r\n                  </div>\r\n                  : ''}\r\n\r\n                {x.TitleRender()}\r\n\r\n                {x.CanShow_MoveCommand ?\r\n                  <div className='column__title__right'>\r\n                    {x.IsShow_MoveCommand ?\r\n                      <Button type='primary' size='small'\r\n                        className='column__title__move__button right'\r\n                        onClick={x.MoveRight}>\r\n                        <RightCircleOutlined />\r\n                      </Button>\r\n                      : <div className='column__title__move__blank' />}\r\n                  </div>\r\n                  : ''}\r\n              </div>\r\n            </th>\r\n          })}\r\n        </tr>\r\n      </thead>\r\n\r\n      var tbodyElem = <tbody>\r\n        {rows.map(x => {\r\n          return <tr key={x.Key}>\r\n            {x.Cells.map(y => {\r\n              return <td key={y.Key}>{y.Render()}</td>\r\n            })}\r\n          </tr>\r\n        })}\r\n      </tbody>\r\n\r\n      tableElem = <table className={className} style={style}>\r\n        {theadElem}{tbodyElem}\r\n      </table>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {tableElem}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TableView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport { LevelSettingDataVM } from './LevelSettingDataVM';\r\nimport '../base/LevelSetting.css'\r\nimport TableView from '../../../../../table/TableView';\r\nimport { SaveFilled } from '@ant-design/icons';\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nclass LevelSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new LevelSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='ls__wrapper'>\r\n          {data.Commands.includes(pct.edit) ?\r\n            <>\r\n              {/* Update Level Data */}\r\n              <Button type='primary' size='small' className='ls__save__button'\r\n                onClick={data.Update_LevelData}>\r\n                <SaveFilled className='tls__save' />\r\n              </Button>\r\n\r\n              <Button type='primary' size='small'\r\n                className='ls_add'\r\n                onClick={data.AddItem}>+</Button>\r\n            </> :\r\n            ''}\r\n\r\n          {/* Table */}\r\n          {data.TableView}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LevelSettingDataView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Popover, Switch } from 'antd';\r\nimport { TLS_FilterValueVM } from './TLS_FilterValueVM';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport './TLS_FilterValue.css'\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nclass TLS_FilterValueView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterValueVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls_filter__value'>\r\n          {/* Input */}\r\n          {data.Commands.includes(pct.edit) ?\r\n            <>\r\n              <Popover\r\n                trigger={data.PopoverState.Content}\r\n                content={\r\n                  <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n                    checked={data.SwitchChecked_Funcs()} onChange={data.ToggleInputType} />\r\n                }>\r\n                <span>\r\n                  {data.InputElement}\r\n                </span>\r\n              </Popover>\r\n\r\n\r\n              {/* Delete */}\r\n              <Button type='primary' size='small' onClick={data.Delete}\r\n                className='tls_filter__value__delete'>x</Button>\r\n            </>\r\n            : data.Value}\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterValueView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { TLS_FilterVM } from './TLS_FilterVM';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport './TLS_Filter.css'\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport TLS_FilterValueView from './TLS_FilterValueView';\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nclass TLS_FilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls_filter__div'>\r\n          {/* Field Select */}\r\n          <SelectView store={data.FieldSelectVM}\r\n            className='tls_filter_fieldselect' />\r\n\r\n          <div className='tls_filter__valuediv__wrapper'>\r\n            {/* Add Value */}\r\n            {data.Commands.includes(pct.edit) ?\r\n              <Button type='primary' size='small' onClick={data.AddItem}\r\n                className='tls_filter__valuediv__addbutton'>+</Button>\r\n              : ''}\r\n\r\n            {/* Value List */}\r\n            <div className='tls_filter__valuediv'>\r\n              {data.Items.map(x => {\r\n                return <TLS_FilterValueView key={x.id} store={x} />\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          {data.Commands.includes(pct.edit) ?\r\n            <Button size='small' type='text'\r\n              className='tls_filter__deletebutton'\r\n              onClick={data.Delete}>\r\n              <DeleteFilled className='tls_filter__deleteicon' />\r\n            </Button>\r\n            : ''}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { LevelGroupVM } from './LevelGroupVM';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './LevelGroup.css'\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nclass LevelGroupView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new LevelGroupVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='levelgroup__container'>\r\n          <MultiSelectView store={data.LevelSelectVM} />\r\n          {data.Commands.includes(pct.edit) ?\r\n            <Button size='small' type='text'\r\n              className='levelgroup__deletebutton'\r\n              onClick={data.Delete}>\r\n              <DeleteFilled className='levelgroup__deleteicon' />\r\n            </Button>\r\n            : ''}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LevelGroupView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './TLS_PageItem.css'\r\nimport { TLS_PageItemVM } from './TLS_PageItemVM';\r\nimport TLS_FilterView from '../filter/TLS_FilterView';\r\nimport LevelGroupView from '../levelGroup/LevelGroupView';\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TLS_PageItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_PageItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__pageitem__wrapper'>\r\n          {/* Filters */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Filter */}\r\n              {data.Commands.includes(pct.edit) ?\r\n                <Button type='primary' size='small' onClick={data.AddFilter}\r\n                  className='typicallevel__addbutton'>+</Button>\r\n                : ''}\r\n              <span><b>Thiết lập bộ lọc</b></span>\r\n            </div>\r\n\r\n            {/* Filter List */}\r\n            {data.Filters.map(x => {\r\n              return <TLS_FilterView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n\r\n          {/* LevelGroup */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Level */}\r\n              {data.Commands.includes(pct.edit) ?\r\n              <Button type='primary' size='small' onClick={data.AddLevelGroup}\r\n                className='typicallevel__addbutton'>+</Button>\r\n                : ''}\r\n              <span><b>Thiết lập level</b></span>\r\n            </div>\r\n\r\n            {/* Level List */}\r\n            {data.LevelGroups.map(x => {\r\n              return <LevelGroupView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_PageItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport './TypicalLevelSettingData.css'\r\nimport '../pageItem/TLS_PageItem.css'\r\nimport TLS_PageItemView from '../pageItem/TLS_PageItemView';\r\nimport { SaveFilled } from '@ant-design/icons';\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TypicalLevelSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onKeyDown = (v) => {\r\n    //console.log(v);\r\n    v.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* Data */}\r\n        <div className='tls'>\r\n          {/* Save Button */}\r\n          {data.Commands.includes(pct.edit) ?\r\n            <Button type='primary' size='small' className='tls__save__button'\r\n              onClick={data.Save}>\r\n              <SaveFilled className='tls__save' />\r\n            </Button>\r\n            : ''}\r\n\r\n          {/* Main Data */}\r\n          <div className='tls__tabs__wrapper'>\r\n            <div className='tls__tabs__div'>\r\n              {/* Add Tab */}\r\n              {data.Commands.includes(pct.edit) ?\r\n                (!data.IsHaveAddCommandTab ?\r\n                  <Button type='primary' size='small' onClick={data.AddPageItem}\r\n                    className='tls__tabs__add__outside'>+</Button>\r\n                  : '')\r\n                : ''}\r\n\r\n              {/* Tabs */}\r\n              <Tabs type='card' className='tls__tabs'\r\n                onChange={data.ChangePageKey}\r\n                activeKey={data.CurrentPageKey}\r\n                onKeyDown={this.onKeyDown}>\r\n                {data.AllTabs.map(x => {\r\n                  return <TabPane tab={x.TitleElement} key={x.id}>\r\n                    <TLS_PageItemView store={x} />\r\n                  </TabPane>\r\n                })}\r\n              </Tabs>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingDataView);\r\n","import { SettingVM } from \"../../base/SettingVM\";\r\nimport * as util from './TypicalLevelSettingVMUtil'\r\nimport './TypicalLevelSetting.css'\r\n\r\nimport LevelSettingDataView from '../../level/data/LevelSettingDataView'\r\nimport TypicalLevelSettingDataView from '../data/TypicalLevelSettingDataView';\r\n\r\nexport class TypicalLevelSettingVM extends SettingVM {\r\n  get LevelStorageList() {\r\n    return this.ModelItem.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.ModelItem.FieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    this.ModelItem.Save();\r\n  }\r\n\r\n  // View\r\n  // Mapping\r\n  get MappingView() {\r\n    return <div className='projectcomp__level'>\r\n      <div className='projectcomp__title'>\r\n        <h3>THIẾT LẬP MAPPING TẦNG</h3>\r\n      </div>\r\n      <LevelSettingDataView store={this.DataVM.Binding} />\r\n    </div>\r\n  }\r\n\r\n  // Typical\r\n  get TypicalView() {\r\n    return <div className='projectcomp__typicallevel'>\r\n      <div className='projectcomp__title'>\r\n        <h3>THIẾT LẬP TẦNG ĐIỂN HÌNH</h3>\r\n      </div>\r\n      <TypicalLevelSettingDataView store={this.DataVM.Typical} />\r\n    </div>\r\n  }\r\n}","//import * as dataVMUtil from './TypicalLevelSettingDataVMUtil'\r\nimport * as dataVMUtil from '../wrapper/TLS_Data_WrapperVMUtil'\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM'\r\nimport * as fieldUtil from '../../../mass/field/MassItemField'\r\n\r\nexport const get = (q, project) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new TypicalLevelSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Project = project;\r\n\r\n  // var level_Dict = project.Level_Dict;\r\n  // const getLevelsFunc = () => { \r\n  //   qI.LevelStorageList = level_Dict.Items.map(x => x.Name);\r\n  //   qI.GetLevelStorageList = true;\r\n  // }\r\n  // if (level_Dict.Items){\r\n  //   getLevelsFunc();\r\n  // } else{\r\n  //   level_Dict.OnGetItemsDone_Funcs.push(getLevelsFunc);\r\n  // }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data, qI);\r\n  }    \r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}","export const info = 'info'\r\nexport const value = 'value'","export const input = 'input'\r\nexport const detail = 'detail'","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../../util/commandUtil'\r\nimport * as util from './ColumnGroupUtil'\r\nimport './ColumnGroup.css'\r\nimport { PMDataVM } from '../../../../../single/form/PMDataVM';\r\nimport * as pct from '../../../../command/ProjectCommand'\r\nimport * as ut from '../table/Table_UseType'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class ColumnGroup {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      columns: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Group\r\n\r\n  get Title() {\r\n    return util.GetTitle(this)\r\n  }\r\n\r\n  Fields\r\n\r\n  get DefaultField() {\r\n    return util.GetDefaultField(this)\r\n  }\r\n\r\n  get Table() {\r\n    return this.Dict;\r\n  }\r\n\r\n  columns = undefined\r\n  get Columns() {\r\n    if (!this.columns) {\r\n      this.columns = util.GetColumns(this)\r\n    } return this.columns\r\n  }\r\n\r\n  get ColumnsCount() {\r\n    return this.Columns.length\r\n  }\r\n\r\n  AddColumn = () => {\r\n    util.AddColumn(this)\r\n    this.Table.Refresh_ColumnCount()\r\n  }\r\n\r\n  get View() {\r\n    return <th key={this.id} colSpan={this.ColumnsCount}>\r\n      <span>{this.Title}</span>\r\n\r\n      {this.Table.UseType === ut.detail || comUtil.Validate(pct.edit)\r\n      ?\r\n        <Button type='primary' size='small'\r\n          className='es__mi__add btn-success'\r\n          onClick={this.AddColumn}>+</Button>\r\n        : ''}\r\n    </th>\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../../util/commandUtil'\r\nimport * as util from './ColumnUtil'\r\nimport * as rs from '../../../../../../text/TextRenderState';\r\nimport SelectView from '../../../../../../select/SelectView';\r\nimport * as cgt from './Column_GroupType'\r\nimport { PMDataVM } from '../../../../../single/form/PMDataVM';\r\nimport * as pct from '../../../../command/ProjectCommand'\r\nimport * as ut from '../table/Table_UseType'\r\nimport { TextVM } from '../../../../../../text/TextVM';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class Column {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState: observable,\r\n      title: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.Table.UseType === ut.detail ||\r\n      this.Commands.includes(pct.edit)) {\r\n      if (this.RenderState === rs._default) {\r\n        this.RenderState = rs.edit\r\n        this.Hide_Tool();\r\n      }\r\n    }\r\n  }\r\n\r\n  field\r\n  get Field() {\r\n    return this.field\r\n  } set Field(v) {\r\n    this.field = v;\r\n    this.Title = util.GetTitle(this)\r\n  }\r\n\r\n  Group\r\n\r\n  get Table() {\r\n    return this.Dict.Table;\r\n  }\r\n\r\n  // Title\r\n  title = undefined\r\n  get Title() {\r\n    if (!this.title) {\r\n      this.title = util.GetTitle(this)\r\n    } return this.title\r\n  } set Title(v) {\r\n    this.title = v;\r\n  }\r\n\r\n  titleSelect\r\n  get TitleSelect() {\r\n    if (!this.titleSelect) {\r\n      this.titleSelect = util.GetTitleSelect(this)\r\n    } return this.titleSelect\r\n  }\r\n\r\n  get TitleView() {\r\n    switch (this.RenderState) {\r\n      case rs._default:\r\n        return <div className='f'>\r\n          <div className='f1'>{this.Title}</div>\r\n          {this.Table.UseType === ut.detail ||\r\n            comUtil.Validate(pct.edit) ? this.DeleteVM.View : ''}\r\n        </div>\r\n      case rs.edit:\r\n        return <SelectView store={this.TitleSelect} />\r\n    }\r\n  }\r\n\r\n  get View() {\r\n    return <th key={this.id} style={this.Table.Tr_Style}\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      {this.TitleView}\r\n    </th>\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Columns\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.Table.Refresh_ColumnCount()\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // MassItem\r\n  MassItem_Render = (v) => {\r\n    var field = this.Field;\r\n    var textVM = new TextVM();\r\n\r\n    const getVal = this.Group === cgt.info ?\r\n      () => {\r\n        var qI = v.GetValue(field, (val) => {\r\n          textVM.Content = val\r\n        }, false);\r\n        textVM.Content = qI.Value;\r\n      } :\r\n      () => {\r\n        textVM.Content = v.ValueDict.GetValue(field, 'raw', undefined, true)\r\n      }\r\n    getVal();\r\n\r\n    return <td key={this.id}>{textVM.Content}</td>\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n}","import { SelectVM } from \"../../../../../../select/SelectVM\"\r\nimport { PMData } from \"../../../../../single/model/PMData\"\r\nimport * as mif from '../../../../mass/field/MassItemField'\r\nimport * as mut from '../../../../mass/unit/MassUnitType'\r\nimport * as cgt from './Column_GroupType'\r\nimport * as rs from '../../../../../../text/TextRenderState';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { Column } from \"./Column\"\r\nimport { EntDelete } from \"../../../../../../delete/EntDelete\"\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport * as t_ut from '../table/Table_UseType'\r\n\r\nconst pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const get = (field, group, dict) => {\r\n  var qI = new Column();\r\n  qI.Field = field;\r\n  qI.Group = group;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetTitleSelect = (q) => {\r\n  var qI = new SelectVM();\r\n\r\n  switch (q.Group) {\r\n    case cgt.info:\r\n      qI.Items = q.Table.UseType === t_ut.input ?\r\n        pmData().MIF_Dict_ForInput : pmData().MIF_Dict_ForMassGroup\r\n      break;\r\n    case cgt.value:\r\n      qI.Items = pmData().MUT_Dict\r\n      break;\r\n  }\r\n\r\n  qI.TitleRender = (v) => v.Name;\r\n  qI.InitialItem = genUtil.SingleFilter(qI.Items,\r\n    (x) => x.Name === q.Title);\r\n\r\n  qI.OnSelectedItemChanged = (v) => {\r\n    q.Field = v.Value\r\n    q.RenderState = rs._default\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  var field = q.Field\r\n\r\n  switch (q.Group) {\r\n    case cgt.info:\r\n      return mif.GetName(field)\r\n    case cgt.value:\r\n      return mut.GetName(field)\r\n  }\r\n}\r\n\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}","import { ColumnGroup } from \"./ColumnGroup\"\r\nimport * as cgt from '../column/Column_GroupType'\r\nimport * as colUtil from '../column/ColumnUtil'\r\nimport * as mif from '../../../../mass/field/MassItemField'\r\nimport * as mut from '../../../../mass/unit/MassUnitType'\r\n\r\n// Instance\r\nexport const get = (group, dict) => {\r\n  var qI = new ColumnGroup();\r\n  qI.Group = group;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetTitle = (q) => {\r\n  switch (q.Group) {\r\n    case cgt.info:\r\n      return 'THÔNG TIN'\r\n    case cgt.value:\r\n      return 'GIÁ TRỊ'\r\n  }\r\n}\r\n\r\nexport const GetColumns = (q) => {\r\n  return q.Fields.map(x => {\r\n    return colUtil.get(x, q.Group, q)\r\n  })\r\n}\r\n\r\nexport const GetDefaultField = (q) => {\r\n  switch (q.Group) {\r\n    case cgt.info:\r\n      return mif.workItem;\r\n    case cgt.value:\r\n      return mut.each;\r\n  }\r\n}\r\n\r\n// Method\r\nexport const AddColumn = (q) => {\r\n  var qI = colUtil.get(q.DefaultField, q.Group, q);\r\n  q.Columns.push(qI)\r\n  return q;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport './Table.css'\r\nimport { Table } from './Table';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Table();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='es__thead'>\r\n            {/* Column Group */}\r\n            <tr>\r\n              {data.ColumnGroups.map(x => x.View)}\r\n            </tr>\r\n\r\n            {/* Column */}\r\n            <tr>\r\n              {data.ColumnGroups.map(x =>\r\n                x.Columns.map(x => x.View))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {/* Items */}\r\n            {data.Items ?\r\n              data.Items.map(x =>\r\n                <tr key={x._id}>\r\n                  {data.ColumnGroups.map(y =>\r\n                    y.Columns.map(z => z.MassItem_Render(x)))}\r\n                </tr>)\r\n              : <tr />}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","export const url = \"https://api.bimdev.vn/api/hbes_table\"","import { makeObservable, observable, action } from 'mobx';\r\nimport TableView from './TableView';\r\nimport * as util from './TableUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../../util/commandUtil'\r\nimport { url } from './TableUrl'\r\nimport { Button, message } from 'antd';\r\nimport { SaveFilled } from '@ant-design/icons';\r\nimport InputView from '../../../../../../input/InputView';\r\nimport { TextVM } from '../../../../../../text/TextVM';\r\nimport { PMDataVM } from '../../../../../single/form/PMDataVM';\r\nimport * as pct from '../../../../command/ProjectCommand'\r\nimport * as ut from './Table_UseType'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class Table {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      columnCount: observable,\r\n      columnGroups : observable\r\n    })\r\n  }\r\n\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Dict\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  SetItems = (v) => {\r\n    this.Dict.ModelItem.MassItems = v;\r\n  }\r\n\r\n  Refresh_Info = () => {\r\n    this.Infos = util.GetInfos(this)\r\n    this.Values = util.GetValues(this)\r\n  }\r\n\r\n  infos = undefined\r\n  get Infos() {\r\n    if (!this.infos) {\r\n      this.infos = util.GetDefaultInfos(this)\r\n    } return this.infos\r\n  } set Infos(v) {\r\n    this.infos = v;\r\n  }\r\n\r\n  get InfoCount() {\r\n    return this.Infos.length\r\n  }\r\n\r\n  values = undefined\r\n  get Values() {\r\n    if (!this.values) {\r\n      this.values = util.GetDefaultValues(this)\r\n    } return this.values\r\n  } set Values(v) {\r\n    this.values = v;\r\n  }\r\n\r\n  get ValueCount() {\r\n    return this.Values.length\r\n  }\r\n\r\n  Refresh_ColumnCount = () => {\r\n    this.ColumnCount = util.GetColumnCount(this)\r\n  }\r\n\r\n  columnCount = undefined\r\n  get ColumnCount() {\r\n    if (this.columnCount === undefined) {\r\n      this.columnCount = util.GetColumnCount(this)\r\n    } return this.columnCount\r\n  } set ColumnCount(v) {\r\n    this.columnCount = v;\r\n  }\r\n\r\n  get Tr_Style() {\r\n    var val = ((1 / this.ColumnCount) * 100).toFixed(1);\r\n    return {\r\n      width: val + '%'\r\n    }\r\n  }\r\n\r\n  columnGroups = undefined\r\n  get ColumnGroups() {\r\n    if (!this.columnGroups) {\r\n      this.columnGroups = util.GetColumnGroups(this)\r\n    } return this.columnGroups\r\n  } set ColumnGroups(v){\r\n    this.columnGroups = v;\r\n  }\r\n\r\n  GetColumnGroup = (group) => {\r\n    return genUtil.SingleFilter(\r\n      this.ColumnGroups,\r\n      (x) => x.Group === group\r\n    )\r\n  }\r\n\r\n  get ApiData() {\r\n    this.Refresh_Info()\r\n\r\n    var obj = {\r\n      _id: this._id,\r\n      infos: this.Infos,\r\n      values: this.Values\r\n    }\r\n\r\n    if (this.UseType === ut.input){\r\n      obj.dictId = this.Dict.ModelItem._id\r\n    }\r\n\r\n    // debugger\r\n    return obj;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    genUtil.SaveDatabase(this, url,\r\n      () => {\r\n        if (showMessage) {\r\n          message.success('save successfully!')\r\n        }\r\n        if (handle) {\r\n          handle();\r\n        }\r\n      });\r\n  }\r\n\r\n  save\r\n  get Save(){\r\n    if (!this.save){\r\n      this.save = util.GetSave(this)\r\n    } return this.save;\r\n  }\r\n  \r\n  // Paste\r\n  pasteContent\r\n  get PasteContent() {\r\n    return this.pasteContent\r\n  } set PasteContent(v) {\r\n    this.pasteContent = v;\r\n    if (v && v.length !== 0) {\r\n      this.PasteVM.Content = ''\r\n    }\r\n  }\r\n\r\n  pasteVM\r\n  get PasteVM() {\r\n    if (!this.pasteVM) {\r\n      var qI = this.pasteVM = new TextVM();\r\n      qI.Content = ''\r\n      qI.Placeholder = 'paste dữ liệu vào đây ...'\r\n      qI.onSetContent = (v) => this.PasteContent = v;\r\n    } return this.pasteVM;\r\n  }\r\n\r\n  OnPaste = (v) => {\r\n    var text = genUtil.GetPlainText(v);\r\n    var q1 = text.split('\\r\\n')\r\n    if (q1.length === 0 || (q1.length === 1 && q1[0].length === 0)) {\r\n      return;\r\n    }\r\n\r\n    var q2 = q1.map(x => x.split('\\t'));\r\n    // remove item cuối cùng thừa\r\n    var lastIndex = q2.length - 1;\r\n    if (q2[lastIndex].length === 1 && q2[lastIndex][0].length === 0) {\r\n      q2.splice(lastIndex, 1);\r\n    }\r\n\r\n    // Update Data\r\n    const handle_items = (items) => {\r\n      this.SetItems(items);\r\n      this.Dict.SaveMassItems();\r\n\r\n      this.PasteVM.Content = ''  \r\n    }\r\n\r\n    util.GetItems_FromPaste(this, q2, handle_items);\r\n  }\r\n\r\n  // View\r\n  get View() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get WrapperView() {\r\n    return <div>\r\n      {/* Tool */}\r\n      {comUtil.Validate(pct.edit) ?\r\n        <div className='es__table__tool__wrapper'>\r\n          <div className='f-ac'>\r\n            <Button type='primary' size='small'\r\n              onClick={this.Save}>\r\n              LƯU ĐẦU MỤC BẢNG\r\n            </Button>\r\n            {this.UseType === ut.input ?\r\n              <InputView store={this.PasteVM}\r\n                className='es__table__paste'\r\n                onPaste={this.OnPaste} />\r\n              : ''}\r\n          </div>\r\n        </div>\r\n        : ''}\r\n\r\n      {/* Table */}\r\n      <TableView store={this} />\r\n    </div>\r\n  }\r\n\r\n  // Refresh Columns\r\n  Refresh_Columns = (infos, values) => {\r\n    this.Infos = infos;\r\n    this.Values = values;\r\n    this.ColumnGroups = util.GetColumnGroups(this)\r\n    this.ColumnCount = util.GetColumnCount(this)\r\n  }\r\n}","import { makeObservable, observable, action, set } from 'mobx';\r\nimport * as massItemUtil from '../item/base/MassItemUtil'\r\nimport { message } from 'antd';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as util from './MassDetailVMUtil'\r\nimport Modal from 'antd/lib/modal/Modal';\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class MassDetailVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n    massItemUtil.getByViewDetail(v, (items) => {\r\n      this.Items = items;\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    this.MainMassType = util.GetMainMassType(this);\r\n    this.DetailTable.Items = v;\r\n  }\r\n\r\n  detailTable\r\n  get DetailTable() {\r\n    if (!this.detailTable) {\r\n      this.detailTable = util.GetTable(this);\r\n    }\r\n    return this.detailTable;\r\n  }\r\n\r\n  // Setting Data\r\n  MainMassType\r\n}","import { PMData } from \"../../../single/model/PMData\";\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as mt from '../MassType'\r\nimport * as tableUtil from '../../exportset/item/massitem_table/table/TableUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Property\r\nexport const GetTable = (q) => {\r\n  return tableUtil.get(q);\r\n}\r\n\r\nexport const GetMainMassType = (q) => {\r\n  var list = q.Items;\r\n  return !list || list.length === 0 ? mt.Concrete : list[0].MassType;\r\n}","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as api from '../../../../../../../util/apiUtil'\r\nimport { PMData } from '../../../../../single/model/PMData'\r\nimport * as mif from '../../../../mass/field/MassItemField'\r\nimport * as mut from '../../../../mass/unit/MassUnitType'\r\nimport * as cgt from '../column/Column_GroupType'\r\nimport * as colGroupUtil from '../columngroup/ColumnGroupUtil'\r\nimport { Table } from './Table'\r\nimport { url } from './TableUrl'\r\nimport MassItem from '../../../../mass/item/base/MassItem'\r\nimport * as ut from './Table_UseType'\r\nimport { ExportSetVM } from '../../base/ExportSetVM'\r\nimport { MassDetailVM } from '../../../../mass/detail/MassDetailVM'\r\nimport { PMDataVM } from '../../../../../single/form/PMDataVM'\r\n\r\nconst pmData = () => PMData.Instance\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = get(dict);\r\n  qI._id = data._id;\r\n  qI.Infos = data.infos;\r\n  qI.Values = data.values;\r\n  return qI;\r\n}\r\n\r\nexport const get = (dict) => {\r\n  var qI = new Table();\r\n\r\n  if (dict instanceof ExportSetVM) {\r\n    qI.UseType = ut.input\r\n  } else if (dict instanceof MassDetailVM) {\r\n    // Lưu vết trong pmData\r\n    pmData().MassDetail_Table = qI;\r\n\r\n    qI.UseType = ut.detail\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.Dict\r\n  if (host instanceof ExportSetVM) {\r\n    if (host.MassItems) {\r\n      setObj(host.MassItems)\r\n    }\r\n\r\n    genUtil.Add_2(\r\n      host.OnSet_MassItems_Func,\r\n      () => setObj(host.MassItems),\r\n      false\r\n    )\r\n  }\r\n}\r\n\r\nexport const GetDefaultInfos = (q) => {\r\n  return [mif.workItem, mif.level]\r\n}\r\n\r\nexport const GetInfos = (q) => {\r\n  return q.GetColumnGroup(cgt.info)\r\n    .Columns.map(x => x.Field);\r\n}\r\n\r\nexport const GetDefaultValues = (q) => {\r\n  return [mut.each]\r\n}\r\n\r\nexport const GetValues = (q) => {\r\n  return q.GetColumnGroup(cgt.value)\r\n    .Columns.map(x => x.Field);\r\n}\r\n\r\nexport const GetColumnGroups = (q) => {\r\n  var qInfo = colGroupUtil.get(cgt.info, q)\r\n  qInfo.Fields = q.Infos;\r\n\r\n  var qValue = colGroupUtil.get(cgt.value, q)\r\n  qValue.Fields = q.Values;\r\n\r\n  return [\r\n    qInfo, qValue\r\n  ]\r\n}\r\n\r\nexport const GetColumnCount = (q) => {\r\n  return q.ColumnGroups.reduce((a, b) => a + b.Columns.length, 0);\r\n}\r\n\r\n// Method\r\nexport const GetItems_FromPaste = (q, rawData, mainHandle) => {\r\n  q.Refresh_Info();\r\n\r\n  var infos = q.Infos;\r\n  var infoCount = infos.length\r\n  var values = q.Values;\r\n  var totalCount = infoCount + values.length;\r\n\r\n  var length = rawData.length\r\n  var massItems = []\r\n  var isHandleItem_Done\r\n  var isHandleInfo_Done\r\n\r\n  const handle = () => {\r\n    if (isHandleItem_Done && isHandleInfo_Done) {\r\n      if (mainHandle) {\r\n        mainHandle(massItems);\r\n      }\r\n    }\r\n  }\r\n\r\n  var item_i = 0;\r\n  const handle_item = () => {\r\n    item_i++;\r\n    if (item_i === length) {\r\n      isHandleItem_Done = true;\r\n      handle();\r\n    }\r\n  }\r\n\r\n  var info_i = 0;\r\n  const handle_itemInfo = () => {\r\n    info_i++;\r\n    if (info_i === length) {\r\n      isHandleInfo_Done = true;\r\n      handle();\r\n    }\r\n  }\r\n\r\n  rawData.forEach(x => {\r\n    var qI = new MassItem();\r\n    var infoDict = qI.Info = {}\r\n    var valueDict = qI.ValueDict\r\n    valueDict.Dict = qI;\r\n\r\n    // Khởi xướng trước value each = 1 \r\n    // cho đồng bộ các dữ liệu khác\r\n    valueDict.GetItem(mut.each).Value = 1;\r\n\r\n    // Truy xuất InfoValues và ValueValues\r\n    var q_infos = [...infos];\r\n    var infoValues = x.filter((y, i) => i < infoCount);\r\n    var valueValues = x.filter((y, i) => i >= infoCount && i < totalCount);\r\n\r\n    // Kiểm tra có Level, WorkItem field ko? nếu ko thì thêm undefine\r\n    var dbindexFields = [mif.level, mif.workItem]\r\n\r\n    dbindexFields.forEach(y => {\r\n      if (!q_infos.includes(y)) {\r\n        q_infos.push(y);\r\n        infoValues.push(undefined);\r\n      }\r\n    })\r\n\r\n    // Handle valueItem\r\n    var info_item_i = 0;\r\n    var info_length = infoValues.length\r\n    const handle_itemInfo_item = () => {\r\n      info_item_i++;\r\n      if (info_item_i === info_length) {\r\n        handle_itemInfo();\r\n      }\r\n    }\r\n\r\n    // Gán Info Value\r\n    for (let i = 0; i < infoValues.length; i++) {\r\n      var infoField = q_infos[i]\r\n      var infoVal = infoValues[i];\r\n\r\n      if (dbindexFields.includes(infoField)) {\r\n        const setInfo = (f, v) => qI[f] = v;\r\n\r\n        switch (infoField) {\r\n          case mif.level:\r\n            var host = pmData().CurrentProject.LevelDict;\r\n            host.GetLevel(infoVal, (item) => {\r\n              setInfo('Level_Obj' ,item);\r\n              handle_itemInfo_item();\r\n            })\r\n            break;\r\n          case mif.workItem:\r\n            var host = pmData().WorkItem_Dict;\r\n            host.GetItem(infoVal, (item) => {\r\n              setInfo('WorkItem_Obj',item);\r\n              handle_itemInfo_item();\r\n            })\r\n            break;\r\n        }\r\n      } else {\r\n        infoDict[infoField] = infoVal;\r\n        handle_itemInfo_item();\r\n      }\r\n    }\r\n\r\n    // Gán Value Value\r\n    for (let i = 0; i < valueValues.length; i++) {\r\n      var valueVal = valueValues[i];\r\n\r\n      if (!isNaN(valueVal)) {\r\n        valueDict.GetItem(values[i])\r\n          .Value = parseFloat(valueVal);\r\n      }\r\n    }\r\n\r\n    massItems.push(qI);\r\n    handle_item();\r\n  })\r\n}\r\n\r\n// Save\r\nexport const GetSave = (q) => {\r\n  switch (q.UseType) {\r\n    case ut.input:\r\n      return q.SaveDatabase\r\n    case ut.detail:\r\n      return pmDataVM().Mds_Dict_Dict.OpenSave\r\n  }\r\n}\r\n\r\n// Api\r\nexport const GetData = (apiData, handle) => {\r\n  var apiData = apiData ? apiData : {}\r\n  const apiFunc = () => api.post(`${url}/list`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data)\r\n      }\r\n    })\r\n}","export const view = 'view'\r\nexport const edit = 'edit'","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as inputUtil from '../../../../../../util/inputUtil'\r\nimport * as comUtil from '../../../../../../util/commandUtil'\r\n\r\nimport { ExportSetVM } from './ExportSetVM'\r\nimport { EntDelete } from '../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport { CheckCircleOutlined, CloseCircleOutlined, SaveFilled } from '@ant-design/icons';\r\nimport * as tableUtil from '../massitem_table/table/TableUtil';\r\nimport { SelectVM } from '../../../../../select/SelectVM';\r\nimport { TextVM } from '../../../../../text/TextVM';\r\nimport * as erf from '../base/ExportSet_RetrieveFrom'\r\nimport * as pct from '../../../project/base/ProjectCommandType'\r\n\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\n\r\nconst pmData = () => PMData.Instance;\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ExportSetVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetActiveTool = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Retrieve_WrapperView = () => !q.IsActive ?\r\n    <Button type='primary' size='small'\r\n      onClick={q.Set_Active}>\r\n      <CheckCircleOutlined />\r\n    </Button>\r\n    :\r\n    <Button type='primary' size='small'\r\n      onClick={q.UnSet_Active}\r\n      className='btn-warning'>\r\n      <CloseCircleOutlined />\r\n    </Button>\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Handle_MassItems = (q) => {\r\n  if (q.IsGet_MassItems) return undefined;\r\n  q.IsGet_MassItems = true;\r\n\r\n  const setObj = (data) => {\r\n    q.MassItems = data\r\n    q.IsGet_MassItems = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.MassItems) {\r\n    setObj(host.MassItems)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_MassItems_Func,\r\n    () => setObj(host.MassItems),\r\n    false\r\n  )\r\n}\r\n\r\nexport const Handle_MassItems_Table = (q) => {\r\n  if (q.IsGet_MassItems_Table) return undefined;\r\n  q.IsGet_MassItems_Table = true;\r\n\r\n  const setObj = (data) => {\r\n    q.MassItems_Table = data.length !== 0 ?\r\n      tableUtil.GetFromDb(data[0], q) : tableUtil.get(q)\r\n    q.IsGet_MassItems_Table = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  var apiData = {\r\n    dictId: host._id\r\n  }\r\n\r\n  tableUtil.GetData(apiData, (data) => {\r\n    setObj(data)\r\n  });\r\n}\r\n\r\nexport const GetMassType_Render = (q) => {\r\n  var qI = new TextVM();\r\n\r\n  const setObj = () => {\r\n    qI.Content = q.MassType.Name;\r\n  }\r\n\r\n  if (q.MassType) {\r\n    setObj();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// export const GetMassType_Select = (q) => {\r\n//   var qI = new SelectVM();\r\n//   qI.Items = mt.GetList();\r\n//   qI.InitialItem = q.TempMassType = q.MassType;\r\n//   qI.OnSelectedItemChanged = (v) => {\r\n//     q.TempMassType = v;\r\n//   }\r\n//   qI.OnSetOpen = (v) => {\r\n//     if (!v) {\r\n//       q.MassType_EditOK();\r\n//     }\r\n//   }\r\n\r\n//   return qI;\r\n// }\r\n\r\n// MassType\r\nexport const Handle_MassType = (q) => {\r\n  if (q.IsGet_MassType) return undefined;\r\n  q.IsGet_MassType = true;\r\n\r\n\r\n  const setObj = (data) => {\r\n    var list = data;\r\n\r\n    var massTypeId = q.massTypeId;\r\n    if (massTypeId) {\r\n      q.MassType = genUtil.SingleFilter(list, (x) => x.id === massTypeId);\r\n    } else {\r\n      q.MassType = list[0];\r\n    }\r\n\r\n    q.IsGet_MassType = false;\r\n  }\r\n\r\n  var host = pmDataVM().MassType_Dict.ListData;\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n}\r\n\r\nexport const GetMassType_Select = (q) => {\r\n  var qI = new SelectVM();\r\n\r\n  const setObj = (data) => {\r\n    var list = qI.Items = data;\r\n\r\n    const setObj2 = () => {\r\n      qI.InitialItem = q.MassType;\r\n    }\r\n\r\n    if (q.MassType) {\r\n      setObj2();\r\n    } else {\r\n      genUtil.Add_2(q.OnSet_MassType_Func,\r\n        setObj2)\r\n    }\r\n  }\r\n\r\n  var host = pmDataVM().MassType_Dict.ListData;\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n\r\n  qI.TitleRender = (v) => v.Name\r\n  qI.OnSelectedItemChanged = (v) => q.TempMassType = v;\r\n\r\n  qI.OnSetOpen = (v) => {\r\n    if (!v) {\r\n      q.MassType_EditOK();\r\n    }\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// View\r\nexport const GetRowView = (q) => {\r\n  return <tr className={`es__row ${q.ActiveStyle}`}\r\n    onMouseEnter={q.OnMouseEnter}\r\n    onMouseLeave={q.OnMouseLeave}>\r\n\r\n    <td\r\n      onMouseEnter={\r\n        () => inputUtil.Edit(q.NameVM, q.CheckCommand)}\r\n      onMouseLeave={\r\n        () => inputUtil.EditOK(q.NameVM)\r\n      }\r\n    >\r\n      {q.NameWrapper_View}</td>\r\n\r\n    {/* Input or Model */}\r\n    {q.RetrieveFrom === erf.input ?\r\n      <>\r\n        <td\r\n          onMouseEnter={q.MassType_Edit}\r\n          onMouseLeave={q.MassType_EditOK}\r\n        >{q.MassType_View}</td>\r\n        <td\r\n          onMouseEnter={\r\n            () => inputUtil.Edit(q.DescriptionVM, q.CheckCommand)}\r\n          onMouseLeave={\r\n            () => inputUtil.EditOK(q.DescriptionVM)}\r\n        >{q.DescriptionWrapper_View}</td>\r\n      </>\r\n      : <td>\r\n        {q.InfoView}\r\n      </td>\r\n    }\r\n\r\n    {/* Commands */}\r\n    <td>\r\n      <div className='f'>\r\n        {q.RetrieveFrom === erf.input ?\r\n          q.ActiveTool.View : ''}\r\n        {comUtil.Validate(pct.edit) ? q.DeleteVM.View : ''}\r\n      </div>\r\n    </td>\r\n  </tr>\r\n}\r\n\r\nexport const GetInfoView = (q) => {\r\n  return <table className='w-100p es__info__table'>\r\n    <tbody>\r\n      <tr>\r\n        <th>Mô tả:</th>\r\n        <td\r\n          onMouseEnter={\r\n            () => inputUtil.Edit(q.DescriptionVM, q.CheckCommand)}\r\n          onMouseLeave={\r\n            () => inputUtil.EditOK(q.DescriptionVM)}\r\n        >{q.DescriptionView}\r\n        </td>\r\n\r\n      </tr><tr>\r\n        <th>Nhân hệ số:</th>\r\n        <td\r\n          onMouseEnter={\r\n            () => inputUtil.Edit(q.Mass_MultiplyVM, q.CheckCommand)}\r\n          onMouseLeave={\r\n            () => inputUtil.EditOK(q.Mass_MultiplyVM)}\r\n        >{q.Mass_MultiplyVM.View}\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\n\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as inputUtil from '../../../../../../util/inputUtil'\r\nimport * as comUtil from '../../../../../../util/commandUtil'\r\n\r\nimport * as util from './ExportSetVMUtil'\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../text/EditableTextView';\r\nimport './ExportSet.css'\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport TextView from '../../../../../text/TextView';\r\nimport * as pct from '../../../command/ProjectCommand'\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as erf from './ExportSet_RetrieveFrom'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class ExportSetVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isActive: observable,\r\n      massItems: observable,\r\n      massItems_Table: observable,\r\n      renderState: observable,\r\n      MassType_RenderState: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get projectId() {\r\n    return this.ModelItem.projectId;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n    this.DescriptionVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = inputUtil.GetInput(this, 'Name', () => this.Save());\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get NameWrapper_View() {\r\n    return <div className='mgs__cell__wrapper'>\r\n      {this.NameView}\r\n    </div>\r\n  }\r\n\r\n  OnSet_MassType_Func = []\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      util.Handle_MassType(this)\r\n    }\r\n    return this.massType\r\n  } set MassType(v) {\r\n    this.massType = v;\r\n\r\n    if (v) {\r\n      this.massTypeId = v?.id;\r\n      this.MassType_Render.Content = v.Name;\r\n    }\r\n\r\n    genUtil.Handle(this.OnSet_MassType_Func,\r\n      (v) => this.OnSet_MassType_Func = v)\r\n  }\r\n\r\n  get massTypeId() {\r\n    return this.ModelItem.massTypeId;\r\n  } set massTypeId(v) {\r\n    this.ModelItem.massTypeId = v;\r\n  }\r\n\r\n  massType_Render\r\n  get MassType_Render() {\r\n    if (!this.massType_Render) {\r\n      this.massType_Render = util.GetMassType_Render(this)\r\n    } return this.massType_Render\r\n  }\r\n\r\n  massType_Select\r\n  get MassType_Select() {\r\n    if (!this.massType_Select) {\r\n      this.massType_Select = util.GetMassType_Select(this)\r\n    } return this.massType_Select\r\n  }\r\n\r\n  MassType_RenderState = rs._default\r\n\r\n  MassType_Edit = () => {\r\n    if (comUtil.Validate(pct.edit)) {\r\n      this.MassType_RenderState = rs.edit\r\n    }\r\n  }\r\n\r\n  MassType_EditOK = () => {\r\n    if (!this.MassType_Select.Open) {\r\n      this.MassType_RenderState = rs._default\r\n\r\n      if (this.TempMassType === this.MassType) return;\r\n      this.MassType = this.TempMassType;\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  get MassType_View() {\r\n    switch (this.MassType_RenderState) {\r\n      case rs._default:\r\n        return <TextView store={this.MassType_Render} />\r\n      case rs.edit:\r\n        return <SelectView store={this.MassType_Select} />\r\n    }\r\n  }\r\n\r\n  // Description\r\n  get Description() {\r\n    return this.ModelItem.Description;\r\n  } set Description(v) {\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      this.descriptionVM = inputUtil.GetInput(this, 'Description', () => this.Save());\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  get DescriptionView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.DescriptionVM} />\r\n  }\r\n\r\n  get DescriptionWrapper_View() {\r\n    return <div className='mgs__cell__wrapper'>\r\n      {this.DescriptionView}\r\n    </div>\r\n  }\r\n\r\n  get InfoView() {\r\n    return util.GetInfoView(this)\r\n  }\r\n\r\n  get RetrieveFrom() {\r\n    return this.ModelItem.RetrieveFrom\r\n  }\r\n\r\n  // Mass Multiply\r\n  get Mass_Multiply() {\r\n    return this.ModelItem.Mass_Multiply;\r\n  } set Mass_Multiply(v) {\r\n    this.ModelItem.Mass_Multiply = v;\r\n  }\r\n\r\n  mass_MultiplyVM\r\n  get Mass_MultiplyVM() {\r\n    if (!this.mass_MultiplyVM) {\r\n      this.mass_MultiplyVM = inputUtil.GetInput(this, 'Mass_Multiply', () => this.Save());\r\n    }\r\n    return this.mass_MultiplyVM;\r\n  }\r\n\r\n  // Project\r\n  get Project() {\r\n    return this.Dict.Project\r\n  }\r\n\r\n  // Active\r\n  isActive = false\r\n  get IsActive() {\r\n    return this.isActive\r\n  } set IsActive(v) {\r\n    this.isActive = v;\r\n  }\r\n\r\n  get ActiveStyle() {\r\n    return this.IsActive ? 'active' : ''\r\n  }\r\n\r\n  Set_Active = () => {\r\n    var dict\r\n    var currentField\r\n\r\n    switch (this.RetrieveFrom) {\r\n      case erf.model:\r\n        dict = this.Dict.ModelView;\r\n        currentField = \"CurrentItem\";\r\n        break;\r\n      case erf.input:\r\n        dict = this.Dict.InputView\r\n        currentField = \"TempCurrentItem\";\r\n        break;\r\n    }\r\n\r\n    if (dict[currentField]) {\r\n      dict[currentField].IsActive = false\r\n    }\r\n\r\n    dict[currentField] = this;\r\n    this.IsActive = true;\r\n  }\r\n\r\n  UnSet_Active = () => {\r\n    var dict\r\n    var currentField\r\n\r\n    switch (this.RetrieveFrom) {\r\n      case erf.model:\r\n        dict = this.Dict.ModelView;\r\n        currentField = \"CurrentItem\";\r\n        break;\r\n      case erf.input:\r\n        dict = this.Dict.InputView\r\n        currentField = \"TempCurrentItem\";\r\n        break;\r\n    }\r\n\r\n    dict[currentField] = undefined\r\n    this.IsActive = false;\r\n  }\r\n\r\n  activeTool\r\n  get ActiveTool() {\r\n    if (!this.activeTool) {\r\n      this.activeTool = util.GetActiveTool(this)\r\n    } return this.activeTool;\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return util.GetRowView(this)\r\n  }\r\n\r\n  // Save\r\n  Save = (handle) => {\r\n    this.ModelItem.Save(handle);\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n\r\n  // MassItem\r\n  OnSet_MassItems_Func = []\r\n\r\n  massItems = undefined\r\n  get MassItems() {\r\n    if (!this.massItems) {\r\n      util.Handle_MassItems(this)\r\n    } return this.massItems\r\n  } set MassItems(v) {\r\n    this.massItems = v;\r\n\r\n    genUtil.Handle(this.OnSet_MassItems_Func,\r\n      (v) => this.OnSet_MassItems_Func = v)\r\n  }\r\n\r\n  // MassItems_Table\r\n  massItems_Table = undefined\r\n  get MassItems_Table() {\r\n    if (!this.massItems_Table) {\r\n      util.Handle_MassItems_Table(this)\r\n    } return this.massItems_Table\r\n  } set MassItems_Table(v) {\r\n    this.massItems_Table = v;\r\n  }\r\n\r\n  // Save MassItems\r\n  SaveMassItems = () => {\r\n    this.ModelItem.SaveMassItems();\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n\r\n  CheckCommand = () => {\r\n    return this.Commands.includes(pct.edit)\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ExportSetVM } from '../item/base/ExportSetVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ExportSetVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ExportSet_DictVM } from '../dict/base/ExportSet_DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport * as erf from '../item/base/ExportSet_RetrieveFrom'\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ExportSet_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='es__thead'>\r\n            <tr>\r\n              <th className='es__table__name'>Tên</th>\r\n\r\n              {data.RetrieveFrom === erf.input ?\r\n                <th className='es__table__masstype'>Công tác</th>\r\n                : ''}\r\n\r\n              <th className='es__table__description'>\r\n                {data.RetrieveFrom === erf.input ?\r\n                  \"Mô tả\" : \"Thông tin\"}\r\n              </th>\r\n\r\n              <th className='es__table__command'></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items?.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ExportSet_DictVMUtil'\r\nimport TableView from '../../table/TableView';\r\nimport * as iUtil from '../../item/base/ExportSetVMUtil'\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as pct from '../../../command/ProjectCommand'\r\nimport * as erf from '../../item/base/ExportSet_RetrieveFrom'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class ExportSet_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      // Is_Modal_Visible: observable,\r\n      currentItem: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  get ModelItems(){\r\n    return this.Items ? this.Items.filter(x => x.RetrieveFrom === erf.model) : undefined\r\n  }\r\n\r\n  get InputItems(){\r\n    return this.Items ? this.Items.filter(x => x.RetrieveFrom === erf.input) : undefined\r\n  }\r\n\r\n  // AddItem = (v) => {\r\n  //   var list = this.Items;\r\n  //   if (list.length === this.ModelItem.Items.length) return\r\n\r\n  //   var obj = iUtil.get(v, this);\r\n  //   list.push(obj);\r\n  // }\r\n\r\n  AddItem = (retrieveFrom) => {\r\n    var item = this.ModelItem.AddItem(retrieveFrom);\r\n    var itemVM = iUtil.get(item, this);\r\n    \r\n    this.Items.push(itemVM);\r\n    return item;\r\n  }\r\n\r\n  // addVM\r\n  // get AddVM() {\r\n  //   if (!this.addVM) {\r\n  //     this.addVM = util.GetAddVM(this)\r\n  //   } return this.addVM;\r\n  // }\r\n\r\n  //\r\n  currentItem = undefined\r\n  get CurrentItem() {\r\n    return this.currentItem;\r\n  } set CurrentItem(v) {\r\n    this.currentItem = v;\r\n    this.ModelItem.CurrentItem = v?.ModelItem\r\n  }\r\n\r\n  TempCurrentItem\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get MainView() {\r\n    return <div className='f'>\r\n      {this.Commands.includes(pct.edit) ?\r\n        <div className='es__add'>\r\n          {this.AddVM.View}\r\n        </div>\r\n        : ''}\r\n      <div className='es__main f1'>\r\n        <TableView store={this} />\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  // View\r\n  // Is_Modal_Visible = false\r\n\r\n  // get ModalView() {\r\n  //   return util.GetModalView(this)\r\n  // }\r\n\r\n  // get PickView() {\r\n  //   return util.GetPickView(this)\r\n  // }\r\n\r\n  modelView\r\n  get ModelView(){\r\n    if (!this.modelView){\r\n      this.modelView = util.GetModelView(this);\r\n    } return this.modelView\r\n  }\r\n\r\n  inputView\r\n  get InputView(){\r\n    if (!this.inputView){\r\n      this.inputView = util.GetInputView(this);\r\n    } return this.inputView;\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ViewUtil'\r\nimport TableView from '../../table/TableView';\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as pct from '../../../command/ProjectCommand'\r\nimport * as erf from '../../item/base/ExportSet_RetrieveFrom'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class View {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      currentItem: observable,\r\n      Is_Modal_Visible: observable,\r\n    })\r\n  }\r\n\r\n  RetrieveFrom\r\n\r\n  // Item\r\n  get Items() {\r\n    return util.GetItems(this);\r\n  }\r\n\r\n  TempCurrentItem\r\n\r\n  currentItem = undefined\r\n  get CurrentItem() {\r\n    return this.currentItem;\r\n  } set CurrentItem(v) {\r\n    this.currentItem = v;\r\n  }\r\n\r\n  addVM\r\n  get AddVM() {\r\n    if (!this.addVM) {\r\n      this.addVM = util.GetAddVM(this)\r\n    } return this.addVM;\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n\r\n  // View\r\n  get Table_WrapperView() {\r\n    return <div className='f'>\r\n      {this.Commands.includes(pct.edit) ?\r\n        <div className='es__add'>\r\n          {this.AddVM.View}\r\n        </div>\r\n        : ''}\r\n      <div className='es__main f1'>\r\n        <TableView store={this} />\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  // Modal\r\n  Is_Modal_Visible = false\r\n\r\n  get ModalView() {\r\n    return util.GetModalView(this)\r\n  }\r\n  \r\n  // Pick\r\n  get PickView() {\r\n    return util.GetPickView(this)\r\n  }\r\n\r\n  get View() {\r\n    switch (this.RetrieveFrom) {\r\n      case erf.model:\r\n        return this.Table_WrapperView\r\n      case erf.input:\r\n        return <>\r\n          <div className='es__wrapper'>\r\n            <div className='es__pick__wrapper'>\r\n              <div className='f'>\r\n                {this.PickView}\r\n              </div>\r\n              {this.ModalView}\r\n            </div>\r\n            <div className='es__render__wrapper'>\r\n              {this.CurrentItem &&\r\n                this.CurrentItem.MassItems_Table ?\r\n                this.CurrentItem.MassItems_Table.WrapperView\r\n                : ''}\r\n            </div>\r\n          </div>\r\n        </>\r\n    }\r\n  }\r\n}","import { View } from \"./View\";\r\nimport * as erf from '../../item/base/ExportSet_RetrieveFrom'\r\nimport { EntDelete } from \"../../../../../delete/EntDelete\";\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { TextVM } from \"../../../../../text/TextVM\";\r\nimport InputView from \"../../../../../input/InputView\";\r\nimport { Button, message } from \"antd\";\r\nimport { PlusCircleOutlined } from \"@ant-design/icons\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\n\r\n// Instance\r\nexport const get = (erf, dict) => {\r\n  var qI = new View();\r\n\r\n  qI.Dict = dict;\r\n  qI.RetrieveFrom = erf;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  var qI\r\n\r\n  switch (q.RetrieveFrom) {\r\n    case erf.model:\r\n      qI = q.Dict.ModelItems;\r\n      break;\r\n    case erf.input:\r\n      qI = q.Dict.InputItems;\r\n      break\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetAddVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  var nameVM = new TextVM();\r\n  nameVM.Placeholder = 'tên bảng ...'\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận thêm bảng?'\r\n\r\n  qI.OnPre_ShowHover = () => {\r\n    nameVM.Content = undefined\r\n  }\r\n\r\n  // qI.Modal_InfoView = <InputView store={nameVM} />\r\n  qI.Modal_ContentView = <div className='f-ac'>\r\n    {/* {qI.Modal_InfoView} */}\r\n    {qI.Modal_ButtonView}\r\n  </div>\r\n\r\n  qI.ShowHover_Button = <Button type='primary' size='small'\r\n    className='btn-success'\r\n    onClick={qI.Show_Hover}>\r\n    <PlusCircleOutlined/>\r\n  </Button>\r\n\r\n  qI.OnPreRun = () => {\r\n    // if (!nameVM.Content || nameVM.Content.length === 0) {\r\n    //   qI.IsRun_Cancel = true\r\n    //   message.warn('Vui lòng nhập tên bảng!');\r\n    // }\r\n  }\r\n\r\n  qI.OnRun = () => {\r\n    q.Dict.AddItem(q.RetrieveFrom);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPickView = (q) => {\r\n  var content = q.CurrentItem ? q.CurrentItem.Name : '(none)'\r\n  var click = () => {\r\n    q.Is_Modal_Visible = true\r\n    if (q.TempCurrentItem) {\r\n      q.TempCurrentItem.UnSet_Active();\r\n    }\r\n  }\r\n\r\n  return <Button type='primary'\r\n    onClick={click}>\r\n    <div className='f'>\r\n      <div>CHỌN BẢNG:</div>\r\n      <div className='es__pick__current'>{content}</div>\r\n    </div>\r\n  </Button>\r\n}\r\n\r\n\r\nexport const GetModalView = (q) => {\r\n  var title = 'CHỌN BẢNG THỐNG KÊ'\r\n\r\n  const hideVisible = () => {\r\n    q.Is_Modal_Visible = false\r\n  }\r\n\r\n  const modalOK = () => {\r\n    q.Is_Modal_Visible = false\r\n    q.CurrentItem = q.TempCurrentItem\r\n  }\r\n\r\n  return <Modal title={title} visible={q.Is_Modal_Visible}\r\n    width={1000}\r\n    className='es__modal'\r\n    onCancel={hideVisible}\r\n    footer={\r\n      <>\r\n        <Button type='primary' size='small'\r\n          onClick={modalOK}>ok</Button>\r\n        <Button type='text' size='small'\r\n          onClick={hideVisible}>cancel</Button>\r\n      </>\r\n    }>\r\n    <div>\r\n      {q.Table_WrapperView}\r\n    </div>\r\n  </Modal>\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { ExportSet_DictVM } from \"./ExportSet_DictVM\";\r\nimport * as iUtil from '../../item/base/ExportSetVMUtil'\r\nimport ProjectVM from \"../../../project/base/ProjectVM\";\r\nimport { EntDelete } from '../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { TextVM } from '../../../../../text/TextVM';\r\nimport InputView from '../../../../../input/InputView';\r\nimport * as viewUtil from '../view/ViewUtil'\r\nimport { Button, message } from 'antd';\r\nimport { PlusCircleOutlined, SaveFilled } from '@ant-design/icons';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport './ExportSet_Dict.css'\r\nimport * as erf from '../../item/base/ExportSet_RetrieveFrom'\r\n\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ExportSet_DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  if (dict instanceof ProjectVM) {\r\n    qI.Project = dict;\r\n  }\r\n\r\n  // q.OnAddItem = (v) => qI.AddItem(v)\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}\r\n\r\n// export const GetAddVM = (q) => {\r\n//   var qI = new EntDelete();\r\n\r\n//   var nameVM = new TextVM();\r\n//   nameVM.Placeholder = 'tên bảng ...'\r\n\r\n//   qI.ToggleType = d_tt.manual\r\n//   qI.Title = 'Xác nhận thêm bảng?'\r\n\r\n//   qI.OnPre_ShowHover = () => {\r\n//     nameVM.Content = undefined\r\n//   }\r\n\r\n//   qI.Modal_InfoView = <InputView store={nameVM} />\r\n//   qI.Modal_ContentView = <div className='f-ac'>\r\n//     {qI.Modal_InfoView}\r\n//     {qI.Modal_ButtonView}\r\n//   </div>\r\n\r\n//   qI.ShowHover_Button = <Button type='primary' size='small'\r\n//     className='btn-success'\r\n//     onClick={qI.Show_Hover}>\r\n//     <PlusCircleOutlined />\r\n//   </Button>\r\n\r\n//   qI.OnPreRun = () => {\r\n//     if (!nameVM.Content || nameVM.Content.length === 0) {\r\n//       qI.IsRun_Cancel = true\r\n//       message.warn('Vui lòng nhập tên bảng!');\r\n//     }\r\n//   }\r\n\r\n//   qI.OnRun = () => {\r\n//     q.ModelItem.NewItem(nameVM.Content);\r\n//   }\r\n\r\n//   return qI;\r\n// }\r\n\r\n// export const GetPickView = (q) => {\r\n//   var content = q.CurrentItem ? q.CurrentItem.Name : '(none)'\r\n//   var click = () => {\r\n//     q.Is_Modal_Visible = true\r\n//     if (q.TempCurrentItem) {\r\n//       q.TempCurrentItem.UnSet_Active();\r\n//     }\r\n//   }\r\n\r\n//   return <Button type='primary'\r\n//     onClick={click}>\r\n//     <div className='f'>\r\n//       <div>CHỌN BẢNG:</div>\r\n//       <div className='es__pick__current'>{content}</div>\r\n//     </div>\r\n//   </Button>\r\n// }\r\n\r\n\r\n// export const GetModalView = (q) => {\r\n//   var title = 'CHỌN BẢNG THỐNG KÊ'\r\n\r\n//   const hideVisible = () => {\r\n//     q.Is_Modal_Visible = false\r\n//   }\r\n\r\n//   const modalOK = () => {\r\n//     q.Is_Modal_Visible = false\r\n//     q.CurrentItem = q.TempCurrentItem\r\n//   }\r\n\r\n//   return <Modal title={title} visible={q.Is_Modal_Visible}\r\n//     width={1000}\r\n//     className='es__modal'\r\n//     onCancel={hideVisible}\r\n//     footer={\r\n//       <>\r\n//         <Button type='primary' size='small'\r\n//           onClick={modalOK}>ok</Button>\r\n//         <Button type='text' size='small'\r\n//           onClick={hideVisible}>cancel</Button>\r\n//       </>\r\n//     }>\r\n//     <div>\r\n//       {q.MainView}\r\n//     </div>\r\n//   </Modal>\r\n// }\r\n\r\nexport const GetModelView = (q) => {\r\n  return viewUtil.get(erf.model, q);\r\n}\r\n\r\nexport const GetInputView = (q) => {\r\n  return viewUtil.get(erf.input, q);\r\n}","import * as phaseDictVMUtil from '../../phase/dict/Phase_DictVMUtil'\r\nimport ProjectVM from \"./ProjectVM\";\r\nimport * as levelSettingUtil from '../../setting/level/base/LevelSettingVMUtil'\r\nimport * as typicalLevelUtil from '../../setting/typicallevel/base/TypicalLevelSettingVMUtil'\r\nimport * as exportSetDictUtil from '../../exportset/dict/base/ExportSet_DictVMUtil'\r\n\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as inputUtil from '../../../../../util/inputUtil'\r\nimport * as comUtil from '../../../../../util/commandUtil'\r\nimport * as dragUtil from '../../../../../util/dragUtil'\r\n\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { DragOutlined } from \"@ant-design/icons\";\r\nimport { EntDelete } from '../../../../delete/EntDelete';\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new ProjectVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPhase_DictVM = (q) => {\r\n  var phaseDict = q.ModelItem.Phase_Dict;\r\n  return phaseDictVMUtil.get(phaseDict);\r\n}\r\n\r\nexport const GetExportSet_Dict = (q) => {\r\n  return exportSetDictUtil.get(q.ModelItem.ExportSet_Dict, q)\r\n}\r\n\r\n// LevelSetting\r\nexport const Handle_LevelSetting = (q) => {\r\n  if (q.IsGet_LevelSetting) return undefined\r\n  q.IsGet_LevelSetting = true;\r\n\r\n  const setObj = (v) => {\r\n    q.LevelSetting = levelSettingUtil.get(v, q);\r\n  }\r\n\r\n  var qI = q.ModelItem;\r\n  if (qI.LevelSetting) {\r\n    setObj(qI.LevelSetting)\r\n  } else {\r\n    genUtil.Add_2(\r\n      qI.OnSet_LevelSetting_Func_Dict,\r\n      () => {\r\n        setObj(qI.LevelSetting)\r\n      },\r\n      false)\r\n  }\r\n}\r\n\r\n// TypicalLevelSetting\r\nexport const GetTypicalLevelSetting_Func = (model, project) => {\r\n  return typicalLevelUtil.get(model, project);\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    // project.OnGetTypicalLevelSetting_Funcs.push(() =>\r\n    //   q.TypicalLevelSetting = GetTypicalLevelSetting_Func(project.TypicalLevelSetting, q));\r\n\r\n    genUtil.Add_2(\r\n      project.OnGetTypicalLevelSetting_Func_Dict,\r\n      () =>\r\n        q.TypicalLevelSetting = GetTypicalLevelSetting_Func(project.TypicalLevelSetting, q),\r\n      false\r\n    )\r\n  }\r\n}\r\n\r\nexport const GetTypicalLevelSetting_ForEdit = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting_ForEdit;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    // project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n    //   q.TypicalLevelSetting_ForEdit = GetTypicalLevelSetting_Func(project.TypicalLevelSetting_ForEdit, q)\r\n    // });\r\n\r\n    genUtil.Add_2(\r\n      project.OnGetTypicalLevelSetting_Func_Dict,\r\n      () =>\r\n        q.TypicalLevelSetting_ForEdit = GetTypicalLevelSetting_Func(project.TypicalLevelSetting_ForEdit, q),\r\n      false\r\n    )\r\n  }\r\n}\r\n\r\n// Commands\r\nexport const Handle_Commands = (q) => {\r\n  if (q.IsGet_Commands) return undefined;\r\n  q.IsGet_Commands = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Commands = data\r\n    q.IsGet_Commands = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Commands) {\r\n    setObj(host.Commands)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Commands_Func,\r\n    () => setObj(host.Commands),\r\n    false\r\n  )\r\n}\r\n\r\n// Delete\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = 'manual'\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// View\r\nexport const GetRowView = (q, i) => {\r\n  return <Draggable key={q.id} draggableId={q.id} index={i}>\r\n    {(provided, snapshot) =>\r\n      <tr {...provided.draggableProps} ref={provided.innerRef}\r\n        style={dragUtil.getItemStyle(\r\n          snapshot.isDragging,\r\n          provided.draggableProps.style\r\n        )}>\r\n        <td {...provided.dragHandleProps}\r\n          className='move-td'>\r\n          <DragOutlined />\r\n        </td>\r\n        {/* Name */}\r\n        <td\r\n          onMouseEnter={\r\n            () => inputUtil.Edit(q.NameVM, () => comUtil.Validate('edit'))}\r\n          onMouseLeave={\r\n            () => inputUtil.EditOK(q.NameVM)\r\n          }\r\n        >{q.NameView}</td>\r\n\r\n        {/* Code */}\r\n        <td\r\n          onMouseEnter={\r\n            () => inputUtil.Edit(q.CodeVM, () => comUtil.Validate('edit'))}\r\n          onMouseLeave={\r\n            () => inputUtil.EditOK(q.CodeVM)\r\n          }\r\n        >{q.CodeView}</td>\r\n\r\n        {/* Tester */}\r\n        {comUtil.Validate('admin') ?\r\n          <td className='text-center'>\r\n            {q.FortestVM.View}\r\n          </td> : undefined}\r\n\r\n        {/* Commands */}\r\n        <td>\r\n          <div className='f-jc'>\r\n            <div className='f'>\r\n              {comUtil.Validate('edit') ? q.DeleteVM.View : ''}\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    }\r\n  </Draggable>\r\n}","import { LevelSettingVM } from './LevelSettingVM'\r\nimport * as dataUtil from '../data/LevelSettingDataVMUtil'\r\n\r\nexport const get = (q, project) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new LevelSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Project = project;\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataUtil.get(data, qI);\r\n  }  \r\n\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport './Table.css'\r\nimport { Project_DictVM } from '../dict/Project_DictVM';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport * as itemUtil from '../base/ProjectVMUtil'\r\n\r\nimport * as comUtil from '../../../../../util/commandUtil'\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Project_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    console.log(`project count : ${data.Items?.length}`)\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='es__thead'>\r\n            <tr>\r\n              <th className='mt__table__move'></th>\r\n              <th className='project__table__name text-center'>Tên</th>\r\n              <th className='text-center'>Mã dự án</th>\r\n\r\n              {comUtil.Validate('admin') ?\r\n                <th className='project__table__fortest text-center'>For test</th>\r\n                : undefined}\r\n\r\n              <th className='mt__table__command'></th>\r\n            </tr>\r\n          </thead>\r\n\r\n          <DragDropContext onDragEnd={data.OnDragEnd}>\r\n            <Droppable droppableId='project-dict'>\r\n              {(provided) =>\r\n                <tbody {...provided.droppableProps} ref={provided.innerRef}>\r\n                  {data.Items.map((x, i) => itemUtil.GetRowView(x, i))}\r\n                  {provided.placeholder}\r\n                </tbody>\r\n              }\r\n            </Droppable>\r\n          </DragDropContext>\r\n\r\n          {/* <tbody>\r\n            {data.Items?.map(x => x.RowView)}\r\n          </tbody> */}\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Project_DictVMUtil'\r\nimport './Project_Dict.css'\r\nimport TableView from '../table/TableView'\r\nimport * as itemUtil from '../base/ProjectVMUtil'\r\n\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../util/commandUtil'\r\nimport { Button } from 'antd';\r\n\r\nexport class Project_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this);\r\n    } return this.items;\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    this.GetItemsDone = true;\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  set GetItemsDone(v) {\r\n    if (this.OnGetItemsDone) {\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = this.ModelItem.AddItem();\r\n    var itemVM = itemUtil.get(item, this);\r\n\r\n    this.Items.push(itemVM);\r\n    return itemVM;\r\n  }\r\n\r\n  // Select\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      this.selectVM = util.GetSelectVM(this)\r\n    } return this.selectVM;\r\n  }\r\n\r\n  get SelectView() {\r\n    return <div className='projectdict__select'>\r\n      {this.SelectVM.View}\r\n    </div>\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get View() {\r\n    return <div className='f'>\r\n      {comUtil.Validate('edit') ?\r\n        <div className='es__add'>\r\n          <Button type='primary' size='small'\r\n            className='btn-success addproject'\r\n            onClick={this.AddItem}>+</Button>\r\n        </div>\r\n        : ''}\r\n      <div className='es__main f1'>\r\n        <TableView store={this} />\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  // Move\r\n  Move = (i1, i2) => {\r\n    var list = this.Items;\r\n    genUtil.MoveItem(list, i1, i2);\r\n\r\n    this.ModelItem.Move(i1, i2);\r\n  }\r\n\r\n  Insert = (i1, i2) => {\r\n    var list = this.Items;\r\n    genUtil.InsertItem(list, i1, i2);\r\n\r\n    this.ModelItem.Insert(i1, i2);\r\n  }\r\n\r\n  OnDragEnd = (res) => {\r\n    if (!res.destination) return;\r\n\r\n    var i1 = res.source.index;\r\n    var i2 = res.destination.index;\r\n\r\n    this.Insert(i1, i2);\r\n  }\r\n}","import { SelectVM } from '../../../../select/SelectVM';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport * as itemVMUtil from '../base/ProjectVMUtil'\r\nimport { Project_DictVM } from \"./Project_DictVM\";\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport const get = (q) => {\r\n  var qI = new Project_DictVM();\r\n\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (v) => {\r\n    q.Items = v.map(x => itemVMUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var qI = q.ModelItem;\r\n  if (qI.Items && qI.Items.length !== 0) {\r\n    setObj(qI.Items);\r\n  } \r\n  // else {\r\n  //   genUtil.Add_2(qI.OnSet_Items_Func, \r\n  //     () => setObj(qI.Items));\r\n  // }\r\n\r\n  genUtil.Add_2(qI.OnSet_Items_Func, \r\n    () => setObj(qI.Items), false);\r\n}\r\n\r\nexport const GetSelectVM = (q) => {\r\n  var qI = new SelectVM();\r\n  q.Placeholder = \"Chọn dự án\";\r\n\r\n  const setObj = () => {\r\n    var list = qI.Items = q.Items;\r\n    qI.TitleRender = (item) => item.Name;\r\n\r\n    qI.OnSelectedItemChanged = (v) => {\r\n      pmDataVM().ProjectComp.ProjectVM = v;\r\n    }\r\n\r\n    qI.SetValue(list[0]);\r\n  }\r\n\r\n  if (q.Items) {\r\n    setObj();\r\n  } else {\r\n    genUtil.Add_2(q.OnSet_Items_Func,\r\n      setObj)\r\n  }\r\n\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport MassItem_Dict from \"./MassItem_Dict\";\r\nimport { Spin } from \"antd\";\r\nimport TextView from \"../../../../../text/TextView\";\r\nimport './MassItem_Dict.css'\r\n\r\nclass MassItem_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassItem_Dict();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.IsDataPending ?\r\n          <div className='f-jc'>\r\n            <div>\r\n              <Spin />\r\n              <TextView store={data.LoadingSpinTipVM} />\r\n            </div>\r\n          </div> \r\n          :\r\n          <div className='f'>\r\n            {data.MassTable?.View}\r\n            <div className='massdict__forgewrapper f1'>\r\n            {data.Forge?.View}\r\n            </div>\r\n          </div>\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassItem_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport MultiSelectView from '../../../../../select/MultiSelectView'\r\nimport CheckboxView from \"../../../../../checkbox/CheckboxView\";\r\nimport { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MassItem_DictView from \"../../item/base/MassItem_DictView\";\r\nimport * as comUtil from '../../../../../../util/commandUtil'\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nconst { Option } = Select;\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass MassResultCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = pmDataVM().MassResultCompVM\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.IsShowProjectSelect ?\r\n          <MultiSelectView store={data.ProjectSelectVM} /> : ''}\r\n\r\n        {comUtil.Validate([pct.view, pct.edit]) ?\r\n          <>\r\n            {data.CanHavePhase ?\r\n              <>\r\n                <CheckboxView store={data.IsShowPhaseSelectVM} />\r\n                {data.IsHavePhase ?\r\n                  <MultiSelectView store={data.PhaseSelectVM} />\r\n                  : ''}\r\n              </>\r\n              : ''}\r\n\r\n            <div style={{ marginTop: 8 }} >\r\n              {pmDataVM().Mgs_Dict_Dict.Pick_MGS_View}\r\n              {pmDataVM().Mgs_Dict_Dict.ModalView}\r\n            </div>\r\n\r\n            <Button style={{ marginTop: 8 }} onClick={data.GetMassData}\r\n              size='middle' type='primary'>GET DATA</Button>\r\n            <div style={{ marginTop: 15 }}>\r\n              <MassItem_DictView store={data.MassItem_Dict} />\r\n            </div>\r\n          </>\r\n          : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassResultCompView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassResultCompVMUtil'\r\nimport * as multiSelectVMUtil from '../../../../../select/MultiSelectVMUtil'\r\nimport * as checkboxVMUtil from '../../../../../checkbox/CheckboxVMUtil'\r\nimport * as textUtil from '../../../../../text/TextVMUtil'\r\nimport { Link } from 'react-router-dom';\r\nimport { Popover } from 'antd';\r\nimport MassResultCompView from './MassResultCompView';\r\n\r\nexport default class MassResultCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsShowProjectSelect: observable,\r\n      CanHavePhase: observable,\r\n      isHavePhase: observable,\r\n      // IsDataPending: observable,\r\n      massGroupSetting_Dict : observable,\r\n      canEdit_Site : observable\r\n    })\r\n  }\r\n\r\n  projects = undefined\r\n  get Projects() {\r\n    if (!this.projects) {\r\n      this.projects = this.ModelItem.Projects;\r\n    }\r\n    return this.projects;\r\n  }\r\n  set Projects(v) {\r\n    this.projects = v;\r\n    this.ModelItem.Projects = v;\r\n  }\r\n\r\n  projectVMs\r\n  get ProjectVMs() {\r\n    if (!this.projectVMs) {\r\n      this.projectVMs = util.GetProjectVMs(this);\r\n    }\r\n    return this.projectVMs;\r\n  }\r\n  set ProjectVMs(v) {\r\n    this.projectVMs = v;\r\n    this.Projects = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  projectVMStorageList\r\n  get ProjectVMStorageList() {\r\n    if (!this.projectVMStorageList) {\r\n      this.projectVMStorageList = util.GetProjectVMStorageList(this);\r\n    }\r\n    return this.projectVMStorageList;\r\n  }\r\n  set ProjectVMStorageList(v) {\r\n    this.projectVMStorageList = v;\r\n\r\n    this.projectVMs = util.GetProjectVMs(this);\r\n\r\n    var selectVM = this.ProjectSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.projectVMs;\r\n  }\r\n\r\n  projectSelectOpen\r\n  get ProjectSelectOpen(){\r\n    if (this.projectSelectOpen === undefined){\r\n      this.projectSelectOpen = this.ProjectSelectVM.Open;\r\n    }\r\n    return this.projectSelectOpen;\r\n  }\r\n  set ProjectSelectOpen(v){\r\n    this.projectSelectOpen = v;\r\n    this.ProjectPopoverState.Content = util.GetProjectPopoverStateValue(this);\r\n  }\r\n\r\n  projectPopoverState\r\n  get ProjectPopoverState(){\r\n    if (!this.projectPopoverState){\r\n      this.projectPopoverState = textUtil.get(util.GetProjectPopoverStateValue(this));\r\n    }\r\n    return this.projectPopoverState;\r\n  }\r\n\r\n  projectSelectVM\r\n  get ProjectSelectVM() {\r\n    if (!this.projectSelectVM) {\r\n      var list = this.ProjectVMStorageList ? this.ProjectVMStorageList : [];\r\n      var obj = this.projectSelectVM = multiSelectVMUtil.get(list, this.ProjectVMs);\r\n      obj.Placeholder = 'chọn dự án'\r\n      obj.TitleRender = (item) => <Popover trigger={this.ProjectPopoverState.Content}\r\n        placement=\"topLeft\"\r\n        content={\r\n          <a target='_blank' rel=\"noreferrer\"\r\n            // href={`/#/project/${item._id}`} \r\n            href={item.Url}\r\n            >View project</a>\r\n        }\r\n      >\r\n        {item.DisplayContent}\r\n      </Popover>\r\n\r\n      obj.OnSelectedItemChanged = (v) => this.ProjectVMs = v;\r\n      obj.OnSetOpen = (v) => this.ProjectSelectOpen = v;\r\n    }\r\n    return this.projectSelectVM;\r\n  }\r\n\r\n  IsShowProjectSelect = true\r\n\r\n  phases = undefined\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = this.ModelItem.Phases;\r\n    }\r\n    return this.phases;\r\n  }\r\n  set Phases(v) {\r\n    this.phases = v;\r\n    this.ModelItem.Phases = v;\r\n  }\r\n\r\n  phaseVMs\r\n  get PhaseVMs() {\r\n    // if (!this.phaseVMs) {\r\n    //   this.phaseVMs = util.GetPhaseVMs(this);\r\n    // }\r\n    return this.phaseVMs;\r\n  } set PhaseVMs(v) {\r\n    this.phaseVMs = v;\r\n    this.Phases = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict() {\r\n    if (!this.massItem_Dict) {\r\n      this.massItem_Dict = this.ModelItem.MassItem_Dict;\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  // phaseVMStorageList\r\n  // get PhaseVMStorageList() {\r\n  //   return this.phaseVMStorageList;\r\n  // }\r\n  // set PhaseVMStorageList(v) {\r\n  //   this.phaseVMStorageList = v;\r\n\r\n  //   this.phaseVMs = util.GetPhaseVMs(this);\r\n\r\n  //   var selectVM = this.PhaseSelectVM;\r\n  //   selectVM.Items = v;\r\n  //   selectVM.InitialItems = this.phaseVMs;\r\n  // }\r\n\r\n  phaseSelectVM\r\n  get PhaseSelectVM() {\r\n    if (!this.phaseSelectVM) {\r\n      this.phaseSelectVM = util.Get_PhaseSelectVM(this)\r\n\r\n      // var list = this.PhaseVMStorageList ? this.PhaseVMStorageList : [];\r\n      // var obj = this.phaseSelectVM = multiSelectVMUtil.get(list, this.PhaseVMs);\r\n      // obj.Placeholder = 'chọn version'\r\n      // obj.OnSelectedItemChanged = (v) => this.PhaseVMs = v;\r\n    }\r\n    return this.phaseSelectVM;\r\n  }\r\n\r\n  CanHavePhase = false\r\n\r\n  isHavePhase = undefined\r\n  get IsHavePhase() {\r\n    if (!this.isHavePhase) {\r\n      this.isHavePhase = this.ModelItem.IsHavePhase;\r\n    }\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v) {\r\n    this.isHavePhase = v;\r\n    this.ModelItem.IsHavePhase = v;\r\n  }\r\n\r\n  isShowPhaseSelectVM\r\n  get IsShowPhaseSelectVM() {\r\n    if (!this.isShowPhaseSelectVM) {\r\n      var obj = this.isShowPhaseSelectVM\r\n        = checkboxVMUtil.get(\"So sánh các version\", this.IsHavePhase);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHavePhase = v;\r\n      };\r\n    }\r\n    return this.isShowPhaseSelectVM;\r\n  }\r\n\r\n  // function\r\n  GetMassData = () => {\r\n    // CanEdit Site\r\n    this.CanEdit_Site = util.GetCanEdit_Site(this)\r\n    \r\n    this.IsDataPending = true;\r\n    this.HandledRatio = 0;\r\n    this.ModelItem.GetMassData();\r\n  }\r\n\r\n  // MassGroupSetting\r\n  massGroupSetting_Dict = undefined\r\n  get MassGroupSetting_Dict(){\r\n    if (!this.massGroupSetting_Dict){\r\n      util.Handle_MassGroupSetting_Dict(this)\r\n    }return this.massGroupSetting_Dict\r\n  } set MassGroupSetting_Dict(v){\r\n    this.massGroupSetting_Dict = v;\r\n  }\r\n\r\n  // Edit Site\r\n  canEdit_Site = undefined\r\n  get CanEdit_Site(){\r\n    return this.canEdit_Site\r\n  } set CanEdit_Site(v){\r\n    this.canEdit_Site = v;\r\n  }\r\n\r\n  // View\r\n  get View(){\r\n    return <MassResultCompView store={this}/>\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\nimport MassResultCompVM from \"./MassResultCompVM\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { MultiSelectVM } from \"../../../../../select/MultiSelectVM\";\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, isfetchProjects = true) => {\r\n  var qI = new MassResultCompVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.ViewItem = qI;\r\n\r\n  if (isfetchProjects) {\r\n    pmDataVM().Project_DictVM.OnGetItemsDone = (v) => {\r\n      qI.ProjectVMStorageList = GetProjectVMStorageList(qI);\r\n    }\r\n  }\r\n\r\n  q.OnGetItemsDone_Funcs.push(() => {\r\n    message.success('get data successfully');\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProjectVMStorageList = (q) => {\r\n  return pmDataVM().Project_DictVM.Items;\r\n}\r\n\r\nexport const GetProjectVMs = (q) => {\r\n  var storageList = q.ProjectVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var projects = q.Projects;\r\n  projects.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const Get_PhaseSelectVM = (q) => {\r\n  var qI = new MultiSelectVM();\r\n  qI.Placeholder = 'chọn version'\r\n  qI.OnSelectedItemChanged = (v) => q.PhaseVMs = v;\r\n  qI.TitleRender = (v) => v.Name\r\n\r\n  const setList = (data) => {\r\n    qI.Items = data\r\n  }\r\n\r\n  var host = pmDataVM().CurrentProject.Phase_DictVM;\r\n  if (host.Items) {\r\n    setList(host.Items)\r\n  } else {\r\n    genUtil.Add_2(host.OnSet_Items_Func,\r\n      () => setList(host.Items));\r\n  }\r\n\r\nreturn qI;\r\n}\r\n\r\n// export const GetPhaseVMs = (q) => {\r\n//   var storageList = q.PhaseVMStorageList;\r\n//   if (!storageList) return [];\r\n\r\n//   var list = [];\r\n\r\n//   var phases = q.Phases;\r\n//   phases.forEach(x => {\r\n//     var index = storageList.findIndex(y => y.ModelItem === x);\r\n//     if (index !== -1) {\r\n//       list.push(storageList[index]);\r\n//     }\r\n//   })\r\n\r\n//   return list;\r\n// }\r\n\r\nexport const GetProjectPopoverStateValue = (q) => {\r\n  return q.ProjectSelectOpen ? 'none' : 'hover';\r\n}\r\n\r\nexport const Handle_MassGroupSetting_Dict = (q) => {\r\n  if (q.IsGet_MassGroupSetting_Dict) return undefined\r\n  q.IsGet_MassGroupSetting_Dict = true;\r\n\r\n  const setObj = (data) => {\r\n    q.MassGroupSetting_Dict = data\r\n  }\r\n\r\n  var host = pmDataVM();\r\n  if (host.MassGroupSetting_Dict) {\r\n    setObj(host.MassGroupSetting_Dict)\r\n  }\r\n  genUtil.Add_2(\r\n    host.OnSet_MassGroupSetting_Dict_Func,\r\n    () => setObj(host.MassGroupSetting_Dict),\r\n    false\r\n  )\r\n}\r\n\r\nexport const GetCanEdit_Site = (q) => {\r\n  return q.Projects.length === 0 && !q.IsHavePhase\r\n}","export class DO_Comp {\r\n  \r\n}","export class DO_Element {\r\n  SubItems = []\r\n}","export const project = 'project'\r\nexport const element = 'element'\r\nexport const elementinfo = 'element-info'\r\nexport const elementinfo_identify = 'element-info-identify'\r\nexport const elementinfo_locate = 'element-info-locate'\r\nexport const elementinfo_geometry = 'element-info-geometry'\r\nexport const elementinfo_specification = 'element-info-specification'\r\nexport const elementinfo_material = 'element-info-material'","import { DO_Element } from './DO_Element';\r\nimport * as et from './DO_ElementType'\r\n\r\nexport const get = (type, title) => {\r\n  var qI = new DO_Element();\r\n  qI.Title = title ? title : type;\r\n\r\n  switch (type) {\r\n    case et.element:\r\n      qI.SubItems = [\r\n        get('guid'),\r\n        get('projectId'),\r\n        get('exportSetId'),\r\n        get(et.elementinfo, 'info')\r\n      ]\r\n      break;\r\n    case et.project:\r\n      qI.SubItems = []\r\n      break;\r\n    case et.elementinfo:\r\n      qI.SubItems = [\r\n        get(et.elementinfo_identify, 'identify'),\r\n        get(et.elementinfo_locate, 'locate'),\r\n        get(et.elementinfo_geometry, 'geometry'),\r\n        get(et.elementinfo_specification, 'specification'),\r\n        get(et.elementinfo_material, 'material'),\r\n      ]\r\n      break;\r\n    case et.elementinfo_identify:\r\n      qI.SubItems = [\r\n        get('category'),\r\n        get('typename'),\r\n        get('elementName'),\r\n        get('typemark'),\r\n        get('typecomment'),\r\n        get('description'),\r\n        get('model'),\r\n        get('manufacturer'),\r\n        get('keynote'),\r\n        get('assemblycode'),\r\n        get('systemtype'),\r\n        get('systemclassification'),\r\n        get('workItem'),\r\n      ];\r\n      break;\r\n    case et.elementinfo_locate:\r\n      qI.SubItems = [\r\n        get('level'),\r\n        get('baseLevel'),\r\n        get('topLevel'),\r\n        get('block'),\r\n        get('zone'),\r\n      ];\r\n      break;\r\n    default:\r\n      qI.SubItems = [];\r\n      break;\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../text/TextVMUtil';\r\nimport * as util from './DO_ElementVMUtil'\r\n\r\nexport class DO_ElementVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      subItems: observable,\r\n      isOpenSub : observable\r\n    })\r\n  }\r\n\r\n  get Title(){\r\n    return this.ModelItem.Title\r\n  }\r\n\r\n  get IsHaveButton(){\r\n    return this.SubItems.length !== 0;\r\n  }\r\n\r\n  subItems = undefined\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems\r\n  }\r\n\r\n  isOpenSub = false\r\n  get IsOpenSub(){\r\n    return this.isOpenSub\r\n  } set IsOpenSub(v){\r\n    this.isOpenSub = v;\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    this.IsOpenSub = !this.IsOpenSub;\r\n    this.ToggleSubContentVM.Content = util.GetToggleSubContent(this)\r\n  }\r\n\r\n  toggleSubContentVM\r\n  get ToggleSubContentVM(){\r\n    if (!this.toggleSubContentVM){\r\n      this.toggleSubContentVM = \r\n        textUtil.get(util.GetToggleSubContent(this))\r\n    }\r\n    return this.toggleSubContentVM;\r\n  }\r\n}","import { DO_ElementVM } from \"./DO_ElementVM\"\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new DO_ElementVM();\r\n\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetSubItems = (q) => {\r\n  return q.ModelItem.SubItems.map(x => get(x));\r\n}\r\n\r\nexport const GetToggleSubContent = (q) => {\r\n  return q.IsOpenSub ? '-' : '+';\r\n}","import { DO_CompVM } from \"./DO_CompVM\"\r\nimport * as modelUtil from './DO_CompUtil'\r\nimport * as itemUtil from '../DO_ElementVMUtil'\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI =new DO_CompVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(modelUtil.GetTest());\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  var obj = q.ModelItem.Items.map(x => itemUtil.get(x));\r\n  return obj;\r\n} ","import { DO_Comp } from \"./DO_Comp\"\r\nimport * as itemUtil from '../DO_ElementUtil'\r\nimport * as et from '../DO_ElementType'\r\n\r\nexport const GetTest = () => {\r\n  var qI = new DO_Comp();\r\n  \r\n  qI.Items = [\r\n    itemUtil.get(et.project),\r\n    itemUtil.get(et.element),\r\n  ]\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DO_CompVMUtil'\r\n\r\nexport class DO_CompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n  \r\n  items = undefined;\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport { DO_ElementVM } from \"./DO_ElementVM\";\r\nimport './comp/DO_Comp.css'\r\n\r\nclass DO_ElementView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DO_ElementVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className='doelement'>\r\n          {data.Title}\r\n\r\n          {/* Toggle Sub Button */}\r\n          {data.IsHaveButton ?\r\n            <Button className='doelement__button'\r\n              type='primary' size='small'\r\n              onClick={data.ToggleSub}>\r\n                {data.ToggleSubContentVM.Content}\r\n              </Button>\r\n            : ''}\r\n\r\n          {/* Sub Items */}\r\n          {data.IsOpenSub ?\r\n            <div className='doelement__dict'>\r\n              {data.SubItems.map(x => {\r\n                return <DO_ElementView key={x.Title}\r\n                  store={x} />\r\n              })}\r\n            </div>\r\n            : ''}\r\n        </span>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DO_ElementView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport { DO_CompVM } from \"./DO_CompVM\";\r\nimport * as util from './DO_CompVMUtil'\r\nimport './DO_Comp.css'\r\nimport DO_ElementView from \"../DO_ElementView\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass DO_CompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='doelement__dict'>\r\n          {data.Items ?\r\n            data.Items.map(x => {\r\n              return <DO_ElementView key={x.Title}\r\n                store={x} />\r\n            })\r\n            : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DO_CompView)","import { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport React, { Component } from 'react';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport { Button, Popover } from 'antd';\r\nimport * as SelectUtil from '../../../../../select/SelectVMUtil';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as genUtil from '../../../../../../util/generalUtil';\r\n\r\nexport class Category_ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Is_ShowValue_Delete: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  //Data\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  }\r\n  set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var listCategory =  [\r\n          'Stair',\r\n          'Roof',\r\n          'Celling',\r\n          'Door',\r\n          'Window',\r\n          'Furniture',\r\n          'Lighting Fixture',\r\n          'Plumbing Fixture',\r\n          'Railing',\r\n          'Wall Sweep'          \r\n      ]\r\n      var obj = this.nameVM = SelectUtil.get(listCategory, this.Name);\r\n      obj.Placeholder = 'Chọn Category'\r\n      obj.OnSelectedItemChanged = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var list =  [\r\n          'STAIRCASE',\r\n          'ROOFING',\r\n          'CEILING',\r\n          'DOOR',\r\n          'WINDOW',\r\n          'FURNITURE',\r\n          'LIGHTING FIXTURE',\r\n          'PLUMBING FIXTURE',\r\n          'RAILING',\r\n          'SKIRTING'          \r\n      ]\r\n      var obj = this.valueVM = SelectUtil.get(list, this.Values);\r\n      obj.Placeholder = 'Chọn masstype tương ứng'\r\n      obj.OnSelectedItemChanged = (v) => this.Values = v;\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\nget Name_Element() {\r\n  return <>\r\n      <div className='ls_item__value__wrapper'>\r\n        <SelectView store={this.NameVM} />\r\n    </div>\r\n  </>\r\n}\r\n\r\nIs_ShowValue_Delete = undefined\r\n\r\nShowValue_Delete = () => {\r\n  this.Is_ShowValue_Delete = true;\r\n}\r\n\r\nHideValue_Delete = () => {\r\n  this.Is_ShowValue_Delete = false;\r\n}\r\n\r\n  get Value_Element() {\r\n    return <>\r\n      <div className='ls_item__value__wrapper'\r\n        onMouseEnter={this.ShowValue_Delete}\r\n        onMouseLeave={this.HideValue_Delete}>\r\n        <SelectView store={this.ValueVM} />\r\n\r\n        <div className='ls_item__value__delete'>\r\n          {this.Is_ShowValue_Delete ?\r\n            <Button type='primary' size='small'\r\n            onClick={this.Delete}>x</Button>\r\n            : <div/>}\r\n        </div>\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  // Index\r\n  get Index() {\r\n    return this.Dict.ItemCategories.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.ItemCategories.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var dict = this.Dict;\r\n    dict.ItemCategories.splice(this.Index, 1);\r\n    dict.TableCategory.DeleteItem(this);\r\n  }\r\n}","import { Category_ItemVM } from \"./Category_ItemVM\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n    var qI = new Category_ItemVM();\r\n  \r\n    qI.ModelItem = q;\r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n  }\r\n\r\n  // Property\r\nexport const Handle_Value_StorageList = (q) => {\r\n    if (q.IsGet_Value_StorageList) return undefined;\r\n    q.IsGet_Value_StorageList = true;\r\n  \r\n    var project = q.Project.ModelItem\r\n  \r\n    var setObj = (CategoryDict) => {\r\n      q.Value_StorageList = CategoryDict.Items.map(x => x.Name);\r\n    }\r\n  \r\n    if (project.CategoryDict){\r\n      setObj(project.CategoryDict)\r\n    } else {\r\n      genUtil.Add_2(\r\n      project.OnSet_CategoryDict_Func_Dict,\r\n      () => {\r\n        setObj(project.CategoryDict)\r\n      }, false);\r\n    }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport React, { Component } from 'react';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport { Button, Popover } from 'antd';\r\nimport * as SelectUtil from '../../../../../select/SelectVMUtil';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as genUtil from '../../../../../../util/generalUtil';\r\n\r\nexport class MEP_ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Is_ShowValue_Delete: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Data\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  }\r\n  set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var list =  [\r\n          'HVAC',\r\n          'Electrical',\r\n          'Plumbing',\r\n          'Firefighter'\r\n      ]\r\n      var obj = this.nameVM = SelectUtil.get(list, this.name);\r\n      obj.Placeholder = 'Chọn masstype'\r\n      obj.OnSelectedItemChanged = (v) => this.name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  systemClassificationVM\r\n  get SystemClassificationVM() {\r\n    if (!this.systemClassificationVM) {\r\n      var list =  [\r\n        'Supply Air',\r\n        'Exhause Air',\r\n        'Return Air',\r\n        'Hydronic Return',\r\n        'Sanitary',\r\n        'Power',\r\n        'Telecom',\r\n        'Lighting',\r\n        'Lightning Protection',\r\n        'Domestic Cold Water',\r\n        'Domestic Hot Water',\r\n        'Other',\r\n        'Sanitary',\r\n        'Vent',\r\n        'Fire Protection Wet',\r\n        'Fire Protection Dry',\r\n        'Fire Protection Pre-Action',\r\n        'Fire Protection Other',\r\n        'Sanitary',\r\n        'Telecom'\r\n      ]\r\n      var obj = this.systemClassificationVM = SelectUtil.get(list, this.systemClassification);\r\n      obj.Placeholder = 'System Classification'\r\n      obj.OnSelectedItemChanged = (v) => this.systemClassification = v;\r\n    }\r\n    return this.systemClassificationVM;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var list =  [\r\n        'M-Supply Air',\r\n        'M-Fresh Air',\r\n        'M-Pre Cooled Air',\r\n        'M-Kitchen Fresh Air',\r\n        'M-Lobby Pressurization Air',\r\n        'M-Stair Pressurization Air',\r\n        'M-Exhause Air',\r\n        'M-Kitchen Exhaust Air',\r\n        'M-Smoke Exhaust Air',\r\n        'M-Smoke Exhaust Generator',\r\n        'M-Toilet Exhaust Air',\r\n        'M-Return Air',\r\n        'M-Chilled Water Supply',\r\n        'M-Condenser Water Supply',\r\n        'M-Steam Supply Piping',\r\n        'M-Brine Supply Pipe',\r\n        'M-Oil Supply Pipe',\r\n        'M-Refrigerant Pipe',\r\n        'M-Humidification Water',\r\n        'M-Chilled Water Return',\r\n        'M-Condenser Water Return',\r\n        'M-Steam Return',\r\n        'M-Brine Return',\r\n        'M-Oil Return',\r\n        'M-Drain Steam',\r\n        'M-Drain AC',\r\n        'E-Busway',\r\n        'E-Electrical Medium Voltage',\r\n        'E-Electrical Low Voltage',\r\n        'E-Electrical Extra Low Voltage',\r\n        'E-Electrical Lighting',\r\n        'E-Electrical Earthing and Lightning',\r\n        'P-Clean Water',\r\n        'P-General Service Water',\r\n        'P-Well Water',\r\n        'P-Industrial Water',\r\n        'P-Filtration Supply',\r\n        'P-Filtration Return',\r\n        'P-Hot Water Supply',\r\n        'P-Hot Water Return',\r\n        'P-Expansion',\r\n        'P-Gas',\r\n        'P-Soil Water',\r\n        'P-Waste Water',\r\n        'P-Waste Kitchen Water',\r\n        'P-Storm Water',\r\n        'P-Pump Up',\r\n        'P-Ventilation',\r\n        'F-Drencher',\r\n        'F-Sprinkler',\r\n        'F-Low Pressure',\r\n        'F-High Pressure',\r\n        'F-Hosereel',\r\n        'F-Indoor Fire Hydrant',\r\n        'F-Dry Riser',\r\n        'F-Pre Action',\r\n        'F-Foam',\r\n        'F-CO2 Fire Extinguishing',\r\n        'F-Drain Pipe',\r\n        'F-Electrical Fire Alarm'\r\n      ]\r\n      var obj = this.valueVM = SelectUtil.get(list, this.Values);\r\n      obj.Placeholder = 'Chọn SystemType tương ứng'\r\n      obj.OnSelectedItemChanged = (v) => this.Values = v;\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  Is_ShowValue_Delete = undefined\r\n\r\n  ShowValue_Delete = () => {\r\n    this.Is_ShowValue_Delete = true;\r\n  }\r\n\r\n  HideValue_Delete = () => {\r\n    this.Is_ShowValue_Delete = false;\r\n  }\r\n\r\n  get Value_Element() {\r\n    return <>\r\n      <div className='ls_item__value__wrapper'\r\n        onMouseEnter={this.ShowValue_Delete}\r\n        onMouseLeave={this.HideValue_Delete}>\r\n        <SelectView store={this.ValueVM} />\r\n\r\n        <div className='ls_item__value__delete'>\r\n          {this.Is_ShowValue_Delete ?\r\n            <Button type='primary' size='small'\r\n            onClick={this.Delete}>x</Button>\r\n            : <div/>}\r\n        </div>\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  get Name_Element() {\r\n    return <>\r\n      <div className='ls_item__value__wrapper'>\r\n        <SelectView store={this.NameVM} />\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  get SystemClassification_Element() {\r\n    return <>\r\n      <div className='ls_item__value__wrapper'>\r\n        <SelectView store={this.SystemClassificationVM} />\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  // Index\r\n  get Index() {\r\n    return this.Dict.itemMEPs.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.Items.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var dict = this.Dict;\r\n    dict.itemMEPs.splice(this.Index, 1);\r\n    dict.TableMEP.DeleteItem(this);\r\n  }\r\n}","import { MEP_ItemVM } from \"./MEP_ItemVM\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n    var qI = new MEP_ItemVM();\r\n  \r\n    qI.ModelItem = q;\r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n  }\r\n\r\n  // Property\r\nexport const Handle_Value_StorageList = (q) => {\r\n    if (q.IsGet_Value_StorageList) return undefined;\r\n    q.IsGet_Value_StorageList = true;\r\n  \r\n    var project = q.Project.ModelItem\r\n  \r\n    var setObj = (massTypeDict) => {\r\n      q.Value_StorageList = massTypeDict.Items.map(x => x.Name);\r\n    }\r\n  \r\n    if (project.massTypeDict){\r\n      setObj(project.massTypeDict)\r\n    } else {\r\n      genUtil.Add_2(\r\n      project.OnSet_massTypeDict_Func_Dict,\r\n      () => {\r\n        setObj(project.massTypeDict)\r\n      }, false);\r\n    }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport React, { Component } from 'react';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport { Button, Popover } from 'antd';\r\nimport * as SelectUtil from '../../../../../select/SelectVMUtil';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as genUtil from '../../../../../../util/generalUtil';\r\n\r\nexport class MT_ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Is_ShowValue_Delete: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Data\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  }\r\n  set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name);\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === rs._default) {\r\n            this.Name = obj.Content;\r\n          }\r\n        },\r\n        false\r\n      )\r\n\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var list =  [\r\n          'ARC',\r\n          'CARPET',\r\n          'CEILINGFINISH',\r\n          'FLOORFINISH',\r\n          'GYPSUM',\r\n          'MASONRY',\r\n          'METAL',\r\n          'MOSAIC',\r\n          'OTHER',\r\n          'PAINTING',\r\n          'PLASTER',\r\n          'PLASTIC',\r\n          'ROOFING',\r\n          'SCREED',\r\n          'SITEWORK',\r\n          'SKIRTING',\r\n          'TILING&PAVING',\r\n          'VINYL',\r\n          'WALLFINISH',\r\n          'WOODEN'\r\n      ]\r\n      var obj = this.valueVM = SelectUtil.get(list, this.Values);\r\n      obj.Placeholder = 'Chọn masstype tương ứng'\r\n      obj.OnSelectedItemChanged = (v) => this.Values = v;\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  Is_ShowValue_Delete = undefined\r\n\r\n  ShowValue_Delete = () => {\r\n    this.Is_ShowValue_Delete = true;\r\n  }\r\n\r\n  HideValue_Delete = () => {\r\n    this.Is_ShowValue_Delete = false;\r\n  }\r\n\r\n  get Value_Element() {\r\n    return <>\r\n      <div className='ls_item__value__wrapper'\r\n        onMouseEnter={this.ShowValue_Delete}\r\n        onMouseLeave={this.HideValue_Delete}>\r\n        <SelectView store={this.ValueVM} />\r\n\r\n        <div className='ls_item__value__delete'>\r\n          {this.Is_ShowValue_Delete ?\r\n            <Button type='primary' size='small'\r\n            onClick={this.Delete}>x</Button>\r\n            : <div/>}\r\n        </div>\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  // Index\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.Items.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var dict = this.Dict;\r\n    dict.Items.splice(this.Index, 1);\r\n    dict.Table.DeleteItem(this);\r\n  }\r\n}","import { MT_ItemVM } from \"./MT_ItemVM\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n    var qI = new MT_ItemVM();\r\n  \r\n    qI.ModelItem = q;\r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n  }\r\n\r\n  // Property\r\nexport const Handle_Value_StorageList = (q) => {\r\n    if (q.IsGet_Value_StorageList) return undefined;\r\n    q.IsGet_Value_StorageList = true;\r\n  \r\n    var project = q.Project.ModelItem\r\n  \r\n    var setObj = (massTypeDict) => {\r\n      q.Value_StorageList = massTypeDict.Items.map(x => x.Name);\r\n    }\r\n  \r\n    if (project.massTypeDict){\r\n      setObj(project.massTypeDict)\r\n    } else {\r\n      genUtil.Add_2(\r\n      project.OnSet_massTypeDict_Func_Dict,\r\n      () => {\r\n        setObj(project.massTypeDict)\r\n      }, false);\r\n    }\r\n}","import { makeObservable, observable, action, makeAutoObservable, observe } from 'mobx';\r\nimport * as util from './MassTypeSettingDataVMUtil'\r\nimport * as utilCategory from './CategorySettingDataVMUtil'\r\nimport * as utilMEP from './MEPSettingDataVMUtil'\r\nimport { ControlOutlined } from '@ant-design/icons';\r\nimport { Button, message } from 'antd';\r\nimport * as itemUtil from './Item/MT_ItemVMUtil'\r\nimport * as rs from '../../../../text/TextRenderState';\r\nimport * as itemUtilCategory from './Category/Category_ItemVMUtil'\r\nimport * as itemUtilMEP from './MEP/MEP_ItemVMUtil'\r\n\r\nexport class MassTypeSettingDataVM {\r\n    constructor() {\r\n        makeAutoObservable (this,{\r\n            items:observable,\r\n            itemCategories:observable,\r\n            itemMEPs:observable\r\n        })\r\n    }\r\n\r\n    items = undefined\r\n    get Items() {\r\n        if (!this.items) {\r\n            this.items = util.GetItems(this);\r\n        }\r\n        return this.items;\r\n    } set Items(v) {\r\n        this.items = v;\r\n    }\r\n\r\n    itemCategories = undefined\r\n    get ItemCategories() {\r\n        if (!this.itemCategories) {\r\n            this.itemCategories = utilCategory.GetItems(this);\r\n        }\r\n        return this.itemCategories;\r\n    } set ItemCategories(v) {\r\n        this.itemCategories = v;\r\n    }\r\n\r\n    itemMEPs = undefined\r\n    get ItemMEPs() {\r\n        if (!this.itemMEPs) {\r\n            this.itemMEPs = utilMEP.GetItems(this);\r\n        }\r\n        return this.itemMEPs;\r\n    } set ItemMEPs(v) {\r\n        this.itemMEPs = v;\r\n    }\r\n\r\n    AddItem = () => {\r\n        var item = itemUtil.get(this.ModelItem.AddItem(), this);\r\n    \r\n        item.NameVM.RenderState = rs.edit\r\n    \r\n        this.Items.push(item);\r\n        this.Table.AddItem(item);\r\n        return item;\r\n      }\r\n    \r\n      // Table\r\n    table\r\n      get Table(){\r\n        if (!this.table){\r\n          this.table = util.GetTable(this);\r\n        }\r\n        return this.table;\r\n      }\r\n\r\n      AddItemCategory = () => {\r\n        var item = itemUtilCategory.get(this.ModelItem.AddItem(), this);\r\n    \r\n        //item.NameVM.RenderState = rs.edit\r\n    \r\n        this.ItemCategories.push(item);\r\n        this.TableCategory.AddItem(item);\r\n        return item;\r\n      }\r\n\r\n    tableCategory\r\n      get TableCategory(){\r\n        if (!this.tableCategory){\r\n          this.tableCategory = utilCategory.GetTable(this);\r\n        }\r\n        return this.tableCategory;\r\n      }\r\n\r\n      AddItemMEP = () => {\r\n        var item = itemUtilMEP.get(this.ModelItem.AddItem(), this);\r\n    \r\n        //item.NameVM.RenderState = rs.edit\r\n    \r\n        this.ItemMEPs.push(item);\r\n        this.TableMEP.AddItem(item);\r\n        return item;\r\n      }\r\n\r\n    tableMEP\r\n      get TableMEP(){\r\n        if (!this.tableMEP){\r\n          this.tableMEP = utilMEP.GetTable(this);\r\n        }\r\n        return this.tableMEP;\r\n      }\r\n    \r\n    Update_MasstypeData = () => {\r\n        this.ModelItem.Update_MasstypeData();\r\n        message.success('save successfully!');\r\n      }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { MassTypeSettingDataVM } from './MassTypeSettingDataVM';\r\nimport * as itemUtil from './Category/Category_ItemVMUtil'\r\nimport TableVM from '../../../../table/TableVM';\r\nimport TableColumn from '../../../../table/TableColumn';\r\nimport * as genUtil from '../../../../../util/generalUtil';\r\nimport EditableTextView from '../../../../text/EditableTextView';\r\nimport SelectView from '../../../../select/SelectView';\r\n\r\nexport const pmDataVM = () => {\r\n    return PMDataVM.Instance;\r\n  }\r\n\r\n  // Instance\r\nexport const get = (q, dict) => {\r\n    var qI = new MassTypeSettingDataVM();\r\n    qI.ModelItem = q;\r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n  }\r\n\r\n  // Property\r\nexport const GetItems = (q) => {\r\n    return q.ModelItem.Items.map(x => itemUtil.get(x, q));\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n    var qI = new TableVM();\r\n  \r\n    // name\r\n    var nameCol = new TableColumn();\r\n    nameCol.Title = 'Category';\r\n    nameCol.DataIndex = [ 'name' ]\r\n    nameCol.Key = genUtil.randomId();\r\n    nameCol.Table = qI;\r\n    nameCol.ClassName = 'ls__title-column'\r\n  \r\n    // name\r\n    var valCol = new TableColumn();\r\n    valCol.Title = 'Tương đương với MassType';\r\n    valCol.DataIndex = [ 'value' ]\r\n    valCol.Key = genUtil.randomId();\r\n    valCol.Table = qI;\r\n    valCol.ClassName = 'ls__value-column'\r\n  \r\n    qI.Columns = [ nameCol, valCol];\r\n    qI.CanShow_MoveCommand = false;\r\n    qI.CanHandleColumn = false\r\n  \r\n    // Cell Value\r\n    qI.Override_Get_CellRender = (value, item, dataIndex, cell, row, col) => {\r\n      switch (col.DataIndex[0]) {\r\n        case 'name':\r\n          return item.Name_Element\r\n        case 'value':\r\n          return item.Value_Element\r\n      }\r\n    }\r\n  \r\n    qI.DataSource = [...q.ItemCategories];\r\n  \r\n    return qI;\r\n  }","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { MassTypeSettingDataVM } from './MassTypeSettingDataVM';\r\nimport * as itemUtil from './MEP/MEP_ItemVMUtil'\r\nimport TableVM from '../../../../table/TableVM';\r\nimport TableColumn from '../../../../table/TableColumn';\r\nimport * as genUtil from '../../../../../util/generalUtil';\r\nimport EditableTextView from '../../../../text/EditableTextView';\r\nimport SelectView from '../../../../select/SelectView';\r\n\r\nexport const pmDataVM = () => {\r\n    return PMDataVM.Instance;\r\n  }\r\n\r\n  // Instance\r\nexport const get = (q, dict) => {\r\n    var qI = new MassTypeSettingDataVM();\r\n    qI.ModelItem = q;\r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n  }\r\n\r\n  // Property\r\nexport const GetItems = (q) => {\r\n    return q.ModelItem.Items.map(x => itemUtil.get(x, q));\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n    var qI = new TableVM();\r\n  \r\n    // name\r\n    var nameCol = new TableColumn();\r\n    nameCol.Title = 'MassType';\r\n    nameCol.DataIndex = [ 'name' ]\r\n    nameCol.Key = genUtil.randomId();\r\n    nameCol.Table = qI;\r\n    nameCol.ClassName = 'ls__title-column'\r\n  \r\n    // name\r\n    var ClassCol = new TableColumn();\r\n    ClassCol.Title = 'System Classification';\r\n    ClassCol.DataIndex = [ 'systemClassification' ]\r\n    ClassCol.Key = genUtil.randomId();\r\n    ClassCol.Table = qI;\r\n    ClassCol.ClassName = 'ls__title-column'\r\n\r\n    // name\r\n    var valCol = new TableColumn();\r\n    valCol.Title = 'Tương đương với System Type';\r\n    valCol.DataIndex = [ 'value' ]\r\n    valCol.Key = genUtil.randomId();\r\n    valCol.Table = qI;\r\n    valCol.ClassName = 'ls__value-column'\r\n  \r\n    qI.Columns = [ nameCol,ClassCol, valCol];\r\n    qI.CanShow_MoveCommand = false;\r\n    qI.CanHandleColumn = false\r\n  \r\n    // Cell Value\r\n    qI.Override_Get_CellRender = (value, item, dataIndex, cell, row, col) => {\r\n      switch (col.DataIndex[0]) {\r\n        case 'name':\r\n          return item.Name_Element\r\n        case 'systemClassification':\r\n            return item.SystemClassification_Element\r\n        case 'value':\r\n          return item.Value_Element\r\n      }\r\n    }\r\n  \r\n    qI.DataSource = [...q.ItemCategories];\r\n  \r\n    return qI;\r\n  }","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { MassTypeSettingDataVM } from './MassTypeSettingDataVM';\r\nimport * as itemUtil from './Item/MT_ItemVMUtil'\r\nimport TableVM from '../../../../table/TableVM';\r\nimport TableColumn from '../../../../table/TableColumn';\r\nimport * as genUtil from '../../../../../util/generalUtil';\r\nimport EditableTextView from '../../../../text/EditableTextView';\r\nimport SelectView from '../../../../select/SelectView';\r\n\r\nexport const pmDataVM = () => {\r\n    return PMDataVM.Instance;\r\n  }\r\n\r\n  // Instance\r\nexport const get = (q, dict) => {\r\n    var qI = new MassTypeSettingDataVM();\r\n    qI.ModelItem = q;\r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n  }\r\n\r\n  // Property\r\nexport const GetItems = (q) => {\r\n    return q.ModelItem.Items.map(x => itemUtil.get(x, q));\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n    var qI = new TableVM();\r\n  \r\n    // name\r\n    var nameCol = new TableColumn();\r\n    nameCol.Title = 'Material';\r\n    nameCol.DataIndex = [ 'name' ]\r\n    nameCol.Key = genUtil.randomId();\r\n    nameCol.Table = qI;\r\n    nameCol.ClassName = 'ls__title-column'\r\n  \r\n    // name\r\n    var valCol = new TableColumn();\r\n    valCol.Title = 'Tương đương với MassType';\r\n    valCol.DataIndex = [ 'value' ]\r\n    valCol.Key = genUtil.randomId();\r\n    valCol.Table = qI;\r\n    valCol.ClassName = 'ls__value-column'\r\n  \r\n    qI.Columns = [ nameCol, valCol];\r\n    qI.CanShow_MoveCommand = false;\r\n    qI.CanHandleColumn = false\r\n  \r\n    // Cell Value\r\n    qI.Override_Get_CellRender = (value, item, dataIndex, cell, row, col) => {\r\n      switch (col.DataIndex[0]) {\r\n        case 'name':\r\n          return <EditableTextView store={item.NameVM} />\r\n        case 'value':\r\n          return item.Value_Element\r\n      }\r\n    }\r\n  \r\n    qI.DataSource = [...q.Items];\r\n  \r\n    return qI;\r\n  }\r\n\r\n  ","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as util from './MassTypeSettingVMUtil'\r\n\r\nexport class MassTypeSettingVM extends SettingVM {\r\n      get MassTypeStorageList() {\r\n        return this.ModelItem.MassTypeStorageList;\r\n      }\r\n\r\n      // get CategoryStorageList() {\r\n      //   return this.ModelItem.CategoryStorageList;\r\n      // }\r\n    \r\n      get FieldFilterStorageList(){\r\n        return this.ModelItem.FieldFilterStorageList;\r\n      }\r\n    \r\n      Save = () => {\r\n        this.ModelItem.Save();\r\n      }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as st from '../base/SettingType'\r\n\r\nexport class MassTypeSetting extends Setting {\r\n    SettingType = st.masstype\r\n    \r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './MT_ItemUtil'\r\n\r\nexport class MT_Item{\r\n    _id\r\n\r\n    tempId\r\n    get TempId(){\r\n      if (!this.tempId){\r\n        this.tempId = genUtil.newGUID();\r\n      }\r\n      return this.tempId;\r\n    }\r\n\r\n    get id (){\r\n        return this._id ? this._id : this.tempId;\r\n    }\r\n\r\n    get Index (){\r\n        return this.Dict.Items.indexOf(this);\r\n    }\r\n  \r\n    Delete = () => {\r\n      this.Dict.Items.splice(this.Index, 1);\r\n    }\r\n\r\n      // Data\r\n  Name = ''\r\n\r\n  Values = []\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      values: this.Values\r\n    }\r\n    return obj;\r\n  }\r\n}\r\n","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './Category_ItemUtil'\r\n\r\nexport class Category_Item{\r\n    _id\r\n\r\n    tempId\r\n    get TempId(){\r\n      if (!this.tempId){\r\n        this.tempId = genUtil.newGUID();\r\n      }\r\n      return this.tempId;\r\n    }\r\n\r\n    get id (){\r\n        return this._id ? this._id : this.tempId;\r\n    }\r\n\r\n    get Index (){\r\n        return this.Dict.Items.indexOf(this);\r\n    }\r\n  \r\n    Delete = () => {\r\n      this.Dict.Items.splice(this.Index, 1);\r\n    }\r\n\r\n      // Data\r\n  Name = ''\r\n\r\n  Values = []\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      values: this.Values\r\n    }\r\n    return obj;\r\n  }\r\n}\r\n","import Setting from \"../base/Setting\";\r\nimport * as util from './MassTypeSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport * as itemUtil from './Item/MT_ItemUtil'\r\nimport * as genUtil from \"../../../../../util/generalUtil\";\r\nimport * as itemUtilCategory from './Category/Category_ItemUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class MassTypeSettingData {\r\n  \r\n  // Items\r\n  Items = []\r\n\r\n  AddItem = () => {\r\n    var item = itemUtil.GetDefault(this);\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  Update_MasstypeData = () => {\r\n    this.masstypeStorageList = util.GetMassTypeStorageList(this);\r\n  }\r\n\r\n  OnSet_MassTypeStorageList_Func_Dict = []\r\n\r\n  masstypeStorageList\r\n  get masstypeStorageList(){\r\n    if (!this.masstypeStorageList){\r\n      this.masstypeStorageList = util.GetMassTypeStorageList(this);\r\n    }\r\n    return this.masstypeStorageList;\r\n  } set masstypeStorageList(v){\r\n    this.masstypeStorageList = v;\r\n\r\n    genUtil.Handle(this.OnSet_MassTypeStorageList_Func_Dict,\r\n      (v) => this.OnSet_MassTypeStorageList_Func_Dict = v)\r\n  }\r\n\r\n  //\r\n  AddItemCategory = () => {\r\n    var item = itemUtilCategory.GetDefault(this);\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n\r\n  get ApiData() {\r\n    return {\r\n      items : this.Items.map(x => x.ApiData)\r\n    }\r\n  }\r\n}","import { MT_Item } from \"./MT_Item\"\r\n\r\nexport const GetFromDb = (data,dict) =>{\r\n    var qI = new MT_Item();\r\n\r\n    qI.Name = data.name;\r\n    qI.Values = data.values\r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n    var qI = new MT_Item();\r\n  \r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n  }","import { Category_Item } from \"./Category_Item\"\r\n\r\nexport const GetFromDb = (data,dict) =>{\r\n    var qI = new Category_Item();\r\n\r\n    qI.Name = data.name;\r\n    qI.Values = data.values\r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n    var qI = new Category_Item();\r\n  \r\n    qI.Dict = dict;\r\n  \r\n    return qI;\r\n  }","import { PMData } from '../../../single/model/PMData';\r\nimport { MassTypeSettingData } from './MassTypeSettingData';\r\nimport * as itemUtil from './Item/MT_ItemUtil';\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new MassTypeSettingData();\r\n  \r\n  qI.Items = data.items.map(x => itemUtil.GetFromDb(x, qI));\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new MassTypeSettingData();\r\n\r\n  qI.Items = []\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetMassTypeStorageList = (q) => {\r\n  return q.Items.map(x => x.Name);\r\n}","import { MassTypeSetting } from \"./MassTypeSetting\"\r\nimport * as dataUtil from './MassTypeSettingDataUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport { message } from 'antd';\r\n\r\n// Instance\r\nexport const get = () => {\r\n  var qI = new MassTypeSetting();\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassTypeSetting();\r\n\r\n  qI.Name = 'Thiết lập công tác'\r\n  qI.Description = 'Mô tả thiết lập'\r\n  qI.Data = dataUtil.GetDefault(qI);\r\n  return qI;\r\n}","import * as dataVMUtil from './MassTypeSettingDataVMUtil'\r\nimport { MassTypeSettingVM } from './MassTypeSettingVM'\r\nimport * as modelUtil from './MassTypeSettingUtil'\r\n\r\nexport const get = (q) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new MassTypeSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data, qI);\r\n  }    \r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  return get(modelUtil.GetDefault())\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport { MassTypeSettingDataVM } from './MassTypeSettingDataVM';\r\nimport './MassTypeSetting.css'\r\nimport TableView from '../../../../table/TableView';\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nclass MassTypeSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassTypeSettingDataVM()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__wrapper'>\r\n          {/* Update massType Data */}\r\n          <Button type='primary' size='small' className='tls__save__button'\r\n            onClick={data.Update_MasstypeData}>\r\n            <SaveFilled className='tls__save' />\r\n          </Button>\r\n\r\n          <Button type='primary' size='small'\r\n            className='tls__save__button'\r\n            onClick={data.AddItem}>+</Button>\r\n          <TableView store={data.Table} />\r\n        </div>\r\n        \r\n        <hr />\r\n\r\n        <div className='tls__wrapper'>\r\n          {/* Update massType Data */}\r\n          <Button type='primary' size='small' className='tls__save__button'\r\n            onClick={data.Update_MasstypeData}>\r\n            <SaveFilled className='tls__save' />\r\n          </Button>\r\n\r\n          <Button type='primary' size='small'\r\n            className='tls__save__button'\r\n            onClick={data.AddItemCategory}>+</Button>\r\n          <TableView store={data.TableCategory} />\r\n        </div>\r\n\r\n        <hr />\r\n\r\n        <div className='tls__wrapper'>\r\n            {/* Update massType Data */}\r\n            <Button type='primary' size='small' className='tls__save__button'\r\n            onClick={data.Update_MasstypeData}>\r\n            <SaveFilled className='tls__save' />\r\n          </Button>\r\n\r\n          <Button type='primary' size='small'\r\n            className='tls__save__button'\r\n            onClick={data.AddItemMEP}>+</Button>\r\n          <TableView store={data.TableMEP} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(MassTypeSettingDataView);","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport './MassTypeSetting.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\nimport * as util from './MassTypeSettingVMUtil'\r\nimport MassTypeSettingDataView from './MassTypeSettingDataView';\r\n\r\n\r\nclass MassTypeSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetDefault()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <div className ='tls__name'>\r\n            <h3>{data.Name}</h3>\r\n          </div>\r\n          <div>\r\n            {data.Description}\r\n          </div>\r\n            <MassTypeSettingDataView store={data.DataVM} />\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default observer(MassTypeSettingView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TabUtil'\r\nimport './Tab.css'\r\n\r\nexport class Tab {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Items: observable,\r\n      currentItem: observable,\r\n      IsHaveBorder: observable\r\n    })\r\n  }\r\n\r\n  Items = []\r\n\r\n  currentItem = undefined\r\n  get CurrentItem() {\r\n    if (!this.currentItem) {\r\n      this.currentItem = util.GetDefault_CurrentItem(this)\r\n    } return this.currentItem\r\n  } set CurrentItem(v) {\r\n    this.currentItem = v;\r\n  }\r\n\r\n  SetCurrent = (v) => {\r\n    this.CurrentItem = v;\r\n  }\r\n\r\n  idRender\r\n  get IdRender() {\r\n    if (!this.idRender) {\r\n      this.idRender = util.GetDefault_IdRender(this)\r\n    } return this.idRender\r\n  } set IdRender(v) {\r\n    this.idRender = v\r\n  }\r\n\r\n  titleRender;\r\n  get TitleRender() {\r\n    if (!this.titleRender) {\r\n      this.titleRender = util.GetDefault_TitleRender(this)\r\n    } return this.titleRender\r\n  } set TitleRender(v) {\r\n    this.titleRender = v\r\n  }\r\n\r\n  titleView_Render\r\n  get TitleView_Render() {\r\n    if (!this.titleView_Render) {\r\n      this.titleView_Render = util.GetDefault_TitleView_Render(this)\r\n    } return this.titleView_Render\r\n  } set TitleView_Render(v) {\r\n    this.titleView_Render = v\r\n  }\r\n\r\n  contentRender;\r\n  get ContentRender() {\r\n    if (!this.contentRender) {\r\n      this.contentRender = util.GetDefault_ContentRender(this)\r\n    } return this.contentRender\r\n  } set ContentRender(v) {\r\n    this.contentRender = v\r\n  }\r\n\r\n  contentWrapper_Render;\r\n  get ContentWrapper_Render() {\r\n    if (!this.contentWrapper_Render) {\r\n      this.contentWrapper_Render = util.GetDefault_ContentWrapper_Render(this)\r\n    } return this.contentWrapper_Render\r\n  } set ContentWrapper_Render(v) {\r\n    this.contentWrapper_Render = v\r\n  }\r\n\r\n  IsHaveBorder = true\r\n\r\n  get BorderStyle() {\r\n    return this.IsHaveBorder ? 'border' : ''\r\n  }\r\n\r\n  get TitleView() {\r\n    return <div className='tab__title__wrapper'>\r\n      {this.Items?.map(this.TitleView_Render)}\r\n    </div>\r\n  }\r\n\r\n  get ContentView(){\r\n    return this.CurrentItem ? \r\n      this.ContentWrapper_Render(this.CurrentItem) : ''\r\n  }\r\n\r\n  get ContentWrapper_View() {\r\n    return <div className={`tab__content__wrapper ${this.BorderStyle}`}>\r\n      {this.ContentView}\r\n    </div>\r\n  }\r\n\r\n  get View() {\r\n    return <div className='tab__wrapper'>\r\n      {this.TitleView}\r\n      {this.ContentWrapper_View}\r\n    </div>\r\n  }\r\n}","import { Tab } from \"./Tab\"\r\n\r\n// Instance\r\nexport const GetTest = () => {\r\n  var qI = new Tab();\r\n  qI.Items = [\r\n    {\r\n      Title: 'London',\r\n      Content: 'A'\r\n    },\r\n    {\r\n      Title: 'Paris',\r\n      Content: 'B'\r\n    }\r\n  ]\r\n\r\n  qI.IdRender = (v) => v.Title\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefault_CurrentItem = (q) => {\r\n  return q.Items && q.Items.length !== 0 ? q.Items[0] : undefined\r\n}\r\n\r\nexport const GetDefault_IdRender = (q) => {\r\n  return (v) => v.id\r\n}\r\n\r\nexport const GetDefault_TitleRender = (q) => {\r\n  return (v) => v.Title\r\n}\r\n\r\nexport const GetDefault_TitleView_Render = (q) => {\r\n  return (v) => {\r\n    var active = q.CurrentItem === v ? 'active' : ''\r\n    return <div className={`tab__title ${active}`}\r\n      onClick={() => { \r\n        q.SetCurrent(v)\r\n      }}\r\n      key={q.IdRender(v)}>{q.TitleRender(v)}</div>\r\n  }\r\n}\r\n\r\nexport const GetDefault_ContentRender = (q) => {\r\n  return (v) => v.Content\r\n}\r\n\r\nexport const GetDefault_ContentWrapper_Render = (q) => {\r\n  return (v) => {\r\n    return <div key={q.IdRender(v)}>\r\n      {q.ContentRender(v)}\r\n    </div>\r\n  }\r\n}","import * as textUtil from '../../../../../../text/TextVMUtil'\r\nimport * as util from './AddTemplateVMUtil'\r\nimport { makeObservable, observable, action } from 'mobx';\r\n\r\nexport class AddTemplateVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      dict: observable\r\n    })\r\n  }\r\n\r\n  get InputName() {\r\n    return this.ModelItem?.InputName\r\n  } set InputName(v) {\r\n    this.ModelItem.InputName = v\r\n  }\r\n\r\n  inputNameVM\r\n  get InputNameVM() {\r\n    if (!this.inputNameVM) {\r\n      var obj = this.inputNameVM = textUtil.get(this.InputName, 'tên template');\r\n      obj.onSetContent = (v) => this.InputName = v;\r\n    } return this.inputNameVM\r\n  }\r\n\r\n  tool\r\n  get Tool() {\r\n    if (!this.tool) {\r\n      this.tool = util.GetTool(this)\r\n    } return this.tool\r\n  }\r\n\r\n  get View() {\r\n    return this.Tool.View\r\n  }\r\n\r\n  Show = this.Tool.Show\r\n\r\n  Hide = this.Tool.Hide\r\n\r\n  run\r\n  get Run() {\r\n    if (!this.run) {\r\n      this.run = () => this.ModelItem.Run();\r\n    } return this.run\r\n  }\r\n\r\n  dict = undefined\r\n  get Dict(){\r\n    return this.dict;\r\n  } set Dict(v){\r\n    this.dict = v;\r\n    util.SetDict(this, v)\r\n  }\r\n\r\n  get Delete(){\r\n    return this.Dict.DeleteVM\r\n  }\r\n}","import { EntDelete } from \"../../../../../../delete/EntDelete\";\r\nimport { AddTemplateVM } from \"./AddTemplateVM\"\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from \"antd\";\r\nimport InputView from \"../../../../../../input/InputView\";\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new AddTemplateVM(dict);\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  qI.Tool.AdditionElement = q.DeleteView\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetTool = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n\r\n  qI.OnPre_ShowHover = () => {\r\n    q.InputNameVM.Content = undefined\r\n  }\r\n\r\n  qI.Modal_InfoView = <InputView store={q.InputNameVM} />\r\n  qI.Modal_ContentView = <div className='mgs__template__modalcontent'>\r\n    {qI.Modal_InfoView}\r\n    {qI.Modal_ButtonView}\r\n  </div>\r\n\r\n  qI.Retrieve_ShowHover_Button = () => <div className='f'>\r\n    <Button type='primary' size='small'\r\n      onClick={qI.Show_Hover}>\r\n      Add Template\r\n    </Button>\r\n    {q.Dict ? q.Delete.View : ''}\r\n  </div>\r\n\r\n  qI.OnPreHide = () => {\r\n    if (q.Delete.Is_Hover_Visible) {\r\n      qI.IsRun_Cancel = true;\r\n    }\r\n  }\r\n\r\n  qI.OnPreRun = () => {\r\n    if (!q.InputName || q.InputName.length === 0) {\r\n      qI.IsRun_Cancel = true\r\n      message.warn('Vui lòng nhập tên template!');\r\n    }\r\n  }\r\n\r\n  qI.OnRun = q.Run\r\n\r\n  return qI;\r\n}\r\n\r\n// Method\r\nexport const SetDict = (q, v) => {\r\n  var q1 = v;\r\n  q1.DeleteVM.OnSet_Is_Hover_Visible = (v1) => {\r\n    var tool = q.Tool\r\n    if (!v1) {\r\n      // tool.Is_Visible = false\r\n    } else {\r\n      if (tool.Is_Hover_Visible) {\r\n        tool.Is_Hover_Visible = false\r\n      }\r\n      tool.Is_Visible = true\r\n    }\r\n  }\r\n}","import { MassGroupSettingVM } from './MassGroupSettingVM'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport * as addTemplateUtil from '../addtemplate/AddTemplateVMUtil';\r\nimport { CheckCircleOutlined, CloseCircleOutlined, SaveFilled } from '@ant-design/icons';\r\nimport * as mgsd_ut from '../../dict/base/MGS_Dict_UseType'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSettingVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetAddTemplate = (q) => {\r\n  return addTemplateUtil.get(q.ModelItem.AddTemplate, q);\r\n}\r\n\r\nexport const GetActiveTool = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Retrieve_WrapperView = () => !q.IsActive ?\r\n    <Button type='primary' size='small'\r\n      onClick={q.Set_Active}>\r\n      <CheckCircleOutlined />\r\n    </Button>\r\n    :\r\n    <Button type='primary' size='small'\r\n      onClick={q.UnSet_Active}\r\n      className='btn-warning'>\r\n      <CloseCircleOutlined />\r\n    </Button>\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSaveTable = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận lưu đè?'\r\n  qI.ShowHover_Button = <Button type='primary' size='small'\r\n    className='btn-success'\r\n    onClick={qI.Show_Hover}>\r\n    <SaveFilled />\r\n  </Button>\r\n\r\n  qI.OnRun = () => {\r\n    var save = q.Dict.Save;\r\n    save.Name = q.Name;\r\n    save.Run();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDD_UseType = (q) => {\r\n  return q.Dict.Dict.UseType\r\n}\r\n\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = q.D_UseType === mgsd_ut.project ? d_tt.manual : d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}","export const query = 'query'\r\nexport const save = 'save'","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../../util/commandUtil'\r\nimport * as util from './MassGroupSettingVMUtil'\r\nimport * as rs from '../../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../../text/EditableTextView';\r\nimport './MassGroupSetting.css'\r\nimport { PMDataVM } from '../../../../../single/form/PMDataVM';\r\nimport * as mgsd_ut from '../../dict/base/MGS_Dict_UseType'\r\nimport * as mgsdd_ut from '../../dict/dict/MGS_Dict_Dict_UseType'\r\nimport * as pct from '../../../../command/ProjectCommand'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class MassGroupSettingVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isActive: observable,\r\n      dd_UseType: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get projectId() {\r\n    return this.ModelItem.projectId;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n    this.DescriptionVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.Commands.includes(pct.edit)) {\r\n      if (this.RenderState === rs._default) {\r\n        this.RenderState = rs.edit\r\n        this.Hide_Tool();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  get Name_ForPick() {\r\n    return `${this.Name}${this.D_UseType === mgsd_ut.template ? ' (from template)' : ''}`\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === rs._default) {\r\n            this.Name = obj.Content;\r\n          }\r\n        },\r\n        false\r\n      )\r\n\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get NameWrapper_View() {\r\n    return <div className='mgs__cell__wrapper'>\r\n      {this.NameView}\r\n      {this.DD_UseType === mgsdd_ut.query ?\r\n        this.ActiveTool.View : \r\n        (this.Commands.includes(pct.edit) ? this.SaveTable.View : '')}\r\n    </div>\r\n  }\r\n\r\n  // Description\r\n  get Description() {\r\n    return this.ModelItem.Description;\r\n  } set Description(v) {\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM = editTextUtil.get(this.Description, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === rs._default) {\r\n            this.Description = obj.Content;\r\n          }\r\n        },\r\n        false\r\n      )\r\n\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  get DescriptionView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.DescriptionVM} />\r\n  }\r\n\r\n  get DescriptionWrapper_View() {\r\n    return <div className='mgs__cell__wrapper'>\r\n      {this.DescriptionView}\r\n      {/* {this.Commands.includes(pct.edit)  */}\r\n      {comUtil.Validate(pct.edit)\r\n      && this.DD_UseType === mgsdd_ut.query ?\r\n        (this.D_UseType === mgsd_ut.project ?\r\n          this.AddTemplate.View : this.DeleteVM.View) : ''}\r\n    </div>\r\n  }\r\n\r\n  // AddTemplate\r\n  addTemplate\r\n  get AddTemplate() {\r\n    if (!this.addTemplate) {\r\n      this.addTemplate = util.GetAddTemplate(this)\r\n    } return this.addTemplate\r\n  }\r\n\r\n  // Active\r\n  activeTool\r\n  get ActiveTool() {\r\n    if (!this.activeTool) {\r\n      this.activeTool = util.GetActiveTool(this)\r\n    } return this.activeTool\r\n  }\r\n\r\n  isActive = false\r\n  get IsActive() {\r\n    return this.isActive\r\n  } set IsActive(v) {\r\n    this.isActive = v;\r\n  }\r\n\r\n  get ActiveStyle() {\r\n    return this.DD_UseType === mgsdd_ut.query &&\r\n      this.IsActive ? 'active' : ''\r\n  }\r\n\r\n  Set_Active = () => {\r\n    var q1 = pmDataVM().Mgs_Dict_Dict\r\n    if (q1.Current_MGS) {\r\n      q1.Current_MGS.IsActive = false\r\n    }\r\n\r\n    q1.Current_MGS = this;\r\n    this.IsActive = true;\r\n  }\r\n\r\n  UnSet_Active = () => {\r\n    pmDataVM().Mgs_Dict_Dict.Current_MGS = undefined;\r\n    this.IsActive = false;\r\n  }\r\n\r\n  // Save Table\r\n  get D_UseType() {\r\n    return this.Dict.UseType;\r\n  }\r\n\r\n  dd_UseType = undefined\r\n  get DD_UseType() {\r\n    if (!this.dd_UseType) {\r\n      this.dd_UseType = util.GetDD_UseType(this)\r\n    }\r\n    return this.dd_UseType;\r\n  } set DD_UseType(v) {\r\n    this.dd_UseType = v;\r\n  }\r\n\r\n  saveTable\r\n  get SaveTable() {\r\n    if (!this.saveTable) {\r\n      this.saveTable = util.GetSaveTable(this)\r\n    } return this.saveTable\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    switch (this.DD_UseType) {\r\n      case mgsdd_ut.query:\r\n        {\r\n          this.ActiveTool.Show();\r\n\r\n          switch (this.D_UseType) {\r\n            case mgsd_ut.project:\r\n              this.AddTemplate.Show();\r\n              break;\r\n            case mgsd_ut.template:\r\n              this.DeleteVM.Show();\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n      case mgsdd_ut.save:\r\n        this.SaveTable.Show();\r\n        break;\r\n    }\r\n  }\r\n\r\n  Hide_Tool() {\r\n    switch (this.DD_UseType) {\r\n      case mgsdd_ut.query:\r\n        {\r\n          this.ActiveTool.Hide();\r\n\r\n          switch (this.D_UseType) {\r\n            case mgsd_ut.project:\r\n              this.AddTemplate.Hide();\r\n              break;\r\n            case mgsd_ut.template:\r\n              this.DeleteVM.Hide();\r\n              break;\r\n          }\r\n        }\r\n        break;\r\n      case mgsdd_ut.save:\r\n        this.SaveTable.Hide();\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <tr className={`mgs__row ${this.ActiveStyle}`}\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      <td>{this.NameWrapper_View}</td>\r\n      <td>{this.DescriptionWrapper_View}</td>\r\n    </tr>\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { MassGroupSettingVM } from '../item/base/MassGroupSettingVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassGroupSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport './Tab.css'\r\nimport * as util from './TabUtil'\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetTest()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.View}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { MassGroupSetting_DictVM } from '../dict/base/MassGroupSetting_DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassGroupSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mgs__thead'>\r\n            <tr>\r\n              <th className='mgs__table__name'>Name</th>\r\n              <th className='mgs__table__description'>Description</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items?.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassGroupSetting_DictVMUtil'\r\nimport TableView from '../../table/TableView';\r\nimport * as iUtil from '../../item/base/MassGroupSettingVMUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\n\r\nexport class MassGroupSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = (v) => {\r\n    var list = this.Items;\r\n    if (list.length === this.ModelItem.Items.length) return\r\n\r\n    var obj = iUtil.get(v, this);\r\n    list.push(obj)\r\n  }\r\n\r\n  get UseType(){\r\n    return this.ModelItem.UseType\r\n  }\r\n\r\n  get CategoryName(){\r\n    return this.ModelItem.CategoryName\r\n  }\r\n\r\n  // Save\r\n  save\r\n  get Save() {\r\n    if (!this.save) {\r\n      this.save = util.GetSave(this)\r\n    } return this.save;\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get TableWrapper_View(){\r\n    return <div className='mgs__table__wrapper'>\r\n      <TableView store={this} />\r\n    </div>\r\n  }\r\n}","import { SaveFilled } from '@ant-design/icons';\r\nimport { Button, message } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as util from './SaveVMUtil'\r\nimport * as mgsdd_ut from '../dict/dict/MGS_Dict_Dict_UseType'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class SaveVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n\r\n    })\r\n  }\r\n\r\n  get Name(){\r\n    return this.ModelItem.Name;\r\n  } set Name(v){\r\n    this.ModelItem.Name = v\r\n  }\r\n\r\n  Run = () => {\r\n    this.ModelItem.Run();\r\n\r\n    var q1 = pmDataVM().Mgs_Dict_Dict;\r\n    if (q1.UseType === mgsdd_ut.save){\r\n      q1.Is_Modal_Visible = false;\r\n    }\r\n  }\r\n}","import { MassGroupSetting_DictVM } from \"./MassGroupSetting_DictVM\";\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as saveUtil from \"../../save/SaveVMUtil\";\r\nimport { PMData } from \"../../../../../single/model/PMData\";\r\nimport * as iUtil from '../../item/base/MassGroupSettingVMUtil'\r\nimport * as mgsd_ut from './MGS_Dict_UseType'\r\n\r\nexport const pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSetting_DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  q.OnAddItem = (v) => qI.AddItem(v)\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    // Ưu tiên data có projectId\r\n    var isValid = true;\r\n\r\n    if (q.UseType === mgsd_ut.project) {\r\n      var pId = pmData().CurrentProject?._id;\r\n      if (pId) {\r\n        if (data.length !== 0) {\r\n          isValid = data[0].projectId === pId\r\n        } else {\r\n          var oldData = q.Items;\r\n          if (oldData && oldData.length !== 0) {\r\n            isValid = oldData[0].projectId !== pId\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (isValid) {\r\n      q.Items = data.map(x => iUtil.get(x, q));\r\n    }\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}\r\n\r\nexport const GetSave = (q) => {\r\n  return saveUtil.get(q.ModelItem.Save, q)\r\n}","import { SaveVM } from \"./SaveVM\";\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI =new SaveVM();\r\n  \r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n// Method\r\n","import { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './MGS_Dict_DictVMUtil'\r\nimport * as ut from './MGS_Dict_Dict_UseType'\r\nimport './MGS_Dict_Dict.css'\r\nimport { PMDataVM } from '../../../../../single/form/PMDataVM';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class MGS_Dict_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      useType: observable,\r\n      current_MGS: observable,\r\n      Is_Modal_Visible: observable\r\n    })\r\n  }\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = util.GetItems(this)\r\n    } return this.items;\r\n  }\r\n\r\n  useType = ut.query\r\n  get UseType() {\r\n    return this.useType\r\n  } set UseType(v) {\r\n    this.useType = v;\r\n\r\n    util.SetUseType(this, v)\r\n  }\r\n\r\n  Toggle_UseType = () => {\r\n    this.UseType = this.UseType === ut.query ? ut.save : ut.query\r\n  }\r\n\r\n  queryTab\r\n  get QueryTab() {\r\n    if (!this.queryTab) {\r\n      this.queryTab = util.GetQueryTab(this)\r\n    } return this.queryTab\r\n  }\r\n\r\n  saveTab\r\n  get SaveTab() {\r\n    if (!this.saveTab) {\r\n      this.saveTab = util.GetSaveTab(this)\r\n    } return this.saveTab\r\n  }\r\n\r\n  get View() {\r\n    return util.GetView(this)\r\n  }\r\n\r\n  Is_Modal_Visible = false\r\n\r\n  get ModalView() {\r\n    return util.GetModalView(this)\r\n  }\r\n\r\n  mainItem\r\n  get MainItem() {\r\n    if (!this.mainItem) {\r\n      this.mainItem = util.GetMainItem(this)\r\n    } return this.mainItem\r\n  }\r\n\r\n  add_MGS\r\n  get Add_MGS() {\r\n    if (!this.add_MGS) {\r\n      this.add_MGS = util.GetAdd_MGS(this)\r\n    } return this.add_MGS\r\n  }\r\n\r\n  current_MGS = undefined\r\n  get Current_MGS() {\r\n    return this.current_MGS\r\n  } set Current_MGS(v) {\r\n    this.current_MGS = v;\r\n    this.ModelItem.Current_MGS = v?.ModelItem\r\n  }\r\n\r\n  get Pick_MGS_View() {\r\n    return util.GetPick_MGS_View(this)\r\n  }\r\n\r\n  OpenSave = () => {\r\n    this.Is_Modal_Visible = true\r\n    this.UseType = ut.save\r\n  }\r\n\r\n  get Save_MGS_View() {\r\n    return util.GetSave_MGS_View(this)\r\n  }\r\n\r\n  get Commands() {\r\n    return pmDataVM().Commands\r\n  }\r\n}","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../../util/commandUtil'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport { Tab } from '../../../../tab/Tab';\r\nimport * as mgsdUtil from '../base/MassGroupSetting_DictVMUtil'\r\nimport * as mgsd_ut from '../base/MGS_Dict_UseType'\r\nimport { MGS_Dict_DictVM } from './MGS_Dict_DictVM';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport { PlusCircleOutlined, SaveFilled } from '@ant-design/icons';\r\nimport { Button, message } from 'antd';\r\nimport { TextVM } from '../../../../../../text/TextVM';\r\nimport InputView from '../../../../../../input/InputView';\r\nimport * as ut from './MGS_Dict_Dict_UseType'\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport * as pct from '../../../../command/ProjectCommand'\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new MGS_Dict_DictVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => mgsdUtil.get(x, q));\r\n}\r\n\r\nexport const GetMainItem = (q) => {\r\n  return genUtil.SingleFilter\r\n    (q.Items, (x) => x.UseType === mgsd_ut.project)\r\n}\r\n\r\nexport const GetQueryTab = (q) => {\r\n  var qI = new Tab();\r\n\r\n  qI.Items = q.Items;\r\n  qI.TitleRender = (v) => v.CategoryName\r\n  qI.ContentRender = (v) => v.TableWrapper_View;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSaveTab = (q) => {\r\n  var qI = new Tab();\r\n\r\n  qI.Items = [q.MainItem]\r\n  qI.TitleRender = (v) => v.CategoryName\r\n  qI.ContentRender = (v) => v.TableWrapper_View;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetAdd_MGS = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  var nameVM = new TextVM();\r\n  nameVM.Placeholder = 'tên thiết lập ...'\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận thêm thiết lập?'\r\n\r\n  qI.OnPre_ShowHover = () => {\r\n    nameVM.Content = undefined\r\n  }\r\n\r\n  qI.Modal_InfoView = <InputView store={nameVM} />\r\n  qI.Modal_ContentView = <div className='msg__dd__save__add__hoverwrapper'>\r\n    {qI.Modal_InfoView}\r\n    {qI.Modal_ButtonView}\r\n  </div>\r\n\r\n  qI.ShowHover_Button = <Button type='primary' size='small'\r\n    className='btn-success'\r\n    onClick={qI.Show_Hover}>\r\n    <PlusCircleOutlined />\r\n  </Button>\r\n\r\n  qI.OnPreRun = () => {\r\n    if (!nameVM.Content || nameVM.Content.length === 0) {\r\n      qI.IsRun_Cancel = true\r\n      message.warn('Vui lòng nhập tên thiết lập!');\r\n    }\r\n  }\r\n\r\n  qI.OnRun = () => {\r\n    var save = q.MainItem.Save;\r\n    save.Name = nameVM.Content;\r\n    save.Run();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPick_MGS_View = (q) => {\r\n  var content = q.Current_MGS ? q.Current_MGS.Name_ForPick : '(none)'\r\n  var click = () => {\r\n    q.Is_Modal_Visible = true\r\n    q.UseType = ut.query\r\n  }\r\n\r\n  return <Button type='primary'\r\n    onClick={click}>\r\n    <div className='msg__dd__pick__wrapper'>\r\n      <div>CHỌN THIẾT LẬP:</div>\r\n      <div className='msg__dd__pick__current'>{content}</div>\r\n    </div>\r\n  </Button>\r\n}\r\n\r\nexport const GetSave_MGS_View = (q) => {\r\n  if (comUtil.Validate(pct.edit)){\r\n    return <Button type='primary' size='small'\r\n      onClick={q.OpenSave}>\r\n      <SaveFilled />\r\n    </Button>\r\n  }\r\n  return ''\r\n}\r\n\r\nexport const GetView = (q) => {\r\n  switch (q.UseType) {\r\n    case ut.query:\r\n      return <>\r\n        {q.QueryTab.View}\r\n      </>\r\n    case ut.save:\r\n      return <>\r\n        <div className='msg__dd__save__wrapper'>\r\n          <div className='msg__dd__save__add'>\r\n            {q.Commands.includes(pct.edit) ? q.Add_MGS.View : ''}\r\n          </div>\r\n          <div className='msg__dd__save__main'>\r\n            {q.SaveTab.ContentView}\r\n          </div>\r\n        </div>\r\n      </>\r\n  }\r\n}\r\n\r\nexport const GetModalView = (q) => {\r\n  var title = q.UseType === ut.query ?\r\n    'CHỌN THIẾT LẬP' : 'LƯU THIẾT LẬP'\r\n\r\n  const toggleVisible = () => {\r\n    q.Is_Modal_Visible = !q.Is_Modal_Visible\r\n  }\r\n\r\n  return <Modal title={title} visible={q.Is_Modal_Visible}\r\n    width={1000}\r\n    className='msg__modal'\r\n    onCancel={toggleVisible}\r\n    footer={null}>\r\n    <div>\r\n      {q.View}\r\n    </div>\r\n  </Modal>\r\n}\r\n\r\n// Method\r\nexport const SetUseType = (q, v) => {\r\n  var host = q.MainItem;\r\n\r\n  const setObj = () => {\r\n    host.Items.forEach(x => {\r\n      x.DD_UseType = v\r\n    })\r\n  }\r\n\r\n  if (host.Items) {\r\n    setObj();\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      setObj\r\n    )\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { MassDetailSettingVM } from './MassDetailSettingVM'\r\nimport { EntDelete } from '../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport { CheckCircleOutlined, CloseCircleOutlined, SaveFilled } from '@ant-design/icons';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new MassDetailSettingVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetActiveTool = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Retrieve_WrapperView = () => !q.IsActive ?\r\n    <Button type='primary' size='small'\r\n      onClick={q.Set_Active}>\r\n      <CheckCircleOutlined />\r\n    </Button>\r\n    :\r\n    <Button type='primary' size='small'\r\n      onClick={q.UnSet_Active}\r\n      className='btn-warning'>\r\n      <CloseCircleOutlined />\r\n    </Button>\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSaveTable = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận lưu đè?'\r\n  qI.ShowHover_Button = <Button type='primary' size='small'\r\n    className='btn-success'\r\n    onClick={qI.Show_Hover}>\r\n    <SaveFilled />\r\n  </Button>\r\n\r\n  qI.OnRun = () => {\r\n    var save = q.Dict.Save;\r\n    save.Name = q.Name;\r\n    save.Run();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDD_UseType = (q) => {\r\n  return q.Dict.Dict.UseType\r\n}\r\n\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}","export const query = 'query'\r\nexport const save = 'save'","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../util/commandUtil'\r\nimport * as util from './MassDetailSettingVMUtil'\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../text/EditableTextView';\r\nimport './MassDetailSetting.css'\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as mdsdd_ut from '../dict/dict/MDS_Dict_Dict_UseType'\r\nimport * as pct from '../../../command/ProjectCommand'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class MassDetailSettingVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isActive: observable,\r\n      dd_UseType: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get projectId() {\r\n    return this.ModelItem.projectId;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n    this.DescriptionVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.Commands.includes(pct.edit)) {\r\n      if (this.RenderState === rs._default) {\r\n        this.RenderState = rs.edit\r\n        this.Hide_Tool();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  get Name_ForPick() {\r\n    return this.Name\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === rs._default) {\r\n            this.Name = obj.Content;\r\n          }\r\n        },\r\n        false\r\n      )\r\n\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mds__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get NameWrapper_View() {\r\n    return <div className='mds__cell__wrapper'>\r\n      {this.NameView}\r\n      {this.DD_UseType === mdsdd_ut.query ?\r\n        this.ActiveTool.View :\r\n        (this.Commands.includes(pct.edit) ? this.SaveTable.View : '')}\r\n    </div>\r\n  }\r\n\r\n  // Description\r\n  get Description() {\r\n    return this.ModelItem.Description;\r\n  } set Description(v) {\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM = editTextUtil.get(this.Description, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === rs._default) {\r\n            this.Description = obj.Content;\r\n          }\r\n        },\r\n        false\r\n      )\r\n\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  get DescriptionView() {\r\n    return <EditableTextView className='mds__cell__main'\r\n      store={this.DescriptionVM} />\r\n  }\r\n\r\n  get DescriptionWrapper_View() {\r\n    return <div className='mds__cell__wrapper'>\r\n      {this.DescriptionView}\r\n      {comUtil.Validate(pct.edit)\r\n        && this.DD_UseType === mdsdd_ut.query ? this.DeleteVM.View : ''}\r\n    </div>\r\n  }\r\n  \r\n  // Active\r\n  activeTool\r\n  get ActiveTool() {\r\n    if (!this.activeTool) {\r\n      this.activeTool = util.GetActiveTool(this)\r\n    } return this.activeTool\r\n  }\r\n\r\n  isActive = false\r\n  get IsActive() {\r\n    return this.isActive\r\n  } set IsActive(v) {\r\n    this.isActive = v;\r\n  }\r\n\r\n  get ActiveStyle() {\r\n    return this.DD_UseType === mdsdd_ut.query &&\r\n      this.IsActive ? 'active' : ''\r\n  }\r\n\r\n  Set_Active = () => {\r\n    var q1 = pmDataVM().Mds_Dict_Dict\r\n    if (q1.TempCurrentItem) {\r\n      q1.TempCurrentItem.IsActive = false\r\n    }\r\n\r\n    q1.TempCurrentItem = this;\r\n    this.IsActive = true;\r\n  }\r\n\r\n  UnSet_Active = () => {\r\n    pmDataVM().Mds_Dict_Dict.TempCurrentItem = undefined;\r\n    this.IsActive = false;\r\n  }\r\n\r\n  // Save Table\r\n  dd_UseType = undefined\r\n  get DD_UseType() {\r\n    if (!this.dd_UseType) {\r\n      this.dd_UseType = util.GetDD_UseType(this)\r\n    }\r\n    return this.dd_UseType;\r\n  } set DD_UseType(v) {\r\n    this.dd_UseType = v;\r\n  }\r\n\r\n  saveTable\r\n  get SaveTable() {\r\n    if (!this.saveTable) {\r\n      this.saveTable = util.GetSaveTable(this)\r\n    } return this.saveTable\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    switch (this.DD_UseType) {\r\n      case mdsdd_ut.query:\r\n        {\r\n          this.ActiveTool.Show();\r\n          this.DeleteVM.Show();\r\n        }\r\n        break;\r\n      case mdsdd_ut.save:\r\n        this.SaveTable.Show();\r\n        break;\r\n    }\r\n  }\r\n\r\n  Hide_Tool() {\r\n    switch (this.DD_UseType) {\r\n      case mdsdd_ut.query:\r\n        {\r\n          this.ActiveTool.Hide();\r\n          this.DeleteVM.Hide();\r\n        }\r\n        break;\r\n      case mdsdd_ut.save:\r\n        this.SaveTable.Hide();\r\n        break;\r\n    }\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <tr className={`mds__row ${this.ActiveStyle}`}\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      <td>{this.NameWrapper_View}</td>\r\n      <td>{this.DescriptionWrapper_View}</td>\r\n    </tr>\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { MassDetailSettingVM } from '../item/MassDetailSettingVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { MassDetailSetting_DictVM } from '../dict/MassDetailSetting_DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mds__thead'>\r\n            <tr>\r\n              <th className='mds__table__name'>Name</th>\r\n              <th className='mds__table__description'>Description</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items?.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport * as util from './MassDetailSetting_DictVMUtil'\r\nimport TableView from '../table/TableView';\r\nimport * as iUtil from '../item/MassDetailSettingVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport class MassDetailSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = (v) => {\r\n    var list = this.Items;\r\n    if (list.length === this.ModelItem.Items.length) return\r\n\r\n    var obj = iUtil.get(v, this);\r\n    list.push(obj)\r\n  }\r\n\r\n  get UseType(){\r\n    return this.ModelItem.UseType\r\n  }\r\n\r\n  get CategoryName(){\r\n    return this.ModelItem.CategoryName\r\n  }\r\n\r\n  // Save\r\n  save\r\n  get Save() {\r\n    if (!this.save) {\r\n      this.save = util.GetSave(this)\r\n    } return this.save;\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get TableWrapper_View(){\r\n    return <div className='mgs__table__wrapper'>\r\n      <TableView store={this} />\r\n    </div>\r\n  }\r\n}","import { SaveFilled } from '@ant-design/icons';\r\nimport { Button, message } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as util from './SaveVMUtil'\r\nimport * as mdsdd_ut from '../dict/dict/MDS_Dict_Dict_UseType'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class SaveVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n\r\n    })\r\n  }\r\n\r\n  get Name(){\r\n    return this.ModelItem.Name;\r\n  } set Name(v){\r\n    this.ModelItem.Name = v\r\n  }\r\n\r\n  Run = () => {\r\n    this.ModelItem.Run();\r\n\r\n    var q1 = pmDataVM().Mds_Dict_Dict;\r\n    if (q1.UseType === mdsdd_ut.save){\r\n      q1.Is_Modal_Visible = false;\r\n    }\r\n  }\r\n}","import { MassDetailSetting_DictVM } from \"./MassDetailSetting_DictVM\";\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as selUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as saveUtil from \"../save/SaveVMUtil\";\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\nimport * as iUtil from '../item/MassDetailSettingVMUtil'\r\n\r\nexport const pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new MassDetailSetting_DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  q.OnAddItem = (v) => qI.AddItem(v)\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}\r\n\r\nexport const GetSave = (q) => {\r\n  return saveUtil.get(q.ModelItem.Save, q)\r\n}","import { SaveVM } from \"./SaveVM\";\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI =new SaveVM();\r\n  \r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n\r\n\r\n// Method","import { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as util from './MDS_Dict_DictVMUtil'\r\nimport * as ut from './MDS_Dict_Dict_UseType'\r\nimport './MDS_Dict_Dict.css'\r\nimport { PMDataVM } from '../../../../../single/form/PMDataVM';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class MDS_Dict_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      useType: observable,\r\n      current_MDS : observable,\r\n      Is_Modal_Visible : observable\r\n    })\r\n  }\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = util.GetItems(this)\r\n    } return this.items;\r\n  }\r\n\r\n  useType = ut.query\r\n  get UseType(){\r\n    return this.useType\r\n  } set UseType(v){\r\n    this.useType = v;\r\n\r\n    util.SetUseType(this, v)\r\n  }\r\n\r\n  Toggle_UseType = () => {\r\n    this.UseType = this.UseType === ut.query ? ut.save : ut.query\r\n  }\r\n\r\n  queryTab\r\n  get QueryTab() {\r\n    if (!this.queryTab) {\r\n      this.queryTab = util.GetQueryTab(this)\r\n    } return this.queryTab\r\n  }\r\n\r\n  saveTab\r\n  get SaveTab() {\r\n    if (!this.saveTab) {\r\n      this.saveTab = util.GetSaveTab(this)\r\n    } return this.saveTab\r\n  }\r\n\r\n  get View() {\r\n    return util.GetView(this)\r\n  }\r\n\r\n  Is_Modal_Visible = false\r\n\r\n  get ModalView() {\r\n    return util.GetModalView(this)\r\n  }\r\n\r\n  mainItem\r\n  get MainItem(){\r\n    if (!this.mainItem){\r\n      this.mainItem = util.GetMainItem(this)\r\n    } return this.mainItem\r\n  }\r\n\r\n  add_MDS\r\n  get Add_MDS(){\r\n    if (!this.add_MDS){\r\n      this.add_MDS = util.GetAdd_MDS(this)\r\n    } return this.add_MDS\r\n  }\r\n\r\n  current_MDS = undefined\r\n  get Current_MDS() {\r\n    return this.current_MDS\r\n  } set Current_MDS(v) {\r\n    this.current_MDS = v;\r\n    this.ModelItem.Current_MDS = v?.ModelItem\r\n  }\r\n\r\n  get Pick_MDS_View(){\r\n    return util.GetPick_MDS_View(this)\r\n  }\r\n\r\n  OpenSave = () => {\r\n    this.Is_Modal_Visible = true\r\n    this.UseType = ut.save\r\n  }\r\n\r\n  get Save_MDS_View(){\r\n    return util.GetSave_MDS_View(this)\r\n  }\r\n\r\n  get Commands(){\r\n    return pmDataVM().Commands\r\n  }\r\n\r\n  // Table\r\n  get Table(){\r\n    return this.ModelItem.Table\r\n  }\r\n}","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../../util/commandUtil'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport { Tab } from '../../../../tab/Tab';\r\nimport * as mdsdUtil from '../MassDetailSetting_DictVMUtil'\r\nimport { MDS_Dict_DictVM } from './MDS_Dict_DictVM';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport { PlusCircleOutlined, SaveFilled } from '@ant-design/icons';\r\nimport { Button, message } from 'antd';\r\nimport { TextVM } from '../../../../../../text/TextVM';\r\nimport InputView from '../../../../../../input/InputView';\r\nimport * as ut from './MDS_Dict_Dict_UseType'\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport * as pct from '../../../../command/ProjectCommand'\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new MDS_Dict_DictVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => mdsdUtil.get(x, q));\r\n}\r\n\r\nexport const GetMainItem = (q) => {\r\n  return q.Items[0]\r\n}\r\n\r\nexport const GetQueryTab = (q) => {\r\n  var qI = new Tab();\r\n\r\n  qI.Items = q.Items;\r\n  qI.TitleRender = (v) => v.CategoryName\r\n  qI.ContentRender = (v) => v.TableWrapper_View;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSaveTab = (q) => {\r\n  var qI = new Tab();\r\n\r\n  qI.Items = [q.MainItem]\r\n  qI.TitleRender = (v) => v.CategoryName\r\n  qI.ContentRender = (v) => v.TableWrapper_View;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetAdd_MDS = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  var nameVM = new TextVM();\r\n  nameVM.Placeholder = 'tên thiết lập ...'\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận thêm thiết lập?'\r\n\r\n  qI.OnPre_ShowHover = () => {\r\n    nameVM.Content = undefined\r\n  }\r\n\r\n  qI.Modal_InfoView = <InputView store={nameVM} />\r\n  qI.Modal_ContentView = <div className='mdg__dd__save__add__hoverwrapper'>\r\n    {qI.Modal_InfoView}\r\n    {qI.Modal_ButtonView}\r\n  </div>\r\n\r\n  qI.ShowHover_Button = <Button type='primary' size='small'\r\n    className='btn-success'\r\n    onClick={qI.Show_Hover}>\r\n    <PlusCircleOutlined />\r\n  </Button>\r\n\r\n  qI.OnPreRun = () => {\r\n    if (!nameVM.Content || nameVM.Content.length === 0) {\r\n      qI.IsRun_Cancel = true\r\n      message.warn('Vui lòng nhập tên thiết lập!');\r\n    }\r\n  }\r\n\r\n  qI.OnRun = () => {\r\n    var save = q.MainItem.Save;\r\n    save.Name = nameVM.Content;\r\n    save.Run();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPick_MDS_View = (q) => {\r\n  var content = q.Current_MDS ? q.Current_MDS.Name_ForPick : '(none)'\r\n  var click = () => {\r\n    if (q.TempCurrentItem){\r\n      q.TempCurrentItem.UnSet_Active();\r\n    }\r\n\r\n    q.Is_Modal_Visible = true\r\n    q.UseType = ut.query\r\n  }\r\n\r\n  return <Button type='primary'\r\n    onClick={click}>\r\n    <div className='mdg__dd__pick__wrapper'>\r\n      <div>CHỌN THIẾT LẬP:</div>\r\n      <div className='mdg__dd__pick__current'>{content}</div>\r\n    </div>\r\n  </Button>\r\n}\r\n\r\nexport const GetSave_MDS_View = (q) => {\r\n  if (comUtil.Validate(pct.edit)){\r\n    return <Button type='primary' size='small'\r\n      onClick={q.OpenSave}>\r\n      <SaveFilled />\r\n    </Button>\r\n  }\r\n  return ''\r\n}\r\n\r\nexport const GetView = (q) => {\r\n  switch (q.UseType) {\r\n    case ut.query:\r\n      return <>\r\n        {q.QueryTab.ContentView}\r\n      </>\r\n    case ut.save:\r\n      return <>\r\n        <div className='mdg__dd__save__wrapper'>\r\n          <div className='mdg__dd__save__add'>\r\n            {comUtil.Validate(pct.edit) ? q.Add_MDS.View : ''}\r\n          </div>\r\n          <div className='mdg__dd__save__main'>\r\n            {q.SaveTab.ContentView}\r\n          </div>\r\n        </div>\r\n      </>\r\n  }\r\n}\r\n\r\nexport const GetModalView = (q) => {\r\n  var title = q.UseType === ut.query ?\r\n    'CHỌN THIẾT LẬP' : 'LƯU THIẾT LẬP'\r\n\r\n    const hideVisible = () => {\r\n      q.Is_Modal_Visible = false\r\n    }\r\n\r\n    const modalOK = () => {\r\n      q.Is_Modal_Visible = false\r\n      q.Current_MDS = q.TempCurrentItem\r\n    }\r\n\r\n  return <Modal title={title} visible={q.Is_Modal_Visible}\r\n    width={1000}\r\n    className='msg__modal'\r\n    onCancel={hideVisible}\r\n    footer={\r\n      <>\r\n        <Button type='primary' size='small'\r\n          onClick={modalOK}>ok</Button>\r\n        <Button type='text' size='small'\r\n          onClick={hideVisible}>cancel</Button>\r\n      </>\r\n    }>\r\n    <div>\r\n      {q.View}\r\n    </div>\r\n  </Modal>\r\n}\r\n\r\n// Method\r\nexport const SetUseType = (q, v) => {\r\n  var host = q.MainItem;\r\n\r\n  const setObj = () => {\r\n    host.Items.forEach(x => {\r\n      x.DD_UseType = v\r\n    })\r\n  }\r\n\r\n  if (host.Items) {\r\n    setObj();\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      setObj\r\n    )\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { EntDelete } from '../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport * as d_ut from '../../../../../delete/EntDelete_UseType'\r\nimport * as d_vt from '../../../../../delete/EntDelete_VisibleType'\r\nimport { Button, message } from 'antd';\r\nimport { CheckCircleOutlined, CloseCircleOutlined, SaveFilled } from '@ant-design/icons';\r\nimport { ItemVM } from './ItemVM';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetNameForView = (q) => {\r\n  return `${q.Name} (${q.MassType})`;\r\n}\r\n\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.UseType = d_ut.style\r\n  qI.Retrieve_WrapperView = () => <div className='f'>\r\n    <Button type='primary' size='small'\r\n      onClick={q.SetValue}>ok\r\n    </Button>\r\n    {q.CanEdit ?\r\n      <Button type='primary' size='small'\r\n        className='btn-danger'\r\n        onClick={q.Delete}>x\r\n      </Button>\r\n      : ''}\r\n  </div>\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../util/commandUtil'\r\nimport * as util from './ItemVMUtil'\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../text/EditableTextView';\r\nimport './Item.css'\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as pct from '../../../command/ProjectCommand'\r\nimport * as d_ut from '../dict/base/Dict_UseType'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      nameForView : observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.CanEdit && comUtil.Validate(pct.edit)) {\r\n      if (this.RenderState === rs._default) {\r\n        this.RenderState = rs.edit\r\n        this.Hide_Tool();\r\n      }\r\n    }\r\n  }\r\n\r\n  // UseType\r\n  get CanEdit(){\r\n    return this.Dict.QueryTab.CurrentItem.UseType === d_ut.partial\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n    this.NameForView = util.GetNameForView(this)\r\n  }\r\n\r\n  nameForView = undefined\r\n  get NameForView(){\r\n    if (!this.nameForView){\r\n      this.nameForView = util.GetNameForView(this)\r\n    } return this.nameForView;\r\n  } set NameForView(v){\r\n    this.nameForView = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Placeholder = 'nhập thông tin ...'\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === rs._default) {\r\n            this.Name = obj.Content;\r\n          }\r\n        },\r\n        false\r\n      )\r\n\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='sg__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get NameWrapper_View() {\r\n    return <div className='sg__cell__wrapper f'>\r\n      <div className='sg__cell_name__wrapper'>\r\n        {this.CanEdit ? this.NameView : this.NameForView}\r\n      </div>\r\n      {comUtil.Validate(pct.edit) ?\r\n        <div className='sg__item__delete'>\r\n          {comUtil.Validate(pct.edit) ? this.DeleteVM.View : ''}\r\n        </div>\r\n        : ''}\r\n    </div>\r\n  }\r\n\r\n  // MassType\r\n  get MassType(){\r\n    return this.ModelItem.MassType\r\n  }\r\n\r\n  get Field(){\r\n    return this.ModelItem.Field\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <div className={`sg__row`}\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      {this.NameWrapper_View}\r\n    </div>\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Data\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    // Cancel Close Popover\r\n    this.Dict.CurrentPopover.IsCancel = true;\r\n\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.Dict.Items.forEach(x => {\r\n      x.Items.splice(x.Items.indexOf(this), 1)\r\n    })\r\n\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n\r\n  get Commands() {\r\n    return pmDataVM().Commands;\r\n  }\r\n\r\n  // SetValue\r\n  SetValue = () => {\r\n    this.Dict.SetValue(this.Name);\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ItemVM } from '../item/ItemVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { DictVM } from '../dict/base/DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* <table>\r\n          <tbody>\r\n            {data.Items?.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            })}\r\n          </tbody>\r\n        </table> */}\r\n\r\n        <div>\r\n          {data.Items?.map(x => {\r\n            return <TableItemView key={x.id} store={x} />\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport TableView from '../../table/TableView';\r\nimport * as iUtil from '../../item/ItemVMUtil'\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../../util/commandUtil'\r\nimport * as pct from '../../../../command/ProjectCommand'\r\nimport * as ut from './Dict_UseType'\r\nimport { Button } from 'antd';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = util.GetItems(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  addData\r\n  get AddData() {\r\n    if (!this.addData) {\r\n      this.addData = util.GetAddData(this)\r\n    } return this.addData;\r\n  }\r\n\r\n  get UseType() {\r\n    return this.ModelItem.UseType\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get TableWrapper_View() {\r\n    return <div className='sg__table__wrapper f'>\r\n      {this.UseType === ut.partial && comUtil.Validate(pct.edit)\r\n        ? this.AddData.View : ''}\r\n      <TableView store={this} />\r\n    </div>\r\n  }\r\n}","import { DictVM } from \"./DictVM\";\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { PMData } from \"../../../../../single/model/PMData\";\r\nimport * as imUtil from '../../item/ItemUtil'\r\nimport * as iUtil from '../../item/ItemVMUtil'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport * as d_vt from '../../../../../../delete/EntDelete_VisibleType'\r\nimport * as ut from './Dict_UseType'\r\nimport { Button } from 'antd';\r\nimport './Dict.css'\r\n\r\nexport const pmData = () => PMData.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  q.OnAddItem = (v) => qI.AddItem(v)\r\n  q.OnSet_Items = (v) => qI.Items = GetItems(qI)\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  var list = q.Dict.Data;\r\n  var field = q.Dict.CurrentField\r\n\r\n  switch (q.UseType) {\r\n    case ut.partial:\r\n      var massType = q.Dict.CurrentMassType;    \r\n      return list.filter(x => x.MassType === massType && \r\n        x.Field === field);\r\n    case ut.all:\r\n      return list.filter(x => x.Field === field);\r\n  }\r\n}\r\n\r\nexport const GetAddData = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  const func = () => {\r\n    var host = q.Dict.ModelItem;\r\n    host.AddData();\r\n  }\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Retrieve_WrapperView = () => <Button type='primary' size='small'\r\n    className='sg__additem'\r\n    onClick={func}>+</Button>\r\n\r\n  return qI;\r\n}","import { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Dict_DictVMUtil'\r\nimport './Dict_Dict.css'\r\nimport * as dataItemUtil from '../../item/ItemVMUtil'\r\n\r\nexport class Dict_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Is_Modal_Visible : observable,\r\n      SetValue : observable\r\n    })\r\n  }\r\n\r\n  items\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = util.GetItems(this)\r\n    } return this.items;\r\n  }\r\n\r\n  get Data(){\r\n    return this.ModelItem.Data\r\n  }\r\n\r\n  queryTab\r\n  get QueryTab() {\r\n    if (!this.queryTab) {\r\n      this.queryTab = util.GetQueryTab(this)\r\n    } return this.queryTab\r\n  }\r\n\r\n  get View() {\r\n    return util.GetView(this)\r\n  }\r\n\r\n  Is_Modal_Visible = false\r\n\r\n  get ModalView() {\r\n    return util.GetModalView(this)\r\n  }\r\n\r\n  currentItem = undefined\r\n  get CurrentItem() {\r\n    return this.currentItem\r\n  } set CurrentItem(v) {\r\n    this.currentItem = v;\r\n    this.ModelItem.Current_MDS = v?.ModelItem ? v.ModelItem : v\r\n  }\r\n\r\n  popover_Render\r\n  get Popover_Render(){\r\n    if (!this.popover_Render){\r\n      this.popover_Render = util.GetDefaultPopover_Render(this)\r\n    } return this.popover_Render\r\n  } set Popover_Render(v){\r\n    this.popover_Render = v;\r\n  }\r\n\r\n  // Field\r\n  currentField = undefined\r\n  get CurrentField(){\r\n    return this.currentField\r\n  } set CurrentField(v){\r\n    this.currentField = v;\r\n    this.ModelItem.CurrentField = v;\r\n  }\r\n\r\n  // MassType\r\n  currentMassType = undefined\r\n  get CurrentMassType(){\r\n    return this.currentMassType\r\n  } set CurrentMassType(v){\r\n    this.currentMassType = v;\r\n    this.ModelItem.CurrentMassType = v;\r\n  }\r\n\r\n  // Data\r\n  data\r\n  get Data(){\r\n    if (!this.data){\r\n      this.data = util.GetData(this)\r\n    } return this.data\r\n  } set Data(v){\r\n    this.data = v;\r\n  }\r\n\r\n  AddData = (v) => {\r\n    var qI = dataItemUtil.get(v, this)\r\n    qI.Edit();\r\n    this.Data.push(qI)\r\n    \r\n    this.Items.forEach(x => {\r\n      var list = x.Items;\r\n      if (list.length !== this.Data.length){\r\n        x.Items.push(qI)\r\n      }\r\n    })\r\n  }\r\n\r\n  // Initial\r\n  Initial = () => {\r\n    this.QueryTab.CurrentItem = this.Items[0]\r\n    this.ModelItem.Initial();\r\n  }\r\n\r\n  // Refine\r\n  Refine = () => {\r\n    util.Refine(this);\r\n  }\r\n\r\n  // SetValue\r\n  SetValue = undefined\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle);\r\n  }\r\n}","export const hover = 'hover'\r\nexport const click = 'click'","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { EntPopover } from './EntPopover';\r\nimport { Button, Popover } from 'antd';\r\nimport './EntPopover.css'\r\nimport * as tt from './EntPopover_TriggerType'\r\n\r\nclass EntPopoverView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntPopover()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n\r\n    this.state.ClickRef = React.createRef();\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='popover__wrapper' style={data.WrapperStyle}\r\n          onMouseEnter={data.Trigger === tt.hover ? data.ShowContent : undefined}\r\n          onMouseLeave={data.Trigger === tt.hover ? data.HideContent : undefined}>\r\n          <div className='popover__title__wrapper'\r\n            onClick={data.Trigger === tt.click ? data.ToggleContent : undefined}>\r\n            {data.Title}\r\n          </div>\r\n          {data.Is_Content_Visible ?\r\n            <div className='popover__content__wrapper' ref={data.ClickRef}>\r\n              <div className='popover__content__dec'>\r\n                <div className='popover__content__arrow' />\r\n                {data.Content}\r\n              </div>\r\n            </div>\r\n            : ''}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(EntPopoverView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as util from './EntPopoverUtil'\r\nimport EntPopoverView from './EntPopoverView';\r\nimport * as tt from './EntPopover_TriggerType'\r\n\r\nexport class EntPopover {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      is_Content_Visible: observable,\r\n      Trigger: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    } return this._id;\r\n  } set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender) {\r\n      this.titleRender = util.GetDefault_TitleRender(this)\r\n    } return this.titleRender\r\n  } set TitleRender(v) {\r\n    this.titleRender = v;\r\n  }\r\n\r\n  get Title() {\r\n    return this.TitleRender();\r\n  }\r\n\r\n  contentRender\r\n  get ContentRender() {\r\n    if (!this.contentRender) {\r\n      this.contentRender = util.GetDefault_ContentRender(this)\r\n    } return this.contentRender\r\n  } set ContentRender(v) {\r\n    this.contentRender = v;\r\n  }\r\n\r\n  get Content() {\r\n    return this.ContentRender();\r\n  }\r\n\r\n  get WrapperStyle() {\r\n    return this.Is_Content_Visible ?\r\n      { zIndex: 100 } : undefined\r\n  }\r\n\r\n  // Trigger\r\n  Trigger = tt.hover\r\n\r\n  is_Content_Visible = false\r\n  get Is_Content_Visible() {\r\n    return this.is_Content_Visible\r\n  } set Is_Content_Visible(v) {\r\n    if (this.PreSet_Is_Content_Visible) {\r\n      this.PreSet_Is_Content_Visible(v)\r\n    }\r\n\r\n    this.is_Content_Visible = v;\r\n    if (v) {\r\n      this.Init_ClickOutside = true;\r\n      document.addEventListener('click', this.OnClickOutside);\r\n    } else {\r\n      document.removeEventListener('click', this.OnClickOutside);\r\n    }\r\n\r\n    if (this.OnSet_Is_Content_Visible) {\r\n      this.OnSet_Is_Content_Visible(v)\r\n    }\r\n  }\r\n\r\n  ShowContent = () => {\r\n    this.Is_Content_Visible = true\r\n  }\r\n\r\n  HideContent = () => {\r\n    this.Is_Content_Visible = false\r\n  }\r\n\r\n  ToggleContent = () => {\r\n    this.Is_Content_Visible = !this.Is_Content_Visible\r\n  }\r\n\r\n  OnClickOutside = (e) => {\r\n    if (this.Trigger === tt.click) {\r\n      if (this.IsCancel){\r\n        this.IsCancel = false\r\n        return;\r\n      }\r\n      if (this.Init_ClickOutside) {\r\n        this.Init_ClickOutside = false;\r\n        return;\r\n      }\r\n\r\n      if (this.ClickRef) {\r\n        var current = this.ClickRef.current;\r\n        if (!current) return;\r\n\r\n        var target = e.target;\r\n        var isInside = false\r\n        const func = (p, c) => {\r\n          if (p.contains(c)) {\r\n            isInside = true;\r\n          } else {\r\n            Array.from(p.children).forEach(x => func(x, c))\r\n          }\r\n        }\r\n\r\n        func(current, target)\r\n\r\n        if (!isInside) {\r\n          this.Is_Content_Visible = false\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // View\r\n  get View() {\r\n    return <EntPopoverView key={this.id} store={this} />\r\n  }\r\n}","import { Button, Popover } from 'antd'\r\nimport { EntPopover } from './EntPopover'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new EntPopover();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefault_TitleRender = (q) => {\r\n  return () => 'Title'\r\n}\r\n\r\nexport const GetDefault_ContentRender = (q) => {\r\n  return () => 'Content'\r\n}","import * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../../../../util/commandUtil'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport { Tab } from '../../../../tab/Tab';\r\nimport * as iUtil from '../base/DictVMUtil'\r\nimport { Dict_DictVM } from './Dict_DictVM';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport { PlusCircleOutlined, SaveFilled } from '@ant-design/icons';\r\nimport { Button, message, Popover } from 'antd';\r\nimport { TextVM } from '../../../../../../text/TextVM';\r\nimport InputView from '../../../../../../input/InputView';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport * as pct from '../../../../command/ProjectCommand'\r\nimport * as i_ut from '../base/Dict_UseType'\r\nimport * as popoverUtil from '../../../../../../popover/EntPopoverUtil';\r\nimport * as dataItemUtil from '../../item/ItemVMUtil'\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new Dict_DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  q.OnAddData = (v) => qI.AddData(v)\r\n  q.OnSet_Data = (v) => qI.Data = GetData(qI)\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => iUtil.get(x, q));\r\n}\r\n\r\nexport const GetQueryTab = (q) => {\r\n  var qI = new Tab();\r\n\r\n  qI.Items = q.Items;\r\n  qI.TitleRender = (v) => {\r\n    switch (v.UseType) {\r\n      case i_ut.partial:\r\n        return q.CurrentMassType\r\n      case i_ut.all:\r\n        return 'All'\r\n    }\r\n  }\r\n  qI.ContentRender = (v) => v.TableWrapper_View;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultPopover_Render = (q) => {\r\n  return (button) => {\r\n    var qI = popoverUtil.get();\r\n\r\n    qI.Trigger = 'click'\r\n    qI.TitleRender = () => button;\r\n    qI.ContentRender = () => q.View;\r\n\r\n    qI.PreSet_Is_Content_Visible = (v) => {\r\n      if (v) {\r\n        q.Initial();\r\n      }\r\n    }\r\n    qI.OnSet_Is_Content_Visible = (v) => {\r\n      if (!v) {\r\n        q.Refine();\r\n        q.SaveDatabase(false);\r\n      }\r\n    }\r\n\r\n    return qI;\r\n  }\r\n}\r\n\r\nexport const GetView = (q) => {\r\n  return <div className='sg__view__wrapper'>\r\n    {q.QueryTab.View}\r\n  </div>\r\n}\r\n\r\nexport const GetModalView = (q) => {\r\n  var title = 'THIẾT LẬP'\r\n\r\n  const hideVisible = () => {\r\n    q.Is_Modal_Visible = false\r\n  }\r\n\r\n  const modalOK = () => {\r\n    q.Is_Modal_Visible = false\r\n    q.CurrentItem = q.TempCurrentItem\r\n  }\r\n\r\n  return <Modal title={title} visible={q.Is_Modal_Visible}\r\n    width={1000}\r\n    className='msg__modal'\r\n    onCancel={hideVisible}\r\n    footer={\r\n      <>\r\n        <Button type='primary' size='small'\r\n          onClick={modalOK}>ok</Button>\r\n        <Button type='text' size='small'\r\n          onClick={hideVisible}>cancel</Button>\r\n      </>\r\n    }>\r\n    <div>\r\n      {q.View}\r\n    </div>\r\n  </Modal>\r\n}\r\n\r\nexport const GetData = (q) => {\r\n  return q.ModelItem.Data.map(x => dataItemUtil.get(x, q));\r\n}\r\n\r\n// Method\r\nexport const Refine = (q) => {\r\n  // Lấy list trong công tác và field hiện tại\r\n  var list = q.Items[0].Items;\r\n  var removes = []\r\n\r\n  list.forEach((x,i,a) => {\r\n    var name = x.Name;\r\n    if (!name || name.length === 0){\r\n      removes.push(x);\r\n    } else {\r\n      if (i !== a.findIndex(y => y.Name === name)){\r\n        removes.push(x)\r\n      }\r\n    }\r\n  })\r\n\r\n  removes.forEach(x => x.Delete());\r\n}\r\n\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './BaseVMUtil'\r\n\r\nexport class BaseVM {\r\n  listData\r\n  get ListData(){\r\n    if (!this.listData){\r\n      this.listData = util.GetListData(this)\r\n    } return this.listData\r\n  }\r\n\r\n  categoryBindingData\r\n  get CategoryBindingData(){\r\n    if (!this.categoryBindingData){\r\n      this.categoryBindingData = util.GetCategoryBindingData(this)\r\n    } return this.categoryBindingData\r\n  }\r\n\r\n  materialBindingData\r\n  get MaterialBindingData(){\r\n    if (!this.materialBindingData){\r\n      this.materialBindingData = util.GetMaterialBindingData(this)\r\n    } return this.materialBindingData\r\n  }\r\n\r\n  systemBindingData\r\n  get SystemBindingData(){\r\n    if (!this.systemBindingData){\r\n      this.systemBindingData = util.GetSystemBindingData(this)\r\n    } return this.systemBindingData\r\n  }\r\n}","import { ItemVM } from './ItemVM'\r\nimport { EntDelete } from '../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as util from './ItemVMUtil'\r\nimport './Item.css'\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../text/EditableTextView';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport class ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.Name = obj.Content\r\n            this.RenderState = rs._default\r\n            break;\r\n          case inputUtil.esc:\r\n            obj.Content = this.Name\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get NameWrapper_View() {\r\n    return <div className='mgs__cell__wrapper'>\r\n      {this.NameView}\r\n      {this.DeleteVM.View}\r\n    </div>\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <tr className='mt__row'\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      <td>{this.NameWrapper_View}</td>\r\n    </tr>\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ItemVM } from '../item/ItemVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { DictVM } from '../dict/DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mt__thead'>\r\n            <tr>\r\n              <th className='mt__table__name'>Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items ? data.Items.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            }) : <tr/> }\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport TableView from '../table/TableView';\r\nimport * as iUtil from '../item/ItemVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport './Dict.css'\r\nimport { Button } from 'antd';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = this.ModelItem.AddItem();\r\n    var qI = iUtil.get(q, this);\r\n    qI.RenderState = rs.edit\r\n\r\n    this.Items.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get View() {\r\n    return <div className='mt__wrapper'>\r\n      <div className='f-jc mt__title'>\r\n        <span>DANH SÁCH ĐẦU MỤC CÔNG VIỆC</span>\r\n      </div>\r\n\r\n      <div className='f'>\r\n        <Button type='primary' size='small'\r\n          className='btn-success mt__add'\r\n          onClick={this.AddItem}>+</Button>\r\n\r\n        <div className='f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n}","import { DictVM } from \"./DictVM\";\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as iUtil from '../item/ItemVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}","import { ItemVM } from './ItemVM'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport { SelectVM } from '../../../../../../select/SelectVM';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport { PMDataVM } from '../../../../../single/form/PMDataVM';\r\nimport { MultiSelectVM } from '../../../../../../select/MultiSelectVM';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMassType_SelectVM = (q) => {\r\n  var qI = new SelectVM();\r\n\r\n  const setObj = (data) => {\r\n    var list = qI.Items = data;\r\n\r\n    var massType = q.ModelItem.MassType;\r\n    if (massType) {\r\n      qI.InitialItem = qI.SelectedItem =\r\n        genUtil.SingleFilter(list, (x) => x.Name === massType);\r\n    }\r\n  }\r\n\r\n  var host = q.Dict.Dict.ListData;\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n\r\n  qI.TitleRender = (v) => v.Name\r\n  qI.OnSelectedItemChanged = (v) => q.MassType = v?.Name;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCategory_SelectVM = (q) => {\r\n  var qI = new MultiSelectVM();\r\n\r\n  const setObj = (data) => {\r\n    var list = qI.Items = data;\r\n\r\n    var categories = q.ModelItem.Categories;\r\n    if (categories && categories.length !== 0) {\r\n      qI.InitialItems = qI.SelectedItems =\r\n        list.filter(x => categories.includes(x.Name));\r\n    }\r\n  }\r\n\r\n  var host = pmDataVM().Category_Dict\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n\r\n  qI.TitleRender = (v) => v.Name\r\n  qI.OnSelectedItemChanged = (v) => q.Categories = v.map(x => x.Name);\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './ItemVMUtil'\r\nimport './Item.css'\r\nimport * as rs from '../../../../../../text/TextRenderState';\r\n\r\nexport class ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      \r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    // this.NameVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get MassType() {\r\n    return this.ModelItem.MassType\r\n  } set MassType(v) {\r\n    this.ModelItem.MassType = v;\r\n  }\r\n\r\n  massType_SelectVM\r\n  get MassType_SelectVM(){\r\n    if (!this.massType_SelectVM){\r\n      this.massType_SelectVM = util.GetMassType_SelectVM(this)\r\n    } return this.massType_SelectVM;\r\n  }\r\n\r\n  get MassTypeWrapper_View() {\r\n    return <div className='mt__cell__wrapper'>\r\n      {this.MassType_SelectVM.View}\r\n      {this.DeleteVM.View}\r\n    </div>\r\n  }\r\n\r\n  // Category\r\n  categories = []\r\n  get Categories(){\r\n    return this.ModelItem.Categories\r\n  } set Categories(v){\r\n    this.ModelItem.Categories = v;\r\n  }\r\n\r\n  category_SelectVM\r\n  get Category_SelectVM(){\r\n    if (!this.category_SelectVM){\r\n      this.category_SelectVM = util.GetCategory_SelectVM(this)\r\n    } return this.category_SelectVM;\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <tr className='mt__row'>\r\n      <td>{this.MassTypeWrapper_View}</td>\r\n      <td>{this.Category_SelectVM.View}</td>\r\n    </tr>\r\n  }\r\n\r\n  // Save\r\n  Save = (showMessage = true, handle) => {\r\n    this.Materials.forEach(x => {\r\n      x.Name = x.NameVM.Content\r\n    })\r\n\r\n    this.SaveDatabase(showMessage, handle);\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ItemVM } from '../item/base/ItemVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { DictVM } from '../dict/DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mt__thead'>\r\n            <tr>\r\n              <th className='mt__table__masstype'>Đầu mục công việc</th>\r\n              <th className='mt__table__material'>Category</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items ? data.Items.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            }) : <tr />}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport TableView from '../table/TableView';\r\nimport * as iUtil from '../item/base/ItemVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport './Dict.css'\r\nimport { Button, message } from 'antd';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = this.ModelItem.AddItem();\r\n    var qI = iUtil.get(q, this);\r\n    qI.RenderState = rs.edit\r\n\r\n    this.Items.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    var list = this.Items;\r\n    var count = list.length;\r\n    var i = 0;\r\n\r\n    const func = () => {\r\n      i++;\r\n      if (i === count){\r\n        message.success('save successfully!')\r\n      }\r\n    }\r\n\r\n    list.forEach(x => {\r\n      x.SaveDatabase(false, func)\r\n    })\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get View() {\r\n    return <div className='mt__wrapper'>\r\n      <div className='f-jc mt__title'>\r\n        <span>RÀNG BUỘC CATEGORY</span>\r\n      </div>\r\n\r\n      <div className='f'>\r\n        <div className='mt__button__wrapper f'>\r\n          <Button type='primary' size='small'\r\n            className='btn-success'\r\n            onClick={this.AddItem}>+</Button>\r\n          <Button type='primary' size='small'\r\n            onClick={this.Save}>\r\n            <SaveFilled />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className='f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n}","import { DictVM } from \"./DictVM\";\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as iUtil from '../item/base/ItemVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as util from './MaterialVMUtil'\r\nimport * as rs from '../../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../../text/EditableTextView';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\n\r\nexport class MaterialVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n\r\n    // if (v === rs._default) {\r\n    //   this.SaveDatabase(false);\r\n    // }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.Name = obj.Content\r\n            this.RenderState = rs._default\r\n            break;\r\n          case inputUtil.esc:\r\n            obj.Content = this.Name\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mt__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get NameWrapper_View() {\r\n    return <div key={this.id} className='mt__subrow f-ac'\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      {this.NameView}\r\n      {this.DeleteVM.View}\r\n    </div>\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return this.NameWrapper_View\r\n  }\r\n\r\n  // Save\r\n  // SaveDatabase = (showMessage = true, handle) => {\r\n  //   this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  // }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Materials\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import { MaterialVM } from './MaterialVM'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new MaterialVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}","import { ItemVM } from './ItemVM'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport * as materialUtil from '../material/MaterialVMUtil'\r\nimport { SelectVM } from '../../../../../../select/SelectVM';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMaterials = (q) => {\r\n  return q.ModelItem.Materials.map(x => materialUtil.get(x, q));\r\n}\r\n\r\nexport const GetMassType_SelectVM = (q) => {\r\n  var qI = new SelectVM();\r\n\r\n  const setObj = (data) => {\r\n    var list = qI.Items = data;\r\n\r\n    var massType = q.ModelItem.MassType;\r\n    if (massType) {\r\n      qI.InitialItem = qI.SelectedItem =\r\n        genUtil.SingleFilter(list, (x) => x.Name === massType);\r\n    }\r\n  }\r\n\r\n  var host = q.Dict.Dict.ListData;\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n\r\n  qI.TitleRender = (v) => v.Name\r\n  qI.OnSelectedItemChanged = (v) => q.MassType = v?.Name;\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './ItemVMUtil'\r\nimport './Item.css'\r\nimport * as rs from '../../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../../text/EditableTextView';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\nimport * as materialUtil from '../material/MaterialVMUtil'\r\n\r\nexport class ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      materials: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    // this.NameVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get MassType() {\r\n    return this.ModelItem.MassType\r\n  } set MassType(v) {\r\n    this.ModelItem.MassType = v\r\n  }\r\n\r\n  massType_SelectVM\r\n  get MassType_SelectVM() {\r\n    if (!this.massType_SelectVM) {\r\n      this.massType_SelectVM = util.GetMassType_SelectVM(this)\r\n    } return this.massType_SelectVM;\r\n  }\r\n\r\n  get MassTypeWrapper_View() {\r\n    return <div className='mt__cell__wrapper'>\r\n      {this.MassType_SelectVM.View}\r\n\r\n      <Button type='primary' size='small'\r\n        className='btn-success mt__row__add'\r\n        onClick={this.AddMaterial}>\r\n        +\r\n      </Button>\r\n\r\n      {this.DeleteVM.View}\r\n    </div>\r\n  }\r\n\r\n  get RowSpan() {\r\n    return this.Materials.length > 1 ? this.Materials.length : 1\r\n  }\r\n\r\n  // Materials\r\n  materials = undefined\r\n  get Materials() {\r\n    if (!this.materials) {\r\n      this.materials = util.GetMaterials(this)\r\n    } return this.materials;\r\n  }\r\n\r\n  get NotFirst_Materials() {\r\n    var list = [...this.Materials];\r\n    list.splice(0, 1);\r\n    return list;\r\n  }\r\n\r\n  AddMaterial = () => {\r\n    var q = this.ModelItem.AddMaterial();\r\n    var qI = materialUtil.get(q, this);\r\n    qI.RenderState = rs.edit;\r\n\r\n    this.Materials.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <>\r\n      <tr className='mt__row'>\r\n        <td rowSpan={this.RowSpan}>{this.MassTypeWrapper_View}</td>\r\n        {/* First Item */}\r\n        {this.Materials.length > 0 ?\r\n          <td>\r\n            {this.Materials[0].RowView}\r\n          </td>\r\n          : ''}\r\n      </tr>\r\n      {this.Materials.length > 1 ?\r\n        this.NotFirst_Materials.map(x => {\r\n          return <tr key={x.id} className='mt__row'>\r\n            <td>{x.RowView}</td>\r\n          </tr>\r\n        })\r\n        : ''}\r\n    </>\r\n  }\r\n\r\n  // Save\r\n  Save = (showMessage = true, handle) => {\r\n    this.Materials.forEach(x => {\r\n      x.Name = x.NameVM.Content\r\n    })\r\n\r\n    this.SaveDatabase(showMessage, handle);\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ItemVM } from '../item/base/ItemVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { DictVM } from '../dict/DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mt__thead'>\r\n            <tr>\r\n              <th className='mt__table__masstype'>Đầu mục công việc</th>\r\n              <th className='mt__table__material'>Vật liệu</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items ? data.Items.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            }) : <tr />}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport TableView from '../table/TableView';\r\nimport * as iUtil from '../item/base/ItemVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport './Dict.css'\r\nimport { Button, message } from 'antd';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = this.ModelItem.AddItem();\r\n    var qI = iUtil.get(q, this);\r\n    qI.RenderState = rs.edit\r\n\r\n    this.Items.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    var list = this.Items;\r\n    var count = list.length;\r\n    var i = 0;\r\n\r\n    const func = () => {\r\n      i++;\r\n      if (i === count){\r\n        message.success('save successfully!')\r\n      }\r\n    }\r\n\r\n    list.forEach(x => {\r\n      x.Save(false, func)\r\n    })\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get View() {\r\n    return <div className='mt__wrapper'>\r\n      <div className='f-jc mt__title'>\r\n        <span>RÀNG BUỘC VẬT LIỆU</span>\r\n      </div>\r\n\r\n      <div className='f'>\r\n        <div className='mt__button__wrapper f'>\r\n          <Button type='primary' size='small'\r\n            className='btn-success'\r\n            onClick={this.AddItem}>+</Button>\r\n          <Button type='primary' size='small'\r\n            onClick={this.Save}>\r\n            <SaveFilled />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className='f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n}","import { DictVM } from \"./DictVM\";\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as iUtil from '../item/base/ItemVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as util from './TypeVMUtil'\r\nimport * as rs from '../../../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../../../text/EditableTextView';\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\n\r\nexport class TypeVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n\r\n    // if (v === rs._default) {\r\n    //   this.SaveDatabase(false);\r\n    // }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM\r\n        = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.Name = obj.Content\r\n            this.RenderState = rs._default\r\n            break;\r\n          case inputUtil.esc:\r\n            obj.Content = this.Name\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mt__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get NameWrapper_View() {\r\n    return <div className='mt__subrow f-ac'\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      {this.NameView}\r\n      {this.DeleteVM.View}\r\n    </div>\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return this.Index === 0 ?\r\n      <td key={this.id}>\r\n        {this.NameWrapper_View}\r\n      </td>\r\n      :\r\n      <tr key={this.id}>\r\n        <td >\r\n          {this.NameWrapper_View}\r\n        </td>\r\n      </tr>\r\n  }\r\n\r\n  // Save\r\n  // SaveDatabase = (showMessage = true, handle) => {\r\n  //   this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  // }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Types\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import { SystemVM, TypeVM } from './TypeVM'\r\nimport { EntDelete } from '../../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new TypeVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './SystemVMUtil'\r\nimport * as rs from '../../../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../../../text/EditableTextView';\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\nimport * as typeUtil from '../type/TypeVMUtil'\r\n\r\nexport class SystemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      types: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.ClassificationVM.RenderState = v;\r\n\r\n    // if (v === rs._default) {\r\n    //   this.SaveDatabase(false);\r\n    // }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Classification() {\r\n    return this.ModelItem.Classification;\r\n  } set Classification(v) {\r\n    this.ModelItem.Classification = v;\r\n  }\r\n\r\n  classificationVM\r\n  get ClassificationVM() {\r\n    if (!this.classificationVM) {\r\n      var obj = this.classificationVM\r\n        = editTextUtil.get(this.Classification, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.Classification = obj.Content\r\n            this.RenderState = rs._default\r\n            break;\r\n          case inputUtil.esc:\r\n            obj.Content = this.Classification\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return this.classificationVM;\r\n  }\r\n\r\n  get ClassificationView() {\r\n    return <EditableTextView className='mt__cell__main'\r\n      store={this.ClassificationVM} />\r\n  }\r\n\r\n  get ClassificationWrapper_View() {\r\n    return <div className='mt__subrow f-ac'\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      {this.ClassificationView}\r\n\r\n      <Button type='primary' size='small'\r\n        className='btn-success'\r\n        onClick={this.AddType}>\r\n        +\r\n      </Button>\r\n\r\n      {this.DeleteVM.View}\r\n    </div>\r\n  }\r\n\r\n  get RowSpan() {\r\n    return this.Types.length > 1 ? this.Types.length : 1\r\n  }\r\n\r\n  // Types\r\n  types = undefined\r\n  get Types() {\r\n    if (!this.types) {\r\n      this.types = util.GetTypes(this)\r\n    } return this.types;\r\n  }\r\n\r\n  get NotFirst_Types() {\r\n    var list = [...this.Types];\r\n    list.splice(0, 1);\r\n    return list;\r\n  }\r\n\r\n  AddType = () => {\r\n    var q = this.ModelItem.AddType();\r\n    var qI = typeUtil.get(q, this);\r\n    qI.RenderState = rs.edit;\r\n\r\n    this.Types.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return this.Index === 0 ?\r\n      <>\r\n        <td key={this.id} rowSpan={this.RowSpan}>\r\n          {this.ClassificationWrapper_View}\r\n        </td>\r\n        {this.Types.length > 0 ?\r\n          this.Types[0].RowView\r\n          : ''}\r\n      </>\r\n      :\r\n      <>\r\n        <tr key={this.id}>\r\n          <td rowSpan={this.RowSpan}>\r\n            {this.ClassificationWrapper_View}\r\n          </td>\r\n          {this.Types.length > 0 ?\r\n            this.Types[0].RowView\r\n            : ''}\r\n        </tr>\r\n\r\n        {/* Type Index > 0 */}\r\n        {this.NotFirst_Types?.map(x => x.RowView)}\r\n      </>\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    this.Types.forEach(x => {\r\n      x.Name = x.NameVM.Content\r\n    })\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Systems\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import { SystemVM } from './SystemVM'\r\nimport { EntDelete } from '../../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport * as typeUtil from '../type/TypeVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new SystemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTypes = (q) => {\r\n  return q.ModelItem.Types.map(x => typeUtil.get(x, q));\r\n}","import { ItemVM } from './ItemVM'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport * as systemUtil from '../system/base/SystemVMUtil'\r\nimport { SelectVM } from '../../../../../../select/SelectVM';\r\nimport * as genUtil from '../../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSystems = (q) => {\r\n  return q.ModelItem.Systems.map(x => systemUtil.get(x, q));\r\n}\r\n\r\nexport const GetMassType_SelectVM = (q) => {\r\n  var qI = new SelectVM();\r\n\r\n  const setObj = (data) => {\r\n    var list = qI.Items = data;\r\n\r\n    var massType = q.ModelItem.MassType;\r\n    if (massType) {\r\n      qI.InitialItem = qI.SelectedItem =\r\n        genUtil.SingleFilter(list, (x) => x.Name === massType);\r\n    }\r\n  }\r\n\r\n  var host = q.Dict.Dict.ListData;\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n\r\n  qI.TitleRender = (v) => v.Name\r\n  qI.OnSelectedItemChanged = (v) => q.MassType = v?.Name;\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './ItemVMUtil'\r\nimport './Item.css'\r\nimport * as rs from '../../../../../../text/TextRenderState';\r\nimport * as systemUtil from '../system/base/SystemVMUtil'\r\n\r\nexport class ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      systems: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    // this.NameVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get MassType() {\r\n    return this.ModelItem.MassType\r\n  } set MassType(v) {\r\n    this.ModelItem.MassType = v\r\n  }\r\n\r\n  massType_SelectVM\r\n  get MassType_SelectVM() {\r\n    if (!this.massType_SelectVM) {\r\n      this.massType_SelectVM = util.GetMassType_SelectVM(this)\r\n    } return this.massType_SelectVM;\r\n  }\r\n\r\n  get MassTypeWrapper_View() {\r\n    return <div className='mt__cell__wrapper'>\r\n      {this.MassType_SelectVM.View}\r\n\r\n      <Button type='primary' size='small'\r\n        className='btn-success'\r\n        onClick={this.AddSystem}>\r\n        +\r\n      </Button>\r\n\r\n      {this.DeleteVM.View}\r\n    </div>\r\n  }\r\n\r\n  get RowSpan() {\r\n    var span = this.Systems.reduce((a, b) => a + b.RowSpan, 0);\r\n    return span !== 0 ? span : 1\r\n  }\r\n\r\n  // Systems\r\n  systems = undefined\r\n  get Systems() {\r\n    if (!this.systems) {\r\n      this.systems = util.GetSystems(this)\r\n    } return this.systems;\r\n  }\r\n\r\n  get NotFirst_Systems() {\r\n    var list = [...this.Systems];\r\n    list.splice(0, 1);\r\n    return list;\r\n  }\r\n\r\n  AddSystem = () => {\r\n    var q = this.ModelItem.AddSystem();\r\n    var qI = systemUtil.get(q, this);\r\n    qI.RenderState = rs.edit;\r\n\r\n    this.Systems.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <>\r\n      <tr className='mt__row'>\r\n        <td rowSpan={this.RowSpan}>{this.MassTypeWrapper_View}</td>\r\n        {this.Systems.length > 0 ?\r\n          this.Systems[0].RowView\r\n          : ''}\r\n      </tr>\r\n\r\n      {/* SystemType Index > 0 */}\r\n      {this.Systems.length > 0 ?\r\n        this.Systems[0].NotFirst_Types?.map(x => x.RowView)\r\n        : ''}\r\n\r\n      {/* System Index > 0 */}\r\n      {this.NotFirst_Systems?.map(x => x.RowView)}\r\n    </>\r\n  }\r\n\r\n  // Save\r\n  Save = (showMessage = true, handle) => {\r\n    this.Systems.forEach(x => {\r\n      x.Classification = x.ClassificationVM.Content\r\n      x.Save();\r\n    })\r\n\r\n    this.SaveDatabase(showMessage, handle);\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ItemVM } from '../item/base/ItemVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { DictVM } from '../dict/DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mt__thead'>\r\n            <tr>\r\n              <th className='mt__table__masstype'>Đầu mục công việc</th>\r\n              <th className='mt__table__classification'>System Classification</th>\r\n              <th className='mt__table__type'>System Type</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items ? data.Items.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            }) : <tr />}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport TableView from '../table/TableView';\r\nimport * as iUtil from '../item/base/ItemVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport './Dict.css'\r\nimport { Button, message } from 'antd';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = this.ModelItem.AddItem();\r\n    var qI = iUtil.get(q, this);\r\n    qI.RenderState = rs.edit\r\n\r\n    this.Items.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    var list = this.Items;\r\n    var count = list.length;\r\n    var i = 0;\r\n\r\n    const func = () => {\r\n      i++;\r\n      if (i === count){\r\n        message.success('save successfully!')\r\n      }\r\n    }\r\n\r\n    list.forEach(x => {\r\n      x.Save(false, func)\r\n    })\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get View() {\r\n    return <div className='mt__wrapper'>\r\n      <div className='f-jc mt__title'>\r\n        <span>RÀNG BUỘC HỆ THỐNG</span>\r\n      </div>\r\n\r\n      <div className='f'>\r\n        <div className='mt__button__wrapper f'>\r\n          <Button type='primary' size='small'\r\n            className='btn-success'\r\n            onClick={this.AddItem}>+</Button>\r\n          <Button type='primary' size='small'\r\n            onClick={this.Save}>\r\n            <SaveFilled />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className='f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n}","import { DictVM } from \"./DictVM\";\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as iUtil from '../item/base/ItemVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}","import { BaseVM } from \"./BaseVM\";\r\nimport * as listDataUtil from '../list/dict/DictVMUtil'\r\nimport * as categoryBindingDataUtil from '../categorybinding/dict/DictVMUtil'\r\nimport * as materialBindingDataUtil from '../materialbinding/dict/DictVMUtil'\r\nimport * as systemBindingDataUtil from '../systembinding/dict/DictVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new BaseVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetListData = (q) => {\r\n  return listDataUtil.get(q.ModelItem.ListData, q)\r\n}\r\n\r\nexport const GetCategoryBindingData = (q) => {\r\n  return categoryBindingDataUtil.get(q.ModelItem.CategoryBindingData, q)\r\n}\r\n\r\nexport const GetMaterialBindingData = (q) => {\r\n  return materialBindingDataUtil.get(q.ModelItem.MaterialBindingData, q)\r\n}\r\n\r\nexport const GetSystemBindingData = (q) => {\r\n  return systemBindingDataUtil.get(q.ModelItem.SystemBindingData, q)\r\n}","import { ItemVM } from './ItemVM'\r\nimport { EntDelete } from '../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as util from './ItemVMUtil'\r\nimport './Item.css'\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../text/EditableTextView';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport class ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.Name = obj.Content\r\n            this.RenderState = rs._default\r\n            break;\r\n          case inputUtil.esc:\r\n            obj.Content = this.Name\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get NameWrapper_View() {\r\n    return <div className='mgs__cell__wrapper'>\r\n      {this.NameView}\r\n      {this.DeleteVM.View}\r\n    </div>\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <tr className='mt__row'\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      <td>{this.NameWrapper_View}</td>\r\n    </tr>\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ItemVM } from '../item/ItemVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { DictVM } from '../dict/DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mt__thead'>\r\n            <tr>\r\n              <th className='mt__table__name'>Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items ? data.Items.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            }) : <tr />}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport TableView from '../table/TableView';\r\nimport * as iUtil from '../item/ItemVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport './Dict.css'\r\nimport { Button } from 'antd';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = this.ModelItem.AddItem();\r\n    var qI = iUtil.get(q, this);\r\n    qI.RenderState = rs.edit\r\n\r\n    this.Items.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get View() {\r\n    return <div className='mt__wrapper'>\r\n      <div className='f-jc mt__title'>\r\n        <span>DANH SÁCH CATEGORY</span>\r\n      </div>\r\n\r\n      <div className='f'>\r\n        <Button type='primary' size='small'\r\n          className='btn-success mt__add'\r\n          onClick={this.AddItem}>+</Button>\r\n\r\n        <div className='f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n}","import { DictVM } from \"./DictVM\";\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as iUtil from '../item/ItemVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}","import { ItemVM } from './ItemVM'\r\nimport { EntDelete } from '../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.mouseEvent\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as util from './ItemVMUtil'\r\nimport './Item.css'\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../text/EditableTextView';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport class ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n\r\n    if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.Name = obj.Content\r\n            this.RenderState = rs._default\r\n            break;\r\n          case inputUtil.esc:\r\n            obj.Content = this.Name\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get NameWrapper_View() {\r\n    return <div className='mgs__cell__wrapper'>\r\n      {this.NameView}\r\n      {this.DeleteVM.View}\r\n    </div>\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <tr className='mt__row'\r\n      onDoubleClick={this.Edit}\r\n      onMouseEnter={this.OnMouseEnter}\r\n      onMouseLeave={this.OnMouseLeave}>\r\n      <td>{this.NameWrapper_View}</td>\r\n    </tr>\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ItemVM } from '../item/ItemVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { DictVM } from '../dict/DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mt__thead'>\r\n            <tr>\r\n              <th className='mt__table__name'>Name</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items ? data.Items.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            }) : <tr />}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport TableView from '../table/TableView';\r\nimport * as iUtil from '../item/ItemVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport './Dict.css'\r\nimport { Button } from 'antd';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = this.ModelItem.AddItem();\r\n    var qI = iUtil.get(q, this);\r\n    qI.RenderState = rs.edit\r\n\r\n    this.Items.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get View() {\r\n    return <div className='mt__wrapper'>\r\n      <div className='f-jc mt__title'>\r\n        <span>DANH SÁCH PARAMETER</span>\r\n      </div>\r\n\r\n      <div className='f'>\r\n        <Button type='primary' size='small'\r\n          className='btn-success mt__add'\r\n          onClick={this.AddItem}>+</Button>\r\n\r\n        <div className='f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n}","import { DictVM } from \"./DictVM\";\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as iUtil from '../item/ItemVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ValueInfoVM } from './ValueInfoVM';\r\nimport * as mte_t from './VI_RetrieveType'\r\n\r\nclass MassTypeExportView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ValueInfoVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='b-s1 b-r6 p-3 mb-10'>\r\n          <div className='f mes__cell__buttonwrapper'>\r\n            <div className='f1' />\r\n            {data.DeleteVM.View}\r\n          </div>\r\n\r\n          <table className='f1'>\r\n            <tbody>\r\n              <tr>\r\n                <td className='title large'>Cách lấy giá trị:</td>\r\n                <td>{data.RetrieveTypes_SelectVM.View}</td>\r\n              </tr>\r\n\r\n              {data.RetrieveTypes && (data.RetrieveTypes.includes(mte_t.byparameter) ||\r\n                data.RetrieveTypes.includes(mte_t.bymaterialparameter)) ?\r\n                <tr>\r\n                  <td className='title'>Parameter:</td>\r\n                  <td>{data.Parameter_SelectVM.View}</td>\r\n                </tr>\r\n                : ''}\r\n\r\n              {data.RetrieveTypes && data.RetrieveTypes.includes(mte_t.bysumparameters) ?\r\n                <tr>\r\n                  <td className='title'>Parameter List:</td>\r\n                  <td>{data.ParameterList_SelectVM.View}</td>\r\n                </tr>\r\n                : ''}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(MassTypeExportView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './ValueInfoVMUtil'\r\nimport MassTypeExportView from './ValueInfoView';\r\n\r\nexport class ValueInfoVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      retrieveTypes : observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  retrieveTypes = undefined\r\n  get RetrieveTypes(){\r\n    if (!this.retrieveTypes){\r\n      this.retrieveTypes = this.ModelItem.RetrieveTypes\r\n    }\r\n    return this.retrieveTypes\r\n  } set RetrieveTypes(v){\r\n    this.retrieveTypes = v;\r\n    this.ModelItem.RetrieveTypes = v;\r\n  }\r\n\r\n  retrieveTypes_SelectVM\r\n  get RetrieveTypes_SelectVM(){\r\n    if (!this.retrieveTypes_SelectVM){\r\n      this.retrieveTypes_SelectVM = util.GetRetrieveTypes_SelectVM(this)\r\n    } return this.retrieveTypes_SelectVM\r\n  }\r\n\r\n  get Parameter(){\r\n    return this.ModelItem.Parameter\r\n  } set Parameter(v){\r\n    this.ModelItem.Parameter = v;\r\n  }\r\n\r\n  parameter_SelectVM\r\n  get Parameter_SelectVM(){\r\n    if (!this.parameter_SelectVM){\r\n      this.parameter_SelectVM = util.GetParameter_SelectVM(this)\r\n    } return this.parameter_SelectVM\r\n  }\r\n\r\n  get ParameterList(){\r\n    return this.ModelItem.ParameterList\r\n  } set ParameterList(v){\r\n    this.ModelItem.ParameterList = v;\r\n  }\r\n\r\n  parameterList_SelectVM\r\n  get ParameterList_SelectVM(){\r\n    if (!this.parameterList_SelectVM){\r\n      this.parameterList_SelectVM = util.GetParameterList_SelectVM(this)\r\n    } return this.parameterList_SelectVM\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.ValueInfos\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n\r\n  // View\r\n  get View(){\r\n    return <MassTypeExportView key={this.id} store={this}/>\r\n  }\r\n}","import { SelectVM } from '../../../../../../../select/SelectVM';\r\nimport { ValueInfoVM } from './ValueInfoVM'\r\nimport * as vi_rt from './VI_RetrieveType'\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\nimport { MultiSelectVM } from '../../../../../../../select/MultiSelectVM';\r\nimport { EntDelete } from '../../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../../delete/EntDelete_ToggleType'\r\nimport { PMDataVM } from '../../../../../../single/form/PMDataVM';\r\n\r\nconst pmDataVM = () =>  PMDataVM.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ValueInfoVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRetrieveTypes_SelectVM = (q) => {\r\n  var qI = new MultiSelectVM();\r\n\r\n  qI.Items = vi_rt.GetList();\r\n  qI.InitialItems = qI.SelectedItems = q.RetrieveTypes\r\n\r\n  qI.OnSelectedItemChanged = (v) => q.RetrieveTypes = v;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetParameter_SelectVM = (q) => {\r\n  var qI = new SelectVM();\r\n\r\n  const setObj = (data) => {\r\n    var list = qI.Items = data;\r\n\r\n    var parameter = q.ModelItem.Parameter;\r\n    if (parameter) {\r\n      qI.InitialItem = qI.SelectedItem =\r\n        genUtil.SingleFilter(list, (x) => x.Name === parameter);\r\n    }\r\n  }\r\n\r\n  var host = pmDataVM().Parameter_Dict;\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n\r\n  qI.TitleRender = (v) => v.Name\r\n  qI.OnSelectedItemChanged = (v) => q.Parameter = v?.Name\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetParameterList_SelectVM = (q) => {\r\n  var qI = new MultiSelectVM();\r\n\r\n  const setObj = (data) => {\r\n    var list = qI.Items = data;\r\n\r\n    var parameterList = q.ModelItem.ParameterList;\r\n    if (parameterList.length !== 0) {\r\n      qI.InitialItems = qI.SelectedItems =\r\n        list.filter((x) => parameterList.includes(x.Name));\r\n    }\r\n  }\r\n\r\n  var host = pmDataVM().Parameter_Dict;\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n\r\n  qI.TitleRender = (v) => v.Name\r\n  qI.OnSelectedItemChanged = (v) => q.ParameterList = v.map(x => x.Name)\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './MassInfoVMUtil'\r\nimport * as rs from '../../../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../../../text/EditableTextView';\r\nimport * as valueInfoUtil from '../valueinfo/ValueInfoVMUtil'\r\n\r\nexport class MassInfoVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueInfos: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    // this.NameVM.RenderState = v;\r\n\r\n    // if (v === rs._default) {\r\n    //   this.SaveDatabase(false);\r\n    // }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Data\r\n  massTypeExport\r\n  get MassTypeExport() {\r\n    if (!this.massTypeExport) {\r\n      this.massTypeExport = util.GetMassTypeExport(this)\r\n    } return this.massTypeExport\r\n  }\r\n\r\n  get ClassifyValueBy() {\r\n    return this.ModelItem.ClassifyValueBy\r\n  } set ClassifyValueBy(v) {\r\n    this.ModelItem.ClassifyValueBy = v;\r\n  }\r\n\r\n  classifyValueBy_SelectVM\r\n  get ClassifyValueBy_SelectVM() {\r\n    if (!this.classifyValueBy_SelectVM) {\r\n      this.classifyValueBy_SelectVM = util.GetClassifyValueBy_SelectVM(this)\r\n    } return this.classifyValueBy_SelectVM\r\n  }\r\n\r\n  valueInfos = undefined\r\n  get ValueInfos() {\r\n    if (!this.valueInfos) {\r\n      this.valueInfos = util.GetValueInfos(this)\r\n    } return this.valueInfos\r\n  }\r\n\r\n  AddValueInfo = () => {\r\n    var q = this.ModelItem.AddValueInfo();\r\n    var qI = valueInfoUtil.get(q, this);\r\n    this.ValueInfos.push(qI)\r\n    return qI;\r\n  }\r\n\r\n\r\n  get Wrapper_View() {\r\n    return <div>\r\n      <div className='f mes__cell__buttonwrapper'>\r\n        <div className='f1' />\r\n        {this.DeleteVM.View}\r\n      </div>\r\n\r\n      <div className='mes__cell__innertable'>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td className='title medium'>Công tác: </td>\r\n              <td>{this.MassTypeExport.View}</td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan={2}>\r\n                <div className='title f-ac'>\r\n                  <span>\r\n                    Truy xuất giá trị từ :\r\n                  </span>\r\n                  <div className='ml-10'>\r\n                    {this.ClassifyValueBy_SelectVM.View}\r\n                  </div>\r\n                </div>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan={2}>\r\n                <div >\r\n                  <div className='title f-ac'>\r\n                    <span>\r\n                      Thông tin giá trị :\r\n                    </span>\r\n                    <Button type='primary' size='small'\r\n                      className='btn-success ml-15'\r\n                      onClick={this.AddValueInfo}>\r\n                      +\r\n                    </Button>\r\n                  </div>\r\n\r\n                  {/* ValueInfos */}\r\n                  {this.ValueInfos ?\r\n                    <div className='mt-15 ml-15'>\r\n                      {this.ValueInfos.map(x => x.View)}\r\n                    </div>\r\n                    : ''\r\n                  }\r\n                </div>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return this.Index === 0 ?\r\n      <>\r\n        <td key={this.id} rowSpan={this.RowSpan}>\r\n          {this.Wrapper_View}\r\n        </td>\r\n      </>\r\n      :\r\n      <>\r\n        <tr key={this.id}>\r\n          <td rowSpan={this.RowSpan}>\r\n            {this.Wrapper_View}\r\n          </td>\r\n        </tr>\r\n      </>\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.MassInfos\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { MassTypeExportVM } from './MassTypeExportVM';\r\nimport * as mte_t from './MTE_Type'\r\nimport './MassTypeExport.css'\r\n\r\nclass MassTypeExportView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassTypeExportVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='f'>\r\n          <div className='mes__row__mi__masstypeexport exporttype'>\r\n            {data.ExportType_SelectVM.View}\r\n          </div>\r\n\r\n          <div className='mes__row__mi__masstypeexport masstype f'>\r\n            <span className='title'>{data.MassType_Title}</span>\r\n            {data.MassType_SelectVM.View}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(MassTypeExportView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './MassTypeExportVMUtil'\r\nimport MassTypeExportView from './MassTypeExportView';\r\nimport * as mte_t from './MTE_Type'\r\n\r\nexport class MassTypeExportVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      exportType: observable\r\n    })\r\n  }\r\n\r\n  exportType = undefined\r\n  get ExportType() {\r\n    if (!this.exportType) {\r\n      this.exportType = this.ModelItem.ExportType\r\n    }\r\n    return this.exportType\r\n  } set ExportType(v) {\r\n    this.exportType = v;\r\n    this.ModelItem.ExportType = v;\r\n  }\r\n\r\n  get MassType_Title() {\r\n    switch (this.ExportType) {\r\n      case mte_t.byname:\r\n        return 'Tên:';\r\n      default:\r\n        return 'Mặc định:';\r\n    }\r\n  }\r\n\r\n  exportType_SelectVM\r\n  get ExportType_SelectVM() {\r\n    if (!this.exportType_SelectVM) {\r\n      this.exportType_SelectVM = util.GetExportType_SelectVM(this)\r\n    } return this.exportType_SelectVM\r\n  }\r\n\r\n  get MassType() {\r\n    return this.ModelItem.MassType\r\n  } set MassType(v) {\r\n    this.ModelItem.MassType = v\r\n  }\r\n\r\n  massType_SelectVM\r\n  get MassType_SelectVM() {\r\n    if (!this.massType_SelectVM) {\r\n      this.massType_SelectVM = util.GetMassType_SelectVM(this)\r\n    } return this.massType_SelectVM;\r\n  }\r\n\r\n  get View() {\r\n    return <MassTypeExportView store={this} />\r\n  }\r\n}","import { SelectVM } from '../../../../../../../select/SelectVM';\r\nimport { PMDataVM } from '../../../../../../single/form/PMDataVM';\r\nimport { MassTypeExportVM } from './MassTypeExportVM'\r\nimport * as mte_t from './MTE_Type'\r\nimport * as genUtil from '../../../../../../../../util/generalUtil'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new MassTypeExportVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetExportType_SelectVM = (q) => {\r\n  var qI = new SelectVM();\r\n\r\n  qI.Items = mte_t.GetList();\r\n  qI.InitialItem = qI.SelectedItem = q.ExportType\r\n\r\n  qI.OnSelectedItemChanged = (v) => q.ExportType = v;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMassType_SelectVM = (q) => {\r\n  var qI = new SelectVM();\r\n\r\n  const setObj = (data) => {\r\n    var list = qI.Items = data;\r\n\r\n    var massType = q.MassType;\r\n    if (massType) {\r\n      qI.InitialItem = qI.SelectedItem =\r\n        genUtil.SingleFilter(list, (x) => x.Name === massType);\r\n    }\r\n  }\r\n\r\n  var host = pmDataVM().MassType_Dict.ListData;\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n\r\n  qI.CanClear = true;\r\n  qI.TitleRender = (v) => v.Name\r\n  qI.OnSelectedItemChanged = (v) => q.MassType = v?.Name;\r\n\r\n  return qI;\r\n}","import { MassInfoVM } from './MassInfoVM'\r\nimport { EntDelete } from '../../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../../delete/EntDelete_ToggleType'\r\nimport * as massTypeExportUtil from '../masstypeexport/MassTypeExportVMUtil';\r\nimport * as valueInfoUtil from '../valueinfo/ValueInfoVMUtil'\r\nimport { Button, message } from 'antd';\r\nimport { SelectVM } from '../../../../../../../select/SelectVM';\r\nimport * as mi_cvb from './MI_ClassifyValueBy'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new MassInfoVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMassTypeExport = (q) => {\r\n  return massTypeExportUtil.get(q.ModelItem.MassTypeExport, q)\r\n}\r\n\r\nexport const GetValueInfos = (q) => {\r\n  return q.ModelItem.ValueInfos.map(x => valueInfoUtil.get(x, q))\r\n}\r\n\r\nexport const GetClassifyValueBy_SelectVM = (q) => {\r\n  var qI = new SelectVM();\r\n\r\n  qI.Items = mi_cvb.GetList();\r\n  qI.InitialItem = qI.SelectedItem = q.ClassifyValueBy\r\n\r\n  qI.OnSelectedItemChanged = (v) => q.ClassifyValueBy = v;\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './TypeVMUtil'\r\nimport * as rs from '../../../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../../../text/EditableTextView';\r\nimport * as massInfoUtil from '../../massinfo/base/MassInfoVMUtil'\r\n\r\nexport class TypeVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      massInfos: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n\r\n    // if (v === rs._default) {\r\n    //   this.SaveDatabase(false);\r\n    // }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.Name = obj.Content\r\n            this.RenderState = rs._default\r\n            break;\r\n          case inputUtil.esc:\r\n            obj.Content = this.Name\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get Wrapper_View() {\r\n    return <div>\r\n      <div className='f mes__cell__buttonwrapper'>\r\n        <div className='f1' />\r\n\r\n        <Button type='primary' size='small'\r\n          className='btn-success'\r\n          onClick={this.AddMassInfo}>\r\n          +\r\n        </Button>\r\n        {this.DeleteVM.View}\r\n      </div>\r\n\r\n      <div className='mes__cell__innertable'>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td className='title small'>Tên: </td>\r\n              <td onDoubleClick={this.Edit}>{this.NameView}</td>\r\n            </tr>\r\n            <tr>\r\n              {this.Filter.View}\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  get RowSpan() {\r\n    return this.MassInfos.length > 1 ? this.MassInfos.length : 1\r\n  }\r\n\r\n  // Filter\r\n  filter\r\n  get Filter(){\r\n    if (!this.filter){\r\n      this.filter = util.GetFilter(this)\r\n    } return this.filter\r\n  }\r\n\r\n  // MassInfo\r\n  massInfos = undefined\r\n  get MassInfos() {\r\n    if (!this.massInfos) {\r\n      this.massInfos = util.GetMassInfos(this)\r\n    } return this.massInfos\r\n  }\r\n\r\n  get NotFirst_MassInfos() {\r\n    var list = [...this.MassInfos];\r\n    list.splice(0, 1);\r\n    return list;\r\n  }\r\n\r\n  AddMassInfo = () => {\r\n    var q = this.ModelItem.AddMassInfo()\r\n    var qI = massInfoUtil.get(q, this)\r\n    qI.RenderState = rs.edit;\r\n\r\n    this.MassInfos.push(qI);\r\n    return qI;\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return this.Index === 0 ?\r\n      <>\r\n        <td key={this.id} rowSpan={this.RowSpan}>\r\n          {this.Wrapper_View}\r\n        </td>\r\n        {this.MassInfos.length > 0 ?\r\n          this.MassInfos[0].RowView\r\n          : ''}\r\n      </>\r\n      :\r\n      <>\r\n        <tr key={this.id}>\r\n          <td rowSpan={this.RowSpan}>\r\n            {this.Wrapper_View}\r\n          </td>\r\n          {this.MassInfos.length > 0 ?\r\n            this.MassInfos[0].RowView\r\n            : ''}\r\n        </tr>\r\n\r\n        {/* MassInfo Index > 0 */}\r\n        {this.NotFirst_MassInfos?.map(x => x.RowView)}\r\n      </>\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    this.Name = this.NameVM.Content;\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Types\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './FilterVMUtil'\r\n\r\nexport class FilterVM {\r\n  // Category\r\n  get Categories() {\r\n    return this.ModelItem.Categories;\r\n  } set Categories(v) {\r\n    this.ModelItem.Categories = v\r\n  }\r\n\r\n  category_SelectVM\r\n  get Category_SelectVM() {\r\n    if (!this.category_SelectVM) {\r\n      this.category_SelectVM = util.GetCategory_SelectVM(this)\r\n    } return this.category_SelectVM;\r\n  }\r\n\r\n  // View\r\n  get View() {\r\n    return <>\r\n      <td className='title small'>Bộ lọc: </td>\r\n      <td>\r\n        <div>\r\n          {this.Category_SelectVM.View}\r\n        </div>\r\n      </td>\r\n    </>\r\n  }\r\n}","import { FilterVM } from './FilterVM'\r\nimport { EntDelete } from '../../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport * as massInfoUtil from '../../massinfo/base/MassInfoVMUtil'\r\nimport { PMDataVM } from '../../../../../../single/form/PMDataVM';\r\nimport { MultiSelectVM } from '../../../../../../../select/MultiSelectVM';\r\nimport * as genUtil from '../../../../../../../../util/generalUtil';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new FilterVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetCategory_SelectVM = (q) => {\r\n  var qI = new MultiSelectVM();\r\n\r\n  const setObj = (data) => {\r\n    var list = qI.Items = data;\r\n\r\n    var categories = q.Categories;\r\n    if (categories.length !== 0) {\r\n      qI.InitialItems = qI.SelectedItems =\r\n        list.filter(x => categories.includes(x.Name));\r\n    }\r\n  }\r\n\r\n  var host = pmDataVM().Category_Dict\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Items_Func,\r\n      () => setObj(host.Items)\r\n    )\r\n  }\r\n\r\n  qI.TitleRender = (v) => v.Name\r\n  qI.OnSelectedItemChanged = (v) => q.Categories = v.map(x => x.Name);\r\n\r\n  return qI;\r\n}","import { TypeVM } from './TypeVM'\r\nimport { EntDelete } from '../../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport * as massInfoUtil from '../../massinfo/base/MassInfoVMUtil'\r\nimport { PMDataVM } from '../../../../../../single/form/PMDataVM';\r\nimport { MultiSelectVM } from '../../../../../../../select/MultiSelectVM';\r\nimport * as genUtil from '../../../../../../../../util/generalUtil';\r\nimport * as filterUtil from '../filter/FilterVMUtil'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new TypeVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMassInfos = (q) => {\r\n  return q.ModelItem.MassInfos.map(x => massInfoUtil.get(x, q))\r\n}\r\n\r\nexport const GetFilter = (q) => {\r\n  return filterUtil.get(q.ModelItem.Filter, q);\r\n}","import { PageItemVM } from './PageItemVM'\r\nimport { EntDelete } from '../../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../../delete/EntDelete_ToggleType'\r\nimport * as typeUtil from '../type/base/TypeVMUtil'\r\nimport { Button, message } from 'antd';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new PageItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTypes = (q) => {\r\n  return q.ModelItem.Types.map(x => typeUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { Button, message } from 'antd';\r\nimport * as util from './PageItemVMUtil'\r\nimport './PageItem.css'\r\nimport * as rs from '../../../../../../text/TextRenderState';\r\nimport * as inputUtil from '../../../../../../../util/inputUtil';\r\nimport * as editTextUtil from '../../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../../text/EditableTextView';\r\nimport * as typeUtil from '../type/base/TypeVMUtil'\r\n\r\nexport class PageItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      types: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.NameVM.RenderState = v;\r\n\r\n    // if (v === rs._default) {\r\n    //   this.SaveDatabase(false);\r\n    // }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Name\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  } set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM = editTextUtil.get(this.Name, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      obj.OnKeyDown = (e) => {\r\n        var { key, value } = inputUtil.Get_Shortcut(e);\r\n        switch (key) {\r\n          case inputUtil.enter:\r\n            this.Name = obj.Content\r\n            this.RenderState = rs._default\r\n            break;\r\n          case inputUtil.esc:\r\n            obj.Content = this.Name\r\n            this.RenderState = rs._default\r\n            break;\r\n        }\r\n      }\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  get NameView() {\r\n    return <EditableTextView className='mgs__cell__main'\r\n      store={this.NameVM} />\r\n  }\r\n\r\n  get Wrapper_View() {\r\n    return <div>\r\n      <div className='f mes__cell__buttonwrapper'>\r\n        <div className='f1' />\r\n        <Button type='primary' size='small'\r\n          className='btn-success'\r\n          onClick={this.AddType}>\r\n          +\r\n        </Button>\r\n        {this.DeleteVM.View}\r\n      </div>\r\n\r\n      <div onDoubleClick={this.Edit}\r\n        onMouseEnter={this.OnMouseEnter}\r\n        onMouseLeave={this.OnMouseLeave}>\r\n        {this.NameView}\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  get RowSpan() {\r\n    var span = this.Types.reduce((a, b) => a + b.RowSpan, 0);\r\n    return span !== 0 ? span : 1\r\n  }\r\n\r\n  // Type\r\n  types = undefined\r\n  get Types() {\r\n    if (!this.types) {\r\n      this.types = util.GetTypes(this)\r\n    } return this.types;\r\n  }\r\n\r\n  get NotFirst_Types() {\r\n    var list = [...this.Types];\r\n    list.splice(0, 1);\r\n    return list;\r\n  }\r\n\r\n  AddType = () => {\r\n    var q = this.ModelItem.AddType();\r\n    var qI = typeUtil.get(q, this)\r\n    qI.RenderState = rs.edit\r\n\r\n    this.Types.push(qI)\r\n    return qI\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <>\r\n      <tr className='mes__row'>\r\n        <td rowSpan={this.RowSpan}>{this.Wrapper_View}</td>\r\n        {this.Types.length > 0 ?\r\n          this.Types[0].RowView\r\n          : ''}\r\n      </tr>\r\n\r\n      {/* MassInfo Index > 0 */}\r\n      {this.Types.length > 0 ?\r\n        this.Types[0].NotFirst_MassInfos?.map(x => x.RowView)\r\n        : ''}\r\n\r\n      {/* Type Index > 0 */}\r\n      {this.NotFirst_Types?.map(x => x.RowView)}\r\n    </>\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    this.Name = this.NameVM.Content;\r\n    this.Types.forEach(x => x.Save())\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { PageItemVM } from '../item/page/PageItemVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new PageItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { DictVM } from '../dict/DictVM';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport TabView from '../../../tab/TabView';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='table table-bordered'>\r\n          <thead className='mes__thead'>\r\n            <tr>\r\n              <th className='mes__table__page'>Bộ môn</th>\r\n              <th className='mes__table__item'>Loại</th>\r\n              <th className='mes__table__info'>Thông tin thiết lập</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.Items ? data.Items.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            }) : <tr/> }\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport TableView from '../table/TableView';\r\nimport * as iUtil from '../item/page/PageItemVMUtil'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport './Dict.css'\r\nimport { Button } from 'antd';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Item\r\n  OnSet_Items_Func = []\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n\r\n    genUtil.Handle(this.OnSet_Items_Func,\r\n      (v) => this.OnSet_Items_Func = v)\r\n  }\r\n\r\n  AddItem = () => {\r\n    var q = this.ModelItem.AddItem();\r\n    var qI = iUtil.get(q, this);\r\n    qI.RenderState = rs.edit\r\n\r\n    this.Items.push(qI)\r\n    return qI;\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    this.Items.forEach(x => x.Save())\r\n    this.SaveDatabase(true);\r\n  }\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get View() {\r\n    return <div className='mt__wrapper'>\r\n      <div className='f-jc mt__title'>\r\n        <span>THIẾT LẬP XUẤT KHỐI LƯỢNG</span>\r\n      </div>\r\n\r\n      <div className='f'>\r\n        <div className='mt__button__wrapper f'>\r\n          <Button type='primary' size='small'\r\n            className='btn-success'\r\n            onClick={this.AddItem}>+</Button>\r\n          <Button type='primary' size='small'\r\n            onClick={this.Save}>\r\n            <SaveFilled />\r\n          </Button>\r\n        </div>\r\n\r\n        <div className='f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n}","import { DictVM } from \"./DictVM\";\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as iUtil from '../item/page/PageItemVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}","export const login = 'login'\r\nexport const user = 'user'","import * as util from './User_DictVMUtil'\r\nimport * as vt from './User_Dict_ViewType'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../util/generalUtil'\r\n\r\nexport class User_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      viewType: observable\r\n    })\r\n  }\r\n\r\n  get Url() {\r\n    return this.ModelItem.Url\r\n  } set Url(v) {\r\n    this.ModelItem.Url = v;\r\n  }\r\n\r\n  // LoginUser\r\n  OnSet_LoginUser_Func = []\r\n\r\n  loginUser\r\n  get LoginUser() {\r\n    if (!this.loginUser) {\r\n      util.Handle_LoginUser(this)\r\n    } return this.loginUser;\r\n  } set LoginUser(v) {\r\n    this.loginUser = v;\r\n    this.ViewType = util.GetViewType(this)\r\n\r\n    if (this.IsSet_Model) {\r\n      this.ModelItem.LoginUser = v?.ModelItem;\r\n    }else {\r\n      this.IsSet_Model = true;\r\n    }\r\n\r\n    genUtil.Handle(this.OnSet_LoginUser_Func,\r\n      (v) => this.OnSet_LoginUser_Func = v)\r\n  }\r\n\r\n  // Login\r\n  login\r\n  get Login() {\r\n    if (!this.login) {\r\n      this.login = util.GetLogin(this)\r\n    } return this.login;\r\n  }\r\n\r\n  // NewPassword\r\n  newPassword\r\n  get NewPassword() {\r\n    if (!this.newPassword) {\r\n      this.newPassword = util.GetNewPassword(this)\r\n    } return this.newPassword;\r\n  }\r\n\r\n  Logout = () => {\r\n    this.LoginUser = undefined\r\n  }\r\n\r\n  // View\r\n  viewType = undefined;\r\n  get ViewType() {\r\n    if (!this.viewType) {\r\n      util.Handle_ViewType(this)\r\n    } return this.viewType\r\n  } set ViewType(v) {\r\n    this.viewType = v;\r\n  }\r\n\r\n  loginRender\r\n  get LoginRender() {\r\n    if (!this.loginRender) {\r\n      this.loginRender = util.GetDefault_LoginRender(this)\r\n    } return this.loginRender;\r\n  } set LoginRender(v) {\r\n    this.loginRender = v;\r\n  }\r\n\r\n  userRender\r\n  get UserRender() {\r\n    if (!this.userRender) {\r\n      this.userRender = util.GetDefault_UserRender(this)\r\n    } return this.userRender;\r\n  } set UserRender(v) {\r\n    this.userRender = v;\r\n  }\r\n\r\n  mainViewRender\r\n  get MainViewRender() {\r\n    if (!this.mainViewRender) {\r\n      this.mainViewRender = util.GetDefault_MainViewRender(this)\r\n    } return this.mainViewRender\r\n  } set MainViewRender(v) {\r\n    this.mainViewRender = v;\r\n  }\r\n\r\n  get MainView() {\r\n    return this.MainViewRender();\r\n  }\r\n\r\n  modalViewRender\r\n  get ModalViewRender() {\r\n    if (!this.modalViewRender) {\r\n      this.modalViewRender = util.GetDefault_ModalViewRender(this)\r\n    } return this.modalViewRender\r\n  } set ModalViewRender(v) {\r\n    this.modalViewRender = v;\r\n  }\r\n\r\n  get ModalView() {\r\n    return this.ModalViewRender();\r\n  }\r\n\r\n  viewRender\r\n  get ViewRender() {\r\n    if (!this.viewRender) {\r\n      this.viewRender = util.GetDefault_ViewRender(this)\r\n    } return this.viewRender\r\n  } set ViewRender(v) {\r\n    this.viewRender = v;\r\n  }\r\n\r\n  get View() {\r\n    return this.ViewRender();\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from '../../text/TextRenderState';\r\nimport * as editTextUtil from '../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../text/EditableTextView';\r\nimport * as genUtil from '../../../util/generalUtil'\r\n\r\nexport class UserVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState: observable,\r\n    })\r\n  }\r\n  \r\n  get id(){\r\n    return this.ModelItem.id\r\n  }\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n    this.UsernameVM.RenderState = v;\r\n    // this.DescriptionVM.RenderState = v;\r\n\r\n    if (this.OnSet_RenderState){\r\n      this.OnSet_RenderState(v)\r\n    }\r\n\r\n    if (!this.IsSaveDatabase){\r\n      this.IsSaveDatabase = true\r\n    } else if (v === rs._default) {\r\n      this.SaveDatabase(false);\r\n    }\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // UserName\r\n  get Username(){\r\n    return this.ModelItem.Username\r\n  } set Username(v){\r\n    this.ModelItem.Username = v;\r\n  }\r\n\r\n  usernameVM\r\n  get UsernameVM() {\r\n    if (!this.usernameVM) {\r\n      var obj = this.usernameVM = editTextUtil.get(this.Username, this.CanEdit);\r\n\r\n      obj.Is_Tool_Visible = false\r\n      // obj.OnKeyDown = (e) => {\r\n      //   var { key, value } = inputUtil.Get_Shortcut(e);\r\n      //   switch (key) {\r\n      //     case inputUtil.enter:\r\n      //       this.RenderState = rs._default\r\n      //       break;\r\n      //   }\r\n      // }\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === rs._default) {\r\n            this.Username = obj.Content;\r\n          }\r\n        },\r\n        false\r\n      )\r\n\r\n    }\r\n    return this.usernameVM;\r\n  }\r\n\r\n  get UsernameView() {\r\n    return <EditableTextView store={this.UsernameVM} />\r\n  }\r\n\r\n  // Name\r\n  get Name(){\r\n    return this.ModelItem.Name\r\n  } set Name(v){\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  // Save\r\n  IsSaveDatabase = true\r\n\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  // Tool\r\n  Show_Tool() {\r\n   \r\n  }\r\n\r\n  Hide_Tool() {\r\n    \r\n  }\r\n}","import { UserVM } from \"./UserVM\"\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new UserVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import { message } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../util/generalUtil'\r\nimport { TextVM } from '../../text/TextVM'\r\nimport * as util from './LoginUtil'\r\n\r\nexport class Login {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Is_Modal_Visible: observable\r\n    })\r\n  }\r\n\r\n  Username = ''\r\n\r\n  usernameVM\r\n  get UsernameVM(){\r\n    if (!this.usernameVM){\r\n      this.usernameVM = util.GetUsernameVM(this)\r\n    } return this.usernameVM;\r\n  }\r\n\r\n  Password\r\n\r\n  passwordVM\r\n  get PasswordVM(){\r\n    if (!this.passwordVM){\r\n      this.passwordVM = util.GetPasswordVM(this)\r\n    } return this.passwordVM;\r\n  }\r\n\r\n  get ApiData(){\r\n    return {\r\n      username : this.Username,\r\n      password: this.Password\r\n    }\r\n  }\r\n\r\n  Is_Modal_Visible = false\r\n\r\n  get ButtonView(){\r\n    return util.GetButtonView(this)\r\n  }\r\n\r\n  get MainView(){\r\n    return util.GetMainView(this)\r\n  }\r\n  \r\n  get ModalView(){\r\n    return util.GetModalView(this)\r\n  }\r\n\r\n  ModalOK = () => {\r\n    var username = this.Username;\r\n    var pw = this.Password;\r\n    if (!username || username.length === 0){\r\n      message.warn('Bạn phải nhập UserName!');\r\n      return;\r\n    }\r\n    if (!pw || pw.length === 0){\r\n      message.warn('Bạn phải nhập Password!');\r\n      return;\r\n    }\r\n\r\n    this.Validate();\r\n  }\r\n\r\n  Initial = () => {\r\n    this.UsernameVM.Content = ''\r\n    this.PasswordVM.Content = ''\r\n  }\r\n\r\n  Validate = () => {\r\n    util.Validate(this)\r\n  }\r\n}","import { TextVM } from \"../../text/TextVM\";\r\nimport * as ts from '../../text/TextState'\r\nimport { Login } from \"./Login\"\r\nimport InputView from \"../../input/InputView\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Button, message } from 'antd';\r\nimport './Login.css'\r\nimport * as uUtil from '../item/UserUtil'\r\nimport * as uVMUtil from '../item/UserVMUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Login();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetUsernameVM = (q) => {\r\n  var qI = new TextVM();\r\n\r\n  qI.Placeholder = 'tên user'\r\n  qI.Content = q.Username;\r\n  qI.onSetContent = (v) => q.Username = v;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPasswordVM = (q) => {\r\n  var qI = new TextVM();\r\n\r\n  qI.State = ts.password\r\n  qI.Content = q.Password;\r\n  qI.onSetContent = (v) => q.Password = v;\r\n\r\n  return qI;\r\n}\r\n\r\n// View\r\nexport const GetButtonView = (q) => {\r\n  var click = () => {\r\n    q.Initial();\r\n    q.Is_Modal_Visible = true\r\n  }\r\n\r\n  return <Button type='primary' size='small'\r\n    onClick={click}>\r\n    Login\r\n  </Button>\r\n}\r\n\r\nexport const GetMainView = (q) => {\r\n  return <table className='login__table'>\r\n    <tbody>\r\n      <tr className='login__tr name'>\r\n        <th className='login__title'>\r\n          Username:\r\n        </th>\r\n        <td className='login__input'>\r\n          <InputView store={q.UsernameVM} />\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th className='login__title'>\r\n          Password:\r\n        </th>\r\n        <td className='login__input'>\r\n          <InputView store={q.PasswordVM} />\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n}\r\n\r\nexport const GetModalView = (q) => {\r\n  const hideVisible = () => {\r\n    q.Is_Modal_Visible = false\r\n  }\r\n\r\n  return <Modal title=\"Đăng nhập\" visible={q.Is_Modal_Visible}\r\n    onCancel={hideVisible}\r\n    width={350}\r\n    footer={\r\n      <>\r\n        <Button type='primary' size='small'\r\n          onClick={q.ModalOK}>ok</Button>\r\n        <Button type='text' size='small'\r\n          onClick={hideVisible}>cancel</Button>\r\n      </>\r\n    }>\r\n    <div>\r\n      {q.MainView}\r\n    </div>\r\n  </Modal>\r\n}\r\n\r\n// Method\r\nexport const Validate = (q) => {\r\n  var dictVM = q.Dict;\r\n  var dict = dictVM.ModelItem;\r\n\r\n  const setObj = (data) => {\r\n    if (data.length !== 0) {\r\n      dictVM.LoginUser = uVMUtil.get(uUtil.GetFromDb(data[0], dict), dictVM);\r\n      q.Is_Modal_Visible = false;\r\n    } else {\r\n      message.warn('Thông tin đăng nhập không đúng!')\r\n    }\r\n  }\r\n\r\n  uUtil.GetData(dictVM.Url, q.ApiData, (data) => {\r\n    setObj(data)\r\n  });\r\n}","import { message } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../util/generalUtil'\r\nimport { TextVM } from '../../text/TextVM'\r\nimport * as util from './NewPasswordUtil'\r\n\r\nexport class NewPassword {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Is_Modal_Visible: observable\r\n    })\r\n  }\r\n\r\n  OldPassword\r\n\r\n  oldPasswordVM\r\n  get OldPasswordVM(){\r\n    if (!this.oldPasswordVM){\r\n      this.oldPasswordVM = util.GetOldPasswordVM(this)\r\n    } return this.oldPasswordVM;\r\n  }\r\n\r\n  NewPassword\r\n\r\n  newPasswordVM\r\n  get NewPasswordVM(){\r\n    if (!this.newPasswordVM){\r\n      this.newPasswordVM = util.GetNewPasswordVM(this)\r\n    } return this.newPasswordVM;\r\n  }\r\n\r\n  ReNewPassword\r\n\r\n  reNewPasswordVM\r\n  get ReNewPasswordVM(){\r\n    if (!this.reNewPasswordVM){\r\n      this.reNewPasswordVM = util.GetReNewPasswordVM(this)\r\n    } return this.reNewPasswordVM;\r\n  }\r\n\r\n  get ApiData(){\r\n    var obj = {\r\n      _id : this.User.ModelItem?._id,\r\n      oldpassword: this.OldPassword,\r\n      newpassword : this.NewPassword\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get User(){\r\n    return this.Dict.LoginUser\r\n  }\r\n\r\n  Is_Modal_Visible = false\r\n\r\n  get ButtonView(){\r\n    return util.GetButtonView(this)\r\n  }\r\n\r\n  get MainView(){\r\n    return util.GetMainView(this)\r\n  }\r\n  \r\n  get ModalView(){\r\n    return util.GetModalView(this)\r\n  }\r\n\r\n  ModalOK = () => {\r\n    var opw = this.OldPassword;\r\n    var npw = this.NewPassword\r\n    var rnpw = this.ReNewPassword;\r\n    if (!opw || opw.length === 0){\r\n      message.warn('Bạn phải nhập Password cũ!');\r\n      return;\r\n    }\r\n    if (!npw || npw.length === 0){\r\n      message.warn('Bạn phải nhập Password mới!');\r\n      return;\r\n    }\r\n    if (opw === npw){\r\n      message.warn('Password mới bị trùng với password cũ!');\r\n      return;\r\n    }\r\n    if (rnpw !== npw){\r\n      message.warn('Thông tin nhập lại Password mới không đúng!');\r\n      return;\r\n    }\r\n\r\n    this.Validate();\r\n  }\r\n\r\n  OpenModal = () => {\r\n    this.Initial();\r\n    this.Is_Modal_Visible = true\r\n  }\r\n\r\n  Initial = () => {\r\n    this.OldPasswordVM.Content = ''\r\n    this.NewPasswordVM.Content = ''\r\n    this.ReNewPasswordVM.Content = ''\r\n  }\r\n\r\n  Validate = () => {\r\n    util.Validate(this)\r\n  }\r\n}","import { TextVM } from \"../../text/TextVM\";\r\nimport * as ts from '../../text/TextState'\r\nimport { NewPassword } from \"./NewPassword\"\r\nimport InputView from \"../../input/InputView\";\r\nimport Modal from \"antd/lib/modal/Modal\";\r\nimport { Button, message } from 'antd';\r\nimport './NewPassword.css'\r\nimport * as api from '../../../util/apiUtil'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new NewPassword();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetOldPasswordVM = (q) => {\r\n  var qI = new TextVM();\r\n\r\n  qI.State = ts.password\r\n  qI.Content = q.OldPassword;\r\n  qI.onSetContent = (v) => q.OldPassword = v;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetNewPasswordVM = (q) => {\r\n  var qI = new TextVM();\r\n\r\n  qI.State = ts.password\r\n  qI.Content = q.NewPassword;\r\n  qI.onSetContent = (v) => q.NewPassword = v;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetReNewPasswordVM = (q) => {\r\n  var qI = new TextVM();\r\n\r\n  qI.State = ts.password\r\n  qI.Content = q.ReNewPassword;\r\n  qI.onSetContent = (v) => q.ReNewPassword = v;\r\n\r\n  return qI;\r\n}\r\n\r\n// View\r\nexport const GetButtonView = (q) => {\r\n  var click = () => {\r\n    q.OpenModal();\r\n  }\r\n\r\n  return <Button type='primary' size='small'\r\n    onClick={click}>\r\n    New Password\r\n  </Button>\r\n}\r\n\r\nexport const GetMainView = (q) => {\r\n  return <table className='newpassword__table'>\r\n    <tbody>\r\n      <tr className='newpassword__tr name'>\r\n        <th className='newpassword__title'>\r\n          Username:\r\n        </th>\r\n        <td className='newpassword__input'>\r\n          <b>\r\n            {q.User?.Username}\r\n          </b>\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th className='newpassword__title'>\r\n          OldPassword:\r\n        </th>\r\n        <td className='newpassword__input'>\r\n          <InputView store={q.OldPasswordVM} />\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th className='newpassword__title'>\r\n          NewPassword:\r\n        </th>\r\n        <td className='newpassword__input'>\r\n          <InputView store={q.NewPasswordVM} />\r\n        </td>\r\n      </tr>\r\n      <tr>\r\n        <th className='login__title'>\r\n          Re-NewPassword:\r\n        </th>\r\n        <td className='login__input'>\r\n          <InputView store={q.ReNewPasswordVM} />\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n}\r\n\r\nexport const GetModalView = (q) => {\r\n  const hideVisible = () => {\r\n    q.Is_Modal_Visible = false\r\n  }\r\n\r\n  return <Modal title=\"Đổi mật khẩu\" visible={q.Is_Modal_Visible}\r\n    onCancel={hideVisible}\r\n    width={400}\r\n    footer={\r\n      <>\r\n        <Button type='primary' size='small'\r\n          onClick={q.ModalOK}>ok</Button>\r\n        <Button type='text' size='small'\r\n          onClick={hideVisible}>cancel</Button>\r\n      </>\r\n    }>\r\n    <div>\r\n      {q.MainView}\r\n    </div>\r\n  </Modal>\r\n}\r\n\r\n// Method\r\nexport const Validate = (q) => {\r\n  var dictVM = q.Dict;\r\n  var dict = dictVM.ModelItem;\r\n\r\n  const setObj = (data) => {\r\n    if (data === 'wrongpassword'){\r\n      message.warn('Password cũ không đúng!');\r\n    }else if (data.length !== 0) {\r\n      q.Is_Modal_Visible = false;\r\n      message.success('change password successfully!');\r\n      q.Dict.LoginUser = undefined\r\n    }\r\n  }\r\n\r\n  const apiFunc = () => api.put(`${dictVM.Url}/newpassword`, q.ApiData);\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      setObj(data)\r\n    })\r\n}","import { User_DictVM } from \"./User_DictVM\";\r\nimport * as iUtil from '../item/UserVMUtil'\r\nimport * as loginUtil from '../login/LoginUtil'\r\nimport * as newpasswordUtil from '../newpassword/NewPasswordUtil'\r\nimport * as vt from './User_Dict_ViewType'\r\nimport './User_Dict.css'\r\nimport { Button, message } from 'antd';\r\nimport * as genUtil from '../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new User_DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_LoginUser = (q) => {\r\n  if (q.IsGet_LoginUser) return undefined;\r\n  q.IsGet_LoginUser = true;\r\n\r\n  const setObj = (data) => {\r\n    q.IsSet_Model = false\r\n    q.LoginUser = data ? iUtil.get(data, q) : undefined\r\n    q.IsGet_LoginUser = true;\r\n  }\r\n\r\n  var host = q.ModelItem;\r\n  genUtil.Add_2(host.OnSet_LoginUser_Func,\r\n    () => setObj(host.LoginUser))\r\n  var q1 = host.LoginUser;\r\n}\r\n\r\nexport const GetLogin = (q) => {\r\n  return loginUtil.get(q);\r\n}\r\n\r\nexport const GetNewPassword = (q) => {\r\n  return newpasswordUtil.get(q)\r\n}\r\n\r\nexport const Handle_ViewType = (q) => {\r\n  if (q.IsGet_ViewType) return undefined;\r\n  q.IsGet_ViewType = true;\r\n\r\n  const setObj = () => {\r\n    q.ViewType = GetViewType(q)\r\n    q.IsGet_ViewType = false;\r\n  }\r\n\r\n  if (q.LoginUser) {\r\n    setObj();\r\n  } else {\r\n    genUtil.Add_2(\r\n      q.OnSet_LoginUser_Func,\r\n      setObj\r\n    )\r\n  }\r\n}\r\n\r\nexport const GetViewType = (q) => {\r\n  return q.LoginUser ? vt.user : vt.login\r\n}\r\n\r\nexport const GetDefault_LoginRender = (q) => {\r\n  return () => q.Login.ButtonView;\r\n}\r\n\r\nexport const GetDefault_UserRender = (q) => {\r\n  return () => <>\r\n    <div className='f-ac'>\r\n      <div className='ud__username'\r\n        onClick={q.NewPassword.OpenModal}>\r\n        <b>{q.LoginUser.Username}</b>\r\n      </div>\r\n      <Button type='primary' size='small'\r\n        className='btn-danger ud__logout'\r\n        onClick={q.Logout}>\r\n        x\r\n      </Button>\r\n    </div>\r\n  </>\r\n}\r\n\r\nexport const GetDefault_MainViewRender = (q) => {\r\n  return () => {\r\n    switch (q.ViewType) {\r\n      case vt.login:\r\n        return q.LoginRender()\r\n      case vt.user:\r\n        return q.UserRender();\r\n      default:\r\n        return ''\r\n    }\r\n    // q.ViewType === vt.login ?\r\n    //   q.LoginRender() : q.UserRender();\r\n  }\r\n}\r\n\r\nexport const GetDefault_ModalViewRender = (q) => {\r\n  return () => <>\r\n    {q.Login.ModalView}\r\n    {q.NewPassword.ModalView}\r\n  </>\r\n}\r\n\r\nexport const GetDefault_ViewRender = (q) => {\r\n  return () => <div>\r\n    <div className='ud__main__wrapper'>\r\n      {q.MainView}\r\n    </div>\r\n    {q.ModalView}\r\n  </div>\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as util from './AdminVMUtil'\r\n\r\nexport class AdminVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      \r\n    })\r\n  }\r\n\r\n  // Users\r\n  OnSet_Users_Func = []\r\n\r\n  users\r\n  get Users(){\r\n    if (!this.users){\r\n      util.Handle_Users(this)\r\n    } return this.users\r\n  } set Users(v){\r\n    this.users = v;\r\n    genUtil.Handle(this.OnSet_Users_Func,\r\n      (v) => this.OnSet_Users_Func = v)\r\n  }\r\n\r\n  // Projects\r\n  OnSet_Projects_Func = []\r\n\r\n  projects\r\n  get Projects(){\r\n    if (!this.projects){\r\n      util.Handle_Projects(this)\r\n    } return this.projects\r\n  } set Projects(v){\r\n    this.projects = v;\r\n    genUtil.Handle(this.OnSet_Projects_Func,\r\n      (v) => this.OnSet_Projects_Func = v)\r\n  }\r\n\r\n  // Dict\r\n  userManager_Dict\r\n  get UserManager_Dict(){\r\n    if (!this.userManager_Dict){\r\n      this.userManager_Dict = util.GetUserManager_Dict(this)\r\n    } return this.userManager_Dict;\r\n  }\r\n\r\n  projectCommand_Dict\r\n  get ProjectCommand_Dict(){\r\n    if (!this.projectCommand_Dict){\r\n      this.projectCommand_Dict = util.GetProjectCommand_Dict(this)\r\n    } return this.projectCommand_Dict\r\n  }\r\n\r\n  projectGroupCommand_Dict\r\n  get ProjectGroupCommand_Dict(){\r\n    if (!this.projectGroupCommand_Dict){\r\n      this.projectGroupCommand_Dict = \r\n        util.GetProjectGroupCommand_Dict(this)\r\n    } return this.projectGroupCommand_Dict\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport './Table.css'\r\nimport { DictVM } from '../dict/DictVM';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='admin__um__table'>\r\n          <thead className='admin__um__thead'>\r\n            <tr>\r\n              <th className='admin__um__table__username'>Username</th>\r\n              <th className='admin__um__table__password'>Password</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className='admin__um__tbody'>\r\n            {data.Items?.map(x => {\r\n              return data.ItemRender(x)\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport { Button, message } from 'antd';\r\nimport TableView from '../table/TableView';\r\nimport './Dict.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Items\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var i = this.ModelItem.Dict.GetUser_Func()\r\n    this.ModelItem.Items.push(i);\r\n\r\n    var iVM = this.GetItem_Func(i);\r\n    this.Items.push(iVM);\r\n  }\r\n\r\n  getItem_Func\r\n  get GetItem_Func(){\r\n    if(!this.getItem_Func){\r\n      this.getItem_Func = util.GetGetItem_Func(this)\r\n    } return this.getItem_Func\r\n  }\r\n\r\n  itemRender\r\n  get ItemRender(){\r\n    if (!this.itemRender){\r\n      this.itemRender = util.GetDefault_ItemRender(this)\r\n    } return this.itemRender;\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get MainView() {\r\n    return <div>\r\n      <div className='f-jc admin__um__title'>\r\n        <span>QUẢN LÝ NGƯỜI DÙNG</span>\r\n      </div>\r\n      <div className='f'>\r\n        <div className='admin__um__add'>\r\n          <Button type='primary' size='small'\r\n            className='btn-success'\r\n            onClick={this.AddItem}>+</Button>\r\n        </div>\r\n        <div className='es__main f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { DictVM } from \"./DictVM\";\r\nimport * as iUtil from '../../../../../user/item/UserVMUtil'\r\nimport './Dict.css'\r\nimport { Button } from 'antd';\r\nimport * as editTextUtil from '../../../../../text/EditableTextVMUtil';\r\nimport EditableTextView from '../../../../../text/EditableTextView';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x => {\r\n      return q.GetItem_Func(x);\r\n    });\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}\r\n\r\nexport const GetDefault_ItemRender = (q) => {\r\n  return (v) => <tr key={v.id} onDoubleClick={v.Edit}>\r\n    <td>\r\n      <div className='admin__um__username'>\r\n        {v.UsernameView}\r\n      </div>\r\n    </td>\r\n    <td>\r\n      <div className='admin__um__password f-ac'>\r\n        <div className='f1'>\r\n          {v.PasswordView}\r\n        </div>\r\n        {v.ToolView_Render()}\r\n      </div>\r\n    </td>\r\n  </tr>\r\n}\r\n\r\nexport const GetGetItem_Func = (q) => {\r\n  return (x) => {\r\n    var qI = iUtil.get(x, q)\r\n\r\n    var q1 = qI.PasswordVM = editTextUtil.get('', undefined);\r\n    q1.Is_Tool_Visible = false\r\n    qI.OnSet_RenderState = (v) => {\r\n      q1.RenderState = v\r\n    }\r\n\r\n    genUtil.Add(\r\n      q1.OnSet_RenderState_Func_Dict,\r\n      () => {\r\n        if (q1.RenderState === rs._default) {\r\n          x.Password = q1.Content;\r\n          q1.Content = ''\r\n        }\r\n      },\r\n      false\r\n    )\r\n    qI.PasswordView = <EditableTextView store={q1} />\r\n\r\n    const ok = () => {\r\n      // qI.IsSaveDatabase = false\r\n      qI.RenderState = rs._default\r\n    }\r\n    const cancel = () => {\r\n      qI.UsernameVM.Content = qI.Username;\r\n      qI.PasswordVM.Content = ''\r\n      qI.IsSaveDatabase = false\r\n      qI.RenderState = rs._default\r\n    }\r\n\r\n    qI.ToolView_Render = () => <div className='f'>\r\n      {qI.RenderState === rs.edit ?\r\n        <>\r\n          <Button type='primary' size='small'\r\n            onClick={ok}>ok</Button>\r\n          <Button type='primary' size='small'\r\n            onClick={cancel}>cancel</Button>\r\n        </>\r\n        : ''}\r\n      <Button type='primary' size='small'\r\n        className='btn-danger'\r\n        onClick={qI.Delete}>x</Button>\r\n    </div>\r\n\r\n    return qI;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { message } from 'antd';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ItemVMUtil'\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport './Item.css'\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport TextView from '../../../../../text/TextView';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\n\r\nexport class ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState : observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get projectId() {\r\n    return this.ModelItem.projectId;\r\n  }\r\n\r\n  renderState = rs.edit\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // Project\r\n  get Project() {\r\n    return this.ModelItem.Project;\r\n  } set Project(v) {\r\n    this.ModelItem.Project = v;\r\n    this.Project_Render.Content = v?.Name;\r\n  }\r\n\r\n  // project_Render\r\n  // get Project_Render() {\r\n  //   if (!this.project_Render) {\r\n  //     this.project_Render = util.GetProject_Render(this)\r\n  //   } return this.project_Render\r\n  // }\r\n\r\n  // project_Select\r\n  // get Project_Select() {\r\n  //   if (!this.project_Select) {\r\n  //     debugger\r\n  //     this.project_Select = util.GetProject_Select(this)\r\n  //   } return this.project_Select\r\n  // }\r\n\r\n  // get Project_View() {\r\n  //   switch (this.RenderState) {\r\n  //     case rs._default:\r\n  //       return <TextView store={this.Project_Render} />\r\n  //     case rs.edit:\r\n  //       return <SelectView store={this.Project_Select} />\r\n  //   }\r\n  // }\r\n\r\n  // User\r\n  get User() {\r\n    return this.ModelItem.User;\r\n  } set User(v) {\r\n    this.ModelItem.User = v;\r\n    this.User_Render.Content = v?.Username;\r\n  }\r\n\r\n  user_Render\r\n  get User_Render() {\r\n    if (!this.user_Render) {\r\n      this.user_Render = util.GetUser_Render(this)\r\n    } return this.user_Render\r\n  }\r\n\r\n  user_Select\r\n  get User_Select() {\r\n    if (!this.user_Select) {\r\n      this.user_Select = util.GetUser_Select(this)\r\n    } return this.user_Select\r\n  }\r\n\r\n  get User_View() {\r\n    switch (this.RenderState) {\r\n      case rs._default:\r\n        return <TextView store={this.User_Render} />\r\n      case rs.edit:\r\n        return <SelectView store={this.User_Select} />\r\n    }\r\n  }\r\n\r\n  // Commands\r\n  get Commands(){\r\n    return this.ModelItem.Commands\r\n  } set Commands(v){\r\n    this.ModelItem.Commands = v;\r\n  }\r\n\r\n  command_Select\r\n  get Command_Select(){\r\n    if (!this.command_Select){\r\n      this.command_Select = util.GetCommand_Select(this)\r\n    } return this.command_Select\r\n  }\r\n\r\n  get Command_View() {\r\n    return <MultiSelectView store={this.Command_Select}/>\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Group.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n}","import { GroupVM } from \"./GroupVM\"\r\nimport { SelectVM } from '../../../../../select/SelectVM';\r\nimport { TextVM } from '../../../../../text/TextVM';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { EntDelete } from \"../../../../../delete/EntDelete\";\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new GroupVM();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetProject_Render = (q) => {\r\n  var qI = new TextVM();\r\n  qI.Content = q.Project?.Name;\r\n  return qI;\r\n}\r\n\r\nexport const GetProject_Select = (q) => {\r\n  var qI = new SelectVM();\r\n  qI.TitleRender = (v) => v.Name;\r\n  qI.Placeholder = 'chọn dự án ...'\r\n  qI.OnSelectedItemChanged = (v) => {\r\n    q.Project = v;\r\n  }\r\n\r\n  const setObj = (data) => {\r\n    qI.Items = data\r\n    qI.InitialItem = q.Project;\r\n  }\r\n\r\n  var host = q.Dict.Dict\r\n  if (host.Projects) {\r\n    setObj(host.Projects)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Projects_Func,\r\n      () => setObj(host.Projects)\r\n    )\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './GroupVMUtil'\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport TextView from '../../../../../text/TextView';\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { Button, message } from 'antd';\r\nimport * as iVMUtil from '../item/ItemVMUtil'\r\nimport * as iUtil from '../item/ItemUtil'\r\nimport './Group.css'\r\n\r\nexport class GroupVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Items: observable,\r\n    })\r\n  }\r\n\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  renderState = rs.edit\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n  }\r\n\r\n  get Key() {\r\n    return this.Project;\r\n  }\r\n\r\n  // Project\r\n  project\r\n  get Project() {\r\n    return this.project;\r\n  } set Project(v) {\r\n    this.project = v;\r\n    this.Project_Render.Content = v?.Name;\r\n  }\r\n\r\n  project_Render\r\n  get Project_Render() {\r\n    if (!this.project_Render) {\r\n      this.project_Render = util.GetProject_Render(this)\r\n    } return this.project_Render\r\n  }\r\n\r\n  project_Select\r\n  get Project_Select() {\r\n    if (!this.project_Select) {\r\n      this.project_Select = util.GetProject_Select(this)\r\n    } return this.project_Select\r\n  }\r\n\r\n  get Project_View() {\r\n    switch (this.RenderState) {\r\n      case rs._default:\r\n        return <TextView store={this.Project_Render} />\r\n      case rs.edit:\r\n        return <SelectView store={this.Project_Select} />\r\n    }\r\n  }\r\n\r\n  // Item\r\n  Items = []\r\n\r\n  AddItem = () => {\r\n    var itemDict = this.Dict.ModelItem;\r\n    var i = iUtil.get(itemDict);\r\n    i.Project = this.Project;\r\n    itemDict.Items.push(i);\r\n\r\n    var ivm = iVMUtil.get(i, this);\r\n    this.Items.push(ivm);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Groups\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.Items.forEach(x => {\r\n      x.Delete();\r\n    })\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n\r\n  // Row\r\n  get RowView() {\r\n    return <tr key={this.id}>\r\n      <td className='admin__pc__group__project'>\r\n        <div className='f-ac'>\r\n          {this.Project_View}\r\n          <Button type='primary' size='small'\r\n            className='btn-danger'\r\n            onClick={this.Delete} >x</Button>\r\n        </div>\r\n      </td>\r\n      <td className='admin__pc__group__usergroup'>\r\n        <div className='f'>\r\n          <div className='admin__pc__group__add'>\r\n            <Button type='primary' size='small'\r\n              className='btn-success'\r\n              onClick={this.AddItem}>+</Button>\r\n          </div>\r\n          <div className='f1'>\r\n            <table className='admin__pc__group__authorize__table'>\r\n              <tbody>\r\n                {this.Items?.map(x => {\r\n                  return <tr key={x.id}>\r\n                    <td className='admin__pc__group__user'>{x.User_View}</td>\r\n                    <td className='admin__pc__group__command'>{x.Command_View}</td>\r\n                    <td>\r\n                      <Button type='primary' size='small'\r\n                        className='btn-danger'\r\n                        onClick={x.Delete} >x</Button>\r\n                    </td>\r\n                  </tr>\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { ItemVM } from './ItemVM'\r\nimport { EntDelete } from '../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport { CheckCircleOutlined, CloseCircleOutlined, SaveFilled } from '@ant-design/icons';\r\nimport { SelectVM } from '../../../../../select/SelectVM';\r\nimport { TextVM } from '../../../../../text/TextVM';\r\nimport { GroupVM } from '../group/GroupVM';\r\nimport * as pc from '../../../command/ProjectCommand'\r\nimport { MultiSelectVM } from '../../../../../select/MultiSelectVM';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ItemVM();\r\n\r\n  qI.ModelItem = q;\r\n  if (dict instanceof GroupVM) {\r\n    qI.Group = dict;\r\n    qI.Dict = dict.Dict;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// Project\r\n// export const GetProject_Render = (q) => {\r\n//   var qI = new TextVM();\r\n//   qI.Content = q.Project?.Name;\r\n//   return qI;\r\n// }\r\n\r\n// export const GetProject_Select = (q) => {\r\n//   var qI = new SelectVM();\r\n//   qI.TitleRender = (v) => v.Name;\r\n//   qI.Placeholder = 'chọn dự án ...'\r\n//   qI.OnSelectedItemChanged = (v) => {\r\n//     q.Project = v;\r\n//   }\r\n\r\n//   const setObj = (data) => {\r\n//     qI.Items = data\r\n//     qI.InitialItem = q.Project;\r\n//   }\r\n\r\n//   var host = q.Dict.Dict\r\n//   debugger\r\n//   if (host.Projects) {\r\n//     setObj(host.Projects)\r\n//   } else {\r\n//     genUtil.Add_2(\r\n//       host.OnSet_Projects_Func,\r\n//       () => setObj(host.Projects)\r\n//     )\r\n//   }\r\n\r\n//   return qI;\r\n// }\r\n\r\n// User\r\nexport const GetUser_Render = (q) => {\r\n  var qI = new TextVM();\r\n  qI.Content = q.User?.Username;\r\n  return qI;\r\n}\r\n\r\nexport const GetUser_Select = (q) => {\r\n  var qI = new SelectVM();\r\n  qI.Placeholder = 'chọn user ...'\r\n  qI.TitleRender = (v) => v.Username;\r\n  qI.OnSelectedItemChanged = (v) => {\r\n    q.User = v;\r\n  }\r\n\r\n  const setList = (data) => {\r\n    qI.Items = data\r\n  }\r\n\r\n  const setSelect = (data) => {\r\n    qI.InitialItem = data;\r\n  }\r\n\r\n  var host = q.Dict.Dict\r\n  if (host.Users) {\r\n    setList(host.Users)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Users_Func,\r\n      () => {\r\n        setList(host.Users)\r\n      }\r\n    )\r\n  }\r\n\r\n  var host2 = q.ModelItem\r\n  if (host2.User !== undefined) {\r\n    setSelect(host2.User)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host2.OnSet_User_Func,\r\n      () => setSelect(host2.User)\r\n    )\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// Command\r\nexport const GetCommand_Select = (q) => {\r\n  var qI = new MultiSelectVM();\r\n\r\n  qI.Items = pc.GetList();\r\n  qI.InitialItems = q.Commands;\r\n  qI.Placeholder = 'commands ...'\r\n  qI.OnSelectedItemChanged = (v) => {\r\n    q.Commands = v;\r\n  }\r\n\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { GroupVM } from '../group/GroupVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new GroupVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport { DictVM } from '../dict/DictVM';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='admin__pc__table'>\r\n          <thead className='admin__pc__thead'>\r\n            <tr>\r\n              <th className='admin__pc__table__project'>Dự án</th>\r\n              <th className='admin__pc__table__authorize'>Phân quyền</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className='admin__pc__tbody'>\r\n            {data.Groups?.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport * as iUtil from '../item/ItemVMUtil'\r\nimport * as gUtil from '../group/GroupVMUtil'\r\nimport { Button, message } from 'antd';\r\nimport TableView from '../table/TableView';\r\nimport './Dict.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      groups: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Group\r\n  groups = undefined\r\n  get Groups() {\r\n    if (!this.groups) {\r\n      util.Handle_Groups(this)\r\n    } return this.groups\r\n  } set Groups(v) {\r\n    this.groups = v;\r\n  }\r\n\r\n  AddGroup = () => {\r\n    this.Groups.push(gUtil.get(this));\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get MainView() {\r\n    return <div>\r\n      <div className='f-jc admin__pc__title'>\r\n        <span>PHÂN QUYỀN DỰ ÁN</span>\r\n      </div>\r\n      <div className='f'>\r\n        <div className='admin__pc__add'>\r\n          <Button type='primary' size='small'\r\n            className='btn-success'\r\n            onClick={this.AddGroup}>+</Button>\r\n          <Button type='primary' size='small'\r\n            className='btn-success'\r\n            onClick={this.Save}>\r\n            <SaveFilled />\r\n          </Button>\r\n        </div>\r\n        <div className='es__main f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  // Refine\r\n  Refine = () => {\r\n    // filter groups\r\n    var removeItems = []\r\n    this.Groups.forEach((x, i, a) => {\r\n      if (!x.Project || x.Items.length === 0\r\n        || a.findIndex(y => y.Project === x.Project) !== i) {\r\n        removeItems.push(x);\r\n      }\r\n    })\r\n\r\n    removeItems.forEach(x => {\r\n      x.Delete();\r\n    })\r\n\r\n    // filter user\r\n    this.Groups.forEach(x => {\r\n      removeItems = []\r\n      x.Items.forEach((y, i, a) => {\r\n        if (!y.User || y.Commands.length === 0\r\n          || a.findIndex(z => z.User === y.User) !== i) {\r\n          removeItems.push(y);\r\n        }\r\n      })\r\n\r\n      removeItems.forEach(y => {\r\n        y.Delete();\r\n      })\r\n    })\r\n\r\n    // sau khi refine user, refine group 1 lần nữa Items === 0\r\n    removeItems = []\r\n    this.Groups.forEach((x, i, a) => {\r\n      if (x.Items.length === 0) {\r\n        removeItems.push(x);\r\n      }\r\n    })\r\n\r\n    removeItems.forEach(x => {\r\n      x.Delete();\r\n    })\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    this.Refine();\r\n    this.ModelItem.Save();\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { DictVM } from \"./DictVM\";\r\nimport * as iUtil from '../item/ItemVMUtil'\r\nimport './Dict.css'\r\nimport * as gUtil from '../group/GroupVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Groups = (q) => {\r\n  if (q.IsGet_Groups) return undefined;\r\n  q.IsGet_Groups = true;\r\n\r\n  const setObj = (data) => {\r\n    const mainFunc = () => {\r\n      q.Groups = genUtil.GroupBy(data, 'Project',\r\n        (key) => {\r\n          var qI = gUtil.get(q);\r\n          qI.Project = key;\r\n          return qI;\r\n        },\r\n        (x, group) => iUtil.get(x, group));\r\n      q.IsGet_Groups = false;\r\n    }\r\n\r\n    var count = data.length;\r\n    if (count === 0) {\r\n      mainFunc();\r\n    } else {\r\n      var i = -1;\r\n      const validFunc = () => {\r\n        i++;\r\n        if (i === count - 1) {\r\n          mainFunc();\r\n        }\r\n      }\r\n\r\n      data.forEach(x => {\r\n        if (x.Project !== undefined) {\r\n          validFunc();\r\n        } else {\r\n          genUtil.Add_2(\r\n            x.OnSet_Project_Func,\r\n            validFunc\r\n          )\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './ItemVMUtil'\r\nimport * as rs from '../../../../../text/TextRenderState';\r\nimport './Item.css'\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport TextView from '../../../../../text/TextView';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { Button, message } from 'antd';\r\n\r\nexport class ItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  renderState = rs.edit\r\n  get RenderState() {\r\n    return this.renderState\r\n  } set RenderState(v) {\r\n    this.renderState = v;\r\n  }\r\n\r\n  Edit = () => {\r\n    if (this.RenderState === rs._default) {\r\n      this.RenderState = rs.edit\r\n      this.Hide_Tool();\r\n    }\r\n  }\r\n\r\n  // User\r\n  get User() {\r\n    return this.ModelItem.User;\r\n  } set User(v) {\r\n    this.ModelItem.User = v;\r\n    this.User_Render.Content = v?.Username;\r\n  }\r\n\r\n  user_Render\r\n  get User_Render() {\r\n    if (!this.user_Render) {\r\n      this.user_Render = util.GetUser_Render(this)\r\n    } return this.user_Render\r\n  }\r\n\r\n  user_Select\r\n  get User_Select() {\r\n    if (!this.user_Select) {\r\n      this.user_Select = util.GetUser_Select(this)\r\n    } return this.user_Select\r\n  }\r\n\r\n  get User_View() {\r\n    switch (this.RenderState) {\r\n      case rs._default:\r\n        return <TextView store={this.User_Render} />\r\n      case rs.edit:\r\n        return <SelectView store={this.User_Select} />\r\n    }\r\n  }\r\n\r\n  // Commands\r\n  get Commands() {\r\n    return this.ModelItem.Commands\r\n  } set Commands(v) {\r\n    this.ModelItem.Commands = v;\r\n  }\r\n\r\n  command_Select\r\n  get Command_Select() {\r\n    if (!this.command_Select) {\r\n      this.command_Select = util.GetCommand_Select(this)\r\n    } return this.command_Select\r\n  }\r\n\r\n  get Command_View() {\r\n    return <MultiSelectView store={this.Command_Select} />\r\n  }\r\n\r\n  // Hover\r\n  OnMouseEnter = () => {\r\n    if (this.RenderState === rs.edit) {\r\n      return;\r\n    }\r\n    this.Show_Tool();\r\n  }\r\n\r\n  OnMouseLeave = () => {\r\n    this.Hide_Tool();\r\n  }\r\n\r\n  Show_Tool() {\r\n    this.DeleteVM.Show();\r\n  }\r\n\r\n  Hide_Tool() {\r\n    this.DeleteVM.Hide();\r\n  }\r\n\r\n  // Save\r\n  SaveDatabase = (showMessage = true, handle) => {\r\n    this.ModelItem.SaveDatabase(showMessage, handle, false);\r\n  }\r\n\r\n  // Index\r\n  get CurrentList() {\r\n    return this.Dict.Items\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this)\r\n  }\r\n\r\n  Delete = () => {\r\n    this.CurrentList.splice(this.Index, 1)\r\n    this.ModelItem.Delete();\r\n  }\r\n\r\n  deleteVM\r\n  get DeleteVM() {\r\n    if (!this.deleteVM) {\r\n      this.deleteVM = util.GetDeleteVM(this)\r\n    } return this.deleteVM;\r\n  }\r\n\r\n  get RowView() {\r\n    return <tr>\r\n      <td>\r\n        <div className='f-ac admin__pgc__user'>\r\n          {this.User_View}\r\n          <Button type='primary' size='small'\r\n            className='btn-danger'\r\n            onClick={this.Delete} >x</Button>\r\n        </div>\r\n      </td>\r\n      <td>\r\n        <div className='admin__pgc__command'>\r\n          {this.Command_View}\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { ItemVM } from './ItemVM'\r\nimport { EntDelete } from '../../../../../delete/EntDelete';\r\nimport * as d_tt from '../../../../../delete/EntDelete_ToggleType'\r\nimport { Button, message } from 'antd';\r\nimport { CheckCircleOutlined, CloseCircleOutlined, SaveFilled } from '@ant-design/icons';\r\nimport { SelectVM } from '../../../../../select/SelectVM';\r\nimport { TextVM } from '../../../../../text/TextVM';\r\nimport * as pc from '../../../command/ProjectCommand'\r\nimport { MultiSelectVM } from '../../../../../select/MultiSelectVM';\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new ItemVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDeleteVM = (q) => {\r\n  var qI = new EntDelete();\r\n\r\n  qI.ToggleType = d_tt.manual\r\n  qI.Title = 'Xác nhận xóa?'\r\n\r\n  qI.OnRun = () => {\r\n    q.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// User\r\nexport const GetUser_Render = (q) => {\r\n  var qI = new TextVM();\r\n  qI.Content = q.User?.Username;\r\n  return qI;\r\n}\r\n\r\nexport const GetUser_Select = (q) => {\r\n  var qI = new SelectVM();\r\n  qI.Placeholder = 'chọn user ...'\r\n  qI.TitleRender = (v) => v.Username;\r\n  qI.OnSelectedItemChanged = (v) => {\r\n    q.User = v;\r\n  }\r\n\r\n  const setList = (data) => {\r\n    qI.Items = data\r\n  }\r\n\r\n  const setSelect = (data) => {\r\n    qI.InitialItem = data;\r\n  }\r\n\r\n  var host = q.Dict.Dict\r\n  if (host.Users) {\r\n    setList(host.Users)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Users_Func,\r\n      () => {\r\n        setList(host.Users)\r\n      }\r\n    )\r\n  }\r\n\r\n  var host2 = q.ModelItem\r\n  if (host2.User !== undefined) {\r\n    setSelect(host2.User)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host2.OnSet_User_Func,\r\n      () => setSelect(host2.User)\r\n    )\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\n// Command\r\nexport const GetCommand_Select = (q) => {\r\n  var qI = new MultiSelectVM();\r\n\r\n  qI.Items = pc.GetList();\r\n  qI.InitialItems = q.Commands;\r\n  qI.Placeholder = 'commands ...'\r\n  qI.OnSelectedItemChanged = (v) => {\r\n    q.Commands = v;\r\n  }\r\n\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport { ItemVM } from '../item/ItemVM';\r\n\r\nclass TableItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.RowView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport './Table.css'\r\nimport TableItemView from './TableItemView';\r\nimport { DictVM } from '../dict/DictVM';\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <table className='admin__pgc__table'>\r\n          <thead className='admin__pgc__thead'>\r\n            <tr>\r\n              <th className='admin__pgc__table__user'>Người dùng</th>\r\n              <th className='admin__pgc__table__authorize'>Phân quyền</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody className='admin__pgc__tbody'>\r\n            {data.Items?.map(x => {\r\n              return <TableItemView key={x.id} store={x} />\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TableView);\r\n","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DictVMUtil'\r\nimport * as iVMUtil from '../item/ItemVMUtil'\r\nimport * as iUtil from '../item/ItemUtil'\r\nimport { Button, message } from 'antd';\r\nimport TableView from '../table/TableView';\r\nimport './Dict.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\nimport { Item } from '../item/Item';\r\n\r\nexport class DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Items\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      util.Handle_Items(this)\r\n    } return this.items\r\n  } set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var i = iUtil.get(this.ModelItem);\r\n    this.ModelItem.Items.push(i);\r\n\r\n    var iVM = iVMUtil.get(i, this)\r\n    this.Items.push(iVM);\r\n  }\r\n\r\n  // table\r\n  get TableView() {\r\n    return <TableView store={this} />\r\n  }\r\n\r\n  get MainView() {\r\n    return <div>\r\n      <div className='f-jc admin__pgc__title'>\r\n        <span>PHÂN QUYỀN NHÓM DỰ ÁN</span>\r\n      </div>\r\n      <div className='f'>\r\n        <div className='admin__pgc__add'>\r\n          <Button type='primary' size='small'\r\n            className='btn-success'\r\n            onClick={this.AddItem}>+</Button>\r\n          <Button type='primary' size='small'\r\n            className='btn-success'\r\n            onClick={this.Save}>\r\n            <SaveFilled />\r\n          </Button>\r\n        </div>\r\n        <div className='es__main f1'>\r\n          <TableView store={this} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  // Refine\r\n  Refine = () => {\r\n    // filter groups\r\n    var removeItems = []\r\n    this.Items.forEach((x, i, a) => {\r\n      if (!x.User || x.Commands.length === 0\r\n        || a.findIndex(y => y.User === x.User) !== i) {\r\n        removeItems.push(x);\r\n      }\r\n    })\r\n\r\n    removeItems.forEach(x => {\r\n      x.Delete();\r\n    })\r\n  }\r\n\r\n  // Save\r\n  Save = () => {\r\n    this.Refine();\r\n    this.ModelItem.Save();\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { DictVM } from \"./DictVM\";\r\nimport * as iUtil from '../item/ItemVMUtil'\r\nimport './Dict.css'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new DictVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Items = (q) => {\r\n  if (q.IsGet_Items) return undefined;\r\n  q.IsGet_Items = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Items = data.map(x=> iUtil.get(x, q));\r\n    q.IsGet_Items = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Items) {\r\n    setObj(host.Items)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Items_Func,\r\n    () => setObj(host.Items),\r\n    false\r\n  )\r\n}","import { AdminVM } from \"./AdminVM\";\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nimport * as umDictUtil from '../usermanager/dict/DictVMUtil'\r\nimport * as pcDictUtil from '../project/dict/DictVMUtil'\r\nimport * as pgcDictUtil from '../projectgroup/dict/DictVMUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new AdminVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_Users = (q) => {\r\n  if (q.IsGet_Users) return undefined\r\n  q.IsGet_Users = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Users = data\r\n    q.IsGet_Users = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Users){\r\n    setObj(host.Users)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Users_Func,\r\n      () => setObj(host.Users)\r\n    )\r\n  }\r\n}\r\n\r\nexport const Handle_Projects = (q) => {\r\n  if (q.IsGet_Projects) return undefined\r\n  q.IsGet_Projects = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Projects = data\r\n    q.IsGet_Projects = false;\r\n  }\r\n\r\n  var host = q.ModelItem\r\n  if (host.Projects){\r\n    setObj(host.Projects)\r\n  } else {\r\n    genUtil.Add_2(\r\n      host.OnSet_Projects_Func,\r\n      () => setObj(host.Projects)\r\n    )\r\n  }\r\n}\r\n\r\nexport const GetUserManager_Dict = (q) => {\r\n  return umDictUtil.get(q.ModelItem.UserManager_Dict, q);\r\n}\r\n\r\nexport const GetProjectCommand_Dict = (q) => {\r\n  return pcDictUtil.get(q.ModelItem.ProjectCommand_Dict, q)\r\n}\r\n\r\nexport const GetProjectGroupCommand_Dict = (q) => {\r\n  return pgcDictUtil.get(q.ModelItem.ProjectGroupCommand_Dict, q)\r\n}","import * as util from './LeftNavUtil'\r\n\r\nexport class LeftNav {\r\n  Title\r\n\r\n  currentProject\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport { Dict } from './Dict'\r\n\r\nclass DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Dict();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className={data.Current_WrapperCss}>\r\n          {data.Items?.map(x => x.View)}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DictView)","import { makeObservable, observable, action } from 'mobx';\r\nimport DictView from \"./DictView\"\r\n\r\nexport class Dict {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Items: observable,\r\n      CurrentItem: observable\r\n    })\r\n  }\r\n\r\n  WrapperCss\r\n\r\n  get Refine_WrapperCss(){\r\n    if (!this.WrapperCss) return []\r\n    if (!Array.isArray(this.WrapperCss)) return [this.WrapperCss]\r\n    return this.WrapperCss;\r\n  }\r\n\r\n  get Current_WrapperCss(){\r\n    return this.Refine_WrapperCss.length > 0 ? this.Refine_WrapperCss[0] : ''\r\n  }\r\n\r\n  ItemCss\r\n\r\n  get Refine_ItemCss(){\r\n    if (!this.ItemCss) return []\r\n    if (!Array.isArray(this.ItemCss)) return [this.ItemCss]\r\n    return this.ItemCss;\r\n  }\r\n\r\n  Items = undefined\r\n\r\n  CurrentItem = undefined\r\n\r\n  get View() {\r\n    return <DictView store={this} />\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport { Item } from \"./Item\";\r\nimport './Item.css'\r\n\r\nclass ItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Item();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.Items ?\r\n          <div>\r\n            {data.MainView}\r\n\r\n            {data.Is_Sub_Visible ?\r\n              <div className={data.Sub_WrapperCss}>\r\n                {data.Items.map(x => x.View)}\r\n              </div>\r\n              : ''}\r\n          </div>\r\n          : data.MainView}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ItemView)","import { CaretDownOutlined, CaretUpOutlined } from '@ant-design/icons';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../util/generalUtil'\r\nimport ItemView from \"./ItemView\"\r\n\r\nexport class Item {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Items: observable,\r\n      Is_Sub_Visible: observable\r\n    })\r\n  }\r\n\r\n  OnSet_id_Func_Dict = []\r\n  __id\r\n  get _id() {\r\n    return this.__id\r\n  } set _id(v) {\r\n    this.__id = v;\r\n    genUtil.Handle(this.OnSet_id_Func_Dict,\r\n      (v) => this.OnSet_id_Func_Dict = v)\r\n  }\r\n\r\n  tempId\r\n  get TempId() {\r\n    if (!this.tempId) {\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  Dict\r\n\r\n  Func\r\n\r\n  // Sub\r\n  Items = undefined\r\n\r\n  get IsHaveSub() {\r\n    return this.Items && this.Items.length !== 0\r\n  }\r\n\r\n  Is_Sub_Visible = false\r\n\r\n  // Rank\r\n  get Rank() {\r\n    return this.SupItem ? this.SupItem.Rank + 1 : 0\r\n  }\r\n\r\n  OnClick = () => {\r\n    if (this.IsHaveSub) {\r\n      this.Is_Sub_Visible = !this.Is_Sub_Visible\r\n    } else {\r\n      this.Dict.CurrentItem = this;\r\n      this.Func();\r\n    }\r\n  }\r\n\r\n  Active = () => {\r\n    this.Dict.CurrentItem = this;\r\n  }\r\n\r\n  get ActiveCss() {\r\n    return this._id === this.Dict.CurrentItem?._id ? 'active' : ''\r\n  }\r\n\r\n  get Sub_WrapperCss() {\r\n    var list = this.Dict.Refine_WrapperCss;\r\n    var index = this.Rank + 1;\r\n\r\n    return list.length > index ? list[index] : ''\r\n  }\r\n\r\n  get MainCss() {\r\n    var list = this.Dict.Refine_ItemCss;\r\n    var index = this.Rank\r\n\r\n    return list.length > index ? list[index] : ''\r\n  }\r\n\r\n  get View() {\r\n    return <ItemView key={this.id} store={this} />\r\n  }\r\n\r\n  get MainView() {\r\n    return <div onClick={this.OnClick}\r\n      className={`nav__item f ${this.MainCss} ${this.ActiveCss}`}>\r\n      <span>\r\n        {this.Title}\r\n      </span>\r\n      {this.IsHaveSub ?\r\n        <div className='nav_item__togglesub'>\r\n          {this.Is_Sub_Visible ?\r\n            <CaretDownOutlined />\r\n            :\r\n            <CaretUpOutlined />\r\n          }\r\n        </div>\r\n        : ''}\r\n    </div>\r\n  }\r\n}","import { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport * as pvt from '../../../project/base/ProjectViewType'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\n// Property\r\nexport const GetTitle = (viewType) => {\r\n  var title;\r\n\r\n  switch (viewType) {\r\n    case pvt.mass:\r\n      title = 'MASS';\r\n      break;\r\n\r\n    // MassType\r\n    case pvt.masstype:\r\n      title = 'ĐẦU MỤC CÔNG VIỆC';\r\n      break;\r\n    case pvt.mt_list:\r\n      title = 'DANH SÁCH';\r\n      break;\r\n    case pvt.mt_category_binding:\r\n      title = 'THEO CATEGORY';\r\n      break;\r\n    case pvt.mt_material_binding:\r\n      title = 'THEO VẬT LIỆU';\r\n      break;\r\n    case pvt.mt_system_binding:\r\n      title = 'THEO HỆ THỐNG';\r\n      break;\r\n\r\n    // Level\r\n    case pvt.level:\r\n      title = 'LEVEL';\r\n      break;\r\n    case pvt.mappinglevel:\r\n      title = 'MAPPING';\r\n      break;\r\n    case pvt.typicallevel:\r\n      title = 'TYPICAL';\r\n      break;\r\n\r\n    // ExportSet\r\n    case pvt.exportset:\r\n      title = 'EXPORT SET'\r\n      break;\r\n    case pvt.phase:\r\n      title = 'VERSION';\r\n      break;\r\n    case pvt.inputdata:\r\n      title = 'INPUT DATA';\r\n      break;\r\n\r\n    case pvt.category:\r\n      title = 'CATEGORY'\r\n      break;\r\n\r\n    case pvt.parameter:\r\n      title = 'PARAMETER'\r\n      break;\r\n\r\n    case pvt.massexport:\r\n      title = 'MASS EXPORT'\r\n      break;\r\n\r\n    case pvt.project:\r\n      title = 'PROJECT'\r\n      break;\r\n  }\r\n\r\n  return title;\r\n}\r\n\r\nexport const GetValues = (viewType) => {\r\n  var obj\r\n\r\n  if (viewType == null) {\r\n    obj = pmDataVM().CurrentProject ?\r\n      [\r\n        pvt.mass,\r\n        pvt.level,\r\n        pvt.exportset,\r\n        pvt.phase,\r\n        pvt.inputdata\r\n      ] :\r\n      [\r\n        pvt.mass,\r\n        pvt.masstype, \r\n        pvt.category, \r\n        pvt.parameter, \r\n        pvt.massexport,\r\n        pvt.project\r\n      ]\r\n  } else {\r\n    switch (viewType) {\r\n      case pvt.masstype:\r\n        obj = [\r\n          pvt.mt_list,\r\n          pvt.mt_material_binding,\r\n          pvt.mt_category_binding,\r\n          pvt.mt_system_binding\r\n        ]\r\n        break;\r\n      case pvt.level:\r\n        obj = [\r\n          pvt.mappinglevel,\r\n          pvt.typicallevel\r\n        ]\r\n    }\r\n  }\r\n\r\n  return obj;\r\n}","import { LeftNavVM } from \"./LeftNavVM\"\r\nimport * as modelUtil from './LeftNavUtil'\r\nimport { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as pvt from '../../../project/base/ProjectViewType'\r\nimport { Dict as MenuDict } from '../../../../../nav/dict/Dict'\r\nimport * as menuItemUtil from '../../../../../nav/item/ItemUtil'\r\nimport * as itemUtil from '../item/ItemUtil'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nexport const get = (q) => {\r\n  var qI = new LeftNavVM();\r\n\r\n  qI.ModelItem = q;\r\n  genUtil.Add(\r\n    pmDataVM().OnSet_CurrentProject_Func_Dict,\r\n    () => qI.CurrentProject = pmDataVM().CurrentProject,\r\n    false);\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(modelUtil.GetTest());\r\n}\r\n\r\n// Property\r\nexport const GetPreTitle = (q) => {\r\n  return q.CurrentProject ? 'DỰ ÁN'\r\n    : 'CÁC DỰ ÁN';\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  return q.CurrentProject ? q.CurrentProject.Name\r\n    : '';\r\n}\r\n\r\nexport const GetItemDict = (q) => {\r\n  var qI = new MenuDict();\r\n\r\n  var wc = 'leftnav__items f'\r\n  var ic = 'leftnav__item'\r\n  qI.WrapperCss = [wc, wc]\r\n  qI.ItemCss = [ic, ic]\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (q) => {\r\n  var list = itemUtil.GetValues();\r\n  var menuDict = q.ItemDict\r\n\r\n  const getItem = (value, sup) => {\r\n    var qI = menuItemUtil.get(menuDict);\r\n    qI.SupItem = sup;\r\n\r\n    qI._id = value;\r\n    qI.Title = itemUtil.GetTitle(value);\r\n    qI.Func = () => q.ProjectViewType = value;\r\n\r\n    // SubItems\r\n    qI.Items = itemUtil.GetValues(value)\r\n      ?.map(x => getItem(x, qI))\r\n\r\n    return qI;\r\n  }\r\n\r\n  return list.map(x => {\r\n    return getItem(x);\r\n  })\r\n}\r\n\r\nexport const SetItems = (q) => {\r\n  var items = GetItems(q);\r\n  var qI = q.ItemDict;\r\n  qI.Items = items;\r\n\r\n  items[0].Active();\r\n}","import { LeftNav } from \"./LeftNav\"\r\n\r\nexport const GetTest = () => {\r\n  var qI = new LeftNav();\r\n\r\n  qI.Title = 'HikariComplex'\r\n\r\n  return qI;\r\n}\r\n\r\n// Property","import { Item } from \"./Item\"\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new Item();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../../single/form/PMDataVM';\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport * as util from './LeftNavVMUtil'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance\r\nexport const pmData = () => PMData.Instance\r\n\r\nexport class LeftNavVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      // projectViewType : observable,\r\n      title : observable,\r\n      preTitle : observable\r\n    })\r\n  }\r\n\r\n  preTitle = undefined\r\n  get PreTitle (){\r\n    if (!this.preTitle){\r\n      this.preTitle = util.GetPreTitle(this);\r\n    }\r\n    return this.preTitle;\r\n  } set PreTitle(v){\r\n    this.preTitle = v;\r\n  }\r\n\r\n  title = undefined\r\n  get Title (){\r\n    if (!this.title){\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  } set Title(v){\r\n    this.title = v;\r\n  }\r\n\r\n  // ItemDict\r\n  itemDict\r\n  get ItemDict(){\r\n    if (!this.itemDict){\r\n      this.itemDict = util.GetItemDict(this)\r\n      util.SetItems(this);\r\n    } return this.itemDict;\r\n  }\r\n\r\n  currentProject\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n\r\n    this.ModelItem.CurrentProject = v?.ModelItem;\r\n\r\n    // MenuItems\r\n    util.SetItems(this);\r\n\r\n    this.PreTitle = util.GetPreTitle(this);\r\n    this.Title = util.GetTitle(this);\r\n  }\r\n\r\n  get ProjectViewType(){\r\n    return pmDataVM().ProjectViewType;\r\n  } set ProjectViewType(v){\r\n    pmDataVM().ProjectViewType = v;\r\n  }\r\n  \r\n  get UpdatedDate(){\r\n    return pmData().UpdatedDate;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { } from '@ant-design/icons';\r\nimport './LeftNav.css'\r\nimport { LeftNavVM } from './LeftNavVM';\r\nimport * as navUtil from './LeftNavVMUtil'\r\n\r\nclass LeftNavView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = navUtil.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <nav className='leftnav'>\r\n          {/* Wrapper */}\r\n          <div className='leftnav__wrapper'>\r\n            {/* Body */}\r\n            <div className='leftnav__body'>\r\n\r\n              {/* Title */}\r\n              <span className='leftnav__title'>\r\n                <span className='leftnav__title__prefix'>\r\n                  {data.PreTitle}\r\n                </span>\r\n                <span className='leftnav__title__name'>\r\n                  {data.Title}\r\n                </span>\r\n              </span>\r\n\r\n              {/* Items */}\r\n              <div className='leftnav__itemdict__wrapper'>\r\n                {data.ItemDict.View}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Footer */}\r\n            <div className='leftnav__footer'>\r\n              <span>© Copyright</span>\r\n              <span>{`Updated Date: ${data.UpdatedDate}`}</span>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LeftNavView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { MassDetailVM } from './MassDetailVM';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport './MassDetail.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass MassDetailView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n\r\n    data.id = id;\r\n\r\n    // Set up Main Width\r\n    pmDataVM().Main_Classname = 'massdetail__comp'\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          {pmDataVM().Mds_Dict_Dict.Pick_MDS_View}\r\n          {pmDataVM().Mds_Dict_Dict.ModalView}\r\n        </div>\r\n        <div className='massdetail__table__wrapper'>\r\n          {data.DetailTable.WrapperView}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(MassDetailView));\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as projectUtil from '../base/ProjectUtil'\r\nimport * as projectVMUtil from '../base/ProjectVMUtil'\r\nimport * as util from './ProjectCompVMUtil'\r\nimport * as pvt from '../base/ProjectViewType'\r\n// import TypicalLevelSettingView from '../../setting/typicallevel/TypicalLevelSettingView';\r\nimport * as pct from '../base/ProjectCommandType'\r\nimport { Button } from \"antd\";\r\nimport ProjectCompView from './ProjectCompView';\r\nimport * as dot from '../../design/DesignOptionType'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class ProjectCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectVM: observable,\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n    projectUtil.getById(v, (item) => {\r\n      this.ProjectVM = projectVMUtil.get(item);\r\n    })\r\n  }\r\n\r\n  projectVM = undefined\r\n  get ProjectVM() {\r\n    return this.projectVM;\r\n  }\r\n  set ProjectVM(v) {\r\n    this.projectVM = v;\r\n\r\n    pmDataVM().CurrentProject = v;\r\n\r\n    if (pmDataVM().DesignOption === dot.web) {\r\n      var list = [v];\r\n      pmDataVM().Project_DictVM.Items = list;\r\n      // pmData().Phase_Dict = v.ModelItem.Phase_Dict;\r\n    }\r\n\r\n    var massResComp = this.MassResultCompVM;\r\n    massResComp.ProjectVMStorageList = list;\r\n    massResComp.ProjectSelectVM.InitialItems = list;\r\n\r\n    // var setItemsFuncs = () => massResComp.PhaseVMStorageList = phase_DictVM.Items;\r\n\r\n    // var phase_DictVM = v.Phase_DictVM;\r\n    // if (phase_DictVM.Items) {\r\n    //   setItemsFuncs();\r\n    // } else {\r\n    //   phase_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n    //     setItemsFuncs();\r\n    //   })\r\n    // }\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM() {\r\n    if (!this.massResultCompVM) {\r\n      var obj = this.massResultCompVM = util.GetMassResultCompVM(this);\r\n      pmDataVM().MassResultCompVM = obj;\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n\r\n  get ProjectViewType() {\r\n    return pmDataVM().ProjectViewType;\r\n  } set ProjectViewType(v) {\r\n    pmDataVM().ProjectViewType = v;\r\n  }\r\n\r\n  // View\r\n  get ViewElement() {\r\n    if (!this.ProjectVM) return undefined;\r\n\r\n    var commands = pmDataVM().Commands;\r\n    if (commands && (commands.includes(pct.view) || commands.includes(pct.edit))) {\r\n      var id = this.ProjectVM.id;\r\n\r\n      switch (this.ProjectViewType) {\r\n        case pvt.mass:\r\n          return <div className='massresult__comp__wrapper'>\r\n            {this.MassResultCompVM.View}\r\n          </div>\r\n\r\n        case pvt.mappinglevel:\r\n          return <>\r\n            {this.ProjectVM.TypicalLevelSetting_ForEdit ?\r\n              this.ProjectVM.TypicalLevelSetting_ForEdit.MappingView\r\n              // <TypicalLevelSettingView key={id} store={this.ProjectVM.TypicalLevelSetting_ForEdit} />\r\n              : ''}\r\n          </>\r\n        case pvt.typicallevel:\r\n          return <>\r\n            {this.ProjectVM.TypicalLevelSetting_ForEdit ?\r\n              this.ProjectVM.TypicalLevelSetting_ForEdit.TypicalView\r\n              // <TypicalLevelSettingView key={id} store={this.ProjectVM.TypicalLevelSetting_ForEdit} />\r\n              : ''}\r\n          </>\r\n\r\n        case pvt.exportset:\r\n          return this.ProjectVM.ExportSet_Dict.ModelView.View;\r\n        case pvt.phase:\r\n          return this.ProjectVM.Phase_DictVM.View\r\n        case pvt.inputdata:\r\n          return this.ProjectVM.ExportSet_Dict.InputView.View;\r\n        // return <ExportSetMain_View key={id} store={this.ProjectVM.ExportSet_Dict} />\r\n      }\r\n    }\r\n\r\n    return pmDataVM().UnAuthorized_View\r\n  }\r\n\r\n  get View() {\r\n    return <ProjectCompView store={this} />\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM'\r\nimport MassResultComp from '../../mass/result/base/MassResultComp'\r\nimport * as massResutlCompVMUtil from '../../mass/result/base/MassResultCompVMUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport ProjectCompVM from './ProjectCompVM';\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\n// Instance\r\nexport const get = () => {\r\n  var qI = new ProjectCompVM();\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetMassResultCompVM = (q) => {\r\n  var obj = massResutlCompVMUtil.get(new MassResultComp(), false);\r\n  obj.IsShowProjectSelect = false;\r\n  obj.CanHavePhase = true;\r\n  return obj;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport './ProjectComp.css'\r\nimport * as util from './ProjectCompVMUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as dot from '../../design/DesignOptionType'\r\n\r\nconst pmData = () => PMData.Instance;\r\n\r\nclass ProjectCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.get()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (pmData().DesignOption === dot.web) {\r\n      var data = this.state;\r\n      const id = this.props.match.params.id;\r\n      data.id = id;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.ProjectVM ? data.ViewElement : ''}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// export default withRouter(observer(ProjectCompView));\r\nexport default observer(ProjectCompView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from 'antd';\r\nimport './Admin.css'\r\nimport { AdminVM } from './AdminVM';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport * as comUtil from '../../../../../util/commandUtil'\r\nimport * as ct from '../../command/Command'\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nclass AdminView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = pmDataVM().Admin\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='admin__wrapper'>\r\n          {comUtil.Validate(ct.admin) ?\r\n            <>\r\n              <div>\r\n                {data.UserManager_Dict.MainView}\r\n              </div>\r\n              <div className='notfirst'>\r\n                {data.ProjectCommand_Dict.MainView}\r\n              </div>\r\n              <div className='notfirst'>\r\n                {data.ProjectGroupCommand_Dict.MainView}\r\n              </div>\r\n            </>\r\n            : pmDataVM().UnAuthorized_View}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(AdminView);\r\n","export const admin = 'admin'\r\nexport const edit = 'edit'","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { PMDataVM } from '../../single/form/PMDataVM';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance\r\n\r\nclass HomeView extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        {pmDataVM().HomeView}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(HomeView);\r\n","import { withRouter } from \"react-router-dom\";\r\nimport ProjectCompView from \"./ProjectCompView\";\r\n\r\nexport default withRouter(ProjectCompView);","import * as genUtil from '../../../../util/generalUtil'\r\nimport * as comUtil from '../../../../util/commandUtil'\r\nimport * as pc from '../../entity/command/ProjectCommand'\r\nimport { PMData } from '../model/PMData';\r\nimport * as dot from '../../entity/design/DesignOptionType'\r\n\r\n// Project\r\nimport * as pvt from '../../entity/project/base/ProjectViewType'\r\nimport * as project_DictVMUtil from '../../entity/project/dict/Project_DictVMUtil'\r\n\r\nimport * as massResultCompVMUtil from '../../entity/mass/result/base/MassResultCompVMUtil'\r\nimport MassResultCompView from '../../entity/mass/result/base/MassResultCompView';\r\n\r\nimport DO_CompView from '../../entity/doc/comp/DO_CompView';\r\nimport MassTypeSettingView from '../../entity/setting/massType/MassTypeSettingView';\r\n\r\n// MassGroup\r\nimport * as mgsddUtil from '../../entity/setting/massGroup/dict/dict/MGS_Dict_DictVMUtil'\r\nimport * as mgsd_ut from '../../entity/setting/massGroup/dict/base/MGS_Dict_UseType'\r\n\r\n// MassDetail\r\nimport * as mdsddUtil from '../../entity/setting/massDetail/dict/dict/MDS_Dict_DictVMUtil'\r\n\r\n// SiteSuggest\r\nimport * as sgddUtil from '../../entity/setting/sitesuggest/dict/dict/Dict_DictVMUtil'\r\n\r\n// MassType\r\nimport * as massTypeDictUtil from '../../entity/massType/base/BaseVMUtil'\r\n\r\n// Category\r\nimport * as categoryDictUtil from '../../entity/category/list/dict/DictVMUtil'\r\n\r\n// Parameter\r\nimport * as parameterDictUtil from '../../entity/parameter/list/dict/DictVMUtil'\r\n\r\n// MassExport\r\nimport * as massExportDictUtil from '../../entity/massExport/list/dict/DictVMUtil'\r\n\r\nimport * as userDictUtil from '../../../user/dict/User_DictVMUtil'\r\nimport * as adminUtil from '../../entity/admin/main/AdminVMUtil'\r\n\r\n// View\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\r\nimport LeftNavView from '../../entity/nav/left/base/LeftNavView';\r\nimport MassDetailView from '../../entity/mass/detail/MassDetailView';\r\nimport ProjectCompView from '../../entity/project/comp/ProjectCompView';\r\nimport AdminView from '../../entity/admin/main/AdminView';\r\nimport HomeView from '../../entity/home/HomeView';\r\nimport ProjectCompView__Router from '../../entity/project/comp/ProjectCompView__Router';\r\nimport ProjectCompVM from '../../entity/project/comp/ProjectCompVM';\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Project\r\nexport const GetProject_DictVM = (data) => {\r\n  return project_DictVMUtil.get\r\n    (pmData().Project_Dict);\r\n}\r\n\r\nexport const GetProjectComp = (q) => {\r\n  var qI = new ProjectCompVM();\r\n  return qI;\r\n}\r\n\r\n// MassResult\r\nexport const GetMassResultCompVM = (data) => {\r\n  return massResultCompVMUtil.get\r\n    (pmData().MassResultComp);\r\n}\r\n\r\n// MassGroup\r\nexport const GetMgs_Dict_Dict = (data) => {\r\n  return mgsddUtil.get(pmData().Mgs_Dict_Dict);\r\n}\r\n\r\nexport const GetMassGroupSetting_Dict = (data) => {\r\n  return genUtil.SingleFilter\r\n    (data.Mgs_Dict_Dict.Items, (x) => x.UseType === mgsd_ut.project);\r\n}\r\n\r\n// MassDetail\r\nexport const GetMds_Dict_Dict = (data) => {\r\n  return mdsddUtil.get(pmData().Mds_Dict_Dict);\r\n}\r\n\r\n// SiteDict\r\nexport const Handle_SG_Dict_Dict = (q) => {\r\n  if (q.IsGet_SG_Dict_Dict) return undefined;\r\n  q.IsGet_SG_Dict_Dict = true;\r\n\r\n  const setObj = (data) => {\r\n    q.SG_Dict_Dict = sgddUtil.get(data)\r\n    q.IsGet_SG_Dict_Dict = false;\r\n  }\r\n\r\n  var host = pmData()\r\n  if (host.SG_Dict_Dict) {\r\n    setObj(host.SG_Dict_Dict)\r\n  }\r\n  genUtil.Add_2(\r\n    host.OnSet_SG_Dict_Dict_Funcs,\r\n    () => setObj(host.SG_Dict_Dict),\r\n    false\r\n  )\r\n\r\n  //return sgddUtil.get(pmData().SG_Dict_Dict)\r\n}\r\n\r\n// UserDict\r\nexport const GetUserDict = (data) => {\r\n  var qI = userDictUtil.get(pmData().UserDict, data);\r\n\r\n  qI.ViewRender = () => <div className='ud__wrapper'>\r\n    <div className='ud__dec f'>\r\n      <div className='f1' />\r\n      <div>\r\n        <div className='ud__main__wrapper'>\r\n          {qI.MainView}\r\n        </div>\r\n        {qI.ModalView}\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetAdmin = (data) => {\r\n  return adminUtil.get(pmData().Admin, data);\r\n}\r\n\r\n// Commands\r\nexport const Handle_Commands = (q) => {\r\n  if (q.IsGet_Commands) return undefined;\r\n  q.IsGet_Commands = true;\r\n\r\n  const setObj = (data) => {\r\n    q.Commands = data\r\n    q.IsGet_Commands = false;\r\n  }\r\n\r\n  var host = pmData()\r\n  if (host.Commands) {\r\n    setObj(host.Commands)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_Commands_Func,\r\n    () => setObj(host.Commands),\r\n    false\r\n  )\r\n}\r\n\r\nexport const Handle_AdminCommands = (q) => {\r\n  if (q.IsGet_AdminCommands) return undefined;\r\n  q.IsGet_AdminCommands = true;\r\n\r\n  const setObj = (data) => {\r\n    q.AdminCommands = data\r\n    q.IsGet_AdminCommands = false;\r\n  }\r\n\r\n  var host = pmData()\r\n  if (host.AdminCommands) {\r\n    setObj(host.AdminCommands)\r\n  }\r\n\r\n  genUtil.Add_2(\r\n    host.OnSet_AdminCommands_Func,\r\n    () => setObj(host.AdminCommands),\r\n    false\r\n  )\r\n}\r\n\r\n// MassType\r\nexport const GetMassType_Dict = (q) => {\r\n  var qI = massTypeDictUtil.get(pmData().MassType_Dict);\r\n  return qI;\r\n}\r\n\r\n// Category\r\nexport const GetCategory_Dict = (q) => {\r\n  var qI = categoryDictUtil.get(pmData().Category_Dict)\r\n  return qI;\r\n}\r\n\r\n// Parameter\r\nexport const GetParameter_Dict = (q) => {\r\n  var qI = parameterDictUtil.get(pmData().Parameter_Dict)\r\n  return qI;\r\n}\r\n\r\n\r\n// MassExport\r\nexport const GetMassExport_Dict = (q) => {\r\n  var qI = massExportDictUtil.get(pmData().MassExport_Dict)\r\n  return qI;\r\n}\r\n\r\n// View\r\nexport const GetHomeView = (q) => {\r\n  if (q.ProjectViewType !== pvt.mass) {\r\n    if (!comUtil.Validate([pc.view, pc.edit])) {\r\n      return q.UnAuthorized_View\r\n    }\r\n  }\r\n\r\n  switch (q.ProjectViewType) {\r\n    case pvt.mass:\r\n      return <div className='massresult__comp__wrapper'>\r\n        <MassResultCompView store={q.MassResultCompVM} />\r\n      </div>\r\n    case pvt.mepsetting:\r\n      return 'MEP Setting'\r\n    case pvt.document:\r\n      return <DO_CompView />\r\n\r\n    // MassType\r\n    case pvt.masstype:\r\n      return <MassTypeSettingView />\r\n    case pvt.mt_list:\r\n      return q.MassType_Dict.ListData.View\r\n    case pvt.mt_category_binding:\r\n      return q.MassType_Dict.CategoryBindingData.View\r\n    case pvt.mt_material_binding:\r\n      return q.MassType_Dict.MaterialBindingData.View\r\n    case pvt.mt_system_binding:\r\n      return q.MassType_Dict.SystemBindingData.View\r\n\r\n    // Category\r\n    case pvt.category:\r\n      return q.Category_Dict.View\r\n\r\n    // Parameter\r\n    case pvt.parameter:\r\n      return q.Parameter_Dict.View\r\n\r\n    // MassExport\r\n    case pvt.massexport:\r\n      return q.MassExport_Dict.View\r\n\r\n      // Project\r\n    case pvt.project:\r\n      return q.Project_DictVM.View\r\n  }\r\n}\r\n\r\nexport const GetView = (q) => {\r\n  switch (q.DesignOption) {\r\n    case dot.web:\r\n      return <div className='projectcomp'>\r\n        <LeftNavView />\r\n        <div className='projectcomp__main__wrapper leftoffset'>\r\n          {q.UserDict.View}\r\n\r\n          <div className='projectcomp__main__dec'>\r\n            <div className={q.Main_Classname}>\r\n\r\n              <Router basename={process.env.PUBLIC_URL}>\r\n                <Switch>\r\n                  <Route exact path=\"/\" component={HomeView} />\r\n\r\n                  {/* Mass Detail */}\r\n                  <Route exact path=\"/massdetail/:id\" component={MassDetailView} />\r\n                  <Route exact path=\"/project/:id\" component={ProjectCompView__Router} />\r\n\r\n                  {/* Admin */}\r\n                  <Route exact path=\"/admin\" component={AdminView} />\r\n                </Switch>\r\n              </Router>\r\n\r\n            </div>\r\n            <div className='projectcomp__main__bottom' />\r\n          </div>\r\n        </div>\r\n      </div >\r\n    case dot.portal_plugin:\r\n      // Add Outside Event\r\n      if (!q.Is_AddOutsideEvent) {\r\n        q.Is_AddOutsideEvent = true;\r\n\r\n        var listIds = [pvt.mass, pvt.typicallevel, pvt.phase, pvt.inputdata]\r\n        listIds.forEach(x => {\r\n          var qI = document.getElementById(`massdatabase-toggle-${x}`);\r\n          if (qI) {\r\n            qI.addEventListener(\"click\", () => {\r\n              q.ProjectViewType = x;\r\n            });\r\n          }\r\n        })\r\n      }\r\n\r\n      return <div className='projectcomp'>\r\n        <div className='projectcomp__main__wrapper'>\r\n          {q.UserDict.View}\r\n\r\n          <div className='projectcomp__main__dec'>\r\n            <div className={q.Main_Classname}>\r\n              {q.Project_DictVM.SelectView}\r\n\r\n              {q.ProjectComp.View}\r\n            </div>\r\n            <div className='projectcomp__main__bottom' />\r\n          </div>\r\n        </div>\r\n      </div >\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMData } from '../model/PMData';\r\nimport * as util from './PMDataVMUtil'\r\nimport * as pvt from '../../entity/project/base/ProjectViewType'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\n\r\nexport class PMDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectViewType: observable,\r\n      currentProject: observable,\r\n      main_Classname: observable,\r\n      massGroupSetting_Dict: observable,\r\n      commands: observable,\r\n      adminCommands: observable\r\n    })\r\n  }\r\n\r\n  static instance\r\n  static get Instance() {\r\n    if (!this.instance) {\r\n      this.instance = new PMDataVM();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get pmData() {\r\n    return PMData.Instance;\r\n  }\r\n\r\n  // Project\r\n  project_DictVM\r\n  get Project_DictVM() {\r\n    if (!this.project_DictVM) {\r\n      this.project_DictVM = util.GetProject_DictVM();\r\n    }\r\n    return this.project_DictVM;\r\n  }\r\n\r\n  OnSet_ProjectViewType_Func_Dict = []\r\n\r\n  projectViewType = pvt.mass\r\n  //projectViewType = pvt.document\r\n  get ProjectViewType() {\r\n    return this.projectViewType;\r\n  } set ProjectViewType(v) {\r\n    this.projectViewType = v;\r\n\r\n    this.OnSet_ProjectViewType_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  OnSet_CurrentProject_Func_Dict = []\r\n\r\n  currentProject = undefined\r\n  get CurrentProject() {\r\n    return this.currentProject;\r\n  } set CurrentProject(v) {\r\n    this.currentProject = v;\r\n\r\n    this.OnSet_CurrentProject_Func_Dict.forEach(x => x.Value());\r\n    this.pmData.CurrentProject = v?.ModelItem\r\n\r\n    util.Handle_SG_Dict_Dict(this)\r\n  }\r\n\r\n  projectComp\r\n  get ProjectComp(){\r\n    if (!this.projectComp){\r\n      this.projectComp = util.GetProjectComp(this)\r\n    } return this.projectComp\r\n  }\r\n\r\n  // MassResult\r\n  massResultCompVM\r\n  get MassResultCompVM() {\r\n    if (!this.massResultCompVM) {\r\n      this.massResultCompVM = util.GetMassResultCompVM();\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n  set MassResultCompVM(v) {\r\n    this.massResultCompVM = v;\r\n    if (!v) {\r\n      this.pmData.MassResultComp = v;\r\n    }\r\n    else {\r\n      this.pmData.MassResultComp = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  // MassGroup\r\n  mgs_Dict_Dict\r\n  get Mgs_Dict_Dict() {\r\n    if (!this.mgs_Dict_Dict) {\r\n      this.mgs_Dict_Dict = util.GetMgs_Dict_Dict(this)\r\n    } return this.mgs_Dict_Dict\r\n  }\r\n\r\n  // MassDetail\r\n  mds_Dict_Dict\r\n  get Mds_Dict_Dict() {\r\n    if (!this.mds_Dict_Dict) {\r\n      this.mds_Dict_Dict = util.GetMds_Dict_Dict(this)\r\n    } return this.mds_Dict_Dict\r\n  }\r\n\r\n  // SiteSuggest\r\n  sg_Dict_Dict\r\n  get SG_Dict_Dict() {\r\n    if (!this.sg_Dict_Dict) {\r\n      util.Handle_SG_Dict_Dict(this)\r\n    } return this.sg_Dict_Dict\r\n  } set SG_Dict_Dict(v) {\r\n    this.sg_Dict_Dict = v\r\n  }\r\n\r\n  // MassGroupSetting\r\n  massGroupSetting_Dict = undefined\r\n  get MassGroupSetting_Dict() {\r\n    if (!this.massGroupSetting_Dict) {\r\n      this.massGroupSetting_Dict = util.GetMassGroupSetting_Dict(this)\r\n    } return this.massGroupSetting_Dict\r\n  }\r\n\r\n  get UpdatedDate() {\r\n    return this.pmData.UpdatedDate;\r\n  }\r\n\r\n  // Classname scale bề rộng dự án cho phù hợp\r\n  // View BoQ : 800px\r\n  // View Detail : 100%\r\n  main_Classname = 'projectcomp__main'\r\n  get Main_Classname() {\r\n    return this.main_Classname;\r\n  } set Main_Classname(v) {\r\n    this.main_Classname = v;\r\n  }\r\n\r\n  // UserDict\r\n  userDict\r\n  get UserDict() {\r\n    if (!this.userDict) {\r\n      this.userDict = util.GetUserDict(this)\r\n    } return this.userDict;\r\n  }\r\n\r\n  // Admin\r\n  admin\r\n  get Admin() {\r\n    if (!this.admin) {\r\n      this.admin = util.GetAdmin(this)\r\n    } return this.admin\r\n  }\r\n\r\n  // Commands\r\n  commands = undefined\r\n  get Commands() {\r\n    if (!this.commands) {\r\n      util.Handle_Commands(this)\r\n    } return this.commands;\r\n  } set Commands(v) {\r\n    this.commands = v\r\n  }\r\n\r\n  adminCommands = undefined\r\n  get AdminCommands() {\r\n    if (!this.adminCommands) {\r\n      util.Handle_AdminCommands(this)\r\n    } return this.adminCommands;\r\n  } set AdminCommands(v) {\r\n    this.adminCommands = v\r\n  }\r\n\r\n  // MassType\r\n  massType_Dict\r\n  get MassType_Dict(){\r\n    if (!this.massType_Dict){\r\n      this.massType_Dict = util.GetMassType_Dict(this);\r\n    }return this.massType_Dict;\r\n  }\r\n\r\n  // Category\r\n  category_Dict\r\n  get Category_Dict(){\r\n    if (!this.category_Dict){\r\n      this.category_Dict = util.GetCategory_Dict(this);\r\n    }return this.category_Dict;\r\n  }\r\n\r\n  // Parameter\r\n  parameter_Dict\r\n  get Parameter_Dict(){\r\n    if (!this.parameter_Dict){\r\n      this.parameter_Dict = util.GetParameter_Dict(this);\r\n    }return this.parameter_Dict;\r\n  }\r\n\r\n  // MassExport\r\n  massExport_Dict\r\n  get MassExport_Dict(){\r\n    if (!this.massExport_Dict){\r\n      this.massExport_Dict = util.GetMassExport_Dict(this);\r\n    }return this.massExport_Dict;\r\n  }\r\n\r\n  // DesignOption\r\n  get DesignOption(){\r\n    return this.pmData.DesignOption\r\n  }\r\n\r\n  // View\r\n  UnAuthorized_View =\r\n    <span className='unauthorize'>Bạn không có quyền truy cập View hiện tại!</span>\r\n\r\n  get HomeView() {\r\n    return util.GetHomeView(this)\r\n  }\r\n\r\n  get View(){\r\n    return util.GetView(this)\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport './PMData.css'\r\n\r\nimport { PMDataVM } from './PMDataVM';\r\nimport { withRouter } from \"react-router-dom\";\r\n//import { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\r\nimport LeftNavView from '../../entity/nav/left/base/LeftNavView';\r\nimport MassDetailView from '../../entity/mass/detail/MassDetailView';\r\nimport ProjectCompView from '../../entity/project/comp/ProjectCompView';\r\nimport AdminView from '../../entity/admin/main/AdminView';\r\nimport HomeView from '../../entity/home/HomeView';\r\n\r\nclass PMDataView extends Component {\r\n  render() {\r\n    var data = PMDataVM.Instance;\r\n\r\n    return (\r\n      <>\r\n        {data.View}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(PMDataView);\r\n","import './App.css';\r\nimport \"antd/dist/antd.css\";\r\nimport { Component } from 'react';\r\n\r\nimport PMDataView from './model/main/single/form/PMDataView';\r\nimport { StrictMode } from 'react';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <PMDataView />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}