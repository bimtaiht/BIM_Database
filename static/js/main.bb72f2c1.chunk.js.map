{"version":3,"sources":["model/text/TextState.js","model/text/TextVM.js","model/text/TextVMUtil.js","model/input/InputView.js","util/apiUtil.js","model/main/entity/mass/MassType.js","model/main/entity/mass/item/MassItemField.js","util/generalUtil.js","model/main/entity/mass/table/MassColumn.js","model/input/NewInputView.js","model/text/TextRenderState.js","model/text/TextRenderItem.js","model/text/TextRenderItemUtil.js","model/text/TextRender_Dict.js","model/text/EditableTextVM.js","model/main/single/model/CategoryData.js","model/main/single/model/CategoryDataUtil.js","model/main/entity/filter/FilterCategoryType.js","model/main/entity/filter/FilterValueType.js","model/main/entity/filter/StringFilterType.js","model/main/entity/filter/NumberFilterType.js","model/main/entity/filter/EntFilterUtil.js","model/main/entity/filter/EntFilter.js","model/main/entity/mass/table/rowgroup/MGI_I_CreateType.js","model/main/entity/mass/table/rowgroup/MGI_ItemUtil.js","model/main/entity/mass/table/rowgroup/MGI_Item.js","model/main/entity/mass/item/MassItem.js","model/main/entity/mass/item/phaseValue/MIPh_Item.js","model/main/entity/mass/item/phaseValue/MIPh_ItemUtil.js","model/main/entity/mass/item/MassItemUtil.js","model/main/entity/mass/table/rowgroup/MassGroupItem.js","model/main/entity/mass/table/rowgroup/MassGroupComponent.js","model/main/entity/mass/table/rowgroup/MassGroupComponentUtil.js","model/main/entity/mass/table/rowgroup/MassGroupItemUtil.js","model/select/MultiSelectVMUtil.js","model/select/MultiSelectVM.js","model/select/MultiSelectView.js","model/hover/EntHoverVM.js","model/hover/EntHoverView.js","model/select/SelectVMUtil.js","model/select/SelectVM.js","model/float/FloatItemVM.js","model/float/FloatItemVMUtil.js","model/float/FloatItemView.js","model/select/SelectView.js","model/main/entity/mass/table/location/RRLF_LocationType.js","model/main/entity/mass/table/location/ReplaceRowLocationFactory.js","model/main/entity/mass/table/location/ReplaceRowLocationFactoryUtil.js","model/main/entity/mass/table/MassRow_Field_InputType.js","model/select/twocol/TwoCol_SelectVM.js","model/select/twocol/TwoCol_SelectVMUtil.js","model/select/twocol/TwoCol_SelectView.js","model/main/entity/mass/table/tool/MassRow_ToolElement.js","model/main/entity/mass/table/tool/MassRow_ToolElementUtil.js","model/main/entity/mass/table/tool/MassRow_ToolElementView.js","model/main/entity/mass/table/MassRow.js","model/text/EditableTextVMUtil.js","model/text/TextView.js","model/main/entity/mass/table/MassCell.js","model/main/entity/mass/table/value/MassCell_Value.js","model/main/entity/mass/table/MassCellUtil.js","model/main/entity/mass/table/MassRowUtil.js","model/main/entity/mass/table/MassTableUtil.js","model/main/entity/setting/base/SettingType.js","model/main/entity/setting/base/Setting.js","model/main/entity/setting/massGroup/MassGroupSettingData.js","model/main/entity/mass/MassPropertyName.js","model/main/entity/setting/massGroup/MassGroupSettingDataUtil.js","model/main/entity/setting/massGroup/MassGroupSetting.js","model/main/entity/setting/massGroup/MassGroupSettingUtil.js","model/main/entity/workpackage/WorkpackageVM.js","model/main/entity/workpackage/WorkpackageVMUtil.js","model/checkbox/CheckboxVM.js","model/checkbox/CheckboxVMUtil.js","model/main/entity/workpackage/WorkpackageInputVM.js","model/main/entity/workpackage/WorkpackageInputVMUtil.js","model/main/entity/workpackage/Workpackage_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVM.js","model/main/entity/setting/base/SettingVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingVM.js","model/main/entity/filter/EntFilterVM.js","model/main/entity/filter/EntFilterVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingVMUtil.js","model/main/entity/setting/base/SettingVMUtil.js","model/main/entity/setting/base/SettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVM.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSetting.js","model/main/entity/setting/massExport/exportSetting/MES_ValueRetrieveType.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingDataVM.js","model/main/entity/setting/massExport/MassExportSettingDataVMUtil.js","model/main/entity/setting/massExport/MassExportSettingVM.js","model/main/entity/setting/massExport/MassExportSettingVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVMUtil.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVM.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVMUtil.js","model/main/entity/phase/PhaseVM.js","model/main/entity/phase/PhaseVMUtil.js","model/main/entity/state/StateType.js","model/main/entity/phase/Phase_DictVM.js","model/main/entity/phase/PhaseInputVM.js","model/main/entity/phase/Phase_DictVMUtil.js","model/main/entity/phase/PhaseInputVMUtil.js","model/main/entity/project/ProjectVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemStateType.js","model/checkbox/CheckboxView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVM.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue_InputType.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVMUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVMUtil.js","model/main/entity/project/ProjectVMUtil.js","model/main/entity/project/Project_DictVM.js","model/main/entity/project/Project_DictVMUtil.js","model/main/entity/mass/result/MassResultCompVM.js","model/main/entity/mass/result/MassResultCompVMUtil.js","model/table/RenderState.js","model/table/RenderItem.js","model/table/RenderItemUtil.js","model/table/Render_Dict.js","model/table/TitleRenderItem.js","model/table/TitleRenderItemUtil.js","model/table/TitleRender_Dict.js","model/table/TableColumn_InputType.js","model/table/TableColumnUtil.js","model/table/TableColumn.js","model/table/TableRow.js","model/table/TableCell.js","model/table/TableCellUtil.js","model/table/TableRowUtil.js","model/table/TableVM.js","model/table/TableVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVM.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil.js","model/main/single/form/PMDataVMUtil.js","model/main/entity/project/ProjectViewType.js","model/main/single/form/PMDataVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingDataVM.js","model/main/entity/setting/massGroup/MassGroupSettingDataVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingVM.js","model/main/entity/setting/massGroup/MassGroupSettingVMUtil.js","model/export/csv/CSVExport.js","model/export/excel/ExcelExport.js","model/main/entity/mass/table/export/MT_Cell.js","model/main/entity/mass/table/export/MT_CellUtil.js","model/main/entity/mass/table/export/MT_Data_Row.js","model/main/entity/mass/table/export/MT_Cell_ValueType.js","model/main/entity/mass/table/export/MT_Data_RowUtil.js","model/main/entity/mass/table/export/MT_Data_Worksheet.js","model/main/entity/mass/table/export/MT_Data_WorksheetUtil.js","model/main/entity/mass/table/export/MT_RawData_Worksheet.js","model/main/entity/mass/table/export/MT_RawData_WorksheetUtil.js","model/main/entity/mass/table/export/MT_Workbook.js","model/main/entity/mass/table/export/MT_WorkbookUtil.js","model/main/entity/mass/table/MassGroupInput_StateType.js","model/main/entity/mass/table/MassTable.js","model/main/entity/mass/table/MassColumnUtil.js","model/export/excel/ExcelExportUtil.js","model/main/entity/mass/item/MassItem_Dict.js","model/main/entity/mass/item/MassItem_DictUtil.js","model/main/entity/mass/result/MassResultComp.js","model/main/entity/mass/result/MassResultCompUtil.js","model/main/entity/mass/rebar/RebarMass_DictUtil.js","model/main/entity/value/ValueUnit.js","model/main/entity/mass/rebar/RebarMass_Dict.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroup.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue.js","model/main/entity/setting/typicallevel/filter/TLS_Filter.js","model/main/entity/setting/typicallevel/filter/TLS_FilterUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItem.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingData.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSetting.js","model/main/entity/setting/typicallevel/TypicalLevelSettingUtil.js","model/main/entity/phase/Phase.js","model/main/entity/phase/PhaseUtil.js","model/main/entity/phase/Phase_Dict.js","model/main/entity/setting/base/SettingUtil.js","model/main/entity/phase/PhaseInput.js","model/main/entity/phase/Phase_DictUtil.js","model/main/entity/phase/PhaseInputUtil.js","model/main/entity/project/Project.js","model/main/entity/exportset/ExportSet.js","model/main/entity/exportset/ExportSetVersion.js","model/main/entity/exportset/ExportSetVersionUtil.js","model/main/entity/exportset/ExportSetUtil.js","model/main/entity/level/Level_Dict.js","model/main/entity/level/Level.js","model/main/entity/level/LevelUtil.js","model/main/entity/project/ProjectUtil.js","model/main/entity/value/ValueRetrieveFrom.js","model/main/entity/level/Level_DictUtil.js","model/main/entity/project/Project_Dict.js","model/main/entity/setting/elementFilter/ElementFilterSetting.js","model/main/entity/setting/elementFilter/ElementFilterSettingData.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingUtil.js","model/main/entity/setting/base/SettingInput.js","model/main/entity/setting/base/SettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInput.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_Dict.js","model/main/entity/setting/massExport/MassExportSettingData.js","model/main/entity/setting/massExport/MassExportSettingDataUtil.js","model/main/entity/setting/massExport/MassExportSetting.js","model/main/entity/setting/massExport/MassExportSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingInput.js","model/main/entity/setting/massExport/MassExportSettingInputUtil.js","model/main/entity/setting/massExport/MassExportSetting_Dict.js","model/main/entity/setting/massGroup/MassGroupSetting_Dict.js","model/main/entity/setting/versionCompare/VCS_Item.js","model/main/entity/setting/versionCompare/VersionCompareSetting.js","model/main/entity/setting/versionCompare/VersionCompareSettingUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_Dict.js","model/main/entity/tracking/TrackingItem.js","model/main/entity/tracking/Tracking.js","model/main/entity/workpackage/WorkpackageInput.js","model/main/entity/workpackage/Workpackage_Dict.js","model/main/single/model/PMDataUtil.js","model/main/single/model/PMData.js","model/main/entity/workpackage/Workpackage.js","model/main/entity/workpackage/WorkpackageUtil.js","model/main/entity/workpackage/Workpackage_DictVM.js","model/main/entity/workpackage/Workpackage_DictView.js","model/main/entity/filter/EntFilterView.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataView.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictView.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingView.js","model/main/entity/setting/massExport/MassExportSettingDataView.js","model/main/entity/setting/massExport/MassExportSetting_DictView.js","model/main/entity/mass/table/value/MassCell_ValueView.js","model/main/entity/mass/table/MassCellView.js","model/text/EditableTextView.js","model/main/entity/mass/table/MassRowView.js","model/export/csv/CSVExportView.js","model/main/entity/mass/table/MassTableView.js","model/main/entity/mass/result/MassResultCompView.js","model/table/TableView.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictView.js","model/main/entity/nav/left/LeftNav.js","model/main/entity/nav/left/LeftNavItem.js","model/main/entity/nav/left/LeftNavItemUtil.js","model/main/entity/nav/left/LeftNavUtil.js","model/main/entity/nav/left/LeftNavVMUtil.js","model/main/entity/nav/left/LeftNavVM.js","model/main/entity/nav/left/LeftNavView.js","model/main/entity/mass/detail/MassDetailTableUtil.js","model/main/entity/mass/detail/MassDetailTable.js","model/main/entity/mass/detail/MassDetailVM.js","model/main/entity/mass/detail/MassDetailTableView.js","model/main/entity/mass/detail/MassDetailView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterView.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingView.js","model/main/entity/phase/Phase_DictView.js","model/main/entity/mass/rebar/RebarMass_DictView.js","model/main/entity/project/comp/ProjectCompVM.js","model/main/entity/project/comp/ProjectCompVMUtil.js","model/main/entity/project/comp/ProjectCompView.js","model/main/single/form/PMDataView.js","model/main/entity/doc/comp/DO_Comp.js","model/main/entity/doc/DO_Element.js","model/main/entity/doc/DO_ElementType.js","model/main/entity/doc/DO_ElementUtil.js","model/main/entity/doc/DO_ElementVM.js","model/main/entity/doc/DO_ElementVMUtil.js","model/main/entity/doc/comp/DO_CompVMUtil.js","model/main/entity/doc/comp/DO_CompUtil.js","model/main/entity/doc/comp/DO_CompVM.js","model/main/entity/doc/DO_ElementView.js","model/main/entity/doc/comp/DO_CompView.js","model/view/TestView.js","App.js","reportWebVitals.js","index.js"],"names":["text","password","TextVM","content","undefined","placeholder","State","ts","makeObservable","this","observable","v","onSetContent","style","inputStyle","wrapper","position","get","q","qI","InputView","props","onChange","e","value","target","state","Content","store","textVMUtil","data","Password","Component","observer","http","timeout","axios","create","baseURL","Accept","handleResponse","response","success","status","message","statusText","callApi","action","a","err","error","timeout_default","url","config","put","payload","result","post","concrete","formwork","rebar","Project","Phase","Workpackage","Value","Unit","elementName","MassType","workItem","level","diameter","block","zone","typename","materialName","systemtype","systemclassification","familyName","size","GetForMassGroup","GetFullFields","massItem","field","fields","isFromElement","massType","includes","mt","groupName","GetValueString","massFieldValue","Name","FullName","GetListForTypicalLevelFilter","randomId","Intl","DateTimeFormat","Math","random","toString","substr","newGUID","replace","c","crypto","getRandomValues","Uint8Array","UpdateFromModel","obj","M2VM","MoveItem","list","oldIndex","newIndex","temp","IsSameValues","list1","list2","isValidCheck","isSame","length","forEach","x","i","Remove","dict","key","index","findIndex","Key","splice","Add","func","isDelete","newfunc","push","ExcelCellName","row","col","n","ordA","charCodeAt","len","s","String","fromCharCode","floor","ExcelColumnName","ExcelRangeName","row1","col1","row2","col2","MassColumn","Cells","_id","genUtil","Dict","Columns","indexOf","NewInputView","handleChange","OnPaste","preventDefault","pasteEvent","originalEvent","clipboardData","getData","contentEditable","React","createRef","minWidth","fontFamily","className","innerRef","Placeholder","html","onPaste","_default","edit","TextRenderItem","render","util","GetRender","rs","context","Is_Tool_Visible","Is_Edit_Visible","type","onClick","Edit","Is_OK_Visible","EditOK","TextRender_Dict","Items","item","Render","renderUtil","EditableTextVM","IsEditing","OnSet_RenderState_Func_Dict","renderState","CanChange_RenderState","RenderState","Render_Dict","titleFunc","render_Dict","CategoryData","categoryNames","instance","category","family","parameter","bystring","bynumber","byequal","bycontain","bynotcontain","bysmaller","bybigger","bybetween","categoryType","EntFilter","ValueType","valueType","NumberFilterType","numberFilterType","StringFilterType","stringFilterType","Values","values","CategoryType","GetValueStorageList","fct","Instance","CategoryNames","PMData","ParameterNames","IsValid","filter","isValid","filterValues","fvt","sft","lowerVal","toLowerCase","isNaN","nft","leftVal","rightVal","IsEqualLeft","IsEqualRight","valueStorageList","byuser","byauto","mgi","createType","MGI_Item","MassGroupItem","CreateType","ct","Title","Delete","Index","title","newMGI","newMGI_id","SupComponent","AllItems","id","supValue","SupValue","MassItem","IsGetElement","OnGetElementDone_Funcs","GetValue","mif","Element","roundingFactor","toLocaleString","maximumFractionDigits","getValFunc","AddDatabase","handle","apiData","ApiData","command","api","then","DeleteDatabase","IsGet_TLS_LevelGroup","OnGet_TLS_LevelGroup_Func_Dict","OnGet_FullValue_Func_Dict","GetPhaseItem","phaseName","PhaseItems","project","workpackage","phases","projectId","elementId","workpackageId","exportSetId","exportSetVersionId","unit","info","Info","get_TLS_LevelGroup","tls_LevelGroup","Get_TLS_LevelGroup","get_FullValue","fullValue","Get_FullValue","phaseItems","MIPh_Item","Handle_TLS_LevelGroup","phase","getLevelGroup_Func","tls","pi","GetValidTLS_PageItem","Data","GetValidTLS_LevelGroup","TypicalLevelSetting","TLS_LevelGroup","OnGetTypicalLevelSetting_Funcs","validPi","PageItems","IsValidTLS_PageItem","pageItem","filters","Filters","Field","validLg","LevelGroups","Primary","Handle_FullValue","IsGet_FullValue","getFullValue_Func","lg","count","Count","FullValue","pmData","Elements","GetProject","Project_Dict","getByViewDetail","viewDetail","masses","items","map","GetWorkpackage","Workpackage_Dict","Workpackages","GetPhases","Phase_Dict","exportSetVersionIds","GetValidPhasesByInput","inputPhases","MassResultComp","Phases","GetPhaseItems","phaseItemUtil","SubComponents","NotIncludeValues","AddNotIncludeValue","GetItem","itemUtil","SupRows","On_AddSupRow_Func_Dict","AddSupRow","NewRow","HandleCreatedByUserRows","OnIsFirstSetSupRow_Funcs","mgii_ct","IsAdd_Done","supRow","supRows","y","addRow","Table","GetRow","IsCreatedByUser","CreatedByUser_Rows","handleRow","handleNonField","subMgcIndex","Filter","replaceMgi","NewMGI","supName","Handle_ReplaceMGI","subComponents","valueOrders","ValueOrders","notIncludeValues","isFirstSetSupRow","IsHaveMassItem","table","MassGroupComponent","originComponent","OriginComponent","AllSubItems","apply","supItem","filterUtil","SupItem","Clone","GetOriginComponent","subComps","supCom","getFromDb","compUtil","IsHaveValueOrder","GetTable","initialItems","MultiSelectVM","InitialItems","GetInitialIndexs","selectedIndexs","GetSelectedItems","SelectedIndexs","open","canOpen","InitialIndexs","initialIndexs","SelectedItems","selectedItems","OnSelectedItemChanged","titleRender","DisplayContent","OnSetOpen","Option","Select","MultiSelectView","onValueChange","onDropdownVisibleChange","Open","width","elems","displayContent","TitleRender","mode","optionFilterProp","filterOption","input","option","children","CanOpen","EntHoverVM","IsElementVisible","ShowElement","HideElement","EntHoverView","onMouseEnter","onMouseLeave","initialItem","SelectVM","InitialItem","GetInitialIndex","selectedIndex","GetSelectedItem","SelectedIndex","CanClear","Clear","isDisabled","InitialIndex","initialIndex","SelectedItem","selectedItem","padding","FloatItemVM","getClassName","location","loc","FloatItemView","getWrapperContent","floatItemVMUtil","SelectView","floatElem","floatItemStore","DivStyle","showSearch","disabled","IsDisabled","inside","lower","ReplaceRowLocationFactory","Location","lt","ToggleLocation","backgroundColor","Color","border","select","TwoCol_SelectVM","inputTitle","outputTitle","availableItems","GetKey","index1","AvailableItems","IsChanged","Unselect","InputTitle","OutputTitle","TwoCol_SelectView","MassRow_ToolElement","editable_TitleVM_RenderState","Method","name","Editable_TitleVM","MassRow_ToolElementView","Editable_TitleVM_RenderState","trs","UpCircleOutlined","DownCircleOutlined","danger","MassRow","subItems","UpdateCells","UpdateData","isShowSub","rank","isHaveSub","IsToolVisible","FieldInputType","mr_f_it","Toggle_FieldInputType","TempField","FieldInputVM","FieldSelectVM","GetCellByColumn","Column","Is_Original_SupRow","SubItems","CurrentList","Rank","IsHaveSub","ToggleSub","IsShowSub","SetSubFields","tempSubFields","TempSubFields","SubFields","supMgi","mgc","SubItem","subMgis","mgiUtil","SubMassGroupComponent","Original_SubMassGroupItem","ColumnField","ValidPhasesByInput","HandleItem","MoveUp","orderItems","OrderMGI","OrderItems","orderValues","OrderValues","mgiIndex1","mgiIndex2","MoveDown","AddSub","MainRows","ReplaceOK","factory","ReplaceFactory","refRow","ReferenceRow","rrlf_lt","Replace","Replace_SubItems","Temp_SelectSubItems","IsReplaced","Original_SupRow","oldMgi","newMgi","Replace_SubMassGroupItem","MainMGI","mgi_i","ReplaceMGI","cl","IsShowSubFieldSelect","IsModalVisible","OpenModal","TitleVM","SubFieldSelectVM","SelectSubItemsVM","LocationStorageList","locSelectVM","LocationSelectVM","ModalOK","ModalCancel","PMS_WorkPackages","AddHandleTotal_Cell","cell","HandleTotal_Cells","Is_HandleTotal_Cells_Done","Add_Handled_CreatedByUser_Row","IsHaveAdditionInformation","AdditionInformation","Is_SelectSubItems_ModalOpen","Open_SelectSubItems_Modal","SelectSubItems_ModalCancel","SelectSubItems_ModalOK","isShow_RawValue","currentList","cells","reduce","b","concat","massGroupItem","replaceMGI","original_SubMassGroupItem","replace_SubMassGroupItem","isReplaced","original_SupRow","subFields","ToggleButtonContentVM","toggleButtonContent","toggleButtonContentVM","ToggleButtonContent","OnSetContent","fieldInputVM","fieldSelectVM","unCheckedChildren","checkedChildren","checked","subFieldSelectVM","titleVM","editable_TitleVM","canEdit","isToolVisible","editTextUtil","IsShow_RawValue","ToolElement","AllRows","locationSelectVM","replaceFactory","pms_WorkPackages_SelectVM","selectUtil","titleWidth","visible","onOk","onCancel","gutter","marginTop","flex","FieldInputElement","SelectSubItems_ModalElement","ButtonStyle","toolElement","trigger","InfoCircleOutlined","ExportInfo","TotalValue","Infos","ExportValue","on_HandleTotal_Cells_Done_Dict_Funcs","On_HandleTotal_Cells_Done_Dict_Funcs","selectSubItemsVM","tc_selectUtil","marginLeft","RawValue","TextView","MassCell","OnGet_TotalValue_Func_Dict","totalValue","AsString","console","log","Row","SubCells","IsHaveVCS_Item","ShowDetail","process","openTabFunc","window","getUrl","viewDetailId","GetViewDetailId","vcs_Item","valueColor","tdBgColor","massIds","OnGet_TLS_LevelGroups_Func_Dict","isHaveWarning","tls_LevelGroup_Descriptions","unitVM","Get_TotalValue","ContentVM","ValueString","contentVM","valueObject","subCells","isHaveVCS_Item","ValueColor","TDBgColor","color","fontWeight","tls_LevelGroups","Get_TLS_LevelGroups","MassCell_Value","GetIsHaveVCS_Item","ColumnIndex","GetValueColor","VCS_Item","GetTDBgColor","Handle_VCS_Item","VersionCompareSetting","compareIndex","compareItem","getItem","ratio","GetMassType","isPending","Handle_TLS_LevelGroups","IsGet_TLS_LevelGroups","handledCount","checkadd_Val","val","handle_Val","Array","isArray","TLS_LevelGroups","targetObj","ReGet_Unit","IsGet_Unit","Get_Unit","ReHandle_TotalValue","IsGet_TotalValue","Handle_TotalValue","CanHave_TotalValue","checkedList","totalVal","handleItems","Number","GetIsHaveWarning","getWarningFunc","levelGroups","IsHaveWarning","Handle_TLS_LevelGroup_Descriptions","IsGet_TLS_LevelGroup_Descriptions","TLS_LevelGroup_Descriptions","getDescFunc","FullDescription","OnGetLevelStorageList_Func_Dict","OnGet_TLS_LevelGroups_Funcs","Get_SubCells","subRows","Get_ValueObject","Get_ValueString","formatValue","GetRank","GetStyle","GetIsHaveSub","GetToggleButtonContent","GetFieldSelectVM","storageList","MIFs_ForMassGroup","GetSubFieldSelectVM","multiSelectUtil","Order","sort","GetLocationSelectVM","GetOriginal_SubMassGroupItem","GetReplace_SubMassGroupItem","GetSubFields","subMGI","SubMassGroupItem","mgis","lastValidIndex","isValidHandle","HaveMassItemSubComponents","currentIndex","CreateSubMassGroupItem","mgcIndex","mgi_I","mgi_iUtil","GetOn_HandleTotal_Cells_Done_Dict_Funcs","Get_Original_SupRow","IsGet_Original_SupRow","Get_Original_Full_SupRows","reverse","Get_IsHaveAdditionInformation","Get_AdditionInformation","Original_Full_SupRows","Get_ToolElement","Get_Cells","GetIsShow_RawValue","GetMassGroupName","MassGroupSetting","GetMainMGI","MainMGC","SupRow","elementfilter","massexport","massgroup","Setting","OnDelete","Input","EditItemId","OnNameChanged","description","OnDescriptionChanged","OnDataChanged","settingType","SettingType","Description","MassGroupSettingData","AddNewField","MassPropertyNames","Fields","Category","GetDefaultFields","mpn","massGroupCompUtil","massGroupComponent","dataUtil","WorkpackageVM","code","fullName","WorkpackageVMs","Code","codeVM","nameVM","descriptionVM","OnCodeChanged","OnFullNameChanged","GetSupItem","supWp","PMDataVM","Workpackage_DictVM","CheckboxVM","Cancel","ischecked","isDisable","onCheckChange","WorkpackageInputVM","workpackageVMStorageList","isNew","commandName","IsNew","WorkpackageInput","DeleteFunc","CodeVM","NameVM","DescriptionVM","IsNewVM","Ischecked","selectVM","SupItemSelectVM","supItemSelectVM","selectVMUtil","WorkpackageVMStorageList","CommandVM","workpackageVM","isNewVM","checkboxVMUtil","commandVM","CommandName","pmDataVM","GetCommandName","GetWorkpackageVMStorageList","GetWorkpackageInputVM","dictVM","OnGetItemsDone_Funcs","OnAddDatabaseDone","OnAdd","workpackageInputVMUtil","ElementFilterSetting_DictVM","ModelItem","OnGetItemsDone","currentItem","CurrentItem","EditItem","SettingVM","GetDataVM","OnGetDataVM","textUtil","dataVM","OnInitialSetDataVM","ElementFilterSettingVM","cateFilterVM","CategoryFilterVM","OnInitialData","famFilterVM","FamilyFilterVM","EntFilterVM","SetData","ValueTypeSelectVM","StringFilterTypeSelectVM","ValuesSelectVM","ValueStorageList","valueTypeSelectVM","FilterValueTypes","stringFilterTypeSelectVM","StringFilterTypes","valuesSelectVM","multiSelectVMUtil","ValueSelectPlaceholder","ElementFilterSettingDataVM","GetCategoryFilterVM","CategoryFilter","filterVMUtil","isHaveFamilyFilter","GetFamilyFilterVM","FamilyFilter","IsHaveFamilyFilter","IsHaveFamilyFilterVM","categoryFilterVM","familyFilterVM","isHaveFamilyFilterVM","DataVM","dataVMUtil","SettingInputVM","settingTypeVM","editItem","SettingTypeVM","ElementFilterSettingInputVM","GetItems","itemVMUtil","GetInput","inputVMUtil","MES_ValueSettingVM","ValueSettingVMs","RetrieveTypeSelectVM","RetrieveType","ValueFilterVM","WorkpackageSelectVM","MassTypeSelectVM","retrieveType","retrieveTypeSelectVM","RetrieveTypeStorageList","valueFilterVM","ValueFilter","modelItem","workpackageSelectVM","massTypeSelectVM","MassTypeStorageList","GetRetrieveTypeStorageList","ValueRetrieveTypes","GetWorkpackageVM","GetMassTypeStorageList","MassTypes","MES_ValueSetting","ValueSettings","byparameter","GetDefault","vrt","valueFilter","GetApiData","MassExportSettingDataVM","elementFilterVMStorageList","valueSettingVMs","AddNewValueSettingVM","AddNewValueSetting","itemView","valueSettingVMUtil","ElementFilterSelectVM","ElementFilterVM","elementFilterVM","ElementFilter","elementFilterSelectVM","ElementFilterVMStorageList","modelList","oldCount","newCount","delta","abs","originItemVM","valueSettingUtil","itemVM","GetElementFilterVMStorageList","GetElementFilterVM","elemFilter","GetValueSettingVMs","MassExportSettingVM","MassExportSettingInputVM","MassExportSetting_DictVM","MassGroupSetting_DictVM","PhaseVM","addversion","Phase_DictVM","AddVersion","stateType","OK","AddMassVersion","warning","PhaseInputVM","ProjectVM","typicalLevelSetting","typicalLevelSetting_ForEdit","phase_DictVM","rebarMass_Dict","RebarMass_Dict","InputExportSet","Level_Dict","Url","CheckboxView","onCheckedChange","OnCheckChanging","LevelGroupVM","primary","isSelectOpen","LevelStorageList","Levels","levelSelectVM","OnGetLevelStorageList_Funcs","triggerVM","IsSelectOpen","buttonTypeVM","addContentVM","GetDefaultPrimary","TLS_FilterValueVM","inputType","ToggleInputType","InputType","it","ValueVM","SwitchChecked_Funcs","valueVM","SelectOpen","selectOpen","PopoverState","popoverState","GetPopoverState","TLS_FilterVM","AddItem","valueUtil","FieldFilterStorageList","FieldStorageList","TLS_PageItemVM","st","ToggleState","NameOK","NameCancel","isLast","IsLast","AllTabs","IsModelChangePageKey","CurrentPageKey","AddLevelGroup","levelGroupUtil","AddFilter","delElem","InputToolElement","InputElement","GetLevelGroups","GetFilters","TypicalLevelSettingDataVM","pageItems","AddPageItem","pageItemUtil","IsHaveAddCommandTab","allTabs","currentPageKey","ChangePageKey","addCommandTab","TitleElement","AddCommandTab","GetPageItems","TypicalLevelSettingVM","Save","GetPhase_DictVM","GetItemsDone","phaseDictVMUtil","GetTypicalLevelSetting_Func","model","typicalLevelUtil","GetTypicalLevelSetting","GetTypicalLevelSetting_ForEdit","TypicalLevelSetting_ForEdit","Project_DictVM","MassResultCompVM","IsShowProjectSelect","CanHavePhase","isHavePhase","massGroupSettingStorageList","IsDataPending","handledRatio","GetMassData","HandledRatio","projects","Projects","projectVMs","projectVMStorageList","ProjectSelectVM","projectSelectOpen","ProjectPopoverState","projectPopoverState","projectSelectVM","ProjectVMStorageList","ProjectVMs","placement","rel","href","ProjectSelectOpen","phaseVMs","massItem_Dict","MassItem_Dict","phaseVMStorageList","PhaseSelectVM","phaseSelectVM","PhaseVMStorageList","PhaseVMs","IsHavePhase","isShowPhaseSelectVM","MassGroupSettingSelectVM","massGroupSettingSelectVM","MassGroupSettingStorageList","toFixed","loadingSpinTipVM","LoadingSpinTip","LoadingSpinTipVM","isfetchProjects","ViewItem","GetProjectVMStorageList","massTable","MassTable","OnIsUpdateDataDone_Funcs","OnSetHandledRatio_Funcs","GetProjectVMs","GetPhaseVMs","GetMassGroupSettingStorageList","MassGroupSetting_Dict","GetProjectPopoverStateValue","RenderItem","dataIndex","inputVM","TitleRenderItem","column","CanHandleColumn","IsShow_MoveCommand","CanEditColumn","CanDeleteColumn","TitleRender_Dict","renders","TableColumn","DataIndex","GetByTitle","OnSetTitleOK_Funcs","Update","GetActionColumn","editElem","CanHandleItem","CanEditItem","CanDeleteItem","DeleteItem","IsAction","display","AddColumn","CanAddItem","TitleRenderState","Show_MoveCommand","Collapse_MoveCommand","MoveLeft","IsActive","MoveRight","l1","AllNames","titleRender_Dict","Column_InputType","AllColumnNames","InputVM","Column_Title_SelectWidth","CanShow_MoveCommand","TableRow","Item","Rows","TableCell","Override_Get_CellValue","GetCells","cellUtil","TableVM","CanAddColumn","IsShowActionColumn","columns","dataSource","rows","OnGetItemForAdd","IsTypeNotDefined","DataSource","rowUtil","OnDeleteItem","OnEditItem","colUtil","activeCol_Index","cit","ElementName","Diameter","Weight","WorkItemExportDataVM","WorkItemExportSettingVM","IsCategoryChecked","categoryCheckboxVM","checkboxUtil","WorkItemExportSetting","WorkItemExportSetting_DictVM","tableVM","GetTableVM","nameCol","isCateCol","CategoryCheckboxVM","isSubWorkItemCol","GetWorkpackage_DictVM","OnGetWorkpackagesDone","workpackageVMUtil","workpackage_DictVMUtil","GetElementFilterSetting_DictVM","elementFilterSetting_DictVMUtil","ElementFilterSetting_Dict","GetMassExportSetting_DictVM","massExportSetting_DictVMUtil","MassExportSetting_Dict","GetMassGroupSetting_DictVM","massGroupSetting_DictVMUtil","GetProject_DictVM","project_DictVMUtil","GetWorkItemExportSetting_Dict","wieDictVMUtil","WorkItemExportSetting_Dict","mass","typicallevel","inputdata","mepsetting","document","isDebug","OnSet_ProjectViewType_Func_Dict","projectViewType","pvt","OnSet_CurrentProject_Func_Dict","currentProject","main_Classname","workpackage_DictVM","elementFilterSetting_DictVM","massExportSetting_DictVM","massGroupSetting_DictVM","project_DictVM","massResultCompVM","massResultCompVMUtil","filterValueTypes","stringFilterTypes","valueRetrieveTypes","parameterNames","massPropertyNames","massTypes","workItemExportSetting_Dict","IsDebug","CurrentProject","UpdatedDate","MGS_FieldVM","FieldVMs","GetFieldStorageList","MassGroupSettingDataVM","fieldVMs","AddNewFieldVM","fieldVMUtil","GetFieldVMs","MassGroupSettingVM","CSVExport","Export","wb","Sheets","XLSX","json_to_sheet","Headers","SheetNames","excelBuffer","bookType","Blob","FileSaver","FileName","ExportTest","ws1","t","ws2","f","Override_Get_Data","Override_Get_FileName","fileName","ExcelExport","Workbook","Override_Get_Workbook","workbook","MT_Cell","Override_Get_Row","Override_Get_Column","Override_Get_Formula","formula","isContinueSubRows","Type","Formula","z","Format","Style","MT_Data_Row","Worksheet","FullRows","string","ws","GetSubItems","GetTitle","vc_dict","ValueCell_Dict","firstCol","First_ValueColumn","firstRow","First_ValueRow","getRowFunc","FullIndex","titleCell","c_vt","valueCell","IsContinueSubRows","Address","GetFullItems","FullItems","MT_Data_Worksheet","First_TitleColumn","First_TitleRow","mainRows","fullRows","valueCells","titleCells","fc","fr","font","bold","allCells","TitleCells","ValueCells","listCells","AllCells","range","minRow","minCol","maxRow","maxCol","RangeName","ResultData","MT_RawData_Worksheet","InfoFields","dataRows","Data_WS","tableRows","DataRows","records","ExportData","infoFields","Binding_DataRow","valueFields","Records","ifs","ifl","vfs","ValueFields","cell_val","data_cell","MT_Workbook","RawData_WS","data_WS","rawData_WS","All_WS","GetData_WS","GetRawData_WS","IsValidTable","columnField","Init","Handled_CreatedByUser_Rows","GetColumn","GetCell","canAdd","Build","colField","IsHaveAsyncData","IsOnSaveMassGroup","HandledItems","HandledItemPhases","AddHandledItems","IsUpdateDataDone","colFieldValue","initialRow","HandleRowFieldIndex","GetRow_Value_FieldIndex","rowFieldIndex","itemCount","lastRow","rowField","valueString","Handle_AddRow","subMgcs","subIndex","mgiItem","r1","originalSupRow","isGet_SupRow_Done","fullFunc","sr","getSupRow","r","r2","awaitGetSupRowForAdd","SaveMassGroup","refSelectVM","Reference_MassGroupSetting_SelectVM","MassGroupSelectVM","MassGroupInput_State","mgi_st","Toggle_MassGroupInput_State","massGroupName","MassGroupInputOK","MassGroupName","needValidateForOveride","handle_UpdateMassGroup","refVM","mgsUtil","mgsVMUtil","MassGroupNameVM","Override_MassGroup_Modal_OKFunc","Is_Override_MassGroup_Modal_Open","MassGroupInputCancel","AddMainRow","massGroupSetting","mainMGC","mgi1","mainMGI","massGroupNameVM","massGroupSelectVM","formatedDate","dayjs","Date","now","format","wbUtil","excelExport","ovrgFileName","ovrgWb","eeUtil","ExportTitle","ExcelWorkbook","Is_First_Get_MassTable","wp_Dict","IsDataChanged","RefreshData","projectIds","phaseIds","massItemUtil","setExportSetData","exportSet","currentVersion","CurrentVersion","OnGetCurrentVersionDone_Func","inputExportSet","OnGetInputExportSetDone_Funcs","LevelGroup","levels","getLevelStorageList","IsGet_LevelStorageList","GetLevelStorageList","min","LevelIndexs","max","MinLevel","MaxLevel","FilterDescription","TLS_FilterValue","TLS_Filter","arr","TLS_PageItem","TypicalLevelSettingData","fieldFilterStorageList","levelStorageList","GetTest","GetFromDb_Async","phaseId","resData","editData","GetFieldFilterStorageList","fieldUtil","SaveDatabase","level_Dict","getLevelsFunc","OnGetExportSetVersions_Func","exportSetVersions","IsOnGetDb_Async","GetExportSetVersionData","ExportSetVersions","GetExportSetVersions","settingUtil","addVersionFunc","PhaseInput","phaseUtil","inputUtil","phase_Dict","phaseDictUtil","GetInputExportSetDone","getInputExportSetDone","ExportSet","GetCurrentVersionDone","ExportSetVersion","RetrieveFrom","retrieveFrom","GetCurrentVersion_Async","versionUtil","AddVersion_Async","addItem","Level","getAll","Elevation","elevation","GetRebarMass_Dict","rebarMassDictUtil","GetInputExportSet_Async","exportSetUtil","GetLevel_Dict","levelDictUtil","ElementFilterSetting","ElementFilterSettingData","categoryFilter","familyFilter","SettingInput","GetData","OnGetData","prefix","UrlPrefix","AddDatabaseDone","NewItem","GetEditItem","urlPrefix","ElementFilterSettingInput","elementFilterSettingUtil","cateFilter","MassExportSettingData","elementFilter","elementFilterId","valueSettings","exportSettings","GetElementFilter","elemFilterId","GetDefaultValueSettings","MassExportSetting","MassExportSettingInput","massExportSettingUtil","TrackingItem","Tracking","WorkpackageId","supId","SupId","NewWorkpackage","workpackageUtil","wp","GetFullName","UpperList","LowerList","wps","GetWorkpackagesDone","workpackageInput","GetFilterValueTypes","GetStringFilterTypes","GetValueRetrieveTypes","GetMassPropertyNames","GetMassItemFields","GetMassTypes","DebugPoints","workpackage_Dict","elementFilterSetting_Dict","massExportSetting_Dict","massGroupSetting_Dict","project_Dict","massResultComp","categoryData","massItemFields","mifs_ForMassGroup","versionCompareSetting","tracking","upperList","lowerList","dbItem","GetUpperList","GetLowerList","workpackageVMs","CurrentWorkpackage","workpackageInputVM","Workpackage_DictView","CurrentWorkpackageVM","searchName","SearchName","orientation","plain","margin","DeleteView","EntFilterView","test","ItemVMs","CurrentItemVM","ElementFilterSettingDataView","ElementFilterSetting_DictView","MES_ValueSettingView","borderRadius","MassExportSettingDataView","valueSettingElems","MassExportSetting_DictView","MassCell_ValueView","MassCellView","TDStyle","AStyle","EditableTextView","MassRowView","subElems","toggleButton","marginRight","scope","IsHave_Addition_Wrapper","AdditionInfomation_Element","RawValue_Element","HoverToolElement","ModalElement","j","CSVExportView","Test","filename","headers","MassTableView","thElems","tbodyElems","SaveFilled","DownloadOutlined","MassGroupInput_Element","MassGroupInput_Toggle_Classname","MassGroupInput_Toggle_Content","Override_MassGroup_ModalElement","MassResultCompView","IsShowPhaseSelectVM","justifyContent","TableView","tableElem","theadElem","LeftCircleOutlined","RightCircleOutlined","tbodyElem","WorkItemExportSetting_DictView","LeftNav","LeftNavItem","LeftNavVM","modelUtil","GetPreTitle","preTitle","GetItemClass","ProjectViewType","SetView","PreTitle","LeftNavView","navUtil","colNames","isHaveAction","cols","tableUtil","MassDetailTable","MassDetailVM","DetailTable","detailTable","MassDetailTableView","MassDetailView","match","params","Main_Classname","withRouter","LevelGroupView","LevelSelectVM","DeleteFilled","TLS_FilterValueView","TLS_FilterView","TLS_PageItemView","Tabs","TabPane","TypicalLevelSettingDataView","onKeyDown","stopPropagation","activeKey","tab","TypicalLevelSettingView","Phase_DictView","PlusCircleOutlined","RebarMass_DictView","ProjectCompVM","projectVM","projectUtil","projectVMUtil","massResComp","setItemsFuncs","GetMassResultCompVM","massResutlCompVMUtil","ProjectCompView","ViewElement","PMDataView","basename","exact","path","component","TestView","DO_Comp","DO_Element","element","elementinfo","elementinfo_identify","elementinfo_locate","et","DO_ElementVM","isOpenSub","IsOpenSub","ToggleSubContentVM","toggleSubContentVM","GetToggleSubContent","DO_CompVM","DO_ElementView","IsHaveButton","DO_CompView","elem","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.bb72f2c1.chunk.js","sourcesContent":["export const text = 'text'\r\nexport const password = 'password'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as ts from './TextState'\r\n\r\nexport class TextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder : observable,\r\n      State : observable\r\n    })\r\n  }\r\n\r\n  content = undefined\r\n  get Content(){\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  inputStyle\r\n\r\n  style\r\n  get Style() {\r\n    if (!this.style) {\r\n      this.style = this.inputStyle ? this.inputStyle : {};\r\n\r\n      if (this.wrapper) {\r\n        this.style.position = 'relative';\r\n      }\r\n    }\r\n    return this.style;\r\n  }\r\n\r\n  State = ts.text\r\n}","import { TextVM } from \"./TextVM\"\r\n\r\nexport const get = (q, placeholder) => {\r\n  var qI = new TextVM();\r\n  qI.content = q;\r\n  qI.placeholder = placeholder;\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport * as ts from '../text/TextState'\r\n\r\nclass InputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    var { value } = e.target;\r\n    this.state.Content = value;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { content, placeholder } = data;\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <Input value={content} onChange={this.onChange}\r\n            placeholder={placeholder} /> : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={content} onChange={this.onChange} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(InputView)","import axios from 'axios';\r\nimport { message } from 'antd';\r\n\r\nexport const API_URL = 'https://api.bimdev.vn/api';\r\n\r\n// const http = axios.create({\r\n//   baseURL: API_URL,\r\n//   Accept: 'application/json',\r\n//   'Content-Type': 'application/json',\r\n//   //timeout: 20000\r\n//   timeout: 20000000\r\n// });\r\n\r\nconst http = (timeout) => axios.create({\r\n    baseURL: API_URL,\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    timeout\r\n  });\r\n\r\nconst handleNetworkError = (err) => {\r\n  message.error(`Error sending request: ${err}`);\r\n  return {\r\n    success: false\r\n  };\r\n}\r\n\r\nconst handleResponse = (response) => {\r\n  // Parse the axios response\r\n  const success = response.status >= 200 && response.status < 300;\r\n  const data = response.data;\r\n  let message = response.statusText;\r\n  return {\r\n    success,\r\n    data,\r\n    message\r\n  };\r\n}\r\n\r\nexport const callApi = async (action) => {\r\n  try {\r\n    const response = await action;\r\n    return handleResponse(response);\r\n  } catch (err) {\r\n    return handleNetworkError(err);\r\n  } finally { }\r\n}\r\n\r\nexport const timeout_default = 20000\r\n\r\nexport const get = async (url, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  return callApi(http(timeout).get(url, config));\r\n}\r\n\r\nexport const put = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).put(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const post = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).post(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const del = async (url, payload,timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).delete(url, payload));\r\n  return result;\r\n}","export const concrete = \"concrete\";\r\nexport const formwork = \"formwork\";\r\nexport const rebar = \"rebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [ concrete, formwork, rebar ];\r\n}\r\n\r\nexport const IsGetElement = (massType) => {\r\n  return massType === concrete || massType === formwork;\r\n}","import * as mt from '../MassType'\r\n\r\nexport const Project = 'Project'\r\nexport const Phase = 'Phase'\r\nexport const Workpackage = 'Workpackage'\r\nexport const Value = 'Value'\r\nexport const Unit = 'Unit'\r\nexport const partition = 'partition'\r\nexport const rebarType = 'rebarType'\r\nexport const elementName = 'elementName'\r\nexport const MassType = 'MassType'\r\nexport const workItem = 'workItem'\r\nexport const level = 'level'\r\nexport const diameter = 'diameter'\r\nexport const block = 'block'\r\nexport const discipline = 'discipline'\r\nexport const zone = 'zone'\r\nexport const typename = 'typename'\r\nexport const materialName = 'materialName'\r\nexport const systemtype = 'systemtype'\r\nexport const systemclassification = 'systemclassification'\r\nexport const familyName = 'familyName'\r\nexport const size = 'size'\r\n\r\nexport const GetAll = () => {\r\n  return [MassType, workItem, level, block, elementName, diameter]\r\n}\r\n\r\nexport const GetForMassGroup = () => {\r\n  return [\r\n    MassType, workItem, level, block, zone,\r\n    familyName, typename,\r\n    elementName, materialName,\r\n    systemtype, systemclassification, size\r\n\r\n  ]\r\n}\r\n\r\nexport const GetDirectiveFields = () => {\r\n  return [Project, Workpackage, Value, Unit];\r\n}\r\n\r\nexport const GetIdentifyFields = () => {\r\n  return [elementName];\r\n}\r\n\r\nexport const Get_MassInfo_Fields = () => {\r\n  return [materialName]\r\n}\r\n\r\nexport const GetFullFields = (massItem, field) => {\r\n  switch (field) {\r\n    case Project:\r\n    case Value:\r\n    case Unit:\r\n    case MassType:\r\n    case Phase:\r\n      return {\r\n        fields: [field],\r\n        isFromElement: false\r\n      };\r\n    case workItem:\r\n    case elementName:\r\n    case rebarType:\r\n    case partition:\r\n    case level:\r\n    case diameter:\r\n    case block:\r\n    case zone:\r\n    case typename:\r\n    case materialName:\r\n    case systemtype:\r\n    case systemclassification:\r\n    case familyName:\r\n    case size:\r\n      var massType = massItem[MassType];\r\n      if (Get_MassInfo_Fields().includes(field) ||\r\n        massType === mt.rebar) {\r\n        return {\r\n          fields: ['Info', field],\r\n          isFromElement: false\r\n        };\r\n      } else {\r\n        var groupName = undefined;\r\n        // kiểm tra các phân nhóm trong Element: identify, locate ...\r\n        switch (field) {\r\n          case workItem:\r\n          case elementName:\r\n          case typename:\r\n          case systemtype:\r\n          case systemclassification:\r\n          case familyName:\r\n            groupName = 'identify';\r\n            break;\r\n          case level:\r\n          case block:\r\n          case zone:\r\n            groupName = 'locate';\r\n            break;\r\n          case size:\r\n            groupName = 'geometry';\r\n            break;\r\n        }\r\n        return {\r\n          fields: ['Element', 'info', groupName, field],\r\n          isFromElement: true\r\n        }\r\n      }\r\n  }\r\n}\r\n\r\nexport const GetValueString = (massFieldValue, field) => {\r\n  var value = undefined;\r\n\r\n  switch (field) {\r\n    case Project:\r\n    case Phase:\r\n      value = massFieldValue.Name;\r\n      break;\r\n    case Workpackage:\r\n      value = massFieldValue.FullName;\r\n      break;\r\n    default:\r\n      value = massFieldValue;\r\n      break;\r\n  }\r\n\r\n  return value ? value : 'undefined';\r\n}\r\n\r\nexport const GetListForTypicalLevelFilter = () => {\r\n  return [workItem, MassType, block]\r\n}\r\n\r\nexport const GetDefaultListValue = (field) => {\r\n  switch (field) {\r\n    case workItem:\r\n      return ['Dầm', 'Sàn', 'Cột', 'Vách'];\r\n    default:\r\n      return [];\r\n  }\r\n}","import * as api from './apiUtil'\r\n\r\nexport let dtFormat = new Intl.DateTimeFormat('en-GB');\r\n\r\nexport const deepClone = (q) => {\r\n  return JSON.parse(JSON.stringify(q));\r\n}\r\n\r\nexport const randomId = () => {\r\n  // Math.random should be unique because of its seeding algorithm.\r\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n  // after the decimal.\r\n  return Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const newGUID = () => {\r\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\r\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n  );\r\n}\r\n\r\nexport const UpdateFromModel = (obj, action) => {\r\n  obj.M2VM = true;\r\n  action();\r\n  obj.M2VM = false;\r\n}\r\n\r\nexport const MoveItem = (list, oldIndex, newIndex) => {\r\n  if (oldIndex === -1 || newIndex === -1 ||\r\n    oldIndex === newIndex) return;\r\n  var temp = list[oldIndex];\r\n  list[oldIndex] = list[newIndex];\r\n  list[newIndex] = temp; \r\n}\r\n\r\nexport const IsEqual = (list1, list2) => {\r\n  if (list1.length !== list2.length) return false;\r\n  var isValidCheck = true;\r\n  var isEqual = true;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && x !== list2[i]) {\r\n      isValidCheck = false; isEqual = false;\r\n    }\r\n  })\r\n\r\n  return isEqual;\r\n}\r\n\r\nexport const IsSameValues = (list1, list2) => {\r\n  var isValidCheck = true;\r\n  var isSame = true;\r\n\r\n  if (list1.length !== list2.length) return false;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && !list2.includes(x)) {\r\n      isValidCheck = false; isSame = false;\r\n    }\r\n  })\r\n\r\n  return isSame;\r\n}\r\n\r\nexport const GroupBy = function (xs, key) {\r\n  var groups = [];\r\n\r\n  xs.forEach(x => {\r\n    var val = x[key];\r\n    var group = undefined;\r\n    var index = groups.findIndex(y => val === y.Key);\r\n    if (index === -1) {\r\n      group = {\r\n        Key: val,\r\n        Items: []\r\n      };\r\n      groups.push(group);\r\n    } else {\r\n      group = groups[index];\r\n    }\r\n    group.Items.push(x);\r\n  })\r\n\r\n  return groups;\r\n};\r\n\r\nexport const Remove = (dict, key) => {\r\n  var index = dict.findIndex(x => x.Key === key);\r\n  if (index !== 0) {\r\n    return dict.splice(index, 1);\r\n  }\r\n}\r\n\r\nexport const Add = (dict, func, isDelete = true) => {\r\n  var key = newGUID();\r\n\r\n  var newfunc = () => {\r\n    if (func) {\r\n      func();\r\n    }\r\n    if (isDelete) {\r\n      Remove(dict, key);\r\n    }\r\n  }\r\n\r\n  dict.push({\r\n    Key: newGUID(),\r\n    Value: newfunc\r\n  });\r\n}\r\n\r\n// Truy xuất thông tin Excel\r\nexport const ExcelColumnName = (n) => {\r\n  var ordA = 'A'.charCodeAt(0);\r\n  var ordZ = 'Z'.charCodeAt(0);\r\n  var len = ordZ - ordA + 1;\r\n\r\n  var s = \"\";\r\n  while(n >= 0) {\r\n      s = String.fromCharCode(n % len + ordA) + s;\r\n      n = Math.floor(n / len) - 1;\r\n  }\r\n  return s;\r\n}\r\n\r\nexport const ExcelCellName = (row, col) => {\r\n  return `${ExcelColumnName(col)}${row+1}`;\r\n}\r\n\r\nexport const ExcelRangeName = (row1, col1, row2, col2) => {\r\n  return `${ExcelCellName(row1, col1)}:${ExcelCellName(row2, col2)}`\r\n}\r\n\r\n// Max min\r\nexport const MinMax = (arr) => {\r\n  return arr.reduce(({min, max}, v) => ({\r\n    min: min < v ? min : v,\r\n    max: max > v ? max : v,\r\n  }), { min: arr[0], max: arr[0] });\r\n}\r\n\r\n// Save Database\r\nexport const SaveDatabse = (q, url, handle) => {\r\n  var apiData = q.ApiData\r\n  var _id = apiData._id;\r\n\r\n  var isNew = _id ? true : false\r\n  const apiFunc = () => isNew ?\r\n    api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew){ \r\n        q._id = data._id\r\n      }\r\n      handle(data, isNew);\r\n    })\r\n}\r\n\r\n// Get plain text from paste\r\nexport const GetPlainText = (pasteEvent) => {\r\n  var text = (pasteEvent.originalEvent || pasteEvent).clipboardData.getData('text/plain');\r\n  return text;\r\n}","import * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport default class MassColumn {\r\n  _id\r\n  get id() {\r\n    if (!this._id){\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.Columns.indexOf(this);\r\n  }\r\n\r\n  Cells = []\r\n}","import { Component } from \"react\";\r\nimport React from 'react'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport * as ts from '../text/TextState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nclass NewInputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.contentEditable = React.createRef();\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    var data = this.state;\r\n    data.Content = e.target.value;\r\n  };\r\n\r\n  OnPaste = (e) => {\r\n    e.preventDefault();\r\n    var text = genUtil.GetPlainText(e);\r\n    \r\n    var data = this.state;\r\n    data.Content = text;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var Content = data.Content;\r\n    var style = this.props.style ? this.props.style : {};\r\n    if (!style.minWidth) {\r\n      style.minWidth = 150\r\n      style.fontFamily = 'password'\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <ContentEditable className='ant-input' innerRef={this.contentEditable}\r\n            placeholder={data.Placeholder}\r\n            style={style}\r\n            html={Content ? Content : ''}\r\n            onChange={this.handleChange}\r\n            onPaste={this.OnPaste} />\r\n          : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={Content} onChange={this.handleChange}\r\n            style={style} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(NewInputView)","export const _default = \"default\";\r\nexport const edit = \"edit\";","import * as util from './TextRenderItemUtil'\r\n\r\nexport class TextRenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport * as rs from './TextRenderState'\r\nimport { TextRenderItem } from \"./TextRenderItem\";\r\nimport NewInputView from \"../input/NewInputView\";\r\nimport { Button } from \"antd\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new TextRenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (content, context) => <>\r\n        {content}\r\n        { context.Is_Tool_Visible && context.Is_Edit_Visible ?\r\n          <Button type='primary' size='small'\r\n            className='left10 btn-warning' onClick={context.Edit}\r\n          >e</Button>\r\n          : ''}\r\n      </>\r\n    case rs.edit:\r\n      return (content, context) => <>\r\n        <span className='input__wrapper'>\r\n          <NewInputView store={context} />\r\n          {context.Is_Tool_Visible && context.Is_OK_Visible ?\r\n            <Button type='primary' size='small'\r\n              onClick={context.EditOK}>ok</Button>\r\n            : ''}\r\n        </span>\r\n      </>\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './TextRenderItemUtil'\r\n\r\nexport default class TextRender_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../input/NewInputView';\r\nimport TextRender_Dict from './TextRender_Dict';\r\nimport * as ts from './TextState'\r\nimport * as rs from './TextRenderState'\r\n\r\nexport class EditableTextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder: observable,\r\n      State: observable,\r\n       IsEditing: observable,\r\n      renderState: observable,\r\n      Is_Tool_Visible: observable,\r\n      Is_Edit_Visible : observable,\r\n      Is_OK_Visible: observable,\r\n      CanChange_RenderState : observable\r\n    })\r\n  }\r\n\r\n  content = undefined\r\n  get Content() {\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  inputStyle\r\n\r\n  style\r\n  get Style() {\r\n    if (!this.style) {\r\n      this.style = this.inputStyle ? this.inputStyle : {};\r\n\r\n      if (this.wrapper) {\r\n        this.style.position = 'relative';\r\n      }\r\n    }\r\n    return this.style;\r\n  }\r\n\r\n  State = ts.text\r\n\r\n  IsEditing = false\r\n\r\n  titleFunc\r\n  get TitleFunc() {\r\n    if (!this.titleFunc) {\r\n      this.titleFunc = () => this.Content;\r\n    }\r\n    return this.titleFunc;\r\n  } set TitleFunc(v) {\r\n    this.titleFunc = v;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = new TextRender_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v) {\r\n    this.render_Dict = v;\r\n  }\r\n\r\n  OnSet_RenderState_Func_Dict = []\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState;\r\n  } set RenderState(v) {\r\n    if (!this.CanChange_RenderState) {\r\n      return;\r\n    }\r\n\r\n    this.renderState = v;\r\n    this.OnSet_RenderState_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  CanChange_RenderState = true\r\n\r\n  Is_Tool_Visible = true\r\n  Is_Edit_Visible = true\r\n  Is_OK_Visible = true;\r\n\r\n  Edit = () => {\r\n    this.RenderState = rs.edit\r\n  }\r\n\r\n  EditOK = () => {\r\n    this.RenderState = rs._default\r\n  }\r\n\r\n  Render = () => {\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(this.Content, this);\r\n  }\r\n}","import * as util from './CategoryDataUtil'\r\n\r\nexport class CategoryData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new CategoryData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = util.GetCategoryNames();\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n}","export const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Columns']\r\n}","export const category = \"category\";\r\nexport const family = \"family\";\r\nexport const parameter = 'parameter'\r\n\r\nexport const GetAll = () => {\r\n  return [ category, family, parameter ];\r\n}","export const bystring = \"bystring\";\r\nexport const bynumber = \"bynumber\";\r\n\r\nexport const GetAll = () => {\r\n  return [ bystring, bynumber ];\r\n}","export const byequal = \"byequal\";\r\nexport const bycontain = \"bycontain\";\r\nexport const bynotcontain = \"bynotcontain\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bycontain, bynotcontain ];\r\n}","export const byequal = \"byequal\";\r\nexport const bysmaller = \"bysmaller\";\r\nexport const bysmallerorequal = \"bysmallerorequal\";\r\nexport const bybigger = \"bybigger\";\r\nexport const bybiggerorequal = \"bybiggerorequal\";\r\nexport const bybetween = \"bybetween\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bysmaller, bybigger, bybetween ];\r\n}","import { CategoryData } from \"../../single/model/CategoryData\"\r\nimport { PMData } from \"../../single/model/PMData\";\r\nimport { EntFilter } from \"./EntFilter\"\r\nimport * as fct from './FilterCategoryType'\r\nimport * as fvt from './FilterValueType'\r\nimport * as sft from './StringFilterType'\r\nimport * as nft from './NumberFilterType'\r\n\r\nexport const categoryData = () => {\r\n  return CategoryData.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, categoryType) => {\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.valueType;\r\n  qI.NumberFilterType = q.numberFilterType;\r\n  qI.StringFilterType = q.stringFilterType;\r\n  qI.Values = q.values;\r\n  qI.CategoryType = categoryType;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  if (!q) return q;\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.ValueType;\r\n  qI.NumberFilterType = q.NumberFilterType;\r\n  qI.StringFilterType = q.StringFilterType;\r\n  qI.Values = [...q.Values];\r\n  qI.CategoryType = q.CategoryType;\r\n  return qI;\r\n}\r\n\r\nexport const GetValueStorageList = (q) => {\r\n  var list = [];\r\n\r\n  switch (q.CategoryType) {\r\n    case fct.category:\r\n      list = categoryData().CategoryNames;\r\n      break;\r\n    case fct.parameter:\r\n      list = pmData().ParameterNames;\r\n      break;\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    valueType: q.ValueType,\r\n    numberFilterType: q.NumberFilterType,\r\n    stringFilterType: q.StringFilterType,\r\n    values: q.Values\r\n  }\r\n}\r\n\r\nexport const IsValid = (filter, value) => {\r\n  if (value === undefined || value === null) return false;\r\n\r\n  var isValid = false;\r\n  var filterValues = filter.Values;\r\n  switch (filter.ValueType) {\r\n    case fvt.bystring:\r\n      if (typeof value === 'string') {\r\n        var filterType = filter.StringFilterType;\r\n        switch (filterType) {\r\n          case sft.byequal:\r\n            filterValues.forEach(x => {\r\n              if (!isValid && x === value) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bycontain:\r\n            var lowerVal = value.toLowerCase();\r\n            filterValues.forEach(x => {\r\n              if (!isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bynotcontain:\r\n            var lowerVal = value.toLowerCase();\r\n            isValid = true;\r\n            filterValues.forEach(x => {\r\n              if (isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = false;\r\n              }\r\n            })\r\n            break;\r\n        }\r\n      }\r\n      break;\r\n    case fvt.bynumber:\r\n      if (!isNaN(value)) {\r\n        var filterType = filter.NumberFilterType;\r\n        switch (filterType) {\r\n          case nft.byequal:\r\n            return value === filterValues[0];\r\n          case nft.bysmaller:\r\n            return value < filterValues[0];\r\n          case nft.bysmallerorequal:\r\n            return value <= filterValues[0];\r\n          case nft.bybigger:\r\n            return value > filterValues[0];\r\n          case nft.bybiggerorequal:\r\n            return value >= filterValues[0];\r\n          case nft.bybetween:\r\n            var leftVal = filterValues[0];\r\n            var rightVal = filterValues[1];\r\n            return (filter.IsEqualLeft && leftVal === value) ||\r\n              leftVal < value && value < rightVal\r\n              || (filter.IsEqualRight && value === rightVal);\r\n        }\r\n      }\r\n      break;\r\n  }\r\n\r\n  L1:\r\n  return isValid;\r\n}","import * as util from './EntFilterUtil'\r\n\r\nexport class EntFilter\r\n{\r\n  ValueType\r\n  NumberFilterType\r\n  StringFilterType\r\n  IsEqualLeft\r\n  IsEqualRight\r\n\r\n  values\r\n  get Values(){\r\n    return this.values;\r\n  }\r\n  set Values(v){\r\n    this.values = v;\r\n  }\r\n\r\n  CategoryType\r\n\r\n  valueStorageList\r\n  get ValueStorageList(){\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = util.GetValueStorageList(this);\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byuser = 'byuser'\r\nexport const byauto = 'byauto'","import MGI_Item from \"./MGI_Item\";\r\nimport * as ct from './MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport const create = (mgi, createType) => {\r\n  var qI = new MGI_Item();\r\n  qI.MassGroupItem = mgi;\r\n\r\n  if (!createType) {\r\n    qI.CreateType = ct.byauto;\r\n  } else {\r\n    qI.CreateType = ct.byuser;\r\n    qI.Value = genUtil.newGUID();\r\n    qI.Title = 'Tên đầu mục';\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, mgi) => {\r\n  var qI = new MGI_Item();\r\n\r\n  qI.Value = data.value;\r\n  qI.SupValue = data.supValue\r\n  qI.Title = data.title;\r\n  qI.newMGI_id = data.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = data.createType ? data.createType : ct.byauto\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, mgi) => {\r\n  var qI = new MGI_Item();\r\n\r\n  qI.Value = q.Value;\r\n  qI.SupValue = q.SupValue;\r\n  qI.Title = q.Title;\r\n  qI.newMGI_id = q.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = q.CreateType;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetNewMGI = (q) => {\r\n  var _id = q.newMGI_id;\r\n  if (!_id) return undefined;\r\n  var list = q.MassGroupItem.SupComponent.AllItems;\r\n\r\n  var index = list.findIndex(x => x._id === _id);\r\n  return index !== -1 ? list[index] : undefined;\r\n}","import { PMData } from '../../../../single/model/PMData';\r\nimport * as util from './MGI_ItemUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport default class MGI_Item {\r\n  Value\r\n\r\n  SupValue\r\n\r\n  get Index() {\r\n    return this.MassGroupItem.Items.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = this.Value;\r\n    }\r\n    return this.title;\r\n  }\r\n  set Title(v){\r\n    this.title = v;\r\n  }\r\n\r\n  newMGI\r\n  get NewMGI(){\r\n    if (!this.newMGI){\r\n      this.newMGI = util.GetNewMGI(this);\r\n\r\n      if (!this.newMGI && this.newMGI_id){\r\n        this.newMGI_id = undefined;\r\n      }\r\n    }\r\n    return this.newMGI;\r\n  }\r\n  set NewMGI(v){\r\n    this.newMGI = v;\r\n    if (!v || v === this.MassGroupItem){\r\n      this.newMGI_id = undefined;\r\n    }\r\n    else{\r\n      this.newMGI_id = v.id;\r\n    }\r\n  }\r\n\r\n  newMGI_id\r\n\r\n  get ApiData(){\r\n    return {\r\n      value : this.Value,\r\n      supValue: this.SupValue,\r\n      title : this.Title,\r\n      newMGI_id : this.newMGI_id,\r\n      createType : this.CreateType\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.MassGroupItem.Items.splice(this.Index, 1);\r\n  }\r\n}","import * as util from './MassItemUtil'\r\nimport * as mif from './MassItemField'\r\nimport { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport default class MassItem {\r\n  Value\r\n  Unit\r\n\r\n  projectId\r\n\r\n  project\r\n  get Project() {\r\n    if (!this.project) {\r\n      this.project = util.GetProject(this);\r\n    }\r\n    return this.project;\r\n  }\r\n\r\n  workpackageId\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    if (!this.workpackage) {\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = util.GetPhases(this);\r\n    }\r\n    return this.phases;\r\n  }\r\n\r\n  get ValidPhasesByInput() {\r\n    return util.GetValidPhasesByInput(this);\r\n  }\r\n\r\n  IsGetElement = false\r\n\r\n  OnGetElementDone_Funcs = []\r\n\r\n  set GetElementDone(v) {\r\n    this.OnGetElementDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  GetValue = (field) => {\r\n    if (!field) {\r\n      return;\r\n    }\r\n\r\n    var data = mif.GetFullFields(this, field);\r\n    var { fields, isFromElement } = data;\r\n\r\n    var getValFunc = () => {\r\n      var obj = this;\r\n      var isValid = true;\r\n\r\n      fields.forEach(x => {\r\n        if (isValid) {\r\n          var temp = obj[x];\r\n          obj = temp;\r\n          if (obj === undefined) {\r\n            isValid = false;\r\n          }\r\n        }\r\n      })\r\n\r\n      if (field === mif.Value){\r\n        var roundingFactor = 2;\r\n\r\n        if (this.Unit === 'each'){\r\n          roundingFactor = 0;\r\n        }\r\n\r\n        obj = obj.toLocaleString('en-US', { maximumFractionDigits: roundingFactor });\r\n      }\r\n\r\n      return obj;\r\n    }\r\n\r\n    if (!isFromElement || this.Element) {\r\n      var val = getValFunc();\r\n      return val;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id: this._id,\r\n      projectId: this.projectId,\r\n      elementId: this.elementId,\r\n      workpackageId: this.workpackageId,\r\n      exportSetId: this.exportSetId,\r\n      exportSetVersionId: this.exportSetVersionId,\r\n      value: this.Value,\r\n      unit: this.Unit,\r\n      massType: this.MassType,\r\n      info: this.Info\r\n    }\r\n  }\r\n\r\n  AddDatabase = (handle) => {\r\n    var apiData = this.ApiData;\r\n    var { _id } = apiData;\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n\r\n    var command = _id ? 'edit' : 'add';\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/${command}`, apiData) : api.post(`${url}/${command}`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (command === 'add') {\r\n          this._id = data._id;\r\n        }\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`${command} mass successfully`);\r\n      })\r\n  }\r\n\r\n  DeleteDatabase = (handle) => {\r\n    var apiData = {\r\n      _id: this._id\r\n    };\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n    const apiFunc = () => api.put(`${url}/delete`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`delete mass successfully`);\r\n      })\r\n  }\r\n\r\n  IsGet_TLS_LevelGroup = false\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n\r\n  get Get_TLS_LevelGroup(){\r\n    return this.get_TLS_LevelGroup\r\n  }\r\n  set Get_TLS_LevelGroup(v) {\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n    this.get_TLS_LevelGroup = v;\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      util.Handle_TLS_LevelGroup(this);\r\n    }\r\n    return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true;\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    this.OnGet_FullValue_Func_Dict.forEach(x => x.Value())\r\n    this.get_FullValue = v;\r\n  }\r\n\r\n  // bao gồm giá trị tầng điển hình\r\n  fullValue\r\n  get FullValue() {\r\n    if (!this.fullValue) {\r\n      util.Handle_FullValue(this);\r\n    }\r\n    return this.fullValue;\r\n  } set FullValue(v) {\r\n    this.fullValue = v;\r\n    this.Get_FullValue = true;\r\n  }\r\n\r\n  phaseItems\r\n  get PhaseItems(){\r\n    if (!this.phaseItems){\r\n      this.phaseItems = util.GetPhaseItems(this);\r\n    }\r\n    return this.phaseItems;\r\n  }\r\n\r\n  GetPhaseItem = (phaseName) => {\r\n    var list = this.PhaseItems;\r\n    var index = list.findIndex(x => x.Phase.Name === phaseName);\r\n    return list[index];\r\n  }\r\n}","import * as util from './MIPh_ItemUtil'\r\n\r\nexport default class MIPh_Item {\r\n  Phase\r\n\r\n  get Project(){\r\n    return this.Phase.Project\r\n  }\r\n\r\n  get MassItem(){\r\n    return this.Dict;\r\n  }\r\n\r\n  IsGet_TLS_LevelGroup = false\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n\r\n  get Get_TLS_LevelGroup(){\r\n    return this.get_TLS_LevelGroup\r\n  }\r\n  set Get_TLS_LevelGroup(v) {\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n    this.get_TLS_LevelGroup = v\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      util.Handle_TLS_LevelGroup(this);\r\n    }\r\n    return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true;\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    this.OnGet_FullValue_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  // bao gồm giá trị tầng điển hình\r\n  fullValue\r\n  get FullValue() {\r\n    if (!this.fullValue) {\r\n      util.Handle_FullValue(this);\r\n    }\r\n    return this.fullValue;\r\n  } set FullValue(v) {\r\n    this.fullValue = v;\r\n    this.Get_FullValue = true;\r\n  }\r\n}","import MIPh_Item from \"./MIPh_Item\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as mif from '../MassItemField'\r\n\r\n// Instance\r\nexport const get = (phase, dict) => {\r\n  var qI = new MIPh_Item();\r\n  qI.Phase = phase;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_TLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  var phase = q.Phase;\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    var pi = GetValidTLS_PageItem(q, tls.Data);\r\n    return GetValidTLS_LevelGroup(q, pi);\r\n  }\r\n\r\n  var tls = phase.TypicalLevelSetting;\r\n  if (tls) {\r\n    q.TLS_LevelGroup = getLevelGroup_Func(tls);\r\n  } else {\r\n    phase.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TLS_LevelGroup = getLevelGroup_Func(phase.TypicalLevelSetting);\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      isValid = x.Values.includes(q.MassItem.GetValue(field));\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // Kiểm tra Level hiện tại có trong tập hợp Level hay không\r\n    //if (!validLg && x.Levels.includes(q.GetValue(mif.level))) {\r\n\r\n    // Cách kiểm tra mới: Level primary tương ứng Leve hiện tại\r\n    if (!validLg && x.Primary === q.MassItem.GetValue(mif.level)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\nexport const Handle_FullValue = (q) => {\r\n  if (q.IsGet_FullValue) return undefined;\r\n  q.IsGet_FullValue = true;\r\n\r\n  const getFullValue_Func = (lg) => {\r\n    var count = lg ? lg.Count : 1\r\n    var obj = q.MassItem.Value * count;\r\n    return obj;\r\n  }\r\n\r\n  if (q.TLS_LevelGroup || q.Get_TLS_LevelGroup) {\r\n    q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n  } else {\r\n    genUtil.Add(q.OnGet_TLS_LevelGroup_Func_Dict,\r\n      () => {\r\n        q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n      });\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport MassItem from './MassItem';\r\nimport * as elementUtil from '../../element/ElementUtil'\r\nimport * as mt from '../MassType'\r\nimport * as ut from '../../value/ValueUnit'\r\nimport * as mif from './MassItemField'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as phaseItemUtil from './phaseValue/MIPh_ItemUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new MassItem();\r\n\r\n  qI._id = q._id;\r\n  qI.Value = q.value;\r\n  qI.Unit = q.unit;\r\n  qI.MassType = q.massType;\r\n  qI.Info = q.info;\r\n  qI.projectId = q.projectId;\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.exportSetId = q.exportSetId;\r\n  qI.exportSetVersionId = q.exportSetVersionId;\r\n  qI.Element = q.Elements && q.Elements.length !== 0 ? q.Elements[0] : undefined;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultRebarMass = (project) => {\r\n  var qI = new MassItem();\r\n\r\n  qI.Unit = ut.kg;\r\n  qI.MassType = mt.rebar;\r\n  qI.Info = {}\r\n  qI.projectId = project._id;\r\n\r\n  const setExportSetData = (exportSet) => {\r\n    qI.exportSetId = exportSet._id;\r\n\r\n    var currentVersion = exportSet.CurrentVersion;\r\n    if (!currentVersion) {\r\n      exportSet.OnGetCurrentVersionDone_Func.push(() => {\r\n        currentVersion = exportSet.CurrentVersion;\r\n        qI.exportSetVersionId = currentVersion._id;\r\n      })\r\n    } else {\r\n      qI.exportSetVersionId = currentVersion._id;\r\n    }\r\n  }\r\n\r\n  var inputExportSet = project.InputExportSet;\r\n  if (!inputExportSet) {\r\n    project.OnGetInputExportSetDone_Funcs\r\n      .push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        setExportSetData(inputExportSet);\r\n      })\r\n  } else {\r\n    setExportSetData(inputExportSet);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProject = (q) => {\r\n  var list = pmData().Project_Dict.Items;\r\n  var { projectId } = q;\r\n  var index = list.findIndex(x => x._id === projectId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const getAll = (apiData, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbmr/newlist\";\r\n\r\n  //var start = window.performance.now();\r\n\r\n  api.post(url, apiData, undefined, 2000000)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      //var end = window.performance.now();\r\n      //console.log(`Execution time: ${(end - start)/1000} s`);\r\n\r\n      if (!data) {\r\n        console.log('mass result undefined');\r\n        return;\r\n      }\r\n\r\n      var items = data.map(x => {\r\n        return get(x)\r\n      })\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getRebars = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbmr/rebar?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = undefined;\r\n      if (!data) {\r\n        items = [];\r\n      } else {\r\n        var items = data.map(x => get(x))\r\n      }\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getByViewDetail = (_id, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbdv/massdetail?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var { viewDetail, masses } = data;\r\n      var isGetElement = mt.IsGetElement(viewDetail.massType);\r\n      var items = masses.map(x => get(x, isGetElement));\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetWorkpackage = (q) => {\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var { workpackageId } = q;\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetPhases = (q) => {\r\n  var list = [];\r\n  var phases = pmData().Phase_Dict.Items;\r\n  var exportSetVersionId = q.exportSetVersionId;\r\n  phases.forEach(x => {\r\n    if (x.exportSetVersionIds.includes(exportSetVersionId)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetValidPhasesByInput = (q) => {\r\n  var inputPhases = pmData().MassResultComp.Phases;\r\n  var phases = q.Phases;\r\n  var list = [];\r\n  phases.forEach(x => {\r\n    if (inputPhases.includes(x)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetElementAsync = (q) => {\r\n  var elemId = q.elementId\r\n  if (elemId) {\r\n    elementUtil.GetById(elemId, (data) => {\r\n      q.Element = data\r\n      q.IsGetElement = true;\r\n      q.GetElementDone = true;\r\n    });\r\n  } else {\r\n    q.IsGetElement = true;\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  var project = q.Project;\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    var pi = GetValidTLS_PageItem(q, tls.Data);\r\n    return GetValidTLS_LevelGroup(q, pi);\r\n  }\r\n\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    q.TLS_LevelGroup = getLevelGroup_Func(tls);\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TLS_LevelGroup = getLevelGroup_Func(project.TypicalLevelSetting);\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      isValid = x.Values.includes(q.GetValue(field));\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // Kiểm tra Level hiện tại có trong tập hợp Level hay không\r\n    //if (!validLg && x.Levels.includes(q.GetValue(mif.level))) {\r\n\r\n    // Cách kiểm tra mới: Level primary tương ứng Leve hiện tại\r\n    if (!validLg && x.Primary === q.GetValue(mif.level)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\nexport const Handle_FullValue = (q) => {\r\n  if (q.IsGet_FullValue) return undefined;\r\n  q.IsGet_FullValue = true;\r\n\r\n  const getFullValue_Func = (lg) => {\r\n    var count = lg ? lg.Count : 1\r\n    return q.Value * count;\r\n  }\r\n\r\n  if (q.TLS_LevelGroup || q.Get_TLS_LevelGroup) {\r\n    q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n  } else {\r\n    genUtil.Add(q.OnGet_TLS_LevelGroup_Func_Dict,\r\n      () => {\r\n        q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n      });\r\n  }\r\n}\r\n\r\nexport const GetPhaseItems = (q) => {\r\n  return q.Phases.map(x => phaseItemUtil.get(x, q));\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport MGI_Item from './MGI_Item'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport * as mgii_ct from './MGI_I_CreateType'\r\nimport * as rowUtil from '../MassRowUtil'\r\nimport * as util from './MassGroupItemUtil'\r\nimport { pmData } from '../../item/MassItemUtil'\r\n\r\nexport default class MassGroupItem {\r\n  Field\r\n  SubComponents = []\r\n  NotIncludeValues = []\r\n  IsHaveValueOrder\r\n  BindingRows\r\n  SupComponent\r\n\r\n  Items = []\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  get Index() {\r\n    return this.SupComponent.Items.indexOf(this);\r\n  }\r\n\r\n  get OrderItems() {\r\n    return this.Items;\r\n  }\r\n\r\n  get OrderValues() {\r\n    return this.Items.map(x => x.Value);\r\n  }\r\n\r\n  get ApiData() {\r\n    var items = this.Items.map(x => x.ApiData);\r\n\r\n    return {\r\n      _id: this.id,\r\n      field: this.Field,\r\n      subComponents: this.SubComponents.map(x => x.ApiData),\r\n      valueOrders: this.ValueOrders,\r\n      notIncludeValues: this.NotIncludeValues,\r\n      items\r\n    }\r\n  }\r\n\r\n  AddNotIncludeValue = (v) => {\r\n    var index = this.NotIncludeValues.indexOf(v);\r\n    if (index === -1) {\r\n      this.NotIncludeValues.push(v);\r\n    }\r\n  }\r\n\r\n  GetItem = (v, title) => {\r\n    var index = this.Items.findIndex(x => x.Value === v);\r\n    if (index === -1) {\r\n      var item = itemUtil.create(this)\r\n      item.Value = v;\r\n      item.Title = title;\r\n      this.Items.push(item);\r\n      return item;\r\n    }\r\n    return this.Items[index];\r\n  }\r\n\r\n  SupRows = []\r\n\r\n  On_AddSupRow_Func_Dict = []\r\n\r\n  AddSupRow = (v) => {\r\n    var list = this.SupRows;\r\n    if (list.indexOf(v) !== -1) return;\r\n\r\n    this.NewRow = v;\r\n    list.push(v);\r\n    this.HandleCreatedByUserRows();\r\n\r\n    this.On_AddSupRow_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  OnIsFirstSetSupRow_Funcs = []\r\n\r\n  isFirstSetSupRow\r\n  get IsFirstSetSupRow() {\r\n    return this.isFirstSetSupRow;\r\n  }\r\n  set IsFirstSetSupRow(v) {\r\n    this.isFirstSetSupRow = v;\r\n    this.OnIsFirstSetSupRow_Funcs.forEach(x => x());\r\n  }\r\n\r\n  get HaveMassItemSubComponents() {\r\n    return this.SubComponents.filter(x => x.IsHaveMassItem);\r\n  }\r\n\r\n  table\r\n  get Table() {\r\n    if (!this.table) {\r\n      this.table = util.GetTable(this);\r\n    }\r\n    return this.table;\r\n  }\r\n  set Table(v) {\r\n    this.table = v;\r\n  }\r\n\r\n  HandleCreatedByUserRows = () => {\r\n    var userItems = this.Items\r\n      .filter(x => x.CreateType === mgii_ct.byuser && !x.IsAdd_Done);\r\n\r\n    userItems.forEach(x => {\r\n      var value = x.Value;\r\n      var supRows = this.SupRows;\r\n      var supRow\r\n\r\n      var isValid = true;\r\n      if (!x.SupValue && supRows.length !== 0) {\r\n        supRow = supRows[0]\r\n      } else {\r\n        var index = supRows.findIndex(y => y.Name === x.SupValue);\r\n        if (index !== -1) {\r\n          supRow = supRows[index];\r\n        } else {\r\n          isValid = false;\r\n        }\r\n      }\r\n\r\n      if (!isValid) return false;\r\n\r\n      // Gán nhãn IsAdd_Done\r\n      x.IsAdd_Done = true;\r\n\r\n      const addRow = (supRow) => {\r\n        var row = this.Table.GetRow(value, supRow);\r\n        row.FullValue = value;\r\n        row.IsCreatedByUser = true;\r\n\r\n        // Lưu vào danh sách Tạo bởi người dùng trong đối tượng Table\r\n        this.Table.CreatedByUser_Rows.push(row);\r\n        return row;\r\n      }\r\n\r\n      const handleRow = (row) => {\r\n        row.MassGroupItem = this;\r\n        handleNonField(row);\r\n      }\r\n\r\n      const handleNonField = (row) => {\r\n        var subMgcIndex = this.SubComponents.findIndex(y =>\r\n          y.Filter.Values.includes(x.Value))\r\n        if (subMgcIndex !== -1) {\r\n          var subMgi = this.SubComponents[subMgcIndex].Items[0];\r\n          subMgi.AddSupRow(row);\r\n        }\r\n      }\r\n\r\n      var replaceMgi = x.NewMGI;\r\n      if (replaceMgi) {\r\n        var supName = x.SupValue;\r\n\r\n        replaceMgi.GetItem(value);\r\n        this.Table.Handle_ReplaceMGI(replaceMgi,supName, addRow, handleRow);\r\n      } else {\r\n        handleRow(addRow(supRow));\r\n      }\r\n    })\r\n  }\r\n}","import * as util from './MassGroupComponentUtil'\r\n\r\nexport default class MassGroupComponent {\r\n  Filter\r\n  Items\r\n  SupItem\r\n\r\n  originComponent\r\n  get OriginComponent(){\r\n    if (!this.originComponent){\r\n      this.originComponent = util.GetOriginComponent(this);\r\n    }\r\n    return this.originComponent;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      filter : this.Filter ? this.Filter.ApiData : undefined,\r\n      items: this.Items.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  get AllItems(){\r\n    return this.OriginComponent.AllSubItems;\r\n  }\r\n\r\n  get AllSubItems(){\r\n    var list = [...this.Items];\r\n    this.Items.forEach(x => \r\n      x.SubComponents.forEach(y => list.push.apply(list, y.AllSubItems)));\r\n    return list;\r\n  }\r\n}","import MassGroupComponent from \"./MassGroupComponent\"\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as itemUtil from './MassGroupItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\"\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, supItem) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  qI.Filter = data.filter ? filterUtil.get(data.filter) : undefined;\r\n\r\n  qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supItem) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupComponent();\r\n  qI.Filter = filterUtil.Clone(q.Filter);\r\n\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetOriginComponent = (q) => {\r\n  return q.SupItem ? q.SupItem.SupComponent.OriginComponent : q;\r\n}","import MassGroupItem from \"./MassGroupItem\"\r\nimport * as compUtil from './MassGroupComponentUtil'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (field, subComps, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI.Field = field;\r\n  qI.SupComponent = supCom;\r\n  if (subComps) {\r\n    qI.SubComponents = subComps;\r\n  }\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI._id = data._id;\r\n  qI.Field = data.field;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = data.subComponents ? data.subComponents.map(x => compUtil.get(x, qI))\r\n    : [];\r\n\r\n  if (data.items) {\r\n    qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI))\r\n      .filter(x => x.Value);\r\n    qI.IsHaveValueOrder = true;\r\n  } else {\r\n    qI.Items = []\r\n    qI.IsHaveValueOrder = false;\r\n  }\r\n\r\n  qI.NotIncludeValues = data.notIncludeValues ? data.notIncludeValues : [];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supCom) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupItem();\r\n  qI.id = q.id;\r\n  qI.Field = q.Field;\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.NotIncludeValues = [...q.NotIncludeValues];\r\n  qI.IsHaveValueOrder = q.IsHaveValueOrder;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = q.SubComponents.map(x => compUtil.Clone(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  return q.SupComponent.SupItem.Table;\r\n}","import { MultiSelectVM } from \"./MultiSelectVM\";\r\n\r\nexport const get = (items, initialItems) => {\r\n  var qI = new MultiSelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItems = initialItems;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MultiSelectVMUtil'\r\n\r\nexport class MultiSelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      selectedIndexs: observable,\r\n      open : observable,\r\n      canOpen : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  initialItems;\r\n  get InitialItems() {\r\n    return this.initialItems;\r\n  }\r\n  set InitialItems(v){\r\n    this.initialItems = v;\r\n    this.InitialIndexs = this.GetInitialIndexs();\r\n    this.SelectedIndexs = this.InitialIndexs;\r\n  }\r\n\r\n  initialIndexs;\r\n  get InitialIndexs() {\r\n    if (!this.initialIndexs) {\r\n      this.initialIndexs = this.GetInitialIndexs();\r\n    }\r\n    return this.initialIndexs;\r\n  }\r\n  set InitialIndexs(v){\r\n    this.initialIndexs = v;\r\n  }\r\n\r\n  GetInitialIndexs =() => {\r\n    var initialItems = this.InitialItems;\r\n    if (!initialItems) return [];\r\n    return initialItems.map(x => this.Items.indexOf(x)).filter(x => x !== -1);\r\n  }\r\n\r\n  selectedIndexs = []\r\n  get SelectedIndexs() {\r\n    return this.selectedIndexs;\r\n  }\r\n  set SelectedIndexs(v) {\r\n    this.selectedIndexs = v;\r\n    this.SelectedItems = this.GetSelectedItems();\r\n  }\r\n\r\n  selectedItems\r\n  get SelectedItems() {\r\n    if (!this.selectedItems) {\r\n      this.selectedItems = this.GetSelectedItems();\r\n    }\r\n    return this.selectedItems;\r\n  }\r\n  set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n    if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItems = () => {\r\n    return this.SelectedIndexs.map(x => this.Items[x]);\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder() {\r\n    if (!this.placeholder) {\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { MultiSelectVM } from \"./MultiSelectVM\";\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nconst { Option } = Select;\r\n\r\nclass MultiSelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MultiSelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style ? this.props.style : { width: '100%' }; \r\n    var { Placeholder, Items, SelectedIndexs, InitialIndexs } = data;\r\n\r\n    if (SelectedIndexs.length === 0) {\r\n      SelectedIndexs = InitialIndexs;\r\n      data.InitialIndexs = [];\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined){\r\n        id = genUtil.randomId();\r\n      }else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    return (\r\n      <>\r\n        <Select style={style}\r\n          mode=\"multiple\"\r\n          placeholder={Placeholder}\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={SelectedIndexs}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n          open={data.CanOpen && data.Open}\r\n          onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n        >\r\n          {elems}\r\n        </Select>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MultiSelectView)","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class EntHoverVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsElementVisible: observable,\r\n    })\r\n  }\r\n\r\n  IsElementVisible = false;\r\n\r\n  ShowElement = () => {\r\n    this.IsElementVisible =  true;\r\n  }\r\n\r\n  HideElement = () => {\r\n    this.IsElementVisible =  false;\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport EntHoverVM from \"./EntHoverVM\";\r\n\r\nclass EntHoverView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntHoverVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var className = this.props.className;\r\n    if (!data.style) {\r\n      var style = this.props.style ? this.props.style : {};\r\n      if (!style.minWidth) {\r\n        style.minWidth = 150;\r\n      }\r\n      data.style = style;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={className} style={data.style}\r\n          onMouseEnter={data.ShowElement}\r\n          onMouseLeave={data.HideElement}>\r\n          {data.IsElementVisible ? data.Element : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntHoverView)","import { SelectVM } from \"./SelectVM\";\r\n\r\nexport const get = (items, initialItem) => {\r\n  var qI = new SelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItem = initialItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './SelectVMUtil'\r\n\r\nexport class SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      selectedIndex : observable,\r\n      CanClear :observable,\r\n      open : observable,\r\n      canOpen : observable,\r\n      isDisabled : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = [];\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  initialItem = undefined\r\n  get InitialItem() {\r\n    return this.initialItem;\r\n  }\r\n  set InitialItem(v){\r\n    this.initialItem = v;\r\n    this.InitialIndex = this.GetInitialIndex();\r\n    this.SelectedIndex = this.InitialIndex;\r\n  }\r\n\r\n  initialIndex\r\n  get InitialIndex(){\r\n    if (!this.initialIndex){\r\n      this.initialIndex = this.GetInitialIndex();\r\n    }\r\n    return this.initialIndex;\r\n  }\r\n  set InitialIndex(v){\r\n    this.initialIndex = v;\r\n  }\r\n\r\n  GetInitialIndex = () => {\r\n    var index = this.Items.indexOf(this.InitialItem);\r\n    return index !== -1 ? index : null;\r\n  }\r\n\r\n  selectedIndex = undefined\r\n  get SelectedIndex(){\r\n    return this.selectedIndex;\r\n  }\r\n  set SelectedIndex(v){\r\n    this.selectedIndex = v;\r\n    this.SelectedItem = this.GetSelectedItem();\r\n  }\r\n\r\n  selectedItem\r\n  get SelectedItem (){\r\n    if (!this.selectedItem){\r\n      this.selectedItem = this.GetSelectedItem();\r\n    }\r\n    return this.selectedItem;\r\n  }\r\n  set SelectedItem (v) {\r\n    this.selectedItem = v;\r\n    if (this.OnSelectedItemChanged){\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItem = () => {\r\n    var index = this.SelectedIndex;\r\n    if (index === -1) return undefined;\r\n    return this.Items[index];\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder(){\r\n    if (!this.placeholder){\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v){\r\n    this.placeholder = v;\r\n  }\r\n\r\n  CanClear = false\r\n\r\n  Clear = () => {\r\n    this.SelectedIndex = null\r\n  }\r\n  \r\n  get DivStyle() {\r\n    return this.CanClear ? { \r\n      position: 'relative', \r\n      padding: '0 22px 0 0' \r\n    } : {};\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n\r\n  isDisabled = false\r\n  get IsDisabled(){\r\n    return this.isDisabled;\r\n  } set IsDisabled(v){\r\n    this.isDisabled = v;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class FloatItemVM {\r\n  location\r\n\r\n  className\r\n  getClassName = () => {\r\n    if (!this.className){\r\n      this.className = `float ${this.location}`;\r\n    }\r\n    return this.className\r\n  }\r\n}","import FloatItemVM from \"./FloatItemVM\";\r\n\r\nexport const get = (loc) => {\r\n  var qI = new FloatItemVM();\r\n  qI.location = loc;\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport * as floatItemVMUtil from './FloatItemVMUtil'\r\n\r\nclass FloatItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = floatItemVMUtil.get('top right', 'Test')\r\n    }else{\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className={data.getClassName()}>{this.getWrapperContent()}</span>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(FloatItemView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { SelectVM } from \"./SelectVM\";\r\nimport * as floatItemVMUtil from '../float/FloatItemVMUtil'\r\nimport FloatItemView from \"../float/FloatItemView\";\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport './Select.css'\r\n\r\nconst { Option } = Select;\r\n\r\nclass SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new SelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var className = this.props.className ? this.props.className : ''\r\n    var style = this.props.style ? this.props.style : { width: '100%' };\r\n    var { Placeholder, Items, SelectedIndex, InitialIndex } = data;\r\n\r\n    if (SelectedIndex === -1) {\r\n      SelectedIndex = InitialIndex;\r\n      data.InitialIndex = -1;\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined) {\r\n        id = genUtil.randomId();\r\n      } else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    var floatElem = ''\r\n    if (data.CanClear) {\r\n      var floatItemStore = floatItemVMUtil.get('right')\r\n      floatItemStore.wrapper = <Button size='small' type='primary'\r\n        onClick={data.Clear}>x</Button>\r\n\r\n      floatElem = <FloatItemView store={floatItemStore} />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={`select__wrapper ${className}`}\r\n          style={data.DivStyle} >\r\n          {floatElem}\r\n          <Select style={style}\r\n            showSearch\r\n            placeholder={Placeholder}\r\n            optionFilterProp=\"children\"\r\n            onChange={this.onValueChange}\r\n            value={SelectedIndex}\r\n            filterOption={(input, option) =>\r\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            }\r\n            open={data.CanOpen && data.Open}\r\n            onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n            disabled={data.IsDisabled}\r\n          >\r\n            {elems}\r\n          </Select>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(SelectView)","export const inside = 'inside'\r\nexport const lower = 'lower'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ReplaceRowLocationFactoryUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport * as lt from './RRLF_LocationType'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance\r\n}\r\n\r\nexport default class ReplaceRowLocationFactory {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Location: observable,\r\n    })\r\n  }\r\n\r\n  ReferenceRow\r\n  Location = lt.inside\r\n\r\n  get Color(){\r\n    return util.GetColor(this);\r\n  }\r\n\r\n  get ButtonStyle(){\r\n    return {\r\n      width: 50,\r\n      backgroundColor: this.Color,\r\n      border: 'none'\r\n    };\r\n  }\r\n\r\n  ToggleLocation = () =>{\r\n    switch (this.Location) {\r\n      case lt.inside:\r\n        this.Location = lt.lower;\r\n        break;\r\n      case lt.lower:\r\n        this.Location = lt.inside;\r\n        break;\r\n    }\r\n  }\r\n}","import * as lt from './RRLF_LocationType'\r\n\r\nexport const GetColor = (v) => {\r\n  switch (v.Location) {\r\n    case lt.inside:\r\n      return \"#52c41a\";\r\n    case lt.lower:\r\n      return \"#faad14\";\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TwoCol_SelectVMUtil'\r\nimport * as genUtil from '../../../util/generalUtil'\r\n\r\nexport class TwoCol_SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      availableItems: observable,\r\n      selectedItems: observable,\r\n      inputTitle: observable,\r\n      outputTitle: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    this.AvailableItems = [...this.Items];\r\n    this.SelectedItems = [];\r\n  }\r\n\r\n  inputTitle = undefined\r\n  get InputTitle(){\r\n    if (!this.inputTitle){\r\n      this.inputTitle = 'Dữ liệu input'\r\n    }\r\n    return this.inputTitle;\r\n  } set InputTitle(v){\r\n    this.inputTitle = v;\r\n  }\r\n\r\n  outputTitle = undefined\r\n  get OutputTitle(){\r\n    if (!this.outputTitle){\r\n      this.outputTitle = 'Dữ liệu output'\r\n    }\r\n    return this.outputTitle;\r\n  } set OutputTitle(v){\r\n    this.outputTitle = v;\r\n  }\r\n\r\n  availableItems = undefined\r\n  get AvailableItems() {\r\n    return this.availableItems;\r\n  } set AvailableItems(v) {\r\n    this.availableItems = v;\r\n  }\r\n\r\n  selectedItems = []\r\n  get SelectedItems() {\r\n    return this.selectedItems;\r\n  } set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n  }\r\n\r\n  GetKey = (item) => {\r\n    if (typeof item === 'string') return item;\r\n    var id = item.id ? item.id : genUtil.newGUID();\r\n    return id;\r\n  }\r\n\r\n  Select = (item) => {\r\n    var index1 = this.AvailableItems.indexOf(item);\r\n    this.AvailableItems.splice(index1, 1);\r\n\r\n    this.SelectedItems.push(item);\r\n\r\n    this.IsChanged = true;\r\n  }\r\n\r\n  Unselect = (item) => {\r\n    var index1 = this.SelectedItems.indexOf(item);\r\n    this.SelectedItems.splice(index1, 1);\r\n\r\n    var index = this.Items.indexOf(item);\r\n    if (index < this.AvailableItems.length) {\r\n      this.AvailableItems.splice(index, 0, item);\r\n    } else {\r\n      this.AvailableItems.push(item);\r\n    }\r\n\r\n    this.IsChanged = true;\r\n  }\r\n\r\n  set IsChanged(v) {\r\n    if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(this.SelectedItems);\r\n    }\r\n  }\r\n\r\n  render\r\n  get Render() {\r\n    if (!this.render) {\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v) {\r\n    this.render = v;\r\n  }\r\n}","import { TwoCol_SelectVM } from \"./TwoCol_SelectVM\";\r\n\r\n// Instance\r\nexport const get = (items, render, inputTitle, outputTitle) => {\r\n  var qI = new TwoCol_SelectVM();\r\n\r\n  qI.Items = items;\r\n  qI.Render = render;\r\n  qI.InputTitle = inputTitle;\r\n  qI.OutputTitle = outputTitle;\r\n  \r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(\r\n    [\r\n      'a', 'b', 'c',\r\n      'd', 'e', 'f',\r\n      'g', 'h', 'i',\r\n      'j', 'k', 'q',\r\n      'r', 's', 't',\r\n    ]\r\n  )\r\n}\r\n\r\n// Property\r\nexport const GetRender = (q) => {\r\n  return (item) => item;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { TwoCol_SelectVM } from \"./TwoCol_SelectVM\";\r\nimport * as util from './TwoCol_SelectVMUtil'\r\nimport './TwoCol_Select.css'\r\n\r\nclass TwoCol_SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style;\r\n\r\n    return (\r\n      <>\r\n        <table className='tc_table'>\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <div className='tc_table__title'>\r\n                  <span>\r\n                    {data.InputTitle}\r\n                  </span>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className='tc_table__title'>\r\n                  {data.OutputTitle}\r\n                </div>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <span className='tc_select__partition__items'>\r\n                  {data.AvailableItems.map(x => {\r\n                    return <span key={data.GetKey(x)} onClick={() => data.Select(x)}>\r\n                      {data.Render(x)}\r\n                    </span>\r\n                  })}\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span className='tc_select__partition__items'>\r\n                  {data.SelectedItems.map(x => {\r\n                    return <span key={data.GetKey(x)} onClick={() => data.Unselect(x)}>\r\n                      {data.Render(x)}\r\n                    </span>\r\n                  })}\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TwoCol_SelectView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassRow_ToolElementUtil'\r\n\r\nexport default class MassRow_ToolElement {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      editable_TitleVM_RenderState: observable\r\n    })\r\n  }\r\n\r\n  get Editable_TitleVM() {\r\n    return this.Dict.Editable_TitleVM;\r\n  }\r\n\r\n  editable_TitleVM_RenderState= undefined\r\n  get Editable_TitleVM_RenderState(){\r\n    if (this.editable_TitleVM_RenderState === undefined){\r\n      this.editable_TitleVM_RenderState =\r\n        util.GetEditable_TitleVM_RenderState(this);\r\n    }\r\n    return this.editable_TitleVM_RenderState;\r\n  } set Editable_TitleVM_RenderState(v){\r\n    this.editable_TitleVM_RenderState = v;\r\n\r\n    this.Editable_TitleVM.RenderState= v;\r\n  }\r\n\r\n  Method = (name) => {\r\n    return this.Dict[name];\r\n  }\r\n}","\r\n// Property\r\nexport const GetEditable_TitleVM_RenderState = (q) => {\r\n  return q.Editable_TitleVM.RenderState;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport MassRow_ToolElement from \"./MassRow_ToolElement\";\r\nimport { Button } from \"antd\";\r\nimport { DownCircleOutlined, ReloadOutlined, UpCircleOutlined } from \"@ant-design/icons\";\r\nimport * as trs from '../../../../../text/TextRenderState';\r\n\r\n\r\nclass MassRow_ToolElementView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow_ToolElement();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.Editable_TitleVM_RenderState === trs._default ?\r\n          <Button size='small' type='primary'\r\n            className='btn-warning'\r\n            onClick={() => data.Editable_TitleVM_RenderState = trs.edit}>\r\n            e\r\n          </Button> :\r\n          ''}\r\n\r\n        <Button size='small' type='primary'\r\n          className='btn-success'\r\n          onClick={data.Method('MoveUp')}>\r\n          <UpCircleOutlined />\r\n        </Button>\r\n        <Button size='small' type='primary'\r\n          className='btn-success'\r\n          onClick={data.Method('MoveDown')}>\r\n          <DownCircleOutlined />\r\n        </Button>\r\n\r\n        <Button type='primary' size='small'\r\n          className='btn-warning'\r\n          onClick={data.Method('OpenModal')}>...</Button>\r\n\r\n        <Button size='small' type='primary'\r\n          className='btn-success'\r\n          onClick={data.Method('AddSub')}>+</Button>\r\n        <Button type='primary' size='small' danger\r\n          onClick={data.Method('Delete')}>x</Button>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRow_ToolElementView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil';\r\nimport * as editTextUtil from '../../../../text/EditableTextVMUtil';\r\nimport * as trs from '../../../../text/TextRenderState';\r\nimport * as util from './MassRowUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport { EntFilter } from '../../filter/EntFilter';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport MultiSelectView from '../../../../select/MultiSelectView';\r\nimport { Col, Row, Space, Button, Switch, message, Popover } from 'antd';\r\nimport EntHoverVM from '../../../../hover/EntHoverVM';\r\nimport EntHoverView from '../../../../hover/EntHoverView';\r\nimport { DownCircleOutlined, EnterOutlined, InfoCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport ReplaceRowLocationFactory from './location/ReplaceRowLocationFactory';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport InputView from '../../../../input/InputView';\r\nimport * as mif from '../item/MassItemField'\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as mr_f_it from './MassRow_Field_InputType'\r\nimport NewInputView from '../../../../input/NewInputView';\r\nimport * as tc_selectUtil from '../../../../select/twocol/TwoCol_SelectVMUtil';\r\nimport TwoCol_SelectView from \"../../../../select/twocol/TwoCol_SelectView\";\r\nimport MassRow_ToolElementView from './tool/MassRow_ToolElementView';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class MassRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      rank: observable,\r\n      isShowSub: observable,\r\n      isHaveSub: observable,\r\n      IsToolVisible: observable,\r\n      subItems: observable,\r\n      IsModalVisible: observable,\r\n      title: observable,\r\n      FieldInputType: observable,\r\n      IsHaveAdditionInformation: observable,\r\n      AdditionInformation: observable,\r\n      Is_SelectSubItems_ModalOpen: observable,\r\n      Temp_SelectSubItems: observable,\r\n      isShow_RawValue: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  supItem\r\n  get SupItem() {\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v) {\r\n    this.supItem = v;\r\n    this.CurrentList = undefined;\r\n    this.Rank = undefined;\r\n  }\r\n\r\n  currentList\r\n  get CurrentList() {\r\n    if (!this.currentList) {\r\n      this.currentList = this.SupItem ? this.SupItem.SubItems : this.Table.MainRows;\r\n    }\r\n    return this.currentList;\r\n  }\r\n  set CurrentList(v) {\r\n    this.currentList = v;\r\n  }\r\n\r\n  get Table() {\r\n    return this.Dict;\r\n  }\r\n\r\n  // SubItems\r\n  subItems = []\r\n  get SubItems() {\r\n    return this.subItems;\r\n  } set SubItems(v) {\r\n    this.subItems = v;\r\n  }\r\n\r\n  get AllItems() {\r\n    var list = [];\r\n    list.push(this);\r\n    this.SubItems.forEach(x => {\r\n      list.push.apply(list, x.AllItems)\r\n    });\r\n    return list;\r\n  }\r\n\r\n  // Cells\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.Get_Cells(this)\r\n    }\r\n\r\n    return this.cells;\r\n  }\r\n\r\n  UpdateCells = () => {\r\n    this.Cells.forEach(x => x.UpdateData());\r\n  }\r\n\r\n  get Items() {\r\n    var items = this.Cells.reduce((a, b) => a.concat(b.Items), []);\r\n    items = items.filter((x, i, a) => a.indexOf(x) === i);\r\n    return items;\r\n  }\r\n\r\n  // MassGroupItem\r\n  massGroupItem\r\n  get MassGroupItem() {\r\n    return this.massGroupItem;\r\n  }\r\n  set MassGroupItem(v) {\r\n    this.massGroupItem = v;\r\n    if (v) {\r\n      var title = v.GetItem(this.FullValue).Title;\r\n      this.Title = title;\r\n    }\r\n  }\r\n\r\n  replaceMGI\r\n  get ReplaceMGI() {\r\n    return this.replaceMGI\r\n  } set ReplaceMGI(v) {\r\n    this.replaceMGI = v;\r\n  }\r\n\r\n  original_SubMassGroupItem\r\n  get Original_SubMassGroupItem() {\r\n    if (!this.original_SubMassGroupItem) {\r\n      this.original_SubMassGroupItem = util.GetOriginal_SubMassGroupItem(this);\r\n    }\r\n    return this.original_SubMassGroupItem\r\n  }\r\n  set Original_SubMassGroupItem(v) {\r\n    this.original_SubMassGroupItem = v;\r\n  }\r\n\r\n  replace_SubMassGroupItem\r\n  get Replace_SubMassGroupItem() {\r\n    if (!this.replace_SubMassGroupItem) {\r\n      this.replace_SubMassGroupItem = util.GetReplace_SubMassGroupItem(this);\r\n    }\r\n    return this.replace_SubMassGroupItem\r\n  }\r\n  set Replace_SubMassGroupItem(v) {\r\n    this.replace_SubMassGroupItem = v;\r\n  }\r\n\r\n  get SubMassGroupItem() {\r\n    return this.Replace_SubMassGroupItem ?\r\n      this.Replace_SubMassGroupItem : this.Original_SubMassGroupItem\r\n  } set SubMassGroupItem(v) {\r\n    this.Replace_SubMassGroupItem = v;\r\n  }\r\n\r\n  field\r\n  get Field() {\r\n    if (!this.field) {\r\n      this.field = this.MassGroupItem ? this.MassGroupItem.Field : undefined;\r\n    }\r\n    return this.field;\r\n  } set Field(v) {\r\n    this.field = v;\r\n  }\r\n\r\n  isReplaced\r\n  get IsReplaced() {\r\n    return this.isReplaced;\r\n  } set IsReplaced(v) {\r\n    this.isReplaced = v;\r\n    var obj = this.IsHaveAdditionInformation\r\n      = util.Get_IsHaveAdditionInformation(this);\r\n\r\n    if (obj) {\r\n      this.AdditionInformation = util.Get_AdditionInformation(this);\r\n    }\r\n  }\r\n\r\n  original_SupRow\r\n  get Original_SupRow() {\r\n    if (!this.original_SupRow) {\r\n      this.original_SupRow = util.Get_Original_SupRow(this);\r\n    }\r\n    return this.original_SupRow;\r\n  } set Original_SupRow(v) {\r\n    this.original_SupRow = v;\r\n  }\r\n\r\n  get Original_Full_SupRows() {\r\n    return util.Get_Original_Full_SupRows(this);\r\n  }\r\n\r\n  get OrderMGI() {\r\n    return this.ReplaceMGI ? this.ReplaceMGI : this.MassGroupItem;\r\n  }\r\n\r\n  subFields\r\n  get SubFields() {\r\n    if (!this.subFields) {\r\n      this.subFields = util.GetSubFields(this);\r\n    }\r\n    return this.subFields;\r\n  }\r\n  set SubFields(v) {\r\n    this.subFields = v;\r\n  }\r\n\r\n  TempSubFields\r\n\r\n  isShowSub = true\r\n  get IsShowSub() {\r\n    return this.isShowSub;\r\n  }\r\n  set IsShowSub(v) {\r\n    this.isShowSub = v;\r\n    this.ToggleButtonContentVM.Content = util.GetToggleButtonContent(this);\r\n  }\r\n\r\n  toggleButtonContent\r\n  get ToggleButtonContent() {\r\n    if (!this.toggleButtonContent) {\r\n      this.toggleButtonContent = util.GetToggleButtonContent(this);\r\n    }\r\n    return this.toggleButtonContent;\r\n  }\r\n  set ToggleButtonContent(v) {\r\n    this.toggleButtonContent = v;\r\n  }\r\n\r\n  toggleButtonContentVM\r\n  get ToggleButtonContentVM() {\r\n    if (!this.toggleButtonContentVM) {\r\n      var obj = this.toggleButtonContentVM = textVMUtil.get(this.ToggleButtonContent);\r\n      obj.OnSetContent = (v) => this.ToggleButtonContent = v;\r\n    }\r\n    return this.toggleButtonContentVM;\r\n  }\r\n\r\n  rank = undefined\r\n  get Rank() {\r\n    if (this.rank === undefined) {\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v) {\r\n    this.rank = v;\r\n    this.SubItems.forEach(x => x.Rank = undefined);\r\n  }\r\n\r\n  isHaveSub = undefined\r\n  get IsHaveSub() {\r\n    if (!this.isHaveSub) {\r\n      this.isHaveSub = util.GetIsHaveSub(this);\r\n    }\r\n    return this.isHaveSub;\r\n  }\r\n  set IsHaveSub(v) {\r\n    this.isHaveSub = v;\r\n  }\r\n\r\n  get Style() {\r\n    return util.GetStyle(this);\r\n  }\r\n\r\n  IsToolVisible = false\r\n\r\n  FieldInputType = mr_f_it.select\r\n\r\n  Toggle_FieldInputType = () => {\r\n    switch (this.FieldInputType) {\r\n      case mr_f_it.select:\r\n        this.TempField = this.FieldInputVM.Content;\r\n        this.FieldInputType = mr_f_it.input;\r\n        break;\r\n      case mr_f_it.input:\r\n        this.FieldSelectVM.InitialItem = this.TempField\r\n        this.FieldInputType = mr_f_it.select;\r\n        break;\r\n    }\r\n  }\r\n\r\n  TempField\r\n\r\n  fieldInputVM\r\n  get FieldInputVM() {\r\n    if (!this.fieldInputVM) {\r\n      var obj = this.fieldInputVM = textVMUtil.get();\r\n      obj.onSetContent = (v) => this.TempField = v;\r\n    }\r\n    return this.fieldInputVM;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM() {\r\n    if (!this.fieldSelectVM) {\r\n      this.fieldSelectVM = util.GetFieldSelectVM(this);\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get FieldInputElement() {\r\n    return <>\r\n      <div className='massrow__fieldinput_wrapper'>\r\n        <div className='massrow__fieldinput'>\r\n          {this.FieldInputType === mr_f_it.select ?\r\n            <SelectView store={this.FieldSelectVM} /> :\r\n            <NewInputView store={this.FieldInputVM} />\r\n          }\r\n        </div>\r\n        {this.IsCreatedByUser ?\r\n          <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n            checked={this.FieldInputType === mr_f_it.select}\r\n            onChange={this.Toggle_FieldInputType} />\r\n          : ''}\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  subFieldSelectVM\r\n  get SubFieldSelectVM() {\r\n    if (!this.subFieldSelectVM) {\r\n      this.subFieldSelectVM = util.GetSubFieldSelectVM(this);\r\n    }\r\n    return this.subFieldSelectVM;\r\n  }\r\n\r\n  // Title\r\n  title = undefined\r\n  get Title() {\r\n    // if (!this.title) {\r\n    //   util.Handle_Title(this);\r\n    // }\r\n    return this.title;\r\n  }\r\n  set Title(v) {\r\n    this.title = v;\r\n    this.TitleVM.Content = v;\r\n    this.Editable_TitleVM.Content = v;\r\n  }\r\n\r\n  titleVM\r\n  get TitleVM() {\r\n    if (!this.titleVM) {\r\n      this.titleVM = textVMUtil.get(this.Title, 'tiêu đề');\r\n    }\r\n    return this.titleVM;\r\n  }\r\n\r\n  editable_TitleVM\r\n  get Editable_TitleVM() {\r\n    if (!this.editable_TitleVM) {\r\n      var obj = this.editable_TitleVM =\r\n        editTextUtil.get(this.Title, true, true);\r\n\r\n      obj.Is_Edit_Visible = false\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === trs._default) {\r\n            // Lưu thông tin Title\r\n            var title = this.title = obj.Content;\r\n            this.IsShow_RawValue = util.GetIsShow_RawValue(this);\r\n            this.MassGroupItem.GetItem(this.FullValue).Title = title;\r\n\r\n            this.ToolElement.editable_TitleVM_RenderState = obj.RenderState\r\n          }\r\n        },\r\n        false\r\n      )\r\n    }\r\n    return this.editable_TitleVM;\r\n  }\r\n\r\n  get LocationStorageList() {\r\n    return this.Table.AllRows;\r\n  }\r\n\r\n  locationSelectVM\r\n  get LocationSelectVM() {\r\n    if (!this.locationSelectVM) {\r\n      this.locationSelectVM = util.GetLocationSelectVM(this);\r\n    }\r\n    return this.locationSelectVM;\r\n  }\r\n\r\n  // Value lồng giữa Row hiện tại và SupRow\r\n  // Ví dụ: concrete__Tầng 6__Dầm\r\n  FullValue\r\n\r\n  GetCellByColumn = (col) => {\r\n    var index = this.Cells.findIndex(x => x.Column === col);\r\n    return index !== -1 ? this.Cells[index] : undefined;\r\n  }\r\n\r\n  UpdateData = () => {\r\n    // trước là sup Row nhưng sau khi di chuyển vị trí\r\n    // đã mất các item con bên trong\r\n    // => tiến hành xóa đối tượng\r\n    if (this.Is_Original_SupRow && this.SubItems.length === 0) {\r\n      this.CurrentList.splice(this.Index, 1);\r\n      return;\r\n    }\r\n\r\n    this.Rank = util.GetRank(this);\r\n    this.IsHaveSub = util.GetIsHaveSub(this);\r\n\r\n    this.SubItems = util.Order(this.SubItems);\r\n    this.SubItems.forEach(x => x.UpdateData());\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    this.IsShowSub = !this.IsShowSub;\r\n  }\r\n\r\n  SetSubFields = () => {\r\n    var tempSubFields = this.TempSubFields ? this.TempSubFields : [];\r\n\r\n    var isSame = true;\r\n    if (this.SubFields.length !== tempSubFields.length) {\r\n      isSame = false;\r\n    } else {\r\n      this.SubFields.forEach((x, i) => {\r\n        if (isSame && x !== tempSubFields[i]) {\r\n          isSame = false;\r\n        }\r\n      })\r\n    }\r\n    if (isSame) return;\r\n    this.SubFields = tempSubFields;\r\n\r\n    var filter = new EntFilter();\r\n    filter.ValueType = fvt.bystring;\r\n    filter.StringFilterType = sft.byequal;\r\n    filter.Values = [this.FullValue];\r\n\r\n    var supMgi = this.MassGroupItem;\r\n\r\n    var mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n\r\n    var subMgis = mgc.Items = tempSubFields.map(x => mgiUtil.get(x, null, mgc));\r\n\r\n    var subComps = supMgi.SubComponents;\r\n    if (this.SubMassGroupComponent) {\r\n      var index = subComps.indexOf(this.SubMassGroupComponent);\r\n      subComps[index] = mgc;\r\n    } else {\r\n      subComps.push(mgc);\r\n    }\r\n\r\n    this.SubMassGroupComponent = mgc;\r\n    this.SubItems = [];\r\n    this.Original_SubMassGroupItem = undefined;\r\n\r\n    if (subMgis.length !== 0) {\r\n      var table = this.Table;\r\n      this.Items.forEach(x => {\r\n        // Xử lý Item theo ColumnField: Project ... (single value)\r\n        // hoặc theo Phase (multiple values)\r\n        switch (table.ColumnField) {\r\n          case mif.Phase:\r\n            x.ValidPhasesByInput.forEach(y =>\r\n              table.HandleItem(x, y, mgc, this));\r\n            break;\r\n          default:\r\n            table.HandleItem(x, x.GetValue(table.ColumnField), mgc, this);\r\n            break;\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  MoveUp = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (0 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index - 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index - 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  MoveDown = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (list.length - 1 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index + 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index + 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  AddSub = () => {\r\n    util.Add(this, this.Table);\r\n  }\r\n\r\n  Delete = () => {\r\n    var supItem = this.SupItem;\r\n    var list = this.CurrentList;\r\n\r\n    if (this.IsCreatedByUser) {\r\n      this.MassGroupItem.GetItem(this.FullValue).Delete();\r\n    } else {\r\n      this.MassGroupItem.AddNotIncludeValue(this.FullValue);\r\n    }\r\n\r\n    list.splice(this.Index, 1);\r\n\r\n    if (supItem) {\r\n      if (list.length === 0) {\r\n        var supList = supItem ? this.Table.MainRows : supItem.CurrentList;\r\n        supList.splice(supItem.Index, 1);\r\n      } else {\r\n        supItem.Cells.forEach(x => {\r\n          x.UpdateData();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  replaceFactory\r\n  get ReplaceFactory() {\r\n    if (!this.replaceFactory) {\r\n      this.replaceFactory = new ReplaceRowLocationFactory();\r\n    }\r\n    return this.replaceFactory;\r\n  }\r\n\r\n  ReplaceOK = () => {\r\n    var factory = this.ReplaceFactory;\r\n    var refRow = factory.ReferenceRow;\r\n\r\n    if (!refRow) return;\r\n\r\n    var loc = factory.Location;\r\n    if ((refRow === this && loc === rrlf_lt.lower) ||\r\n      (refRow === this.SupItem && loc === rrlf_lt.inside)) {\r\n      return\r\n    }\r\n\r\n    this.Replace(refRow, loc);\r\n\r\n    factory.Location = rrlf_lt.inside;\r\n  }\r\n\r\n  Replace_SubItems = () => {\r\n    var subItems = this.Temp_SelectSubItems;\r\n    subItems.forEach(x => {\r\n      x.Replace(this, rrlf_lt.inside)\r\n    })\r\n  }\r\n\r\n  Replace = (refRow, loc) => {\r\n    // Init OriginalSupRow && IsReplaced\r\n    this.IsReplaced = true;\r\n    var osr = this.Original_SupRow;\r\n\r\n    // Save data\r\n    var oldMgi = this.MassGroupItem;\r\n    var supRow = undefined;\r\n    var newMgi = undefined;\r\n\r\n    switch (loc) {\r\n      case rrlf_lt.inside:\r\n        supRow = refRow;\r\n        break;\r\n      case rrlf_lt.lower:\r\n        supRow = refRow.SupItem;\r\n        break;\r\n    }\r\n\r\n    // Đối tượng đã nằm trong mục cần đặt\r\n    if (this.SupItem === supRow) return;\r\n\r\n    //var newMgi = supRow ? supRow.SubMassGroupItem : this.Table.MainMGI;\r\n    var newMgi = supRow ?\r\n      (supRow.Replace_SubMassGroupItem ? supRow.Replace_SubMassGroupItem :\r\n        util.CreateSubMassGroupItem(supRow))\r\n      : this.Table.MainMGI;\r\n\r\n    //pmData().IsDebug = true;\r\n    var mgi_i = oldMgi.GetItem(this.FullValue);\r\n    mgi_i.NewMGI = newMgi;\r\n    mgi_i.SupValue = supRow?.Name;\r\n\r\n    this.ReplaceMGI = newMgi;\r\n\r\n    // Remove SupRow cũ trong tập hợp cũ\r\n    var cl = this.CurrentList;\r\n    cl.splice(this.Index, 1);\r\n\r\n    // Cập nhập lại TotalValue của SupItem cũ\r\n    // Nếu list ko chưa Item nào thì remove khỏi giao diện\r\n    var supItem = this.SupItem;\r\n    if (cl.length === 0) {\r\n      var supList = supItem ? this.Table.MainRows : supItem.CurrentList;\r\n      supList.splice(supItem.Index, 1);\r\n    } else {\r\n      if (supItem) {\r\n        supItem.Cells.forEach(x => {\r\n          x.UpdateData();\r\n        });\r\n      }\r\n    }\r\n\r\n    // Thiết lập SupRow\r\n    this.SupItem = supRow;\r\n    var list = this.CurrentList;\r\n    list.push(this);\r\n\r\n    // Cập nhập lại TotalValue của SupItem mới\r\n    if (supRow) {\r\n      supRow.Cells.forEach(x => {\r\n        x.UpdateData();\r\n      });\r\n    }\r\n\r\n    this.IsShowSubFieldSelect = false;\r\n  }\r\n\r\n  IsModalVisible = false\r\n\r\n  OpenModal = () => {\r\n    this.IsModalVisible = true\r\n\r\n    // Set tiêu đề hiện tại\r\n    this.TitleVM.Content = this.Title;\r\n\r\n    // Set giá trị nhóm hiện tại\r\n    this.FieldInputVM.Content = this.Field\r\n    this.FieldSelectVM.InitialItem = this.Field;\r\n    this.TempField = this.Field;\r\n\r\n    // Set giá trị phân nhóm hiện tại\r\n    var subFieldSelectVM = this.SubFieldSelectVM;\r\n    subFieldSelectVM.InitialItems = this.SubFields;\r\n\r\n    // Reset lại giá trị Select SubItems\r\n    this.Temp_SelectSubItems = undefined\r\n    this.SelectSubItemsVM.Items = this.LocationStorageList;\r\n\r\n    var locSelectVM = this.LocationSelectVM;\r\n    locSelectVM.Items = this.LocationStorageList\r\n    locSelectVM.InitialItem = undefined;\r\n  }\r\n\r\n  ModalOK = () => {\r\n    this.IsModalVisible = false;\r\n\r\n    // Thiết lập tiêu đề\r\n    var title = this.TitleVM.Content;\r\n    this.Title = title;\r\n    this.MassGroupItem.GetItem(this.FullValue).Title = title;\r\n\r\n    // Thiết lập nhóm hiện tại\r\n    if (this.Field !== this.TempField) {\r\n      this.Field = this.TempField;\r\n    }\r\n\r\n    // Thiết lập phân nhóm hiện tại\r\n    // chỉ áp dụng cho Row tự sinh\r\n    if (!this.IsCreatedByUser) {\r\n      this.SetSubFields();\r\n    }\r\n\r\n    var subItems = this.Temp_SelectSubItems;\r\n    if (subItems) {\r\n      // Dịch chuyển tập hợp con\r\n      this.Replace_SubItems();\r\n    } else {\r\n      // Dịch chuyển vị trí\r\n      this.ReplaceOK();\r\n    }\r\n  }\r\n\r\n  ModalCancel = () => {\r\n    this.IsModalVisible = false;\r\n  }\r\n\r\n  PMS_WorkPackages = [\r\n    'THI CÔNG CHÍNH (HBC)',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM (PHƯƠNG ...)',\r\n    'Kết thúc thô - Bàn giao'\r\n  ]\r\n\r\n  pms_WorkPackages_SelectVM\r\n  get PMS_WorkPackages_SelectVM() {\r\n    if (!this.pms_WorkPackages_SelectVM) {\r\n      this.pms_WorkPackages_SelectVM = selectUtil.get(this.PMS_WorkPackages);\r\n    }\r\n    return this.pms_WorkPackages_SelectVM;\r\n  }\r\n\r\n  get ModalElement() {\r\n    var factory = this.ReplaceFactory;\r\n    var titleWidth = '180px';\r\n\r\n    return <Modal title={this.Title} visible={this.IsModalVisible}\r\n      width={700}\r\n      onOk={this.ModalOK} onCancel={this.ModalCancel}>\r\n      {/* Tiêu đề */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Tiêu đề:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <InputView store={this.TitleVM} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập nhóm hiện tại */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Nhóm hiện tại:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          {this.FieldInputElement}\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập phân nhóm */}\r\n      {!this.IsCreatedByUser ? <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Thiết lập phân nhóm:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <MultiSelectView store={this.SubFieldSelectVM} />\r\n        </Col>\r\n      </Row> : ''}\r\n\r\n      {/* Đổi vị trí */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth} className='mass__modal__title__wrapper'>\r\n          <b>Đổi vị trí /</b>\r\n          <Button type='primary' size='small'\r\n            className={this.Temp_SelectSubItems ?\r\n              'mass__modal__title__selectsubitems__button' : ''}\r\n            onClick={this.Open_SelectSubItems_Modal}>chọn tập con</Button>\r\n          {this.SelectSubItems_ModalElement}\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <Row>\r\n            <Col flex='auto'>\r\n              <SelectView store={this.LocationSelectVM} />\r\n            </Col>\r\n            <Col>\r\n              <Button type='primary' size='small'\r\n                style={factory.ButtonStyle} onClick={factory.ToggleLocation}\r\n              >{factory.Location}</Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Gói công việc PMS */}\r\n      {/* <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Gói công việc PMS:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <SelectView store={this.PMS_WorkPackages_SelectVM} />\r\n        </Col>\r\n      </Row> */}\r\n    </Modal>\r\n  }\r\n\r\n  get HoverToolElement() {\r\n    var obj = new EntHoverVM();\r\n    obj.Element = <MassRow_ToolElementView store={this.ToolElement} />\r\n    return <EntHoverView className='mass__row__hovertool' store={obj} />\r\n  }\r\n\r\n  toolElement\r\n  get ToolElement() {\r\n    if (!this.toolElement) {\r\n      this.toolElement = util.Get_ToolElement(this);\r\n    }\r\n    return this.toolElement;\r\n  }\r\n\r\n  get AdditionInfomation_Element() {\r\n    return <>\r\n      {this.IsHaveAdditionInformation ?\r\n        <Popover trigger='hover'\r\n          content={\r\n            <span className='info'>\r\n              {this.AdditionInformation}\r\n            </span>\r\n          } >\r\n          <InfoCircleOutlined className='info' />\r\n        </Popover>\r\n        : ''}\r\n    </>\r\n  }\r\n\r\n  // Excel Export\r\n  get ExportInfo() {\r\n    var key = this.Field;\r\n    var info = {\r\n      Key: key,\r\n      Value: this.Title\r\n    }\r\n\r\n    var list\r\n    if (!this.SupItem) {\r\n      list = [info]\r\n    } else {\r\n      list = [...this.SupItem.ExportInfo]\r\n      list.push(info);\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportValue() {\r\n    var list = []\r\n    this.Cells.forEach(x => {\r\n      list.push({\r\n        Key: x.Column.Name,\r\n        Value: x.TotalValue\r\n      })\r\n    })\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportData() {\r\n    return {\r\n      Infos: this.ExportInfo,\r\n      Values: this.ExportValue\r\n    }\r\n  }\r\n\r\n  on_HandleTotal_Cells_Done_Dict_Funcs\r\n  get On_HandleTotal_Cells_Done_Dict_Funcs() {\r\n    if (!this.on_HandleTotal_Cells_Done_Dict_Funcs) {\r\n      this.on_HandleTotal_Cells_Done_Dict_Funcs =\r\n        util.GetOn_HandleTotal_Cells_Done_Dict_Funcs(this);\r\n    }\r\n    return this.on_HandleTotal_Cells_Done_Dict_Funcs;\r\n  }\r\n\r\n  set Is_HandleTotal_Cells_Done(v) {\r\n    this.On_HandleTotal_Cells_Done_Dict_Funcs\r\n      .forEach(x => x.Value())\r\n  }\r\n\r\n  HandleTotal_Cells\r\n\r\n  AddHandleTotal_Cell = (cell) => {\r\n    if (!this.HandleTotal_Cells) {\r\n      this.HandleTotal_Cells = []\r\n    };\r\n\r\n    var list = this.HandleTotal_Cells\r\n\r\n    list.push(cell);\r\n    if (list.length === this.Cells.length) {\r\n      this.HandleTotal_Cells = undefined\r\n      this.Is_HandleTotal_Cells_Done = true;\r\n\r\n      // nếu IsCreatedByUser \r\n      // => thêm thông tin vào danh sách Handled_CreatedByUser_Rows \r\n      // đối tượng Table\r\n      if (this.IsCreatedByUser) {\r\n        this.Table.Add_Handled_CreatedByUser_Row(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  IsHaveAdditionInformation = false\r\n\r\n  get IsHave_Addition_Wrapper() {\r\n    return this.IsHaveAdditionInformation || this.IsShow_RawValue\r\n  }\r\n\r\n  AdditionInformation = undefined\r\n\r\n  // Tùy chọn SelectSubItems\r\n  Is_SelectSubItems_ModalOpen = false\r\n\r\n  get SelectSubItems_ModalElement() {\r\n    return <Modal\r\n      title='Chọn tập hợp đầu mục con'\r\n      visible={this.Is_SelectSubItems_ModalOpen}\r\n      onOk={this.SelectSubItems_ModalOK}\r\n      onCancel={this.SelectSubItems_ModalCancel}>\r\n      <div className='mass__subitemmodal__wrapper'>\r\n        <TwoCol_SelectView store={this.SelectSubItemsVM} />\r\n      </div>\r\n    </Modal>\r\n  }\r\n\r\n  Open_SelectSubItems_Modal = () => {\r\n    this.Is_SelectSubItems_ModalOpen = true;\r\n  }\r\n\r\n  SelectSubItems_ModalCancel = () => {\r\n    this.Is_SelectSubItems_ModalOpen = false;\r\n  }\r\n\r\n  SelectSubItems_ModalOK = () => {\r\n    this.Is_SelectSubItems_ModalOpen = false;\r\n  }\r\n\r\n  selectSubItemsVM\r\n  get SelectSubItemsVM() {\r\n    if (!this.selectSubItemsVM) {\r\n      var obj = this.selectSubItemsVM = tc_selectUtil.get(\r\n        [],\r\n        (item) => {\r\n          var marginLeft = item.Rank * 15;\r\n          return <div\r\n            style={{ marginLeft }}>\r\n            {item.Title}\r\n          </div>\r\n        },\r\n        'Tập hợp vị trí',\r\n        'Vị trí được chọn'\r\n      )\r\n      obj.OnSelectedItemChanged = (v) => this.Temp_SelectSubItems = v;\r\n    }\r\n    return this.selectSubItemsVM;\r\n  }\r\n\r\n  Temp_SelectSubItems = undefined\r\n\r\n  isShow_RawValue = undefined\r\n  get IsShow_RawValue() {\r\n    if (!this.isShow_RawValue) {\r\n      this.isShow_RawValue = util.GetIsShow_RawValue(this);\r\n    }\r\n    return this.isShow_RawValue;\r\n  } set IsShow_RawValue(v) {\r\n    this.isShow_RawValue = v;\r\n  }\r\n\r\n  get RawValue_Element() {\r\n    return <>\r\n      {this.IsShow_RawValue ?\r\n        <Popover trigger='hover'\r\n          content={\r\n            <span className='success'>\r\n              {this.RawValue}\r\n            </span>\r\n          }\r\n        >\r\n          <InfoCircleOutlined className='success' />\r\n        </Popover>\r\n        : ''}\r\n    </>\r\n  }\r\n\r\n  IsCreatedByUser\r\n}","import { EditableTextVM } from \"./EditableTextVM\"\r\n\r\nexport const get = (content, canEdit = true, isToolVisible) => {\r\n  var qI = new EditableTextVM();\r\n  \r\n  qI.Content = content;\r\n  qI.CanChange_RenderState = canEdit;\r\n\r\n  if (isToolVisible === undefined){\r\n    isToolVisible = canEdit;\r\n  }\r\n\r\n  qI.Is_Tool_Visible = isToolVisible;\r\n\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\n\r\nclass TextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = {\r\n        content: `Nội dung`\r\n      }\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var { content } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {content}\r\n        {this.getWrapperContent()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TextView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as mif from '../item/MassItemField'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as util from './MassCellUtil'\r\nimport TextView from '../../../../text/TextView';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueColor: observable,\r\n      tdBgColor: observable,\r\n      isHaveWarning: observable,\r\n      tls_LevelGroup_Descriptions: observable,\r\n      vcs_Item: observable,\r\n      // valueString : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Column.Index;\r\n  }\r\n\r\n  items = []\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  unit\r\n  get Unit() {\r\n    if (!this.unit) {\r\n      this.unit = util.Get_Unit(this);\r\n    }\r\n    return this.unit;\r\n  }\r\n  set Unit(v) {\r\n    this.unit = v;\r\n  }\r\n\r\n  unitVM\r\n  get UnitVM() {\r\n    if (!this.unitVM) {\r\n      this.unitVM = textVMUtil.get(this.Unit);\r\n      this.unitVM.OnSetContent = (v) => this.Unit = v;\r\n    }\r\n    return this.unitVM;\r\n  }\r\n\r\n  // TotalValue\r\n  get CanHave_TotalValue(){\r\n    return this.Unit !== undefined;\r\n  }\r\n\r\n  OnGet_TotalValue_Func_Dict = []\r\n  set Get_TotalValue(v) {\r\n    this.OnGet_TotalValue_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  totalValue = undefined\r\n  get TotalValue() {\r\n    // Chỉnh sửa Value thành FullValue (chứa khối lượng tầng điển hình)\r\n    //this.TotalValue = this.GetTotalValue();\r\n    if (this.totalValue === undefined) {\r\n      util.Handle_TotalValue(this);\r\n    }\r\n    return this.totalValue;\r\n  }\r\n  set TotalValue(v) {\r\n    this.totalValue = v;\r\n    \r\n    // cập nhập vào list handle trong row\r\n    this.Row.AddHandleTotal_Cell(this);\r\n\r\n    this.Get_TotalValue = true;\r\n    // Thiết lập phần màu sắc đối với Phase\r\n    if (this.IsHaveVCS_Item) {\r\n      util.Handle_VCS_Item(this);\r\n    }\r\n\r\n    // Thiết lập giá trị Cell\r\n    this.ContentVM.Content = this.ValueString;\r\n  }\r\n\r\n  contentVM\r\n  get ContentVM() {\r\n    if (!this.contentVM) {\r\n      this.contentVM = textVMUtil.get(this.ValueString);\r\n    }\r\n    return this.contentVM;\r\n  }\r\n\r\n  // ValueString\r\n  valueObject\r\n  get ValueObject(){\r\n    if (!this.valueObject){\r\n      this.valueObject = util.Get_ValueObject(this);\r\n    }\r\n    return this.valueObject;\r\n  }\r\n\r\n  get ValueString() {\r\n    return util.Get_ValueString(this);\r\n  }\r\n\r\n  subCells\r\n  get SubCells() {\r\n    if (!this.subCells) {\r\n      this.subCells = util.Get_SubCells(this);\r\n    }\r\n    return this.subCells;\r\n  }\r\n  set SubCells(v) {\r\n    this.subCells = v;\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = util.GetMassType(this);\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(`${this.Column.Name} - ${this.Row.Name} - ${this.TotalValue}`)\r\n  }\r\n\r\n  UpdateData = () => {\r\n    this.SubCells = util.Get_SubCells(this);\r\n\r\n    this.Unit = util.ReGet_Unit(this);\r\n    util.ReHandle_TotalValue(this);\r\n    this.MassType = util.GetMassType(this);\r\n    this.IsHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n  }\r\n\r\n  ShowDetail = () => {\r\n    var isHash = true;\r\n    var url = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/massdetail`;\r\n    var getUrl = (v) => `${url}/${v}`;\r\n    var openTabFunc = (v) =>\r\n      window.open(getUrl(v), \"_blank\");\r\n\r\n    if (!this.viewDetailId) {\r\n      this.GetViewDetailId(data => {\r\n        var _id = this.viewDetailId = data._id;\r\n        openTabFunc(_id);\r\n      })\r\n    } else {\r\n      openTabFunc(this.viewDetailId);\r\n    }\r\n  }\r\n\r\n  viewDetailId\r\n\r\n  get AllItems() {\r\n    if (this.SubCells) {\r\n      return this.SubCells.map(x => x.Items).reduce((a, b) => a.concat(b), []);\r\n    }\r\n    return this.Items;\r\n  }\r\n\r\n  isHaveVCS_Item\r\n  get IsHaveVCS_Item() {\r\n    if (!this.isHaveVCS_Item) {\r\n      this.isHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n    }\r\n    return this.isHaveVCS_Item;\r\n  }\r\n  set IsHaveVCS_Item(v) {\r\n    this.isHaveVCS_Item = v;\r\n  }\r\n\r\n  vcs_Item = undefined\r\n  get VCS_Item() {\r\n    return this.vcs_Item;\r\n  }\r\n  set VCS_Item(v) {\r\n    this.vcs_Item = v;\r\n\r\n    this.ValueColor = util.GetValueColor(this);\r\n    this.TDBgColor = util.GetTDBgColor(this)\r\n  }\r\n\r\n  valueColor = '#1890ff'\r\n  get ValueColor() {\r\n    return this.valueColor;\r\n  }\r\n  set ValueColor(v) {\r\n    this.valueColor = v\r\n  }\r\n\r\n  tdBgColor = undefined\r\n  get TDBgColor() {\r\n    return this.tdBgColor;\r\n  }\r\n  set TDBgColor(v) {\r\n    this.tdBgColor = v;\r\n  }\r\n\r\n  get AStyle() {\r\n    return {\r\n      color: this.ValueColor,\r\n      fontWeight: 'bold'\r\n    }\r\n  }\r\n\r\n  get TDStyle() {\r\n    return {\r\n      backgroundColor: this.TDBgColor\r\n    }\r\n  }\r\n\r\n  ApiData = () => {\r\n    var massIds = this.AllItems.map(x => x._id);\r\n    return {\r\n      massType: this.MassType,\r\n      massIds\r\n    };\r\n  }\r\n\r\n  GetViewDetailId = (handle) => {\r\n    var apiData = this.ApiData();\r\n    var url = \"https://api.bimdev.vn/api/hbdv/updatemass\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => handle(data))\r\n  }\r\n\r\n  OnGet_TLS_LevelGroups_Func_Dict = []\r\n  set Get_TLS_LevelGroups(v) {\r\n    this.OnGet_TLS_LevelGroups_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  tls_LevelGroups\r\n  get TLS_LevelGroups() {\r\n    if (!this.tls_LevelGroups) {\r\n      util.Handle_TLS_LevelGroups(this);\r\n    }\r\n    return this.tls_LevelGroups;\r\n  } set TLS_LevelGroups(v) {\r\n    this.tls_LevelGroups = v;\r\n    this.Get_TLS_LevelGroups = true;\r\n  }\r\n\r\n  isHaveWarning = undefined\r\n  get IsHaveWarning() {\r\n    if (this.isHaveWarning === undefined) {\r\n      this.isHaveWarning = util.GetIsHaveWarning(this);\r\n    }\r\n    return this.isHaveWarning;\r\n  } set IsHaveWarning(v) {\r\n    this.isHaveWarning = v;\r\n  }\r\n\r\n  tls_LevelGroup_Descriptions = undefined\r\n  get TLS_LevelGroup_Descriptions() {\r\n    if (!this.tls_LevelGroup_Descriptions) {\r\n      util.Handle_TLS_LevelGroup_Descriptions(this);\r\n    }\r\n    return this.tls_LevelGroup_Descriptions;\r\n  } set TLS_LevelGroup_Descriptions(v) {\r\n    this.tls_LevelGroup_Descriptions = v;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class MassCell_Value {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Value: observable\r\n    })\r\n  }\r\n\r\n  Value = undefined\r\n}","import Column from \"antd/lib/table/Column\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassCell from \"./MassCell\"\r\nimport * as mif from '../item/MassItemField'\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport MassCell_Value from \"./value/MassCell_Value\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (col, row, dict) => {\r\n  var qI = new MassCell();\r\n  qI.Column = col;\r\n  qI.Row = row;\r\n  qI.Dict = dict;\r\n\r\n  col.Cells.push(qI);\r\n  row.Cells.push(qI);\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetIsHaveVCS_Item = (q) => {\r\n  return q.Dict.ColumnField === mif.Phase\r\n    && pmData().MassResultComp.Phases.length === 2\r\n    && q.ColumnIndex === 1;\r\n}\r\n\r\nexport const GetValueColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return '#FFFFFF';\r\n  } else {\r\n    return '#1890ff';\r\n  }\r\n}\r\n\r\nexport const GetTDBgColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return q.VCS_Item.Color;\r\n  } else {\r\n    return '#FFFFFF';\r\n  }\r\n}\r\n\r\n// Liên quan tới việc lấy TotalValue\r\nexport const Handle_VCS_Item = (q) => {\r\n  var list = pmData().VersionCompareSetting.Items;\r\n\r\n  var cells = q.Row.Cells;\r\n  var compareIndex = cells.findIndex(x => x.ColumnIndex === 0);\r\n  if (compareIndex === -1) {\r\n    q.VCS_Item = undefined;\r\n    return\r\n  }\r\n  var compareItem = cells[compareIndex];\r\n\r\n  const getItem = () => {\r\n    var ratio = q.TotalValue / compareItem.TotalValue;\r\n    var index = list\r\n      .findIndex(x => filterUtil.IsValid(x.Filter, ratio));\r\n    return index !== -1 ? list[index] : undefined;\r\n  }\r\n\r\n  if (compareItem.TotalValue !== undefined) {\r\n    q.VCS_Item = getItem();\r\n  } else {\r\n    genUtil.Add(compareItem.OnGet_TotalValue_Func_Dict, () =>\r\n      q.VCS_Item = getItem())\r\n  }\r\n}\r\n\r\nexport const GetMassType = (q) => {\r\n  var massType = undefined\r\n  if (q.SubCells) {\r\n    var isPending = true;\r\n    q.SubCells.forEach(x => {\r\n      if (isPending && x.MassType) {\r\n        massType = x.MassType;\r\n        isPending = false;\r\n      }\r\n    })\r\n  } else {\r\n    if (q.Items && q.Items.length > 0) {\r\n      massType = q.Items[0].MassType;\r\n    }\r\n  }\r\n  return massType;\r\n}\r\n\r\nexport const Handle_TLS_LevelGroups = (q) => {\r\n  if (q.IsGet_TLS_LevelGroups) return undefined;\r\n  q.IsGet_TLS_LevelGroups = true;\r\n\r\n  var list = [];\r\n  var handledCount = 0;\r\n  var count = q.SubCells ?\r\n    q.SubCells.length : q.Items.length;\r\n\r\n  const checkadd_Val = (val, list) => {\r\n    if (list.findIndex(x => x.id === val.id) === -1) {\r\n      list.push(val);\r\n    }\r\n  }\r\n\r\n  const handle_Val = (val) => {\r\n    handledCount++;\r\n    if (val) {\r\n      if (Array.isArray(val)) {\r\n        val.forEach(x => checkadd_Val(x, list));\r\n      } else {\r\n        checkadd_Val(val, list)\r\n      }\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroups = list;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        genUtil.Add(x.OnGet_TLS_LevelGroups_Func_Dict,\r\n          () => handle_Val(x.TLS_LevelGroup));\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.TLS_LevelGroup || targetObj.Get_TLS_LevelGroup) {\r\n        handle_Val(targetObj.TLS_LevelGroup);\r\n      } else {\r\n        genUtil.Add(targetObj.OnGet_TLS_LevelGroup_Func_Dict,\r\n          () => handle_Val(targetObj.TLS_LevelGroup));\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// TotalValue\r\nexport const ReGet_Unit = (q) => {\r\n  q.IsGet_Unit = false;\r\n  return Get_Unit(q);\r\n}\r\n\r\nexport const Get_Unit = (q) => {\r\n  if (q.IsGet_Unit) return undefined;\r\n  q.IsGet_Unit = true;\r\n\r\n  var unit\r\n  var isValid = true;\r\n  var list = q.SubCells ? q.SubCells : q.Items;\r\n  list.forEach((x, i, a) => {\r\n    if (isValid) {\r\n      if (i == 0) {\r\n        unit = x.Unit\r\n      }\r\n      else {\r\n        if (unit !== x.Unit) {\r\n          isValid = false;\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  if (!isValid) {\r\n    unit = undefined\r\n  }\r\n\r\n  return unit;\r\n}\r\n\r\nexport const ReHandle_TotalValue = (q) => {\r\n  q.IsGet_TotalValue = false;\r\n  Handle_TotalValue(q);\r\n}\r\n\r\nexport const Handle_TotalValue = (q) => {\r\n  if (q.IsGet_TotalValue) return undefined;\r\n  q.IsGet_TotalValue = true;\r\n\r\n  // Bỏ qua TotalValue nếu CanHave = false\r\n  if (!q.CanHave_TotalValue) return;\r\n\r\n  var checkedList = [];\r\n  var totalVal = 0;\r\n  var handledCount = 0;\r\n  var handleItems = [];\r\n  var list = q.SubCells ? q.SubCells : q.Items\r\n  var count = list.length\r\n\r\n  const handle_Val = (val, item) => {\r\n    var index = handleItems.indexOf(item);\r\n    // Bị trùng đối tượng khi tính toán khối lượng\r\n    if (index !== -1) return;\r\n    handleItems.push(item);\r\n\r\n    handledCount++;\r\n\r\n    if (!Number.isNaN(val)) {\r\n      totalVal += val;\r\n    }\r\n    checkedList.push(val);\r\n\r\n    if (handledCount === count) {\r\n      q.TotalValue = totalVal;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TotalValue) {\r\n        handle_Val(x.TotalValue, x)\r\n      } else {\r\n        genUtil.Add(x.OnGet_TotalValue_Func_Dict,\r\n          () => {\r\n            handle_Val(x.TotalValue, x)\r\n          });\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.FullValue !== undefined) {\r\n        handle_Val(targetObj.FullValue, x)\r\n      } else {\r\n        genUtil.Add(targetObj.OnGet_FullValue_Func_Dict,\r\n          () => {\r\n            handle_Val(targetObj.FullValue, x)\r\n          });\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetIsHaveWarning = (q) => {\r\n  if (q.Row.Field !== mif.level) {\r\n    return false\r\n  } else {\r\n    const getWarningFunc = (levelGroups) => {\r\n      return levelGroups.length !== 0;\r\n    }\r\n\r\n    if (q.TLS_LevelGroups) {\r\n      return getWarningFunc(q.TLS_LevelGroups);\r\n    } else {\r\n      genUtil.Add(q.OnGet_TLS_LevelGroups_Func_Dict,\r\n        () => {\r\n          q.IsHaveWarning = getWarningFunc(q.TLS_LevelGroups)\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup_Descriptions = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup_Descriptions) return undefined;\r\n  q.IsGet_TLS_LevelGroup_Descriptions = true;\r\n\r\n  const handle_Val = (val, list, handledCount, count) => {\r\n    handledCount++;\r\n    if (list.indexOf(val) === -1) {\r\n      list.push(val);\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroup_Descriptions = list;\r\n    }\r\n  }\r\n\r\n  const getDescFunc = (levelGroups) => {\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = levelGroups.length\r\n\r\n    levelGroups.forEach(x => {\r\n      if (x.FullDescription) {\r\n        handle_Val(x.FullDescription, list, handledCount, count);\r\n      } else {\r\n        // Để false, xử lý nhiều Funcs hơn, nhưng thực thi thành công :v\r\n        genUtil.Add(x.OnGetLevelStorageList_Func_Dict, () => {\r\n          handle_Val(x.FullDescription, list, handledCount, count)\r\n        }, false)\r\n      }\r\n    })\r\n  }\r\n\r\n  if (q.TLS_LevelGroups) {\r\n    getDescFunc(q.TLS_LevelGroups)\r\n  } else {\r\n    q.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n      getDescFunc(q.TLS_LevelGroups)\r\n    })\r\n  }\r\n}\r\n\r\n// SubCells\r\nexport const Get_SubCells = (q) => {\r\n  var subRows = q.Row.SubItems;\r\n  if (subRows && subRows.length !== 0) {\r\n    var col = q.Column;\r\n    var list = subRows.map((x, i, a) => {\r\n      var obj = x.GetCellByColumn(col)\r\n      return obj;\r\n    }).filter(x => x !== undefined);\r\n\r\n    return list;\r\n  }\r\n}\r\n\r\n// ValueString\r\nexport const Get_ValueObject = (q) => {\r\n  var qI = new MassCell_Value();\r\n\r\n  qI.Dict = q;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Get_ValueString = (q) => {\r\n  if (!q.CanHave_TotalValue) return '';\r\n\r\n  var totalValue = q.TotalValue;\r\n  if (!totalValue) return '';\r\n\r\n  var roundingFactor = 2;\r\n  var unit = q.Unit;\r\n  switch (unit) {\r\n    case 'each':\r\n      unit = 'cái';\r\n      roundingFactor = 0;\r\n      break;\r\n    default:\r\n      roundingFactor = 2;\r\n      break;\r\n  }\r\n\r\n  var formatValue = totalValue.toLocaleString('en-US', { maximumFractionDigits: roundingFactor });\r\n  return `${formatValue} ${unit}`;\r\n}","import { PMData } from \"../../../single/model/PMData\";\r\nimport MassRow from \"./MassRow\";\r\nimport * as multiSelectUtil from '../../../../select/MultiSelectVMUtil';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport * as mgi_iUtil from './rowgroup/MGI_ItemUtil'\r\nimport * as mgii_ct from './rowgroup/MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../util/generalUtil';\r\nimport { EntFilter } from \"../../filter/EntFilter\";\r\nimport MassGroupComponent from \"./rowgroup/MassGroupComponent\";\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mif from '../item/MassItemField'\r\nimport MassRow_ToolElement from \"./tool/MassRow_ToolElement\";\r\nimport * as trs from '../../../../text/TextRenderState';\r\nimport * as cellUtil from './MassCellUtil'\r\nimport MassCell from \"./MassCell\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassRow();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  return q.SupItem ? q.SupItem.Rank + 1 : 0;\r\n}\r\n\r\nexport const GetStyle = (q) => {\r\n  return {\r\n    marginLeft: q.Rank * 20\r\n  }\r\n}\r\n\r\nexport const GetIsHaveSub = (q) => {\r\n  return q.SubItems.length !== 0;\r\n}\r\n\r\nexport const GetToggleButtonContent = (q) => {\r\n  return q.IsShowSub ? '-' : '+';\r\n}\r\n\r\nexport const GetFieldSelectVM = (q) => {\r\n  var storageList = pmData().MIFs_ForMassGroup;\r\n  var obj = selectUtil.get(storageList, q.Field);\r\n  obj.Placeholder = 'chọn nhóm'\r\n\r\n  obj.IsDisabled = !q.IsCreatedByUser\r\n\r\n  obj.OnSelectedItemChanged = (v) => q.TempField = v;\r\n  return obj;\r\n}\r\n\r\nexport const GetSubFieldSelectVM = (q) => {\r\n  var storageList = pmData().MIFs_ForMassGroup;\r\n  var obj = multiSelectUtil.get(storageList, undefined);\r\n  obj.Placeholder = 'chọn phân nhóm'\r\n  obj.OnSelectedItemChanged = (v) => q.TempSubFields = v;\r\n  return obj;\r\n}\r\n\r\nexport const Order = (list) => {\r\n  if (list.length === 0) return list;\r\n\r\n  var firstRow = list[0]\r\n  var mgi = firstRow.OrderMGI;\r\n  if (!mgi.IsHaveValueOrder) return list;\r\n\r\n  var orderValues = mgi.OrderValues;\r\n  return list.sort((a, b) => {\r\n    return orderValues.indexOf(a.FullValue) - orderValues.indexOf(b.FullValue);\r\n  });\r\n}\r\n\r\nexport const Handle_Title = (q) => {\r\n  var field = q.MassGroupItem.Field;\r\n  if (field !== mif.level) {\r\n    q.Title = q.Name;\r\n  } else {\r\n    // Xử lý phần tiêu đề của Row dựa trên Name và thông tin Tầng điển hình\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = q.Cells.length;\r\n\r\n    const handle_LS = (ls) => {\r\n      if (ls.Description) {\r\n        q.Title = ls.Description;\r\n      } else {\r\n        ls.OnGetLevelStorageList_Funcs.push(() => {\r\n          q.Title = ls.Description;\r\n        })\r\n      }\r\n    }\r\n\r\n    const handle_Val = (val) => {\r\n      handledCount++;\r\n      list.push.apply(list, val);\r\n      if (handledCount === count) {\r\n        if (list.length === 1) {\r\n          handle_LS(list[0]);\r\n        } else {\r\n          q.Title = q.Name;\r\n        }\r\n      }\r\n    }\r\n\r\n    q.Cells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        x.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n          handle_Val(x.TLS_LevelGroups);\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetLocationSelectVM = (q) => {\r\n  var obj = selectUtil.get([], undefined);\r\n  obj.Placeholder = 'chọn vị trí'\r\n  obj.TitleRender = (item) => {\r\n    var marginLeft = item.Rank * 15;\r\n    return <div\r\n      style={{ marginLeft }}>\r\n      {item.Title}\r\n    </div>\r\n  }\r\n  obj.OnSelectedItemChanged = (v) => {\r\n    var factory = q.ReplaceFactory;\r\n    factory.ReferenceRow = v;\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport const GetOriginal_SubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].MassGroupItem;\r\n}\r\n\r\nexport const GetReplace_SubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].ReplaceMGI;\r\n}\r\n\r\nexport const GetSubFields = (q) => {\r\n  var subMGI = q.SubMassGroupItem;\r\n  if (!subMGI) return [];\r\n  var mgis = subMGI.SupComponent.Items;\r\n\r\n  var lastValidIndex = -1;\r\n  var isValidHandle = true\r\n  mgis.forEach((x, i) => {\r\n    if (isValidHandle && x.HaveMassItemSubComponents.length === 0) {\r\n      lastValidIndex = i;\r\n    } else {\r\n      isValidHandle = false;\r\n    }\r\n  })\r\n\r\n  var currentIndex = mgis.indexOf(q.MassGroupItem);\r\n  if (lastValidIndex === -1) return [subMGI.Field];\r\n  var fields = mgis.filter((x, i) =>\r\n    (currentIndex === -1 || currentIndex < i) &&\r\n    i <= lastValidIndex)\r\n    .map(x => x.Field);\r\n  return fields;\r\n}\r\n\r\n// MassGroupItem phụ để đặt đầu mục được tạo mới\r\nexport const CreateSubMassGroupItem = (q) => {\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bystring;\r\n  filter.StringFilterType = sft.byequal;\r\n  filter.Values = [q.FullValue];\r\n\r\n  var supMgi = q.MassGroupItem;\r\n\r\n  var mgc = undefined;\r\n  var mgcIndex = supMgi.SubComponents\r\n    .findIndex(x => genUtil.IsSameValues(x.Filter.Values, filter.Values));\r\n\r\n  if (mgcIndex !== -1) {\r\n    mgc = supMgi.SubComponents[mgcIndex]\r\n  } else {\r\n    mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n    supMgi.SubComponents.push(mgc);\r\n  }\r\n\r\n  var mgi = mgiUtil.get(null, null, mgc);\r\n  mgc.Items = [mgi];\r\n\r\n  q.SubMassGroupItem = mgi;\r\n  return mgi;\r\n}\r\n\r\nexport const Add = (supRow, table) => {\r\n  var mgi = supRow ?\r\n    (supRow.SubMassGroupItem ? supRow.SubMassGroupItem :\r\n      CreateSubMassGroupItem(supRow))\r\n    : table.MainMGI;\r\n\r\n  var mgi_I = mgi_iUtil.create(mgi, mgii_ct.byuser);\r\n\r\n  // Thêm trường SupValue để xác định SupRow \r\n  // trong trường hợp SupRow.CurrentList.length !== 0\r\n  mgi_I.SupValue = supRow?.Name;\r\n\r\n  mgi.Items.push(mgi_I);\r\n\r\n  var row = get(mgi_I.Value, table);\r\n  row.FullValue = mgi_I.Value;\r\n  row.IsCreatedByUser = true;\r\n\r\n  // Lấy thông tin Cell vì hiện tại đang bị lỗi khi render\r\n  var obj = row.Cells\r\n\r\n  row.MassGroupItem = mgi;\r\n\r\n  row.SupItem = supRow;\r\n  row.CurrentList.push(row);\r\n\r\n  row.Editable_TitleVM.RenderState = trs.edit;\r\n\r\n  return row;\r\n}\r\n\r\nexport const GetOn_HandleTotal_Cells_Done_Dict_Funcs = (q) => {\r\n  var obj = [];\r\n  return obj;\r\n}\r\n\r\nexport const Get_Original_SupRow = (q) => {\r\n  if (q.IsGet_Original_SupRow) return undefined;\r\n  q.IsGet_Original_SupRow = true;\r\n\r\n  return q.SupItem;\r\n}\r\n\r\nexport const Get_Original_Full_SupRows = (q) => {\r\n  var list = [];\r\n  var supItem = q.Original_SupRow;\r\n\r\n  while (supItem) {\r\n    list.push(supItem);\r\n    supItem = supItem.Original_SupRow;\r\n  }\r\n\r\n  list.reverse();\r\n  return list;\r\n}\r\n\r\n// Aditional Infomation\r\nexport const Get_IsHaveAdditionInformation = (q) => {\r\n  return q.IsReplaced ? true : false\r\n}\r\n\r\nexport const Get_AdditionInformation = (q) => {\r\n  var obj = q.Original_Full_SupRows.reduce((a, x, i) => {\r\n    if (i != 0) {\r\n      a += ' > '\r\n    }\r\n    a += x.Title;\r\n    return a;\r\n  }, '')\r\n\r\n  return obj;\r\n}\r\n\r\nexport const Get_ToolElement = (q) => {\r\n  var qI = new MassRow_ToolElement();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n// Cells\r\nexport const Get_Cells = (q) => {\r\n  if (!q.IsCreatedByUser) return [];\r\n\r\n  var table = q.Table;\r\n\r\n  var list = table.Columns.map(x => {\r\n    var qI = new MassCell();\r\n    qI.Column = x;\r\n    qI.Row = q;\r\n    qI.Dict = table;\r\n\r\n    table.Cells.push(qI);\r\n\r\n    return qI;\r\n  });\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetIsShow_RawValue = (q) => {\r\n  return !q.IsCreatedByUser && q.RawValue !== q.Title;\r\n}","import * as mif from '../item/MassItemField'\r\nimport { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mt from '../MassType'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent'\r\nimport MassGroupItem from './rowgroup/MassGroupItem'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\n\r\nexport const GetMainMGC = (q) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  var mgi1 = mgiUtil.get(mif.MassType);\r\n  qI.Items = [mgi1];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMassGroupName = (q) => {\r\n  return q.MassGroupSetting ? q.MassGroupSetting.Name\r\n    : '';\r\n}\r\n\r\nexport const GetAllRows = (q) => {\r\n  var list = [];\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.AllItems)\r\n  });\r\n  return list;\r\n}\r\n\r\nexport const GetMainMGI = (q) => {\r\n  var qI = q.MainMGC?.Items[0];\r\n  qI.Table = q;\r\n  qI.SupRow = undefined;\r\n  return qI;\r\n}","export const elementfilter = \"elementfilter\";\r\nexport const massexport = \"massexport\";\r\nexport const massgroup = \"massgroup\";\r\nexport const typicallevel = \"typicallevel\";","import { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport default class Setting{\r\n  name\r\n  get Name(){\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    if (this.OnNameChanged){\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged){\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  SettingType\r\n\r\n  data\r\n  get Data(){\r\n    return this.data;\r\n  }\r\n  set Data(v){\r\n    this.data = v;\r\n    if (this.OnDataChanged){\r\n      this.OnDataChanged(v);\r\n    }\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    var {_id} = this;\r\n    var apiData = {_id};\r\n\r\n    var  url = \"https://api.bimdev.vn/api/hbs/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete setting successfully'))\r\n\r\n    this.Dict.Items.splice(this.Index, 1);\r\n\r\n    if (this.OnDelete){\r\n      this.OnDelete();\r\n    }\r\n\r\n    this.Dict.Input.EditItemId = undefined;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id : this._id,\r\n      projectId : this.Project._id,\r\n      settingType : this.SettingType,\r\n      name : this.Name,\r\n      description : this.Description,\r\n      data : this.Data.ApiData\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassGroupSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassGroupSettingData {\r\n  fields\r\n  get Fields(){\r\n    if (!this.fields){\r\n      this.fields = util.GetDefaultFields(this);\r\n    }\r\n    return this.fields;\r\n  }\r\n  set Fields(v){\r\n    this.fields = v;\r\n  }\r\n\r\n  AddNewField = () => {\r\n    var item = pmData().MassPropertyNames[0];\r\n    this.Fields.push(item);\r\n    return item;\r\n  }\r\n}","export const Discipline = \"Discipline\";\r\nexport const Category = \"Category\";\r\n\r\nexport const GetAll = () => {\r\n  return [ Discipline, Category ];\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassGroupSettingData from './MassGroupSettingData';\r\nimport * as mpn from '../../../entity/mass/MassPropertyName'\r\nimport * as massGroupCompUtil from '../../mass/table/rowgroup/MassGroupComponentUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingData();\r\n  qI.MassGroupComponent = massGroupCompUtil.get(q.massGroupComponent);\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassGroupSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultFields = () => {\r\n  return [ mpn.Category ]\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassGroupSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassGroupSettingDataUtil'\r\nimport MassGroupSetting from './MassGroupSetting';\r\nimport { PMData } from '../../../single/model/PMData';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/mg/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as util from './WorkpackageVMUtil'\r\n\r\nexport class WorkpackageVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fullName : observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.Workpackage._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.WorkpackageVMs.indexOf(this);\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.Workpackage.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage.M2VM = v;\r\n  }\r\n\r\n  Workpackage\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.Workpackage.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Code = v;\r\n    }\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.Workpackage.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Name = v;\r\n    }\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.Workpackage.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Description = v;\r\n    }\r\n  }\r\n\r\n  fullName = undefined\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.Workpackage.FullName;\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.FullName;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.FullName;\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.WorkpackageVMs.splice(this.Index, 1);\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(this.Name, this.Code, this.Description);\r\n  }\r\n}","import { WorkpackageVM } from \"./WorkpackageVM\";\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageVM();\r\n  qI.Workpackage = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnCodeChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Code = v;\r\n    }\r\n  }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnFullNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.FullName = v;\r\n    }\r\n  }\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supWp = q.Workpackage.SupItem;\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  var index = list.findIndex(x => x.Workpackage === supWp);\r\n  return index !== -1 ? list[index] : undefined;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport class CheckboxVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      ischecked: observable,\r\n      isDisable : observable,\r\n      Cancel : observable\r\n    })\r\n  }\r\n\r\n  name\r\n\r\n  OnCheckChanging\r\n\r\n  Cancel = false;\r\n\r\n  ischecked = undefined\r\n  set Ischecked(v) {\r\n    this.ischecked = v;\r\n    if (this.onCheckChange) {\r\n      this.onCheckChange(v);\r\n    }\r\n  }\r\n\r\n  isDisable = false\r\n}","import { CheckboxVM } from \"./CheckboxVM\"\r\n\r\nexport const get = (name, ischecked) => {\r\n  var qI = new CheckboxVM();\r\n  qI.ischecked = ischecked;\r\n  qI.name = name;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as checkboxVMUtil from '../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as util from './WorkpackageInputVMUtil'\r\nimport { Button } from 'antd';\r\n\r\nexport class WorkpackageInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  WorkpackageInput\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.WorkpackageInput.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.WorkpackageInput.Code = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.WorkpackageInput.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.WorkpackageInput.Name = v;\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.WorkpackageInput.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.WorkpackageInput.Description = v;\r\n  }\r\n\r\n  supItem = undefined\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    var input = this.WorkpackageInput;\r\n    if (!v) {\r\n      input.SupItem = v;\r\n    }else{\r\n      input.SupItem = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined\r\n  get WorkpackageVMStorageList(){\r\n    if (!this.workpackageVMStorageList){\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v){\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.SupItemSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItem = this.SupItem;\r\n  }\r\n\r\n  supItemSelectVM\r\n  get SupItemSelectVM(){\r\n    if (!this.supItemSelectVM){\r\n      var obj = this.supItemSelectVM = selectVMUtil.get\r\n        (this.WorkpackageVMStorageList, this.SupItem);\r\n      obj.Placeholder = 'công tác cha'\r\n      obj.CanClear = true;\r\n      obj.OnSelectedItemChanged = (v) => this.SupItem = v;\r\n    }\r\n    return this.supItemSelectVM;\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.WorkpackageInput.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.WorkpackageInput.IsNew = v;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n\r\n    if (!v) {\r\n      this.WorkpackageInput.Workpackage = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      this.WorkpackageInput.Workpackage = v.Workpackage;\r\n\r\n      var { Code, Name, Description, SupItem } = v;\r\n      this.CodeVM.Content = Code;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n\r\n      this.SupItemSelectVM.InitialItem = SupItem;\r\n\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Công tác mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  AsString = () => `${this.Code} ${this.Name} ${this.Description} ${this.IsNew}`\r\n\r\n  AddDatabase = () => {\r\n    this.WorkpackageInput.AddDatabase();\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  DeleteFunc = () => {\r\n    this.WorkpackageVM.Workpackage.Delete();\r\n    this.WorkpackageVM = undefined;\r\n  }\r\n\r\n  Clear = () => {\r\n    this.CodeVM.Content = null;\r\n    this.NameVM.Content = null;\r\n    this.DescriptionVM.Content = null;\r\n    this.IsNewVM.Ischecked = true;\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../single/form/PMDataVM\";\r\nimport { WorkpackageInputVM } from \"./WorkpackageInputVM\";\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageInputVM();\r\n  qI.WorkpackageInput = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  })\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} workpackage successfully`);\r\n    //qI.clear();\r\n  }\r\n\r\n  dict.OnAdd = (v) => {\r\n    qI.WorkpackageVM = v;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}","import { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport * as workpackageVMUtil from './WorkpackageVMUtil';\r\nimport * as workpackageInputVMUtil from './WorkpackageInputVMUtil';\r\n\r\nexport const get = (q) => {\r\n  var qI = new Workpackage_DictVM();\r\n  qI.Workpackage_Dict = q;\r\n\r\n  q.OnGetWorkpackagesDone = (v) => {\r\n    var obj = qI.WorkpackageVMs;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (item) => {\r\n    var itemView = workpackageVMUtil.get(item, qI);\r\n    qI.Add(itemView);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackageVMs = (dictVM) => {\r\n  var wps = dictVM.Workpackage_Dict.Workpackages;\r\n  if (!wps) return undefined;\r\n  return wps.map(x => workpackageVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetWorkpackageInputVM= (dictVM) => {\r\n  var input = dictVM.Workpackage_Dict.WorkpackageInput;\r\n  return workpackageInputVMUtil.get(input, dictVM);\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ElementFilterSetting_DictVMUtil'\r\n\r\nexport class ElementFilterSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  items  = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../../text/TextVMUtil';\r\n\r\nexport class SettingVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Name = v;\r\n    }\r\n  }\r\n\r\n  nameVM\r\n  get NameVM(){\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM = textUtil.get(this.Name, 'tên thiết lập ...');\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Description = v;\r\n    }\r\n  }\r\n\r\n  settingType\r\n  get SettingType() {\r\n    if (!this.settingType) {\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v) {\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  data\r\n  get Data(){\r\n    if (!this.data){\r\n      this.data = this.ModelItem.Data;\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n    if (!this.M2VM){\r\n      this.ModelItem.Data = v;\r\n    }\r\n  }\r\n\r\n  dataVM\r\n  get DataVM() {\r\n    if (!this.dataVM) {\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM(v) {\r\n    this.dataVM = v;\r\n\r\n    // Gọi hàm để đổ dữ liệu về\r\n    if (v && this.OnInitialSetDataVM){\r\n      this.OnInitialSetDataVM(v);\r\n    }\r\n\r\n    if (!this.M2VM) {\r\n      if (!v) {\r\n        this.Data = v;\r\n      }\r\n      else {\r\n        this.Data = v.ModelItem;\r\n      }\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM) {\r\n      return this.OnGetDataVM();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class ElementFilterSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var cateFilterVM = v.CategoryFilterVM;\r\n    if (cateFilterVM) {\r\n      cateFilterVM.OnInitialData();\r\n    }\r\n\r\n    var famFilterVM = v.FamilyFilterVM;\r\n    if (famFilterVM) {\r\n      famFilterVM.OnInitialData();\r\n    }\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as multiSelectVMUtil from '../../../select/MultiSelectVMUtil'\r\n\r\nexport class EntFilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  get pmDataVM () { return PMDataVM.Instance};\r\n\r\n  valueType\r\n  get ValueType() {\r\n    if (!this.valueType) {\r\n      this.valueType = this.ModelItem.ValueType;\r\n    }\r\n    return this.valueType;\r\n  }\r\n  set ValueType(v) {\r\n    this.valueType = v;\r\n    this.ModelItem.ValueType = v;\r\n  }\r\n\r\n  numberFilterType\r\n  get NumberFilterType() {\r\n    if (!this.numberFilterType) {\r\n      this.numberFilterType = this.ModelItem.NumberFilterType;\r\n    }\r\n    return this.numberFilterType;\r\n  }\r\n  set NumberFilterType(v) {\r\n    this.numberFilterType = v;\r\n    this.ModelItem.NumberFilterType = v;\r\n  }\r\n\r\n  stringFilterType\r\n  get StringFilterType() {\r\n    if (!this.stringFilterType) {\r\n      this.stringFilterType = this.ModelItem.StringFilterType;\r\n    }\r\n    return this.stringFilterType;\r\n  }\r\n  set StringFilterType(v) {\r\n    this.stringFilterType = v;\r\n    this.ModelItem.StringFilterType = v;\r\n  }\r\n\r\n  values\r\n  get Values() {\r\n    if (!this.values) {\r\n      this.values = this.ModelItem.Values;\r\n    }\r\n    return this.values;\r\n  }\r\n  set Values(v) {\r\n    this.values = v;\r\n    this.ModelItem.Values = v;\r\n  }\r\n\r\n  valueStorageList\r\n  get ValueStorageList() {\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = this.ModelItem.ValueStorageList;\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  ValueSelectPlaceholder\r\n\r\n  valueTypeSelectVM\r\n  get ValueTypeSelectVM() {\r\n    if (!this.valueTypeSelectVM) {\r\n      var obj =this.valueTypeSelectVM = selectVMUtil.get(this.pmDataVM.FilterValueTypes, this.ValueType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.ValueType = v;\r\n      }\r\n    }\r\n    return this.valueTypeSelectVM;\r\n  }\r\n\r\n  stringFilterTypeSelectVM\r\n  get StringFilterTypeSelectVM() {\r\n    if (!this.stringFilterTypeSelectVM){\r\n      var obj = this.stringFilterTypeSelectVM = selectVMUtil.get(this.pmDataVM.StringFilterTypes, this.StringFilterType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.StringFilterType = v;\r\n      }\r\n    }\r\n    return this.stringFilterTypeSelectVM;\r\n  }\r\n\r\n  valuesSelectVM\r\n  get ValuesSelectVM() {\r\n    if (!this.valuesSelectVM){\r\n      var obj = this.valuesSelectVM = multiSelectVMUtil.get(this.ValueStorageList, this.Values);\r\n\r\n      if (this.ValueSelectPlaceholder){\r\n        obj.Placeholder = this.ValueSelectPlaceholder;\r\n      }\r\n\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Values = v;\r\n      }\r\n    }\r\n    return this.valuesSelectVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    if (!v) return;\r\n\r\n    var {ValueType, NumberFilterType, StringFilterType, Values} = v;\r\n    this.ValueTypeSelectVM.InitialItem = ValueType;\r\n    this.StringFilterTypeSelectVM.InitialItem = StringFilterType;\r\n    this.ValuesSelectVM.InitialItems = Values;\r\n  }\r\n\r\n  OnInitialData = () => {\r\n    var valueType = this.ValueType;\r\n    var numberFilterType = this.NumberFilterType;\r\n    var stringFilterType = this.StringFilterType;\r\n    var values = this.Values;\r\n  }\r\n}","import { SettingVM } from \"../setting/base/SettingVM\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\n\r\nexport const get = (q) => {\r\n  if (!q) return undefined;\r\n  var qI = new EntFilterVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport default class ElementFilterSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isHaveFamilyFilter : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  categoryFilterVM\r\n  get CategoryFilterVM(){\r\n    if (!this.categoryFilterVM && this.ModelItem){\r\n      this.categoryFilterVM = this.GetCategoryFilterVM();\r\n    }\r\n    return this.categoryFilterVM;\r\n  }\r\n\r\n  GetCategoryFilterVM = () => {\r\n    var filter = this.ModelItem.CategoryFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilter = undefined\r\n  get IsHaveFamilyFilter(){\r\n    if (!this.isHaveFamilyFilter){\r\n      this.isHaveFamilyFilter = this.ModelItem.IsHaveFamilyFilter;\r\n    }\r\n    return this.isHaveFamilyFilter;\r\n  }\r\n  set IsHaveFamilyFilter(v){\r\n    this.isHaveFamilyFilter = v;\r\n    this.ModelItem.IsHaveFamilyFilter = v;\r\n  }\r\n\r\n  familyFilterVM\r\n  get FamilyFilterVM(){\r\n    if (!this.familyFilterVM && this.ModelItem){\r\n      this.familyFilterVM = this.GetFamilyFilterVM();\r\n    }\r\n    return this.familyFilterVM;\r\n  }\r\n\r\n  GetFamilyFilterVM = () => {\r\n    var filter = this.ModelItem.FamilyFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilterVM\r\n  get IsHaveFamilyFilterVM() {\r\n    if (!this.isHaveFamilyFilterVM) {\r\n      var obj = this.isHaveFamilyFilterVM\r\n        = checkboxVMUtil.get(\"Thiết lập lọc Family\", this.IsHaveFamilyFilter);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHaveFamilyFilter = v;\r\n      };\r\n    }\r\n    return this.isHaveFamilyFilterVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.CategoryFilterVM.SetData(v.CategoryFilterVM);\r\n\r\n    var ischecked = v.IsHaveFamilyFilter === true;\r\n    this.IsHaveFamilyFilterVM.Ischecked = ischecked;\r\n    \r\n    this.FamilyFilterVM.SetData(v.FamilyFilterVM);\r\n  }\r\n}","import ElementFilterSettingDataVM from './ElementFilterSettingDataVM';\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingDataVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import ElementFilterSettingVM from \"./ElementFilterSettingVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { message } from \"antd\";\r\nimport { SettingVM } from \"./SettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new SettingVM();\r\n  qI.Setting = q;\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as util from './SettingVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport { Button, message } from 'antd';\r\n\r\nexport default class SettingInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      dataVM : observable,\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  settingType\r\n  get SettingType(){\r\n    if (!this.settingType){\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v){\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên bộ lọc\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  settingTypeVM\r\n  get SettingTypeVM() {\r\n    if (!this.settingTypeVM){\r\n      var obj = this.settingTypeVM = \r\n        textVMUtil.get(this.SettingType, \"loại thiết lập\");\r\n      obj.onSetContent = (v) => this.SettingType = v;\r\n    }\r\n    return this.settingTypeVM;\r\n  }\r\n\r\n  dataVM = undefined\r\n  get DataVM(){\r\n    if (!this.dataVM){\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM (v){\r\n    if (this.DataVM.SetData){\r\n      this.DataVM.SetData(v);\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM){\r\n      var dataVM = this.OnGetDataVM();\r\n      return dataVM;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem() {\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v) {\r\n    this.editItem = v;\r\n\r\n    var input = this.ModelItem;\r\n    if (!v) {\r\n      input.EditItem = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      input.EditItem = v.ModelItem;\r\n\r\n      var { Name, Description, SettingType } = v;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n      this.SettingTypeVM.Content = SettingType;\r\n\r\n      this.DataVM = v.DataVM;\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.ModelItem.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.ModelItem.IsNew = v;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Thiết lập mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  \r\n  DeleteFunc = () => {\r\n    this.EditItem.ModelItem.Delete();\r\n    this.EditItem.Delete();\r\n    this.EditItem = undefined;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    this.ModelItem.AddDatabase();\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class ElementFilterSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport * as itemVMUtil from './ElementFilterSettingVMUtil'\r\nimport * as inputVMUtil from './ElementFilterSettingInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport ElementFilterSettingInputVM from \"./ElementFilterSettingInputVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} element filter setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../../filter/EntFilterVMUtil'\r\nimport * as util from './MES_ValueSettingVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MES_ValueSettingVM {\r\n  // constructor() {\r\n  //   makeObservable(this, {\r\n\r\n  //   })\r\n  // }\r\n\r\n  get Index() {\r\n    return this.Dict.ValueSettingVMs.indexOf(this);\r\n  }\r\n\r\n  retrieveType\r\n  get RetrieveType() {\r\n    if (!this.retrieveType) {\r\n      this.retrieveType = this.ModelItem.RetrieveType;\r\n    }\r\n    return this.retrieveType;\r\n  }\r\n  set RetrieveType(v) {\r\n    this.retrieveType = v;\r\n    this.ModelItem.RetrieveType = v;\r\n  }\r\n\r\n  get RetrieveTypeStorageList() {\r\n    return util.GetRetrieveTypeStorageList(this);\r\n  }\r\n\r\n  retrieveTypeSelectVM\r\n  get RetrieveTypeSelectVM() {\r\n    if (!this.retrieveTypeSelectVM) {\r\n      var obj = this.retrieveTypeSelectVM = selectVMUtil.get(this.RetrieveTypeStorageList, this.RetrieveType);\r\n      obj.OnSelectedItemChanged = (v) => this.RetrieveType = v;\r\n    }\r\n    return this.retrieveTypeSelectVM;\r\n  }\r\n\r\n  valueFilterVM\r\n  get ValueFilterVM() {\r\n    if (!this.valueFilterVM) {\r\n      var obj = this.valueFilterVM = filterVMUtil.get(this.ModelItem.ValueFilter);\r\n      obj.ValueSelectPlaceholder = 'giá trị parameter';\r\n    }\r\n    return this.valueFilterVM;\r\n  }\r\n  set ValueFilterVM(v) {\r\n    this.valueFilterVM = v;\r\n    if (!v) {\r\n      this.ModelItem.ValueFilter = v;\r\n    }\r\n    else {\r\n      this.ModelItem.ValueFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    if (!this.workpackageVM) {\r\n      this.workpackageVM = util.GetWorkpackageVM(this);\r\n    }\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.Workpackage = v;\r\n    }\r\n    else {\r\n      this.ModelItem.Workpackage = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined;\r\n  get WorkpackageVMStorageList() {\r\n    if (!this.workpackageVMStorageList) {\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v) {\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.WorkpackageSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = -1;\r\n  }\r\n\r\n  workpackageSelectVM\r\n  get WorkpackageSelectVM() {\r\n    if (!this.workpackageSelectVM) {\r\n      var storageList = this.WorkpackageVMStorageList ?\r\n        this.WorkpackageVMStorageList : [];\r\n\r\n      var obj = this.workpackageSelectVM = selectVMUtil.get\r\n        (storageList, this.WorkpackageVM);\r\n      obj.Placeholder = 'chọn công tác';\r\n      obj.OnSelectedItemChanged = (v) => this.WorkpackageVM = v;\r\n    }\r\n\r\n    return this.workpackageSelectVM;\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = this.ModelItem.MassType;\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n    this.ModelItem.MassType = v;\r\n  }\r\n\r\n  get MassTypeStorageList() {\r\n    return util.GetMassTypeStorageList(this);\r\n  }\r\n\r\n  massTypeSelectVM\r\n  get MassTypeSelectVM() {\r\n    if (!this.massTypeSelectVM) {\r\n      var obj = this.massTypeSelectVM = selectVMUtil.get(this.MassTypeStorageList, \r\n        this.MassType);\r\n      obj.Placeholder = 'loại khối lượng';\r\n      obj.OnSelectedItemChanged = (v) => this.MassType = v;\r\n    }\r\n    return this.massTypeSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.ValueSettingVMs;\r\n    list.splice(this.Index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.RetrieveTypeSelectVM.InitialItem = v.RetrieveType;\r\n    this.ValueFilterVM.SetData(v.ValueFilterVM);\r\n    this.WorkpackageSelectVM.InitialItem = v.WorkpackageVM;\r\n    this.MassTypeSelectVM.InitialItem = v.MassType;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSettingVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push((v) => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRetrieveTypeStorageList = (q) => {\r\n  return pmDataVM().ValueRetrieveTypes;\r\n}\r\n\r\nexport const GetWorkpackageVM = (q) => {\r\n  var workpackage = q.ModelItem.Workpackage;\r\n  if (!workpackage) return undefined;\r\n\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.Workpackage === workpackage);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}\r\n\r\nexport const GetMassTypeStorageList = (q) => {\r\n  return pmDataVM().MassTypes;\r\n}","import * as util from './MES_ValueSettingUtil'\r\n\r\nexport default class MES_ValueSetting{\r\n  get Index() {\r\n    return this.Dict.ValueSettings.indexOf(this);\r\n  }\r\n\r\n  RetrieveType\r\n\r\n  MassType\r\n  \r\n  ValueFiter\r\n\r\n  workpackageId\r\n  \r\n  workpackage\r\n  get Workpackage(){\r\n    if (!this.workpackage){\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.workpackageId = undefined;\r\n    }\r\n    else{\r\n      this.workpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ValueSettings.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byparameter = \"byparameter\";\r\nexport const bymaterial = \"bymaterial\";\r\nexport const byrebar = \"byrebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [byparameter, bymaterial, byrebar]\r\n}","import MES_ValueSetting from './MES_ValueSetting'\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as vrt from './MES_ValueRetrieveType'\r\nimport * as fvt from '../../../filter/FilterValueType'\r\nimport * as sft from '../../../filter/StringFilterType'\r\nimport * as fct from '../../../filter/FilterCategoryType'\r\nimport { EntFilter } from '../../../filter/EntFilter';\r\nimport { PMData } from '../../../../single/model/PMData'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.retrieveType;\r\n  qI.MassType = q.massType;\r\n  qI.ValueFilter = filterUtil.get(q.valueFilter, fct.parameter);\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.RetrieveType;\r\n  qI.MassType = q.MassType;\r\n  qI.ValueFilter = q.ValueFilter;\r\n  qI.Workpackage = q.Workpackage;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = vrt.byparameter;\r\n  qI.Dict = dict;\r\n  \r\n  var valueFilter = new EntFilter();\r\n  valueFilter.CategoryType = fct.parameter;\r\n  valueFilter.ValueType = fvt.bystring;\r\n  valueFilter.StringFilterType = sft.byequal;\r\n  valueFilter.Values = [ 'Volume' ];\r\n\r\n  qI.ValueFilter = valueFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackage = (q) => {\r\n  var workpackageId = q.workpackageId;\r\n  if (!workpackageId) return undefined;\r\n\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    retrieveType : q.RetrieveType,\r\n    massType : q.MassType,\r\n    valueFilter: q.ValueFilter.ApiData,\r\n    workpackageId : q.workpackageId\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassExportSettingDataVMUtil'\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport default class MassExportSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueSettingVMs: observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  elementFilterVM\r\n  get ElementFilterVM() {\r\n    if (!this.elementFilterVM) {\r\n      this.elementFilterVM = util.GetElementFilterVM(this);\r\n    }\r\n    return this.elementFilterVM;\r\n  }\r\n  set ElementFilterVM(v) {\r\n    this.elementFilterVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.ElementFilter = v;\r\n    }\r\n    else {\r\n      modelItem.ElementFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  elementFilterVMStorageList = undefined\r\n  get ElementFilterVMStorageList() {\r\n    if (!this.elementFilterVMStorageList) {\r\n      this.elementFilterVMStorageList = util.GetElementFilterVMStorageList(this);\r\n    }\r\n    return this.elementFilterVMStorageList;\r\n  }\r\n  set ElementFilterVMStorageList(v) {\r\n    this.elementFilterVMStorageList = v;\r\n\r\n    var selectVM = this.ElementFilterSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = 0;\r\n  }\r\n\r\n  elementFilterSelectVM\r\n  get ElementFilterSelectVM() {\r\n    if (!this.elementFilterSelectVM) {\r\n      var storageList = this.ElementFilterVMStorageList ? this.ElementFilterVMStorageList : [];\r\n\r\n      var obj = this.elementFilterSelectVM = selectVMUtil.get(storageList, this.ElementFilterVM);\r\n      obj.Placeholder = 'chọn bộ lọc'\r\n      obj.OnSelectedItemChanged = (v) => this.ElementFilterVM = v;\r\n    }\r\n    return this.elementFilterSelectVM;\r\n  }\r\n\r\n  valueSettingVMs = undefined\r\n  get ValueSettingVMs() {\r\n    if (!this.valueSettingVMs) {\r\n      this.valueSettingVMs = util.GetValueSettingVMs(this);\r\n    }\r\n    return this.valueSettingVMs;\r\n  }\r\n  set ValueSettingVMs(v) {\r\n    var list = this.valueSettingVMs;\r\n    var modelList = this.ModelItem.ValueSettings;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount) {\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount) {\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = valueSettingUtil.Clone\r\n          (originItemVM.ModelItem, this.ModelItem);\r\n        modelList.push(item);\r\n\r\n        var itemVM = valueSettingVMUtil.get(item, this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewValueSettingVM = () => {\r\n    var item = this.ModelItem.AddNewValueSetting();\r\n    var itemView = valueSettingVMUtil.get(item, this);\r\n    this.ValueSettingVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.ElementFilterSelectVM.InitialItem = v.ElementFilterVM;\r\n    this.ValueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassExportSettingDataVM from './MassExportSettingDataVM';\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  pmDataVM().ElementFilterSetting_DictVM.OnGetItemsDone = (v) => {\r\n    qI.ElementFilterVMStorageList = GetElementFilterVMStorageList(qI);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilterVM = (q) => {\r\n  var elemFilter = q.ModelItem.ElementFilter;\r\n  if (!elemFilter) return undefined;\r\n\r\n  var list = pmDataVM().ElementFilterSetting_DictVM.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.ModelItem === elemFilter);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetElementFilterVMStorageList = (q) => {\r\n  return pmDataVM().ElementFilterSetting_DictVM.Items;\r\n}\r\n\r\nexport const GetValueSettingVMs = (q) => {\r\n  var valueSettings = q.ModelItem.ValueSettings;\r\n  return valueSettings.map(x => valueSettingVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassExportSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var valueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport MassExportSettingVM from \"./MassExportSettingVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class MassExportSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassExportSetting_DictVMUtil'\r\n\r\nexport class MassExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassExportSettingVMUtil'\r\nimport * as inputVMUtil from './MassExportSettingInputVMUtil'\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\nimport MassExportSettingInputVM from \"./MassExportSettingInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassGroupSetting_DictVMUtil'\r\n\r\nexport class MassGroupSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassGroupSettingVMUtil'\r\nimport { MassGroupSetting_DictVM } from \"./MassGroupSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n","\r\nexport default class PhaseVM {\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  get DisplayContent () {\r\n    return `${this.Name}`;\r\n  }\r\n}","import PhaseVM from \"./PhaseVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new PhaseVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;  \r\n\r\n  return qI;\r\n}","export const addversion = 'addversion'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Phase_DictVMUtil'\r\nimport * as stateType from '../state/StateType'\r\nimport { message } from 'antd';\r\n\r\nexport class Phase_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      state : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  state = undefined\r\n  get State(){\r\n    return this.state;\r\n  }\r\n  set State(v){\r\n    this.state = v;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n\r\n  AddVersion = () => {\r\n    this.State = stateType.addversion;\r\n  }\r\n\r\n  Cancel = () => {\r\n    this.State = undefined;\r\n  }\r\n\r\n  OK = () => {\r\n    var name = this.Input.Name;\r\n    var index = this.Items.findIndex(x => x.Name === name);\r\n    if (index !== -1){\r\n      message.warning('version name already exists!');\r\n      return;\r\n    }\r\n\r\n    this.State = undefined;\r\n    this.ModelItem.AddMassVersion();\r\n  }\r\n}","import * as textVMUtil from '../../../text/TextVMUtil'\r\n\r\nexport default class PhaseInputVM {\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên version\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n}","import * as itemVMUtil from './PhaseVMUtil'\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport * as inputVMUtil from './PhaseInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new Phase_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  });\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputVMUtil.get(q.ModelItem.Input, q);\r\n}","import PhaseInputVM from \"./PhaseInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new PhaseInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ProjectVMUtil'\r\n\r\nexport default class ProjectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      typicalLevelSetting: observable,\r\n      typicalLevelSetting_ForEdit: observable\r\n    })\r\n  }\r\n\r\n  get _id() {\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.ModelItem.Code;\r\n    }\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.ModelItem.Code = v;\r\n  }\r\n\r\n  phase_DictVM\r\n  get Phase_DictVM() {\r\n    if (!this.phase_DictVM) {\r\n      this.phase_DictVM = util.GetPhase_DictVM(this);\r\n    }\r\n    return this.phase_DictVM;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = this.ModelItem.RebarMass_Dict;\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  get InputExportSet() {\r\n    return this.ModelItem.InputExportSet;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  get Level_Dict() {\r\n    return this.ModelItem.Level_Dict;\r\n  }\r\n\r\n  typicalLevelSetting = undefined\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      this.typicalLevelSetting = util.GetTypicalLevelSetting(this);\r\n    }\r\n    return this.typicalLevelSetting;\r\n  } set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit = undefined\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = util.GetTypicalLevelSetting_ForEdit(this);\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  get Url(){\r\n    return this.ModelItem.Url;\r\n  }\r\n}","export const text = 'text'\r\nexport const input = 'input'","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport * as checkboxVMUtil from './CheckboxVMUtil'\r\nimport './Checkbox.css'\r\n\r\nclass CheckboxView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = checkboxVMUtil.get(false);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onCheckedChange = (e) => {\r\n    var data = this.state;\r\n    var { checked } = e.target;\r\n\r\n    if (data.OnCheckChanging) {\r\n      data.OnCheckChanging(checked);\r\n    }\r\n\r\n    if (!data.Cancel) {\r\n      data.Ischecked = checked;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var { ischecked, name, isDisable } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <label>\r\n          <input type=\"checkbox\"\r\n            checked={ischecked}\r\n            onChange={this.onCheckedChange} disabled={isDisable} />\r\n          <span className='checkbox__title'>{name}</span>\r\n        </label>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CheckboxView)","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport CheckboxView from '../../../../../checkbox/CheckboxView';\r\nimport * as checkBoxUtil from '../../../../../checkbox/CheckboxVMUtil';\r\nimport * as multiSelectUtil from \"../../../../../select/MultiSelectVMUtil\";\r\nimport * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport { text } from '../pageItem/TLS_PageItemStateType';\r\nimport * as util from './LevelGroupVMUtil'\r\n\r\nexport class LevelGroupVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      primary: observable,\r\n      isSelectOpen: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get Levels() {\r\n    return this.ModelItem.Levels;\r\n  } set Levels(v) {\r\n    this.ModelItem.Levels = v;\r\n  }\r\n\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  levelSelectVM\r\n  get LevelSelectVM() {\r\n    if (!this.levelSelectVM) {\r\n      var list = this.LevelStorageList;\r\n      if (!list) {\r\n        this.SettingVM.ModelItem.OnGetLevelStorageList_Funcs.push(() => {\r\n          var obj = this.levelSelectVM;\r\n          obj.Items = this.LevelStorageList;\r\n          obj.InitialItems = this.Levels;\r\n        })\r\n      }\r\n\r\n      list = list ? list : []\r\n      var obj = this.levelSelectVM = multiSelectUtil.get(list, this.Levels);\r\n      obj.Placeholder = 'chọn level ...';\r\n\r\n      obj.TitleRender = (item) => {\r\n        const getTriggerContent = () => {\r\n          return this.IsSelectOpen || this.Primary === item ? 'click' : 'hover';\r\n        }\r\n        var triggerVM = textUtil.get(getTriggerContent())\r\n\r\n        const getButtonType = () => {\r\n          return this.Primary === item ? 'primary' : 'dashed'\r\n        }\r\n        var buttonTypeVM = textUtil.get(getButtonType())\r\n\r\n        const getAddContent = () => {\r\n          return this.Primary === item ? '' : 'Set'\r\n        }\r\n        var addContentVM = textUtil.get(getAddContent())\r\n\r\n        const getItemCss = () => {\r\n          return this.Primary === item ? 'levelgroup__primary' : '';\r\n        }\r\n\r\n        return <Popover trigger={triggerVM.Content}\r\n          content={\r\n            <span>\r\n              {this.Primary !== item ?\r\n                <span className='levelgroup__addtext'>{addContentVM.Content}</span>\r\n                : ''}\r\n              <Button size='small'\r\n                type={buttonTypeVM.Content}\r\n                onClick={() => {\r\n                  this.Primary = item;\r\n                }}>Primary</Button>\r\n            </span>\r\n          }>\r\n          <span className={getItemCss()}>{item}</span>\r\n        </Popover>\r\n      }\r\n\r\n      obj.OnSetOpen = (v) => this.IsSelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Levels = v;\r\n        if (this.Levels.indexOf(this.Primary) === -1) {\r\n          this.Primary = util.GetDefaultPrimary(this);\r\n        }\r\n      }\r\n    }\r\n    return this.levelSelectVM;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.LevelGroups;\r\n    list.splice(this.Index, 1);\r\n\r\n    this.Primary = util.GetDefaultPrimary(this);\r\n  }\r\n\r\n  primary = undefined\r\n  get Primary() {\r\n    if (!this.primary) {\r\n      this.primary = this.ModelItem.Primary;\r\n    }\r\n    return this.primary\r\n  } set Primary(v) {\r\n    this.primary = this.ModelItem.Primary = v;\r\n  }\r\n\r\n  isSelectOpen = undefined\r\n  get IsSelectOpen() {\r\n    return this.isSelectOpen\r\n  } set IsSelectOpen(v) {\r\n    this.isSelectOpen = v;\r\n  }\r\n}","import { LevelGroupVM } from \"./LevelGroupVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new LevelGroupVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport * as genUtil from \"../../../../../../util/generalUtil\";\r\nimport * as it from './TLS_FilterValue_InputType'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from \"../../../../../input/NewInputView\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterValueVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      inputType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  get Values() {\r\n    return this.Dict.ModelItem.Items;\r\n  }\r\n\r\n  get Value() {\r\n    return this.Values[this.Index].Value;\r\n  }\r\n  set Value(v) {\r\n    this.Values[this.Index].Value = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var obj = this.valueVM = textUtil.get(this.Value);\r\n      obj.onSetContent = (v) => {\r\n        this.Value = v;\r\n      }\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var list = ['Cột', 'Vách', 'Dầm', 'Sàn']\r\n      var obj = this.selectVM = selectUtil.get(list, this.Value);\r\n      obj.Placeholder = '...'\r\n      obj.OnSetOpen = (v) => this.SelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => this.Value = v;\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ModelItem.Items.splice(this.Index, 1);\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n\r\n  inputType = undefined\r\n  get InputType(){\r\n    if (!this.inputType){\r\n      this.inputType = this.ModelItem.InputType\r\n    }\r\n    return this.inputType;\r\n  } set InputType(v){\r\n    this.inputType = this.ModelItem.InputType = v;\r\n  }\r\n\r\n  ToggleInputType = () => {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        this.SelectVM.InitialItem = this.Value;\r\n        this.Value = this.SelectVM.SelectedItem;\r\n        this.InputType = it.select\r\n        break;\r\n      case it.select:\r\n        if (this.Value) {\r\n          this.ValueVM.Content = this.Value;\r\n        } else{\r\n          if (!this.ValueVM.Content){\r\n            this.ValueVM.Content = 'value'\r\n          }\r\n          this.Value =this.ValueVM.Content;\r\n        }\r\n\r\n        this.InputType = it.input\r\n        break;\r\n    }\r\n  }\r\n\r\n  SwitchChecked_Funcs = () => this.InputType === it.select;\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        return <NewInputView store={this.ValueVM} \r\n          className='tls_filter__value__input' />\r\n      case it.select:\r\n        return <SelectView store={this.SelectVM} \r\n          className='tls_filter__value__select' />\r\n    }\r\n  }\r\n\r\n  selectOpen\r\n  get SelectOpen() {\r\n    if (this.selectOpen === undefined) {\r\n      this.selectOpen = this.SelectVM.Open;\r\n    }\r\n    return this.selectOpen;\r\n  }\r\n  set SelectOpen(v) {\r\n    this.selectOpen = v;\r\n    this.PopoverState.Content = util.GetPopoverState(this);\r\n  }\r\n\r\n  popoverState\r\n  get PopoverState() {\r\n    if (!this.popoverState) {\r\n      this.popoverState = textUtil.get(util.GetPopoverState(this));\r\n    }\r\n    return this.popoverState;\r\n  }\r\n}","import { TLS_FilterValueVM } from \"./TLS_FilterValueVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterValueVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPopoverState = (q) => {\r\n    return q.SelectOpen ? 'none' : 'hover';\r\n  }","import { makeObservable, observable, action } from 'mobx';\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterVMUtil'\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get id(){\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get Field(){\r\n    return this.ModelItem.Field;\r\n  } set Field(v){\r\n    this.ModelItem.Field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = \r\n        selectUtil.get(this.FieldStorageList, this.Field);\r\n      obj.Placeholder = 'chọn bộ lọc ...';\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = valueUtil.get(this.ModelItem.AddItem(),this);\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n}\r\n","import { TLS_FilterVM } from \"./TLS_FilterVM\";\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => valueUtil.get(x, q));\r\n}","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport * as textUtil from '../../../../../text/TextVMUtil';\r\nimport * as st from './TLS_PageItemStateType'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\nimport * as util from './TLS_PageItemVMUtil'\r\n\r\nexport class TLS_PageItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable,\r\n      State: observable,\r\n      levelGroups: observable,\r\n      filters: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem?.id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = this.ModelItem.Name = v;\r\n  }\r\n\r\n  State = st.text\r\n\r\n  ToggleState = () => {\r\n    switch (this.State) {\r\n      case st.text:\r\n        this.State = st.input\r\n        break;\r\n      case st.input:\r\n        this.NameVM.Content = this.Name;\r\n        this.State = st.text\r\n        break;\r\n    }\r\n  }\r\n\r\n  get DeleteMarginCss() {\r\n    return this.State === st.input ? 'tls_pageItem__deletemargin' : ''\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = textUtil.get(this.Name);\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  NameOK = () => {\r\n    this.State = st.text;\r\n    this.Name = this.NameVM.Content;\r\n  }\r\n\r\n  NameCancel = () => {\r\n    this.State = st.text;\r\n  }\r\n\r\n  get InputToolElement() {\r\n    return <div >\r\n      <Button type='primary' size='small'\r\n        onClick={this.NameOK}>ok</Button>\r\n      <Button type='dashed' size='small'\r\n        onClick={this.NameCancel}>cancel</Button>\r\n    </div>\r\n  }\r\n\r\n  get InputElement() {\r\n    var obj = <NewInputView className='tls_pageItem_input' store={this.NameVM} />\r\n    return obj;\r\n  }\r\n\r\n  get TitleElement() {\r\n    var delElem = <Button type='primary' size='small' onClick={this.Delete}\r\n      className='tls_pageItem__delete'>x</Button>\r\n\r\n    switch (this.State) {\r\n      case st.text:\r\n        return <>\r\n          <span>{this.Name}</span>\r\n          <Button type='primary' size='small' className='tls_pageItem__edit'\r\n            onClick={this.ToggleState}>e</Button>\r\n          {delElem}\r\n        </>\r\n      case st.input:\r\n        return <>\r\n          <Popover content={this.InputToolElement} trigger=\"focus\">\r\n            <span>\r\n              {this.InputElement}\r\n            </span>\r\n          </Popover>\r\n          {delElem}\r\n        </>\r\n    }\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.PageItems.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var index = this.Index;\r\n    var isLast = this.IsLast;\r\n\r\n    var dict = this.Dict;\r\n    var list = dict.PageItems;\r\n    list.splice(index, 1);\r\n    dict.AllTabs.splice(index, 1);\r\n\r\n    if (list.length !== 0) {\r\n      dict.IsModelChangePageKey = true;\r\n      dict.CurrentPageKey = (isLast ? list[index - 1] : list[index]).id\r\n    }\r\n  }\r\n\r\n  // Setting\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  // Level Group\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups = undefined\r\n  get LevelGroups() {\r\n    if (!this.levelGroups) {\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.get(this.ModelItem.AddLevelGroup(), this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  filters = undefined\r\n  get Filters() {\r\n    if (!this.filters) {\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.get(this.ModelItem.AddFilter(), this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n}","import { TLS_PageItemVM } from \"./TLS_PageItemVM\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_PageItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetLevelGroups = (q) => {\r\n  return q.ModelItem.LevelGroups.map(x => levelGroupUtil.get(x, q));\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return q.ModelItem.Filters.map(x => filterUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TypicalLevelSettingDataVMUtil'\r\nimport { ControlOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil';\r\n\r\nexport class TypicalLevelSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      pageItems: observable,\r\n      currentPageKey: observable,\r\n      allTabs: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  // Setting\r\n  get SettingVM (){\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Page Items\r\n  pageItems = undefined\r\n  get PageItems() {\r\n    if (!this.pageItems) {\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.get(this.ModelItem.AddPageItem(), this);\r\n    this.PageItems.push(item);\r\n\r\n    var i = this.IsHaveAddCommandTab ? 1 : 0;\r\n    this.AllTabs.splice(this.AllTabs.length - i, 0, item);\r\n\r\n    this.CurrentPageKey = item.id;\r\n\r\n    return item;\r\n  }\r\n\r\n  addCommandTab\r\n  get AddCommandTab() {\r\n    if (!this.addCommandTab) {\r\n      this.addCommandTab = {\r\n        id: 'add',\r\n        TitleElement: <Button className='tls__tabs__add'\r\n          type='text' size='small'\r\n          onClick={this.AddPageItem}>+</Button>\r\n      }\r\n    }\r\n    return this.addCommandTab;\r\n  }\r\n\r\n  IsHaveAddCommandTab = false\r\n\r\n  allTabs = undefined\r\n  get AllTabs() {\r\n    if (!this.allTabs) {\r\n      var obj = [...this.PageItems];\r\n      if (this.IsHaveAddCommandTab) {\r\n        obj.push(this.AddCommandTab);\r\n      }\r\n      this.allTabs = obj;\r\n    }\r\n    return this.allTabs;\r\n  }\r\n\r\n  currentPageKey = undefined\r\n  get CurrentPageKey() {\r\n    if (!this.currentPageKey) {\r\n      this.currentPageKey = this.PageItems[0].id;\r\n    }\r\n    return this.currentPageKey;\r\n  } set CurrentPageKey(v) {\r\n    this.currentPageKey = v;\r\n  }\r\n\r\n  IsModelChangePageKey = false\r\n\r\n  ChangePageKey = (v) => {\r\n    if (this.IsModelChangePageKey) {\r\n      this.IsModelChangePageKey = false; return;\r\n    }\r\n    this.CurrentPageKey = v;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TypicalLevelSettingDataVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return q.ModelItem.PageItems.map(x => pageItemUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as util from './TypicalLevelSettingVMUtil'\r\n\r\nexport class TypicalLevelSettingVM extends SettingVM {\r\n  get LevelStorageList() {\r\n    return this.ModelItem.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList(){\r\n    return this.ModelItem.FieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    this.ModelItem.Save();\r\n  }\r\n}","import * as dataVMUtil from './TypicalLevelSettingDataVMUtil'\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\n\r\nexport const get = (q, project) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new TypicalLevelSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Project = project;\r\n\r\n  // var level_Dict = project.Level_Dict;\r\n  // const getLevelsFunc = () => { \r\n  //   qI.LevelStorageList = level_Dict.Items.map(x => x.Name);\r\n  //   qI.GetLevelStorageList = true;\r\n  // }\r\n  // if (level_Dict.Items){\r\n  //   getLevelsFunc();\r\n  // } else{\r\n  //   level_Dict.OnGetItemsDone_Funcs.push(getLevelsFunc);\r\n  // }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data, qI);\r\n  }    \r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}","import * as phaseDictVMUtil from '../phase/Phase_DictVMUtil'\r\nimport ProjectVM from \"./ProjectVM\";\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new ProjectVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPhase_DictVM = (q) => {\r\n  var phaseDict = q.ModelItem.Phase_Dict;\r\n  return phaseDictVMUtil.get(phaseDict);\r\n}\r\n\r\nexport const GetTypicalLevelSetting_Func = (model, project) => {\r\n  return typicalLevelUtil.get(model, project);\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() =>\r\n      q.TypicalLevelSetting = GetTypicalLevelSetting_Func(project.TypicalLevelSetting, q));\r\n  }\r\n}\r\n\r\nexport const GetTypicalLevelSetting_ForEdit = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting_ForEdit;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TypicalLevelSetting_ForEdit = GetTypicalLevelSetting_Func(project.TypicalLevelSetting_ForEdit, q)\r\n    });\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Project_DictVMUtil'\r\n\r\nexport class Project_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.ModelItem.Items = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import * as itemVMUtil from './ProjectVMUtil'\r\nimport { Project_DictVM } from \"./Project_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new Project_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassResultCompVMUtil'\r\nimport * as multiSelectVMUtil from '../../../../select/MultiSelectVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport { Link } from 'react-router-dom';\r\nimport { Popover } from 'antd';\r\n\r\nexport default class MassResultCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsShowProjectSelect: observable,\r\n      CanHavePhase: observable,\r\n      isHavePhase: observable,\r\n      IsDataPending: observable\r\n    })\r\n  }\r\n\r\n  projects\r\n  get Projects() {\r\n    if (!this.projects) {\r\n      this.projects = this.ModelItem.Projects;\r\n    }\r\n    return this.projects;\r\n  }\r\n  set Projects(v) {\r\n    this.projects = v;\r\n    this.ModelItem.Projects = v;\r\n  }\r\n\r\n  projectVMs\r\n  get ProjectVMs() {\r\n    if (!this.projectVMs) {\r\n      this.projectVMs = util.GetProjectVMs(this);\r\n    }\r\n    return this.projectVMs;\r\n  }\r\n  set ProjectVMs(v) {\r\n    this.projectVMs = v;\r\n    this.Projects = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  projectVMStorageList\r\n  get ProjectVMStorageList() {\r\n    if (!this.projectVMStorageList) {\r\n      this.projectVMStorageList = util.GetProjectVMStorageList(this);\r\n    }\r\n    return this.projectVMStorageList;\r\n  }\r\n  set ProjectVMStorageList(v) {\r\n    this.projectVMStorageList = v;\r\n\r\n    this.projectVMs = util.GetProjectVMs(this);\r\n\r\n    var selectVM = this.ProjectSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.projectVMs;\r\n  }\r\n\r\n  projectSelectOpen\r\n  get ProjectSelectOpen(){\r\n    if (this.projectSelectOpen === undefined){\r\n      this.projectSelectOpen = this.ProjectSelectVM.Open;\r\n    }\r\n    return this.projectSelectOpen;\r\n  }\r\n  set ProjectSelectOpen(v){\r\n    this.projectSelectOpen = v;\r\n    this.ProjectPopoverState.Content = util.GetProjectPopoverStateValue(this);\r\n  }\r\n\r\n  projectPopoverState\r\n  get ProjectPopoverState(){\r\n    if (!this.projectPopoverState){\r\n      this.projectPopoverState = textUtil.get(util.GetProjectPopoverStateValue(this));\r\n    }\r\n    return this.projectPopoverState;\r\n  }\r\n\r\n  projectSelectVM\r\n  get ProjectSelectVM() {\r\n    if (!this.projectSelectVM) {\r\n      var list = this.ProjectVMStorageList ? this.ProjectVMStorageList : [];\r\n      var obj = this.projectSelectVM = multiSelectVMUtil.get(list, this.ProjectVMs);\r\n      obj.Placeholder = 'chọn dự án'\r\n      obj.TitleRender = (item) => <Popover trigger={this.ProjectPopoverState.Content}\r\n        placement=\"topLeft\"\r\n        content={\r\n          <a target='_blank' rel=\"noreferrer\"\r\n            // href={`/#/project/${item._id}`} \r\n            href={item.Url}\r\n            >View project</a>\r\n        }\r\n      >\r\n        {item.DisplayContent}\r\n      </Popover>\r\n\r\n      obj.OnSelectedItemChanged = (v) => this.ProjectVMs = v;\r\n      obj.OnSetOpen = (v) => this.ProjectSelectOpen = v;\r\n    }\r\n    return this.projectSelectVM;\r\n  }\r\n\r\n  IsShowProjectSelect = true\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = this.ModelItem.Phases;\r\n    }\r\n    return this.phases;\r\n  }\r\n  set Phases(v) {\r\n    this.phases = v;\r\n    this.ModelItem.Phases = v;\r\n  }\r\n\r\n  phaseVMs\r\n  get PhaseVMs() {\r\n    if (!this.phaseVMs) {\r\n      this.phaseVMs = util.GetPhaseVMs(this);\r\n    }\r\n    return this.phaseVMs;\r\n  }\r\n  set PhaseVMs(v) {\r\n    this.phaseVMs = v;\r\n    this.Phases = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict() {\r\n    if (!this.massItem_Dict) {\r\n      this.massItem_Dict = this.ModelItem.MassItem_Dict;\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  phaseVMStorageList\r\n  get PhaseVMStorageList() {\r\n    return this.phaseVMStorageList;\r\n  }\r\n  set PhaseVMStorageList(v) {\r\n    this.phaseVMStorageList = v;\r\n\r\n    this.phaseVMs = util.GetPhaseVMs(this);\r\n\r\n    var selectVM = this.PhaseSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.phaseVMs;\r\n  }\r\n\r\n  phaseSelectVM\r\n  get PhaseSelectVM() {\r\n    if (!this.phaseSelectVM) {\r\n      var list = this.PhaseVMStorageList ? this.PhaseVMStorageList : [];\r\n      var obj = this.phaseSelectVM = multiSelectVMUtil.get(list, this.PhaseVMs);\r\n      obj.Placeholder = 'chọn version'\r\n      obj.OnSelectedItemChanged = (v) => this.PhaseVMs = v;\r\n    }\r\n    return this.phaseSelectVM;\r\n  }\r\n\r\n  CanHavePhase = false\r\n\r\n  isHavePhase = undefined\r\n  get IsHavePhase() {\r\n    if (!this.isHavePhase) {\r\n      this.isHavePhase = this.ModelItem.IsHavePhase;\r\n    }\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v) {\r\n    this.isHavePhase = v;\r\n    this.ModelItem.IsHavePhase = v;\r\n  }\r\n\r\n  isShowPhaseSelectVM\r\n  get IsShowPhaseSelectVM() {\r\n    if (!this.isShowPhaseSelectVM) {\r\n      var obj = this.isShowPhaseSelectVM\r\n        = checkboxVMUtil.get(\"So sánh các version\", this.IsHavePhase);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHavePhase = v;\r\n      };\r\n    }\r\n    return this.isShowPhaseSelectVM;\r\n  }\r\n\r\n  get MassGroupSetting() {\r\n    return this.ModelItem.MassGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.ModelItem.MassGroupSetting = v;\r\n  }\r\n\r\n  massGroupSettingStorageList = undefined\r\n  get MassGroupSettingStorageList() {\r\n    if (!this.massGroupSettingStorageList) {\r\n      this.massGroupSettingStorageList =\r\n        util.GetMassGroupSettingStorageList(this);\r\n    }\r\n  }\r\n  set MassGroupSettingStorageList(v) {\r\n    this.massGroupSettingStorageList = v;\r\n\r\n    var selectVM = this.MassGroupSettingSelectVM;\r\n    selectVM.Items = v;\r\n  }\r\n\r\n  massGroupSettingSelectVM\r\n  get MassGroupSettingSelectVM() {\r\n    if (!this.massGroupSettingSelectVM) {\r\n      var list = this.MassGroupSettingStorageList ?\r\n        this.MassGroupSettingStorageList : [];\r\n      var obj = this.massGroupSettingSelectVM =\r\n        selectVMUtil.get(list);\r\n\r\n      obj.TitleRender = (item) => item.DisplayContent\r\n\r\n      obj.CanClear = true;\r\n      obj.Placeholder = 'chọn bộ set khối lượng'\r\n      obj.OnSelectedItemChanged = (v) => this.MassGroupSetting = v;\r\n    }\r\n    return this.massGroupSettingSelectVM;\r\n  }\r\n\r\n  IsDataPending = false;\r\n\r\n  get LoadingSpinTip() {\r\n    return `loading data ... (${(this.HandledRatio * 100).toFixed(1)}%)`;\r\n  }\r\n\r\n  loadingSpinTipVM\r\n  get LoadingSpinTipVM() {\r\n    if (!this.loadingSpinTipVM) {\r\n      this.loadingSpinTipVM = textUtil.get(this.LoadingSpinTip);\r\n    }\r\n    return this.loadingSpinTipVM;\r\n  }\r\n\r\n  handledRatio = 0\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  }\r\n  set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.LoadingSpinTipVM.Content = this.LoadingSpinTip;\r\n  }\r\n\r\n  // function\r\n  GetMassData = () => {\r\n    this.IsDataPending = true;\r\n    this.HandledRatio = 0;\r\n    this.ModelItem.GetMassData();\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassResultCompVM from \"./MassResultCompVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, isfetchProjects = true) => {\r\n  var qI = new MassResultCompVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.ViewItem = qI;\r\n\r\n  if (isfetchProjects) {\r\n    pmDataVM().Project_DictVM.OnGetItemsDone = (v) => {\r\n      qI.ProjectVMStorageList = GetProjectVMStorageList(qI);\r\n    }\r\n  }\r\n\r\n  q.OnGetItemsDone_Funcs.push(() => {\r\n    message.success('get mass data successfully');\r\n  })\r\n\r\n  var massTable = q.MassItem_Dict.MassTable;\r\n  massTable.OnIsUpdateDataDone_Funcs.push(() => {\r\n    qI.IsDataPending = false;\r\n  })\r\n  massTable.OnSetHandledRatio_Funcs.push((v) => {\r\n    qI.HandledRatio = v;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProjectVMStorageList = (q) => {\r\n  return pmDataVM().Project_DictVM.Items;\r\n}\r\n\r\nexport const GetProjectVMs = (q) => {\r\n  var storageList = q.ProjectVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var projects = q.Projects;\r\n  projects.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetPhaseVMs = (q) => {\r\n  var storageList = q.PhaseVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var phases = q.Phases;\r\n  phases.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetMassGroupSettingStorageList = (q) => {\r\n  var dict = pmData().MassGroupSetting_Dict;\r\n  var items = dict.Items;\r\n  if (!items){\r\n    dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.MassGroupSettingStorageList = dict.Items;\r\n    })\r\n  }\r\n  return items;\r\n}\r\n\r\n\r\nexport const GetProjectPopoverStateValue = (q) => {\r\n  return q.ProjectSelectOpen ? 'none' : 'hover';\r\n}","export const _default = \"default\";\r\nexport const edit = \"edit\";","import * as util from './RenderItemUtil'\r\n\r\nexport default class RenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport RenderItem from \"./RenderItem\"\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport TextView from \"../text/TextView\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new RenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (val, item, dataIndex, cell, row) => {\r\n        return cell.ValueVM.Content;\r\n      };\r\n    case rs.edit:\r\n      return (value, item, dataIndex, cell, row) => {\r\n        if (!dataIndex) return value;\r\n\r\n        var inputVM = cell.ValueVM;\r\n\r\n        var length = dataIndex.length;\r\n        var obj = item;\r\n        dataIndex.filter((x, i) => i < length - 1)\r\n          .forEach((x) => obj = obj[x]);\r\n\r\n        inputVM.onSetContent = (v) => {\r\n          obj[dataIndex[length - 1]] = v;\r\n        }\r\n        return <InputView store={inputVM} />\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './RenderItemUtil'\r\n\r\nexport default class Render_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import * as util from './TitleRenderItemUtil'\r\n\r\nexport default class TitleRenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport TitleRenderItem from \"./TitleRenderItem\";\r\nimport { Button } from \"antd\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new TitleRenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (title, column, table) => {\r\n        return <>\r\n          <div className='column__title__wrapper'>\r\n            {title}\r\n            {table.CanHandleColumn &&  column.IsShow_MoveCommand ?\r\n              <div className='column__title__tool'>\r\n                {table.CanEditColumn ?\r\n                  <Button type='primary' size='small'\r\n                    style={{ backgroundColor: '#faad14', border: 'none' }}\r\n                    onClick={column.Edit}>e</Button> : ''}\r\n                {table.CanDeleteColumn ? <Button type='primary' danger size='small'\r\n                  onClick={column.Delete}>x</Button> : ''}\r\n              </div>\r\n              : ''}\r\n          </div>\r\n        </>\r\n      };\r\n    case rs.edit:\r\n      return (title, column, table) => {\r\n        return <>\r\n          <div className='column__title__wrapper'>\r\n            {column.InputElement}\r\n            <Button type='primary' size='small'\r\n              onClick={column.OK}>ok</Button>\r\n          </div>\r\n        </>\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './TitleRenderItemUtil'\r\n\r\nexport default class TitleRender_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","export const select = 'select'\r\nexport const input = 'input'","import TableColumn from \"./TableColumn\"\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport { Button } from \"antd\";\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as it from './TableColumn_InputType'\r\n\r\n// Instance\r\nexport const get = (title, dataIndex, renders, table) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n\r\n  if (Array.isArray(dataIndex)) {\r\n    qI.DataIndex = dataIndex;\r\n  } else {\r\n    qI.DataIndex = [dataIndex];\r\n  }\r\n\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n  var dict = qI.Render_Dict;\r\n  if (renders) {\r\n    renders.forEach(x => {\r\n      dict.GetRender(x.State).Render = x.Render\r\n    });\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetByTitle = (title, table) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n  qI.DataIndex = [title];\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n\r\n  qI.OnSetTitleOK_Funcs.push(() => {\r\n    qI.DataIndex = [qI.Title];\r\n    table.Update();\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetActionColumn = (table) => {\r\n  var title = undefined;\r\n\r\n  var renders = [\r\n    renderUtil.get(rs._default, (val, item, dataIndex, cell, row) => {\r\n      var editElem = '';\r\n      if (table.CanHandleItem && table.CanEditItem) {\r\n        var edit = () => row.Edit();\r\n        editElem = <Button type='primary' size='small'\r\n          style={{ backgroundColor: '#faad14', border: 'none' }}\r\n          onClick={edit}>edit</Button>\r\n      }\r\n\r\n      var delElem = '';\r\n      if (table.CanHandleItem && table.CanDeleteItem) {\r\n        var del = () => table.DeleteItem(item, row);\r\n\r\n        delElem = <Button type='primary' danger size='small'\r\n          onClick={del}>x</Button>\r\n      }\r\n      return <>\r\n        {editElem}{delElem}\r\n      </>\r\n    }),\r\n    renderUtil.get(rs.edit, (val, item, dataIndex, cell, row) => {\r\n      var ok = () => row.OK();\r\n      return <Button type='primary' size='small'\r\n        onClick={ok}>ok</Button>\r\n    })\r\n  ]\r\n\r\n  var col = get(title, null, renders, table);\r\n\r\n  // Đính thông tin là Action Column\r\n  col.IsAction = true;\r\n\r\n  col.TitleRender_Dict.GetRender(rs._default).Render = () =>\r\n    <div style={{ display: 'flex' }}>\r\n      <Button type='primary' size='small'\r\n        onClick={table.AddColumn}>\r\n        (+) c\r\n        </Button>\r\n      {table.CanHandleItem && table.CanAddItem ?\r\n        <Button type='primary' size='small'\r\n          onClick={table.AddItem}>\r\n          (+) r\r\n        </Button>\r\n        : ''}\r\n    </div>\r\n\r\n  return col;\r\n}\r\n\r\n// Property\r\nexport const GetTitle = (q) => {\r\n  switch (q.InputType) {\r\n    case it.input:\r\n      return undefined;\r\n    case it.select:\r\n      return q.AllNames[0];\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport Render_Dict from './Render_Dict';\r\nimport TitleRender_Dict from './TitleRender_Dict';\r\nimport * as it from './TableColumn_InputType'\r\nimport * as selectUtil from '../select/SelectVMUtil';\r\nimport * as textUtil from '../text/TextVMUtil';\r\nimport InputView from '../input/InputView';\r\nimport SelectView from '../select/SelectView';\r\nimport { PMData } from '../main/single/model/PMData';\r\nimport * as util from './TableColumnUtil'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport default class TableColumn {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      title: observable,\r\n      TitleRenderState: observable,\r\n      inputType: observable,\r\n      IsShow_MoveCommand: observable\r\n    })\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  get CurrentList() {\r\n    return this.Table.Columns;\r\n  } set CurrentList(v) {\r\n    this.Table.Columns = v;\r\n  }\r\n\r\n  TitleRenderState = rs._default\r\n  RenderState = rs._default;\r\n\r\n  title = undefined\r\n  get Title() {\r\n    if (!this.title) {\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  } set Title(v) {\r\n    this.title = v;\r\n  }\r\n\r\n  OnSetTitleOK_Funcs = []\r\n\r\n  titleRender_Dict\r\n  get TitleRender_Dict() {\r\n    if (!this.titleRender_Dict) {\r\n      this.titleRender_Dict = new TitleRender_Dict();\r\n    }\r\n    return this.titleRender_Dict;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = new Render_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v) {\r\n    this.render_Dict = v;\r\n  }\r\n\r\n  Edit = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleColumn && table.CanEditColumn) {\r\n      this.TitleRenderState = rs.edit;\r\n    }\r\n  }\r\n\r\n  OK = () => {\r\n    this.TitleRenderState = rs._default;\r\n    this.OnSetTitleOK_Funcs.forEach(x => x(this));\r\n  }\r\n\r\n  Delete = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleColumn && table.CanDeleteColumn) {\r\n      table.Columns.splice(this.Index, 1);\r\n      table.Update();\r\n    }\r\n  }\r\n\r\n  TitleRender = () => {\r\n    var title = this.Title;\r\n    var table = this.Table;\r\n\r\n    var render = this.TitleRender_Dict.GetRender(this.TitleRenderState);\r\n    return render.Render(title, this, table);\r\n  }\r\n\r\n  inputType = undefined\r\n  get InputType() {\r\n    if (!this.inputType) {\r\n      this.inputType = this.Table.Column_InputType\r\n    }\r\n    return this.inputType;\r\n  }\r\n\r\n  // Thuộc tính sử dụng khi select đầu mục cột\r\n  get AllNames() {\r\n    return this.Table.AllColumnNames\r\n  }\r\n\r\n  inputVM\r\n  get InputVM() {\r\n    if (!this.inputVM) {\r\n      var obj = this.inputVM = textUtil.get(this.Title);\r\n      obj.onSetContent = (v) => this.Title = v;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var obj = this.selectVM = selectUtil.get(this.AllNames, this.Title);\r\n      obj.OnSelectedItemChanged = (v) => this.Title = v;\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        return <InputView store={this.InputVM} />\r\n      case it.select:\r\n        var width = this.Table.Column_Title_SelectWidth\r\n        return <div style={{width}}>\r\n          <SelectView store={this.SelectVM} />\r\n        </div>\r\n    }\r\n  }\r\n\r\n  IsShow_MoveCommand = false\r\n\r\n  get CanShow_MoveCommand() {\r\n    return this.Table.CanShow_MoveCommand;\r\n  }\r\n\r\n  Show_MoveCommand = () => {\r\n    this.IsShow_MoveCommand = true;\r\n  }\r\n\r\n  Collapse_MoveCommand = () => {\r\n    this.IsShow_MoveCommand = false;\r\n  }\r\n\r\n  MoveLeft = () => {\r\n    var index = this.Index;\r\n    if (index === 0) return;\r\n\r\n    var list = this.CurrentList;\r\n    var l1 = list.filter(x => !x.IsActive);\r\n    if (l1.length === 1) return;\r\n\r\n    genUtil.MoveItem(list, index, index - 1);\r\n  }\r\n\r\n  MoveRight = () => {\r\n    var index = this.Index;\r\n\r\n    var list = this.CurrentList;\r\n    var l1 = list.filter(x => !x.IsActive);\r\n\r\n    if (l1.length === 1 || index === l1.length) {\r\n      return\r\n    }\r\n\r\n    genUtil.MoveItem(list, index, index + 1);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TableRowUtil'\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport default class TableRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Item: observable\r\n    })\r\n  }\r\n\r\n  key\r\n  get Key() {\r\n    if (!this.key) {\r\n      this.key = this.Item._id ? this.Item._id : this.Item.id;\r\n      if (!this.key) {\r\n        this.key = genUtil.randomId();\r\n      }\r\n    }\r\n    return this.key;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Table.Rows.indexOf(this);\r\n  }\r\n\r\n  Item = undefined;\r\n\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  Edit = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleItem && table.CanEditItem) {\r\n      this.Cells.forEach(x => x.RenderState = rs.edit);\r\n    }\r\n  }\r\n\r\n  OK = () => {\r\n    this.Cells.forEach(x => x.RenderState = rs._default);\r\n    this.Table.EditItem(this.Item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport * as util from './TableCellUtil'\r\n\r\nexport default class TableCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState: observable\r\n    })\r\n  }\r\n\r\n  get Key() {\r\n    return `${this.Column.Key}_${this.Row.Key}`;\r\n  }\r\n\r\n  get Item() {\r\n    return this.Row.Item;\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Row.Cells.indexOf(this);\r\n  }\r\n\r\n  get RowIndex() {\r\n    return this.Row.Index;\r\n  }\r\n\r\n  renderState = undefined\r\n  get RenderState() {\r\n    if (!this.renderState) {\r\n      this.renderState = this.Column.RenderState;\r\n    }\r\n    return this.renderState;\r\n  }\r\n  set RenderState(v) {\r\n    this.renderState = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM(){\r\n    if (!this.valueVM){\r\n      var val = util.GetValue(this);\r\n      this.valueVM = textUtil.get(val);\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = this.Column.Render_Dict;\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n\r\n  get DataIndex() {\r\n    return this.Column.DataIndex;\r\n  }\r\n\r\n  Render = () => {\r\n    var dataIndex = this.DataIndex;\r\n    var item = this.Item;\r\n    var value  = util.GetValue(this);\r\n\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(value, item, dataIndex, this, this.Row);\r\n  }\r\n}","import { PMData } from \"../main/single/model/PMData\";\r\nimport TableCell from \"./TableCell\"\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (row, col) => {\r\n  var qI = new TableCell();\r\n  qI.Row = row;\r\n  qI.Column = col;\r\n  qI.Table = row.Table;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetValue = (q) => {\r\n  var dataIndex = q.DataIndex;\r\n  var item = q.Item;\r\n\r\n  if (q.Table.Override_Get_CellValue){\r\n    var val = q.Table.Override_Get_CellValue(item, q, q.Row, q.Column);\r\n    return val;\r\n  }\r\n\r\n  var value = undefined;\r\n\r\n  if (dataIndex) {\r\n    value = item;\r\n    dataIndex.forEach(x => {\r\n      value = value[x]\r\n    })\r\n  }\r\n\r\n  return value;\r\n}","import TableRow from \"./TableRow\"\r\nimport * as cellUtil from './TableCellUtil'\r\nimport { PMData } from \"../main/single/model/PMData\";\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport const get = (item, table) => {\r\n  var qI = new TableRow();\r\n  qI.Item = item;\r\n  qI.Table = table;\r\n  return qI;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var columns = q.Table.Columns;\r\n  return columns.map(x => cellUtil.get(q, x));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport TableColumn from './TableColumn';\r\nimport * as colUtil from './TableColumnUtil'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport * as rs from './RenderState'\r\nimport * as util from './TableVMUtil'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport InputView from '../input/InputView'\r\nimport { Button } from 'antd';\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as rowUtil from './TableRowUtil'\r\nimport * as cit from './TableColumn_InputType'\r\n\r\nexport default class TableVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      columns: observable,\r\n      dataSource: observable,\r\n      rows: observable,\r\n\r\n      AllColumnNames : observable,\r\n      Column_InputType : observable,\r\n\r\n      CanHandleItem: observable,\r\n      CanAddItem: observable,\r\n      CanDeleteItem: observable,\r\n      CanEditItem: observable,\r\n\r\n      CanHandleItem: observable,\r\n      CanAddItem: observable,\r\n      CanDeleteItem: observable,\r\n      CanEditItem: observable,\r\n      IsShowActionColumn: observable,\r\n    })\r\n  }\r\n\r\n  // Có thể xử lý dữ liệu 1 dòng (bao gồm Xóa, Thêm, Sửa)\r\n  CanHandleItem = true\r\n\r\n  // Thêm 1 dòng\r\n  CanAddItem = true\r\n\r\n  // Xóa 1 dòng\r\n  CanDeleteItem = true\r\n\r\n  // Dùng để chỉnh sửa thông tin 1 Dòng\r\n  CanEditItem = true\r\n\r\n  // Có thể xử lý dữ liệu 1 cột (bao gồm Xóa, Thêm, Sửa)\r\n  CanHandleColumn = true\r\n\r\n  // Thêm 1 cột\r\n  CanAddColumn = true\r\n\r\n  // Xóa 1 cột\r\n  CanDeleteColumn = true\r\n\r\n  // Chỉnh sửa thông tin 1 cột\r\n  CanEditColumn = true\r\n\r\n  IsShowActionColumn = true\r\n\r\n  columns = undefined\r\n  get Columns() {\r\n    if (!this.columns) {\r\n      this.columns = [\r\n        colUtil.get('Tên cấu kiện', 'ElementName', null, this),\r\n        colUtil.get('Đường kính', 'Diameter', null, this),\r\n      ];\r\n\r\n      if (this.IsShowActionColumn) {\r\n        this.columns.push(colUtil.GetActionColumn(this));\r\n      }\r\n    }\r\n    return this.columns;\r\n  }\r\n  set Columns(v) {\r\n    this.columns = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  dataSource = undefined\r\n  get DataSource() {\r\n    if (!this.dataSource) {\r\n      this.dataSource = [\r\n        {\r\n          id: 1,\r\n          ElementName: 'W1',\r\n          Diameter: '18',\r\n          Weight: '30'\r\n        },\r\n        {\r\n          id: 2,\r\n          ElementName: 'W2',\r\n          Diameter: '20',\r\n          Weight: '3.7'\r\n        },\r\n      ]\r\n    }\r\n    return this.dataSource;\r\n  }\r\n  set DataSource(v) {\r\n    this.dataSource = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  rows = undefined\r\n  get Rows() {\r\n    if (!this.rows) {\r\n      this.rows = util.GetRows(this);\r\n    }\r\n    return this.rows;\r\n  }\r\n  set Rows(v) {\r\n    this.rows = v;\r\n  }\r\n\r\n  AddItem = () => {\r\n    if (this.CanHandleItem && this.CanAddItem) {\r\n      var item = undefined\r\n      if (this.OnGetItemForAdd) {\r\n        item = this.OnGetItemForAdd();\r\n      } else {\r\n        item = {\r\n          Key: genUtil.randomId(),\r\n          IsTypeNotDefined: true\r\n        };\r\n      }\r\n      this.DataSource.push(item);\r\n\r\n      var row = rowUtil.get(item, this);\r\n      this.Rows.push(row);\r\n      row.Edit();\r\n    }\r\n  }\r\n\r\n  DeleteItem = (item, row) => {\r\n    if (this.CanHandleItem && this.CanDeleteItem) {\r\n      var list = this.DataSource;\r\n      var index = list.indexOf(item);\r\n      list.splice(index, 1);\r\n      this.Rows.splice(index, 1);\r\n\r\n      if (this.OnDeleteItem) {\r\n        this.OnDeleteItem(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  EditItem = (item) => {\r\n    if (this.CanHandleItem && this.CanEditItem) {\r\n      if (item.IsTypeNotDefined) {\r\n        var index = this.DataSource.findIndex(x => x.Key === item.Key);\r\n        item = this.DataSource[index] = { ...item };\r\n      }\r\n\r\n      if (this.OnEditItem) {\r\n        this.OnEditItem(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddColumn = () => {\r\n    if (this.CanHandleColumn && this.CanDeleteColumn) {\r\n      var col = colUtil.GetByTitle(null, this);\r\n\r\n      var activeCol_Index = this.Columns.findIndex(x => x.IsActive);\r\n      if (activeCol_Index !== -1){\r\n        this.Columns.splice(activeCol_Index, 0, col);  \r\n      } else {\r\n        this.Columns.push(col);\r\n      }\r\n\r\n      col.Edit();\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    this.Rows = null;\r\n  }\r\n\r\n  // Ghi đè cách truy xuất giá trị 1 cell theo Item, Cell, Row, Col\r\n  Override_Get_CellValue\r\n\r\n  // Khi hiệu chỉnh đầu mục cột,\r\n  // sử dụng 2 cách để hiểu chỉnh: select và input\r\n  Column_InputType = cit.input\r\n  AllColumnNames = []\r\n\r\n  // Có thể di chuyển vị trí các cột hay không\r\n  CanShow_MoveCommand = true\r\n\r\n  // Thiết lập sẵn bề rỗng của \r\n  Column_Title_SelectWidth\r\n}","import * as rowUtil from './TableRowUtil'\r\nimport * as colUtil from './TableColumnUtil'\r\nimport TableVM from './TableVM';\r\n\r\n// Instance\r\nexport const get = (data) => {\r\n  var qI = new TableVM();\r\n  qI.Columns = data.columns.map(x => colUtil.GetByTitle(x, qI));\r\n  qI.DataSource = data.dataSource;\r\n  return qI;\r\n}\r\n\r\nexport const GetByColumn_Data = (colNames, data, isHaveAction = true) => {\r\n  var qI = new TableVM();\r\n  \r\n  var cols = colNames.map(x => colUtil.GetByTitle(x, qI));\r\n  if (isHaveAction){\r\n    cols.push(colUtil.GetActionColumn(qI));\r\n  }\r\n\r\n  qI.Columns = cols;\r\n\r\n  qI.DataSource = data;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetRows = (q) => {\r\n  return q.DataSource.map(x => rowUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportDataVMUtil'\r\n\r\nexport class WorkItemExportDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      \r\n    })\r\n  }\r\n\r\n\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as checkboxUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport class WorkItemExportSettingVM extends SettingVM {\r\n  IsCategoryChecked = true\r\n\r\n  categoryCheckboxVM\r\n  get CategoryCheckboxVM(){\r\n    if (!this.categoryCheckboxVM){\r\n      debugger\r\n      var obj =this.categoryCheckboxVM = \r\n        checkboxUtil.get(undefined, this.IsCategoryChecked)\r\n    }\r\n    return this.categoryCheckboxVM;\r\n  }\r\n}","import * as dataVMUtil from './WorkItemExportDataVMUtil'\r\nimport { WorkItemExportSettingVM } from './WorkItemExportSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkItemExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { WorkItemExportDataVM } from './WorkItemExportDataVM';\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport class WorkItemExportSetting extends Setting {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportSetting_DictVMUtil'\r\nimport * as itemUtil from './WorkItemExportSettingVMUtil';\r\nimport { WorkItemExportSetting } from './WorkItemExportSetting';\r\n\r\nexport class WorkItemExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = [\r\n        itemUtil.get(new WorkItemExportSetting())\r\n      ]\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM) {\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","import TableVM from \"../../../../table/TableVM\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport CheckboxView from '../../../../checkbox/CheckboxView'\r\nimport { WorkItemExportSettingVM } from \"./WorkItemExportSettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n\r\n  var nameCol = colUtil.get('Tên thiết lập', ['Name'], null, qI);\r\n  var isCateCol = colUtil.get('Category', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      debugger\r\n      var checkBoxVM = item.CategoryCheckboxVM;\r\n      return <CheckboxView store={item.CategoryCheckboxVM}/>\r\n    })\r\n  ], qI);\r\n  var isSubWorkItemCol = colUtil.get('Hạng mục phụ', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      return <CheckboxView />\r\n    })\r\n  ], qI);\r\n\r\n  qI.Columns = [\r\n    nameCol, isCateCol, isSubWorkItemCol,\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return new WorkItemExportSettingVM();\r\n  }\r\n  \r\n  return qI;\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../model/PMData';\r\n\r\nimport * as workpackage_DictVMUtil from '../../entity/workpackage/Workpackage_DictVMUtil'\r\nimport * as elementFilterSetting_DictVMUtil from \r\n  '../../entity/setting/elementFilter/ElementFilterSetting_DictVMUtil'\r\nimport * as massExportSetting_DictVMUtil from \r\n  '../../entity/setting/massExport/MassExportSetting_DictVMUtil'\r\nimport * as massGroupSetting_DictVMUtil from \r\n  '../../entity/setting/massGroup/MassGroupSetting_DictVMUtil'\r\nimport * as project_DictVMUtil from '../../entity/project/Project_DictVMUtil'\r\n\r\nimport * as massResultCompVMUtil from '../../entity/mass/result/MassResultCompVMUtil'\r\n\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\n\r\nimport * as wieDictVMUtil from \r\n  '../../entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport const GetWorkpackage_DictVM = (data) => {\r\n  return workpackage_DictVMUtil.get(pmData().Workpackage_Dict);\r\n}\r\n\r\nexport const GetElementFilterSetting_DictVM = (data) => {\r\n  return elementFilterSetting_DictVMUtil.get\r\n    (pmData().ElementFilterSetting_Dict);\r\n}\r\n\r\nexport const GetMassExportSetting_DictVM = (data) => {\r\n  return massExportSetting_DictVMUtil.get\r\n    (pmData().MassExportSetting_Dict);\r\n}\r\n\r\nexport const GetMassGroupSetting_DictVM = (data) => {\r\n  return massGroupSetting_DictVMUtil.get\r\n    (pmData().MassGroupSetting_Dict);\r\n}\r\n\r\nexport const GetProject_DictVM = (data) => {\r\n  return project_DictVMUtil.get\r\n    (pmData().Project_Dict);\r\n}\r\n\r\nexport const GetMassResultCompVM= (data) => {\r\n  return massResultCompVMUtil.get\r\n  (pmData().MassResultComp);\r\n}\r\n\r\nexport const GetWorkItemExportSetting_Dict = (data) => {\r\n  return wieDictVMUtil.get(pmData().WorkItemExportSetting_Dict);\r\n}","export const mass = 'mass'\r\nexport const typicallevel = 'typicallevel'\r\nexport const phase = 'phase'\r\nexport const inputdata = 'inputdata'\r\nexport const mepsetting = 'mepsetting'\r\nexport const document = 'document'","import { makeObservable, observable, action } from 'mobx';\r\nimport { pmData } from '../../entity/filter/EntFilterUtil';\r\nimport { PMData } from '../model/PMData';\r\nimport * as util from './PMDataVMUtil'\r\nimport * as pvt from '../../entity/project/ProjectViewType'\r\n\r\nexport class PMDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isDebug: observable,\r\n      projectViewType : observable,\r\n      currentProject : observable,\r\n      main_Classname : observable\r\n    })\r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMDataVM();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get pmData(){\r\n    return PMData.Instance;\r\n  }\r\n\r\n  workpackage_DictVM\r\n  get Workpackage_DictVM() {\r\n    if (!this.workpackage_DictVM){\r\n      this.workpackage_DictVM = util.GetWorkpackage_DictVM();\r\n    }\r\n    return this.workpackage_DictVM;\r\n  }\r\n\r\n  elementFilterSetting_DictVM\r\n  get ElementFilterSetting_DictVM() {\r\n    if (!this.elementFilterSetting_DictVM){\r\n      this.elementFilterSetting_DictVM = util.GetElementFilterSetting_DictVM();\r\n    }\r\n    return this.elementFilterSetting_DictVM;\r\n  }\r\n\r\n  massExportSetting_DictVM\r\n  get MassExportSetting_DictVM() {\r\n    if (!this.massExportSetting_DictVM){\r\n      this.massExportSetting_DictVM = util.GetMassExportSetting_DictVM();\r\n    }\r\n    return this.massExportSetting_DictVM;\r\n  }\r\n\r\n  massGroupSetting_DictVM\r\n  get MassGroupSetting_DictVM() {\r\n    if (!this.massGroupSetting_DictVM){\r\n      this.massGroupSetting_DictVM = util.GetMassGroupSetting_DictVM();\r\n    }\r\n    return this.massGroupSetting_DictVM;\r\n  }\r\n\r\n  project_DictVM\r\n  get Project_DictVM() {\r\n    if (!this.project_DictVM){\r\n      this.project_DictVM = util.GetProject_DictVM();\r\n    }\r\n    return this.project_DictVM;\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM(){\r\n    if (!this.massResultCompVM){\r\n      this.massResultCompVM = util.GetMassResultCompVM();\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n  set MassResultCompVM(v) {\r\n    this.massResultCompVM = v;\r\n    if (!v)\r\n    {\r\n      this.pmData.MassResultComp = v;\r\n    }\r\n    else{\r\n      this.pmData.MassResultComp = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = this.pmData.FilterValueTypes;\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = this.pmData.StringFilterTypes;\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.pmData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = this.pmData.ValueRetrieveTypes\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = this.pmData.ParameterNames;\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = this.pmData.MassPropertyNames;\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = this.pmData.MassTypes;\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = \r\n        util.GetWorkItemExportSetting_Dict(this);\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n\r\n  isDebug = undefined\r\n  get IsDebug(){\r\n    if (this.isDebug === undefined){\r\n      this.isDebug = this.pmData.IsDebug;\r\n    }\r\n    return this.isDebug;\r\n  } set IsDebug(v){\r\n    this.isDebug = this.pmData.IsDebug = v;\r\n  }\r\n\r\n  OnSet_ProjectViewType_Func_Dict = []\r\n\r\n  projectViewType = pvt.mass\r\n  //projectViewType = pvt.document\r\n  get ProjectViewType(){\r\n    return this.projectViewType;\r\n  } set ProjectViewType(v){\r\n    this.projectViewType = v;\r\n    this.OnSet_ProjectViewType_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  OnSet_CurrentProject_Func_Dict = []\r\n\r\n  currentProject = undefined\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n    this.OnSet_CurrentProject_Func_Dict.forEach(x => x.Value());\r\n\r\n    this.pmData.CurrentProject = v?.ModelItem\r\n  }\r\n\r\n  get UpdatedDate(){\r\n    return this.pmData.UpdatedDate;\r\n  }\r\n\r\n  // Classname scale bề rộng dự án cho phù hợp\r\n  // View BoQ : 800px\r\n  // View Detail : 100%\r\n  main_Classname = 'projectcomp__main'\r\n  get Main_Classname(){\r\n    return this.main_Classname;\r\n  } set Main_Classname(v){\r\n    this.main_Classname = v;\r\n  }\r\n}","import * as util from './MGS_FieldVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MGS_FieldVM {\r\n  get Index() {\r\n    return this.Dict.FieldVMs.indexOf(this);\r\n  }\r\n\r\n  get Fields(){\r\n    return this.Dict.ModelItem.Fields;\r\n  }\r\n\r\n  get Field(){\r\n    return this.Fields[this.Index];\r\n  }\r\n  set Field(v){\r\n    this.Fields[this.Index] = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return util.GetFieldStorageList();\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = selectVMUtil.get(this.FieldStorageList, this.Field);\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    var index = this.Index;\r\n    this.Fields.splice(index, 1);\r\n    \r\n    var list = this.Dict.FieldVMs;\r\n    list.splice(index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldSelectVM.InitialItem = v.Field;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MGS_FieldVM from \"./MGS_FieldVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MGS_FieldVM();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldStorageList = () => {\r\n  return pmDataVM().MassPropertyNames;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassGroupSettingDataVMUtil'\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport default class MassGroupSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fieldVMs : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  fieldVMs = undefined\r\n  get FieldVMs(){\r\n    if (!this.fieldVMs){\r\n      this.fieldVMs = util.GetFieldVMs(this);\r\n    }\r\n    return this.fieldVMs;\r\n  }\r\n  set FieldVMs(v){\r\n    var list = this.fieldVMs;\r\n    var modelList = this.ModelItem.Fields;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount){\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount){\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = originItemVM.Field;\r\n        modelList.push(item);\r\n\r\n        var itemVM = fieldVMUtil.get(item,this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewFieldVM = () => {\r\n    var item = this.ModelItem.AddNewField();\r\n    var itemView = fieldVMUtil.get(item, this);\r\n    this.FieldVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldVMs = v.FieldVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassGroupSettingDataVM from './MassGroupSettingDataVM';\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldVMs = (q) => {\r\n  var fields = q.ModelItem.Fields;\r\n  return fields.map(x => fieldVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassGroupSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    \r\n  }\r\n}","import * as dataVMUtil from './MassGroupSettingDataVMUtil'\r\nimport MassGroupSettingVM from './MassGroupSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport class CSVExport {\r\n  data = []\r\n  get Data() {\r\n    if (this.Override_Get_Data) {\r\n      return this.Override_Get_Data()\r\n    }\r\n    return this.data;\r\n  } set Data(v) {\r\n    this.data = v;\r\n  }\r\n\r\n  fileName\r\n  get FileName() {\r\n    if (this.Override_Get_FileName) {\r\n      return this.Override_Get_FileName();\r\n    }\r\n    return this.fileName;\r\n  } set FileName(v) {\r\n    this.fileName = v;\r\n  }\r\n\r\n  Export = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    const ws = XLSX.utils.json_to_sheet(this.Data, this.Headers);\r\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n  \r\n  ExportTest = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    var ws1 = {}\r\n    ws1.Name = 'Title';\r\n    ws1['!ref'] = \"A1:E5\";\r\n    ws1['A1'] = {\r\n      t: 'n', \r\n      v: 100\r\n    }\r\n\r\n    var ws2 = {}\r\n    ws2.Name = 'Raw Data'\r\n    ws2['!ref'] = \"A1:E5\";\r\n    ws2['B2'] = {\r\n      t: 'n', \r\n      v: 200\r\n    }\r\n    ws2['B3'] = {\r\n      v: 200, f : 'B2'\r\n    }\r\n    ws2['C1'] = {\r\n      v: 300, \r\n      f : 'Title!A1'\r\n    }\r\n\r\n    ws2['C2'] = {\r\n      v: 300, \r\n      f : 'sum(Title!A1, B2)'\r\n    }\r\n\r\n    // const ws = XLSX.utils.json_to_sheet(this.Data, this.Headers);\r\n    // ws['!ref'] = \"A1:E5\";\r\n    // ws['E5'] = {\r\n    //   t : 's',\r\n    //   v : '100'\r\n    // };\r\n    // debugger\r\n\r\n    //const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    \r\n    const wb = { \r\n      Sheets: { \r\n        \r\n       }, \r\n      SheetNames: [ws1.Name, ws2.Name] \r\n    };\r\n    wb.Sheets[ws1.Name] = ws1;\r\n    wb.Sheets[ws2.Name] = ws2;\r\n\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n}","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport class ExcelExport {\r\n  workbook\r\n  get Workbook(){\r\n    if (this.Override_Get_Workbook){\r\n      return this.Override_Get_Workbook()\r\n    }\r\n    return this.workbook;\r\n  } set Workbook(v){\r\n    this.workbook = v;\r\n  }\r\n\r\n  fileName\r\n  get FileName() {\r\n    if (this.Override_Get_FileName) {\r\n      return this.Override_Get_FileName();\r\n    }\r\n    return this.fileName;\r\n  } set FileName(v) {\r\n    this.fileName = v;\r\n  }\r\n\r\n  Export = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    \r\n    const excelBuffer = XLSX.write(this.Workbook, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './MT_CellUtil'\r\n\r\nexport class MT_Cell {\r\n  // Lấy thứ tự trong lập trình\r\n  row = 0\r\n  get Row(){\r\n    if (this.Override_Get_Row){\r\n      return this.Override_Get_Row();\r\n    }\r\n    return this.row;\r\n  } set Row(v){\r\n    this.row = v;\r\n    this.Override_Get_Row = undefined;\r\n  }\r\n\r\n  // Lấy thứ tự trong lập trình\r\n  column = 0\r\n  get Column(){\r\n    if (this.Override_Get_Column){\r\n      return this.Override_Get_Column();\r\n    }\r\n    return this.column\r\n  } set Column(v){\r\n    this.column = v;\r\n    this.Override_Get_Column = undefined;\r\n  }\r\n\r\n  Type \r\n  Value\r\n\r\n  formula\r\n  get Formula(){\r\n    if (this.Override_Get_Formula){\r\n      return this.Override_Get_Formula();\r\n    }\r\n    return this.formula;\r\n  } set Formula(v){\r\n    this.formula = v;\r\n    this.Override_Get_Formula = undefined;\r\n  }\r\n\r\n  get Address(){\r\n    var obj = genUtil.ExcelCellName(this.Row, this.Column);\r\n    return obj;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  isContinueSubRows\r\n  get IsContinueSubRows(){\r\n    if (this.isContinueSubRows === undefined){\r\n      this.isContinueSubRows = util.GetIsContinueSubRows(this);\r\n    }\r\n    return this.isContinueSubRows;\r\n  }\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      t : this.Type,\r\n      v : this.Value,\r\n      f : this.Formula,\r\n      z : this.Format,\r\n      s : this.Style\r\n    }\r\n    return obj;\r\n  }\r\n}","// Property\r\nexport const GetSubItems = (q) => {\r\n  var column = q.Column;\r\n  return q.Dict.SubItems.map(x => {\r\n    var list = x.Cells;\r\n    var index = list.findIndex(y => y.Column === column);\r\n    return index !== -1 ? list[index] : undefined;\r\n  }).filter(x => x !== undefined);\r\n}\r\n\r\nexport const GetIsContinueSubRows = (q) => {\r\n  var isValid = true;\r\n\r\n  q.SubItems.forEach(x => {\r\n    if (isValid && x.SubItems.length !== 0){\r\n      isValid = false;\r\n    }\r\n  })\r\n\r\n  return isValid;\r\n}","import * as util from './MT_Data_RowUtil'\r\n\r\nexport class MT_Data_Row {\r\n  Worksheet\r\n\r\n  Row\r\n\r\n  get Rank(){\r\n    return this.Row.Rank;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  get FullItems(){\r\n    return util.GetFullItems(this);\r\n  }\r\n\r\n  cells\r\n  get Cells(){\r\n    if (!this.cells){\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  get FullIndex() {\r\n    return this.Worksheet.FullRows.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  }\r\n}","export const string = 's'\r\nexport const number = 'n'","import { MT_Cell } from \"./MT_Cell\";\r\nimport { MT_Data_Row } from \"./MT_Data_Row\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\n\r\n// Instance\r\nexport const get = (row, ws, supItem) => {\r\n  var qI = new MT_Data_Row();\r\n\r\n  qI.Row = row;\r\n  qI.Worksheet = ws;\r\n  qI.SupItem = supItem;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetSubItems = (q) => {\r\n  return q.Row.SubItems.map(x => get(x, q.Worksheet, q));\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  var row = q.Row;\r\n  var title = '';\r\n\r\n  for (var i = 0; i < row.Rank; i++) {\r\n    title += '  ';\r\n  }\r\n\r\n  title += row.Title;\r\n\r\n  return title;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var vc_dict = q.ValueCell_Dict = [];\r\n\r\n  var firstCol = q.Worksheet.First_ValueColumn;\r\n  var firstRow = q.Worksheet.First_ValueRow;\r\n\r\n  var row = q.Row;\r\n  var list = []\r\n  var getRowFunc = () => q.FullIndex + firstRow;\r\n\r\n  var titleCell = new MT_Cell();\r\n  titleCell.Dict = q;\r\n  titleCell.Type = c_vt.string;\r\n\r\n  titleCell.Value = q.Title;\r\n  titleCell.Column = 0 + firstCol;\r\n  titleCell.Override_Get_Row = getRowFunc\r\n  list.push(titleCell);\r\n\r\n  var columns = row.Table.Columns\r\n  row.Cells.forEach(x => {\r\n    var valueCell = new MT_Cell()\r\n    valueCell.Dict = q;\r\n    valueCell.Type = c_vt.number;\r\n    valueCell.Value = x.TotalValue\r\n    valueCell.Format = '0.00'\r\n    valueCell.Column = \r\n      columns.indexOf(x.Column) + 1 + firstCol\r\n    valueCell.Override_Get_Row = getRowFunc\r\n\r\n    valueCell.Override_Get_Formula = () => {\r\n      var subItems = valueCell.SubItems;\r\n      var length = subItems.length;\r\n      if (length === 0) return undefined;\r\n\r\n      var formula\r\n      if (!valueCell.IsContinueSubRows) {\r\n        formula = subItems.reduce((a, x, i) => {\r\n          if (i !== 0) {\r\n            a += ','\r\n          };\r\n          a += x.Address\r\n          return a\r\n        }, 'SUM(');\r\n\r\n        formula += ')';\r\n      } else {\r\n        formula = `SUM(${subItems[0].Address}:${subItems[length-1].Address})`\r\n      }\r\n\r\n      return formula;\r\n    }\r\n\r\n    var key = x.Column.Name\r\n    list.push(valueCell);\r\n    vc_dict.push({\r\n      Key: key,\r\n      Value: valueCell\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetFullItems = (q) => {\r\n  var list = [q];\r\n\r\n  q.SubItems.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  });\r\n\r\n  return list;\r\n}","import * as util from './MT_Data_WorksheetUtil'\r\n\r\nexport class MT_Data_Worksheet {\r\n  get Table(){\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  mainRows\r\n  get MainRows(){\r\n    if (!this.mainRows){\r\n      this.mainRows = util.GetMainRows(this)\r\n    }\r\n    return this.mainRows;\r\n  }\r\n\r\n  fullRows\r\n  get FullRows(){\r\n    if (!this.fullRows){\r\n      this.fullRows = util.GetFullRows(this);\r\n    }\r\n    return this.fullRows;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells(){\r\n    if (!this.valueCells){\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells;\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName(){\r\n    return util.GetRangeName(this); \r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      '!ref' : this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import * as rowUtil from './MT_Data_RowUtil'\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { MT_Cell } from './MT_Cell';\r\n\r\n// Property\r\nexport const GetMainRows = (q) => {\r\n  return q.Table.MainRows.map(x => rowUtil.get(x, q));\r\n}\r\n\r\nexport const GetFullRows = (q) => {\r\n  var list = [];\r\n\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var list = [];\r\n\r\n  q.FullRows.forEach(x => {\r\n    list.push.apply(list, x.Cells);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var list = [];\r\n  q.Table.Columns.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x.Name;\r\n    cell.Column = i + fc + 1;\r\n    cell.Row = fr\r\n    cell.Style = {\r\n      font : {\r\n        bold : true\r\n      }\r\n    }\r\n\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_RawData_WorksheetUtil'\r\n\r\nexport class MT_RawData_Worksheet {\r\n  Workbook\r\n\r\n  get Table() {\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  dataRows\r\n  get DataRows(){\r\n    if (!this.dataRows){\r\n      this.dataRows = util.GetDataRows(this);\r\n    }\r\n    return this.dataRows;\r\n  }\r\n\r\n  tableRows\r\n  get TableRows() {\r\n    if (!this.tableRows) {\r\n      this.tableRows = util.GetTableRows(this);\r\n    }\r\n    return this.tableRows;\r\n  }\r\n\r\n  records\r\n  get Records() {\r\n    if (!this.records) {\r\n      this.records = util.GetRecords(this);\r\n    }\r\n    return this.records\r\n  }\r\n\r\n  InfoFields = []\r\n\r\n  valueFields\r\n  get ValueFields() {\r\n    if (!this.valueFields) {\r\n      this.valueFields = util.GetValueFields(this);\r\n    }\r\n    return this.valueFields;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells() {\r\n    if (!this.valueCells) {\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName() {\r\n    return util.GetRangeName(this);\r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData() {\r\n    var obj = {\r\n      '!ref': this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Cell } from \"./MT_Cell\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Property\r\nexport const GetDataRows = (q) => {\r\n  return q.Workbook.Data_WS.FullRows\r\n    .filter(x => x.SubItems.length === 0)\r\n}\r\n\r\nexport const GetTableRows = (q) => {\r\n  return q.DataRows.map(x => x.Row)\r\n}\r\n\r\nexport const GetValueFields = (q) => {\r\n  return q.Table.Columns.map(x => x.Name);\r\n}\r\n\r\nexport const GetRecords = (q) => {\r\n  return q.DataRows.map(x => {\r\n    // Init Cells\r\n    var cells = x.Cells;\r\n\r\n    var obj = x.Row.ExportData;\r\n\r\n    // Xử lý phần sắp xếp  Info Fields\r\n    var infoFields = q.InfoFields;\r\n    obj.Infos.map(x => x.Key).forEach(y => {\r\n      if (!infoFields.includes(y)) {\r\n        infoFields.push(y);\r\n      }\r\n    });\r\n\r\n    return {\r\n      Binding_DataRow: x,\r\n      Value: obj\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var fc = q.First_ValueColumn;\r\n  var fr = q.First_ValueRow;\r\n\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var list = [];\r\n  var ifs = q.InfoFields;\r\n  var ifl = ifs.length\r\n  var vfs = q.ValueFields;\r\n\r\n  records.forEach((x, i) => {\r\n    // Truy xuất phần binding\r\n    var vc_dict = x.Binding_DataRow.ValueCell_Dict\r\n\r\n    // Xử lý phần Value Object\r\n    var value = x.Value;\r\n    var cell\r\n    var row = i + fr;\r\n\r\n    // Xử lý Info\r\n    value.Infos.forEach(y => {\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.string;\r\n      cell.Value = y.Value;\r\n      cell.Column = ifs.indexOf(y.Key) + fc;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n    })\r\n\r\n    // Xử lý Value\r\n    value.Values.forEach(y => {\r\n      var key = y.Key;\r\n      var cell_val = y.Value;\r\n\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.number;\r\n      cell.Value = cell_val;\r\n      cell.Format = '0.00'\r\n      cell.Column = vfs.indexOf(key) + fc + ifl;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n\r\n      // Xử lý phần Binding\r\n      //debugger\r\n      var index = vc_dict.findIndex(z => z.Key === key);\r\n      var data_cell = vc_dict[index].Value;\r\n\r\n      if (cell_val) {\r\n        data_cell.Formula = `raw_data!${cell.Address}`;\r\n      }\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var fields = q.InfoFields.concat(q.ValueFields)\r\n\r\n  var list = [];\r\n  fields.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x;\r\n    cell.Column = i + fc;\r\n    cell.Row = fr\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_WorkbookUtil'\r\n\r\nexport class MT_Workbook {\r\n  Table\r\n\r\n  get All_WS(){\r\n    return [ this.RawData_WS, this.Data_WS]\r\n    //return [ this.Data_WS, this.RawData_WS]\r\n    //return [ this.Data_WS ]\r\n  }\r\n\r\n  data_WS\r\n  get Data_WS(){\r\n    if (!this.data_WS){\r\n      this.data_WS = util.GetData_WS(this);\r\n    }\r\n    return this.data_WS;\r\n  }\r\n\r\n  rawData_WS\r\n  get RawData_WS(){\r\n    if (!this.rawData_WS){\r\n      this.rawData_WS = util.GetRawData_WS(this);\r\n    }\r\n    return this.rawData_WS;\r\n  }\r\n\r\n  get ResultData (){\r\n    var obj = {\r\n      Sheets : { },\r\n      SheetNames : []\r\n    }\r\n\r\n    this.All_WS.forEach(x => {\r\n      obj.Sheets[x.Title] = x.ResultData\r\n      obj.SheetNames.push(x.Title);\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Data_Worksheet } from \"./MT_Data_Worksheet\";\r\nimport { MT_RawData_Worksheet } from \"./MT_RawData_Worksheet\";\r\nimport { MT_Workbook } from \"./MT_Workbook\"\r\n\r\n// Instance\r\nexport const get = (table) => {\r\n  var qI = new MT_Workbook();\r\n\r\n  qI.Table = table;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetData_WS = (q) =>{\r\n  var qI = new MT_Data_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'data'\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRawData_WS = (q) => {\r\n  var qI = new MT_RawData_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'raw_data'\r\n\r\n  return qI;\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as mif from '../item/MassItemField'\r\nimport MassColumn from './MassColumn';\r\nimport * as colUtil from './MassColumnUtil'\r\nimport * as rowUtil from './MassRowUtil'\r\nimport * as cellUtil from './MassCellUtil'\r\nimport * as util from './MassTableUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as st from '../../setting/base/SettingType'\r\nimport { message } from 'antd';\r\nimport * as mgsUtil from '../../setting/massGroup/MassGroupSettingUtil'\r\nimport * as mgsVMUtil from '../../setting/massGroup/MassGroupSettingVMUtil'\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport * as compUtil from './rowgroup/MassGroupComponentUtil'\r\nimport * as exportUtil from '../../../../export/csv/CSVExportUtil';\r\nimport dayjs from 'dayjs';\r\nimport * as eeUtil from '../../../../export/excel/ExcelExportUtil';\r\nimport * as wbUtil from './export/MT_WorkbookUtil';\r\nimport * as mgi_st from './MassGroupInput_StateType'\r\nimport InputView from '../../../../input/InputView';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport default class MassTable {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsValidTable: observable,\r\n      Columns: observable,\r\n      MainRows: observable,\r\n      Cells: observable,\r\n      columnField: observable,\r\n      IsOnSaveMassGroup: observable,\r\n      MassGroupInput_State: observable,\r\n      Is_Override_MassGroup_Modal_Open: observable\r\n    })\r\n  }\r\n\r\n\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    if (v && v.length !== 0) {\r\n      this.Build();\r\n      this.IsValidTable = true;\r\n    }\r\n    else {\r\n      this.IsValidTable = false;\r\n    }\r\n  }\r\n\r\n  IsValidTable = false\r\n\r\n  columnField = mif.Project\r\n  get ColumnField() {\r\n    return this.columnField;\r\n  }\r\n  set ColumnField(v) {\r\n    this.columnField = v;\r\n  }\r\n\r\n  massGroupSetting\r\n  get MassGroupSetting() {\r\n    return this.massGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.massGroupSetting = v;\r\n    if (!v) {\r\n      this.MainMGC = v;\r\n    } else {\r\n      this.MainMGC = compUtil.Clone(v.Data.MassGroupComponent);\r\n    }\r\n  }\r\n\r\n  mainMGC\r\n  get MainMGC() {\r\n    if (!this.mainMGC) {\r\n      this.mainMGC = util.GetMainMGC(this);\r\n    }\r\n    return this.mainMGC;\r\n  }\r\n  set MainMGC(v) {\r\n    this.mainMGC = v;\r\n    this.Init();\r\n    if (!v) {\r\n      this.MainMGI = undefined;\r\n    } else {\r\n      this.MainMGI = util.GetMainMGI(this);\r\n    }\r\n  }\r\n\r\n  mainMGI\r\n  get MainMGI() {\r\n    if (!this.mainMGI) {\r\n      this.mainMGI = util.GetMainMGI(this);\r\n    }\r\n    return this.mainMGI;\r\n  }\r\n  set MainMGI(v) {\r\n    this.mainMGI = v;\r\n  }\r\n\r\n  Columns = undefined\r\n  FullRows = undefined\r\n  MainRows = undefined\r\n  Cells = undefined\r\n\r\n  Init = () => {\r\n    this.Columns = [];\r\n    this.MainRows = [];\r\n    this.FullRows = [];\r\n    this.Cells = [];\r\n\r\n    // Reset các dòng tạo bởi người dùng\r\n    this.CreatedByUser_Rows = []\r\n    this.Handled_CreatedByUser_Rows = []\r\n  }\r\n\r\n  get AllRows() {\r\n    return util.GetAllRows(this);\r\n  }\r\n\r\n  GetColumn = (v) => {\r\n    var list = this.Columns;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = colUtil.get(v, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetRow = (v, supItem) => {\r\n    var list = undefined;\r\n    if (supItem) {\r\n      list = supItem.SubItems;\r\n    } else {\r\n      list = this.MainRows;\r\n    }\r\n\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = rowUtil.get(v, this);\r\n      item.SupItem = supItem;\r\n\r\n      list.push(item);\r\n      this.FullRows.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetCell = (col, row, canAdd = true) => {\r\n    var list = this.Cells;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Column === col && x.Row === row);\r\n    if (index === -1) {\r\n      if (!canAdd) return undefined;\r\n\r\n      item = cellUtil.get(col, row, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n\r\n  Build = () => {\r\n    var colField = this.ColumnField;\r\n\r\n    if (colField === mif.Phase) {\r\n      pmData().MassResultComp.Phases.forEach(x => {\r\n        var col = this.GetColumn(mif.GetValueString(x, colField));\r\n      })\r\n    }\r\n\r\n    this.Items.forEach(x => {\r\n      switch (colField) {\r\n        case mif.Phase:\r\n          x.ValidPhasesByInput.forEach(y => {\r\n            this.HandleItem(x, y);\r\n          })\r\n          break;\r\n        default:\r\n          this.HandleItem(x, x.GetValue(colField));\r\n          break;\r\n      }\r\n    })\r\n\r\n    if (!this.IsHaveAsyncData) {\r\n      this.UpdateData();\r\n    }\r\n  }\r\n\r\n  IsHaveAsyncData = false;\r\n  IsOnSaveMassGroup = false;\r\n\r\n  HandledItems = []\r\n  HandledItemPhases = []\r\n\r\n  OnSetHandledRatio_Funcs = []\r\n\r\n  handledRatio\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  } set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.OnSetHandledRatio_Funcs.forEach(x => x(v));\r\n  }\r\n\r\n  AddHandledItems = (item) => {\r\n    if (this.ColumnField !== mif.Phase) {\r\n      this.HandledItems.push(item);\r\n    } else {\r\n      var list = this.HandledItemPhases;\r\n      var index = list.findIndex(x => x.Item === item);\r\n      var obj = undefined;\r\n      if (index === -1) {\r\n        obj = {\r\n          Item: item,\r\n          Count: 0\r\n        };\r\n        list.push(obj);\r\n      } else {\r\n        obj = list[index];\r\n      }\r\n      obj.Count++;\r\n\r\n      if (obj.Count === item.ValidPhasesByInput.length) {\r\n        this.HandledItems.push(item);\r\n      }\r\n    }\r\n\r\n    this.HandledRatio = this.HandledItems.length / this.Items.length;\r\n\r\n    if (this.HandledItems.length === this.Items.length) {\r\n      this.UpdateData();\r\n      this.HandledItems = [];\r\n    }\r\n  }\r\n\r\n  UpdateData = () => {\r\n    this.MainRows.forEach(x => x.UpdateData());\r\n    this.MainRows = rowUtil.Order(this.MainRows);\r\n\r\n    this.Cells.forEach(x => x.UpdateData());\r\n\r\n    this.IsUpdateDataDone = true;\r\n  }\r\n\r\n  OnIsUpdateDataDone_Funcs = []\r\n\r\n  set IsUpdateDataDone(v) {\r\n    this.OnIsUpdateDataDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  HandleItem = (item, colFieldValue, mgc, initialRow) => {\r\n    var col =\r\n      this.GetColumn(mif.GetValueString(colFieldValue, this.ColumnField));\r\n    var rows = initialRow ? [initialRow] : [];\r\n    var mgc = mgc ? mgc : this.MainMGC;\r\n\r\n    this.HandleRowFieldIndex(item, col, rows, mgc, 0);\r\n  }\r\n\r\n  // Xử lý tạo Row với giá trị tương ứng và Cell bên trong\r\n  GetRow_Value_FieldIndex = (item, col, rows, val, mgc, rowFieldIndex) => {\r\n    var mgis = mgc.Items;\r\n    var itemCount = mgis.length;\r\n    var mgi = mgis[rowFieldIndex];\r\n\r\n    // Sup Row của dòng khối lượng đang xét\r\n    var lastRow = rows.length !== 0 ? rows[rows.length - 1] : undefined\r\n    // mgi.SupRow = lastRow;\r\n    mgi.AddSupRow(lastRow);\r\n\r\n    var rowField = mgi.Field;\r\n    if (!rowField) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var valueString = mif.GetValueString(val, rowField);\r\n    var fullValue = lastRow ? `${lastRow.FullValue}__${valueString}` : valueString;\r\n\r\n    if (mgi.NotIncludeValues.includes(fullValue)) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var row = undefined;\r\n    const addRow = (supRow) => {\r\n      return this.Handle_AddRow(fullValue, supRow);\r\n    }\r\n\r\n    const handleRow = (row) => {\r\n      // Gắn thông tin gốc vào Row\r\n      row.RawValue = valueString;\r\n      row.MassGroupItem = mgi;\r\n      rows.push(row);\r\n\r\n      var subMgcs = mgi.SubComponents;\r\n      var subIndex = subMgcs.findIndex(x =>\r\n        filterUtil.IsValid(x.Filter, fullValue));\r\n      if (subIndex !== -1) {\r\n        mgc = subMgcs[subIndex];\r\n        mgc.IsHaveMassItem = true;\r\n\r\n        rowFieldIndex = -1;\r\n        itemCount = mgc.Items.length;\r\n\r\n        row.SubMassGroupComponent = mgc;\r\n      }\r\n\r\n      var cell = this.GetCell(col, row);\r\n      cell.Items.push(item);\r\n\r\n      if (rowFieldIndex === itemCount - 1) {\r\n        this.AddHandledItems(item);\r\n      } else {\r\n        this.HandleRowFieldIndex(item, col, rows, mgc, rowFieldIndex + 1);\r\n      }\r\n    }\r\n\r\n    var mgiItem = mgi.GetItem(fullValue, valueString);\r\n    var replaceMgi = mgiItem.NewMGI;\r\n    if (replaceMgi) {\r\n      // Lấy thông tin SupName\r\n      var supName = mgiItem.SupValue;\r\n\r\n      // Thêm Value-Title cho MassGroupItem\r\n      replaceMgi.GetItem(fullValue, valueString);\r\n\r\n      // Đính thông tin OriginSupRow cũ\r\n      if (lastRow) {\r\n        lastRow.Is_Original_SupRow = true;\r\n      }\r\n\r\n      this.Handle_ReplaceMGI(replaceMgi, supName, addRow, handleRow, lastRow);\r\n    } else {\r\n      row = addRow(lastRow);\r\n      handleRow(row);\r\n    }\r\n  }\r\n\r\n  Handle_AddRow = (fullValue, supRow) => {\r\n    var r1 = this.GetRow(fullValue, supRow);\r\n    r1.FullValue = fullValue;\r\n    return r1;\r\n  }\r\n\r\n  Handle_ReplaceMGI = (replaceMgi, supName, addRow, handleRow, originalSupRow) => {\r\n    var isGet_SupRow_Done\r\n\r\n    // Lấy SupRow phù hợp có trong ReplaceMGI\r\n    const getSupRow = () => {\r\n      var list = replaceMgi.SupRows;\r\n      var index = list.findIndex(x => x.Name === supName);\r\n      if (index !== -1) {\r\n        isGet_SupRow_Done = true;\r\n        return list[index]\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    // Thêm Row vào SupRow\r\n    const awaitGetSupRowForAdd = (supRow) => {\r\n      var r2 = addRow(supRow);\r\n      r2.ReplaceMGI = replaceMgi;\r\n\r\n      return r2;\r\n    }\r\n\r\n    // Đính thông tin OriginSupRow\r\n    const setOriginal_SupRow = (row) => {\r\n      row.Original_SupRow = originalSupRow;\r\n      row.IsReplaced = true;\r\n    }\r\n\r\n    // Tổn hợp các Phương thức ở trên\r\n    const fullFunc = () => {\r\n      var sr = getSupRow();\r\n      if (sr) {\r\n        var r = awaitGetSupRowForAdd(sr);\r\n        setOriginal_SupRow(r);\r\n        handleRow(r);\r\n      }\r\n    }\r\n\r\n    fullFunc();\r\n    genUtil.Add(\r\n      replaceMgi.On_AddSupRow_Func_Dict,\r\n      () => {\r\n        if (!isGet_SupRow_Done && replaceMgi.NewRow?.Name === supName) {\r\n          fullFunc();\r\n        }\r\n      },\r\n      false);\r\n\r\n    // var row = undefined\r\n    // if (replaceMgi.IsFirstSetSupRow) {\r\n    //   row = awaitGetSupRowForAdd();\r\n    //   setOriginal_SupRow(row);\r\n    //   handleRow(row);\r\n    // } else {\r\n    //   replaceMgi.OnIsFirstSetSupRow_Funcs.push(() => {\r\n    //     row = awaitGetSupRowForAdd();\r\n    //     setOriginal_SupRow(row);\r\n    //     handleRow(row);\r\n    //   })\r\n    // }\r\n  }\r\n\r\n  HandleRowFieldIndex = (item, col, rows, mgc, rowFieldIndex) => {\r\n    var rowField = mgc.Items[rowFieldIndex].Field;\r\n\r\n    var val = item.GetValue(rowField, (val) =>\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex));\r\n    if (!Array.isArray(val)) {\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex);\r\n    } else {\r\n      this.IsHaveAsyncData = true;\r\n    }\r\n  }\r\n\r\n  // MassGroupInput\r\n  get Reference_MassGroupSetting_SelectVM() {\r\n    return this.Dict.Dict.ViewItem.MassGroupSettingSelectVM;\r\n  }\r\n\r\n  SaveMassGroup = () => {\r\n    // Init MassGroup StorageList\r\n    var refSelectVM = this.Reference_MassGroupSetting_SelectVM;\r\n    var obj = this.MassGroupSelectVM;\r\n    obj.Items = [...refSelectVM.Items];\r\n    obj.InitialItem = refSelectVM.SelectedItem;\r\n\r\n    this.MassGroupInput_State = mgi_st.select\r\n    this.IsOnSaveMassGroup = true;\r\n  }\r\n\r\n  MassGroupInput_State = undefined\r\n\r\n  Toggle_MassGroupInput_State = () => {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        this.MassGroupInput_State = mgi_st.input\r\n        break;\r\n      case mgi_st.input:\r\n        this.MassGroupInput_State = mgi_st.select\r\n        break;\r\n    }\r\n  }\r\n\r\n  get MassGroupInput_Toggle_Classname() {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        return 'btn-warning';\r\n      case mgi_st.input:\r\n        return 'btn-success';\r\n    }\r\n  }\r\n\r\n  get MassGroupInput_Toggle_Content() {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        return 'sel';\r\n      case mgi_st.input:\r\n        return 'inp';\r\n    }\r\n  }\r\n\r\n  massGroupName = undefined\r\n  get MassGroupName() {\r\n    if (!this.massGroupName) {\r\n      this.massGroupName = util.GetMassGroupName(this);\r\n    }\r\n    return this.massGroupName;\r\n  }\r\n  set MassGroupName(v) {\r\n    this.massGroupName = v;\r\n  }\r\n\r\n  massGroupNameVM\r\n  get MassGroupNameVM() {\r\n    if (!this.massGroupNameVM) {\r\n      var obj = this.massGroupNameVM =\r\n        textUtil.get(this.MassGroupName, 'Tên set khối lượng');\r\n      obj.onSetContent = (v) => this.MassGroupName = v;\r\n    }\r\n    return this.massGroupNameVM;\r\n  }\r\n\r\n  massGroupSelectVM\r\n  get MassGroupSelectVM() {\r\n    if (!this.massGroupSelectVM) {\r\n      var obj = this.massGroupSelectVM = selectUtil.get([], undefined);\r\n      obj.Placeholder = 'Bộ set khối lượng';\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.MassGroupName = v?.Name\r\n      };\r\n    }\r\n    return this.massGroupSelectVM;\r\n  }\r\n\r\n  get MassGroupInput_Element() {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        var obj = this.MassGroupSelectVM;\r\n        var list = obj.Items;\r\n        var index = list.findIndex(x => x.Name === this.MassGroupName);\r\n        obj.InitialItem = index !== -1 ?\r\n          list[index] : undefined\r\n        return <SelectView store={obj} />\r\n      case mgi_st.input:\r\n        var obj = this.MassGroupNameVM;\r\n        obj.Content = this.MassGroupName;\r\n        return <InputView store={obj} />\r\n    }\r\n  }\r\n\r\n  MassGroupInputOK = () => {\r\n    if (!this.MassGroupName || this.MassGroupName.length === 0) {\r\n      switch (this.MassGroupInput_State) {\r\n        case mgi_st.select:\r\n          message.warning('Vui lòng chọn bộ thiết lập!')\r\n          return;\r\n        case mgi_st.input:\r\n          message.warning('Vui lòng nhập tên thiết lập!')\r\n          return;\r\n      }\r\n    }\r\n\r\n    var needValidateForOveride = true;\r\n    var items = pmData().MassGroupSetting_Dict.Items;\r\n    var index = items.findIndex(x => x.Name === this.MassGroupName);\r\n    var _id = undefined;\r\n    if (index !== -1) {\r\n      _id = items[index]._id;\r\n\r\n      if (this.MassGroupInput_State === mgi_st.input) {\r\n        needValidateForOveride = false;\r\n      }\r\n    }\r\n\r\n    const handle_UpdateMassGroup = () => {\r\n      var apiData = {\r\n        _id,\r\n        name: this.MassGroupName,\r\n        settingType: st.massgroup,\r\n        data: {\r\n          massGroupComponent: this.MainMGC.ApiData\r\n        }\r\n      };\r\n\r\n      var url = `https://api.bimdev.vn/api/hbs/mg`;\r\n\r\n      var isNew = _id ? false : true;\r\n      var command = isNew ? 'add' : 'edit';\r\n      const apiFunc = () => !isNew ? api.put(`${url}/${command}`, apiData) :\r\n        api.post(`${url}/${command}`, apiData);\r\n\r\n      apiFunc().then(response => response.data)\r\n        .then(data => {\r\n          var refVM = this.Reference_MassGroupSetting_SelectVM\r\n\r\n          var dict = pmData().MassGroupSetting_Dict;\r\n          var item = mgsUtil.get(data, dict);\r\n          var dictVM = pmDataVM().MassGroupSetting_DictVM;\r\n          var itemVM = mgsVMUtil.get(item, dictVM);\r\n\r\n          if (isNew) {\r\n            dict.Items.push(item);\r\n            dictVM.Items.push(itemVM);\r\n\r\n            refVM.Items.push(itemVM);\r\n          } else {\r\n            dict.Items[index] = item;\r\n            dictVM.Items[index] = item;\r\n\r\n            refVM.Items[index] = itemVM;\r\n            // Refresh lại selected item nếu trùng với đối tượng update\r\n            if (refVM.SelectedIndex === index) {\r\n              refVM.InitialItem = itemVM;\r\n            }\r\n          }\r\n\r\n          message.success(`${command} massgroup successfully`);\r\n        })\r\n\r\n      this.IsOnSaveMassGroup = false;\r\n      this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n    }\r\n\r\n    if (needValidateForOveride) {\r\n      handle_UpdateMassGroup();\r\n    } else {\r\n      this.Override_MassGroup_Modal_OKFunc =\r\n        () => handle_UpdateMassGroup();\r\n\r\n      this.Is_Override_MassGroup_Modal_Open = true;\r\n    }\r\n  }\r\n\r\n  Is_Override_MassGroup_Modal_Open = false\r\n\r\n  get Override_MassGroup_ModalElement() {\r\n    var title = 'Cảnh báo'\r\n    var content = 'Thiết lập đã có sẵn, bạn có muốn ghi đè không?'\r\n\r\n    const modalCancel = () =>\r\n      this.Is_Override_MassGroup_Modal_Open = false\r\n\r\n    const modalOK = () => {\r\n      this.Is_Override_MassGroup_Modal_Open = false\r\n      this.Override_MassGroup_Modal_OKFunc();\r\n    }\r\n\r\n    return <Modal title={title}\r\n      visible={this.Is_Override_MassGroup_Modal_Open}\r\n      onOk={modalOK} onCancel={modalCancel}>\r\n      {content}\r\n    </Modal>\r\n  }\r\n\r\n  MassGroupInputCancel = () => {\r\n    this.IsOnSaveMassGroup = false;\r\n    this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n  }\r\n\r\n  AddMainRow = () => {\r\n    return rowUtil.Add(undefined, this);\r\n  }\r\n\r\n  // Excel Export\r\n  get ExportTitle() {\r\n    var text = pmData().CurrentProject?.Name;\r\n    text = text ? text + '_' : '';\r\n\r\n    if (this.ColumnField === mif.Phase) {\r\n      text += 'phase_'\r\n    }\r\n\r\n    const formatedDate = dayjs(Date.now()).format(\"YYMMDD\");\r\n    text += `masstable_${formatedDate}`\r\n    return text;\r\n  }\r\n\r\n  get ExcelWorkbook() {\r\n    return wbUtil.get(this).ResultData;\r\n  }\r\n\r\n  excelExport\r\n  get ExcelExport() {\r\n    if (!this.excelExport) {\r\n      this.excelExport = eeUtil.get(\r\n        undefined, undefined,\r\n        () => this.ExportTitle,\r\n        () => this.ExcelWorkbook);\r\n    }\r\n    return this.excelExport;\r\n  }\r\n\r\n  Export = () => {\r\n    this.ExcelExport.Export();\r\n  }\r\n\r\n  // Lưu trữ các Row tạo bởi người dùng\r\n  // Trước mặt dùng để xử lý lỗi không update TotalValue\r\n  // trong lần đầu tiên truy xuất bảng khối lượng\r\n  CreatedByUser_Rows\r\n  Handled_CreatedByUser_Rows\r\n\r\n  Add_Handled_CreatedByUser_Row = (row) => {\r\n    this.Handled_CreatedByUser_Rows.push(row);\r\n\r\n    if (this.CreatedByUser_Rows.length === this.Handled_CreatedByUser_Rows.length){\r\n      // Xử lý TotalValue thành công với tất cả các CreatedByUser_Row\r\n    }\r\n  }\r\n}","import MassColumn from \"./MassColumn\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassColumn();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import {ExcelExport} from './ExcelExport'\r\n\r\nexport const get = (fileName, wb, ovrgFileName, ovrgWb) => {\r\n  var qI = new ExcelExport();\r\n\r\n  qI.FileName = fileName;\r\n  qI.Override_Get_FileName = ovrgFileName;\r\n  qI.Workbook = wb;\r\n  qI.Override_Get_Workbook = ovrgWb;\r\n\r\n  return qI;\r\n}","import MassTable from \"../table/MassTable\";\r\nimport * as util from './MassItem_DictUtil'\r\n\r\nexport default class MassItem_Dict {\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n    this.MassTable.Items = v;\r\n  }\r\n\r\n  massTable\r\n  get MassTable() {\r\n    if (!this.massTable) {\r\n      this.massTable = util.GetMassTable(this);\r\n    }\r\n    return this.massTable;\r\n  }\r\n\r\n  set MassGroupSetting(v)  {\r\n    this.MassTable.MassGroupSetting = v;\r\n  }\r\n}","import MassTable from \"../table/MassTable\";\r\n\r\n// Property\r\nexport const GetMassTable = (q) => {\r\n  var qI = new MassTable();\r\n  qI.Dict = q;\r\n\r\n  return qI;\r\n}","import MassItem_Dict from '../item/MassItem_Dict';\r\nimport * as util from './MassResultCompUtil'\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as mif from '../item/MassItemField'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassResultComp {\r\n  Projects = []\r\n\r\n  Phases = []\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict(){\r\n    if (!this.massItem_Dict){\r\n      this.massItem_Dict = util.GetMassItem_Dict(this);\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  isHavePhase = false\r\n  get IsHavePhase(){\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v){\r\n    this.isHavePhase = v;\r\n    if (v){\r\n    this.MassItem_Dict.MassTable.ColumnField = mif.Phase\r\n    }else{\r\n      this.MassItem_Dict.MassTable.ColumnField = mif.Project\r\n    }\r\n  }\r\n\r\n  GetMassData = () => {\r\n     // Gắn thông tin truy xuất lần đầu hay không\r\n     if (pmData().Is_First_Get_MassTable === undefined){\r\n      // undefined => truy xuất lần đầu\r\n      pmData().Is_First_Get_MassTable = true;\r\n    } else {\r\n      // có giá trị => không phải lần đầu\r\n      pmData().Is_First_Get_MassTable = false;\r\n    }\r\n    \r\n    var wp_Dict = pmData().Workpackage_Dict;\r\n    if (wp_Dict.IsDataChanged){\r\n      wp_Dict.RefreshData();\r\n    }\r\n\r\n    massItemUtil.getAll(this.ApiData, (items) => {\r\n      var dict = this.MassItem_Dict;\r\n\r\n      dict.MassGroupSetting = this.MassGroupSetting ? \r\n        this.MassGroupSetting : undefined;\r\n      dict.Items = items;\r\n      \r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n}","import MassItem_Dict from \"../item/MassItem_Dict\"\r\n\r\n\r\n//\r\nexport const GetMassItem_Dict = (q) => {\r\n  var qI = new MassItem_Dict();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n// Method\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    projectIds : q.Projects.map(x => x._id),\r\n    phaseIds : q.IsHavePhase ? q.Phases.map(x => x._id) : undefined\r\n  }\r\n}","import { Button, message, Space, Tag } from \"antd\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport TableVM from \"../../../../table/TableVM\";\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new RebarMass_Dict();\r\n  qI.Project = project;\r\n\r\n  var projectId = qI.projectId;\r\n  massItemUtil.getRebars(projectId, (items) => {\r\n    qI.Items = items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n  qI.Columns = [\r\n    colUtil.get('Tên cấu kiện', ['Info', 'elementName'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.elementName)\r\n      ], qI),\r\n\r\n    colUtil.get('Hạng mục', ['Info', 'workItem'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.workItem)\r\n      ], qI),\r\n\r\n    colUtil.get('Đường kính', ['Info', 'diameter'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.diameter)\r\n      ], qI),\r\n\r\n    colUtil.get('Khối lượng', ['Value'], null, qI),\r\n\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return massItemUtil.GetDefaultRebarMass(q.Project);\r\n  }\r\n\r\n  qI.OnEditItem = (item) => {\r\n    item.AddDatabase();\r\n  }\r\n\r\n  qI.OnDeleteItem = (item) => {\r\n    item.DeleteDatabase();\r\n  }\r\n\r\n  return qI;\r\n}","export const m = \"m\";\r\nexport const m2 = \"m2\";\r\nexport const m3 = \"m3\";\r\nexport const kg = \"kg\";","import * as util from './RebarMass_DictUtil'\r\n\r\nexport default class RebarMass_Dict {\r\n  project\r\n  get Project(){\r\n    return this.project;\r\n  }\r\n  set Project(v){\r\n    this.project = v;\r\n    this.projectId = v._id;\r\n  }\r\n\r\n  projectId\r\n\r\n  items = []\r\n  get Items(){\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.TableVM.DataSource = v;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM){\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './LevelGroupUtil'\r\n\r\nexport class LevelGroup {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.LevelGroups.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      levels : this.Levels ? this.Levels : [],\r\n      primary: this.Primary\r\n    }\r\n  }\r\n\r\n  get Count(){\r\n    return this.Levels.length\r\n  }\r\n\r\n\r\n  OnGetLevelStorageList_Func_Dict = []\r\n  get GetLevelStorageList(){\r\n    return this.getLevelStorageList;\r\n  }\r\n  set GetLevelStorageList(v){\r\n    this.getLevelStorageList = v;\r\n    this.OnGetLevelStorageList_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  IsGet_LevelStorageList\r\n\r\n  get LevelStorageList (){\r\n    var obj = this.Dict.LevelStorageList;\r\n    if (!obj && !this.IsGet_LevelStorageList){\r\n      this.IsGet_LevelStorageList = true;\r\n      this.Setting.OnGetLevelStorageList_Funcs.push(() => {\r\n        this.GetLevelStorageList = true\r\n      });\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Setting (){\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  get LevelIndexs(){\r\n    return this.Levels.map(x => this.LevelStorageList.indexOf(x));\r\n  }\r\n\r\n  get MinLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.min.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get MaxLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.max.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get Description(){\r\n    if (!this.LevelStorageList) return undefined;\r\n    return `Typ: ${this.MinLevel} - ${this.MaxLevel} (${this.Count})`;\r\n  }\r\n\r\n  get FullDescription() {\r\n    if (!this.Description) return undefined;\r\n    return `${this.Dict.FilterDescription} (${this.Description})`;\r\n  }\r\n\r\n  primary\r\n  get Primary(){\r\n    if (!this.primary){\r\n      this.primary = util.GetDefaultPrimary(this);\r\n    }\r\n    return this.primary\r\n  } set Primary(v){\r\n    this.primary = v;\r\n  }\r\n}","import { LevelGroup } from \"./LevelGroup\"\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new LevelGroup();\r\n\r\n  if (Array.isArray(data)) {\r\n    qI.Levels = data;\r\n  } else {\r\n    qI.Levels = data.levels;\r\n    qI.Primary = data.primary\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LevelGroup();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as it from './TLS_FilterValue_InputType'\r\n\r\nexport class TLS_FilterValue {\r\n  Value = undefined\r\n  InputType = it.select\r\n\r\n  get ApiData(){\r\n    return {\r\n      value: this.Value,\r\n      inputType : this.InputType\r\n    }\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { TLS_FilterValue } from './TLS_FilterValue';\r\n\r\nexport class TLS_Filter {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  //Values = [ 'Cột' ]\r\n  get Values(){\r\n    return this.Items.filter(x => x.Value).map(x => x.Value);\r\n  }\r\n\r\n  Items = []\r\n\r\n  AddItem = () => {\r\n    var item = new TLS_FilterValue();\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  field\r\n  get Field(){\r\n    if (!this.field){\r\n      this.field = this.FieldStorageList[0]\r\n    }\r\n    return this.field;\r\n  } set Field(v){\r\n    this.field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      field : this.Field,\r\n      items : this.Items.filter(x => x.Value).map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Description() {\r\n    var obj =  this.Values.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += ', ';\r\n      }\r\n      a += b;\r\n      return a;\r\n    }, '')\r\n\r\n    return `${this.Field}: ${obj}`;\r\n  }\r\n}","import { TLS_Filter } from \"./TLS_Filter\";\r\nimport { TLS_FilterValue } from \"./TLS_FilterValue\";\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Field = data.field;\r\n\r\n  if (data.items){\r\n    qI.Items = data.items.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x.value;\r\n      obj.InputType = x.inputType\r\n      return obj;\r\n    })\r\n  } else {\r\n    qI.Items = data.values.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x;\r\n      return obj;\r\n    })\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\nimport * as util from './TLS_PageItemUtil'\r\n\r\nexport class TLS_PageItem {\r\n  _id\r\n  get id(){\r\n    if (!this._id){\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  Name = 'tên setting'\r\n\r\n  get Index (){\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.PageItems.splice(this.Index, 1);\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  // Level Groups\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups\r\n  get LevelGroups(){\r\n    if (!this.levelGroups){\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  } set LevelGroups(v){\r\n    this.levelGroups = v;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.GetDefault(this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  filters\r\n  get Filters(){\r\n    if (!this.filters){\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  } set Filters(v){\r\n    this.filters = v;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.GetDefault(this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n\r\n  get FilterDescription() {\r\n    var obj = this.Filters.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += '; ';\r\n      }\r\n      a += b.Description;\r\n      return a;\r\n    }, '')\r\n    return obj;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      levelGroups : this.LevelGroups.map(x => x.ApiData).filter(x => x.levels.length !== 0),\r\n      filters : this.Filters.map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n}","import { TLS_PageItem } from \"./TLS_PageItem\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = data.name;\r\n  qI.Filters = data.filters.map(x => filterUtil.get(x, qI));\r\n  qI.LevelGroups = data.levelGroups ? data.levelGroups.map(x => levelGroupUtil.get(x, qI))\r\n     : data.levels.map(x => levelGroupUtil.get(x, qI))\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = 'setting 1';\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetLevelGroups = (q) => {\r\n  return [ levelGroupUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return [ filterUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport class TypicalLevelSettingData {\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n  \r\n  // Page Item\r\n  pageItems\r\n  get PageItems(){\r\n    if (!this.pageItems){\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  } set PageItems(v){\r\n    this.pageItems = v;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.GetDefault(this);\r\n    this.PageItems.push(item);\r\n    item.Name = `setting ${item.Index +1}`\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      pageItems : this.PageItems.map(x => x.ApiData)\r\n    }\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSettingData } from './TypicalLevelSettingData';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.PageItems = data.pageItems.map(x => pageItemUtil.get(x, qI));\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return [ pageItemUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingUtil'\r\n\r\nexport class TypicalLevelSetting extends Setting {\r\n  fieldFilterStorageList\r\n  get FieldFilterStorageList(){\r\n    if (!this.fieldFilterStorageList){\r\n      this.fieldFilterStorageList = util.GetFieldFilterStorageList();\r\n    }\r\n    return this.fieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    util.SaveDatabase(this)\r\n  }\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n    this.GetLevelStorageList = true;\r\n  }\r\n\r\n  OnGetLevelStorageList_Funcs = []\r\n\r\n  set GetLevelStorageList(v){\r\n    this.OnGetLevelStorageList_Funcs.forEach(x => x());\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './TypicalLevelSettingDataUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSetting } from './TypicalLevelSetting';\r\nimport * as st from '../base/SettingType'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\nimport { message } from 'antd';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (data, project, phase) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.SettingType = data.settingType;\r\n  qI.Data = dataUtil.get(data.data, qI);\r\n  qI.Project = project;\r\n  qI.Phase = phase;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (project) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI.Name = 'thiết lập ...';\r\n  qI.Description = 'Mô tả thiết lập ...';\r\n  qI.SettingType = st.typicallevel\r\n  qI.Data = dataUtil.GetTest(qI);\r\n  qI.Project = project;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFromDb_Async = (project, phase, handle) => {\r\n  var apiData = {\r\n    projectId: project._id,\r\n    phaseId: phase?._id\r\n  }\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  const apiFunc = () => api.post(`${url}/get`, apiData)\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      var resData = data ? get(data, project, phase) : undefined;\r\n      var editData = resData ? resData : GetTest(project);\r\n      handle(resData, editData);\r\n    })\r\n}\r\n\r\n// Property\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}\r\n\r\n// Method\r\nexport const SaveDatabase = (q) => {\r\n  var _id = q._id;\r\n  var apiData = q.ApiData;\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  var isNew = _id ? true : false\r\n  const apiFunc = () => isNew ?\r\n    api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew) q._id = data._id\r\n      message.success('add setting successfully!');\r\n    })\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  var level_Dict = q.Project.Level_Dict;\r\n\r\n  const getLevelsFunc = (items) => {\r\n    return items.map(x => x.Name);\r\n  }\r\n\r\n  if (level_Dict.Items) {\r\n    return getLevelsFunc(level_Dict.Items);\r\n  } else {\r\n    level_Dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.LevelStorageList = getLevelsFunc(level_Dict.Items);\r\n    });\r\n  }\r\n}\r\n","import * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\nexport default class Phase {\r\n  exportSetVersions\r\n  get ExportSetVersions(){\r\n    return this.exportSetVersions;\r\n  }\r\n  set ExportSetVersions(v){\r\n    this.exportSetVersions = v;\r\n    this.exportSetVersionIds = v.map(x => x._id);\r\n  }\r\n\r\n  OnGetExportSetVersions_Func = [];\r\n\r\n  set GetExportSetVersions(v){\r\n    this.OnGetExportSetVersions_Func.forEach(x => x());\r\n  }\r\n\r\n  exportSetVersionIds\r\n\r\n  get Project(){\r\n    return this.Dict.Dict;\r\n  }\r\n\r\n  OnGetTypicalLevelSetting_Funcs = []\r\n\r\n  set GetTypicalLevelSetting(v) {\r\n    this.OnGetTypicalLevelSetting_Funcs.forEach(x => x());\r\n  }\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this.Project, this, \r\n          (resData, editData) => {\r\n          this.TypicalLevelSetting = resData;\r\n          this.GetTypicalLevelSetting = true\r\n        })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport Phase from './Phase';\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Phase();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.Dict = dict;\r\n\r\n  GetExportSetVersionData(q._id, (data) => {\r\n    qI.ExportSetVersions = data;\r\n    qI.GetExportSetVersions = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbphase/list?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}\r\n\r\nexport const GetExportSetVersionData = (phaseId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/byphase?phaseId=${phaseId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}","import { message } from 'antd';\r\nimport * as util from './Phase_DictUtil'\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as itemUtil from './PhaseUtil'\r\nimport * as settingUtil from '../setting/base/SettingUtil'\r\n\r\nexport class Phase_Dict {\r\n  get Project() {\r\n    return this.Dict;\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n  \r\n  AddMassVersion = () => {\r\n    var apiData = this.Input.ApiData;\r\n    var url = `https://api.bimdev.vn/api/hbphase`;\r\n\r\n    const apiFunc = () => api.put(`${url}/mass/add`, apiData);\r\n    var project = this.Project;\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        var item = itemUtil.get(data, this);\r\n        this.Add(item);\r\n        message.success(\"create version successfully!\");\r\n\r\n        settingUtil.AddPhase(project._id, data._id);\r\n      })\r\n\r\n    // Thêm version mới cho InputExportSet sau khi lưu version\r\n    var addVersionFunc = (exportSet) => exportSet.AddVersion();\r\n\r\n    var inputExportSet = project.InputExportSet;\r\n    if (!inputExportSet){\r\n      project.OnGetInputExportSetDone_Funcs.push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        addVersionFunc(inputExportSet);\r\n      })\r\n    }else{\r\n      addVersionFunc(inputExportSet);\r\n    }\r\n  }\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport const AddPhase = (projectId, phaseId) => {\r\n  var apiData = {\r\n    projectId, phaseId\r\n  }\r\n  var url = `https://api.bimdev.vn/api/hbs`;\r\n\r\n  const apiFunc = () => api.post(`${url}/addphase`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      message.success(\"attach phase to settings successfully!\");\r\n    })\r\n}","export default class PhaseInput {\r\n  get ApiData(){\r\n    var projectId = this.Dict.Dict._id;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n\r\n    return {\r\n      projectId, name, description\r\n    }\r\n  }\r\n}","import { Phase_Dict } from \"./Phase_Dict\";\r\nimport * as phaseUtil from './PhaseUtil'\r\nimport * as inputUtil from './PhaseInputUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Phase_Dict();\r\n  qI.Dict = project;\r\n\r\n  phaseUtil.getByProject(project._id, (data) => {\r\n    qI.Items = data.map(x => phaseUtil.get(x, qI));\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputUtil.get(q);\r\n}","import PhaseInput from './PhaseInput';\r\n\r\nexport const get = (dict) => {\r\n  var qI = new PhaseInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Version 1';\r\n  qI.Description = 'mô tả phiên bản';\r\n\r\n  return qI;\r\n}","import RebarMass_Dict from '../mass/rebar/RebarMass_Dict';\r\nimport * as phaseDictUtil from '../phase/Phase_DictUtil'\r\nimport * as util from './ProjectUtil'\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\nexport default class Project {\r\n  phase_Dict\r\n  get Phase_Dict() {\r\n    if (!this.phase_Dict) {\r\n      this.phase_Dict = phaseDictUtil.get(this);\r\n    }\r\n    return this.phase_Dict;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = util.GetRebarMass_Dict(this);\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  inputExportSet\r\n  get InputExportSet() {\r\n    if (!this.inputExportSet) {\r\n      util.GetInputExportSet_Async(this);\r\n    }\r\n    return this.inputExportSet;\r\n  }\r\n  set InputExportSet(v) {\r\n    this.inputExportSet = v;\r\n    this.GetInputExportSetDone = true;\r\n  }\r\n\r\n  OnGetInputExportSetDone_Funcs = []\r\n\r\n  getInputExportSetDone\r\n  get GetInputExportSetDone() {\r\n    return this.getInputExportSetDone;\r\n  }\r\n  set GetInputExportSetDone(v) {\r\n    this.getInputExportSetDone = v;\r\n    this.OnGetInputExportSetDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  level_Dict\r\n  get Level_Dict() {\r\n    if (!this.level_Dict) {\r\n      this.level_Dict = util.GetLevel_Dict(this);\r\n    }\r\n    return this.level_Dict;\r\n  }\r\n\r\n  OnGetTypicalLevelSetting_Funcs = []\r\n\r\n  set GetTypicalLevelSetting(v) {\r\n    this.OnGetTypicalLevelSetting_Funcs.forEach(x => x());\r\n  }\r\n\r\n  IsOnGetDb_Async\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this, null, \r\n          (resData, editData) => {\r\n          this.TypicalLevelSetting = resData;\r\n          this.TypicalLevelSetting_ForEdit = editData;\r\n          this.GetTypicalLevelSetting = true\r\n        })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = this.TypicalLevelSetting;\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  url\r\n  get Url() {\r\n    if (!this.url) {\r\n      var isHash = true;\r\n      var obj = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/project`;\r\n      obj = `${obj}/${this._id}`;\r\n\r\n      this.url = obj;\r\n    }\r\n    return this.url;\r\n  }\r\n}","import * as util from './ExportSetUtil'\r\n\r\nexport class ExportSet {\r\n  currentVersion\r\n  get CurrentVersion(){\r\n    if (!this.currentVersion){\r\n      util.GetCurrentVersion_Async(this);\r\n    }\r\n    return this.currentVersion;\r\n  }\r\n  set CurrentVersion(v){\r\n    this.currentVersion = v;\r\n    this.GetCurrentVersionDone = v;\r\n  }\r\n\r\n  OnGetCurrentVersionDone_Func =[]\r\n\r\n  set GetCurrentVersionDone(v){\r\n    this.OnGetCurrentVersionDone_Func.forEach(x => x());\r\n  }\r\n\r\n  AddVersion = () => {\r\n    util.AddVersion_Async(this);\r\n  }\r\n}","export class ExportSetVersion {\r\n  \r\n}","import * as api from  '../../../../util/apiUtil'\r\nimport { ExportSetVersion } from \"./ExportSetVersion\";\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSetVersion();\r\n  qI._id = data._id;\r\n  return qI;\r\n}\r\n\r\nexport const getLastestByExportSet = (exportSetId, handle) => {\r\n  if (!exportSetId) return;\r\n  var url = `https://api.bimdev.vn/api/hbesv/last?exportSetId=${exportSetId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","import { ExportSet } from \"./ExportSet\"\r\nimport * as api from  '../../../../util/apiUtil'\r\nimport * as versionUtil from './ExportSetVersionUtil'\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSet();\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.RetrieveFrom = data.retrieveFrom;\r\n  return qI;\r\n}\r\n\r\nexport const GetCurrentVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  versionUtil.getLastestByExportSet(exportSetId, (item) => {\r\n    if (!item) {\r\n      AddVersion_Async(q);\r\n    } else {\r\n      q.CurrentVersion = item;\r\n    }\r\n  })\r\n}\r\n\r\nexport const AddVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  var apiData = {\r\n    exportSetId\r\n  }\r\n\r\n  versionUtil.add(apiData, (addItem) => {\r\n    q.CurrentVersion = addItem;\r\n  })\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbes/input?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbes/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","export class Level_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","export class Level\r\n{\r\n  Name\r\n  Elevation\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { Level } from \"./Level\"\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new Level();\r\n  qI.Name = data.name;\r\n  qI.Elevation = data.elevation;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (apiData, dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbl/list\";\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      if (!data) data = []\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport Project from './Project';\r\nimport * as rebarMassDictUtil from '../mass/rebar/RebarMass_DictUtil'\r\nimport * as exportSetUtil from '../exportset/ExportSetUtil'\r\nimport * as vrf from '../value/ValueRetrieveFrom'\r\nimport * as levelDictUtil from '../level/Level_DictUtil'\r\nimport * as levelTypicalUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Project();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Code = q.code;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getById = (_id, handle) => {\r\n  if (!_id) return undefined;\r\n  var url = `https://api.bimdev.vn/api/hbp/get?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      if (handle) {\r\n        handle(item);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetRebarMass_Dict = (q) => {\r\n  return rebarMassDictUtil.get(q);\r\n}\r\n\r\nexport const GetInputExportSet_Async = (q) => {\r\n  var projectId = q._id;\r\n\r\n  exportSetUtil.getByProject(projectId, (item) => {\r\n    if (!item) {\r\n      var apiData = {\r\n        projectId,\r\n        name: 'Dữ liệu khối lượng input',\r\n        description: 'mô tả dữ liệu',\r\n        retrieveFrom: vrf.input\r\n      }\r\n      exportSetUtil.add(apiData, (addItem) => {\r\n        q.InputExportSet = addItem;\r\n      })\r\n    } else {\r\n      q.InputExportSet = item;\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetLevel_Dict = (q) => {\r\n  return levelDictUtil.get(q)\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  return levelTypicalUtil.GetTest(q);\r\n}","export const model = \"model\";\r\nexport const input = \"input\";","import { Level_Dict } from \"./Level_Dict\"\r\nimport * as itemUtil from './LevelUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Level_Dict();\r\n  qI.Project = project;\r\n\r\n  itemUtil.getAll({ projectId : project._id }, qI, (items) => {\r\n    qI.Items = items.sort((a,b) => a.Elevation - b.Elevation);\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ProjectUtil'\r\n\r\nexport class Project_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class ElementFilterSetting extends Setting {\r\n  \r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './ElementFilterSettingDataUtil'\r\n\r\nexport default class ElementFilterSettingData {\r\n  CategoryFilter\r\n\r\n  IsHaveFamilyFilter\r\n\r\n  FamilyFilter\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport ElementFilterSettingData from './ElementFilterSettingData';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as fct from '../../filter/FilterCategoryType'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingData();\r\n  qI.CategoryFilter = filterUtil.get(q.categoryFilter);\r\n  return qI;\r\n}\r\n\r\nexport const getDefault = () => {\r\n  var qI = new ElementFilterSettingData();\r\n\r\n  var cateFilter = new EntFilter();\r\n  cateFilter.CategoryType = fct.category;\r\n  cateFilter.ValueType = fvt.bystring;\r\n  cateFilter.StringFilterType = sft.byequal;\r\n  cateFilter.Values = ['Floors'];\r\n  qI.CategoryFilter = cateFilter;\r\n\r\n  qI.IsHaveFamilyFilter = false;\r\n\r\n  var familyFilter = new EntFilter();\r\n  familyFilter.CategoryType = fct.family;\r\n  familyFilter.ValueType = fvt.bystring;\r\n  familyFilter.StringFilterType = sft.byequal;\r\n  familyFilter.Values = [];\r\n  qI.FamilyFilter = familyFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    categoryFilter : q.CategoryFilter.ApiData,\r\n    familyFilter : q.IsHaveFamilyFilter ? \r\n      q.FamilyFilter.ApiData : undefined\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport ElementFilterSetting from \"./ElementFilterSetting\"\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/ef/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as util from './SettingInputUtil'\r\n\r\nexport default class SettingInput {\r\n  Name\r\n  Description\r\n  SettingType\r\n\r\n  data\r\n  get Data() {\r\n    if (!this.data) {\r\n      this.data = this.GetData();\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n  }\r\n\r\n  GetData = () => {\r\n    if (this.OnGetData) {\r\n      return this.OnGetData();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem(){\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v){\r\n    this.editItem = v;\r\n    if (!v){\r\n      this.EditItemId = undefined;\r\n    }\r\n    else{\r\n      this.EditItemId = v._id;\r\n    }\r\n  }\r\n\r\n\r\n  EditItemId\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.EditItem = undefined;\r\n    }\r\n  }\r\n\r\n  urlPrefix\r\n  get UrlPrefix() {\r\n    if (!this.urlPrefix){\r\n      this.urlPrefix = util.GetUrlPrefix(this);\r\n    }\r\n    return this.urlPrefix;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.EditItemId;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var settingType = this.SettingType;\r\n    var data = this.Data.ApiData;\r\n    var prefix = this.UrlPrefix;\r\n\r\n    var apiData = {\r\n      _id, name, description, settingType, data\r\n    }\r\n    var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewItem = this.GetEditItem(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n}","import * as st from './SettingType'\r\n\r\nexport const GetUrlPrefix = (q) => {\r\n  var prefix = undefined\r\n  switch (q.SettingType) {\r\n    case st.elementfilter:\r\n      prefix = 'ef';\r\n      break;\r\n    case st.massexport:\r\n      prefix = 'me';\r\n      break;\r\n    case st.massgroup:\r\n      prefix = 'mg';\r\n      break;\r\n  }\r\n  return prefix;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as elementFilterSettingUtil from './ElementFilterSettingUtil'\r\n\r\nexport default class ElementFilterSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return elementFilterSettingUtil.get(data, dict);\r\n  }\r\n}","import ElementFilterSettingInput from \"./ElementFilterSettingInput\";\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new ElementFilterSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bộ lọc cột';\r\n  qI.Description = 'mô tả bộ lọc';\r\n  qI.SettingType = st.elementfilter;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.getDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ElementFilterSettingUtil'\r\nimport * as inputUtil from './ElementFilterSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class ElementFilterSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassExportSettingDataUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\nimport { reaction } from \"mobx\";\r\n\r\nexport default class MassExportSettingData {\r\n  elementFilterId\r\n\r\n  elementFilter\r\n  get ElementFilter(){\r\n    if (!this.elementFilter){\r\n      this.elementFilter = util.GetElementFilter(this);\r\n    }\r\n    return this.elementFilter;\r\n  }\r\n  set ElementFilter(v) {\r\n    this.elementFilter = v;\r\n    if (!v){\r\n      this.elementFilterId = undefined;\r\n    }\r\n    else{\r\n      this.elementFilterId = v._id;\r\n    }\r\n  }\r\n\r\n  valueSettings\r\n  get ValueSettings(){\r\n    if (!this.valueSettings){\r\n      this.valueSettings = util.GetDefaultValueSettings(this);\r\n    }\r\n    return this.valueSettings;\r\n  }\r\n  set ValueSettings(v){\r\n    this.valueSettings = v;\r\n  }\r\n\r\n  AddNewValueSetting = () => {\r\n    var modelList = this.ValueSettings;\r\n    var item = valueSettingUtil.GetDefault(this);\r\n    modelList.push(item);\r\n\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassExportSettingData from './MassExportSettingData';\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingData();\r\n  qI.elementFilterId = q.elementFilterId;\r\n  qI.ValueSettings = q.exportSettings.map(x => valueSettingUtil.get(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassExportSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilter = (q) => {\r\n  var elemFilterId = q.elementFilterId;\r\n  if (!elemFilterId) return undefined;\r\n\r\n  var list = pmData().ElementFilterSetting_Dict.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === elemFilterId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetDefaultValueSettings = (q) => {\r\n  return [ valueSettingUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    elementFilterId : q.elementFilterId,\r\n    exportSettings : q.ValueSettings.map(x => x.ApiData)\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassExportSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSetting from './MassExportSetting';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/me/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as massExportSettingUtil from './MassExportSettingUtil'\r\n\r\nexport default class MassExportSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return massExportSettingUtil.get(data, dict);\r\n  }\r\n}","import * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSettingInput from \"./MassExportSettingInput\";\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new MassExportSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bêtông sàn';\r\n  qI.Description = 'mô tả thiết lập';\r\n  qI.SettingType = st.massexport;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.GetDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './MassExportSettingUtil'\r\nimport * as inputUtil from './MassExportSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassExportSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import * as itemUtil from './MassGroupSettingUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassGroupSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n}","\r\nexport default class VCS_Item{\r\n  Color\r\n  Filter\r\n}","import * as util from './VersionCompareSettingUtil'\r\n\r\nexport default class VersionCompareSetting{\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems();\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as nft from '../../filter/NumberFilterType'\r\nimport VCS_Item from \"./VCS_Item\";\r\n\r\nexport const GetItems = (q) => {\r\n  var list = [];\r\n\r\n  // < 80\r\n  var item = new VCS_Item();\r\n  item.Color = '#1956c9';\r\n\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bysmaller;\r\n  filter.Values = [ 0.80 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n  // 80 -85\r\n  item = new VCS_Item();\r\n  item.Color = '#3f79d6';\r\n\r\n  filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bybetween;\r\n  filter.IsEqualLeft = true;\r\n  filter.Values = [ 0.80, 0.85 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n   // 85 -90\r\n   item = new VCS_Item();\r\n   item.Color = '#6f9fe9';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.85, 0.90 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 90 -95\r\n   item = new VCS_Item();\r\n   item.Color = '#a5c2f2';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.9, 0.95 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 95 -100\r\n   item = new VCS_Item();\r\n   item.Color = '#c9d9f6';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.95, 1 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 100 -105\r\n   item = new VCS_Item();\r\n   item.Color = '#f3cccc';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1, 1.05 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 105 -110\r\n   item = new VCS_Item();\r\n   item.Color = '#e9999a';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1.05, 1.10 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#de6568';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.10, 1.15 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#c90010';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.15, 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 115 -120\r\n    item = new VCS_Item();\r\n    item.Color = '#980009';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybigger;\r\n    filter.Values = [ 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    return list;\r\n}","\r\nexport class WorkItemExportSetting_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","export class TrackingItem{\r\n  Values = []\r\n\r\n  Count = 0\r\n}","import * as genUtil from '../../../../util/generalUtil'\r\nimport { TrackingItem } from './TrackingItem';\r\n\r\nexport class Tracking{\r\n  Items = []\r\n\r\n  AddItem = (values) => {\r\n    var list = this.Items;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => genUtil.IsSameValues(x.Values, values));\r\n    if (index === -1){\r\n      item = new TrackingItem();\r\n      item.Values = values;\r\n      list.push(item);\r\n    } else {\r\n      item = list[index];\r\n    }\r\n\r\n    item.Count ++;\r\n    return item;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\n\r\nexport class WorkpackageInput {\r\n  Code\r\n  // = \"300\"\r\n  Name\r\n  // = \"Lắp đặt cốp thép\"\r\n  Description = 'mô tả công tác'\r\n  // = \"Mô tả quá trình lắp cốp thép\"\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.Workpackage = undefined;\r\n    }\r\n  }\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.WorkpackageId = undefined;\r\n    }\r\n    else{\r\n      this.WorkpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  WorkpackageId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    if (!v){\r\n      this.SupId = undefined;\r\n    }\r\n    else{\r\n      this.SupId = v._id;\r\n    }\r\n  }\r\n\r\n  SupId\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.WorkpackageId;\r\n    var code = this.Code;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var supId = this.SupId;\r\n\r\n    var apiData = {\r\n      _id, name, code, description, supId\r\n    };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp\";\r\n\r\n    const apiFunc =  () =>  _id ? \r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewWorkpackage = workpackageUtil.get(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  UpdateWorkpackage\r\n}","import { WorkpackageInput } from './WorkpackageInput';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\n\r\nexport class Workpackage_Dict {\r\n  constructor() {\r\n    workpackageUtil.getAll(this, (wps) => {\r\n      this.Workpackages = wps;\r\n      this.GetWorkpackagesDone = true;\r\n    });\r\n  }\r\n\r\n  Workpackages\r\n\r\n  set GetWorkpackagesDone(v) {\r\n    if (this.OnGetWorkpackagesDone) {\r\n      this.OnGetWorkpackagesDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentWorkpackage\r\n\r\n  workpackageInput\r\n  get WorkpackageInput() {\r\n    if (!this.workpackageInput){\r\n      var obj = this.workpackageInput = new WorkpackageInput();\r\n      obj.Dict = this;\r\n    }\r\n    return this.workpackageInput;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Workpackages.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.WorkpackageInput;\r\n    var wp = input.Workpackage;\r\n\r\n    if (!input.IsNew){\r\n      var action = () => { \r\n        wp.Code = input.Code;\r\n        wp.Name = input.Name;\r\n        wp.Description = input.Description;\r\n        wp.FullName = wp.GetFullName();\r\n      };\r\n      genUtil.UpdateFromModel(wp, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewWorkpackage);\r\n    }\r\n\r\n    this.IsDataChanged = true;\r\n  }\r\n\r\n  IsDataChanged\r\n\r\n  RefreshData = () => {\r\n    this.Workpackages.forEach(x => {\r\n      x.SubItems = undefined;\r\n      x.UpperList = undefined;\r\n      x.LowerList = undefined;\r\n      x.Rank = undefined\r\n    })\r\n\r\n    this.IsDataChanged = false;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workPackageUtil from '../../entity/workpackage/WorkpackageUtil'\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\nimport * as vrt from '../../entity/setting/massExport/exportSetting/MES_ValueRetrieveType'\r\nimport * as mpn from '../../entity/mass/MassPropertyName'\r\nimport * as mt from '../../entity/mass/MassType'\r\nimport * as mif from '../../entity/mass/item/MassItemField'\r\n\r\nexport const GetFilterValueTypes = (data) => {\r\n  return fvt.GetAll();\r\n}\r\n\r\nexport const GetStringFilterTypes = (data) => {\r\n  return sft.GetAll();\r\n}\r\n\r\nexport const GetValueRetrieveTypes = (data) => {\r\n  return vrt.GetAll();\r\n}\r\n\r\nexport const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Column']\r\n}\r\n\r\nexport const GetParameterNames = (data) => {\r\n  return ['Volume', 'HB_Formwork_Total']\r\n}\r\n\r\nexport const GetMassPropertyNames = (data) => {\r\n  return mpn.GetAll();\r\n}\r\n\r\nexport const GetMassItemFields = (data) => {\r\n  return mif.GetAll();\r\n}\r\n\r\nexport const GetMIFs_ForMassGroup = () => {\r\n  return mif.GetForMassGroup();\r\n}\r\n\r\nexport const GetMassTypes = (data) => {\r\n  return mt.GetAll();\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport MassResultComp from '../../entity/mass/result/MassResultComp';\r\nimport { Project_Dict } from '../../entity/project/Project_Dict';\r\nimport { ElementFilterSetting_Dict } from '../../entity/setting/elementFilter/ElementFilterSetting_Dict';\r\nimport { MassExportSetting_Dict } from '../../entity/setting/massExport/MassExportSetting_Dict';\r\nimport { MassGroupSetting_Dict } from '../../entity/setting/massGroup/MassGroupSetting_Dict';\r\nimport VersionCompareSetting from '../../entity/setting/versionCompare/VersionCompareSetting';\r\nimport { WorkItemExportSetting_Dict } from '../../entity/setting/workitemexport/WorkItemExportSetting_Dict';\r\nimport { Tracking } from '../../entity/tracking/Tracking';\r\nimport { Workpackage_Dict } from '../../entity/workpackage/Workpackage_Dict';\r\nimport { CategoryData } from './CategoryData';\r\nimport * as util from './PMDataUtil'\r\n\r\nexport class PMData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get categoryData(){\r\n    return CategoryData.Instance;\r\n  }\r\n\r\n  workpackage_Dict\r\n  get Workpackage_Dict() {\r\n    if (!this.workpackage_Dict){\r\n      this.workpackage_Dict = new Workpackage_Dict();\r\n    }\r\n    return this.workpackage_Dict;\r\n  }\r\n\r\n  elementFilterSetting_Dict\r\n  get ElementFilterSetting_Dict() {\r\n    if (!this.elementFilterSetting_Dict){\r\n      this.elementFilterSetting_Dict = new ElementFilterSetting_Dict();\r\n    }\r\n    return this.elementFilterSetting_Dict;\r\n  }\r\n\r\n  massExportSetting_Dict\r\n  get MassExportSetting_Dict() {\r\n    if (!this.massExportSetting_Dict){\r\n      this.massExportSetting_Dict = new MassExportSetting_Dict();\r\n    }\r\n    return this.massExportSetting_Dict;\r\n  }\r\n\r\n  massGroupSetting_Dict\r\n  get MassGroupSetting_Dict() {\r\n    if (!this.massGroupSetting_Dict){\r\n      this.massGroupSetting_Dict = new MassGroupSetting_Dict();\r\n    }\r\n    return this.massGroupSetting_Dict;\r\n  }\r\n\r\n  project_Dict\r\n  get Project_Dict() {\r\n    if (!this.project_Dict){\r\n      this.project_Dict = new Project_Dict();\r\n    }\r\n    return this.project_Dict;\r\n  }\r\n\r\n  massResultComp\r\n  get MassResultComp(){\r\n    if (!this.massResultComp){\r\n      this.massResultComp = new MassResultComp();\r\n    }\r\n    return this.massResultComp;\r\n  }\r\n  set MassResultComp(v){\r\n    this.massResultComp = v;\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = util.GetFilterValueTypes();\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = util.GetStringFilterTypes();\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = util.GetValueRetrieveTypes();\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.categoryData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = util.GetParameterNames();\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = util.GetMassPropertyNames();\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massItemFields\r\n  get MassItemFields(){\r\n    if (!this.massItemFields){\r\n      this.massItemFields = util.GetMassItemFields();\r\n    }\r\n    return this.massItemFields;\r\n  }\r\n\r\n  mifs_ForMassGroup\r\n  get MIFs_ForMassGroup(){\r\n    if (!this.mifs_ForMassGroup){\r\n      this.mifs_ForMassGroup = util.GetMIFs_ForMassGroup();\r\n    }\r\n    return this.mifs_ForMassGroup;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = util.GetMassTypes();\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  versionCompareSetting\r\n  get VersionCompareSetting(){\r\n    if (!this.versionCompareSetting){\r\n      this.versionCompareSetting = new VersionCompareSetting();\r\n    }\r\n    return this.versionCompareSetting;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = new WorkItemExportSetting_Dict();\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n\r\n  DebugPoints = []\r\n\r\n  tracking\r\n  get Tracking(){\r\n    if (!this.tracking){\r\n      this.tracking = new Tracking();\r\n    }\r\n    return this.tracking;\r\n  }\r\n\r\n  IsDebug = false\r\n\r\n  OnSet_CurrentProject_Func_Dict = []\r\n\r\n  UpdatedDate = '31/03/2021'\r\n\r\n  // Kiểm tra có phải lần đầu truy xuất bảng khối lượng\r\n  // sau khi mở trang web hay ko?\r\n  Is_First_Get_MassTable\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as util from './WorkpackageUtil'\r\n\r\nexport class Workpackage {\r\n  get Index() {\r\n    return this.Dict.Workpackages.indexOf(this);\r\n  }\r\n\r\n  _id\r\n\r\n  SupId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (this.OnCodeChanged) {\r\n      this.OnCodeChanged(v);\r\n    }\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (this.OnNameChanged) {\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged) {\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  fullName\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.GetFullName();\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n    if (this.OnFullNameChanged) {\r\n      this.OnFullNameChanged(v);\r\n    }\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n  set SubItems(v){\r\n    this.subItems = v;\r\n  }\r\n\r\n  upperList\r\n  get UpperList(){\r\n    if (!this.upperList){\r\n      this.upperList = util.GetUpperList(this);\r\n    }\r\n    return this.upperList;\r\n  }\r\n  set UpperList(v){\r\n    this.upperList = v;\r\n  }\r\n\r\n  lowerList\r\n  get LowerList(){\r\n    if (!this.lowerList){\r\n      this.lowerList = util.GetLowerList(this);\r\n    }\r\n    return this.lowerList;\r\n  }\r\n  set LowerList(v){\r\n    this.lowerList = v;\r\n  }\r\n\r\n  rank\r\n  get Rank() {\r\n    if (!this.rank){\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v){\r\n    this.rank = v;\r\n  }\r\n\r\n  get LowerIds() {\r\n    return this.LowerList.map(x => x._id);\r\n  }\r\n\r\n  GetFullName = () => {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  Delete = () => {\r\n    var { _id } = this;\r\n    var apiData = { _id };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete workpackage successfully'));\r\n\r\n    var dict = this.Dict;\r\n    dict.Workpackages.splice(this.Index, 1);\r\n    if (this.OnDelete) {\r\n      this.OnDelete();\r\n    }\r\n\r\n    dict.IsDataChanged = true;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../../single/model/PMData';\r\nimport { Workpackage } from \"./Workpackage\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (dbItem, dict) => {\r\n  var { _id, name, code, description, supId } = dbItem;\r\n\r\n  var qI = new Workpackage();\r\n  qI._id = _id;\r\n  qI.Name = name;\r\n  qI.Code = code;\r\n  qI.Description = description;\r\n  qI.SupId = supId;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supId = q.SupId;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var index = list.findIndex(x => x._id === supId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetSubItems = (q) => {\r\n  var id = q._id;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  return list.filter(x => x !== q && x.SupId === id);\r\n}\r\n\r\nexport const GetUpperList = (q) => {\r\n  var supItem = q.SupItem;\r\n  if (!supItem){\r\n    return [q];\r\n  }else{\r\n    var list = [...supItem.UpperList];\r\n    list.push(q);\r\n    return list;\r\n  }\r\n}\r\n\r\nexport const GetLowerList = (q) => {\r\n  var list = [q];\r\n  q.SubItems.forEach((x, i) => {\r\n    list.push.apply(list, x.LowerList);\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  var supItem = q.SupItem;\r\n  return supItem ? supItem.Rank +1 : 0;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbwp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var wps = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(wps);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as util from './Workpackage_DictVMUtil'\r\n\r\nexport class Workpackage_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      workpackageVMs: observable,\r\n    })\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  Workpackage_Dict\r\n\r\n  get M2VM() {\r\n    return this.Workpackage_Dict.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage_Dict.M2VM = v;\r\n  }\r\n\r\n  workpackageVMs = undefined\r\n  get WorkpackageVMs() {\r\n    if (!this.workpackageVMs){\r\n      this.workpackageVMs = util.GetWorkpackageVMs(this);\r\n    }\r\n    return this.workpackageVMs;\r\n  }\r\n\r\n  currentWorkpackageVM\r\n  set CurrentWorkpackageVM(v) {\r\n    this.Workpackage_Dict = v;\r\n    this.Workpackage_Dict.CurrentWorkpackage = v.Workpackage;\r\n\r\n    this.WorkpackageInputVM.WorkpackageVM = v;\r\n  }\r\n\r\n  workpackageInputMV\r\n  get WorkpackageInputVM() {\r\n    if (!this.workpackageInputVM){\r\n      this.workpackageInputVM = util.GetWorkpackageInputVM(this);\r\n    }\r\n    return this.workpackageInputVM;\r\n  }\r\n\r\n  Add = (itemView) => {\r\n    this.WorkpackageVMs.push(itemView);\r\n    if (this.OnAdd){\r\n      this.OnAdd(itemView);\r\n    }\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport CheckboxView from \"../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../select/SelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass Workpackage_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Workpackage_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n    var wp = data.CurrentWorkpackageVM = wps[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n\r\n    var elems = wps ? wps.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var inputVM = data.WorkpackageInputVM;\r\n    var commandVM = inputVM.CommandVM;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Công tác</b>\r\n        </Divider>\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search công tác\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={inputVM.CodeVM} />\r\n          <InputView store={inputVM.NameVM} />\r\n          <InputView store={inputVM.DescriptionVM} />\r\n          <SelectView store={inputVM.SupItemSelectVM} />\r\n          <div>\r\n            <CheckboxView store={inputVM.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={inputVM.AddDatabase}>{commandVM.Content}</Button>\r\n            {inputVM.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Workpackage_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\nimport SelectView from \"../../../select/SelectView\";\r\nimport { MultiSelectVM } from \"../../../select/MultiSelectVM\";\r\nimport MultiSelectView from \"../../../select/MultiSelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass EntFilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntFilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.ItemVMs;\r\n    var wp = data.CurrentItemVM = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <SelectView store={data.ValueTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <SelectView store={data.StringFilterTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <MultiSelectView store={data.ValuesSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntFilterView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataVM from \"./ElementFilterSettingDataVM\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { IsHaveFamilyFilter } = data;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập lọc Category\r\n        </Divider>\r\n        <EntFilterView store={data.CategoryFilterVM} />\r\n\r\n        <Divider orientation=\"left\" plain>\r\n          {/* Thiết lập lọc Family */}\r\n          <CheckboxView store={data.IsHaveFamilyFilterVM}/>\r\n        </Divider>\r\n        {IsHaveFamilyFilter? <EntFilterView store={data.FamilyFilterVM} /> : \"\"}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataView from \"./ElementFilterSettingDataView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    \r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Bộ lọc đối tượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search bộ lọc\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{marginTop:20}}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <ElementFilterSettingDataView store={input.DataVM}/>\r\n\r\n          <CheckboxView store={input.IsNewVM} />\r\n          <Button style={{margin:10}}\r\n            onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n          {input.DeleteView}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSetting_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../../input/InputView\";\r\nimport EntFilterView from \"../../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../../checkbox/CheckboxView\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as floatItemVMUtil from \"../../../../../float/FloatItemVMUtil\";\r\nimport FloatItemView from \"../../../../../float/FloatItemView\";\r\nimport { CloseCircleFilled } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MES_ValueSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MES_ValueSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var floatItemStore = floatItemVMUtil.get('top right')\r\n    floatItemStore.wrapper = <Button size='small' type='primary' \r\n      onClick={data.Delete}>x</Button>\r\n\r\n    return (\r\n      <>\r\n        <div style={{ padding: '10px 35px 10px 10px', margin: '8px auto', border: 'solid 0.5px', borderRadius: '10px', position:'relative' }}>\r\n          <FloatItemView store={floatItemStore} />\r\n          <SelectView store={data.RetrieveTypeSelectVM} />\r\n          <SelectView store={data.MassTypeSelectVM} />\r\n          <EntFilterView store={data.ValueFilterVM} />\r\n          <SelectView store={data.WorkpackageSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MES_ValueSettingView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleFilled } from \"@ant-design/icons\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassExportSettingDataVM from \"./MassExportSettingDataVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MES_ValueSettingView from \"./exportSetting/MES_ValueSettingView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var valueSettingElems = data.ValueSettingVMs.map((x, i) => {\r\n      return <MES_ValueSettingView key={i} store={x} />\r\n    })\r\n\r\n    return (\r\n      <>\r\n        <SelectView store={data.ElementFilterSelectVM} />\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập giá trị\r\n          <Button type='primary' size='small' onClick={data.AddNewValueSettingVM}\r\n            style={{marginLeft:15}}>+</Button>\r\n        </Divider>\r\n        {valueSettingElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MassExportSettingDataView from \"./MassExportSettingDataView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất khối lượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search thiết lập\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <MassExportSettingDataView store={input.DataVM} />\r\n\r\n          <div>\r\n            <CheckboxView store={input.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n            {input.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSetting_DictView)","import { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport MassCell_Value from \"./MassCell_Value\";\r\n\r\nclass MassCell_ValueView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassCell_Value();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    if (data.Dict.Row.Title === 'DẦM 6, 7'){\r\n      debugger\r\n      var value = data.Value;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {data.Value}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassCell_ValueView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Popover, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassCell from \"./MassCell\";\r\nimport './MassTable.css'\r\nimport Icon, { InfoCircleOutlined } from '@ant-design/icons';\r\nimport MassCell_ValueView from \"./value/MassCell_ValueView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassCellView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassCell();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* Đối tượng ẩn để cập nhập màu sắc Cell */}\r\n        <span className='d-none'>\r\n          {data.ContentVM.Content}\r\n        </span>\r\n\r\n        <td style={data.TDStyle}>\r\n          <div className='masscell__div'>\r\n            <div className='masscell__value'>\r\n              {data.IsHaveWarning ?\r\n                <Popover trigger='hover'\r\n                  content={<div>\r\n                    {data.TLS_LevelGroup_Descriptions ?\r\n                      data.TLS_LevelGroup_Descriptions.map(x => {\r\n                        return <span key={x}>{x}</span>\r\n                      })\r\n                      : ''}\r\n                  </div>}>\r\n                  <InfoCircleOutlined className='masscell__warningicon' />\r\n                </Popover>\r\n                : ''}\r\n              <a style={data.AStyle}\r\n                onClick={data.ShowDetail}>\r\n                {data.ContentVM.Content}\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassCellView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\nimport { EditableTextVM } from \"./EditableTextVM\";\r\nimport './Text.css'\r\n\r\nclass EditableTextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EditableTextVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.Render()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EditableTextView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select, Space } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MultiSelectView from \"../../../../select/MultiSelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRow from \"./MassRow\";\r\nimport MassCellView from \"./MassCellView\";\r\nimport { DownCircleOutlined, EnterOutlined, InfoCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\r\nimport EditableTextView from \"../../../../text/EditableTextView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassRowView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var table = data.Dict;\r\n    var columns = table.Columns;\r\n\r\n    var subElems = data.IsShowSub ? data.SubItems.map((x, i) => {\r\n      return <MassRowView store={x} key={x.id} />\r\n    }) : ''\r\n\r\n    var toggleButton = data.IsHaveSub ?\r\n      <Button size='small' style={{ marginRight: 5, minWidth: 25 }} type='primary'\r\n        onClick={data.ToggleSub}>\r\n        <TextView store={data.ToggleButtonContentVM} />\r\n      </Button>\r\n      : <div style={{ padding: '0 15.5px' }} />;\r\n\r\n    return (\r\n      <>\r\n        <tr>\r\n          <th scope=\"row\" >\r\n            <div className='massrow__title__wrapper'\r\n              style={data.Style}>\r\n              {toggleButton}\r\n              <span>\r\n                <EditableTextView store={data.Editable_TitleVM} />\r\n              </span>\r\n\r\n              {data.IsHave_Addition_Wrapper ?\r\n                <div className='massrow__addition__wrapper'>\r\n                  {data.AdditionInfomation_Element}\r\n                  {data.RawValue_Element}\r\n                </div>\r\n                : ''}\r\n\r\n              {data.HoverToolElement}\r\n              {data.ModalElement}\r\n            </div>\r\n          </th>\r\n          {columns.map((y, j) => {\r\n            var cell = table.GetCell(y, data, false);\r\n            return cell ? <MassCellView key={cell.id} store={cell} /> : ''\r\n          })}\r\n        </tr>\r\n        {subElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRowView)","import { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { CSVExport } from \"./CSVExport\";\r\n\r\nclass CSVExportView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new CSVExport();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  Test = (e) => {\r\n    debugger\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <CSVLink data={data.Data} filename={data.FileName}\r\n          headers={data.Headers}\r\n          onClick={this.Test}>\r\n          {data.Title}\r\n        </CSVLink>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CSVExportView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassTable from \"./MassTable\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRowView from \"./MassRowView\";\r\nimport './MassTable.css'\r\nimport CSVExportView from \"../../../../export/csv/CSVExportView\";\r\nimport { DownloadOutlined, SaveFilled } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var columns = data.Columns;\r\n    var rows = data.MainRows;\r\n\r\n    var thElems = columns ? columns.map((x, i) => {\r\n      return <th scope=\"col\" key={x.id} className='text-center masscell_th'>{x.Name}</th>\r\n    }) : '';\r\n\r\n    var tbodyElems = rows ? rows.map((x, i) => {\r\n      return <MassRowView key={x.id} store={x} />\r\n    }) : '';\r\n\r\n\r\n    return (\r\n      <>\r\n        {data.IsValidTable ?\r\n          <>\r\n            <div className=\"masstable__title__wrapper\">\r\n              <h4 className=\"masstable__title\">\r\n                BẢNG TỔNG HỢP KHỐI LƯỢNG\r\n              </h4>\r\n              <div>\r\n                <Button type='primary' size='small' style={{ marginLeft: 15 }}\r\n                  disabled={data.IsOnSaveMassGroup}\r\n                  onClick={data.SaveMassGroup}>\r\n                  <SaveFilled />\r\n                </Button>\r\n                <Button type='primary' size='small' onClick={data.Export}\r\n                  className='masstable__export'>\r\n                  <DownloadOutlined />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {data.IsOnSaveMassGroup ?\r\n              <div className='mass__groupname__wrapper'>\r\n                <div className='mass__groupname__wrapper_dec'>\r\n                  <div className='mass__groupname__input'>\r\n                    {data.MassGroupInput_Element}\r\n                  </div>\r\n\r\n                  <div className='mass__groupname__button_wrapper'>\r\n                    <Button type='primary' size='small'\r\n                      className={data.MassGroupInput_Toggle_Classname}\r\n                      onClick={data.Toggle_MassGroupInput_State}>\r\n                        {data.MassGroupInput_Toggle_Content}\r\n                      </Button>\r\n                    <Button type='primary' size='small'\r\n                      onClick={data.MassGroupInputOK}>ok</Button>\r\n                    <Button type='default' size='small'\r\n                      onClick={data.MassGroupInputCancel}>cancel</Button>\r\n\r\n                    {data.Override_MassGroup_ModalElement}\r\n                  </div>\r\n                </div>\r\n              </div> : ''}\r\n\r\n            < table className=\"table table-bordered table-sm masstable\">\r\n              <thead className=\"thead-light\">\r\n                <tr>\r\n                  <th scope=\"col\" className='masstitle__th'>\r\n                    <Button onClick={data.AddMainRow} type='primary' size='small'\r\n                      style={{ backgroundColor: '#52c41a', border: 'none' }}>+</Button>\r\n                  </th>\r\n                  {thElems}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tbodyElems}\r\n              </tbody>\r\n            </table>\r\n          </> : ''\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassTableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport MassResultCompVM from \"./MassResultCompVM\";\r\nimport MultiSelectView from '../../../../select/MultiSelectView'\r\nimport MassTableView from \"../table/MassTableView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass MassResultCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = pmDataVM().MassResultCompVM\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.IsShowProjectSelect ?\r\n          <MultiSelectView store={data.ProjectSelectVM} /> : ''}\r\n\r\n        {data.CanHavePhase ?\r\n          <>\r\n            <CheckboxView store={data.IsShowPhaseSelectVM} />\r\n            {data.IsHavePhase ?\r\n              <MultiSelectView store={data.PhaseSelectVM} /> : ''}\r\n          </>\r\n          : ''\r\n        }\r\n\r\n        <div style={{ marginTop: 8 }} >\r\n          <SelectView store={data.MassGroupSettingSelectVM} />\r\n        </div>\r\n\r\n        <Button style={{ marginTop: 8 }} onClick={data.GetMassData}\r\n          size='middle' type='primary'>GET DATA</Button>\r\n        <div style={{ marginTop: 15 }}>\r\n          {data.IsDataPending ?\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <div>\r\n                <Spin />\r\n                <TextView store={data.LoadingSpinTipVM} />\r\n              </div>\r\n            </div> : <MassTableView store={data.MassItem_Dict.MassTable} />}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassResultCompView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport TableVM from \"./TableVM\";\r\nimport * as rs from './RenderState'\r\nimport './Table.css'\r\nimport { LeftCircleOutlined, RightCircleOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TableVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var columns = data.Columns;\r\n\r\n    var rows = data.Rows;\r\n    var tableElem = '';\r\n    if (columns && rows) {\r\n      var theadElem = <thead className=\"thead-light\">\r\n        <tr>\r\n          {columns.map(x => {\r\n            return <th scope=\"col\" key={x.Key}>\r\n              <div className='column__title__wrapper'\r\n                onMouseEnter={x.Show_MoveCommand}\r\n                onMouseLeave={x.Collapse_MoveCommand}>\r\n\r\n                {x.CanShow_MoveCommand ?\r\n                  <div className='column__title__left'>\r\n                    {x.IsShow_MoveCommand ?\r\n                      <Button type='primary' size='small'\r\n                        className='column__title__move__button'\r\n                        onClick={x.MoveLeft}>\r\n                        <LeftCircleOutlined />\r\n                      </Button>\r\n                      : <div className='column__title__move__blank' />}\r\n                  </div>\r\n                  : ''}\r\n\r\n                {x.TitleRender()}\r\n\r\n                {x.CanShow_MoveCommand ?\r\n                  <div className='column__title__right'>\r\n                    {x.IsShow_MoveCommand ?\r\n                      <Button type='primary' size='small'\r\n                        className='column__title__move__button right'\r\n                        onClick={x.MoveRight}>\r\n                        <RightCircleOutlined />\r\n                      </Button>\r\n                      : <div className='column__title__move__blank' />}\r\n                  </div>\r\n                  : ''}\r\n              </div>\r\n            </th>\r\n          })}\r\n        </tr>\r\n      </thead>\r\n\r\n      var tbodyElem = <tbody>\r\n        {rows.map(x => {\r\n          return <tr key={x.Key}>\r\n            {x.Cells.map(y => {\r\n              return <td key={y.Key}>{y.Render()}</td>\r\n            })}\r\n          </tr>\r\n        })}\r\n      </tbody>\r\n\r\n      tableElem = <table className=\"table table-sm\">\r\n        {theadElem}{tbodyElem}\r\n      </table>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {tableElem}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport TableView from \"../../../../table/TableView\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass WorkItemExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new WorkItemExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất hạng mục</b>\r\n        </Divider>\r\n        \r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(WorkItemExportSetting_DictView)","import * as util from './LeftNavUtil'\r\n\r\nexport class LeftNav {\r\n  Title\r\n\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  currentProject\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n    \r\n    this.Items = util.GetItems(this);\r\n  }\r\n}","export class LeftNavItem {\r\n  Title\r\n  Value\r\n}","import { LeftNavItem } from \"./LeftNavItem\"\r\n\r\nexport const get = (title, value) => {\r\n  var qI = new LeftNavItem();\r\n  qI.Title = title;\r\n  qI.Value = value;\r\n  return qI;\r\n}","import { LeftNav } from \"./LeftNav\"\r\nimport * as pvt from '../../project/ProjectViewType'\r\nimport * as itemUtil from './LeftNavItemUtil'\r\n\r\nexport const GetTest = () => {\r\n  var qI = new LeftNav();\r\n\r\n  qI.Title = 'HikariComplex'\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.CurrentProject ?\r\n    [\r\n      itemUtil.get('MASS', pvt.mass),\r\n      itemUtil.get('TYPICAL LEVEL', pvt.typicallevel),\r\n      itemUtil.get('PHASE', pvt.phase),\r\n      itemUtil.get('INPUT DATA', pvt.inputdata)\r\n    ]                                    \r\n      : \r\n    [\r\n      itemUtil.get('MASS', pvt.mass),\r\n      itemUtil.get('MEP SETTING', pvt.mepsetting),\r\n      itemUtil.get('DOCUMENT', pvt.document),\r\n    ]\r\n}","import { LeftNavVM } from \"./LeftNavVM\"\r\nimport * as modelUtil from './LeftNavUtil'\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nexport const get = (q) => {\r\n  var qI = new LeftNavVM();\r\n\r\n  qI.ModelItem = q;\r\n  genUtil.Add(\r\n    pmDataVM().OnSet_CurrentProject_Func_Dict,\r\n    () => qI.CurrentProject = pmDataVM().CurrentProject,\r\n    false);\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(modelUtil.GetTest());\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items;\r\n}\r\n\r\nexport const GetPreTitle = (q) => {\r\n  return q.CurrentProject ? 'DỰ ÁN'\r\n    : 'CÁC DỰ ÁN';\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  return q.CurrentProject ? q.CurrentProject.Name \r\n    : '';\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { pmData } from '../../mass/item/MassItemUtil';\r\nimport * as pvt from '../../project/ProjectViewType'\r\nimport * as util from './LeftNavVMUtil'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class LeftNavVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectViewType : observable,\r\n      items : observable,\r\n      title : observable,\r\n      preTitle : observable\r\n    })\r\n  }\r\n\r\n  preTitle = undefined\r\n  get PreTitle (){\r\n    if (!this.preTitle){\r\n      this.preTitle = util.GetPreTitle(this);\r\n    }\r\n    return this.preTitle;\r\n  } set PreTitle(v){\r\n    this.preTitle = v;\r\n  }\r\n\r\n  title = undefined\r\n  get Title (){\r\n    if (!this.title){\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  } set Title(v){\r\n    this.title = v;\r\n  }\r\n\r\n  items = undefined\r\n  get Items (){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  currentProject\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n\r\n    this.ModelItem.CurrentProject = v?.ModelItem;\r\n    this.Items = util.GetItems(this);\r\n    this.PreTitle = util.GetPreTitle(this);\r\n    this.Title = util.GetTitle(this);\r\n  }\r\n\r\n  projectViewType = undefined\r\n  get ProjectViewType(){\r\n    if (!this.projectViewType){\r\n      this.projectViewType = pmDataVM().ProjectViewType;\r\n    }\r\n    return this.projectViewType\r\n  } set ProjectViewType(v){\r\n    this.projectViewType = pmDataVM().ProjectViewType = v;\r\n  }\r\n\r\n  GetItemClass = (item) => {\r\n    return `leftnav__item ${item.Value === this.ProjectViewType ? 'active' : ''}`;\r\n  }\r\n\r\n  SetView = (item) => {\r\n    this.ProjectViewType = item.Value;\r\n  }\r\n\r\n  get UpdatedDate(){\r\n    return pmData().UpdatedDate;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { } from '@ant-design/icons';\r\nimport './LeftNav.css'\r\nimport { LeftNavVM } from './LeftNavVM';\r\nimport * as navUtil from './LeftNavVMUtil'\r\n\r\nclass LeftNavView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = navUtil.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <nav className='leftnav'>\r\n          {/* Wrapper */}\r\n          <div className='leftnav__wrapper'>\r\n            {/* Body */}\r\n            <div className='leftnav__body'>\r\n\r\n              {/* Title */}\r\n              <span className='leftnav__title'>\r\n                <span className='leftnav__title__prefix'>\r\n                  {data.PreTitle}\r\n                </span>\r\n                <span className='leftnav__title__name'>\r\n                  {data.Title}\r\n                </span>\r\n              </span>\r\n\r\n              {/* Items */}\r\n              <div className='leftnav__items'>\r\n                {data.Items.map(x => {\r\n                  return <a key={x.Value} onClick={() => data.SetView(x)}\r\n                    className={data.GetItemClass(x)}>\r\n                    {x.Title}\r\n                  </a>\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Footer */}\r\n            <div className='leftnav__footer'>\r\n              <span>© Copyright</span>\r\n              <span>{`Updated Date: ${data.UpdatedDate}`}</span>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LeftNavView);\r\n","import * as mif from '../item/MassItemField'\r\nimport * as tableUtil from '../../../../table/TableVMUtil'\r\nimport * as cit from '../../../../table/TableColumn_InputType'\r\n\r\n// Property\r\nexport const GetDefaultColumns = (q) => {\r\n  return [ mif.Value, mif.Unit ]\r\n  //return [ mif.Value]\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  var qI = tableUtil.GetByColumn_Data(q.Columns, [], false);\r\n  qI.CanHandleItem = false;\r\n  qI.AllColumnNames = mif.GetForMassGroup();\r\n  qI.Column_InputType = cit.select\r\n  qI.Override_Get_CellValue = (item, cell, row, col) => {\r\n    var field = col.DataIndex[0];\r\n    var val = item.GetValue(field);\r\n    return val;\r\n  }\r\n  qI.Column_Title_SelectWidth = 150\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassDetailTableUtil'\r\n\r\nexport class MassDetailTable {\r\n  constructor() {\r\n    // makeObservable(this, {\r\n\r\n    // })\r\n  }\r\n\r\n  data\r\n  get Data(){\r\n    return this.data;\r\n  } set Data(v){\r\n    this.data = v;\r\n    this.Table.DataSource = v;\r\n  }\r\n\r\n  columns\r\n  get Columns(){\r\n    if (!this.columns){\r\n      this.columns = util.GetDefaultColumns(this);\r\n    }\r\n    return this.columns;\r\n  }\r\n\r\n  table\r\n  get Table(){\r\n    if (!this.table){\r\n      this.table = util.GetTable(this);\r\n    }\r\n    return this.table;\r\n  }\r\n\r\n  AddColumn = () => {\r\n    this.Table.AddColumn();\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport { MassDetailTable } from './MassDetailTable';\r\n\r\nexport class MassDetailVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id(){\r\n    return this._id;\r\n  }\r\n  set id(v){\r\n    this._id = v;\r\n    massItemUtil.getByViewDetail(v, (items) => {\r\n      this.Items = items;\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    return this.items;\r\n  } \r\n  set Items(v){\r\n    this.items = v;\r\n    this.DetailTable.Data = v;\r\n  }\r\n\r\n  detailTable\r\n  get DetailTable() {\r\n    if (!this.detailTable){\r\n      this.detailTable = new MassDetailTable();\r\n    }\r\n    return this.detailTable;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Row } from 'antd';\r\nimport { MassDetailTable } from './MassDetailTable';\r\nimport TableView from '../../../../table/TableView';\r\nimport './MassDetailTable.css'\r\n\r\nclass MassDetailTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='massdetail__wrapper'>\r\n          <Button type='primary' size='small'\r\n            className='massdetail__addcolumn'\r\n            onClick={data.AddColumn}>+</Button>\r\n          <TableView store={data.Table} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(MassDetailTableView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { MassDetailVM } from './MassDetailVM';\r\nimport MassDetailTableView from './MassDetailTableView';\r\nimport TableView from '../../../../table/TableView';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass MassDetailView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n\r\n    // Set up Main Width\r\n    pmDataVM().Main_Classname = 'massdetail__comp'\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <h4 className='text-center'>BẢNG CHI TIẾT KHỐI LƯỢNG</h4>\r\n        <div>\r\n          <MassDetailTableView store={data.DetailTable} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(MassDetailView));\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { LevelGroupVM } from './LevelGroupVM';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './LevelGroup.css'\r\n\r\nclass LevelGroupView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new LevelGroupVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='levelgroup__container'>\r\n          <MultiSelectView store={data.LevelSelectVM} />\r\n          <Button size='small' type='text' \r\n            className='levelgroup__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='levelgroup__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LevelGroupView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Popover, Switch } from 'antd';\r\nimport { TLS_FilterValueVM } from './TLS_FilterValueVM';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport './TLS_FilterValue.css'\r\n\r\nclass TLS_FilterValueView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterValueVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n\r\n        <div className='tls_filter__value'>\r\n          {/* Input */}\r\n          <Popover\r\n            trigger={data.PopoverState.Content}\r\n            content={\r\n              <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n                checked={data.SwitchChecked_Funcs()} onChange={data.ToggleInputType} />\r\n            }>\r\n            <span>\r\n              {data.InputElement}\r\n            </span>\r\n          </Popover>\r\n          \r\n          {/* Delete */}\r\n          <Button type='primary' size='small' onClick={data.Delete}\r\n            className='tls_filter__value__delete'>x</Button>\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterValueView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { TLS_FilterVM } from './TLS_FilterVM';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport './TLS_Filter.css'\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport TLS_FilterValueView from './TLS_FilterValueView';\r\n\r\nclass TLS_FilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls_filter__div'>\r\n          {/* Field Select */}\r\n          <SelectView store={data.FieldSelectVM} \r\n            className='tls_filter_fieldselect'/>\r\n\r\n          <div className='tls_filter__valuediv__wrapper'>\r\n            {/* Add Value */}\r\n            <Button type='primary' size='small' onClick={data.AddItem}\r\n              className='tls_filter__valuediv__addbutton'>+</Button>\r\n\r\n            {/* Value List */}\r\n            <div className='tls_filter__valuediv'>\r\n              {data.Items.map(x => {\r\n                return <TLS_FilterValueView key={x.id} store={x} />\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <Button size='small' type='text'\r\n            className='tls_filter__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='tls_filter__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './TLS_PageItem.css'\r\nimport { TLS_PageItemVM } from './TLS_PageItemVM';\r\nimport TLS_FilterView from '../filter/TLS_FilterView';\r\nimport LevelGroupView from '../levelGroup/LevelGroupView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TLS_PageItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_PageItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__pageitem__wrapper'>\r\n          {/* Filters */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Filter */}\r\n              <Button type='primary' size='small' onClick={data.AddFilter}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập bộ lọc</b></span>\r\n            </div>\r\n\r\n            {/* Filter List */}\r\n            {data.Filters.map(x => {\r\n              return <TLS_FilterView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n\r\n          {/* LevelGroup */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Level */}\r\n              <Button type='primary' size='small' onClick={data.AddLevelGroup}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập level</b></span>\r\n            </div>\r\n\r\n            {/* Level List */}\r\n            {data.LevelGroups.map(x => {\r\n              return <LevelGroupView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_PageItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport LevelGroupView from './levelGroup/LevelGroupView';\r\nimport './TypicalLevelSettingData.css'\r\nimport './pageItem/TLS_PageItem.css'\r\nimport TLS_FilterView from './filter/TLS_FilterView';\r\nimport TLS_PageItemView from './pageItem/TLS_PageItemView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TypicalLevelSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onKeyDown = (v) => {\r\n    //console.log(v);\r\n    v.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__tabs__wrapper'>\r\n          <div className='tls__tabs__div'>\r\n            {/* Add Tab */}\r\n            {!data.IsHaveAddCommandTab ?\r\n            <Button type='primary' size='small' onClick={data.AddPageItem}\r\n              className='tls__tabs__add__outside'>+</Button>\r\n              : ''}\r\n\r\n            {/* Tabs */}\r\n            <Tabs type='card' className='tls__tabs'\r\n              onChange={data.ChangePageKey}\r\n              activeKey={data.CurrentPageKey}\r\n              onKeyDown={this.onKeyDown}>\r\n              {data.AllTabs.map(x => {\r\n                return <TabPane tab={x.TitleElement} key={x.id}>\r\n                  <TLS_PageItemView store={x} />\r\n                </TabPane>\r\n              })}\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingDataView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM';\r\nimport TypicalLevelSettingDataView from './TypicalLevelSettingDataView';\r\nimport NewInputView from '../../../../input/NewInputView';\r\nimport './TypicalLevelSetting.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nclass TypicalLevelSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* Data */}\r\n        <div className='tls'>\r\n          {/* Save Button */}\r\n          <Button type='primary' size='small' className='tls__save__button'\r\n            onClick={data.Save}>\r\n            <SaveFilled className='tls__save' />\r\n          </Button>\r\n          {/* Main Data */}\r\n          <TypicalLevelSettingDataView store={data.DataVM} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport * as stateType from '../state/StateType'\r\n\r\nconst { Option } = Select;\r\n\r\nclass Phase_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Phase_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var input = data.Input;\r\n    var state = data.State;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <Button type='primary' size='middle' onClick={data.AddVersion}\r\n            disabled={state === stateType.addversion}>\r\n            <PlusCircleOutlined /> LƯU KẾT QUẢ HIỆN TẠI\r\n          </Button>\r\n\r\n          {state === stateType.addversion ? <div className=\"mt-3\">\r\n            <InputView store={input.NameVM} />\r\n            <InputView store={input.DescriptionVM} />\r\n            <div className=\"mt-2\">\r\n              <Button type='primary' size='small' onClick={data.OK}>OK</Button>\r\n              <Button type='default' size='small' onClick={data.Cancel}>Cancel</Button>\r\n            </div>\r\n          </div> : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Phase_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport TableView from \"../../../../table/TableView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass RebarMass_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new RebarMass_Dict();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(RebarMass_DictView)","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as projectUtil from '../ProjectUtil'\r\nimport * as projectVMUtil from '../ProjectVMUtil'\r\nimport * as util from './ProjectCompVMUtil'\r\nimport * as pvt from '../ProjectViewType'\r\nimport MassResultCompView from '../../mass/result/MassResultCompView';\r\nimport TypicalLevelSettingView from '../../setting/typicallevel/TypicalLevelSettingView';\r\nimport Phase_DictView from '../../phase/Phase_DictView';\r\nimport RebarMass_DictView from '../../mass/rebar/RebarMass_DictView';\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class ProjectCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectVM: observable,\r\n      projectViewType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n    projectUtil.getById(v, (item) => {\r\n      this.ProjectVM = projectVMUtil.get(item);\r\n    })\r\n  }\r\n\r\n  projectVM = undefined\r\n  get ProjectVM() {\r\n    return this.projectVM;\r\n  }\r\n  set ProjectVM(v) {\r\n    this.projectVM = v;\r\n\r\n    pmDataVM().CurrentProject = v;\r\n\r\n    var list = [v];\r\n    pmDataVM().Project_DictVM.Items = list;\r\n    pmData().Phase_Dict = v.ModelItem.Phase_Dict;\r\n\r\n    var massResComp = this.MassResultCompVM;\r\n    massResComp.ProjectVMStorageList = list;\r\n    massResComp.ProjectSelectVM.InitialItems = list;\r\n\r\n    var setItemsFuncs = () => massResComp.PhaseVMStorageList = phase_DictVM.Items;\r\n\r\n    var phase_DictVM = v.Phase_DictVM;\r\n    if (phase_DictVM.Items) {\r\n      setItemsFuncs();\r\n    } else {\r\n      phase_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n        setItemsFuncs();\r\n      })\r\n    }\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM() {\r\n    if (!this.massResultCompVM) {\r\n      var obj = this.massResultCompVM = util.GetMassResultCompVM(this);\r\n      pmDataVM().MassResultCompVM = obj;\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n\r\n  projectViewType = undefined\r\n  get ProjectViewType() {\r\n    if (!this.projectViewType) {\r\n      this.projectViewType = pmDataVM().ProjectViewType;\r\n    }\r\n    return this.projectViewType;\r\n  } set ProjectViewType(v) {\r\n    this.projectViewType = v;\r\n  }\r\n\r\n  get ViewElement() {\r\n    if (!this.ProjectVM) return undefined;\r\n    \r\n    switch (this.ProjectViewType) {\r\n      case pvt.mass:\r\n        return <MassResultCompView store={this.MassResultCompVM} />\r\n      case pvt.typicallevel:\r\n        return <>\r\n          {this.ProjectVM.TypicalLevelSetting_ForEdit ?\r\n            <TypicalLevelSettingView store={this.ProjectVM.TypicalLevelSetting_ForEdit} />\r\n            : ''}\r\n        </>\r\n      case pvt.phase:\r\n        return <Phase_DictView store={this.ProjectVM.Phase_DictVM} />\r\n      case pvt.inputdata:\r\n        return <RebarMass_DictView store={this.ProjectVM.RebarMass_Dict} />\r\n    }\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM'\r\nimport MassResultComp from '../../mass/result/MassResultComp'\r\nimport * as massResutlCompVMUtil from '../../mass/result/MassResultCompVMUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport ProjectCompVM from './ProjectCompVM';\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\n// Instance\r\nexport const get = () => {\r\n  var qI = new ProjectCompVM();\r\n\r\n  genUtil.Add(\r\n    pmDataVM().OnSet_ProjectViewType_Func_Dict,\r\n    () => qI.ProjectViewType = pmDataVM().ProjectViewType,\r\n    false);\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetMassResultCompVM = (q) => {\r\n  var obj = massResutlCompVMUtil.get(new MassResultComp(), false);\r\n  obj.IsShowProjectSelect = false;\r\n  obj.CanHavePhase = true;\r\n  return obj;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport './ProjectComp.css'\r\nimport * as util from './ProjectCompVMUtil'\r\nimport TwoCol_SelectView from '../../../../select/twocol/TwoCol_SelectView';\r\n\r\nclass ProjectCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.get()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var projectVM = data.ProjectVM;\r\n\r\n    return (\r\n      <>\r\n        {projectVM ? data.ViewElement : ''}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(ProjectCompView));\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport './PMData.css'\r\nimport Workpackage_DictView from '../../entity/workpackage/Workpackage_DictView';\r\nimport ElementFilterSetting_DictView from '../../entity/setting/elementFilter/ElementFilterSetting_DictView';\r\nimport MassExportSetting_DictView from '../../entity/setting/massExport/MassExportSetting_DictView';\r\n\r\nimport { PMDataVM } from './PMDataVM';\r\nimport MassResultCompView from '../../entity/mass/result/MassResultCompView';\r\nimport WorkItemExportSetting_DictView from '../../entity/setting/workitemexport/WorkItemExportSetting_DictView';\r\nimport { withRouter } from \"react-router-dom\";\r\n//import { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\r\nimport LeftNavView from '../../entity/nav/left/LeftNavView';\r\nimport TestView from '../../../view/TestView';\r\nimport MassDetailView from '../../entity/mass/detail/MassDetailView';\r\nimport ProjectCompView from '../../entity/project/comp/ProjectCompView';\r\n\r\nclass PMDataView extends Component {\r\n  render() {\r\n    var data = PMDataVM.Instance;\r\n\r\n    return (\r\n      <>\r\n        <div className='projectcomp'>\r\n          <LeftNavView />\r\n          <div className='projectcomp__main__wrapper'>\r\n            <div className={data.Main_Classname}>\r\n\r\n              <Router basename={process.env.PUBLIC_URL}>\r\n                <Switch>\r\n                  <Route exact path=\"/\" component={TestView} />\r\n                  <Route exact path=\"/massdetail/:id\" component={MassDetailView} />\r\n                  <Route exact path=\"/project/:id\" component={ProjectCompView} />\r\n                </Switch>\r\n              </Router>\r\n\r\n            </div>\r\n            <div className='projectcomp__main__bottom' />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(PMDataView);\r\n","export class DO_Comp {\r\n  \r\n}","export class DO_Element {\r\n  SubItems = []\r\n}","export const project = 'project'\r\nexport const element = 'element'\r\nexport const elementinfo = 'element-info'\r\nexport const elementinfo_identify = 'element-info-identify'\r\nexport const elementinfo_locate = 'element-info-locate'\r\nexport const elementinfo_geometry = 'element-info-geometry'\r\nexport const elementinfo_specification = 'element-info-specification'\r\nexport const elementinfo_material = 'element-info-material'","import { DO_Element } from './DO_Element';\r\nimport * as et from './DO_ElementType'\r\n\r\nexport const get = (type, title) => {\r\n  var qI = new DO_Element();\r\n  qI.Title = title ? title : type;\r\n\r\n  switch (type) {\r\n    case et.element:\r\n      qI.SubItems = [\r\n        get('guid'),\r\n        get('projectId'),\r\n        get('exportSetId'),\r\n        get(et.elementinfo, 'info')\r\n      ]\r\n      break;\r\n    case et.project:\r\n      qI.SubItems = []\r\n      break;\r\n    case et.elementinfo:\r\n      qI.SubItems = [\r\n        get(et.elementinfo_identify, 'identify'),\r\n        get(et.elementinfo_locate, 'locate'),\r\n        get(et.elementinfo_geometry, 'geometry'),\r\n        get(et.elementinfo_specification, 'specification'),\r\n        get(et.elementinfo_material, 'material'),\r\n      ]\r\n      break;\r\n    case et.elementinfo_identify:\r\n      qI.SubItems = [\r\n        get('category'),\r\n        get('typename'),\r\n        get('elementName'),\r\n        get('typemark'),\r\n        get('typecomment'),\r\n        get('description'),\r\n        get('model'),\r\n        get('manufacturer'),\r\n        get('keynote'),\r\n        get('assemblycode'),\r\n        get('systemtype'),\r\n        get('systemclassification'),\r\n        get('workItem'),\r\n      ];\r\n      break;\r\n    case et.elementinfo_locate:\r\n      qI.SubItems = [\r\n        get('level'),\r\n        get('baseLevel'),\r\n        get('topLevel'),\r\n        get('block'),\r\n        get('zone'),\r\n      ];\r\n      break;\r\n    default:\r\n      qI.SubItems = [];\r\n      break;\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../text/TextVMUtil';\r\nimport * as util from './DO_ElementVMUtil'\r\n\r\nexport class DO_ElementVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      subItems: observable,\r\n      isOpenSub : observable\r\n    })\r\n  }\r\n\r\n  get Title(){\r\n    return this.ModelItem.Title\r\n  }\r\n\r\n  get IsHaveButton(){\r\n    return this.SubItems.length !== 0;\r\n  }\r\n\r\n  subItems = undefined\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems\r\n  }\r\n\r\n  isOpenSub = false\r\n  get IsOpenSub(){\r\n    return this.isOpenSub\r\n  } set IsOpenSub(v){\r\n    this.isOpenSub = v;\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    this.IsOpenSub = !this.IsOpenSub;\r\n    this.ToggleSubContentVM.Content = util.GetToggleSubContent(this)\r\n  }\r\n\r\n  toggleSubContentVM\r\n  get ToggleSubContentVM(){\r\n    if (!this.toggleSubContentVM){\r\n      this.toggleSubContentVM = \r\n        textUtil.get(util.GetToggleSubContent(this))\r\n    }\r\n    return this.toggleSubContentVM;\r\n  }\r\n}","import { DO_ElementVM } from \"./DO_ElementVM\"\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new DO_ElementVM();\r\n\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetSubItems = (q) => {\r\n  return q.ModelItem.SubItems.map(x => get(x));\r\n}\r\n\r\nexport const GetToggleSubContent = (q) => {\r\n  return q.IsOpenSub ? '-' : '+';\r\n}","import { DO_CompVM } from \"./DO_CompVM\"\r\nimport * as modelUtil from './DO_CompUtil'\r\nimport * as itemUtil from '../DO_ElementVMUtil'\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI =new DO_CompVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(modelUtil.GetTest());\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  var obj = q.ModelItem.Items.map(x => itemUtil.get(x));\r\n  return obj;\r\n} ","import { DO_Comp } from \"./DO_Comp\"\r\nimport * as itemUtil from '../DO_ElementUtil'\r\nimport * as et from '../DO_ElementType'\r\n\r\nexport const GetTest = () => {\r\n  var qI = new DO_Comp();\r\n  \r\n  qI.Items = [\r\n    itemUtil.get(et.project),\r\n    itemUtil.get(et.element),\r\n  ]\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DO_CompVMUtil'\r\n\r\nexport class DO_CompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n  \r\n  items = undefined;\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport { DO_ElementVM } from \"./DO_ElementVM\";\r\nimport './comp/DO_Comp.css'\r\n\r\nclass DO_ElementView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DO_ElementVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className='doelement'>\r\n          {data.Title}\r\n\r\n          {/* Toggle Sub Button */}\r\n          {data.IsHaveButton ?\r\n            <Button className='doelement__button'\r\n              type='primary' size='small'\r\n              onClick={data.ToggleSub}>\r\n                {data.ToggleSubContentVM.Content}\r\n              </Button>\r\n            : ''}\r\n\r\n          {/* Sub Items */}\r\n          {data.IsOpenSub ?\r\n            <div className='doelement__dict'>\r\n              {data.SubItems.map(x => {\r\n                return <DO_ElementView key={x.Title}\r\n                  store={x} />\r\n              })}\r\n            </div>\r\n            : ''}\r\n        </span>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DO_ElementView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport { DO_CompVM } from \"./DO_CompVM\";\r\nimport * as util from './DO_CompVMUtil'\r\nimport './DO_Comp.css'\r\nimport DO_ElementView from \"../DO_ElementView\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass DO_CompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='doelement__dict'>\r\n          {data.Items ?\r\n            data.Items.map(x => {\r\n              return <DO_ElementView key={x.Title}\r\n                store={x} />\r\n            })\r\n            : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DO_CompView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport PMDataView from '../main/single/form/PMDataView';\r\nimport { Col, Row } from 'antd';\r\nimport MassResultCompView from '../main/entity/mass/result/MassResultCompView';\r\nimport { PMDataVM } from '../main/single/form/PMDataVM';\r\nimport * as pvt from '../main/entity/project/ProjectViewType'\r\nimport DO_CompView from '../main/entity/doc/comp/DO_CompView';\r\n\r\nclass TestView extends Component {\r\n  render() {\r\n    var data = PMDataVM.Instance;\r\n\r\n    var elem = ''\r\n    switch (data.ProjectViewType) {\r\n      case pvt.mass:\r\n        elem = <MassResultCompView store={data.MassResultCompVM} />\r\n        break;\r\n      case pvt.mepsetting:\r\n        elem = 'MEP Setting'\r\n        break;\r\n      case pvt.document:\r\n        elem = <DO_CompView />\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {elem}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TestView);\r\n","import './App.css';\r\nimport \"antd/dist/antd.css\";\r\nimport { Component } from 'react';\r\n\r\nimport TestView from './model/view/TestView';\r\nimport PMDataView from './model/main/single/form/PMDataView';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <PMDataView />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}