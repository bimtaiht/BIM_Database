{"version":3,"sources":["model/text/TextState.js","model/text/TextVM.js","model/text/TextVMUtil.js","model/input/InputView.js","util/apiUtil.js","model/main/entity/mass/MassType.js","model/main/entity/mass/item/MassItemField.js","util/generalUtil.js","model/main/entity/mass/table/MassColumn.js","model/input/NewInputView.js","model/text/TextRenderState.js","model/text/TextRenderItem.js","model/text/TextRenderItemUtil.js","model/text/TextRender_Dict.js","model/text/EditableTextVM.js","model/main/single/model/CategoryData.js","model/main/single/model/CategoryDataUtil.js","model/main/entity/filter/FilterCategoryType.js","model/main/entity/filter/FilterValueType.js","model/main/entity/filter/StringFilterType.js","model/main/entity/filter/NumberFilterType.js","model/main/entity/filter/EntFilterUtil.js","model/main/entity/filter/EntFilter.js","model/main/entity/mass/table/rowgroup/MGI_I_CreateType.js","model/main/entity/mass/table/rowgroup/MGI_ItemUtil.js","model/main/entity/mass/table/rowgroup/MGI_Item.js","model/main/entity/mass/item/MassItem.js","model/main/entity/mass/item/phaseValue/MIPh_Item.js","model/main/entity/mass/item/phaseValue/MIPh_ItemUtil.js","model/main/entity/mass/item/MassItemUtil.js","model/main/entity/mass/table/rowgroup/MassGroupItem.js","model/main/entity/mass/table/rowgroup/MassGroupComponent.js","model/main/entity/mass/table/rowgroup/MassGroupComponentUtil.js","model/main/entity/mass/table/rowgroup/MassGroupItemUtil.js","model/select/MultiSelectVMUtil.js","model/select/MultiSelectVM.js","model/select/MultiSelectView.js","model/hover/EntHoverVM.js","model/hover/EntHoverView.js","model/select/SelectVMUtil.js","model/select/SelectVM.js","model/float/FloatItemVM.js","model/float/FloatItemVMUtil.js","model/float/FloatItemView.js","model/select/SelectView.js","model/main/entity/mass/table/location/RRLF_LocationType.js","model/main/entity/mass/table/location/ReplaceRowLocationFactory.js","model/main/entity/mass/table/location/ReplaceRowLocationFactoryUtil.js","model/main/entity/mass/table/MassRow_Field_InputType.js","model/select/twocol/TwoCol_SelectVM.js","model/select/twocol/TwoCol_SelectVMUtil.js","model/select/twocol/TwoCol_SelectView.js","model/main/entity/mass/table/tool/MassRow_ToolElement.js","model/main/entity/mass/table/tool/MassRow_ToolElementUtil.js","model/main/entity/mass/table/tool/MassRow_ToolElementView.js","model/main/entity/mass/table/MassRow.js","model/text/EditableTextVMUtil.js","model/text/TextView.js","model/main/entity/mass/table/MassCell.js","model/main/entity/mass/table/value/MassCell_Value.js","model/main/entity/mass/table/MassCellUtil.js","model/main/entity/mass/table/MassRowUtil.js","model/main/entity/mass/table/MassTableUtil.js","model/main/entity/setting/base/SettingType.js","model/main/entity/setting/base/Setting.js","model/main/entity/setting/massGroup/MassGroupSettingData.js","model/main/entity/mass/MassPropertyName.js","model/main/entity/setting/massGroup/MassGroupSettingDataUtil.js","model/main/entity/setting/massGroup/MassGroupSetting.js","model/main/entity/setting/massGroup/MassGroupSettingUtil.js","model/main/entity/workpackage/WorkpackageVM.js","model/main/entity/workpackage/WorkpackageVMUtil.js","model/checkbox/CheckboxVM.js","model/checkbox/CheckboxVMUtil.js","model/main/entity/workpackage/WorkpackageInputVM.js","model/main/entity/workpackage/WorkpackageInputVMUtil.js","model/main/entity/workpackage/Workpackage_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVM.js","model/main/entity/setting/base/SettingVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingVM.js","model/main/entity/filter/EntFilterVM.js","model/main/entity/filter/EntFilterVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingVMUtil.js","model/main/entity/setting/base/SettingVMUtil.js","model/main/entity/setting/base/SettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVM.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSetting.js","model/main/entity/setting/massExport/exportSetting/MES_ValueRetrieveType.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingDataVM.js","model/main/entity/setting/massExport/MassExportSettingDataVMUtil.js","model/main/entity/setting/massExport/MassExportSettingVM.js","model/main/entity/setting/massExport/MassExportSettingVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVMUtil.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVM.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVMUtil.js","model/main/entity/phase/PhaseVM.js","model/main/entity/phase/PhaseVMUtil.js","model/main/entity/state/StateType.js","model/main/entity/phase/Phase_DictVM.js","model/main/entity/phase/PhaseInputVM.js","model/main/entity/phase/Phase_DictVMUtil.js","model/main/entity/phase/PhaseInputVMUtil.js","model/main/entity/project/ProjectVM.js","model/main/entity/setting/level/LevelSettingVM.js","model/main/entity/setting/level/item/LS_ItemVM.js","model/main/entity/setting/level/item/LS_ItemVMUtil.js","model/main/entity/setting/level/LevelSettingDataVM.js","model/main/entity/setting/level/LevelSettingDataVMUtil.js","model/main/entity/setting/level/LevelSettingVMUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemStateType.js","model/checkbox/CheckboxView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVM.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue_InputType.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVMUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVMUtil.js","model/main/entity/project/ProjectVMUtil.js","model/main/entity/project/Project_DictVM.js","model/main/entity/project/Project_DictVMUtil.js","model/main/entity/mass/result/MassResultCompVM.js","model/main/entity/mass/result/MassResultCompVMUtil.js","model/table/RenderState.js","model/table/RenderItem.js","model/table/RenderItemUtil.js","model/table/Render_Dict.js","model/table/TitleRenderItem.js","model/table/TitleRenderItemUtil.js","model/table/TitleRender_Dict.js","model/table/TableColumn_InputType.js","model/table/TableColumnUtil.js","model/table/TableColumn.js","model/table/TableRow.js","model/table/TableCell.js","model/table/TableCellUtil.js","model/table/TableRowUtil.js","model/table/TableVM.js","model/table/TableVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVM.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil.js","model/main/single/form/PMDataVMUtil.js","model/main/entity/project/ProjectViewType.js","model/main/single/form/PMDataVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingDataVM.js","model/main/entity/setting/massGroup/MassGroupSettingDataVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingVM.js","model/main/entity/setting/massGroup/MassGroupSettingVMUtil.js","model/export/csv/CSVExport.js","model/export/excel/ExcelExport.js","model/main/entity/mass/table/export/MT_Cell.js","model/main/entity/mass/table/export/MT_CellUtil.js","model/main/entity/mass/table/export/MT_Data_Row.js","model/main/entity/mass/table/export/MT_Cell_ValueType.js","model/main/entity/mass/table/export/MT_Data_RowUtil.js","model/main/entity/mass/table/export/MT_Data_Worksheet.js","model/main/entity/mass/table/export/MT_Data_WorksheetUtil.js","model/main/entity/mass/table/export/MT_RawData_Worksheet.js","model/main/entity/mass/table/export/MT_RawData_WorksheetUtil.js","model/main/entity/mass/table/export/MT_Workbook.js","model/main/entity/mass/table/export/MT_WorkbookUtil.js","model/main/entity/mass/table/MassGroupInput_StateType.js","model/main/entity/mass/table/MassTable.js","model/main/entity/mass/table/MassColumnUtil.js","model/export/excel/ExcelExportUtil.js","model/main/entity/mass/item/MassItem_Dict.js","model/main/entity/mass/item/MassItem_DictUtil.js","model/main/entity/mass/result/MassResultComp.js","model/main/entity/mass/result/MassResultCompUtil.js","model/main/entity/mass/rebar/RebarMass_DictUtil.js","model/main/entity/value/ValueUnit.js","model/main/entity/mass/rebar/RebarMass_Dict.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroup.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue.js","model/main/entity/setting/typicallevel/filter/TLS_Filter.js","model/main/entity/setting/typicallevel/filter/TLS_FilterUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItem.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingData.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSetting.js","model/main/entity/setting/typicallevel/TypicalLevelSettingUtil.js","model/main/entity/phase/Phase.js","model/main/entity/phase/PhaseUtil.js","model/main/entity/phase/Phase_Dict.js","model/main/entity/setting/base/SettingUtil.js","model/main/entity/phase/PhaseInput.js","model/main/entity/phase/Phase_DictUtil.js","model/main/entity/phase/PhaseInputUtil.js","model/main/entity/project/Project.js","model/main/entity/exportset/ExportSet.js","model/main/entity/exportset/ExportSetVersion.js","model/main/entity/exportset/ExportSetVersionUtil.js","model/main/entity/exportset/ExportSetUtil.js","model/main/entity/level/Level_Dict.js","model/main/entity/level/Level.js","model/main/entity/level/LevelUtil.js","model/main/entity/setting/level/item/LS_Item.js","model/main/entity/setting/level/LevelSettingData.js","model/main/entity/setting/level/item/LS_ItemUtil.js","model/main/entity/setting/level/LevelSetting_Url.js","model/main/entity/setting/level/LevelSetting.js","model/main/entity/setting/level/LevelSettingUtil.js","model/main/entity/setting/level/LevelSettingDataUtil.js","model/main/entity/project/ProjectUtil.js","model/main/entity/value/ValueRetrieveFrom.js","model/main/entity/level/Level_DictUtil.js","model/main/entity/project/Project_Dict.js","model/main/entity/setting/elementFilter/ElementFilterSetting.js","model/main/entity/setting/elementFilter/ElementFilterSettingData.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingUtil.js","model/main/entity/setting/base/SettingInput.js","model/main/entity/setting/base/SettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInput.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_Dict.js","model/main/entity/setting/massExport/MassExportSettingData.js","model/main/entity/setting/massExport/MassExportSettingDataUtil.js","model/main/entity/setting/massExport/MassExportSetting.js","model/main/entity/setting/massExport/MassExportSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingInput.js","model/main/entity/setting/massExport/MassExportSettingInputUtil.js","model/main/entity/setting/massExport/MassExportSetting_Dict.js","model/main/entity/setting/massGroup/MassGroupSetting_Dict.js","model/main/entity/setting/versionCompare/VCS_Item.js","model/main/entity/setting/versionCompare/VersionCompareSetting.js","model/main/entity/setting/versionCompare/VersionCompareSettingUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_Dict.js","model/main/entity/tracking/TrackingItem.js","model/main/entity/tracking/Tracking.js","model/main/entity/workpackage/WorkpackageInput.js","model/main/entity/workpackage/Workpackage_Dict.js","model/main/entity/setting/massDetail/MassDetailSetting_Url.js","model/main/entity/setting/massDetail/MassDetailSettingData.js","model/main/entity/setting/massDetail/MassDetailSetting.js","model/main/entity/setting/massDetail/MassDetailSettingUtil.js","model/main/entity/setting/massDetail/MassDetailSettingDataUtil.js","model/main/entity/setting/massDetail/MassDetailSetting_Dict.js","model/main/entity/setting/massDetail/MassDetailSetting_DictUtil.js","model/main/single/model/PMDataUtil.js","model/main/single/model/PMData.js","model/main/entity/workpackage/Workpackage.js","model/main/entity/workpackage/WorkpackageUtil.js","model/main/entity/workpackage/Workpackage_DictVM.js","model/main/entity/workpackage/Workpackage_DictView.js","model/main/entity/filter/EntFilterView.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataView.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictView.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingView.js","model/main/entity/setting/massExport/MassExportSettingDataView.js","model/main/entity/setting/massExport/MassExportSetting_DictView.js","model/main/entity/mass/table/value/MassCell_ValueView.js","model/main/entity/mass/table/MassCellView.js","model/text/EditableTextView.js","model/main/entity/mass/table/MassRowView.js","model/export/csv/CSVExportView.js","model/main/entity/mass/table/MassTableView.js","model/main/entity/mass/result/MassResultCompView.js","model/table/TableView.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictView.js","model/main/entity/nav/left/LeftNav.js","model/main/entity/nav/left/LeftNavItem.js","model/main/entity/nav/left/LeftNavItemUtil.js","model/main/entity/nav/left/LeftNavUtil.js","model/main/entity/nav/left/LeftNavVMUtil.js","model/main/entity/nav/left/LeftNavVM.js","model/main/entity/nav/left/LeftNavView.js","model/main/entity/mass/detail/MassDetailTableUtil.js","model/main/entity/mass/detail/MassDetailTable.js","model/main/entity/mass/detail/MassDetailInput_StateType.js","model/main/entity/mass/detail/MassDetailVMUtil.js","model/main/entity/mass/detail/MassDetailVM.js","model/main/entity/mass/detail/MassDetailTableView.js","model/main/entity/mass/detail/MassDetailView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterView.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingView.js","model/main/entity/phase/Phase_DictView.js","model/main/entity/mass/rebar/RebarMass_DictView.js","model/main/entity/setting/level/LevelSettingDataView.js","model/main/entity/project/comp/ProjectCompVM.js","model/main/entity/project/comp/ProjectCompVMUtil.js","model/main/entity/project/comp/ProjectCompView.js","model/main/single/form/PMDataView.js","model/main/entity/doc/comp/DO_Comp.js","model/main/entity/doc/DO_Element.js","model/main/entity/doc/DO_ElementType.js","model/main/entity/doc/DO_ElementUtil.js","model/main/entity/doc/DO_ElementVM.js","model/main/entity/doc/DO_ElementVMUtil.js","model/main/entity/doc/comp/DO_CompVMUtil.js","model/main/entity/doc/comp/DO_CompUtil.js","model/main/entity/doc/comp/DO_CompVM.js","model/main/entity/doc/DO_ElementView.js","model/main/entity/doc/comp/DO_CompView.js","model/view/TestView.js","App.js","reportWebVitals.js","index.js"],"names":["text","password","TextVM","content","undefined","placeholder","State","ts","makeObservable","this","observable","v","onSetContent","style","inputStyle","wrapper","position","get","q","qI","InputView","props","onChange","e","value","target","state","Content","store","textVMUtil","data","Password","Component","observer","http","timeout","axios","create","baseURL","Accept","handleResponse","response","success","status","message","statusText","callApi","action","a","err","error","timeout_default","url","config","put","payload","result","post","concrete","formwork","rebar","Project","Phase","Workpackage","Value","Unit","elementName","MassType","workItem","level","diameter","block","zone","typename","materialName","systemtype","systemclassification","familyName","size","roomName","roomNumber","GetForMassGroup","GetFullFields","massItem","field","fields","isFromElement","massType","includes","mt","groupName","GetValueString","massFieldValue","Name","FullName","GetListForTypicalLevelFilter","randomId","Intl","DateTimeFormat","Math","random","toString","substr","newGUID","replace","c","crypto","getRandomValues","Uint8Array","UpdateFromModel","obj","M2VM","MoveItem","list","oldIndex","newIndex","temp","IsSameValues","list1","list2","isValidCheck","isSame","length","forEach","x","i","Remove","dict","key","index","findIndex","Key","splice","Add","func","isDelete","newfunc","push","Add_2","IsDelete","Handle","newDict_Handle","filter","ExcelCellName","row","col","n","ordA","charCodeAt","len","s","String","fromCharCode","floor","ExcelColumnName","ExcelRangeName","row1","col1","row2","col2","MassColumn","Cells","_id","genUtil","Dict","Columns","indexOf","NewInputView","handleChange","OnPaste","preventDefault","pasteEvent","originalEvent","clipboardData","getData","OnKeyDown","ctrlKey","which","keyCode","contentEditable","React","createRef","minWidth","fontFamily","className","innerRef","Placeholder","html","onKeyDown","onPaste","_default","edit","TextRenderItem","render","util","GetRender","rs","context","Is_Tool_Visible","Is_Edit_Visible","type","onClick","Edit","Is_OK_Visible","EditOK","TextRender_Dict","Items","item","Render","renderUtil","EditableTextVM","IsEditing","OnSet_RenderState_Func_Dict","renderState","CanChange_RenderState","RenderState","Render_Dict","titleFunc","render_Dict","CategoryData","categoryNames","instance","category","family","parameter","bystring","bynumber","byequal","bycontain","bynotcontain","bysmaller","bybigger","bybetween","categoryType","EntFilter","ValueType","valueType","NumberFilterType","numberFilterType","StringFilterType","stringFilterType","Values","values","CategoryType","GetValueStorageList","fct","Instance","CategoryNames","PMData","ParameterNames","IsValid","isValid","filterValues","fvt","sft","lowerVal","toLowerCase","isNaN","nft","leftVal","rightVal","IsEqualLeft","IsEqualRight","valueStorageList","byuser","byauto","mgi","createType","MGI_Item","MassGroupItem","CreateType","ct","Title","Delete","Index","supItem","IsGet_SupItem","supValue","SupValue","title","newMGI","newMGI_id","SupComponent","AllItems","id","MassItem","IsGetElement","OnGetElementDone_Funcs","GetValue","mif","Element","roundingFactor","toLocaleString","maximumFractionDigits","getValFunc","AddDatabase","handle","apiData","ApiData","command","api","then","DeleteDatabase","IsGet_TLS_LevelGroup","OnGet_TLS_LevelGroup_Func_Dict","OnGet_FullValue_Func_Dict","GetPhaseItem","phaseName","PhaseItems","project","workpackage","phases","projectId","elementId","workpackageId","exportSetId","exportSetVersionId","unit","info","Info","get_TLS_LevelGroup","tls_LevelGroup","Get_TLS_LevelGroup","get_FullValue","fullValue","Get_FullValue","phaseItems","MIPh_Item","Handle_TLS_LevelGroup","phase","getLevelGroup_Func","tls","pi","GetValidTLS_PageItem","Data","GetValidTLS_LevelGroup","TypicalLevelSetting","TLS_LevelGroup","OnGetTypicalLevelSetting_Funcs","validPi","PageItems","IsValidTLS_PageItem","pageItem","filters","Filters","Field","validLg","LevelGroups","Primary","Handle_FullValue","IsGet_FullValue","getFullValue_Func","lg","count","Count","FullValue","pmData","Elements","GetProject","Project_Dict","getByViewDetail","viewDetail","masses","items","map","GetWorkpackage","Workpackage_Dict","Workpackages","GetPhases","Phase_Dict","exportSetVersionIds","GetValidPhasesByInput","inputPhases","MassResultComp","Phases","GetPhaseItems","phaseItemUtil","SubComponents","NotIncludeValues","AddNotIncludeValue","GetItem","itemUtil","SupRows","CreatedByUser_Rows","On_AddSupRow_Func_Dict","AddSupRow","NewRow","HandleCreatedByUserRows","OnIsFirstSetSupRow_Funcs","newSupRow","userItems","mgii_ct","IsAdd_Done","sortedUserItems","isFirst_Handle","validIndexs","SupItem","y","IsDebug","supRow","supRows","concat","addRow","Table","GetRow","IsCreatedByUser","handleRow","handleNonField","subMgcIndex","Filter","replaceMgi","NewMGI","supName","Handle_ReplaceMGI","subComponents","valueOrders","ValueOrders","notIncludeValues","isFirstSetSupRow","IsHaveMassItem","table","MassGroupComponent","originComponent","OriginComponent","AllSubItems","apply","filterUtil","Clone","GetOriginComponent","subComps","supCom","getFromDb","compUtil","IsHaveValueOrder","GetTable","initialItems","MultiSelectVM","InitialItems","GetInitialIndexs","selectedIndexs","GetSelectedItems","SelectedIndexs","open","canOpen","InitialIndexs","initialIndexs","SelectedItems","selectedItems","OnSelectedItemChanged","titleRender","DisplayContent","OnSetOpen","Option","Select","MultiSelectView","onValueChange","onDropdownVisibleChange","Open","width","elems","displayContent","TitleRender","mode","optionFilterProp","filterOption","input","option","children","CanOpen","EntHoverVM","IsElementVisible","ShowElement","HideElement","EntHoverView","onMouseEnter","onMouseLeave","initialItem","SelectVM","InitialItem","GetInitialIndex","selectedIndex","GetSelectedItem","SelectedIndex","CanClear","Clear","isDisabled","InitialIndex","initialIndex","SelectedItem","selectedItem","padding","FloatItemVM","getClassName","location","loc","FloatItemView","getWrapperContent","floatItemVMUtil","SelectView","floatElem","floatItemStore","DivStyle","showSearch","disabled","IsDisabled","inside","lower","ReplaceRowLocationFactory","Location","lt","ToggleLocation","backgroundColor","Color","border","select","TwoCol_SelectVM","inputTitle","outputTitle","availableItems","GetKey","index1","AvailableItems","IsChanged","Unselect","InputTitle","OutputTitle","TwoCol_SelectView","MassRow_ToolElement","editable_TitleVM_RenderState","Method","name","Editable_TitleVM","MassRow_ToolElementView","Editable_TitleVM_RenderState","trs","UpCircleOutlined","DownCircleOutlined","danger","MassRow","subItems","UpdateCells","UpdateData","isShowSub","rank","isHaveSub","IsToolVisible","FieldInputType","mr_f_it","Toggle_FieldInputType","TempField","FieldInputVM","FieldSelectVM","GetCellByColumn","Column","Is_Original_SupRow","SubItems","IsHidden","Rank","IsHaveSub","ToggleSub","IsShowSub","SetSubFields","tempSubFields","TempSubFields","SubFields","supMgi","mgc","SubItem","subMgis","mgiUtil","SubMassGroupComponent","Original_SubMassGroupItem","ColumnField","ValidPhasesByInput","HandleItem","MoveUp","CurrentList","orderItems","OrderMGI","OrderItems","orderValues","OrderValues","mgiIndex1","mgiIndex2","MoveDown","AddSub","MainRows","ReplaceOK","factory","ReplaceFactory","refRow","ReferenceRow","rrlf_lt","Replace","Replace_SubItems","Temp_SelectSubItems","IsReplaced","Original_SupRow","oldMgi","newMgi","Replace_SubMassGroupItem","MainMGI","mgi_i","ReplaceMGI","cl","IsShowSubFieldSelect","IsModalVisible","OpenModal","TitleVM","SubFieldSelectVM","SelectSubItemsVM","LocationStorageList","locSelectVM","LocationSelectVM","ModalOK","ModalCancel","PMS_WorkPackages","AddHandleTotal_Cell","cell","HandleTotal_Cells","Is_HandleTotal_Cells_Done","Add_Handled_CreatedByUser_Row","IsHaveAdditionInformation","AdditionInformation","Is_SelectSubItems_ModalOpen","Open_SelectSubItems_Modal","SelectSubItems_ModalCancel","SelectSubItems_ModalOK","isShow_RawValue","currentList","cells","reduce","b","massGroupItem","replaceMGI","original_SubMassGroupItem","replace_SubMassGroupItem","isReplaced","original_SupRow","subFields","ToggleButtonContentVM","toggleButtonContent","toggleButtonContentVM","ToggleButtonContent","OnSetContent","fieldInputVM","fieldSelectVM","unCheckedChildren","checkedChildren","checked","subFieldSelectVM","titleVM","editable_TitleVM","canEdit","isToolVisible","editTextUtil","IsShow_RawValue","ToolElement","AllRows","locationSelectVM","replaceFactory","pms_WorkPackages_SelectVM","selectUtil","titleWidth","visible","onOk","onCancel","gutter","marginTop","flex","FieldInputElement","SelectSubItems_ModalElement","ButtonStyle","toolElement","trigger","InfoCircleOutlined","ExportInfo","TotalValue","Infos","ExportValue","on_HandleTotal_Cells_Done_Dict_Funcs","On_HandleTotal_Cells_Done_Dict_Funcs","selectSubItemsVM","tc_selectUtil","marginLeft","RawValue","TextView","MassCell","OnGet_TotalValue_Func_Dict","totalValue","AsString","console","log","Row","isUpdateSup","oldVal","SubCells","IsHaveVCS_Item","ShowDetail","process","openTabFunc","window","getUrl","viewDetailId","GetViewDetailId","vcs_Item","valueColor","tdBgColor","massIds","OnGet_TLS_LevelGroups_Func_Dict","isHaveWarning","tls_LevelGroup_Descriptions","unitVM","Get_TotalValue","ContentVM","ValueString","contentVM","valueObject","subCells","isHaveVCS_Item","ValueColor","TDBgColor","color","fontWeight","tls_LevelGroups","Get_TLS_LevelGroups","MassCell_Value","GetIsHaveVCS_Item","ColumnIndex","GetValueColor","VCS_Item","GetTDBgColor","Handle_VCS_Item","VersionCompareSetting","compareIndex","compareItem","getItem","ratio","GetMassType","isPending","Handle_TLS_LevelGroups","IsGet_TLS_LevelGroups","handledCount","checkadd_Val","val","handle_Val","Array","isArray","TLS_LevelGroups","targetObj","ReGet_Unit","IsGet_Unit","Get_Unit","ReHandle_TotalValue","IsGet_TotalValue","Handle_TotalValue","CanHave_TotalValue","checkedList","totalVal","handleItems","Number","GetIsHaveWarning","getWarningFunc","levelGroups","IsHaveWarning","Handle_TLS_LevelGroup_Descriptions","IsGet_TLS_LevelGroup_Descriptions","TLS_LevelGroup_Descriptions","getDescFunc","FullDescription","OnGetLevelStorageList_Func_Dict","OnGet_TLS_LevelGroups_Funcs","Get_SupItem","Get_SubCells","subRows","Get_ValueObject","Get_ValueString","formatValue","GetRank","GetStyle","GetIsHaveSub","GetToggleButtonContent","GetFieldSelectVM","storageList","MIFs_ForMassGroup","GetSubFieldSelectVM","multiSelectUtil","Order","sort","GetLocationSelectVM","GetOriginal_SubMassGroupItem","GetReplace_SubMassGroupItem","GetSubFields","subMGI","SubMassGroupItem","mgis","lastValidIndex","isValidHandle","HaveMassItemSubComponents","currentIndex","CreateSubMassGroupItem","mgcIndex","mgi_I","mgi_iUtil","GetOn_HandleTotal_Cells_Done_Dict_Funcs","Get_Original_SupRow","IsGet_Original_SupRow","Get_Original_Full_SupRows","reverse","Get_IsHaveAdditionInformation","Get_AdditionInformation","Original_Full_SupRows","Get_ToolElement","Get_Cells","GetIsShow_RawValue","GetMassGroupName","MassGroupSetting","GetMainMGI","MainMGC","SupRow","elementfilter","massexport","massgroup","massdetail","Setting","OnDelete","Input","EditItemId","SaveDatabase","isNew","Url","OnNameChanged","description","OnDescriptionChanged","OnDataChanged","settingType","SettingType","Description","MassGroupSettingData","AddNewField","MassPropertyNames","Fields","Category","GetDefaultFields","mpn","massGroupCompUtil","massGroupComponent","dataUtil","WorkpackageVM","code","fullName","WorkpackageVMs","Code","codeVM","nameVM","descriptionVM","OnCodeChanged","OnFullNameChanged","GetSupItem","supWp","PMDataVM","Workpackage_DictVM","CheckboxVM","Cancel","ischecked","isDisable","onCheckChange","WorkpackageInputVM","workpackageVMStorageList","commandName","IsNew","WorkpackageInput","DeleteFunc","CodeVM","NameVM","DescriptionVM","IsNewVM","Ischecked","selectVM","SupItemSelectVM","supItemSelectVM","selectVMUtil","WorkpackageVMStorageList","CommandVM","workpackageVM","isNewVM","checkboxVMUtil","commandVM","CommandName","pmDataVM","GetCommandName","GetWorkpackageVMStorageList","GetWorkpackageInputVM","dictVM","OnGetItemsDone_Funcs","OnAddDatabaseDone","OnAdd","workpackageInputVMUtil","ElementFilterSetting_DictVM","ModelItem","OnGetItemsDone","currentItem","CurrentItem","EditItem","SettingVM","GetDataVM","OnGetDataVM","textUtil","dataVM","OnInitialSetDataVM","ElementFilterSettingVM","cateFilterVM","CategoryFilterVM","OnInitialData","famFilterVM","FamilyFilterVM","EntFilterVM","SetData","ValueTypeSelectVM","StringFilterTypeSelectVM","ValuesSelectVM","ValueStorageList","valueTypeSelectVM","FilterValueTypes","stringFilterTypeSelectVM","StringFilterTypes","valuesSelectVM","multiSelectVMUtil","ValueSelectPlaceholder","ElementFilterSettingDataVM","GetCategoryFilterVM","CategoryFilter","filterVMUtil","isHaveFamilyFilter","GetFamilyFilterVM","FamilyFilter","IsHaveFamilyFilter","IsHaveFamilyFilterVM","categoryFilterVM","familyFilterVM","isHaveFamilyFilterVM","DataVM","dataVMUtil","SettingInputVM","settingTypeVM","editItem","SettingTypeVM","ElementFilterSettingInputVM","GetItems","itemVMUtil","GetInput","inputVMUtil","MES_ValueSettingVM","ValueSettingVMs","RetrieveTypeSelectVM","RetrieveType","ValueFilterVM","WorkpackageSelectVM","MassTypeSelectVM","retrieveType","retrieveTypeSelectVM","RetrieveTypeStorageList","valueFilterVM","ValueFilter","modelItem","workpackageSelectVM","massTypeSelectVM","MassTypeStorageList","GetRetrieveTypeStorageList","ValueRetrieveTypes","GetWorkpackageVM","GetMassTypeStorageList","MassTypes","MES_ValueSetting","ValueSettings","byparameter","GetDefault","vrt","valueFilter","GetApiData","MassExportSettingDataVM","elementFilterVMStorageList","valueSettingVMs","AddNewValueSettingVM","AddNewValueSetting","itemView","valueSettingVMUtil","ElementFilterSelectVM","ElementFilterVM","elementFilterVM","ElementFilter","elementFilterSelectVM","ElementFilterVMStorageList","modelList","oldCount","newCount","delta","abs","originItemVM","valueSettingUtil","itemVM","GetElementFilterVMStorageList","GetElementFilterVM","elemFilter","GetValueSettingVMs","MassExportSettingVM","MassExportSettingInputVM","MassExportSetting_DictVM","MassGroupSetting_DictVM","PhaseVM","addversion","Phase_DictVM","AddVersion","stateType","OK","AddMassVersion","warning","PhaseInputVM","ProjectVM","OnSet_LevelSetting_Func_Dict","typicalLevelSetting","typicalLevelSetting_ForEdit","phase_DictVM","rebarMass_Dict","RebarMass_Dict","InputExportSet","Level_Dict","levelSetting","LevelSettingVM","LS_ItemVM","LevelSettingDataVM","AddItem","CheckboxView","onCheckedChange","OnCheckChanging","LevelGroupVM","primary","isSelectOpen","LevelStorageList","Levels","levelSelectVM","OnGetLevelStorageList_Funcs","triggerVM","IsSelectOpen","buttonTypeVM","addContentVM","GetDefaultPrimary","TLS_FilterValueVM","inputType","ToggleInputType","InputType","it","ValueVM","SwitchChecked_Funcs","valueVM","SelectOpen","selectOpen","PopoverState","popoverState","GetPopoverState","TLS_FilterVM","valueUtil","FieldFilterStorageList","FieldStorageList","TLS_PageItemVM","st","ToggleState","NameOK","NameCancel","isLast","IsLast","AllTabs","IsModelChangePageKey","CurrentPageKey","AddLevelGroup","levelGroupUtil","AddFilter","delElem","InputToolElement","InputElement","GetLevelGroups","GetFilters","TypicalLevelSettingDataVM","pageItems","AddPageItem","pageItemUtil","IsHaveAddCommandTab","allTabs","currentPageKey","ChangePageKey","addCommandTab","TitleElement","AddCommandTab","GetPageItems","TypicalLevelSettingVM","Save","GetPhase_DictVM","GetItemsDone","phaseDictVMUtil","Handle_LevelSetting","IsGet_LevelSetting","setObj","LevelSetting","levelSettingUtil","GetTypicalLevelSetting_Func","model","typicalLevelUtil","GetTypicalLevelSetting","GetTypicalLevelSetting_ForEdit","TypicalLevelSetting_ForEdit","Project_DictVM","MassResultCompVM","IsShowProjectSelect","CanHavePhase","isHavePhase","massGroupSettingStorageList","IsDataPending","handledRatio","GetMassData","HandledRatio","projects","Projects","projectVMs","projectVMStorageList","ProjectSelectVM","projectSelectOpen","ProjectPopoverState","projectPopoverState","projectSelectVM","ProjectVMStorageList","ProjectVMs","placement","rel","href","ProjectSelectOpen","phaseVMs","massItem_Dict","MassItem_Dict","phaseVMStorageList","PhaseSelectVM","phaseSelectVM","PhaseVMStorageList","PhaseVMs","IsHavePhase","isShowPhaseSelectVM","MassGroupSettingSelectVM","massGroupSettingSelectVM","MassGroupSettingStorageList","toFixed","loadingSpinTipVM","LoadingSpinTip","LoadingSpinTipVM","isfetchProjects","ViewItem","GetProjectVMStorageList","massTable","MassTable","OnIsUpdateDataDone_Funcs","OnSetHandledRatio_Funcs","GetProjectVMs","GetPhaseVMs","GetMassGroupSettingStorageList","MassGroupSetting_Dict","GetProjectPopoverStateValue","RenderItem","dataIndex","inputVM","TitleRenderItem","column","CanHandleColumn","IsShow_MoveCommand","CanEditColumn","CanDeleteColumn","TitleRender_Dict","renders","TableColumn","DataIndex","GetByTitle","OnSetTitleOK_Funcs","Update","GetActionColumn","editElem","CanHandleItem","CanEditItem","CanDeleteItem","DeleteItem","IsAction","display","AddColumn","CanAddItem","TitleRenderState","Show_MoveCommand","Collapse_MoveCommand","MoveLeft","IsActive","MoveRight","l1","AllNames","titleRender_Dict","Column_InputType","AllColumnNames","InputVM","Column_Title_SelectWidth","CanShow_MoveCommand","TableRow","Item","Rows","TableCell","Override_Get_CellValue","GetCells","cellUtil","TableVM","CanAddColumn","IsShowActionColumn","columns","dataSource","rows","OnGetItemForAdd","IsTypeNotDefined","DataSource","rowUtil","OnDeleteItem","OnEditItem","colUtil","actionCol_Index","cit","WorkItemExportDataVM","WorkItemExportSettingVM","IsCategoryChecked","categoryCheckboxVM","checkboxUtil","WorkItemExportSetting","WorkItemExportSetting_DictVM","tableVM","GetTableVM","nameCol","isCateCol","CategoryCheckboxVM","isSubWorkItemCol","GetWorkpackage_DictVM","OnGetWorkpackagesDone","workpackageVMUtil","workpackage_DictVMUtil","GetElementFilterSetting_DictVM","elementFilterSetting_DictVMUtil","ElementFilterSetting_Dict","GetMassExportSetting_DictVM","massExportSetting_DictVMUtil","MassExportSetting_Dict","GetMassGroupSetting_DictVM","massGroupSetting_DictVMUtil","GetProject_DictVM","project_DictVMUtil","GetWorkItemExportSetting_Dict","wieDictVMUtil","WorkItemExportSetting_Dict","mass","typicallevel","inputdata","mepsetting","document","isDebug","OnSet_ProjectViewType_Func_Dict","projectViewType","pvt","OnSet_CurrentProject_Func_Dict","currentProject","main_Classname","workpackage_DictVM","elementFilterSetting_DictVM","massExportSetting_DictVM","massGroupSetting_DictVM","project_DictVM","massResultCompVM","massResultCompVMUtil","filterValueTypes","stringFilterTypes","valueRetrieveTypes","parameterNames","massPropertyNames","massTypes","workItemExportSetting_Dict","CurrentProject","UpdatedDate","MGS_FieldVM","FieldVMs","GetFieldStorageList","MassGroupSettingDataVM","fieldVMs","AddNewFieldVM","fieldVMUtil","GetFieldVMs","MassGroupSettingVM","CSVExport","Export","wb","Sheets","XLSX","json_to_sheet","Headers","SheetNames","excelBuffer","bookType","Blob","FileSaver","FileName","ExportTest","ws1","t","ws2","f","Override_Get_Data","Override_Get_FileName","fileName","ExcelExport","Workbook","Override_Get_Workbook","workbook","MT_Cell","Override_Get_Row","Override_Get_Column","Override_Get_Formula","formula","isContinueSubRows","Type","Formula","z","Format","Style","MT_Data_Row","Worksheet","FullRows","string","ws","GetSubItems","GetTitle","vc_dict","ValueCell_Dict","firstCol","First_ValueColumn","firstRow","First_ValueRow","getRowFunc","FullIndex","titleCell","c_vt","valueCell","IsContinueSubRows","Address","GetFullItems","FullItems","MT_Data_Worksheet","First_TitleColumn","First_TitleRow","mainRows","fullRows","valueCells","titleCells","fc","fr","font","bold","allCells","TitleCells","ValueCells","listCells","AllCells","range","minRow","minCol","maxRow","maxCol","RangeName","ResultData","MT_RawData_Worksheet","InfoFields","dataRows","Data_WS","tableRows","DataRows","records","ExportData","infoFields","Binding_DataRow","valueFields","Records","ifs","ifl","vfs","ValueFields","cell_val","data_cell","MT_Workbook","RawData_WS","data_WS","rawData_WS","All_WS","GetData_WS","GetRawData_WS","IsValidTable","columnField","Init","Handled_CreatedByUser_Rows","GetColumn","GetCell","canAdd","Build","colField","IsOnSaveMassGroup","HandledItems","HandledItemPhases","AddHandledItems","IsUpdateDataDone","colFieldValue","initialRow","HandleRowFieldIndex","GetRow_Value_FieldIndex","rowFieldIndex","itemCount","lastRow","rowField","valueString","Handle_AddRow","subMgcs","subIndex","mgiItem","r1","originalSupRow","isGet_SupRow_Done","fullFunc","sr","getSupRow","r","r2","awaitGetSupRowForAdd","SaveMassGroup","refSelectVM","Reference_MassGroupSetting_SelectVM","MassGroupSelectVM","MassGroupInput_State","mgi_st","Toggle_MassGroupInput_State","massGroupName","MassGroupInputOK","MassGroupName","needValidateForOveride","handle_UpdateMassGroup","refVM","mgsUtil","mgsVMUtil","MassGroupNameVM","Override_MassGroup_Modal_OKFunc","Is_Override_MassGroup_Modal_Open","MassGroupInputCancel","AddMainRow","massGroupSetting","mainMGC","mgi1","mainMGI","massGroupNameVM","massGroupSelectVM","formatedDate","dayjs","Date","now","format","wbUtil","excelExport","ovrgFileName","ovrgWb","eeUtil","ExportTitle","ExcelWorkbook","Is_First_Get_MassTable","wp_Dict","IsDataChanged","RefreshData","projectIds","phaseIds","massItemUtil","setExportSetData","exportSet","currentVersion","CurrentVersion","OnGetCurrentVersionDone_Func","inputExportSet","OnGetInputExportSetDone_Funcs","LevelGroup","levels","getLevelStorageList","IsGet_LevelStorageList","GetLevelStorageList","min","LevelIndexs","max","MinLevel","MaxLevel","FilterDescription","TLS_FilterValue","TLS_Filter","arr","TLS_PageItem","TypicalLevelSettingData","fieldFilterStorageList","levelStorageList","GetTest","GetFromDb_Async","phaseId","resData","editData","GetFieldFilterStorageList","fieldUtil","level_Dict","getLevelsFunc","OnGetExportSetVersions_Func","exportSetVersions","IsOnGetDb_Async","GetExportSetVersionData","ExportSetVersions","GetExportSetVersions","settingUtil","addVersionFunc","PhaseInput","phaseUtil","inputUtil","phase_Dict","phaseDictUtil","GetInputExportSetDone","getInputExportSetDone","ExportSet","GetCurrentVersionDone","ExportSetVersion","RetrieveFrom","retrieveFrom","GetCurrentVersion_Async","versionUtil","AddVersion_Async","addItem","Level","getAll","Elevation","elevation","LS_Item","tempId","TempId","LevelSettingData","GetRebarMass_Dict","rebarMassDictUtil","GetInputExportSet_Async","exportSetUtil","GetLevel_Dict","levelDictUtil","levelUtil","ElementFilterSetting","ElementFilterSettingData","categoryFilter","familyFilter","SettingInput","GetData","OnGetData","prefix","UrlPrefix","AddDatabaseDone","NewItem","GetEditItem","urlPrefix","ElementFilterSettingInput","elementFilterSettingUtil","cateFilter","MassExportSettingData","elementFilter","elementFilterId","valueSettings","exportSettings","GetElementFilter","elemFilterId","GetDefaultValueSettings","MassExportSetting","MassExportSettingInput","massExportSettingUtil","TrackingItem","Tracking","WorkpackageId","supId","SupId","NewWorkpackage","workpackageUtil","wp","GetFullName","UpperList","LowerList","wps","GetWorkpackagesDone","workpackageInput","MassDetailSettingData","mainMassType","MainMassType","MassDetailSetting","GetFromDb","MassDetailSetting_Dict","OnGetItemsDone_Func_Dict","GetFilterValueTypes","GetStringFilterTypes","GetValueRetrieveTypes","GetMassPropertyNames","GetMassItemFields","GetMassTypes","DebugPoints","LoggingItems","workpackage_Dict","elementFilterSetting_Dict","massExportSetting_Dict","massGroupSetting_Dict","project_Dict","massResultComp","categoryData","massItemFields","mifs_ForMassGroup","versionCompareSetting","massDetailSetting_Dict","massDetailSetting_DictUtil","tracking","upperList","lowerList","dbItem","GetUpperList","GetLowerList","workpackageVMs","CurrentWorkpackage","workpackageInputVM","Workpackage_DictView","CurrentWorkpackageVM","searchName","SearchName","orientation","plain","margin","DeleteView","EntFilterView","test","ItemVMs","CurrentItemVM","ElementFilterSettingDataView","ElementFilterSetting_DictView","MES_ValueSettingView","borderRadius","MassExportSettingDataView","valueSettingElems","MassExportSetting_DictView","MassCell_ValueView","MassCellView","TDStyle","AStyle","EditableTextView","MassRowView","subElems","toggleButton","marginRight","scope","IsHave_Addition_Wrapper","AdditionInfomation_Element","RawValue_Element","HoverToolElement","ModalElement","j","CSVExportView","Test","filename","headers","MassTableView","thElems","tbodyElems","SaveFilled","DownloadOutlined","MassGroupInput_Element","MassGroupInput_Toggle_Classname","MassGroupInput_Toggle_Content","Override_MassGroup_ModalElement","MassResultCompView","IsShowPhaseSelectVM","justifyContent","TableView","tableElem","theadElem","LeftCircleOutlined","RightCircleOutlined","tbodyElem","WorkItemExportSetting_DictView","LeftNav","LeftNavItem","LeftNavVM","modelUtil","GetPreTitle","preTitle","GetItemClass","ProjectViewType","SetView","PreTitle","LeftNavView","navUtil","GetInitialColumnNames","SettingData","GetColumns","InitialColumnNames","MassDetailTable","initialColumnNames","settingData","GetSettingName","Handle_SettingStorageList","set_StorageList","SettingStorageList","tableUtil","MassDetailVM","IsGet_SettingStorageList_Done_Func_Dict","SettingOK","preSetting","PreSetting","IsOnSaveSetting","SaveSetting","SettingSelectVM_ForInput","SettingSelectVM","SettingInput_State","mdi_st","Toggle_SettingInput_State","settingName","SettingInputOK","SettingName","input_State","setting","handle_UpdateSetting","DetailTable","ColumnNames","isnew","newItem","Override_Setting_Modal_OKFunc","Is_Override_Setting_Modal_Open","SettingInputCancel","handle_SettingFunc","settings","detailTable","settingStorageList","settingSelectVM_ForInput","settingInputVM","settingSelectVM","MassDetailTableView","MassDetailView","match","params","Main_Classname","SettingInput_Element","SettingInput_Toggle_Classname","SettingInput_Toggle_Content","Override_Setting_ModalElement","withRouter","LevelGroupView","LevelSelectVM","DeleteFilled","TLS_FilterValueView","TLS_FilterView","TLS_PageItemView","Tabs","TabPane","TypicalLevelSettingDataView","stopPropagation","activeKey","tab","TypicalLevelSettingView","Phase_DictView","PlusCircleOutlined","RebarMass_DictView","LevelSettingDataView","ProjectCompVM","projectVM","projectUtil","projectVMUtil","massResComp","setItemsFuncs","GetMassResultCompVM","massResutlCompVMUtil","ProjectCompView","ViewElement","PMDataView","basename","exact","path","component","TestView","DO_Comp","DO_Element","element","elementinfo","elementinfo_identify","elementinfo_locate","et","DO_ElementVM","isOpenSub","IsOpenSub","ToggleSubContentVM","toggleSubContentVM","GetToggleSubContent","DO_CompVM","DO_ElementView","IsHaveButton","DO_CompView","elem","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.161eaa82.chunk.js","sourcesContent":["export const text = 'text'\r\nexport const password = 'password'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as ts from './TextState'\r\n\r\nexport class TextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder : observable,\r\n      State : observable\r\n    })\r\n  }\r\n\r\n  content = undefined\r\n  get Content(){\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  inputStyle\r\n\r\n  style\r\n  get Style() {\r\n    if (!this.style) {\r\n      this.style = this.inputStyle ? this.inputStyle : {};\r\n\r\n      if (this.wrapper) {\r\n        this.style.position = 'relative';\r\n      }\r\n    }\r\n    return this.style;\r\n  }\r\n\r\n  State = ts.text\r\n}","import { TextVM } from \"./TextVM\"\r\n\r\nexport const get = (q, placeholder) => {\r\n  var qI = new TextVM();\r\n  qI.content = q;\r\n  qI.placeholder = placeholder;\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport * as ts from '../text/TextState'\r\n\r\nclass InputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    var { value } = e.target;\r\n    this.state.Content = value;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { content, placeholder } = data;\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <Input value={content} onChange={this.onChange}\r\n            placeholder={placeholder} /> : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={content} onChange={this.onChange} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(InputView)","import axios from 'axios';\r\nimport { message } from 'antd';\r\n\r\nexport const API_URL = 'https://api.bimdev.vn/api';\r\n\r\n// const http = axios.create({\r\n//   baseURL: API_URL,\r\n//   Accept: 'application/json',\r\n//   'Content-Type': 'application/json',\r\n//   //timeout: 20000\r\n//   timeout: 20000000\r\n// });\r\n\r\nconst http = (timeout) => axios.create({\r\n    baseURL: API_URL,\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    timeout\r\n  });\r\n\r\nconst handleNetworkError = (err) => {\r\n  message.error(`Error sending request: ${err}`);\r\n  return {\r\n    success: false\r\n  };\r\n}\r\n\r\nconst handleResponse = (response) => {\r\n  // Parse the axios response\r\n  const success = response.status >= 200 && response.status < 300;\r\n  const data = response.data;\r\n  let message = response.statusText;\r\n  return {\r\n    success,\r\n    data,\r\n    message\r\n  };\r\n}\r\n\r\nexport const callApi = async (action) => {\r\n  try {\r\n    const response = await action;\r\n    return handleResponse(response);\r\n  } catch (err) {\r\n    return handleNetworkError(err);\r\n  } finally { }\r\n}\r\n\r\nexport const timeout_default = 20000\r\n\r\nexport const get = async (url, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  return callApi(http(timeout).get(url, config));\r\n}\r\n\r\nexport const put = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).put(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const post = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).post(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const del = async (url, payload,timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).delete(url, payload));\r\n  return result;\r\n}","export const concrete = \"concrete\";\r\nexport const formwork = \"formwork\";\r\nexport const rebar = \"rebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [ concrete, formwork, rebar ];\r\n}\r\n\r\nexport const IsGetElement = (massType) => {\r\n  return massType === concrete || massType === formwork;\r\n}","import * as mt from '../MassType'\r\n\r\nexport const Project = 'Project'\r\nexport const Phase = 'Phase'\r\nexport const Workpackage = 'Workpackage'\r\nexport const Value = 'Value'\r\nexport const Unit = 'Unit'\r\nexport const partition = 'partition'\r\nexport const rebarType = 'rebarType'\r\nexport const elementName = 'elementName'\r\nexport const MassType = 'MassType'\r\nexport const workItem = 'workItem'\r\nexport const level = 'level'\r\nexport const diameter = 'diameter'\r\nexport const block = 'block'\r\nexport const discipline = 'discipline'\r\nexport const zone = 'zone'\r\nexport const typename = 'typename'\r\nexport const materialName = 'materialName'\r\nexport const systemtype = 'systemtype'\r\nexport const systemclassification = 'systemclassification'\r\nexport const familyName = 'familyName'\r\nexport const size = 'size'\r\nexport const roomName = 'roomName'\r\nexport const roomNumber = 'roomNumber'\r\n\r\nexport const GetAll = () => {\r\n  return [MassType, workItem, level, block, elementName, diameter]\r\n}\r\n\r\nexport const GetForMassGroup = () => {\r\n  return [\r\n    MassType, workItem, level, block, zone,\r\n    familyName, typename,\r\n    elementName, materialName, roomName, roomNumber,\r\n    systemtype, systemclassification, size\r\n\r\n  ]\r\n}\r\n\r\nexport const GetDirectiveFields = () => {\r\n  return [Project, Workpackage, Value, Unit];\r\n}\r\n\r\nexport const GetIdentifyFields = () => {\r\n  return [elementName];\r\n}\r\n\r\nexport const Get_MassInfo_Fields = () => {\r\n  return [materialName]\r\n}\r\n\r\nexport const GetFullFields = (massItem, field) => {\r\n  switch (field) {\r\n    case Project:\r\n    case Value:\r\n    case Unit:\r\n    case MassType:\r\n    case Phase:\r\n      return {\r\n        fields: [field],\r\n        isFromElement: false\r\n      };\r\n    case workItem:\r\n    case elementName:\r\n    case rebarType:\r\n    case partition:\r\n    case level:\r\n    case diameter:\r\n    case block:\r\n    case zone:\r\n    case typename:\r\n    case materialName:\r\n    case roomName:\r\n    case roomNumber:\r\n    case systemtype:\r\n    case systemclassification:\r\n    case familyName:\r\n    case size:\r\n      var massType = massItem[MassType];\r\n      if (Get_MassInfo_Fields().includes(field) ||\r\n        massType === mt.rebar) {\r\n        return {\r\n          fields: ['Info', field],\r\n          isFromElement: false\r\n        };\r\n      } else {\r\n        var groupName = undefined;\r\n        // kiểm tra các phân nhóm trong Element: identify, locate ...\r\n        switch (field) {\r\n          case workItem:\r\n          case elementName:\r\n          case typename:\r\n          case systemtype:\r\n          case systemclassification:\r\n          case familyName:\r\n            groupName = 'identify';\r\n            break;\r\n          case level:\r\n          case block:\r\n          case zone:\r\n          case roomName:\r\n          case roomNumber:\r\n            groupName = 'locate';\r\n            break;\r\n          case size:\r\n            groupName = 'geometry';\r\n            break;\r\n        }\r\n        return {\r\n          fields: ['Element', 'info', groupName, field],\r\n          isFromElement: true\r\n        }\r\n      }\r\n  }\r\n}\r\n\r\nexport const GetValueString = (massFieldValue, field) => {\r\n  var value = undefined;\r\n\r\n  switch (field) {\r\n    case Project:\r\n    case Phase:\r\n      value = massFieldValue.Name;\r\n      break;\r\n    case Workpackage:\r\n      value = massFieldValue.FullName;\r\n      break;\r\n    default:\r\n      value = massFieldValue;\r\n      break;\r\n  }\r\n\r\n  return value ? value : 'undefined';\r\n}\r\n\r\nexport const GetListForTypicalLevelFilter = () => {\r\n  return [workItem, MassType, block]\r\n}\r\n\r\nexport const GetDefaultListValue = (field) => {\r\n  switch (field) {\r\n    case workItem:\r\n      return ['Dầm', 'Sàn', 'Cột', 'Vách'];\r\n    default:\r\n      return [];\r\n  }\r\n}","import * as api from './apiUtil'\r\n\r\nexport let dtFormat = new Intl.DateTimeFormat('en-GB');\r\n\r\nexport const deepClone = (q) => {\r\n  return JSON.parse(JSON.stringify(q));\r\n}\r\n\r\nexport const randomId = () => {\r\n  // Math.random should be unique because of its seeding algorithm.\r\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n  // after the decimal.\r\n  return Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const newGUID = () => {\r\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\r\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n  );\r\n}\r\n\r\nexport const UpdateFromModel = (obj, action) => {\r\n  obj.M2VM = true;\r\n  action();\r\n  obj.M2VM = false;\r\n}\r\n\r\nexport const MoveItem = (list, oldIndex, newIndex) => {\r\n  if (oldIndex === -1 || newIndex === -1 ||\r\n    oldIndex === newIndex) return;\r\n  var temp = list[oldIndex];\r\n  list[oldIndex] = list[newIndex];\r\n  list[newIndex] = temp; \r\n}\r\n\r\nexport const IsEqual = (list1, list2) => {\r\n  if (list1.length !== list2.length) return false;\r\n  var isValidCheck = true;\r\n  var isEqual = true;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && x !== list2[i]) {\r\n      isValidCheck = false; isEqual = false;\r\n    }\r\n  })\r\n\r\n  return isEqual;\r\n}\r\n\r\nexport const IsSameValues = (list1, list2) => {\r\n  var isValidCheck = true;\r\n  var isSame = true;\r\n\r\n  if (list1.length !== list2.length) return false;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && !list2.includes(x)) {\r\n      isValidCheck = false; isSame = false;\r\n    }\r\n  })\r\n\r\n  return isSame;\r\n}\r\n\r\nexport const GroupBy = function (xs, key) {\r\n  var groups = [];\r\n\r\n  xs.forEach(x => {\r\n    var val = x[key];\r\n    var group = undefined;\r\n    var index = groups.findIndex(y => val === y.Key);\r\n    if (index === -1) {\r\n      group = {\r\n        Key: val,\r\n        Items: []\r\n      };\r\n      groups.push(group);\r\n    } else {\r\n      group = groups[index];\r\n    }\r\n    group.Items.push(x);\r\n  })\r\n\r\n  return groups;\r\n};\r\n\r\nexport const Remove = (dict, key) => {\r\n  var index = dict.findIndex(x => x.Key === key);\r\n  if (index !== 0) {\r\n    return dict.splice(index, 1);\r\n  }\r\n}\r\n\r\nexport const Add = (dict, func, isDelete = true) => {\r\n  var key = newGUID();\r\n\r\n  var newfunc = () => {\r\n    func();\r\n    if (isDelete) {\r\n      Remove(dict, key);\r\n    }\r\n  }\r\n\r\n  dict.push({\r\n    Key: key,\r\n    Value: newfunc\r\n  });\r\n}\r\n\r\nexport const Add_2 = (dict, func, isDelete = true) => {\r\n  dict.push({\r\n    Key: newGUID(),\r\n    Value: func,\r\n    IsDelete : isDelete\r\n  });\r\n}\r\n\r\nexport const Handle = (dict, newDict_Handle) => {\r\n  dict.forEach(x => x.Value());\r\n\r\n  dict = dict.filter(x => !x.IsDelete);\r\n  newDict_Handle(dict);\r\n}\r\n\r\n// Truy xuất thông tin Excel\r\nexport const ExcelColumnName = (n) => {\r\n  var ordA = 'A'.charCodeAt(0);\r\n  var ordZ = 'Z'.charCodeAt(0);\r\n  var len = ordZ - ordA + 1;\r\n\r\n  var s = \"\";\r\n  while(n >= 0) {\r\n      s = String.fromCharCode(n % len + ordA) + s;\r\n      n = Math.floor(n / len) - 1;\r\n  }\r\n  return s;\r\n}\r\n\r\nexport const ExcelCellName = (row, col) => {\r\n  return `${ExcelColumnName(col)}${row+1}`;\r\n}\r\n\r\nexport const ExcelRangeName = (row1, col1, row2, col2) => {\r\n  return `${ExcelCellName(row1, col1)}:${ExcelCellName(row2, col2)}`\r\n}\r\n\r\n// Max min\r\nexport const MinMax = (arr) => {\r\n  return arr.reduce(({min, max}, v) => ({\r\n    min: min < v ? min : v,\r\n    max: max > v ? max : v,\r\n  }), { min: arr[0], max: arr[0] });\r\n}\r\n\r\n// Save Database\r\nexport const SaveDatabse = (q, url, handle) => {\r\n  var apiData = q.ApiData\r\n  var _id = apiData._id;\r\n\r\n  var isNew = _id ? false : true\r\n  const apiFunc = () => isNew ?\r\n    api.post(`${url}/add`, apiData) :\r\n    api.put(`${url}/edit`, apiData) \r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew){ \r\n        q._id = data._id\r\n      }\r\n      handle(data, isNew);\r\n    })\r\n}\r\n\r\n// Get plain text from paste\r\nexport const GetPlainText = (pasteEvent) => {\r\n  var text = (pasteEvent.originalEvent || pasteEvent).clipboardData.getData('text/plain');\r\n  return text;\r\n}\r\n\r\n// First - Last Item\r\nexport const GetFirst = (list) => {\r\n  return list.length !== 0 ? list[0] : undefined;\r\n}\r\n\r\nexport const GetLast = (list) => {\r\n  return list.length !== 0 ? list[list.length -1] : undefined;\r\n}","import * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport default class MassColumn {\r\n  _id\r\n  get id() {\r\n    if (!this._id){\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.Columns.indexOf(this);\r\n  }\r\n\r\n  Cells = []\r\n}","import { Component } from \"react\";\r\nimport React from 'react'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport * as ts from '../text/TextState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nclass NewInputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.contentEditable = React.createRef();\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    var data = this.state;\r\n    data.Content = e.target.value;\r\n  };\r\n\r\n  OnPaste = (e) => {\r\n    e.preventDefault();\r\n    var text = genUtil.GetPlainText(e);\r\n\r\n    var data = this.state;\r\n    data.Content = text;\r\n  }\r\n\r\n  OnKeyDown = (e) => {\r\n    // Ctrl + B\r\n    if (e.ctrlKey && e.which == 66) {\r\n      e.preventDefault();\r\n    }\r\n    else if (e.ctrlKey && e.which == 73) {\r\n      e.preventDefault();\r\n    }\r\n    // Enter\r\n    else if (e.keyCode == 13){\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var Content = data.Content;\r\n    var style = this.props.style ? this.props.style : {};\r\n    if (!style.minWidth) {\r\n      style.minWidth = 150\r\n      style.fontFamily = 'password'\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <ContentEditable className='ant-input' innerRef={this.contentEditable}\r\n            placeholder={data.Placeholder}\r\n            style={style}\r\n            html={Content ? Content : ''}\r\n            onChange={this.handleChange}\r\n            onKeyDown={this.OnKeyDown}\r\n            onPaste={this.OnPaste} />\r\n          : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={Content} onChange={this.handleChange}\r\n            style={style} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(NewInputView)","export const _default = \"default\";\r\nexport const edit = \"edit\";","import * as util from './TextRenderItemUtil'\r\n\r\nexport class TextRenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport * as rs from './TextRenderState'\r\nimport { TextRenderItem } from \"./TextRenderItem\";\r\nimport NewInputView from \"../input/NewInputView\";\r\nimport { Button } from \"antd\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new TextRenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (content, context) => <>\r\n        {content}\r\n        { context.Is_Tool_Visible && context.Is_Edit_Visible ?\r\n          <Button type='primary' size='small'\r\n            className='left10 btn-warning' onClick={context.Edit}\r\n          >e</Button>\r\n          : ''}\r\n      </>\r\n    case rs.edit:\r\n      return (content, context) => <>\r\n        <span className='input__wrapper'>\r\n          <NewInputView store={context} />\r\n          {context.Is_Tool_Visible && context.Is_OK_Visible ?\r\n            <Button type='primary' size='small'\r\n              onClick={context.EditOK}>ok</Button>\r\n            : ''}\r\n        </span>\r\n      </>\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './TextRenderItemUtil'\r\n\r\nexport default class TextRender_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../input/NewInputView';\r\nimport TextRender_Dict from './TextRender_Dict';\r\nimport * as ts from './TextState'\r\nimport * as rs from './TextRenderState'\r\n\r\nexport class EditableTextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder: observable,\r\n      State: observable,\r\n       IsEditing: observable,\r\n      renderState: observable,\r\n      Is_Tool_Visible: observable,\r\n      Is_Edit_Visible : observable,\r\n      Is_OK_Visible: observable,\r\n      CanChange_RenderState : observable\r\n    })\r\n  }\r\n\r\n  content = undefined\r\n  get Content() {\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  inputStyle\r\n\r\n  style\r\n  get Style() {\r\n    if (!this.style) {\r\n      this.style = this.inputStyle ? this.inputStyle : {};\r\n\r\n      if (this.wrapper) {\r\n        this.style.position = 'relative';\r\n      }\r\n    }\r\n    return this.style;\r\n  }\r\n\r\n  State = ts.text\r\n\r\n  IsEditing = false\r\n\r\n  titleFunc\r\n  get TitleFunc() {\r\n    if (!this.titleFunc) {\r\n      this.titleFunc = () => this.Content;\r\n    }\r\n    return this.titleFunc;\r\n  } set TitleFunc(v) {\r\n    this.titleFunc = v;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = new TextRender_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v) {\r\n    this.render_Dict = v;\r\n  }\r\n\r\n  OnSet_RenderState_Func_Dict = []\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState;\r\n  } set RenderState(v) {\r\n    if (!this.CanChange_RenderState) {\r\n      return;\r\n    }\r\n\r\n    this.renderState = v;\r\n    this.OnSet_RenderState_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  CanChange_RenderState = true\r\n\r\n  Is_Tool_Visible = true\r\n  Is_Edit_Visible = true\r\n  Is_OK_Visible = true;\r\n\r\n  Edit = () => {\r\n    this.RenderState = rs.edit\r\n  }\r\n\r\n  EditOK = () => {\r\n    this.RenderState = rs._default\r\n  }\r\n\r\n  Render = () => {\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(this.Content, this);\r\n  }\r\n}","import * as util from './CategoryDataUtil'\r\n\r\nexport class CategoryData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new CategoryData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = util.GetCategoryNames();\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n}","export const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Columns']\r\n}","export const category = \"category\";\r\nexport const family = \"family\";\r\nexport const parameter = 'parameter'\r\n\r\nexport const GetAll = () => {\r\n  return [ category, family, parameter ];\r\n}","export const bystring = \"bystring\";\r\nexport const bynumber = \"bynumber\";\r\n\r\nexport const GetAll = () => {\r\n  return [ bystring, bynumber ];\r\n}","export const byequal = \"byequal\";\r\nexport const bycontain = \"bycontain\";\r\nexport const bynotcontain = \"bynotcontain\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bycontain, bynotcontain ];\r\n}","export const byequal = \"byequal\";\r\nexport const bysmaller = \"bysmaller\";\r\nexport const bysmallerorequal = \"bysmallerorequal\";\r\nexport const bybigger = \"bybigger\";\r\nexport const bybiggerorequal = \"bybiggerorequal\";\r\nexport const bybetween = \"bybetween\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bysmaller, bybigger, bybetween ];\r\n}","import { CategoryData } from \"../../single/model/CategoryData\"\r\nimport { PMData } from \"../../single/model/PMData\";\r\nimport { EntFilter } from \"./EntFilter\"\r\nimport * as fct from './FilterCategoryType'\r\nimport * as fvt from './FilterValueType'\r\nimport * as sft from './StringFilterType'\r\nimport * as nft from './NumberFilterType'\r\n\r\nexport const categoryData = () => {\r\n  return CategoryData.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, categoryType) => {\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.valueType;\r\n  qI.NumberFilterType = q.numberFilterType;\r\n  qI.StringFilterType = q.stringFilterType;\r\n  qI.Values = q.values;\r\n  qI.CategoryType = categoryType;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  if (!q) return q;\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.ValueType;\r\n  qI.NumberFilterType = q.NumberFilterType;\r\n  qI.StringFilterType = q.StringFilterType;\r\n  qI.Values = [...q.Values];\r\n  qI.CategoryType = q.CategoryType;\r\n  return qI;\r\n}\r\n\r\nexport const GetValueStorageList = (q) => {\r\n  var list = [];\r\n\r\n  switch (q.CategoryType) {\r\n    case fct.category:\r\n      list = categoryData().CategoryNames;\r\n      break;\r\n    case fct.parameter:\r\n      list = pmData().ParameterNames;\r\n      break;\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    valueType: q.ValueType,\r\n    numberFilterType: q.NumberFilterType,\r\n    stringFilterType: q.StringFilterType,\r\n    values: q.Values\r\n  }\r\n}\r\n\r\nexport const IsValid = (filter, value) => {\r\n  if (value === undefined || value === null) return false;\r\n\r\n  var isValid = false;\r\n  var filterValues = filter.Values;\r\n  switch (filter.ValueType) {\r\n    case fvt.bystring:\r\n      if (typeof value === 'string') {\r\n        var filterType = filter.StringFilterType;\r\n        switch (filterType) {\r\n          case sft.byequal:\r\n            filterValues.forEach(x => {\r\n              if (!isValid && x === value) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bycontain:\r\n            var lowerVal = value.toLowerCase();\r\n            filterValues.forEach(x => {\r\n              if (!isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bynotcontain:\r\n            var lowerVal = value.toLowerCase();\r\n            isValid = true;\r\n            filterValues.forEach(x => {\r\n              if (isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = false;\r\n              }\r\n            })\r\n            break;\r\n        }\r\n      }\r\n      break;\r\n    case fvt.bynumber:\r\n      if (!isNaN(value)) {\r\n        var filterType = filter.NumberFilterType;\r\n        switch (filterType) {\r\n          case nft.byequal:\r\n            return value === filterValues[0];\r\n          case nft.bysmaller:\r\n            return value < filterValues[0];\r\n          case nft.bysmallerorequal:\r\n            return value <= filterValues[0];\r\n          case nft.bybigger:\r\n            return value > filterValues[0];\r\n          case nft.bybiggerorequal:\r\n            return value >= filterValues[0];\r\n          case nft.bybetween:\r\n            var leftVal = filterValues[0];\r\n            var rightVal = filterValues[1];\r\n            return (filter.IsEqualLeft && leftVal === value) ||\r\n              leftVal < value && value < rightVal\r\n              || (filter.IsEqualRight && value === rightVal);\r\n        }\r\n      }\r\n      break;\r\n  }\r\n\r\n  L1:\r\n  return isValid;\r\n}","import * as util from './EntFilterUtil'\r\n\r\nexport class EntFilter\r\n{\r\n  ValueType\r\n  NumberFilterType\r\n  StringFilterType\r\n  IsEqualLeft\r\n  IsEqualRight\r\n\r\n  values\r\n  get Values(){\r\n    return this.values;\r\n  }\r\n  set Values(v){\r\n    this.values = v;\r\n  }\r\n\r\n  CategoryType\r\n\r\n  valueStorageList\r\n  get ValueStorageList(){\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = util.GetValueStorageList(this);\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byuser = 'byuser'\r\nexport const byauto = 'byauto'","import MGI_Item from \"./MGI_Item\";\r\nimport * as ct from './MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Instance\r\nexport const create = (mgi, createType) => {\r\n  var qI = new MGI_Item();\r\n  qI.MassGroupItem = mgi;\r\n\r\n  if (!createType) {\r\n    qI.CreateType = ct.byauto;\r\n  } else {\r\n    qI.CreateType = ct.byuser;\r\n    qI.Value = genUtil.newGUID();\r\n    qI.Title = 'Tên đầu mục';\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, mgi) => {\r\n  var qI = new MGI_Item();\r\n\r\n  qI.Value = data.value;\r\n  qI.SupValue = data.supValue\r\n  qI.Title = data.title;\r\n  qI.newMGI_id = data.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = data.createType ? data.createType : ct.byauto\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, mgi) => {\r\n  var qI = new MGI_Item();\r\n\r\n  qI.Value = q.Value;\r\n  qI.SupValue = q.SupValue;\r\n  qI.Title = q.Title;\r\n  qI.newMGI_id = q.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = q.CreateType;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetNewMGI = (q) => {\r\n  var _id = q.newMGI_id;\r\n  if (!_id) return undefined;\r\n  var list = q.MassGroupItem.SupComponent.AllItems;\r\n\r\n  var index = list.findIndex(x => x._id === _id);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  if (q.IsGet_SupItem) return undefined\r\n  q.IsGet_SupItem = true;\r\n\r\n  var supValue = q.SupValue;\r\n  if (!supValue) return undefined;\r\n  \r\n  var list = q.MassGroupItem.Items;\r\n  var index = list.findIndex(x => x.Value === supValue);\r\n  return index !== -1 ? list[index] : undefined\r\n}","import { PMData } from '../../../../single/model/PMData';\r\nimport * as util from './MGI_ItemUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport default class MGI_Item {\r\n  Value\r\n\r\n  SupValue\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  get Index() {\r\n    return this.MassGroupItem.Items.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = this.Value;\r\n    }\r\n    return this.title;\r\n  }\r\n  set Title(v){\r\n    this.title = v;\r\n  }\r\n\r\n  newMGI\r\n  get NewMGI(){\r\n    if (!this.newMGI){\r\n      this.newMGI = util.GetNewMGI(this);\r\n\r\n      if (!this.newMGI && this.newMGI_id){\r\n        this.newMGI_id = undefined;\r\n      }\r\n    }\r\n    return this.newMGI;\r\n  }\r\n  set NewMGI(v){\r\n    this.newMGI = v;\r\n    if (!v || v === this.MassGroupItem){\r\n      this.newMGI_id = undefined;\r\n    }\r\n    else{\r\n      this.newMGI_id = v.id;\r\n    }\r\n  }\r\n\r\n  newMGI_id\r\n\r\n  get ApiData(){\r\n    return {\r\n      value : this.Value,\r\n      supValue: this.SupValue,\r\n      title : this.Title,\r\n      newMGI_id : this.newMGI_id,\r\n      createType : this.CreateType\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.MassGroupItem.Items.splice(this.Index, 1);\r\n  }\r\n}","import * as util from './MassItemUtil'\r\nimport * as mif from './MassItemField'\r\nimport { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport { PMData } from '../../../single/model/PMData'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport default class MassItem {\r\n  Value\r\n  Unit\r\n\r\n  projectId\r\n\r\n  project\r\n  get Project() {\r\n    if (!this.project) {\r\n      this.project = util.GetProject(this);\r\n    }\r\n    return this.project;\r\n  }\r\n\r\n  workpackageId\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    if (!this.workpackage) {\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = util.GetPhases(this);\r\n    }\r\n    return this.phases;\r\n  }\r\n\r\n  get ValidPhasesByInput() {\r\n    return util.GetValidPhasesByInput(this);\r\n  }\r\n\r\n  IsGetElement = false\r\n\r\n  OnGetElementDone_Funcs = []\r\n\r\n  set GetElementDone(v) {\r\n    this.OnGetElementDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  GetValue = (field) => {\r\n    if (!field) {\r\n      return;\r\n    }\r\n\r\n    var data = mif.GetFullFields(this, field);\r\n    var { fields, isFromElement } = data;\r\n\r\n    var getValFunc = () => {\r\n      var obj = this;\r\n      var isValid = true;\r\n\r\n      fields.forEach(x => {\r\n        if (isValid) {\r\n          var temp = obj[x];\r\n          obj = temp;\r\n          if (obj === undefined) {\r\n            isValid = false;\r\n          }\r\n        }\r\n      })\r\n\r\n      if (field === mif.Value) {\r\n        var roundingFactor = 2;\r\n\r\n        if (this.Unit === 'each') {\r\n          roundingFactor = 0;\r\n        }\r\n\r\n        obj = obj.toLocaleString('en-US', { maximumFractionDigits: roundingFactor });\r\n      }\r\n\r\n      return obj;\r\n    }\r\n\r\n    if (!isFromElement || this.Element) {\r\n      var val = getValFunc();\r\n      return val;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id: this._id,\r\n      projectId: this.projectId,\r\n      elementId: this.elementId,\r\n      workpackageId: this.workpackageId,\r\n      exportSetId: this.exportSetId,\r\n      exportSetVersionId: this.exportSetVersionId,\r\n      value: this.Value,\r\n      unit: this.Unit,\r\n      massType: this.MassType,\r\n      info: this.Info\r\n    }\r\n  }\r\n\r\n  AddDatabase = (handle) => {\r\n    var apiData = this.ApiData;\r\n    var { _id } = apiData;\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n\r\n    var command = _id ? 'edit' : 'add';\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/${command}`, apiData) : api.post(`${url}/${command}`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (command === 'add') {\r\n          this._id = data._id;\r\n        }\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`${command} mass successfully`);\r\n      })\r\n  }\r\n\r\n  DeleteDatabase = (handle) => {\r\n    var apiData = {\r\n      _id: this._id\r\n    };\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n    const apiFunc = () => api.put(`${url}/delete`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`delete mass successfully`);\r\n      })\r\n  }\r\n\r\n  IsGet_TLS_LevelGroup = false\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n\r\n  get Get_TLS_LevelGroup() {\r\n    return this.get_TLS_LevelGroup\r\n  }\r\n  set Get_TLS_LevelGroup(v) {\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n    this.get_TLS_LevelGroup = v;\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      util.Handle_TLS_LevelGroup(this);\r\n    }\r\n    return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true;\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    // this.OnGet_FullValue_Func_Dict.forEach(x => {\r\n    //   x.Value()\r\n    // })\r\n    \r\n    genUtil.Handle(this.OnGet_FullValue_Func_Dict, \r\n      (v) => this.OnGet_FullValue_Func_Dict = v);\r\n\r\n    this.get_FullValue = v;\r\n  }\r\n\r\n  // bao gồm giá trị tầng điển hình\r\n  fullValue\r\n  get FullValue() {\r\n    if (!this.fullValue) {\r\n      util.Handle_FullValue(this);\r\n    }\r\n    return this.fullValue;\r\n  } set FullValue(v) {\r\n    this.fullValue = v;\r\n    this.Get_FullValue = true;\r\n  }\r\n\r\n  phaseItems\r\n  get PhaseItems() {\r\n    if (!this.phaseItems) {\r\n      this.phaseItems = util.GetPhaseItems(this);\r\n    }\r\n    return this.phaseItems;\r\n  }\r\n\r\n  GetPhaseItem = (phaseName) => {\r\n    var list = this.PhaseItems;\r\n    var index = list.findIndex(x => x.Phase.Name === phaseName);\r\n    return list[index];\r\n  }\r\n}","import * as util from './MIPh_ItemUtil'\r\n\r\nexport default class MIPh_Item {\r\n  Phase\r\n\r\n  get Project(){\r\n    return this.Phase.Project\r\n  }\r\n\r\n  get MassItem(){\r\n    return this.Dict;\r\n  }\r\n\r\n  IsGet_TLS_LevelGroup = false\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n\r\n  get Get_TLS_LevelGroup(){\r\n    return this.get_TLS_LevelGroup\r\n  }\r\n  set Get_TLS_LevelGroup(v) {\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n    this.get_TLS_LevelGroup = v\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      util.Handle_TLS_LevelGroup(this);\r\n    }\r\n    return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true;\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    this.OnGet_FullValue_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  // bao gồm giá trị tầng điển hình\r\n  fullValue\r\n  get FullValue() {\r\n    if (!this.fullValue) {\r\n      util.Handle_FullValue(this);\r\n    }\r\n    return this.fullValue;\r\n  } set FullValue(v) {\r\n    this.fullValue = v;\r\n    this.Get_FullValue = true;\r\n  }\r\n}","import MIPh_Item from \"./MIPh_Item\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as mif from '../MassItemField'\r\n\r\n// Instance\r\nexport const get = (phase, dict) => {\r\n  var qI = new MIPh_Item();\r\n  qI.Phase = phase;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_TLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  var phase = q.Phase;\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    var pi = GetValidTLS_PageItem(q, tls.Data);\r\n    return GetValidTLS_LevelGroup(q, pi);\r\n  }\r\n\r\n  var tls = phase.TypicalLevelSetting;\r\n  if (tls) {\r\n    q.TLS_LevelGroup = getLevelGroup_Func(tls);\r\n  } else {\r\n    phase.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TLS_LevelGroup = getLevelGroup_Func(phase.TypicalLevelSetting);\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      isValid = x.Values.includes(q.MassItem.GetValue(field));\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // Kiểm tra Level hiện tại có trong tập hợp Level hay không\r\n    //if (!validLg && x.Levels.includes(q.GetValue(mif.level))) {\r\n\r\n    // Cách kiểm tra mới: Level primary tương ứng Leve hiện tại\r\n    if (!validLg && x.Primary === q.MassItem.GetValue(mif.level)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\nexport const Handle_FullValue = (q) => {\r\n  if (q.IsGet_FullValue) return undefined;\r\n  q.IsGet_FullValue = true;\r\n\r\n  const getFullValue_Func = (lg) => {\r\n    var count = lg ? lg.Count : 1\r\n    var obj = q.MassItem.Value * count;\r\n    return obj;\r\n  }\r\n\r\n  if (q.TLS_LevelGroup || q.Get_TLS_LevelGroup) {\r\n    q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n  } else {\r\n    genUtil.Add(q.OnGet_TLS_LevelGroup_Func_Dict,\r\n      () => {\r\n        q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n      });\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport MassItem from './MassItem';\r\nimport * as elementUtil from '../../element/ElementUtil'\r\nimport * as mt from '../MassType'\r\nimport * as ut from '../../value/ValueUnit'\r\nimport * as mif from './MassItemField'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as phaseItemUtil from './phaseValue/MIPh_ItemUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new MassItem();\r\n\r\n  qI._id = q._id;\r\n  qI.Value = q.value;\r\n  qI.Unit = q.unit;\r\n  qI.MassType = q.massType;\r\n  qI.Info = q.info;\r\n  qI.projectId = q.projectId;\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.exportSetId = q.exportSetId;\r\n  qI.exportSetVersionId = q.exportSetVersionId;\r\n  qI.Element = q.Elements && q.Elements.length !== 0 ? q.Elements[0] : undefined;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultRebarMass = (project) => {\r\n  var qI = new MassItem();\r\n\r\n  qI.Unit = ut.kg;\r\n  qI.MassType = mt.rebar;\r\n  qI.Info = {}\r\n  qI.projectId = project._id;\r\n\r\n  const setExportSetData = (exportSet) => {\r\n    qI.exportSetId = exportSet._id;\r\n\r\n    var currentVersion = exportSet.CurrentVersion;\r\n    if (!currentVersion) {\r\n      exportSet.OnGetCurrentVersionDone_Func.push(() => {\r\n        currentVersion = exportSet.CurrentVersion;\r\n        qI.exportSetVersionId = currentVersion._id;\r\n      })\r\n    } else {\r\n      qI.exportSetVersionId = currentVersion._id;\r\n    }\r\n  }\r\n\r\n  var inputExportSet = project.InputExportSet;\r\n  if (!inputExportSet) {\r\n    project.OnGetInputExportSetDone_Funcs\r\n      .push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        setExportSetData(inputExportSet);\r\n      })\r\n  } else {\r\n    setExportSetData(inputExportSet);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProject = (q) => {\r\n  var list = pmData().Project_Dict.Items;\r\n  var { projectId } = q;\r\n  var index = list.findIndex(x => x._id === projectId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const getAll = (apiData, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbmr/newlist\";\r\n\r\n  //var start = window.performance.now();\r\n\r\n  api.post(url, apiData, undefined, 2000000)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      //var end = window.performance.now();\r\n      //console.log(`Execution time: ${(end - start)/1000} s`);\r\n\r\n      if (!data) {\r\n        console.log('mass result undefined');\r\n        return;\r\n      }\r\n\r\n      var items = data.map(x => {\r\n        return get(x)\r\n      })\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getRebars = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbmr/rebar?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = undefined;\r\n      if (!data) {\r\n        items = [];\r\n      } else {\r\n        var items = data.map(x => get(x))\r\n      }\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getByViewDetail = (_id, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbdv/massdetail?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var { viewDetail, masses } = data;\r\n      var isGetElement = mt.IsGetElement(viewDetail.massType);\r\n      var items = masses.map(x => get(x, isGetElement));\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetWorkpackage = (q) => {\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var { workpackageId } = q;\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetPhases = (q) => {\r\n  var list = [];\r\n  var phases = pmData().Phase_Dict.Items;\r\n  var exportSetVersionId = q.exportSetVersionId;\r\n  phases.forEach(x => {\r\n    if (x.exportSetVersionIds.includes(exportSetVersionId)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetValidPhasesByInput = (q) => {\r\n  var inputPhases = pmData().MassResultComp.Phases;\r\n  var phases = q.Phases;\r\n  var list = [];\r\n  phases.forEach(x => {\r\n    if (inputPhases.includes(x)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetElementAsync = (q) => {\r\n  var elemId = q.elementId\r\n  if (elemId) {\r\n    elementUtil.GetById(elemId, (data) => {\r\n      q.Element = data\r\n      q.IsGetElement = true;\r\n      q.GetElementDone = true;\r\n    });\r\n  } else {\r\n    q.IsGetElement = true;\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  var project = q.Project;\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    var pi = GetValidTLS_PageItem(q, tls.Data);\r\n    var obj = GetValidTLS_LevelGroup(q, pi);\r\n    return obj;\r\n  }\r\n\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    q.TLS_LevelGroup = getLevelGroup_Func(tls);\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TLS_LevelGroup = getLevelGroup_Func(project.TypicalLevelSetting);\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      isValid = x.Values.includes(q.GetValue(field));\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // Kiểm tra Level hiện tại có trong tập hợp Level hay không\r\n    //if (!validLg && x.Levels.includes(q.GetValue(mif.level))) {\r\n\r\n    // Cách kiểm tra mới: Level primary tương ứng Leve hiện tại\r\n    if (!validLg && x.Primary === q.GetValue(mif.level)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\nexport const Handle_FullValue = (q) => {\r\n  if (q.IsGet_FullValue) return undefined;\r\n  q.IsGet_FullValue = true;\r\n\r\n  const getFullValue_Func = (lg) => {\r\n    var count = lg ? lg.Count : 1\r\n    var obj = q.Value * count;\r\n\r\n    q.FullValue = obj;\r\n  }\r\n\r\n  if (q.TLS_LevelGroup || q.Get_TLS_LevelGroup) {\r\n    getFullValue_Func(q.TLS_LevelGroup)\r\n  } else {\r\n    genUtil.Add(q.OnGet_TLS_LevelGroup_Func_Dict,\r\n      () => {\r\n        getFullValue_Func(q.TLS_LevelGroup)\r\n      });\r\n  }\r\n}\r\n\r\nexport const GetPhaseItems = (q) => {\r\n  return q.Phases.map(x => phaseItemUtil.get(x, q));\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport MGI_Item from './MGI_Item'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport * as mgii_ct from './MGI_I_CreateType'\r\nimport * as rowUtil from '../MassRowUtil'\r\nimport * as util from './MassGroupItemUtil'\r\nimport { pmData } from '../../item/MassItemUtil'\r\n\r\nexport default class MassGroupItem {\r\n  Field\r\n  SubComponents = []\r\n  NotIncludeValues = []\r\n  IsHaveValueOrder\r\n  BindingRows\r\n  SupComponent\r\n\r\n  Items = []\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  get Index() {\r\n    return this.SupComponent.Items.indexOf(this);\r\n  }\r\n\r\n  get OrderItems() {\r\n    return this.Items;\r\n  }\r\n\r\n  get OrderValues() {\r\n    return this.Items.map(x => x.Value);\r\n  }\r\n\r\n  get ApiData() {\r\n    var items = this.Items.map(x => x.ApiData);\r\n\r\n    return {\r\n      _id: this.id,\r\n      field: this.Field,\r\n      subComponents: this.SubComponents.map(x => x.ApiData),\r\n      valueOrders: this.ValueOrders,\r\n      notIncludeValues: this.NotIncludeValues,\r\n      items\r\n    }\r\n  }\r\n\r\n  AddNotIncludeValue = (v) => {\r\n    var index = this.NotIncludeValues.indexOf(v);\r\n    if (index === -1) {\r\n      this.NotIncludeValues.push(v);\r\n    }\r\n  }\r\n\r\n  GetItem = (v, title) => {\r\n    var index = this.Items.findIndex(x => x.Value === v);\r\n    if (index === -1) {\r\n      var item = itemUtil.create(this)\r\n      item.Value = v;\r\n      item.Title = title;\r\n      this.Items.push(item);\r\n      return item;\r\n    }\r\n    return this.Items[index];\r\n  }\r\n\r\n  SupRows = []\r\n\r\n  // Những Row được add bằng Phương thức HandleCreatedByUserRows bên dưới\r\n  CreatedByUser_Rows = []\r\n\r\n  On_AddSupRow_Func_Dict = []\r\n\r\n  AddSupRow = (v) => {\r\n    var list = this.SupRows;\r\n    if (list.indexOf(v) !== -1) return;\r\n\r\n    this.NewRow = v;\r\n    list.push(v);\r\n    this.HandleCreatedByUserRows(v);\r\n\r\n    genUtil.Handle(this.On_AddSupRow_Func_Dict, (v) => this.On_AddSupRow_Func_Dict = v);\r\n  }\r\n\r\n  OnIsFirstSetSupRow_Funcs = []\r\n\r\n  isFirstSetSupRow\r\n  get IsFirstSetSupRow() {\r\n    return this.isFirstSetSupRow;\r\n  }\r\n  set IsFirstSetSupRow(v) {\r\n    this.isFirstSetSupRow = v;\r\n    this.OnIsFirstSetSupRow_Funcs.forEach(x => x());\r\n  }\r\n\r\n  get HaveMassItemSubComponents() {\r\n    return this.SubComponents.filter(x => x.IsHaveMassItem);\r\n  }\r\n\r\n  table\r\n  get Table() {\r\n    if (!this.table) {\r\n      this.table = util.GetTable(this);\r\n    }\r\n    return this.table;\r\n  }\r\n  set Table(v) {\r\n    this.table = v;\r\n  }\r\n\r\n  HandleCreatedByUserRows = (newSupRow) => {\r\n    var userItems = this.Items\r\n      .filter(x => x.CreateType === mgii_ct.byuser && !x.IsAdd_Done);\r\n\r\n    // tiến hành Sort UserItems\r\n    var sortedUserItems = []\r\n    var isFirst_Handle = true;\r\n\r\n    while (userItems.length !== 0) {\r\n      let filter\r\n      const validIndexs = []\r\n\r\n      if (isFirst_Handle) {\r\n        // Không có SupItem hoặc SupItem không tạo bởi User\r\n        filter = (x) => x.SupItem === undefined || \r\n          x.SupItem.CreateType !== mgii_ct.byuser;\r\n        isFirst_Handle = false;\r\n      } else {\r\n        filter = (x) =>\r\n          sortedUserItems.findIndex(y => y.Value === x.SupValue) !== -1\r\n      }\r\n\r\n      userItems.forEach((x, i, a) => {\r\n        if (this.IsDebug){\r\n          debugger\r\n        }\r\n\r\n        if (filter(x)) {\r\n          sortedUserItems.push(x);\r\n          validIndexs.push(i);\r\n        }\r\n      })\r\n\r\n      validIndexs.forEach((x, i) => {\r\n        userItems.splice(x - i, 1);\r\n      })\r\n    }\r\n\r\n    sortedUserItems.forEach(x => {\r\n      var value = x.Value;\r\n      var supRows = this.SupRows.concat(this.CreatedByUser_Rows);\r\n      var supRow\r\n\r\n      var isValid = true;\r\n      if (!x.SupValue && supRows.length !== 0) {\r\n        supRow = supRows[0]\r\n      } else {\r\n        var index = supRows.findIndex(y => y.Name === x.SupValue);\r\n        if (index !== -1) {\r\n          supRow = supRows[index];\r\n        } else {\r\n          isValid = false;\r\n        }\r\n      }\r\n\r\n      if (!isValid) return false;\r\n\r\n      // Gán nhãn IsAdd_Done\r\n      x.IsAdd_Done = true;\r\n\r\n      const addRow = (supRow) => {\r\n        var row = this.Table.GetRow(value, supRow);\r\n        row.FullValue = value;\r\n        row.IsCreatedByUser = true;\r\n\r\n        // Lưu vào danh sách Tạo bởi người dùng trong đối tượng Table\r\n        this.Table.CreatedByUser_Rows.push(row);\r\n        this.CreatedByUser_Rows.push(row);\r\n        return row;\r\n      }\r\n\r\n      const handleRow = (row) => {\r\n        row.MassGroupItem = this;\r\n        handleNonField(row);\r\n      }\r\n\r\n      const handleNonField = (row) => {\r\n        var subMgcIndex = this.SubComponents.findIndex(y =>\r\n          y.Filter.Values.includes(x.Value))\r\n        if (subMgcIndex !== -1) {\r\n          var subMgi = this.SubComponents[subMgcIndex].Items[0];\r\n          subMgi.AddSupRow(row);\r\n        }\r\n      }\r\n\r\n      var replaceMgi = x.NewMGI;\r\n      if (replaceMgi) {\r\n        var supName = x.SupValue;\r\n\r\n        replaceMgi.GetItem(value);\r\n        this.Table.Handle_ReplaceMGI(replaceMgi, supName, addRow, handleRow);\r\n      } else {\r\n        handleRow(addRow(supRow));\r\n      }\r\n    })\r\n  }\r\n}","import * as util from './MassGroupComponentUtil'\r\n\r\nexport default class MassGroupComponent {\r\n  Filter\r\n  Items\r\n  SupItem\r\n\r\n  originComponent\r\n  get OriginComponent(){\r\n    if (!this.originComponent){\r\n      this.originComponent = util.GetOriginComponent(this);\r\n    }\r\n    return this.originComponent;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      filter : this.Filter ? this.Filter.ApiData : undefined,\r\n      items: this.Items.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  get AllItems(){\r\n    return this.OriginComponent.AllSubItems;\r\n  }\r\n\r\n  get AllSubItems(){\r\n    var list = [...this.Items];\r\n    this.Items.forEach(x => \r\n      x.SubComponents.forEach(y => list.push.apply(list, y.AllSubItems)));\r\n    return list;\r\n  }\r\n}","import MassGroupComponent from \"./MassGroupComponent\"\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as itemUtil from './MassGroupItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\"\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, supItem) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  qI.Filter = data.filter ? filterUtil.get(data.filter) : undefined;\r\n\r\n  qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supItem) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupComponent();\r\n  qI.Filter = filterUtil.Clone(q.Filter);\r\n\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetOriginComponent = (q) => {\r\n  return q.SupItem ? q.SupItem.SupComponent.OriginComponent : q;\r\n}","import MassGroupItem from \"./MassGroupItem\"\r\nimport * as compUtil from './MassGroupComponentUtil'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (field, subComps, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI.Field = field;\r\n  qI.SupComponent = supCom;\r\n  if (subComps) {\r\n    qI.SubComponents = subComps;\r\n  }\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI._id = data._id;\r\n  qI.Field = data.field;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = data.subComponents ? data.subComponents.map(x => compUtil.get(x, qI))\r\n    : [];\r\n\r\n  if (data.items) {\r\n    qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI))\r\n      .filter(x => x.Value);\r\n    qI.IsHaveValueOrder = true;\r\n  } else {\r\n    qI.Items = []\r\n    qI.IsHaveValueOrder = false;\r\n  }\r\n\r\n  qI.NotIncludeValues = data.notIncludeValues ? data.notIncludeValues : [];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supCom) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupItem();\r\n  qI.id = q.id;\r\n  qI.Field = q.Field;\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.NotIncludeValues = [...q.NotIncludeValues];\r\n  qI.IsHaveValueOrder = q.IsHaveValueOrder;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = q.SubComponents.map(x => compUtil.Clone(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  return q.SupComponent.SupItem.Table;\r\n}","import { MultiSelectVM } from \"./MultiSelectVM\";\r\n\r\nexport const get = (items, initialItems) => {\r\n  var qI = new MultiSelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItems = initialItems;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MultiSelectVMUtil'\r\n\r\nexport class MultiSelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      selectedIndexs: observable,\r\n      open : observable,\r\n      canOpen : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  initialItems;\r\n  get InitialItems() {\r\n    return this.initialItems;\r\n  }\r\n  set InitialItems(v){\r\n    this.initialItems = v;\r\n    this.InitialIndexs = this.GetInitialIndexs();\r\n    this.SelectedIndexs = this.InitialIndexs;\r\n  }\r\n\r\n  initialIndexs;\r\n  get InitialIndexs() {\r\n    if (!this.initialIndexs) {\r\n      this.initialIndexs = this.GetInitialIndexs();\r\n    }\r\n    return this.initialIndexs;\r\n  }\r\n  set InitialIndexs(v){\r\n    this.initialIndexs = v;\r\n  }\r\n\r\n  GetInitialIndexs =() => {\r\n    var initialItems = this.InitialItems;\r\n    if (!initialItems) return [];\r\n    return initialItems.map(x => this.Items.indexOf(x)).filter(x => x !== -1);\r\n  }\r\n\r\n  selectedIndexs = []\r\n  get SelectedIndexs() {\r\n    return this.selectedIndexs;\r\n  }\r\n  set SelectedIndexs(v) {\r\n    this.selectedIndexs = v;\r\n    this.SelectedItems = this.GetSelectedItems();\r\n  }\r\n\r\n  selectedItems\r\n  get SelectedItems() {\r\n    if (!this.selectedItems) {\r\n      this.selectedItems = this.GetSelectedItems();\r\n    }\r\n    return this.selectedItems;\r\n  }\r\n  set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n    if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItems = () => {\r\n    return this.SelectedIndexs.map(x => this.Items[x]);\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder() {\r\n    if (!this.placeholder) {\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { MultiSelectVM } from \"./MultiSelectVM\";\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nconst { Option } = Select;\r\n\r\nclass MultiSelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MultiSelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style ? this.props.style : { width: '100%' }; \r\n    var { Placeholder, Items, SelectedIndexs, InitialIndexs } = data;\r\n\r\n    if (SelectedIndexs.length === 0) {\r\n      SelectedIndexs = InitialIndexs;\r\n      data.InitialIndexs = [];\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined){\r\n        id = genUtil.randomId();\r\n      }else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    return (\r\n      <>\r\n        <Select style={style}\r\n          mode=\"multiple\"\r\n          placeholder={Placeholder}\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={SelectedIndexs}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n          open={data.CanOpen && data.Open}\r\n          onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n        >\r\n          {elems}\r\n        </Select>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MultiSelectView)","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class EntHoverVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsElementVisible: observable,\r\n    })\r\n  }\r\n\r\n  IsElementVisible = false;\r\n\r\n  ShowElement = () => {\r\n    this.IsElementVisible =  true;\r\n  }\r\n\r\n  HideElement = () => {\r\n    this.IsElementVisible =  false;\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport EntHoverVM from \"./EntHoverVM\";\r\n\r\nclass EntHoverView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntHoverVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var className = this.props.className;\r\n    if (!data.style) {\r\n      var style = this.props.style ? this.props.style : {};\r\n      if (!style.minWidth) {\r\n        style.minWidth = 150;\r\n      }\r\n      data.style = style;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={className} style={data.style}\r\n          onMouseEnter={data.ShowElement}\r\n          onMouseLeave={data.HideElement}>\r\n          {data.IsElementVisible ? data.Element : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntHoverView)","import { SelectVM } from \"./SelectVM\";\r\n\r\nexport const get = (items, initialItem) => {\r\n  var qI = new SelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItem = initialItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './SelectVMUtil'\r\n\r\nexport class SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      selectedIndex : observable,\r\n      CanClear :observable,\r\n      open : observable,\r\n      canOpen : observable,\r\n      isDisabled : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = [];\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  initialItem = undefined\r\n  get InitialItem() {\r\n    return this.initialItem;\r\n  }\r\n  set InitialItem(v){\r\n    this.initialItem = v;\r\n    this.InitialIndex = this.GetInitialIndex();\r\n    this.SelectedIndex = this.InitialIndex;\r\n  }\r\n\r\n  initialIndex\r\n  get InitialIndex(){\r\n    if (!this.initialIndex){\r\n      this.initialIndex = this.GetInitialIndex();\r\n    }\r\n    return this.initialIndex;\r\n  }\r\n  set InitialIndex(v){\r\n    this.initialIndex = v;\r\n  }\r\n\r\n  GetInitialIndex = () => {\r\n    var index = this.Items.indexOf(this.InitialItem);\r\n    return index !== -1 ? index : null;\r\n  }\r\n\r\n  selectedIndex = undefined\r\n  get SelectedIndex(){\r\n    return this.selectedIndex;\r\n  }\r\n  set SelectedIndex(v){\r\n    this.selectedIndex = v;\r\n    this.SelectedItem = this.GetSelectedItem();\r\n  }\r\n\r\n  selectedItem\r\n  get SelectedItem (){\r\n    if (!this.selectedItem){\r\n      this.selectedItem = this.GetSelectedItem();\r\n    }\r\n    return this.selectedItem;\r\n  }\r\n  set SelectedItem (v) {\r\n    this.selectedItem = v;\r\n    if (this.OnSelectedItemChanged){\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItem = () => {\r\n    var index = this.SelectedIndex;\r\n    if (index === -1) return undefined;\r\n    return this.Items[index];\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder(){\r\n    if (!this.placeholder){\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v){\r\n    this.placeholder = v;\r\n  }\r\n\r\n  CanClear = false\r\n\r\n  Clear = () => {\r\n    this.SelectedIndex = null\r\n  }\r\n  \r\n  get DivStyle() {\r\n    return this.CanClear ? { \r\n      position: 'relative', \r\n      padding: '0 22px 0 0' \r\n    } : {};\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n\r\n  isDisabled = false\r\n  get IsDisabled(){\r\n    return this.isDisabled;\r\n  } set IsDisabled(v){\r\n    this.isDisabled = v;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class FloatItemVM {\r\n  location\r\n\r\n  className\r\n  getClassName = () => {\r\n    if (!this.className){\r\n      this.className = `float ${this.location}`;\r\n    }\r\n    return this.className\r\n  }\r\n}","import FloatItemVM from \"./FloatItemVM\";\r\n\r\nexport const get = (loc) => {\r\n  var qI = new FloatItemVM();\r\n  qI.location = loc;\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport * as floatItemVMUtil from './FloatItemVMUtil'\r\n\r\nclass FloatItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = floatItemVMUtil.get('top right', 'Test')\r\n    }else{\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className={data.getClassName()}>{this.getWrapperContent()}</span>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(FloatItemView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { SelectVM } from \"./SelectVM\";\r\nimport * as floatItemVMUtil from '../float/FloatItemVMUtil'\r\nimport FloatItemView from \"../float/FloatItemView\";\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport './Select.css'\r\n\r\nconst { Option } = Select;\r\n\r\nclass SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new SelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var className = this.props.className ? this.props.className : ''\r\n    var style = this.props.style ? this.props.style : { width: '100%' };\r\n    var { Placeholder, Items, SelectedIndex, InitialIndex } = data;\r\n\r\n    if (SelectedIndex === -1) {\r\n      SelectedIndex = InitialIndex;\r\n      data.InitialIndex = -1;\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined) {\r\n        id = genUtil.randomId();\r\n      } else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    var floatElem = ''\r\n    if (data.CanClear) {\r\n      var floatItemStore = floatItemVMUtil.get('right')\r\n      floatItemStore.wrapper = <Button size='small' type='primary'\r\n        onClick={data.Clear}>x</Button>\r\n\r\n      floatElem = <FloatItemView store={floatItemStore} />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={`select__wrapper ${className}`}\r\n          style={data.DivStyle} >\r\n          {floatElem}\r\n          <Select style={style}\r\n            showSearch\r\n            placeholder={Placeholder}\r\n            optionFilterProp=\"children\"\r\n            onChange={this.onValueChange}\r\n            value={SelectedIndex}\r\n            filterOption={(input, option) =>\r\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            }\r\n            open={data.CanOpen && data.Open}\r\n            onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n            disabled={data.IsDisabled}\r\n          >\r\n            {elems}\r\n          </Select>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(SelectView)","export const inside = 'inside'\r\nexport const lower = 'lower'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ReplaceRowLocationFactoryUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport * as lt from './RRLF_LocationType'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance\r\n}\r\n\r\nexport default class ReplaceRowLocationFactory {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Location: observable,\r\n    })\r\n  }\r\n\r\n  ReferenceRow\r\n  Location = lt.inside\r\n\r\n  get Color(){\r\n    return util.GetColor(this);\r\n  }\r\n\r\n  get ButtonStyle(){\r\n    return {\r\n      width: 50,\r\n      backgroundColor: this.Color,\r\n      border: 'none'\r\n    };\r\n  }\r\n\r\n  ToggleLocation = () =>{\r\n    switch (this.Location) {\r\n      case lt.inside:\r\n        this.Location = lt.lower;\r\n        break;\r\n      case lt.lower:\r\n        this.Location = lt.inside;\r\n        break;\r\n    }\r\n  }\r\n}","import * as lt from './RRLF_LocationType'\r\n\r\nexport const GetColor = (v) => {\r\n  switch (v.Location) {\r\n    case lt.inside:\r\n      return \"#52c41a\";\r\n    case lt.lower:\r\n      return \"#faad14\";\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TwoCol_SelectVMUtil'\r\nimport * as genUtil from '../../../util/generalUtil'\r\n\r\nexport class TwoCol_SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      availableItems: observable,\r\n      selectedItems: observable,\r\n      inputTitle: observable,\r\n      outputTitle: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    this.AvailableItems = [...this.Items];\r\n    this.SelectedItems = [];\r\n  }\r\n\r\n  inputTitle = undefined\r\n  get InputTitle(){\r\n    if (!this.inputTitle){\r\n      this.inputTitle = 'Dữ liệu input'\r\n    }\r\n    return this.inputTitle;\r\n  } set InputTitle(v){\r\n    this.inputTitle = v;\r\n  }\r\n\r\n  outputTitle = undefined\r\n  get OutputTitle(){\r\n    if (!this.outputTitle){\r\n      this.outputTitle = 'Dữ liệu output'\r\n    }\r\n    return this.outputTitle;\r\n  } set OutputTitle(v){\r\n    this.outputTitle = v;\r\n  }\r\n\r\n  availableItems = undefined\r\n  get AvailableItems() {\r\n    return this.availableItems;\r\n  } set AvailableItems(v) {\r\n    this.availableItems = v;\r\n  }\r\n\r\n  selectedItems = []\r\n  get SelectedItems() {\r\n    return this.selectedItems;\r\n  } set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n  }\r\n\r\n  GetKey = (item) => {\r\n    if (typeof item === 'string') return item;\r\n    var id = item.id ? item.id : genUtil.newGUID();\r\n    return id;\r\n  }\r\n\r\n  Select = (item) => {\r\n    var index1 = this.AvailableItems.indexOf(item);\r\n    this.AvailableItems.splice(index1, 1);\r\n\r\n    this.SelectedItems.push(item);\r\n\r\n    this.IsChanged = true;\r\n  }\r\n\r\n  Unselect = (item) => {\r\n    var index1 = this.SelectedItems.indexOf(item);\r\n    this.SelectedItems.splice(index1, 1);\r\n\r\n    var index = this.Items.indexOf(item);\r\n    if (index < this.AvailableItems.length) {\r\n      this.AvailableItems.splice(index, 0, item);\r\n    } else {\r\n      this.AvailableItems.push(item);\r\n    }\r\n\r\n    this.IsChanged = true;\r\n  }\r\n\r\n  set IsChanged(v) {\r\n    if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(this.SelectedItems);\r\n    }\r\n  }\r\n\r\n  render\r\n  get Render() {\r\n    if (!this.render) {\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v) {\r\n    this.render = v;\r\n  }\r\n}","import { TwoCol_SelectVM } from \"./TwoCol_SelectVM\";\r\n\r\n// Instance\r\nexport const get = (items, render, inputTitle, outputTitle) => {\r\n  var qI = new TwoCol_SelectVM();\r\n\r\n  qI.Items = items;\r\n  qI.Render = render;\r\n  qI.InputTitle = inputTitle;\r\n  qI.OutputTitle = outputTitle;\r\n  \r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(\r\n    [\r\n      'a', 'b', 'c',\r\n      'd', 'e', 'f',\r\n      'g', 'h', 'i',\r\n      'j', 'k', 'q',\r\n      'r', 's', 't',\r\n    ]\r\n  )\r\n}\r\n\r\n// Property\r\nexport const GetRender = (q) => {\r\n  return (item) => item;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { TwoCol_SelectVM } from \"./TwoCol_SelectVM\";\r\nimport * as util from './TwoCol_SelectVMUtil'\r\nimport './TwoCol_Select.css'\r\n\r\nclass TwoCol_SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style;\r\n\r\n    return (\r\n      <>\r\n        <table className='tc_table'>\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <div className='tc_table__title'>\r\n                  <span>\r\n                    {data.InputTitle}\r\n                  </span>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className='tc_table__title'>\r\n                  {data.OutputTitle}\r\n                </div>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <span className='tc_select__partition__items'>\r\n                  {data.AvailableItems.map(x => {\r\n                    return <span key={data.GetKey(x)} onClick={() => data.Select(x)}>\r\n                      {data.Render(x)}\r\n                    </span>\r\n                  })}\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span className='tc_select__partition__items'>\r\n                  {data.SelectedItems.map(x => {\r\n                    return <span key={data.GetKey(x)} onClick={() => data.Unselect(x)}>\r\n                      {data.Render(x)}\r\n                    </span>\r\n                  })}\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TwoCol_SelectView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassRow_ToolElementUtil'\r\n\r\nexport default class MassRow_ToolElement {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      editable_TitleVM_RenderState: observable\r\n    })\r\n  }\r\n\r\n  get Editable_TitleVM() {\r\n    return this.Dict.Editable_TitleVM;\r\n  }\r\n\r\n  editable_TitleVM_RenderState= undefined\r\n  get Editable_TitleVM_RenderState(){\r\n    if (this.editable_TitleVM_RenderState === undefined){\r\n      this.editable_TitleVM_RenderState =\r\n        util.GetEditable_TitleVM_RenderState(this);\r\n    }\r\n    return this.editable_TitleVM_RenderState;\r\n  } set Editable_TitleVM_RenderState(v){\r\n    this.editable_TitleVM_RenderState = v;\r\n\r\n    this.Editable_TitleVM.RenderState= v;\r\n  }\r\n\r\n  Method = (name) => {\r\n    return this.Dict[name];\r\n  }\r\n}","\r\n// Property\r\nexport const GetEditable_TitleVM_RenderState = (q) => {\r\n  return q.Editable_TitleVM.RenderState;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport MassRow_ToolElement from \"./MassRow_ToolElement\";\r\nimport { Button } from \"antd\";\r\nimport { DownCircleOutlined, ReloadOutlined, UpCircleOutlined } from \"@ant-design/icons\";\r\nimport * as trs from '../../../../../text/TextRenderState';\r\n\r\n\r\nclass MassRow_ToolElementView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow_ToolElement();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.Editable_TitleVM_RenderState === trs._default ?\r\n          <Button size='small' type='primary'\r\n            className='btn-warning'\r\n            onClick={() => data.Editable_TitleVM_RenderState = trs.edit}>\r\n            e\r\n          </Button> :\r\n          ''}\r\n\r\n        <Button size='small' type='primary'\r\n          className='btn-success'\r\n          onClick={data.Method('MoveUp')}>\r\n          <UpCircleOutlined />\r\n        </Button>\r\n        <Button size='small' type='primary'\r\n          className='btn-success'\r\n          onClick={data.Method('MoveDown')}>\r\n          <DownCircleOutlined />\r\n        </Button>\r\n\r\n        <Button type='primary' size='small'\r\n          className='btn-warning'\r\n          onClick={data.Method('OpenModal')}>...</Button>\r\n\r\n        <Button size='small' type='primary'\r\n          className='btn-success'\r\n          onClick={data.Method('AddSub')}>+</Button>\r\n        <Button type='primary' size='small' danger\r\n          onClick={data.Method('Delete')}>x</Button>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRow_ToolElementView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil';\r\nimport * as editTextUtil from '../../../../text/EditableTextVMUtil';\r\nimport * as trs from '../../../../text/TextRenderState';\r\nimport * as util from './MassRowUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport { EntFilter } from '../../filter/EntFilter';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport MultiSelectView from '../../../../select/MultiSelectView';\r\nimport { Col, Row, Space, Button, Switch, message, Popover } from 'antd';\r\nimport EntHoverVM from '../../../../hover/EntHoverVM';\r\nimport EntHoverView from '../../../../hover/EntHoverView';\r\nimport { DownCircleOutlined, EnterOutlined, InfoCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport ReplaceRowLocationFactory from './location/ReplaceRowLocationFactory';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport InputView from '../../../../input/InputView';\r\nimport * as mif from '../item/MassItemField'\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as mr_f_it from './MassRow_Field_InputType'\r\nimport NewInputView from '../../../../input/NewInputView';\r\nimport * as tc_selectUtil from '../../../../select/twocol/TwoCol_SelectVMUtil';\r\nimport TwoCol_SelectView from \"../../../../select/twocol/TwoCol_SelectView\";\r\nimport MassRow_ToolElementView from './tool/MassRow_ToolElementView';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class MassRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      rank: observable,\r\n      isShowSub: observable,\r\n      isHaveSub: observable,\r\n      IsToolVisible: observable,\r\n      subItems: observable,\r\n      IsModalVisible: observable,\r\n      title: observable,\r\n      FieldInputType: observable,\r\n      IsHaveAdditionInformation: observable,\r\n      AdditionInformation: observable,\r\n      Is_SelectSubItems_ModalOpen: observable,\r\n      Temp_SelectSubItems: observable,\r\n      isShow_RawValue: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  // SupItem\r\n  // Nguyên bản là SupRow gốc của Row (đã bị thay đổi vị trí)\r\n  Is_Original_SupRow\r\n\r\n  supItem\r\n  get SupItem() {\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v) {\r\n    this.supItem = v;\r\n    this.CurrentList = undefined;\r\n    this.Rank = undefined;\r\n  }\r\n\r\n  currentList\r\n  get CurrentList() {\r\n    if (!this.currentList) {\r\n      this.currentList = this.SupItem ? this.SupItem.SubItems : this.Table.MainRows;\r\n    }\r\n    return this.currentList;\r\n  }\r\n  set CurrentList(v) {\r\n    this.currentList = v;\r\n  }\r\n\r\n  get Table() {\r\n    return this.Dict;\r\n  }\r\n\r\n  // SubItems\r\n  subItems = []\r\n  get SubItems() {\r\n    return this.subItems;\r\n  } set SubItems(v) {\r\n    this.subItems = v;\r\n  }\r\n\r\n  get AllItems() {\r\n    var list = [];\r\n    list.push(this);\r\n    this.SubItems.forEach(x => {\r\n      list.push.apply(list, x.AllItems)\r\n    });\r\n    return list;\r\n  }\r\n\r\n  // Cells\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.Get_Cells(this)\r\n    }\r\n\r\n    return this.cells;\r\n  }\r\n\r\n  UpdateCells = () => {\r\n    this.Cells.forEach(x => x.UpdateData());\r\n  }\r\n\r\n  get Items() {\r\n    var items = this.Cells.reduce((a, b) => a.concat(b.Items), []);\r\n    items = items.filter((x, i, a) => a.indexOf(x) === i);\r\n    return items;\r\n  }\r\n\r\n  // MassGroupItem\r\n  massGroupItem\r\n  get MassGroupItem() {\r\n    return this.massGroupItem;\r\n  }\r\n  set MassGroupItem(v) {\r\n    this.massGroupItem = v;\r\n    if (v) {\r\n      var title = v.GetItem(this.FullValue).Title;\r\n      this.Title = title;\r\n    }\r\n  }\r\n\r\n  replaceMGI\r\n  get ReplaceMGI() {\r\n    return this.replaceMGI\r\n  } set ReplaceMGI(v) {\r\n    this.replaceMGI = v;\r\n  }\r\n\r\n  original_SubMassGroupItem\r\n  get Original_SubMassGroupItem() {\r\n    if (!this.original_SubMassGroupItem) {\r\n      this.original_SubMassGroupItem = util.GetOriginal_SubMassGroupItem(this);\r\n    }\r\n    return this.original_SubMassGroupItem\r\n  }\r\n  set Original_SubMassGroupItem(v) {\r\n    this.original_SubMassGroupItem = v;\r\n  }\r\n\r\n  replace_SubMassGroupItem\r\n  get Replace_SubMassGroupItem() {\r\n    if (!this.replace_SubMassGroupItem) {\r\n      this.replace_SubMassGroupItem = util.GetReplace_SubMassGroupItem(this);\r\n    }\r\n    return this.replace_SubMassGroupItem\r\n  }\r\n  set Replace_SubMassGroupItem(v) {\r\n    this.replace_SubMassGroupItem = v;\r\n  }\r\n\r\n  get SubMassGroupItem() {\r\n    return this.Replace_SubMassGroupItem ?\r\n      this.Replace_SubMassGroupItem : this.Original_SubMassGroupItem\r\n  } set SubMassGroupItem(v) {\r\n    this.Replace_SubMassGroupItem = v;\r\n  }\r\n\r\n  field\r\n  get Field() {\r\n    if (!this.field) {\r\n      this.field = this.MassGroupItem ? this.MassGroupItem.Field : undefined;\r\n    }\r\n    return this.field;\r\n  } set Field(v) {\r\n    this.field = v;\r\n  }\r\n\r\n  isReplaced\r\n  get IsReplaced() {\r\n    return this.isReplaced;\r\n  } set IsReplaced(v) {\r\n    this.isReplaced = v;\r\n    var obj = this.IsHaveAdditionInformation\r\n      = util.Get_IsHaveAdditionInformation(this);\r\n\r\n    if (obj) {\r\n      this.AdditionInformation = util.Get_AdditionInformation(this);\r\n    }\r\n  }\r\n\r\n  original_SupRow\r\n  get Original_SupRow() {\r\n    if (!this.original_SupRow) {\r\n      this.original_SupRow = util.Get_Original_SupRow(this);\r\n    }\r\n    return this.original_SupRow;\r\n  } set Original_SupRow(v) {\r\n    this.original_SupRow = v;\r\n  }\r\n\r\n  get Original_Full_SupRows() {\r\n    return util.Get_Original_Full_SupRows(this);\r\n  }\r\n\r\n  get OrderMGI() {\r\n    return this.ReplaceMGI ? this.ReplaceMGI : this.MassGroupItem;\r\n  }\r\n\r\n  subFields\r\n  get SubFields() {\r\n    if (!this.subFields) {\r\n      this.subFields = util.GetSubFields(this);\r\n    }\r\n    return this.subFields;\r\n  }\r\n  set SubFields(v) {\r\n    this.subFields = v;\r\n  }\r\n\r\n  TempSubFields\r\n\r\n  isShowSub = true\r\n  get IsShowSub() {\r\n    return this.isShowSub;\r\n  }\r\n  set IsShowSub(v) {\r\n    this.isShowSub = v;\r\n    this.ToggleButtonContentVM.Content = util.GetToggleButtonContent(this);\r\n  }\r\n\r\n  toggleButtonContent\r\n  get ToggleButtonContent() {\r\n    if (!this.toggleButtonContent) {\r\n      this.toggleButtonContent = util.GetToggleButtonContent(this);\r\n    }\r\n    return this.toggleButtonContent;\r\n  }\r\n  set ToggleButtonContent(v) {\r\n    this.toggleButtonContent = v;\r\n  }\r\n\r\n  toggleButtonContentVM\r\n  get ToggleButtonContentVM() {\r\n    if (!this.toggleButtonContentVM) {\r\n      var obj = this.toggleButtonContentVM = textVMUtil.get(this.ToggleButtonContent);\r\n      obj.OnSetContent = (v) => this.ToggleButtonContent = v;\r\n    }\r\n    return this.toggleButtonContentVM;\r\n  }\r\n\r\n  rank = undefined\r\n  get Rank() {\r\n    if (this.rank === undefined) {\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v) {\r\n    this.rank = v;\r\n    this.SubItems.forEach(x => x.Rank = undefined);\r\n  }\r\n\r\n  isHaveSub = undefined\r\n  get IsHaveSub() {\r\n    if (!this.isHaveSub) {\r\n      this.isHaveSub = util.GetIsHaveSub(this);\r\n    }\r\n    return this.isHaveSub;\r\n  }\r\n  set IsHaveSub(v) {\r\n    this.isHaveSub = v;\r\n  }\r\n\r\n  get Style() {\r\n    return util.GetStyle(this);\r\n  }\r\n\r\n  IsToolVisible = false\r\n\r\n  FieldInputType = mr_f_it.select\r\n\r\n  Toggle_FieldInputType = () => {\r\n    switch (this.FieldInputType) {\r\n      case mr_f_it.select:\r\n        this.TempField = this.FieldInputVM.Content;\r\n        this.FieldInputType = mr_f_it.input;\r\n        break;\r\n      case mr_f_it.input:\r\n        this.FieldSelectVM.InitialItem = this.TempField\r\n        this.FieldInputType = mr_f_it.select;\r\n        break;\r\n    }\r\n  }\r\n\r\n  TempField\r\n\r\n  fieldInputVM\r\n  get FieldInputVM() {\r\n    if (!this.fieldInputVM) {\r\n      var obj = this.fieldInputVM = textVMUtil.get();\r\n      obj.onSetContent = (v) => this.TempField = v;\r\n    }\r\n    return this.fieldInputVM;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM() {\r\n    if (!this.fieldSelectVM) {\r\n      this.fieldSelectVM = util.GetFieldSelectVM(this);\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get FieldInputElement() {\r\n    return <>\r\n      <div className='massrow__fieldinput_wrapper'>\r\n        <div className='massrow__fieldinput'>\r\n          {this.FieldInputType === mr_f_it.select ?\r\n            <SelectView store={this.FieldSelectVM} /> :\r\n            <NewInputView store={this.FieldInputVM} />\r\n          }\r\n        </div>\r\n        {this.IsCreatedByUser ?\r\n          <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n            checked={this.FieldInputType === mr_f_it.select}\r\n            onChange={this.Toggle_FieldInputType} />\r\n          : ''}\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  subFieldSelectVM\r\n  get SubFieldSelectVM() {\r\n    if (!this.subFieldSelectVM) {\r\n      this.subFieldSelectVM = util.GetSubFieldSelectVM(this);\r\n    }\r\n    return this.subFieldSelectVM;\r\n  }\r\n\r\n  // Title\r\n  title = undefined\r\n  get Title() {\r\n    // if (!this.title) {\r\n    //   util.Handle_Title(this);\r\n    // }\r\n    return this.title;\r\n  }\r\n  set Title(v) {\r\n    this.title = v;\r\n    this.TitleVM.Content = v;\r\n    this.Editable_TitleVM.Content = v;\r\n  }\r\n\r\n  titleVM\r\n  get TitleVM() {\r\n    if (!this.titleVM) {\r\n      this.titleVM = textVMUtil.get(this.Title, 'tiêu đề');\r\n    }\r\n    return this.titleVM;\r\n  }\r\n\r\n  editable_TitleVM\r\n  get Editable_TitleVM() {\r\n    if (!this.editable_TitleVM) {\r\n      var obj = this.editable_TitleVM =\r\n        editTextUtil.get(this.Title, true, true);\r\n\r\n      obj.Is_Edit_Visible = false\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === trs._default) {\r\n            // Lưu thông tin Title\r\n            var title = this.title = obj.Content;\r\n            this.IsShow_RawValue = util.GetIsShow_RawValue(this);\r\n            this.MassGroupItem.GetItem(this.FullValue).Title = title;\r\n\r\n            this.ToolElement.editable_TitleVM_RenderState = obj.RenderState\r\n          }\r\n        },\r\n        false\r\n      )\r\n    }\r\n    return this.editable_TitleVM;\r\n  }\r\n\r\n  get LocationStorageList() {\r\n    return this.Table.AllRows;\r\n  }\r\n\r\n  locationSelectVM\r\n  get LocationSelectVM() {\r\n    if (!this.locationSelectVM) {\r\n      this.locationSelectVM = util.GetLocationSelectVM(this);\r\n    }\r\n    return this.locationSelectVM;\r\n  }\r\n\r\n  // Value lồng giữa Row hiện tại và SupRow\r\n  // Ví dụ: concrete__Tầng 6__Dầm\r\n  FullValue\r\n\r\n  GetCellByColumn = (col) => {\r\n    var index = this.Cells.findIndex(x => x.Column === col);\r\n    return index !== -1 ? this.Cells[index] : undefined;\r\n  }\r\n\r\n  UpdateData = () => {\r\n    // trước là sup Row nhưng sau khi di chuyển vị trí\r\n    // đã mất các item con bên trong\r\n    if (this.Is_Original_SupRow && this.SubItems.length === 0) {\r\n      // Thiết lập thuộc tính Ẩn\r\n      this.IsHidden = true;\r\n      return;\r\n    }\r\n\r\n    this.Rank = util.GetRank(this);\r\n    this.IsHaveSub = util.GetIsHaveSub(this);\r\n\r\n    var isHaveSub = this.SubItems.length !== 0;\r\n\r\n    this.SubItems = util.Order(this.SubItems);\r\n    this.SubItems.forEach((x,i) => { \r\n      x.UpdateData();\r\n    });\r\n\r\n    // Xóa các dòng có thuộc tính IsHidden\r\n    this.SubItems.filter(x => x.IsHidden).forEach(x => {\r\n      this.SubItems.splice(x.Index, 1);\r\n    })\r\n\r\n    // Nếu SubItems rỗng => gán thuộc tính IsHidden\r\n    if (isHaveSub && this.SubItems.length === 0){\r\n      this.IsHidden = true;\r\n    }\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    this.IsShowSub = !this.IsShowSub;\r\n  }\r\n\r\n  SetSubFields = () => {\r\n    var tempSubFields = this.TempSubFields ? this.TempSubFields : [];\r\n\r\n    var isSame = true;\r\n    if (this.SubFields.length !== tempSubFields.length) {\r\n      isSame = false;\r\n    } else {\r\n      this.SubFields.forEach((x, i) => {\r\n        if (isSame && x !== tempSubFields[i]) {\r\n          isSame = false;\r\n        }\r\n      })\r\n    }\r\n    if (isSame) return;\r\n    this.SubFields = tempSubFields;\r\n\r\n    var filter = new EntFilter();\r\n    filter.ValueType = fvt.bystring;\r\n    filter.StringFilterType = sft.byequal;\r\n    filter.Values = [this.FullValue];\r\n\r\n    var supMgi = this.MassGroupItem;\r\n\r\n    var mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n\r\n    var subMgis = mgc.Items = tempSubFields.map(x => mgiUtil.get(x, null, mgc));\r\n\r\n    var subComps = supMgi.SubComponents;\r\n    if (this.SubMassGroupComponent) {\r\n      var index = subComps.indexOf(this.SubMassGroupComponent);\r\n      subComps[index] = mgc;\r\n    } else {\r\n      subComps.push(mgc);\r\n    }\r\n\r\n    this.SubMassGroupComponent = mgc;\r\n    this.SubItems = [];\r\n    this.Original_SubMassGroupItem = undefined;\r\n\r\n    if (subMgis.length !== 0) {\r\n      var table = this.Table;\r\n      this.Items.forEach(x => {\r\n        // Xử lý Item theo ColumnField: Project ... (single value)\r\n        // hoặc theo Phase (multiple values)\r\n        switch (table.ColumnField) {\r\n          case mif.Phase:\r\n            x.ValidPhasesByInput.forEach(y =>\r\n              table.HandleItem(x, y, mgc, this));\r\n            break;\r\n          default:\r\n            table.HandleItem(x, x.GetValue(table.ColumnField), mgc, this);\r\n            break;\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  MoveUp = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (0 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index - 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index - 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  MoveDown = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (list.length - 1 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index + 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index + 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  AddSub = () => {\r\n    util.Add(this, this.Table);\r\n  }\r\n\r\n  Delete = () => {\r\n    var supItem = this.SupItem;\r\n    var list = this.CurrentList;\r\n\r\n    if (this.IsCreatedByUser) {\r\n      this.MassGroupItem.GetItem(this.FullValue).Delete();\r\n    } else {\r\n      this.MassGroupItem.AddNotIncludeValue(this.FullValue);\r\n    }\r\n\r\n    list.splice(this.Index, 1);\r\n\r\n    if (supItem) {\r\n      if (list.length === 0) {\r\n        var supList = supItem ? this.Table.MainRows : supItem.CurrentList;\r\n        supList.splice(supItem.Index, 1);\r\n      } else {\r\n        supItem.Cells.forEach(x => {\r\n          x.UpdateData(true);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  replaceFactory\r\n  get ReplaceFactory() {\r\n    if (!this.replaceFactory) {\r\n      this.replaceFactory = new ReplaceRowLocationFactory();\r\n    }\r\n    return this.replaceFactory;\r\n  }\r\n\r\n  ReplaceOK = () => {\r\n    var factory = this.ReplaceFactory;\r\n    var refRow = factory.ReferenceRow;\r\n\r\n    if (!refRow) return;\r\n\r\n    var loc = factory.Location;\r\n    if ((refRow === this && loc === rrlf_lt.lower) ||\r\n      (refRow === this.SupItem && loc === rrlf_lt.inside)) {\r\n      return\r\n    }\r\n\r\n    this.Replace(refRow, loc);\r\n\r\n    factory.Location = rrlf_lt.inside;\r\n  }\r\n\r\n  Replace_SubItems = () => {\r\n    var subItems = this.Temp_SelectSubItems;\r\n    subItems.forEach(x => {\r\n      x.Replace(this, rrlf_lt.inside)\r\n    })\r\n  }\r\n\r\n  Replace = (refRow, loc) => {\r\n    // Init OriginalSupRow && IsReplaced\r\n    this.IsReplaced = true;\r\n    var osr = this.Original_SupRow;\r\n\r\n    // Save data\r\n    var oldMgi = this.MassGroupItem;\r\n    var supRow = undefined;\r\n    var newMgi = undefined;\r\n\r\n    switch (loc) {\r\n      case rrlf_lt.inside:\r\n        supRow = refRow;\r\n        break;\r\n      case rrlf_lt.lower:\r\n        supRow = refRow.SupItem;\r\n        break;\r\n    }\r\n\r\n    // Đối tượng đã nằm trong mục cần đặt\r\n    if (this.SupItem === supRow) return;\r\n\r\n    //var newMgi = supRow ? supRow.SubMassGroupItem : this.Table.MainMGI;\r\n    var newMgi = supRow ?\r\n      (supRow.Replace_SubMassGroupItem ? supRow.Replace_SubMassGroupItem :\r\n        util.CreateSubMassGroupItem(supRow))\r\n      : this.Table.MainMGI;\r\n\r\n    //pmData().IsDebug = true;\r\n    var mgi_i = oldMgi.GetItem(this.FullValue);\r\n    mgi_i.NewMGI = newMgi;\r\n    mgi_i.SupValue = supRow?.Name;\r\n\r\n    this.ReplaceMGI = newMgi;\r\n\r\n    // Remove SupRow cũ trong tập hợp cũ\r\n    var cl = this.CurrentList;\r\n    cl.splice(this.Index, 1);\r\n\r\n    // Cập nhập lại TotalValue của SupItem cũ\r\n    // Nếu list ko chưa Item nào thì remove khỏi giao diện\r\n    var supItem = this.SupItem;\r\n\r\n    // Sử dụng vòng lặp while để check liên tục hạng mục bị xóa\r\n    while (cl.length === 0) {\r\n      // var supList = supItem ? supItem.CurrentList : this.Table.MainRows;\r\n      // supList.splice(supItem.Index, 1);\r\n      cl = supItem ? supItem.CurrentList : this.Table.MainRows;\r\n      cl.splice(supItem.Index, 1);\r\n\r\n      supItem = supItem.SupItem;\r\n    }\r\n\r\n    // Sau khi xóa tất cả hạng mục có 1 giá trị, cập lại hàng mục tổng\r\n    if (supItem) {\r\n      supItem.Cells.forEach(x => {\r\n        x.UpdateData(true);\r\n      });\r\n    }\r\n\r\n    // Thiết lập SupRow\r\n    this.SupItem = supRow;\r\n    var list = this.CurrentList;\r\n    list.push(this);\r\n\r\n    // Cập nhập lại TotalValue của SupItem mới\r\n    if (supRow) {\r\n      supRow.Cells.forEach(x => {\r\n        x.UpdateData(true);\r\n      });\r\n    }\r\n\r\n    this.IsShowSubFieldSelect = false;\r\n  }\r\n\r\n  IsModalVisible = false\r\n\r\n  OpenModal = () => {\r\n    this.IsModalVisible = true\r\n\r\n    // Set tiêu đề hiện tại\r\n    this.TitleVM.Content = this.Title;\r\n\r\n    // Set giá trị nhóm hiện tại\r\n    this.FieldInputVM.Content = this.Field\r\n    this.FieldSelectVM.InitialItem = this.Field;\r\n    this.TempField = this.Field;\r\n\r\n    // Set giá trị phân nhóm hiện tại\r\n    var subFieldSelectVM = this.SubFieldSelectVM;\r\n    subFieldSelectVM.InitialItems = this.SubFields;\r\n\r\n    // Reset lại giá trị Select SubItems\r\n    this.Temp_SelectSubItems = undefined\r\n    this.SelectSubItemsVM.Items = this.LocationStorageList;\r\n\r\n    var locSelectVM = this.LocationSelectVM;\r\n    locSelectVM.Items = this.LocationStorageList\r\n    locSelectVM.InitialItem = undefined;\r\n  }\r\n\r\n  ModalOK = () => {\r\n    this.IsModalVisible = false;\r\n\r\n    // Thiết lập tiêu đề\r\n    var title = this.TitleVM.Content;\r\n    this.Title = title;\r\n    this.MassGroupItem.GetItem(this.FullValue).Title = title;\r\n\r\n    // Thiết lập nhóm hiện tại\r\n    if (this.Field !== this.TempField) {\r\n      this.Field = this.TempField;\r\n    }\r\n\r\n    // Thiết lập phân nhóm hiện tại\r\n    // chỉ áp dụng cho Row tự sinh\r\n    if (!this.IsCreatedByUser) {\r\n      this.SetSubFields();\r\n    }\r\n\r\n    var subItems = this.Temp_SelectSubItems;\r\n    if (subItems) {\r\n      // Dịch chuyển tập hợp con\r\n      this.Replace_SubItems();\r\n    } else {\r\n      // Dịch chuyển vị trí\r\n      this.ReplaceOK();\r\n    }\r\n  }\r\n\r\n  ModalCancel = () => {\r\n    this.IsModalVisible = false;\r\n  }\r\n\r\n  PMS_WorkPackages = [\r\n    'THI CÔNG CHÍNH (HBC)',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM (PHƯƠNG ...)',\r\n    'Kết thúc thô - Bàn giao'\r\n  ]\r\n\r\n  pms_WorkPackages_SelectVM\r\n  get PMS_WorkPackages_SelectVM() {\r\n    if (!this.pms_WorkPackages_SelectVM) {\r\n      this.pms_WorkPackages_SelectVM = selectUtil.get(this.PMS_WorkPackages);\r\n    }\r\n    return this.pms_WorkPackages_SelectVM;\r\n  }\r\n\r\n  get ModalElement() {\r\n    var factory = this.ReplaceFactory;\r\n    var titleWidth = '180px';\r\n\r\n    return <Modal title={this.Title} visible={this.IsModalVisible}\r\n      width={700}\r\n      onOk={this.ModalOK} onCancel={this.ModalCancel}>\r\n      {/* Tiêu đề */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Tiêu đề:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <InputView store={this.TitleVM} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập nhóm hiện tại */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Nhóm hiện tại:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          {this.FieldInputElement}\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập phân nhóm */}\r\n      {!this.IsCreatedByUser ? <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Thiết lập phân nhóm:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <MultiSelectView store={this.SubFieldSelectVM} />\r\n        </Col>\r\n      </Row> : ''}\r\n\r\n      {/* Đổi vị trí */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth} className='mass__modal__title__wrapper'>\r\n          <b>Đổi vị trí /</b>\r\n          <Button type='primary' size='small'\r\n            className={this.Temp_SelectSubItems ?\r\n              'mass__modal__title__selectsubitems__button' : ''}\r\n            onClick={this.Open_SelectSubItems_Modal}>chọn tập con</Button>\r\n          {this.SelectSubItems_ModalElement}\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <Row>\r\n            <Col flex='auto'>\r\n              <SelectView store={this.LocationSelectVM} />\r\n            </Col>\r\n            <Col>\r\n              <Button type='primary' size='small'\r\n                style={factory.ButtonStyle} onClick={factory.ToggleLocation}\r\n              >{factory.Location}</Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Gói công việc PMS */}\r\n      {/* <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Gói công việc PMS:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <SelectView store={this.PMS_WorkPackages_SelectVM} />\r\n        </Col>\r\n      </Row> */}\r\n    </Modal>\r\n  }\r\n\r\n  get HoverToolElement() {\r\n    var obj = new EntHoverVM();\r\n    obj.Element = <MassRow_ToolElementView store={this.ToolElement} />\r\n    return <EntHoverView className='mass__row__hovertool' store={obj} />\r\n  }\r\n\r\n  toolElement\r\n  get ToolElement() {\r\n    if (!this.toolElement) {\r\n      this.toolElement = util.Get_ToolElement(this);\r\n    }\r\n    return this.toolElement;\r\n  }\r\n\r\n  get AdditionInfomation_Element() {\r\n    return <>\r\n      {this.IsHaveAdditionInformation ?\r\n        <Popover trigger='hover'\r\n          content={\r\n            <span className='info'>\r\n              {this.AdditionInformation}\r\n            </span>\r\n          } >\r\n          <InfoCircleOutlined className='info' />\r\n        </Popover>\r\n        : ''}\r\n    </>\r\n  }\r\n\r\n  // Excel Export\r\n  get ExportInfo() {\r\n    var key = this.Field;\r\n    var info = {\r\n      Key: key,\r\n      Value: this.Title\r\n    }\r\n\r\n    var list\r\n    if (!this.SupItem) {\r\n      list = [info]\r\n    } else {\r\n      list = [...this.SupItem.ExportInfo]\r\n      list.push(info);\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportValue() {\r\n    var list = []\r\n    this.Cells.forEach(x => {\r\n      list.push({\r\n        Key: x.Column.Name,\r\n        Value: x.TotalValue\r\n      })\r\n    })\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportData() {\r\n    return {\r\n      Infos: this.ExportInfo,\r\n      Values: this.ExportValue\r\n    }\r\n  }\r\n\r\n  on_HandleTotal_Cells_Done_Dict_Funcs\r\n  get On_HandleTotal_Cells_Done_Dict_Funcs() {\r\n    if (!this.on_HandleTotal_Cells_Done_Dict_Funcs) {\r\n      this.on_HandleTotal_Cells_Done_Dict_Funcs =\r\n        util.GetOn_HandleTotal_Cells_Done_Dict_Funcs(this);\r\n    }\r\n    return this.on_HandleTotal_Cells_Done_Dict_Funcs;\r\n  }\r\n\r\n  set Is_HandleTotal_Cells_Done(v) {\r\n    this.On_HandleTotal_Cells_Done_Dict_Funcs\r\n      .forEach(x => x.Value())\r\n  }\r\n\r\n  HandleTotal_Cells\r\n\r\n  AddHandleTotal_Cell = (cell) => {\r\n    if (!this.HandleTotal_Cells) {\r\n      this.HandleTotal_Cells = []\r\n    };\r\n\r\n    var list = this.HandleTotal_Cells\r\n\r\n    list.push(cell);\r\n    if (list.length === this.Cells.length) {\r\n      this.HandleTotal_Cells = undefined\r\n      this.Is_HandleTotal_Cells_Done = true;\r\n\r\n      // nếu IsCreatedByUser \r\n      // => thêm thông tin vào danh sách Handled_CreatedByUser_Rows \r\n      // đối tượng Table\r\n      if (this.IsCreatedByUser) {\r\n        this.Table.Add_Handled_CreatedByUser_Row(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  IsHaveAdditionInformation = false\r\n\r\n  get IsHave_Addition_Wrapper() {\r\n    return this.IsHaveAdditionInformation || this.IsShow_RawValue\r\n  }\r\n\r\n  AdditionInformation = undefined\r\n\r\n  // Tùy chọn SelectSubItems\r\n  Is_SelectSubItems_ModalOpen = false\r\n\r\n  get SelectSubItems_ModalElement() {\r\n    return <Modal\r\n      title='Chọn tập hợp đầu mục con'\r\n      visible={this.Is_SelectSubItems_ModalOpen}\r\n      onOk={this.SelectSubItems_ModalOK}\r\n      onCancel={this.SelectSubItems_ModalCancel}>\r\n      <div className='mass__subitemmodal__wrapper'>\r\n        <TwoCol_SelectView store={this.SelectSubItemsVM} />\r\n      </div>\r\n    </Modal>\r\n  }\r\n\r\n  Open_SelectSubItems_Modal = () => {\r\n    this.Is_SelectSubItems_ModalOpen = true;\r\n  }\r\n\r\n  SelectSubItems_ModalCancel = () => {\r\n    this.Is_SelectSubItems_ModalOpen = false;\r\n  }\r\n\r\n  SelectSubItems_ModalOK = () => {\r\n    this.Is_SelectSubItems_ModalOpen = false;\r\n  }\r\n\r\n  selectSubItemsVM\r\n  get SelectSubItemsVM() {\r\n    if (!this.selectSubItemsVM) {\r\n      var obj = this.selectSubItemsVM = tc_selectUtil.get(\r\n        [],\r\n        (item) => {\r\n          var marginLeft = item.Rank * 15;\r\n          return <div\r\n            style={{ marginLeft }}>\r\n            {item.Title}\r\n          </div>\r\n        },\r\n        'Tập hợp vị trí',\r\n        'Vị trí được chọn'\r\n      )\r\n      obj.OnSelectedItemChanged = (v) => this.Temp_SelectSubItems = v;\r\n    }\r\n    return this.selectSubItemsVM;\r\n  }\r\n\r\n  Temp_SelectSubItems = undefined\r\n\r\n  isShow_RawValue = undefined\r\n  get IsShow_RawValue() {\r\n    if (!this.isShow_RawValue) {\r\n      this.isShow_RawValue = util.GetIsShow_RawValue(this);\r\n    }\r\n    return this.isShow_RawValue;\r\n  } set IsShow_RawValue(v) {\r\n    this.isShow_RawValue = v;\r\n  }\r\n\r\n  get RawValue_Element() {\r\n    return <>\r\n      {this.IsShow_RawValue ?\r\n        <Popover trigger='hover'\r\n          content={\r\n            <span className='success'>\r\n              {this.RawValue}\r\n            </span>\r\n          }\r\n        >\r\n          <InfoCircleOutlined className='success' />\r\n        </Popover>\r\n        : ''}\r\n    </>\r\n  }\r\n\r\n  IsCreatedByUser\r\n}","import { EditableTextVM } from \"./EditableTextVM\"\r\n\r\nexport const get = (content, canEdit = true, isToolVisible) => {\r\n  var qI = new EditableTextVM();\r\n  \r\n  qI.Content = content;\r\n  qI.CanChange_RenderState = canEdit;\r\n\r\n  if (isToolVisible === undefined){\r\n    isToolVisible = canEdit;\r\n  }\r\n\r\n  qI.Is_Tool_Visible = isToolVisible;\r\n\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\n\r\nclass TextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = {\r\n        content: `Nội dung`\r\n      }\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var { content } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {content}\r\n        {this.getWrapperContent()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TextView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as mif from '../item/MassItemField'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as util from './MassCellUtil'\r\nimport TextView from '../../../../text/TextView';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueColor: observable,\r\n      tdBgColor: observable,\r\n      isHaveWarning: observable,\r\n      tls_LevelGroup_Descriptions: observable,\r\n      vcs_Item: observable,\r\n      // valueString : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Column.Index;\r\n  }\r\n\r\n  items = []\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  unit\r\n  get Unit() {\r\n    if (!this.unit) {\r\n      this.unit = util.Get_Unit(this);\r\n    }\r\n    return this.unit;\r\n  }\r\n  set Unit(v) {\r\n    this.unit = v;\r\n  }\r\n\r\n  unitVM\r\n  get UnitVM() {\r\n    if (!this.unitVM) {\r\n      this.unitVM = textVMUtil.get(this.Unit);\r\n      this.unitVM.OnSetContent = (v) => this.Unit = v;\r\n    }\r\n    return this.unitVM;\r\n  }\r\n\r\n  // TotalValue\r\n  get CanHave_TotalValue(){\r\n    return this.Unit !== undefined;\r\n  }\r\n\r\n  OnGet_TotalValue_Func_Dict = []\r\n  set Get_TotalValue(v) {\r\n    // this.OnGet_TotalValue_Func_Dict.forEach(x => x.Value());\r\n\r\n    genUtil.Handle(this.OnGet_TotalValue_Func_Dict, \r\n      (v) => this.OnGet_TotalValue_Func_Dict = v);\r\n  }\r\n\r\n  totalValue = undefined\r\n  get TotalValue() {\r\n    // Chỉnh sửa Value thành FullValue (chứa khối lượng tầng điển hình)\r\n    //this.TotalValue = this.GetTotalValue();\r\n    if (this.totalValue === undefined) {\r\n      util.Handle_TotalValue(this);\r\n    }\r\n    return this.totalValue;\r\n  }\r\n  set TotalValue(v) {\r\n    this.totalValue = v;\r\n    \r\n    // cập nhập vào list handle trong row\r\n    this.Row.AddHandleTotal_Cell(this);\r\n\r\n    this.Get_TotalValue = true;\r\n    // Thiết lập phần màu sắc đối với Phase\r\n    if (this.IsHaveVCS_Item) {\r\n      util.Handle_VCS_Item(this);\r\n    }\r\n\r\n    // Thiết lập giá trị Cell\r\n    this.ContentVM.Content = this.ValueString;\r\n  }\r\n\r\n  contentVM\r\n  get ContentVM() {\r\n    if (!this.contentVM) {\r\n      this.contentVM = textVMUtil.get(this.ValueString);\r\n    }\r\n    return this.contentVM;\r\n  }\r\n\r\n  // ValueString\r\n  valueObject\r\n  get ValueObject(){\r\n    if (!this.valueObject){\r\n      this.valueObject = util.Get_ValueObject(this);\r\n    }\r\n    return this.valueObject;\r\n  }\r\n\r\n  get ValueString() {\r\n    return util.Get_ValueString(this);\r\n  }\r\n\r\n  // Sup - Sub\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.Get_SupItem(this);\r\n    }\r\n    return this.supItem;\r\n  } set SupItem(v){\r\n    this.supItem = v;\r\n  }\r\n\r\n  subCells\r\n  get SubCells() {\r\n    if (!this.subCells) {\r\n      this.subCells = util.Get_SubCells(this);\r\n    }\r\n    return this.subCells;\r\n  }\r\n  set SubCells(v) {\r\n    this.subCells = v;\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = util.GetMassType(this);\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(`${this.Column.Name} - ${this.Row.Name} - ${this.TotalValue}`)\r\n  }\r\n\r\n  // 1 lần Update trong this.Table.Cells.forEach(x => x.UpdateData());\r\n  UpdateData = (isUpdateSup) => {\r\n    var oldVal = this.TotalValue;\r\n\r\n    this.SubCells = util.Get_SubCells(this);\r\n\r\n    this.Unit = util.ReGet_Unit(this);\r\n    util.ReHandle_TotalValue(this);\r\n    this.MassType = util.GetMassType(this);\r\n    this.IsHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n\r\n    if (isUpdateSup && oldVal !== this.TotalValue\r\n        && this.SupItem){\r\n      this.SupItem.UpdateData(isUpdateSup);\r\n    }\r\n  }\r\n\r\n  ShowDetail = () => {\r\n    var isHash = true;\r\n    var url = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/massdetail`;\r\n    var getUrl = (v) => `${url}/${v}`;\r\n    var openTabFunc = (v) =>\r\n      window.open(getUrl(v), \"_blank\");\r\n\r\n    if (!this.viewDetailId) {\r\n      this.GetViewDetailId(data => {\r\n        var _id = this.viewDetailId = data._id;\r\n        openTabFunc(_id);\r\n      })\r\n    } else {\r\n      openTabFunc(this.viewDetailId);\r\n    }\r\n  }\r\n\r\n  viewDetailId\r\n\r\n  get AllItems() {\r\n    if (this.SubCells) {\r\n      return this.SubCells.map(x => x.Items).reduce((a, b) => a.concat(b), []);\r\n    }\r\n    return this.Items;\r\n  }\r\n\r\n  isHaveVCS_Item\r\n  get IsHaveVCS_Item() {\r\n    if (!this.isHaveVCS_Item) {\r\n      this.isHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n    }\r\n    return this.isHaveVCS_Item;\r\n  }\r\n  set IsHaveVCS_Item(v) {\r\n    this.isHaveVCS_Item = v;\r\n  }\r\n\r\n  vcs_Item = undefined\r\n  get VCS_Item() {\r\n    return this.vcs_Item;\r\n  }\r\n  set VCS_Item(v) {\r\n    this.vcs_Item = v;\r\n\r\n    this.ValueColor = util.GetValueColor(this);\r\n    this.TDBgColor = util.GetTDBgColor(this)\r\n  }\r\n\r\n  valueColor = '#1890ff'\r\n  get ValueColor() {\r\n    return this.valueColor;\r\n  }\r\n  set ValueColor(v) {\r\n    this.valueColor = v\r\n  }\r\n\r\n  tdBgColor = undefined\r\n  get TDBgColor() {\r\n    return this.tdBgColor;\r\n  }\r\n  set TDBgColor(v) {\r\n    this.tdBgColor = v;\r\n  }\r\n\r\n  get AStyle() {\r\n    return {\r\n      color: this.ValueColor,\r\n      fontWeight: 'bold'\r\n    }\r\n  }\r\n\r\n  get TDStyle() {\r\n    return {\r\n      backgroundColor: this.TDBgColor\r\n    }\r\n  }\r\n\r\n  ApiData = () => {\r\n    var massIds = this.AllItems.map(x => x._id);\r\n    return {\r\n      massType: this.MassType,\r\n      massIds\r\n    };\r\n  }\r\n\r\n  GetViewDetailId = (handle) => {\r\n    var apiData = this.ApiData();\r\n    var url = \"https://api.bimdev.vn/api/hbdv/updatemass\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => handle(data))\r\n  }\r\n\r\n  OnGet_TLS_LevelGroups_Func_Dict = []\r\n  set Get_TLS_LevelGroups(v) {\r\n    this.OnGet_TLS_LevelGroups_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  tls_LevelGroups\r\n  get TLS_LevelGroups() {\r\n    if (!this.tls_LevelGroups) {\r\n      util.Handle_TLS_LevelGroups(this);\r\n    }\r\n    return this.tls_LevelGroups;\r\n  } set TLS_LevelGroups(v) {\r\n    this.tls_LevelGroups = v;\r\n    this.Get_TLS_LevelGroups = true;\r\n  }\r\n\r\n  isHaveWarning = undefined\r\n  get IsHaveWarning() {\r\n    if (this.isHaveWarning === undefined) {\r\n      this.isHaveWarning = util.GetIsHaveWarning(this);\r\n    }\r\n    return this.isHaveWarning;\r\n  } set IsHaveWarning(v) {\r\n    this.isHaveWarning = v;\r\n  }\r\n\r\n  tls_LevelGroup_Descriptions = undefined\r\n  get TLS_LevelGroup_Descriptions() {\r\n    if (!this.tls_LevelGroup_Descriptions) {\r\n      util.Handle_TLS_LevelGroup_Descriptions(this);\r\n    }\r\n    return this.tls_LevelGroup_Descriptions;\r\n  } set TLS_LevelGroup_Descriptions(v) {\r\n    this.tls_LevelGroup_Descriptions = v;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class MassCell_Value {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Value: observable\r\n    })\r\n  }\r\n\r\n  Value = undefined\r\n}","import Column from \"antd/lib/table/Column\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassCell from \"./MassCell\"\r\nimport * as mif from '../item/MassItemField'\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport MassCell_Value from \"./value/MassCell_Value\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (col, row, dict) => {\r\n  var qI = new MassCell();\r\n  qI.Column = col;\r\n  qI.Row = row;\r\n  qI.Dict = dict;\r\n\r\n  col.Cells.push(qI);\r\n  row.Cells.push(qI);\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetIsHaveVCS_Item = (q) => {\r\n  return q.Dict.ColumnField === mif.Phase\r\n    && pmData().MassResultComp.Phases.length === 2\r\n    && q.ColumnIndex === 1;\r\n}\r\n\r\nexport const GetValueColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return '#FFFFFF';\r\n  } else {\r\n    return '#1890ff';\r\n  }\r\n}\r\n\r\nexport const GetTDBgColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return q.VCS_Item.Color;\r\n  } else {\r\n    return '#FFFFFF';\r\n  }\r\n}\r\n\r\n// Liên quan tới việc lấy TotalValue\r\nexport const Handle_VCS_Item = (q) => {\r\n  var list = pmData().VersionCompareSetting.Items;\r\n\r\n  var cells = q.Row.Cells;\r\n  var compareIndex = cells.findIndex(x => x.ColumnIndex === 0);\r\n  if (compareIndex === -1) {\r\n    q.VCS_Item = undefined;\r\n    return\r\n  }\r\n  var compareItem = cells[compareIndex];\r\n\r\n  const getItem = () => {\r\n    var ratio = q.TotalValue / compareItem.TotalValue;\r\n    var index = list\r\n      .findIndex(x => filterUtil.IsValid(x.Filter, ratio));\r\n    return index !== -1 ? list[index] : undefined;\r\n  }\r\n\r\n  if (compareItem.TotalValue !== undefined) {\r\n    q.VCS_Item = getItem();\r\n  } else {\r\n    genUtil.Add(compareItem.OnGet_TotalValue_Func_Dict, () =>\r\n      q.VCS_Item = getItem())\r\n  }\r\n}\r\n\r\nexport const GetMassType = (q) => {\r\n  var massType = undefined\r\n  if (q.SubCells) {\r\n    var isPending = true;\r\n    q.SubCells.forEach(x => {\r\n      if (isPending && x.MassType) {\r\n        massType = x.MassType;\r\n        isPending = false;\r\n      }\r\n    })\r\n  } else {\r\n    if (q.Items && q.Items.length > 0) {\r\n      massType = q.Items[0].MassType;\r\n    }\r\n  }\r\n  return massType;\r\n}\r\n\r\nexport const Handle_TLS_LevelGroups = (q) => {\r\n  if (q.IsGet_TLS_LevelGroups) return undefined;\r\n  q.IsGet_TLS_LevelGroups = true;\r\n\r\n  var list = [];\r\n  var handledCount = 0;\r\n  var count = q.SubCells ?\r\n    q.SubCells.length : q.Items.length;\r\n\r\n  const checkadd_Val = (val, list) => {\r\n    if (list.findIndex(x => x.id === val.id) === -1) {\r\n      list.push(val);\r\n    }\r\n  }\r\n\r\n  const handle_Val = (val) => {\r\n    handledCount++;\r\n    if (val) {\r\n      if (Array.isArray(val)) {\r\n        val.forEach(x => checkadd_Val(x, list));\r\n      } else {\r\n        checkadd_Val(val, list)\r\n      }\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroups = list;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        genUtil.Add(x.OnGet_TLS_LevelGroups_Func_Dict,\r\n          () => handle_Val(x.TLS_LevelGroup));\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.TLS_LevelGroup || targetObj.Get_TLS_LevelGroup) {\r\n        handle_Val(targetObj.TLS_LevelGroup);\r\n      } else {\r\n        genUtil.Add(targetObj.OnGet_TLS_LevelGroup_Func_Dict,\r\n          () => handle_Val(targetObj.TLS_LevelGroup));\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// TotalValue\r\nexport const ReGet_Unit = (q) => {\r\n  q.IsGet_Unit = false;\r\n  return Get_Unit(q);\r\n}\r\n\r\nexport const Get_Unit = (q) => {\r\n  if (q.IsGet_Unit) return undefined;\r\n  q.IsGet_Unit = true;\r\n\r\n  var unit\r\n  var isValid = true;\r\n  var list = q.SubCells ? q.SubCells : q.Items;\r\n  list.forEach((x, i, a) => {\r\n    if (isValid) {\r\n      if (i == 0) {\r\n        unit = x.Unit\r\n      }\r\n      else {\r\n        if (unit !== x.Unit) {\r\n          isValid = false;\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  if (!isValid) {\r\n    unit = undefined\r\n  }\r\n\r\n  return unit;\r\n}\r\n\r\nexport const ReHandle_TotalValue = (q) => {\r\n  q.IsGet_TotalValue = false;\r\n  Handle_TotalValue(q);\r\n}\r\n\r\nexport const Handle_TotalValue = (q) => {\r\n  if (q.IsGet_TotalValue) return undefined;\r\n  q.IsGet_TotalValue = true;\r\n\r\n  // Bỏ qua TotalValue nếu CanHave = false\r\n  if (!q.CanHave_TotalValue) return;\r\n\r\n  var checkedList = [];\r\n  var totalVal = 0;\r\n  var handledCount = 0;\r\n  var handleItems = [];\r\n  var list = q.SubCells ? q.SubCells : q.Items\r\n  var count = list.length\r\n\r\n  const handle_Val = (val, item) => {\r\n    var index = handleItems.indexOf(item);\r\n    // Bị trùng đối tượng khi tính toán khối lượng\r\n    if (index !== -1) return;\r\n    handleItems.push(item);\r\n\r\n    handledCount++;\r\n\r\n    if (!Number.isNaN(val)) {\r\n      totalVal += val;\r\n    }\r\n    checkedList.push(val);\r\n\r\n    if (handledCount === count) {\r\n      q.TotalValue = totalVal;\r\n    }\r\n\r\n    // if (q.Row.Title === 'Tô trong vữa xi măng M75 dày 15mm cho tường gạch, tường bê tông, và các cấu kiện bê tông liền kề '){\r\n    //   console.log(handleItems.length, count);\r\n    // }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TotalValue) {\r\n        handle_Val(x.TotalValue, x)\r\n      } else {\r\n        genUtil.Add_2(x.OnGet_TotalValue_Func_Dict,\r\n          () => {\r\n            handle_Val(x.TotalValue, x)\r\n          });\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.FullValue !== undefined) {\r\n        handle_Val(targetObj.FullValue, x)\r\n      } else {\r\n        // genUtil.Add(targetObj.OnGet_FullValue_Func_Dict,\r\n        //   () => {\r\n        //     handle_Val(targetObj.FullValue, x)\r\n        //   });\r\n\r\n        genUtil.Add_2(targetObj.OnGet_FullValue_Func_Dict,\r\n          () => {\r\n            handle_Val(targetObj.FullValue, x)\r\n          });\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetIsHaveWarning = (q) => {\r\n  if (q.Row.Field !== mif.level) {\r\n    return false\r\n  } else {\r\n    const getWarningFunc = (levelGroups) => {\r\n      return levelGroups.length !== 0;\r\n    }\r\n\r\n    if (q.TLS_LevelGroups) {\r\n      return getWarningFunc(q.TLS_LevelGroups);\r\n    } else {\r\n      genUtil.Add(q.OnGet_TLS_LevelGroups_Func_Dict,\r\n        () => {\r\n          q.IsHaveWarning = getWarningFunc(q.TLS_LevelGroups)\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup_Descriptions = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup_Descriptions) return undefined;\r\n  q.IsGet_TLS_LevelGroup_Descriptions = true;\r\n\r\n  const handle_Val = (val, list, handledCount, count) => {\r\n    handledCount++;\r\n    if (list.indexOf(val) === -1) {\r\n      list.push(val);\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroup_Descriptions = list;\r\n    }\r\n  }\r\n\r\n  const getDescFunc = (levelGroups) => {\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = levelGroups.length\r\n\r\n    levelGroups.forEach(x => {\r\n      if (x.FullDescription) {\r\n        handle_Val(x.FullDescription, list, handledCount, count);\r\n      } else {\r\n        // Để false, xử lý nhiều Funcs hơn, nhưng thực thi thành công :v\r\n        genUtil.Add(x.OnGetLevelStorageList_Func_Dict, () => {\r\n          handle_Val(x.FullDescription, list, handledCount, count)\r\n        }, false)\r\n      }\r\n    })\r\n  }\r\n\r\n  if (q.TLS_LevelGroups) {\r\n    getDescFunc(q.TLS_LevelGroups)\r\n  } else {\r\n    q.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n      getDescFunc(q.TLS_LevelGroups)\r\n    })\r\n  }\r\n}\r\n\r\n// Sup - Sub\r\nexport const Get_SupItem = (q) => {\r\n  if (q.IsGet_SupItem) return undefined;\r\n  q.IsGet_SupItem = true;\r\n\r\n  var supRow = q.Row.SupItem;\r\n  if (!supRow) return undefined;\r\n\r\n  var list = supRow.Cells;\r\n  var index = list.findIndex(x => x.Column === q.Column);\r\n  return index !== -1 ? list[index] : undefined\r\n}\r\n\r\nexport const Get_SubCells = (q) => {\r\n  var subRows = q.Row.SubItems;\r\n  if (subRows && subRows.length !== 0) {\r\n    var col = q.Column;\r\n    var list = subRows.map((x, i, a) => {\r\n      var obj = x.GetCellByColumn(col)\r\n      return obj;\r\n    }).filter(x => x !== undefined);\r\n\r\n    return list;\r\n  }\r\n}\r\n\r\n// ValueString\r\nexport const Get_ValueObject = (q) => {\r\n  var qI = new MassCell_Value();\r\n\r\n  qI.Dict = q;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Get_ValueString = (q) => {\r\n  if (!q.CanHave_TotalValue) return '';\r\n\r\n  var totalValue = q.TotalValue;\r\n  if (!totalValue) return '';\r\n\r\n  var roundingFactor = 2;\r\n  var unit = q.Unit;\r\n  switch (unit) {\r\n    case 'each':\r\n      unit = 'cái';\r\n      roundingFactor = 0;\r\n      break;\r\n    default:\r\n      roundingFactor = 2;\r\n      break;\r\n  }\r\n\r\n  var formatValue = totalValue.toLocaleString('en-US', { maximumFractionDigits: roundingFactor });\r\n  return `${formatValue} ${unit}`;\r\n}","import { PMData } from \"../../../single/model/PMData\";\r\nimport MassRow from \"./MassRow\";\r\nimport * as multiSelectUtil from '../../../../select/MultiSelectVMUtil';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport * as mgi_iUtil from './rowgroup/MGI_ItemUtil'\r\nimport * as mgii_ct from './rowgroup/MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../util/generalUtil';\r\nimport { EntFilter } from \"../../filter/EntFilter\";\r\nimport MassGroupComponent from \"./rowgroup/MassGroupComponent\";\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mif from '../item/MassItemField'\r\nimport MassRow_ToolElement from \"./tool/MassRow_ToolElement\";\r\nimport * as trs from '../../../../text/TextRenderState';\r\nimport * as cellUtil from './MassCellUtil'\r\nimport MassCell from \"./MassCell\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassRow();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  return q.SupItem ? q.SupItem.Rank + 1 : 0;\r\n}\r\n\r\nexport const GetStyle = (q) => {\r\n  return {\r\n    marginLeft: q.Rank * 20\r\n  }\r\n}\r\n\r\nexport const GetIsHaveSub = (q) => {\r\n  return q.SubItems.length !== 0;\r\n}\r\n\r\nexport const GetToggleButtonContent = (q) => {\r\n  return q.IsShowSub ? '-' : '+';\r\n}\r\n\r\nexport const GetFieldSelectVM = (q) => {\r\n  var storageList = pmData().MIFs_ForMassGroup;\r\n  var obj = selectUtil.get(storageList, q.Field);\r\n  obj.Placeholder = 'chọn nhóm'\r\n\r\n  obj.IsDisabled = !q.IsCreatedByUser\r\n\r\n  obj.OnSelectedItemChanged = (v) => q.TempField = v;\r\n  return obj;\r\n}\r\n\r\nexport const GetSubFieldSelectVM = (q) => {\r\n  var storageList = pmData().MIFs_ForMassGroup;\r\n  var obj = multiSelectUtil.get(storageList, undefined);\r\n  obj.Placeholder = 'chọn phân nhóm'\r\n  obj.OnSelectedItemChanged = (v) => q.TempSubFields = v;\r\n  return obj;\r\n}\r\n\r\nexport const Order = (list) => {\r\n  if (list.length === 0) return list;\r\n\r\n  var firstRow = list[0]\r\n  var mgi = firstRow.OrderMGI;\r\n  if (!mgi.IsHaveValueOrder) return list;\r\n\r\n  var orderValues = mgi.OrderValues;\r\n  return list.sort((a, b) => {\r\n    return orderValues.indexOf(a.FullValue) - orderValues.indexOf(b.FullValue);\r\n  });\r\n}\r\n\r\nexport const Handle_Title = (q) => {\r\n  var field = q.MassGroupItem.Field;\r\n  if (field !== mif.level) {\r\n    q.Title = q.Name;\r\n  } else {\r\n    // Xử lý phần tiêu đề của Row dựa trên Name và thông tin Tầng điển hình\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = q.Cells.length;\r\n\r\n    const handle_LS = (ls) => {\r\n      if (ls.Description) {\r\n        q.Title = ls.Description;\r\n      } else {\r\n        ls.OnGetLevelStorageList_Funcs.push(() => {\r\n          q.Title = ls.Description;\r\n        })\r\n      }\r\n    }\r\n\r\n    const handle_Val = (val) => {\r\n      handledCount++;\r\n      list.push.apply(list, val);\r\n      if (handledCount === count) {\r\n        if (list.length === 1) {\r\n          handle_LS(list[0]);\r\n        } else {\r\n          q.Title = q.Name;\r\n        }\r\n      }\r\n    }\r\n\r\n    q.Cells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        x.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n          handle_Val(x.TLS_LevelGroups);\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetLocationSelectVM = (q) => {\r\n  var obj = selectUtil.get([], undefined);\r\n  obj.Placeholder = 'chọn vị trí'\r\n  obj.TitleRender = (item) => {\r\n    var marginLeft = item.Rank * 15;\r\n    return <div\r\n      style={{ marginLeft }}>\r\n      {item.Title}\r\n    </div>\r\n  }\r\n  obj.OnSelectedItemChanged = (v) => {\r\n    var factory = q.ReplaceFactory;\r\n    factory.ReferenceRow = v;\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport const GetOriginal_SubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].MassGroupItem;\r\n}\r\n\r\nexport const GetReplace_SubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].ReplaceMGI;\r\n}\r\n\r\nexport const GetSubFields = (q) => {\r\n  var subMGI = q.SubMassGroupItem;\r\n  if (!subMGI) return [];\r\n  var mgis = subMGI.SupComponent.Items;\r\n\r\n  var lastValidIndex = -1;\r\n  var isValidHandle = true\r\n  mgis.forEach((x, i) => {\r\n    if (isValidHandle && x.HaveMassItemSubComponents.length === 0) {\r\n      lastValidIndex = i;\r\n    } else {\r\n      isValidHandle = false;\r\n    }\r\n  })\r\n\r\n  var currentIndex = mgis.indexOf(q.MassGroupItem);\r\n  if (lastValidIndex === -1) return [subMGI.Field];\r\n  var fields = mgis.filter((x, i) =>\r\n    (currentIndex === -1 || currentIndex < i) &&\r\n    i <= lastValidIndex)\r\n    .map(x => x.Field);\r\n  return fields;\r\n}\r\n\r\n// MassGroupItem phụ để đặt đầu mục được tạo mới\r\nexport const CreateSubMassGroupItem = (q) => {\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bystring;\r\n  filter.StringFilterType = sft.byequal;\r\n  filter.Values = [q.FullValue];\r\n\r\n  var supMgi = q.MassGroupItem;\r\n\r\n  var mgc = undefined;\r\n  var mgcIndex = supMgi.SubComponents\r\n    .findIndex(x => genUtil.IsSameValues(x.Filter.Values, filter.Values));\r\n\r\n  if (mgcIndex !== -1) {\r\n    mgc = supMgi.SubComponents[mgcIndex]\r\n  } else {\r\n    mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n    supMgi.SubComponents.push(mgc);\r\n  }\r\n\r\n  var mgi = mgiUtil.get(null, null, mgc);\r\n  mgc.Items = [mgi];\r\n\r\n  q.SubMassGroupItem = mgi;\r\n  return mgi;\r\n}\r\n\r\nexport const Add = (supRow, table) => {\r\n  var mgi = supRow ?\r\n    (supRow.SubMassGroupItem ? supRow.SubMassGroupItem :\r\n      CreateSubMassGroupItem(supRow))\r\n    : table.MainMGI;\r\n\r\n  var mgi_I = mgi_iUtil.create(mgi, mgii_ct.byuser);\r\n\r\n  // Thêm trường SupValue để xác định SupRow \r\n  // trong trường hợp SupRow.CurrentList.length !== 0\r\n  mgi_I.SupValue = supRow?.Name;\r\n\r\n  mgi.Items.push(mgi_I);\r\n\r\n  var row = get(mgi_I.Value, table);\r\n  row.FullValue = mgi_I.Value;\r\n  row.IsCreatedByUser = true;\r\n\r\n  // Lấy thông tin Cell vì hiện tại đang bị lỗi khi render\r\n  var obj = row.Cells\r\n\r\n  row.MassGroupItem = mgi;\r\n\r\n  row.SupItem = supRow;\r\n  row.CurrentList.push(row);\r\n\r\n  row.Editable_TitleVM.RenderState = trs.edit;\r\n\r\n  return row;\r\n}\r\n\r\nexport const GetOn_HandleTotal_Cells_Done_Dict_Funcs = (q) => {\r\n  var obj = [];\r\n  return obj;\r\n}\r\n\r\nexport const Get_Original_SupRow = (q) => {\r\n  if (q.IsGet_Original_SupRow) return undefined;\r\n  q.IsGet_Original_SupRow = true;\r\n\r\n  return q.SupItem;\r\n}\r\n\r\nexport const Get_Original_Full_SupRows = (q) => {\r\n  var list = [];\r\n  var supItem = q.Original_SupRow;\r\n\r\n  while (supItem) {\r\n    list.push(supItem);\r\n    supItem = supItem.Original_SupRow;\r\n  }\r\n\r\n  list.reverse();\r\n  return list;\r\n}\r\n\r\n// Aditional Infomation\r\nexport const Get_IsHaveAdditionInformation = (q) => {\r\n  return q.IsReplaced ? true : false\r\n}\r\n\r\nexport const Get_AdditionInformation = (q) => {\r\n  var obj = q.Original_Full_SupRows.reduce((a, x, i) => {\r\n    if (i != 0) {\r\n      a += ' > '\r\n    }\r\n    a += x.Title;\r\n    return a;\r\n  }, '')\r\n\r\n  return obj;\r\n}\r\n\r\nexport const Get_ToolElement = (q) => {\r\n  var qI = new MassRow_ToolElement();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n// Cells\r\nexport const Get_Cells = (q) => {\r\n  if (!q.IsCreatedByUser) return [];\r\n\r\n  var table = q.Table;\r\n\r\n  var list = table.Columns.map(x => {\r\n    var qI = new MassCell();\r\n    qI.Column = x;\r\n    qI.Row = q;\r\n    qI.Dict = table;\r\n\r\n    table.Cells.push(qI);\r\n\r\n    return qI;\r\n  });\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetIsShow_RawValue = (q) => {\r\n  return !q.IsCreatedByUser && q.RawValue !== q.Title;\r\n}","import * as mif from '../item/MassItemField'\r\nimport { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mt from '../MassType'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent'\r\nimport MassGroupItem from './rowgroup/MassGroupItem'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\n\r\nexport const GetMainMGC = (q) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  var mgi1 = mgiUtil.get(mif.MassType);\r\n  qI.Items = [mgi1];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMassGroupName = (q) => {\r\n  return q.MassGroupSetting ? q.MassGroupSetting.Name\r\n    : '';\r\n}\r\n\r\nexport const GetAllRows = (q) => {\r\n  var list = [];\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.AllItems)\r\n  });\r\n  return list;\r\n}\r\n\r\nexport const GetMainMGI = (q) => {\r\n  var qI = q.MainMGC?.Items[0];\r\n  qI.Table = q;\r\n  qI.SupRow = undefined;\r\n  return qI;\r\n}","export const elementfilter = \"elementfilter\";\r\nexport const massexport = \"massexport\";\r\nexport const massgroup = \"massgroup\";\r\nexport const level = \"level\"\r\nexport const typicallevel = \"typicallevel\";\r\nexport const massdetail = \"massdetail\";","import { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport default class Setting{\r\n  name\r\n  get Name(){\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    if (this.OnNameChanged){\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged){\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  SettingType\r\n\r\n  data\r\n  get Data(){\r\n    return this.data;\r\n  }\r\n  set Data(v){\r\n    this.data = v;\r\n    if (this.OnDataChanged){\r\n      this.OnDataChanged(v);\r\n    }\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    var {_id} = this;\r\n    var apiData = {_id};\r\n\r\n    var  url = \"https://api.bimdev.vn/api/hbs/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete setting successfully'))\r\n\r\n    this.Dict.Items.splice(this.Index, 1);\r\n\r\n    if (this.OnDelete){\r\n      this.OnDelete();\r\n    }\r\n\r\n    this.Dict.Input.EditItemId = undefined;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id : this._id,\r\n      projectId : this.Project?._id,\r\n      settingType : this.SettingType,\r\n      name : this.Name,\r\n      description : this.Description,\r\n      data : this.Data.ApiData\r\n    }\r\n  }\r\n\r\n  SaveDatabase = (handle) => {\r\n    genUtil.SaveDatabse(this, this.Url, (data, isNew) => {\r\n      var list = this.Dict.Items;\r\n      if (isNew) {\r\n        list.push(this);\r\n      } else {\r\n        var index = list.indexOf(x => x._id === this._id);\r\n        list[index] = this;\r\n      }\r\n\r\n      if (handle){\r\n        handle(data, isNew);\r\n      }\r\n    });\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassGroupSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassGroupSettingData {\r\n  fields\r\n  get Fields(){\r\n    if (!this.fields){\r\n      this.fields = util.GetDefaultFields(this);\r\n    }\r\n    return this.fields;\r\n  }\r\n  set Fields(v){\r\n    this.fields = v;\r\n  }\r\n\r\n  AddNewField = () => {\r\n    var item = pmData().MassPropertyNames[0];\r\n    this.Fields.push(item);\r\n    return item;\r\n  }\r\n}","export const Discipline = \"Discipline\";\r\nexport const Category = \"Category\";\r\n\r\nexport const GetAll = () => {\r\n  return [ Discipline, Category ];\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassGroupSettingData from './MassGroupSettingData';\r\nimport * as mpn from '../../../entity/mass/MassPropertyName'\r\nimport * as massGroupCompUtil from '../../mass/table/rowgroup/MassGroupComponentUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingData();\r\n  qI.MassGroupComponent = massGroupCompUtil.get(q.massGroupComponent);\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassGroupSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultFields = () => {\r\n  return [ mpn.Category ]\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassGroupSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassGroupSettingDataUtil'\r\nimport MassGroupSetting from './MassGroupSetting';\r\nimport { PMData } from '../../../single/model/PMData';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/mg/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as util from './WorkpackageVMUtil'\r\n\r\nexport class WorkpackageVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fullName : observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.Workpackage._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.WorkpackageVMs.indexOf(this);\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.Workpackage.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage.M2VM = v;\r\n  }\r\n\r\n  Workpackage\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.Workpackage.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Code = v;\r\n    }\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.Workpackage.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Name = v;\r\n    }\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.Workpackage.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Description = v;\r\n    }\r\n  }\r\n\r\n  fullName = undefined\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.Workpackage.FullName;\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.FullName;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.FullName;\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.WorkpackageVMs.splice(this.Index, 1);\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(this.Name, this.Code, this.Description);\r\n  }\r\n}","import { WorkpackageVM } from \"./WorkpackageVM\";\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageVM();\r\n  qI.Workpackage = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnCodeChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Code = v;\r\n    }\r\n  }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnFullNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.FullName = v;\r\n    }\r\n  }\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supWp = q.Workpackage.SupItem;\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  var index = list.findIndex(x => x.Workpackage === supWp);\r\n  return index !== -1 ? list[index] : undefined;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport class CheckboxVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      ischecked: observable,\r\n      isDisable : observable,\r\n      Cancel : observable\r\n    })\r\n  }\r\n\r\n  name\r\n\r\n  OnCheckChanging\r\n\r\n  Cancel = false;\r\n\r\n  ischecked = undefined\r\n  set Ischecked(v) {\r\n    this.ischecked = v;\r\n    if (this.onCheckChange) {\r\n      this.onCheckChange(v);\r\n    }\r\n  }\r\n\r\n  isDisable = false\r\n}","import { CheckboxVM } from \"./CheckboxVM\"\r\n\r\nexport const get = (name, ischecked) => {\r\n  var qI = new CheckboxVM();\r\n  qI.ischecked = ischecked;\r\n  qI.name = name;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as checkboxVMUtil from '../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as util from './WorkpackageInputVMUtil'\r\nimport { Button } from 'antd';\r\n\r\nexport class WorkpackageInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  WorkpackageInput\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.WorkpackageInput.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.WorkpackageInput.Code = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.WorkpackageInput.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.WorkpackageInput.Name = v;\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.WorkpackageInput.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.WorkpackageInput.Description = v;\r\n  }\r\n\r\n  supItem = undefined\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    var input = this.WorkpackageInput;\r\n    if (!v) {\r\n      input.SupItem = v;\r\n    }else{\r\n      input.SupItem = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined\r\n  get WorkpackageVMStorageList(){\r\n    if (!this.workpackageVMStorageList){\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v){\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.SupItemSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItem = this.SupItem;\r\n  }\r\n\r\n  supItemSelectVM\r\n  get SupItemSelectVM(){\r\n    if (!this.supItemSelectVM){\r\n      var obj = this.supItemSelectVM = selectVMUtil.get\r\n        (this.WorkpackageVMStorageList, this.SupItem);\r\n      obj.Placeholder = 'công tác cha'\r\n      obj.CanClear = true;\r\n      obj.OnSelectedItemChanged = (v) => this.SupItem = v;\r\n    }\r\n    return this.supItemSelectVM;\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.WorkpackageInput.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.WorkpackageInput.IsNew = v;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n\r\n    if (!v) {\r\n      this.WorkpackageInput.Workpackage = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      this.WorkpackageInput.Workpackage = v.Workpackage;\r\n\r\n      var { Code, Name, Description, SupItem } = v;\r\n      this.CodeVM.Content = Code;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n\r\n      this.SupItemSelectVM.InitialItem = SupItem;\r\n\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Công tác mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  AsString = () => `${this.Code} ${this.Name} ${this.Description} ${this.IsNew}`\r\n\r\n  AddDatabase = () => {\r\n    this.WorkpackageInput.AddDatabase();\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  DeleteFunc = () => {\r\n    this.WorkpackageVM.Workpackage.Delete();\r\n    this.WorkpackageVM = undefined;\r\n  }\r\n\r\n  Clear = () => {\r\n    this.CodeVM.Content = null;\r\n    this.NameVM.Content = null;\r\n    this.DescriptionVM.Content = null;\r\n    this.IsNewVM.Ischecked = true;\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../single/form/PMDataVM\";\r\nimport { WorkpackageInputVM } from \"./WorkpackageInputVM\";\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageInputVM();\r\n  qI.WorkpackageInput = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  })\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} workpackage successfully`);\r\n    //qI.clear();\r\n  }\r\n\r\n  dict.OnAdd = (v) => {\r\n    qI.WorkpackageVM = v;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}","import { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport * as workpackageVMUtil from './WorkpackageVMUtil';\r\nimport * as workpackageInputVMUtil from './WorkpackageInputVMUtil';\r\n\r\nexport const get = (q) => {\r\n  var qI = new Workpackage_DictVM();\r\n  qI.Workpackage_Dict = q;\r\n\r\n  q.OnGetWorkpackagesDone = (v) => {\r\n    var obj = qI.WorkpackageVMs;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (item) => {\r\n    var itemView = workpackageVMUtil.get(item, qI);\r\n    qI.Add(itemView);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackageVMs = (dictVM) => {\r\n  var wps = dictVM.Workpackage_Dict.Workpackages;\r\n  if (!wps) return undefined;\r\n  return wps.map(x => workpackageVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetWorkpackageInputVM= (dictVM) => {\r\n  var input = dictVM.Workpackage_Dict.WorkpackageInput;\r\n  return workpackageInputVMUtil.get(input, dictVM);\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ElementFilterSetting_DictVMUtil'\r\n\r\nexport class ElementFilterSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  items  = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../../text/TextVMUtil';\r\n\r\nexport class SettingVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Name = v;\r\n    }\r\n  }\r\n\r\n  nameVM\r\n  get NameVM(){\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM = textUtil.get(this.Name, 'tên thiết lập ...');\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Description = v;\r\n    }\r\n  }\r\n\r\n  settingType\r\n  get SettingType() {\r\n    if (!this.settingType) {\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v) {\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  data\r\n  get Data(){\r\n    if (!this.data){\r\n      this.data = this.ModelItem.Data;\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n    if (!this.M2VM){\r\n      this.ModelItem.Data = v;\r\n    }\r\n  }\r\n\r\n  dataVM\r\n  get DataVM() {\r\n    if (!this.dataVM) {\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM(v) {\r\n    this.dataVM = v;\r\n\r\n    // Gọi hàm để đổ dữ liệu về\r\n    if (v && this.OnInitialSetDataVM){\r\n      this.OnInitialSetDataVM(v);\r\n    }\r\n\r\n    if (!this.M2VM) {\r\n      if (!v) {\r\n        this.Data = v;\r\n      }\r\n      else {\r\n        this.Data = v.ModelItem;\r\n      }\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM) {\r\n      return this.OnGetDataVM();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class ElementFilterSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var cateFilterVM = v.CategoryFilterVM;\r\n    if (cateFilterVM) {\r\n      cateFilterVM.OnInitialData();\r\n    }\r\n\r\n    var famFilterVM = v.FamilyFilterVM;\r\n    if (famFilterVM) {\r\n      famFilterVM.OnInitialData();\r\n    }\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as multiSelectVMUtil from '../../../select/MultiSelectVMUtil'\r\n\r\nexport class EntFilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  get pmDataVM () { return PMDataVM.Instance};\r\n\r\n  valueType\r\n  get ValueType() {\r\n    if (!this.valueType) {\r\n      this.valueType = this.ModelItem.ValueType;\r\n    }\r\n    return this.valueType;\r\n  }\r\n  set ValueType(v) {\r\n    this.valueType = v;\r\n    this.ModelItem.ValueType = v;\r\n  }\r\n\r\n  numberFilterType\r\n  get NumberFilterType() {\r\n    if (!this.numberFilterType) {\r\n      this.numberFilterType = this.ModelItem.NumberFilterType;\r\n    }\r\n    return this.numberFilterType;\r\n  }\r\n  set NumberFilterType(v) {\r\n    this.numberFilterType = v;\r\n    this.ModelItem.NumberFilterType = v;\r\n  }\r\n\r\n  stringFilterType\r\n  get StringFilterType() {\r\n    if (!this.stringFilterType) {\r\n      this.stringFilterType = this.ModelItem.StringFilterType;\r\n    }\r\n    return this.stringFilterType;\r\n  }\r\n  set StringFilterType(v) {\r\n    this.stringFilterType = v;\r\n    this.ModelItem.StringFilterType = v;\r\n  }\r\n\r\n  values\r\n  get Values() {\r\n    if (!this.values) {\r\n      this.values = this.ModelItem.Values;\r\n    }\r\n    return this.values;\r\n  }\r\n  set Values(v) {\r\n    this.values = v;\r\n    this.ModelItem.Values = v;\r\n  }\r\n\r\n  valueStorageList\r\n  get ValueStorageList() {\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = this.ModelItem.ValueStorageList;\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  ValueSelectPlaceholder\r\n\r\n  valueTypeSelectVM\r\n  get ValueTypeSelectVM() {\r\n    if (!this.valueTypeSelectVM) {\r\n      var obj =this.valueTypeSelectVM = selectVMUtil.get(this.pmDataVM.FilterValueTypes, this.ValueType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.ValueType = v;\r\n      }\r\n    }\r\n    return this.valueTypeSelectVM;\r\n  }\r\n\r\n  stringFilterTypeSelectVM\r\n  get StringFilterTypeSelectVM() {\r\n    if (!this.stringFilterTypeSelectVM){\r\n      var obj = this.stringFilterTypeSelectVM = selectVMUtil.get(this.pmDataVM.StringFilterTypes, this.StringFilterType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.StringFilterType = v;\r\n      }\r\n    }\r\n    return this.stringFilterTypeSelectVM;\r\n  }\r\n\r\n  valuesSelectVM\r\n  get ValuesSelectVM() {\r\n    if (!this.valuesSelectVM){\r\n      var obj = this.valuesSelectVM = multiSelectVMUtil.get(this.ValueStorageList, this.Values);\r\n\r\n      if (this.ValueSelectPlaceholder){\r\n        obj.Placeholder = this.ValueSelectPlaceholder;\r\n      }\r\n\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Values = v;\r\n      }\r\n    }\r\n    return this.valuesSelectVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    if (!v) return;\r\n\r\n    var {ValueType, NumberFilterType, StringFilterType, Values} = v;\r\n    this.ValueTypeSelectVM.InitialItem = ValueType;\r\n    this.StringFilterTypeSelectVM.InitialItem = StringFilterType;\r\n    this.ValuesSelectVM.InitialItems = Values;\r\n  }\r\n\r\n  OnInitialData = () => {\r\n    var valueType = this.ValueType;\r\n    var numberFilterType = this.NumberFilterType;\r\n    var stringFilterType = this.StringFilterType;\r\n    var values = this.Values;\r\n  }\r\n}","import { SettingVM } from \"../setting/base/SettingVM\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\n\r\nexport const get = (q) => {\r\n  if (!q) return undefined;\r\n  var qI = new EntFilterVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport default class ElementFilterSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isHaveFamilyFilter : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  categoryFilterVM\r\n  get CategoryFilterVM(){\r\n    if (!this.categoryFilterVM && this.ModelItem){\r\n      this.categoryFilterVM = this.GetCategoryFilterVM();\r\n    }\r\n    return this.categoryFilterVM;\r\n  }\r\n\r\n  GetCategoryFilterVM = () => {\r\n    var filter = this.ModelItem.CategoryFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilter = undefined\r\n  get IsHaveFamilyFilter(){\r\n    if (!this.isHaveFamilyFilter){\r\n      this.isHaveFamilyFilter = this.ModelItem.IsHaveFamilyFilter;\r\n    }\r\n    return this.isHaveFamilyFilter;\r\n  }\r\n  set IsHaveFamilyFilter(v){\r\n    this.isHaveFamilyFilter = v;\r\n    this.ModelItem.IsHaveFamilyFilter = v;\r\n  }\r\n\r\n  familyFilterVM\r\n  get FamilyFilterVM(){\r\n    if (!this.familyFilterVM && this.ModelItem){\r\n      this.familyFilterVM = this.GetFamilyFilterVM();\r\n    }\r\n    return this.familyFilterVM;\r\n  }\r\n\r\n  GetFamilyFilterVM = () => {\r\n    var filter = this.ModelItem.FamilyFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilterVM\r\n  get IsHaveFamilyFilterVM() {\r\n    if (!this.isHaveFamilyFilterVM) {\r\n      var obj = this.isHaveFamilyFilterVM\r\n        = checkboxVMUtil.get(\"Thiết lập lọc Family\", this.IsHaveFamilyFilter);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHaveFamilyFilter = v;\r\n      };\r\n    }\r\n    return this.isHaveFamilyFilterVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.CategoryFilterVM.SetData(v.CategoryFilterVM);\r\n\r\n    var ischecked = v.IsHaveFamilyFilter === true;\r\n    this.IsHaveFamilyFilterVM.Ischecked = ischecked;\r\n    \r\n    this.FamilyFilterVM.SetData(v.FamilyFilterVM);\r\n  }\r\n}","import ElementFilterSettingDataVM from './ElementFilterSettingDataVM';\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingDataVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import ElementFilterSettingVM from \"./ElementFilterSettingVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { message } from \"antd\";\r\nimport { SettingVM } from \"./SettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new SettingVM();\r\n  qI.Setting = q;\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as util from './SettingVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport { Button, message } from 'antd';\r\n\r\nexport default class SettingInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      dataVM : observable,\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  settingType\r\n  get SettingType(){\r\n    if (!this.settingType){\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v){\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên bộ lọc\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  settingTypeVM\r\n  get SettingTypeVM() {\r\n    if (!this.settingTypeVM){\r\n      var obj = this.settingTypeVM = \r\n        textVMUtil.get(this.SettingType, \"loại thiết lập\");\r\n      obj.onSetContent = (v) => this.SettingType = v;\r\n    }\r\n    return this.settingTypeVM;\r\n  }\r\n\r\n  dataVM = undefined\r\n  get DataVM(){\r\n    if (!this.dataVM){\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM (v){\r\n    if (this.DataVM.SetData){\r\n      this.DataVM.SetData(v);\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM){\r\n      var dataVM = this.OnGetDataVM();\r\n      return dataVM;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem() {\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v) {\r\n    this.editItem = v;\r\n\r\n    var input = this.ModelItem;\r\n    if (!v) {\r\n      input.EditItem = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      input.EditItem = v.ModelItem;\r\n\r\n      var { Name, Description, SettingType } = v;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n      this.SettingTypeVM.Content = SettingType;\r\n\r\n      this.DataVM = v.DataVM;\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.ModelItem.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.ModelItem.IsNew = v;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Thiết lập mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  \r\n  DeleteFunc = () => {\r\n    this.EditItem.ModelItem.Delete();\r\n    this.EditItem.Delete();\r\n    this.EditItem = undefined;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    this.ModelItem.AddDatabase();\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class ElementFilterSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport * as itemVMUtil from './ElementFilterSettingVMUtil'\r\nimport * as inputVMUtil from './ElementFilterSettingInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport ElementFilterSettingInputVM from \"./ElementFilterSettingInputVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} element filter setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../../filter/EntFilterVMUtil'\r\nimport * as util from './MES_ValueSettingVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MES_ValueSettingVM {\r\n  // constructor() {\r\n  //   makeObservable(this, {\r\n\r\n  //   })\r\n  // }\r\n\r\n  get Index() {\r\n    return this.Dict.ValueSettingVMs.indexOf(this);\r\n  }\r\n\r\n  retrieveType\r\n  get RetrieveType() {\r\n    if (!this.retrieveType) {\r\n      this.retrieveType = this.ModelItem.RetrieveType;\r\n    }\r\n    return this.retrieveType;\r\n  }\r\n  set RetrieveType(v) {\r\n    this.retrieveType = v;\r\n    this.ModelItem.RetrieveType = v;\r\n  }\r\n\r\n  get RetrieveTypeStorageList() {\r\n    return util.GetRetrieveTypeStorageList(this);\r\n  }\r\n\r\n  retrieveTypeSelectVM\r\n  get RetrieveTypeSelectVM() {\r\n    if (!this.retrieveTypeSelectVM) {\r\n      var obj = this.retrieveTypeSelectVM = selectVMUtil.get(this.RetrieveTypeStorageList, this.RetrieveType);\r\n      obj.OnSelectedItemChanged = (v) => this.RetrieveType = v;\r\n    }\r\n    return this.retrieveTypeSelectVM;\r\n  }\r\n\r\n  valueFilterVM\r\n  get ValueFilterVM() {\r\n    if (!this.valueFilterVM) {\r\n      var obj = this.valueFilterVM = filterVMUtil.get(this.ModelItem.ValueFilter);\r\n      obj.ValueSelectPlaceholder = 'giá trị parameter';\r\n    }\r\n    return this.valueFilterVM;\r\n  }\r\n  set ValueFilterVM(v) {\r\n    this.valueFilterVM = v;\r\n    if (!v) {\r\n      this.ModelItem.ValueFilter = v;\r\n    }\r\n    else {\r\n      this.ModelItem.ValueFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    if (!this.workpackageVM) {\r\n      this.workpackageVM = util.GetWorkpackageVM(this);\r\n    }\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.Workpackage = v;\r\n    }\r\n    else {\r\n      this.ModelItem.Workpackage = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined;\r\n  get WorkpackageVMStorageList() {\r\n    if (!this.workpackageVMStorageList) {\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v) {\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.WorkpackageSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = -1;\r\n  }\r\n\r\n  workpackageSelectVM\r\n  get WorkpackageSelectVM() {\r\n    if (!this.workpackageSelectVM) {\r\n      var storageList = this.WorkpackageVMStorageList ?\r\n        this.WorkpackageVMStorageList : [];\r\n\r\n      var obj = this.workpackageSelectVM = selectVMUtil.get\r\n        (storageList, this.WorkpackageVM);\r\n      obj.Placeholder = 'chọn công tác';\r\n      obj.OnSelectedItemChanged = (v) => this.WorkpackageVM = v;\r\n    }\r\n\r\n    return this.workpackageSelectVM;\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = this.ModelItem.MassType;\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n    this.ModelItem.MassType = v;\r\n  }\r\n\r\n  get MassTypeStorageList() {\r\n    return util.GetMassTypeStorageList(this);\r\n  }\r\n\r\n  massTypeSelectVM\r\n  get MassTypeSelectVM() {\r\n    if (!this.massTypeSelectVM) {\r\n      var obj = this.massTypeSelectVM = selectVMUtil.get(this.MassTypeStorageList, \r\n        this.MassType);\r\n      obj.Placeholder = 'loại khối lượng';\r\n      obj.OnSelectedItemChanged = (v) => this.MassType = v;\r\n    }\r\n    return this.massTypeSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.ValueSettingVMs;\r\n    list.splice(this.Index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.RetrieveTypeSelectVM.InitialItem = v.RetrieveType;\r\n    this.ValueFilterVM.SetData(v.ValueFilterVM);\r\n    this.WorkpackageSelectVM.InitialItem = v.WorkpackageVM;\r\n    this.MassTypeSelectVM.InitialItem = v.MassType;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSettingVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push((v) => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRetrieveTypeStorageList = (q) => {\r\n  return pmDataVM().ValueRetrieveTypes;\r\n}\r\n\r\nexport const GetWorkpackageVM = (q) => {\r\n  var workpackage = q.ModelItem.Workpackage;\r\n  if (!workpackage) return undefined;\r\n\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.Workpackage === workpackage);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}\r\n\r\nexport const GetMassTypeStorageList = (q) => {\r\n  return pmDataVM().MassTypes;\r\n}","import * as util from './MES_ValueSettingUtil'\r\n\r\nexport default class MES_ValueSetting{\r\n  get Index() {\r\n    return this.Dict.ValueSettings.indexOf(this);\r\n  }\r\n\r\n  RetrieveType\r\n\r\n  MassType\r\n  \r\n  ValueFiter\r\n\r\n  workpackageId\r\n  \r\n  workpackage\r\n  get Workpackage(){\r\n    if (!this.workpackage){\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.workpackageId = undefined;\r\n    }\r\n    else{\r\n      this.workpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ValueSettings.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byparameter = \"byparameter\";\r\nexport const bymaterial = \"bymaterial\";\r\nexport const byrebar = \"byrebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [byparameter, bymaterial, byrebar]\r\n}","import MES_ValueSetting from './MES_ValueSetting'\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as vrt from './MES_ValueRetrieveType'\r\nimport * as fvt from '../../../filter/FilterValueType'\r\nimport * as sft from '../../../filter/StringFilterType'\r\nimport * as fct from '../../../filter/FilterCategoryType'\r\nimport { EntFilter } from '../../../filter/EntFilter';\r\nimport { PMData } from '../../../../single/model/PMData'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.retrieveType;\r\n  qI.MassType = q.massType;\r\n  qI.ValueFilter = filterUtil.get(q.valueFilter, fct.parameter);\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.RetrieveType;\r\n  qI.MassType = q.MassType;\r\n  qI.ValueFilter = q.ValueFilter;\r\n  qI.Workpackage = q.Workpackage;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = vrt.byparameter;\r\n  qI.Dict = dict;\r\n  \r\n  var valueFilter = new EntFilter();\r\n  valueFilter.CategoryType = fct.parameter;\r\n  valueFilter.ValueType = fvt.bystring;\r\n  valueFilter.StringFilterType = sft.byequal;\r\n  valueFilter.Values = [ 'Volume' ];\r\n\r\n  qI.ValueFilter = valueFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackage = (q) => {\r\n  var workpackageId = q.workpackageId;\r\n  if (!workpackageId) return undefined;\r\n\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    retrieveType : q.RetrieveType,\r\n    massType : q.MassType,\r\n    valueFilter: q.ValueFilter.ApiData,\r\n    workpackageId : q.workpackageId\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassExportSettingDataVMUtil'\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport default class MassExportSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueSettingVMs: observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  elementFilterVM\r\n  get ElementFilterVM() {\r\n    if (!this.elementFilterVM) {\r\n      this.elementFilterVM = util.GetElementFilterVM(this);\r\n    }\r\n    return this.elementFilterVM;\r\n  }\r\n  set ElementFilterVM(v) {\r\n    this.elementFilterVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.ElementFilter = v;\r\n    }\r\n    else {\r\n      modelItem.ElementFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  elementFilterVMStorageList = undefined\r\n  get ElementFilterVMStorageList() {\r\n    if (!this.elementFilterVMStorageList) {\r\n      this.elementFilterVMStorageList = util.GetElementFilterVMStorageList(this);\r\n    }\r\n    return this.elementFilterVMStorageList;\r\n  }\r\n  set ElementFilterVMStorageList(v) {\r\n    this.elementFilterVMStorageList = v;\r\n\r\n    var selectVM = this.ElementFilterSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = 0;\r\n  }\r\n\r\n  elementFilterSelectVM\r\n  get ElementFilterSelectVM() {\r\n    if (!this.elementFilterSelectVM) {\r\n      var storageList = this.ElementFilterVMStorageList ? this.ElementFilterVMStorageList : [];\r\n\r\n      var obj = this.elementFilterSelectVM = selectVMUtil.get(storageList, this.ElementFilterVM);\r\n      obj.Placeholder = 'chọn bộ lọc'\r\n      obj.OnSelectedItemChanged = (v) => this.ElementFilterVM = v;\r\n    }\r\n    return this.elementFilterSelectVM;\r\n  }\r\n\r\n  valueSettingVMs = undefined\r\n  get ValueSettingVMs() {\r\n    if (!this.valueSettingVMs) {\r\n      this.valueSettingVMs = util.GetValueSettingVMs(this);\r\n    }\r\n    return this.valueSettingVMs;\r\n  }\r\n  set ValueSettingVMs(v) {\r\n    var list = this.valueSettingVMs;\r\n    var modelList = this.ModelItem.ValueSettings;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount) {\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount) {\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = valueSettingUtil.Clone\r\n          (originItemVM.ModelItem, this.ModelItem);\r\n        modelList.push(item);\r\n\r\n        var itemVM = valueSettingVMUtil.get(item, this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewValueSettingVM = () => {\r\n    var item = this.ModelItem.AddNewValueSetting();\r\n    var itemView = valueSettingVMUtil.get(item, this);\r\n    this.ValueSettingVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.ElementFilterSelectVM.InitialItem = v.ElementFilterVM;\r\n    this.ValueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassExportSettingDataVM from './MassExportSettingDataVM';\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  pmDataVM().ElementFilterSetting_DictVM.OnGetItemsDone = (v) => {\r\n    qI.ElementFilterVMStorageList = GetElementFilterVMStorageList(qI);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilterVM = (q) => {\r\n  var elemFilter = q.ModelItem.ElementFilter;\r\n  if (!elemFilter) return undefined;\r\n\r\n  var list = pmDataVM().ElementFilterSetting_DictVM.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.ModelItem === elemFilter);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetElementFilterVMStorageList = (q) => {\r\n  return pmDataVM().ElementFilterSetting_DictVM.Items;\r\n}\r\n\r\nexport const GetValueSettingVMs = (q) => {\r\n  var valueSettings = q.ModelItem.ValueSettings;\r\n  return valueSettings.map(x => valueSettingVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassExportSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var valueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport MassExportSettingVM from \"./MassExportSettingVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class MassExportSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassExportSetting_DictVMUtil'\r\n\r\nexport class MassExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassExportSettingVMUtil'\r\nimport * as inputVMUtil from './MassExportSettingInputVMUtil'\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\nimport MassExportSettingInputVM from \"./MassExportSettingInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassGroupSetting_DictVMUtil'\r\n\r\nexport class MassGroupSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassGroupSettingVMUtil'\r\nimport { MassGroupSetting_DictVM } from \"./MassGroupSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n","\r\nexport default class PhaseVM {\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  get DisplayContent () {\r\n    return `${this.Name}`;\r\n  }\r\n}","import PhaseVM from \"./PhaseVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new PhaseVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;  \r\n\r\n  return qI;\r\n}","export const addversion = 'addversion'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Phase_DictVMUtil'\r\nimport * as stateType from '../state/StateType'\r\nimport { message } from 'antd';\r\n\r\nexport class Phase_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      state : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  state = undefined\r\n  get State(){\r\n    return this.state;\r\n  }\r\n  set State(v){\r\n    this.state = v;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n\r\n  AddVersion = () => {\r\n    this.State = stateType.addversion;\r\n  }\r\n\r\n  Cancel = () => {\r\n    this.State = undefined;\r\n  }\r\n\r\n  OK = () => {\r\n    var name = this.Input.Name;\r\n    var index = this.Items.findIndex(x => x.Name === name);\r\n    if (index !== -1){\r\n      message.warning('version name already exists!');\r\n      return;\r\n    }\r\n\r\n    this.State = undefined;\r\n    this.ModelItem.AddMassVersion();\r\n  }\r\n}","import * as textVMUtil from '../../../text/TextVMUtil'\r\n\r\nexport default class PhaseInputVM {\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên version\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n}","import * as itemVMUtil from './PhaseVMUtil'\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport * as inputVMUtil from './PhaseInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new Phase_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  });\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputVMUtil.get(q.ModelItem.Input, q);\r\n}","import PhaseInputVM from \"./PhaseInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new PhaseInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ProjectVMUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\n\r\nexport default class ProjectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      typicalLevelSetting: observable,\r\n      typicalLevelSetting_ForEdit: observable\r\n    })\r\n  }\r\n\r\n  get _id() {\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.ModelItem.Code;\r\n    }\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.ModelItem.Code = v;\r\n  }\r\n\r\n  phase_DictVM\r\n  get Phase_DictVM() {\r\n    if (!this.phase_DictVM) {\r\n      this.phase_DictVM = util.GetPhase_DictVM(this);\r\n    }\r\n    return this.phase_DictVM;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = this.ModelItem.RebarMass_Dict;\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  get InputExportSet() {\r\n    return this.ModelItem.InputExportSet;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  // Old Version\r\n  get Level_Dict() {\r\n    return this.ModelItem.Level_Dict;\r\n  }\r\n\r\n  // LevelSetting\r\n  OnSet_LevelSetting_Func_Dict = []\r\n\r\n  levelSetting\r\n  get LevelSetting() {\r\n    if (!this.levelSetting) {\r\n      util.Handle_LevelSetting(this)\r\n    }\r\n    return this.levelSetting;\r\n  } set LevelSetting(v) {\r\n    this.levelSetting = v;\r\n\r\n    console.log(v);\r\n\r\n    genUtil.Handle(\r\n      this.OnSet_LevelSetting_Func_Dict,\r\n      (v) => this.OnSet_LevelSetting_Func_Dict = v)\r\n  }\r\n\r\n  // TypicalLevelSetting\r\n  typicalLevelSetting = undefined\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      this.typicalLevelSetting = util.GetTypicalLevelSetting(this);\r\n    }\r\n    return this.typicalLevelSetting;\r\n  } set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit = undefined\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = util.GetTypicalLevelSetting_ForEdit(this);\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  get Url(){\r\n    return this.ModelItem.Url;\r\n  }\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as util from './LevelSettingVMUtil'\r\n\r\nexport class LevelSettingVM extends SettingVM {\r\n\r\n}","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './LS_ItemVMUtil'\r\n\r\nexport class LS_ItemVM {\r\n  constructor() {\r\n    // makeObservable(this, {\r\n      \r\n    // })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  // Data\r\n  get Name() {\r\n    return this.ModelItem.Name;\r\n  }\r\n  set Name(v) {\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  get Values(){\r\n    return this.ModelItem.Values;\r\n  }\r\n  set Values(v){\r\n    this.ModelItem.Values = v;\r\n  }\r\n\r\n  // Index\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.Items.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var index = this.Index;\r\n    var dict = this.Dict;\r\n    var list = dict.Items;\r\n    list.splice(index, 1);\r\n  }\r\n}","import { LS_ItemVM } from \"./LS_ItemVM\"\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new LS_ItemVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Proeprty\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './LevelSettingDataVMUtil'\r\nimport { ControlOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport * as itemUtil from './item/LS_ItemVMUtil'\r\n\r\nexport class LevelSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = itemUtil.get(this.ModelItem.AddItem(), this);\r\n    this.Items.push(item);\r\n\r\n    return item;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { LevelSettingDataVM } from './LevelSettingDataVM';\r\nimport * as itemUtil from './item/LS_ItemVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  var qI = new LevelSettingDataVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => itemUtil.get(x, q));\r\n}","import { LevelSettingVM } from './LevelSettingVM'\r\nimport * as dataUtil from './LevelSettingDataVMUtil'\r\n\r\nexport const get = (q, project) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new LevelSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Project = project;\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataUtil.get(data);\r\n  }  \r\n\r\n  return qI;\r\n}","export const text = 'text'\r\nexport const input = 'input'","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport * as checkboxVMUtil from './CheckboxVMUtil'\r\nimport './Checkbox.css'\r\n\r\nclass CheckboxView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = checkboxVMUtil.get(false);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onCheckedChange = (e) => {\r\n    var data = this.state;\r\n    var { checked } = e.target;\r\n\r\n    if (data.OnCheckChanging) {\r\n      data.OnCheckChanging(checked);\r\n    }\r\n\r\n    if (!data.Cancel) {\r\n      data.Ischecked = checked;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var { ischecked, name, isDisable } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <label>\r\n          <input type=\"checkbox\"\r\n            checked={ischecked}\r\n            onChange={this.onCheckedChange} disabled={isDisable} />\r\n          <span className='checkbox__title'>{name}</span>\r\n        </label>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CheckboxView)","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport CheckboxView from '../../../../../checkbox/CheckboxView';\r\nimport * as checkBoxUtil from '../../../../../checkbox/CheckboxVMUtil';\r\nimport * as multiSelectUtil from \"../../../../../select/MultiSelectVMUtil\";\r\nimport * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport { text } from '../pageItem/TLS_PageItemStateType';\r\nimport * as util from './LevelGroupVMUtil'\r\n\r\nexport class LevelGroupVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      primary: observable,\r\n      isSelectOpen: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get Levels() {\r\n    return this.ModelItem.Levels;\r\n  } set Levels(v) {\r\n    this.ModelItem.Levels = v;\r\n  }\r\n\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  levelSelectVM\r\n  get LevelSelectVM() {\r\n    if (!this.levelSelectVM) {\r\n      var list = this.LevelStorageList;\r\n      if (!list) {\r\n        this.SettingVM.ModelItem.OnGetLevelStorageList_Funcs.push(() => {\r\n          var obj = this.levelSelectVM;\r\n          obj.Items = this.LevelStorageList;\r\n          obj.InitialItems = this.Levels;\r\n        })\r\n      }\r\n\r\n      list = list ? list : []\r\n      var obj = this.levelSelectVM = multiSelectUtil.get(list, this.Levels);\r\n      obj.Placeholder = 'chọn level ...';\r\n\r\n      obj.TitleRender = (item) => {\r\n        const getTriggerContent = () => {\r\n          return this.IsSelectOpen || this.Primary === item ? 'click' : 'hover';\r\n        }\r\n        var triggerVM = textUtil.get(getTriggerContent())\r\n\r\n        const getButtonType = () => {\r\n          return this.Primary === item ? 'primary' : 'dashed'\r\n        }\r\n        var buttonTypeVM = textUtil.get(getButtonType())\r\n\r\n        const getAddContent = () => {\r\n          return this.Primary === item ? '' : 'Set'\r\n        }\r\n        var addContentVM = textUtil.get(getAddContent())\r\n\r\n        const getItemCss = () => {\r\n          return this.Primary === item ? 'levelgroup__primary' : '';\r\n        }\r\n\r\n        return <Popover trigger={triggerVM.Content}\r\n          content={\r\n            <span>\r\n              {this.Primary !== item ?\r\n                <span className='levelgroup__addtext'>{addContentVM.Content}</span>\r\n                : ''}\r\n              <Button size='small'\r\n                type={buttonTypeVM.Content}\r\n                onClick={() => {\r\n                  this.Primary = item;\r\n                }}>Primary</Button>\r\n            </span>\r\n          }>\r\n          <span className={getItemCss()}>{item}</span>\r\n        </Popover>\r\n      }\r\n\r\n      obj.OnSetOpen = (v) => this.IsSelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Levels = v;\r\n        if (this.Levels.indexOf(this.Primary) === -1) {\r\n          this.Primary = util.GetDefaultPrimary(this);\r\n        }\r\n      }\r\n    }\r\n    return this.levelSelectVM;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.LevelGroups;\r\n    list.splice(this.Index, 1);\r\n\r\n    this.Primary = util.GetDefaultPrimary(this);\r\n  }\r\n\r\n  primary = undefined\r\n  get Primary() {\r\n    if (!this.primary) {\r\n      this.primary = this.ModelItem.Primary;\r\n    }\r\n    return this.primary\r\n  } set Primary(v) {\r\n    this.primary = this.ModelItem.Primary = v;\r\n  }\r\n\r\n  isSelectOpen = undefined\r\n  get IsSelectOpen() {\r\n    return this.isSelectOpen\r\n  } set IsSelectOpen(v) {\r\n    this.isSelectOpen = v;\r\n  }\r\n}","import { LevelGroupVM } from \"./LevelGroupVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new LevelGroupVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport * as genUtil from \"../../../../../../util/generalUtil\";\r\nimport * as it from './TLS_FilterValue_InputType'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from \"../../../../../input/NewInputView\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterValueVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      inputType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  get Values() {\r\n    return this.Dict.ModelItem.Items;\r\n  }\r\n\r\n  get Value() {\r\n    return this.Values[this.Index].Value;\r\n  }\r\n  set Value(v) {\r\n    this.Values[this.Index].Value = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var obj = this.valueVM = textUtil.get(this.Value);\r\n      obj.onSetContent = (v) => {\r\n        this.Value = v;\r\n      }\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var list = ['Cột', 'Vách', 'Dầm', 'Sàn']\r\n      var obj = this.selectVM = selectUtil.get(list, this.Value);\r\n      obj.Placeholder = '...'\r\n      obj.OnSetOpen = (v) => this.SelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => this.Value = v;\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ModelItem.Items.splice(this.Index, 1);\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n\r\n  inputType = undefined\r\n  get InputType(){\r\n    if (!this.inputType){\r\n      this.inputType = this.ModelItem.InputType\r\n    }\r\n    return this.inputType;\r\n  } set InputType(v){\r\n    this.inputType = this.ModelItem.InputType = v;\r\n  }\r\n\r\n  ToggleInputType = () => {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        this.SelectVM.InitialItem = this.Value;\r\n        this.Value = this.SelectVM.SelectedItem;\r\n        this.InputType = it.select\r\n        break;\r\n      case it.select:\r\n        if (this.Value) {\r\n          this.ValueVM.Content = this.Value;\r\n        } else{\r\n          if (!this.ValueVM.Content){\r\n            this.ValueVM.Content = 'value'\r\n          }\r\n          this.Value =this.ValueVM.Content;\r\n        }\r\n\r\n        this.InputType = it.input\r\n        break;\r\n    }\r\n  }\r\n\r\n  SwitchChecked_Funcs = () => this.InputType === it.select;\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        return <NewInputView store={this.ValueVM} \r\n          className='tls_filter__value__input' />\r\n      case it.select:\r\n        return <SelectView store={this.SelectVM} \r\n          className='tls_filter__value__select' />\r\n    }\r\n  }\r\n\r\n  selectOpen\r\n  get SelectOpen() {\r\n    if (this.selectOpen === undefined) {\r\n      this.selectOpen = this.SelectVM.Open;\r\n    }\r\n    return this.selectOpen;\r\n  }\r\n  set SelectOpen(v) {\r\n    this.selectOpen = v;\r\n    this.PopoverState.Content = util.GetPopoverState(this);\r\n  }\r\n\r\n  popoverState\r\n  get PopoverState() {\r\n    if (!this.popoverState) {\r\n      this.popoverState = textUtil.get(util.GetPopoverState(this));\r\n    }\r\n    return this.popoverState;\r\n  }\r\n}","import { TLS_FilterValueVM } from \"./TLS_FilterValueVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterValueVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPopoverState = (q) => {\r\n    return q.SelectOpen ? 'none' : 'hover';\r\n  }","import { makeObservable, observable, action } from 'mobx';\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterVMUtil'\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get id(){\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get Field(){\r\n    return this.ModelItem.Field;\r\n  } set Field(v){\r\n    this.ModelItem.Field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = \r\n        selectUtil.get(this.FieldStorageList, this.Field);\r\n      obj.Placeholder = 'chọn bộ lọc ...';\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = valueUtil.get(this.ModelItem.AddItem(),this);\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n}\r\n","import { TLS_FilterVM } from \"./TLS_FilterVM\";\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => valueUtil.get(x, q));\r\n}","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport * as textUtil from '../../../../../text/TextVMUtil';\r\nimport * as st from './TLS_PageItemStateType'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\nimport * as util from './TLS_PageItemVMUtil'\r\n\r\nexport class TLS_PageItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable,\r\n      State: observable,\r\n      levelGroups: observable,\r\n      filters: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem?.id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = this.ModelItem.Name = v;\r\n  }\r\n\r\n  State = st.text\r\n\r\n  ToggleState = () => {\r\n    switch (this.State) {\r\n      case st.text:\r\n        this.State = st.input\r\n        break;\r\n      case st.input:\r\n        this.NameVM.Content = this.Name;\r\n        this.State = st.text\r\n        break;\r\n    }\r\n  }\r\n\r\n  get DeleteMarginCss() {\r\n    return this.State === st.input ? 'tls_pageItem__deletemargin' : ''\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = textUtil.get(this.Name);\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  NameOK = () => {\r\n    this.State = st.text;\r\n    this.Name = this.NameVM.Content;\r\n  }\r\n\r\n  NameCancel = () => {\r\n    this.State = st.text;\r\n  }\r\n\r\n  get InputToolElement() {\r\n    return <div >\r\n      <Button type='primary' size='small'\r\n        onClick={this.NameOK}>ok</Button>\r\n      <Button type='dashed' size='small'\r\n        onClick={this.NameCancel}>cancel</Button>\r\n    </div>\r\n  }\r\n\r\n  get InputElement() {\r\n    var obj = <NewInputView className='tls_pageItem_input' store={this.NameVM} />\r\n    return obj;\r\n  }\r\n\r\n  get TitleElement() {\r\n    var delElem = <Button type='primary' size='small' onClick={this.Delete}\r\n      className='tls_pageItem__delete'>x</Button>\r\n\r\n    switch (this.State) {\r\n      case st.text:\r\n        return <>\r\n          <span>{this.Name}</span>\r\n          <Button type='primary' size='small' className='tls_pageItem__edit'\r\n            onClick={this.ToggleState}>e</Button>\r\n          {delElem}\r\n        </>\r\n      case st.input:\r\n        return <>\r\n          <Popover content={this.InputToolElement} trigger=\"focus\">\r\n            <span>\r\n              {this.InputElement}\r\n            </span>\r\n          </Popover>\r\n          {delElem}\r\n        </>\r\n    }\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.PageItems.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var index = this.Index;\r\n    var isLast = this.IsLast;\r\n\r\n    var dict = this.Dict;\r\n    var list = dict.PageItems;\r\n    list.splice(index, 1);\r\n    dict.AllTabs.splice(index, 1);\r\n\r\n    if (list.length !== 0) {\r\n      dict.IsModelChangePageKey = true;\r\n      dict.CurrentPageKey = (isLast ? list[index - 1] : list[index]).id\r\n    }\r\n  }\r\n\r\n  // Setting\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  // Level Group\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups = undefined\r\n  get LevelGroups() {\r\n    if (!this.levelGroups) {\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.get(this.ModelItem.AddLevelGroup(), this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  filters = undefined\r\n  get Filters() {\r\n    if (!this.filters) {\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.get(this.ModelItem.AddFilter(), this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n}","import { TLS_PageItemVM } from \"./TLS_PageItemVM\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_PageItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetLevelGroups = (q) => {\r\n  return q.ModelItem.LevelGroups.map(x => levelGroupUtil.get(x, q));\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return q.ModelItem.Filters.map(x => filterUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TypicalLevelSettingDataVMUtil'\r\nimport { ControlOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil';\r\n\r\nexport class TypicalLevelSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      pageItems: observable,\r\n      currentPageKey: observable,\r\n      allTabs: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  // Setting\r\n  get SettingVM (){\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Page Items\r\n  pageItems = undefined\r\n  get PageItems() {\r\n    if (!this.pageItems) {\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.get(this.ModelItem.AddPageItem(), this);\r\n    this.PageItems.push(item);\r\n\r\n    var i = this.IsHaveAddCommandTab ? 1 : 0;\r\n    this.AllTabs.splice(this.AllTabs.length - i, 0, item);\r\n\r\n    this.CurrentPageKey = item.id;\r\n\r\n    return item;\r\n  }\r\n\r\n  addCommandTab\r\n  get AddCommandTab() {\r\n    if (!this.addCommandTab) {\r\n      this.addCommandTab = {\r\n        id: 'add',\r\n        TitleElement: <Button className='tls__tabs__add'\r\n          type='text' size='small'\r\n          onClick={this.AddPageItem}>+</Button>\r\n      }\r\n    }\r\n    return this.addCommandTab;\r\n  }\r\n\r\n  IsHaveAddCommandTab = false\r\n\r\n  allTabs = undefined\r\n  get AllTabs() {\r\n    if (!this.allTabs) {\r\n      var obj = [...this.PageItems];\r\n      if (this.IsHaveAddCommandTab) {\r\n        obj.push(this.AddCommandTab);\r\n      }\r\n      this.allTabs = obj;\r\n    }\r\n    return this.allTabs;\r\n  }\r\n\r\n  currentPageKey = undefined\r\n  get CurrentPageKey() {\r\n    if (!this.currentPageKey) {\r\n      this.currentPageKey = this.PageItems[0].id;\r\n    }\r\n    return this.currentPageKey;\r\n  } set CurrentPageKey(v) {\r\n    this.currentPageKey = v;\r\n  }\r\n\r\n  IsModelChangePageKey = false\r\n\r\n  ChangePageKey = (v) => {\r\n    if (this.IsModelChangePageKey) {\r\n      this.IsModelChangePageKey = false; return;\r\n    }\r\n    this.CurrentPageKey = v;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TypicalLevelSettingDataVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return q.ModelItem.PageItems.map(x => pageItemUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as util from './TypicalLevelSettingVMUtil'\r\n\r\nexport class TypicalLevelSettingVM extends SettingVM {\r\n  get LevelStorageList() {\r\n    return this.ModelItem.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList(){\r\n    return this.ModelItem.FieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    this.ModelItem.Save();\r\n  }\r\n}","import * as dataVMUtil from './TypicalLevelSettingDataVMUtil'\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\n\r\nexport const get = (q, project) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new TypicalLevelSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Project = project;\r\n\r\n  // var level_Dict = project.Level_Dict;\r\n  // const getLevelsFunc = () => { \r\n  //   qI.LevelStorageList = level_Dict.Items.map(x => x.Name);\r\n  //   qI.GetLevelStorageList = true;\r\n  // }\r\n  // if (level_Dict.Items){\r\n  //   getLevelsFunc();\r\n  // } else{\r\n  //   level_Dict.OnGetItemsDone_Funcs.push(getLevelsFunc);\r\n  // }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data, qI);\r\n  }    \r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}","import * as phaseDictVMUtil from '../phase/Phase_DictVMUtil'\r\nimport ProjectVM from \"./ProjectVM\";\r\nimport * as levelSettingUtil from '../setting/level/LevelSettingVMUtil'\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingVMUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new ProjectVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPhase_DictVM = (q) => {\r\n  var phaseDict = q.ModelItem.Phase_Dict;\r\n  return phaseDictVMUtil.get(phaseDict);\r\n}\r\n\r\n// LevelSetting\r\nexport const Handle_LevelSetting = (q) => {\r\n  if (q.IsGet_LevelSetting) return undefined\r\n  q.IsGet_LevelSetting = true;\r\n\r\n  const setObj = (v) => {\r\n     q.LevelSetting = levelSettingUtil.get(v, q);\r\n  }\r\n\r\n  var qI = q.ModelItem;\r\n  if (qI.LevelSetting) {\r\n    setObj(qI.LevelSetting)\r\n  } else {\r\n    genUtil.Add_2(\r\n      qI.OnSet_LevelSetting_Func_Dict,\r\n      () => {\r\n        setObj(qI.LevelSetting)\r\n      },\r\n      false)\r\n  }\r\n}\r\n\r\n// TypicalLevelSetting\r\nexport const GetTypicalLevelSetting_Func = (model, project) => {\r\n  return typicalLevelUtil.get(model, project);\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() =>\r\n      q.TypicalLevelSetting = GetTypicalLevelSetting_Func(project.TypicalLevelSetting, q));\r\n  }\r\n}\r\n\r\nexport const GetTypicalLevelSetting_ForEdit = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting_ForEdit;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TypicalLevelSetting_ForEdit = GetTypicalLevelSetting_Func(project.TypicalLevelSetting_ForEdit, q)\r\n    });\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Project_DictVMUtil'\r\n\r\nexport class Project_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.ModelItem.Items = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import * as itemVMUtil from './ProjectVMUtil'\r\nimport { Project_DictVM } from \"./Project_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new Project_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassResultCompVMUtil'\r\nimport * as multiSelectVMUtil from '../../../../select/MultiSelectVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport { Link } from 'react-router-dom';\r\nimport { Popover } from 'antd';\r\n\r\nexport default class MassResultCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsShowProjectSelect: observable,\r\n      CanHavePhase: observable,\r\n      isHavePhase: observable,\r\n      IsDataPending: observable\r\n    })\r\n  }\r\n\r\n  projects\r\n  get Projects() {\r\n    if (!this.projects) {\r\n      this.projects = this.ModelItem.Projects;\r\n    }\r\n    return this.projects;\r\n  }\r\n  set Projects(v) {\r\n    this.projects = v;\r\n    this.ModelItem.Projects = v;\r\n  }\r\n\r\n  projectVMs\r\n  get ProjectVMs() {\r\n    if (!this.projectVMs) {\r\n      this.projectVMs = util.GetProjectVMs(this);\r\n    }\r\n    return this.projectVMs;\r\n  }\r\n  set ProjectVMs(v) {\r\n    this.projectVMs = v;\r\n    this.Projects = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  projectVMStorageList\r\n  get ProjectVMStorageList() {\r\n    if (!this.projectVMStorageList) {\r\n      this.projectVMStorageList = util.GetProjectVMStorageList(this);\r\n    }\r\n    return this.projectVMStorageList;\r\n  }\r\n  set ProjectVMStorageList(v) {\r\n    this.projectVMStorageList = v;\r\n\r\n    this.projectVMs = util.GetProjectVMs(this);\r\n\r\n    var selectVM = this.ProjectSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.projectVMs;\r\n  }\r\n\r\n  projectSelectOpen\r\n  get ProjectSelectOpen(){\r\n    if (this.projectSelectOpen === undefined){\r\n      this.projectSelectOpen = this.ProjectSelectVM.Open;\r\n    }\r\n    return this.projectSelectOpen;\r\n  }\r\n  set ProjectSelectOpen(v){\r\n    this.projectSelectOpen = v;\r\n    this.ProjectPopoverState.Content = util.GetProjectPopoverStateValue(this);\r\n  }\r\n\r\n  projectPopoverState\r\n  get ProjectPopoverState(){\r\n    if (!this.projectPopoverState){\r\n      this.projectPopoverState = textUtil.get(util.GetProjectPopoverStateValue(this));\r\n    }\r\n    return this.projectPopoverState;\r\n  }\r\n\r\n  projectSelectVM\r\n  get ProjectSelectVM() {\r\n    if (!this.projectSelectVM) {\r\n      var list = this.ProjectVMStorageList ? this.ProjectVMStorageList : [];\r\n      var obj = this.projectSelectVM = multiSelectVMUtil.get(list, this.ProjectVMs);\r\n      obj.Placeholder = 'chọn dự án'\r\n      obj.TitleRender = (item) => <Popover trigger={this.ProjectPopoverState.Content}\r\n        placement=\"topLeft\"\r\n        content={\r\n          <a target='_blank' rel=\"noreferrer\"\r\n            // href={`/#/project/${item._id}`} \r\n            href={item.Url}\r\n            >View project</a>\r\n        }\r\n      >\r\n        {item.DisplayContent}\r\n      </Popover>\r\n\r\n      obj.OnSelectedItemChanged = (v) => this.ProjectVMs = v;\r\n      obj.OnSetOpen = (v) => this.ProjectSelectOpen = v;\r\n    }\r\n    return this.projectSelectVM;\r\n  }\r\n\r\n  IsShowProjectSelect = true\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = this.ModelItem.Phases;\r\n    }\r\n    return this.phases;\r\n  }\r\n  set Phases(v) {\r\n    this.phases = v;\r\n    this.ModelItem.Phases = v;\r\n  }\r\n\r\n  phaseVMs\r\n  get PhaseVMs() {\r\n    if (!this.phaseVMs) {\r\n      this.phaseVMs = util.GetPhaseVMs(this);\r\n    }\r\n    return this.phaseVMs;\r\n  }\r\n  set PhaseVMs(v) {\r\n    this.phaseVMs = v;\r\n    this.Phases = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict() {\r\n    if (!this.massItem_Dict) {\r\n      this.massItem_Dict = this.ModelItem.MassItem_Dict;\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  phaseVMStorageList\r\n  get PhaseVMStorageList() {\r\n    return this.phaseVMStorageList;\r\n  }\r\n  set PhaseVMStorageList(v) {\r\n    this.phaseVMStorageList = v;\r\n\r\n    this.phaseVMs = util.GetPhaseVMs(this);\r\n\r\n    var selectVM = this.PhaseSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.phaseVMs;\r\n  }\r\n\r\n  phaseSelectVM\r\n  get PhaseSelectVM() {\r\n    if (!this.phaseSelectVM) {\r\n      var list = this.PhaseVMStorageList ? this.PhaseVMStorageList : [];\r\n      var obj = this.phaseSelectVM = multiSelectVMUtil.get(list, this.PhaseVMs);\r\n      obj.Placeholder = 'chọn version'\r\n      obj.OnSelectedItemChanged = (v) => this.PhaseVMs = v;\r\n    }\r\n    return this.phaseSelectVM;\r\n  }\r\n\r\n  CanHavePhase = false\r\n\r\n  isHavePhase = undefined\r\n  get IsHavePhase() {\r\n    if (!this.isHavePhase) {\r\n      this.isHavePhase = this.ModelItem.IsHavePhase;\r\n    }\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v) {\r\n    this.isHavePhase = v;\r\n    this.ModelItem.IsHavePhase = v;\r\n  }\r\n\r\n  isShowPhaseSelectVM\r\n  get IsShowPhaseSelectVM() {\r\n    if (!this.isShowPhaseSelectVM) {\r\n      var obj = this.isShowPhaseSelectVM\r\n        = checkboxVMUtil.get(\"So sánh các version\", this.IsHavePhase);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHavePhase = v;\r\n      };\r\n    }\r\n    return this.isShowPhaseSelectVM;\r\n  }\r\n\r\n  get MassGroupSetting() {\r\n    return this.ModelItem.MassGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.ModelItem.MassGroupSetting = v;\r\n  }\r\n\r\n  massGroupSettingStorageList = undefined\r\n  get MassGroupSettingStorageList() {\r\n    if (!this.massGroupSettingStorageList) {\r\n      this.massGroupSettingStorageList =\r\n        util.GetMassGroupSettingStorageList(this);\r\n    }\r\n  }\r\n  set MassGroupSettingStorageList(v) {\r\n    this.massGroupSettingStorageList = v;\r\n\r\n    var selectVM = this.MassGroupSettingSelectVM;\r\n    selectVM.Items = v;\r\n  }\r\n\r\n  massGroupSettingSelectVM\r\n  get MassGroupSettingSelectVM() {\r\n    if (!this.massGroupSettingSelectVM) {\r\n      var list = this.MassGroupSettingStorageList ?\r\n        this.MassGroupSettingStorageList : [];\r\n      var obj = this.massGroupSettingSelectVM =\r\n        selectVMUtil.get(list);\r\n\r\n      obj.TitleRender = (item) => item.DisplayContent\r\n\r\n      obj.CanClear = true;\r\n      obj.Placeholder = 'chọn bộ set khối lượng'\r\n      obj.OnSelectedItemChanged = (v) => this.MassGroupSetting = v;\r\n    }\r\n    return this.massGroupSettingSelectVM;\r\n  }\r\n\r\n  IsDataPending = false;\r\n\r\n  get LoadingSpinTip() {\r\n    return `loading data ... (${(this.HandledRatio * 100).toFixed(1)}%)`;\r\n  }\r\n\r\n  loadingSpinTipVM\r\n  get LoadingSpinTipVM() {\r\n    if (!this.loadingSpinTipVM) {\r\n      this.loadingSpinTipVM = textUtil.get(this.LoadingSpinTip);\r\n    }\r\n    return this.loadingSpinTipVM;\r\n  }\r\n\r\n  handledRatio = 0\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  }\r\n  set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.LoadingSpinTipVM.Content = this.LoadingSpinTip;\r\n  }\r\n\r\n  // function\r\n  GetMassData = () => {\r\n    this.IsDataPending = true;\r\n    this.HandledRatio = 0;\r\n    this.ModelItem.GetMassData();\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassResultCompVM from \"./MassResultCompVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, isfetchProjects = true) => {\r\n  var qI = new MassResultCompVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.ViewItem = qI;\r\n\r\n  if (isfetchProjects) {\r\n    pmDataVM().Project_DictVM.OnGetItemsDone = (v) => {\r\n      qI.ProjectVMStorageList = GetProjectVMStorageList(qI);\r\n    }\r\n  }\r\n\r\n  q.OnGetItemsDone_Funcs.push(() => {\r\n    message.success('get mass data successfully');\r\n  })\r\n\r\n  var massTable = q.MassItem_Dict.MassTable;\r\n  massTable.OnIsUpdateDataDone_Funcs.push(() => {\r\n    qI.IsDataPending = false;\r\n  })\r\n  massTable.OnSetHandledRatio_Funcs.push((v) => {\r\n    qI.HandledRatio = v;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProjectVMStorageList = (q) => {\r\n  return pmDataVM().Project_DictVM.Items;\r\n}\r\n\r\nexport const GetProjectVMs = (q) => {\r\n  var storageList = q.ProjectVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var projects = q.Projects;\r\n  projects.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetPhaseVMs = (q) => {\r\n  var storageList = q.PhaseVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var phases = q.Phases;\r\n  phases.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetMassGroupSettingStorageList = (q) => {\r\n  var dict = pmData().MassGroupSetting_Dict;\r\n  var items = dict.Items;\r\n  if (!items){\r\n    dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.MassGroupSettingStorageList = dict.Items;\r\n    })\r\n  }\r\n  return items;\r\n}\r\n\r\n\r\nexport const GetProjectPopoverStateValue = (q) => {\r\n  return q.ProjectSelectOpen ? 'none' : 'hover';\r\n}","export const _default = \"default\";\r\nexport const edit = \"edit\";","import * as util from './RenderItemUtil'\r\n\r\nexport default class RenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport RenderItem from \"./RenderItem\"\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport TextView from \"../text/TextView\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new RenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (val, item, dataIndex, cell, row) => {\r\n        return cell.ValueVM.Content;\r\n      };\r\n    case rs.edit:\r\n      return (value, item, dataIndex, cell, row) => {\r\n        if (!dataIndex) return value;\r\n\r\n        var inputVM = cell.ValueVM;\r\n\r\n        var length = dataIndex.length;\r\n        var obj = item;\r\n        dataIndex.filter((x, i) => i < length - 1)\r\n          .forEach((x) => obj = obj[x]);\r\n\r\n        inputVM.onSetContent = (v) => {\r\n          obj[dataIndex[length - 1]] = v;\r\n        }\r\n        return <InputView store={inputVM} />\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './RenderItemUtil'\r\n\r\nexport default class Render_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import * as util from './TitleRenderItemUtil'\r\n\r\nexport default class TitleRenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport TitleRenderItem from \"./TitleRenderItem\";\r\nimport { Button } from \"antd\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new TitleRenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (title, column, table) => {\r\n        return <>\r\n          <div className='column__title__wrapper'>\r\n            {title}\r\n            {table.CanHandleColumn &&  column.IsShow_MoveCommand ?\r\n              <div className='column__title__tool'>\r\n                {table.CanEditColumn ?\r\n                  <Button type='primary' size='small'\r\n                    style={{ backgroundColor: '#faad14', border: 'none' }}\r\n                    onClick={column.Edit}>e</Button> : ''}\r\n                {table.CanDeleteColumn ? <Button type='primary' danger size='small'\r\n                  onClick={column.Delete}>x</Button> : ''}\r\n              </div>\r\n              : ''}\r\n          </div>\r\n        </>\r\n      };\r\n    case rs.edit:\r\n      return (title, column, table) => {\r\n        return <>\r\n          <div className='column__title__wrapper'>\r\n            {column.InputElement}\r\n            <Button type='primary' size='small'\r\n              onClick={column.OK}>ok</Button>\r\n          </div>\r\n        </>\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './TitleRenderItemUtil'\r\n\r\nexport default class TitleRender_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","export const select = 'select'\r\nexport const input = 'input'","import TableColumn from \"./TableColumn\"\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport { Button } from \"antd\";\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as it from './TableColumn_InputType'\r\n\r\n// Instance\r\nexport const get = (title, dataIndex, renders, table) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n\r\n  if (Array.isArray(dataIndex)) {\r\n    qI.DataIndex = dataIndex;\r\n  } else {\r\n    qI.DataIndex = [dataIndex];\r\n  }\r\n\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n  var dict = qI.Render_Dict;\r\n  if (renders) {\r\n    renders.forEach(x => {\r\n      dict.GetRender(x.State).Render = x.Render\r\n    });\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetByTitle = (title, table) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n  qI.DataIndex = [title];\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n\r\n  qI.OnSetTitleOK_Funcs.push(() => {\r\n    qI.DataIndex = [qI.Title];\r\n    table.Update();\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetActionColumn = (table) => {\r\n  var title = undefined;\r\n\r\n  var renders = [\r\n    renderUtil.get(rs._default, (val, item, dataIndex, cell, row) => {\r\n      var editElem = '';\r\n      if (table.CanHandleItem && table.CanEditItem) {\r\n        var edit = () => row.Edit();\r\n        editElem = <Button type='primary' size='small'\r\n          style={{ backgroundColor: '#faad14', border: 'none' }}\r\n          onClick={edit}>edit</Button>\r\n      }\r\n\r\n      var delElem = '';\r\n      if (table.CanHandleItem && table.CanDeleteItem) {\r\n        var del = () => table.DeleteItem(item, row);\r\n\r\n        delElem = <Button type='primary' danger size='small'\r\n          onClick={del}>x</Button>\r\n      }\r\n      return <>\r\n        {editElem}{delElem}\r\n      </>\r\n    }),\r\n    renderUtil.get(rs.edit, (val, item, dataIndex, cell, row) => {\r\n      var ok = () => row.OK();\r\n      return <Button type='primary' size='small'\r\n        onClick={ok}>ok</Button>\r\n    })\r\n  ]\r\n\r\n  var col = get(title, null, renders, table);\r\n\r\n  // Đính thông tin là Action Column\r\n  col.IsAction = true;\r\n\r\n  col.TitleRender_Dict.GetRender(rs._default).Render = () =>\r\n    <div style={{ display: 'flex' }}>\r\n      <Button type='primary' size='small'\r\n        onClick={table.AddColumn}>\r\n        (+) c\r\n        </Button>\r\n      {table.CanHandleItem && table.CanAddItem ?\r\n        <Button type='primary' size='small'\r\n          onClick={table.AddItem}>\r\n          (+) r\r\n        </Button>\r\n        : ''}\r\n    </div>\r\n\r\n  return col;\r\n}\r\n\r\n// Property\r\nexport const GetTitle = (q) => {\r\n  switch (q.InputType) {\r\n    case it.input:\r\n      return undefined;\r\n    case it.select:\r\n      return q.AllNames[0];\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport Render_Dict from './Render_Dict';\r\nimport TitleRender_Dict from './TitleRender_Dict';\r\nimport * as it from './TableColumn_InputType'\r\nimport * as selectUtil from '../select/SelectVMUtil';\r\nimport * as textUtil from '../text/TextVMUtil';\r\nimport InputView from '../input/InputView';\r\nimport SelectView from '../select/SelectView';\r\nimport { PMData } from '../main/single/model/PMData';\r\nimport * as util from './TableColumnUtil'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport default class TableColumn {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      title: observable,\r\n      TitleRenderState: observable,\r\n      inputType: observable,\r\n      IsShow_MoveCommand: observable\r\n    })\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  get CurrentList() {\r\n    return this.Table.Columns;\r\n  } set CurrentList(v) {\r\n    this.Table.Columns = v;\r\n  }\r\n\r\n  TitleRenderState = rs._default\r\n  RenderState = rs._default;\r\n\r\n  title = undefined\r\n  get Title() {\r\n    if (!this.title) {\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  } set Title(v) {\r\n    this.title = v;\r\n  }\r\n\r\n  OnSetTitleOK_Funcs = []\r\n\r\n  titleRender_Dict\r\n  get TitleRender_Dict() {\r\n    if (!this.titleRender_Dict) {\r\n      this.titleRender_Dict = new TitleRender_Dict();\r\n    }\r\n    return this.titleRender_Dict;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = new Render_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v) {\r\n    this.render_Dict = v;\r\n  }\r\n\r\n  Edit = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleColumn && table.CanEditColumn) {\r\n      this.TitleRenderState = rs.edit;\r\n    }\r\n  }\r\n\r\n  OK = () => {\r\n    this.TitleRenderState = rs._default;\r\n    this.OnSetTitleOK_Funcs.forEach(x => x(this));\r\n  }\r\n\r\n  Delete = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleColumn && table.CanDeleteColumn) {\r\n      table.Columns.splice(this.Index, 1);\r\n      table.Update();\r\n    }\r\n  }\r\n\r\n  TitleRender = () => {\r\n    var title = this.Title;\r\n    var table = this.Table;\r\n\r\n    var render = this.TitleRender_Dict.GetRender(this.TitleRenderState);\r\n    return render.Render(title, this, table);\r\n  }\r\n\r\n  inputType = undefined\r\n  get InputType() {\r\n    if (!this.inputType) {\r\n      this.inputType = this.Table.Column_InputType\r\n    }\r\n    return this.inputType;\r\n  }\r\n\r\n  // Thuộc tính sử dụng khi select đầu mục cột\r\n  get AllNames() {\r\n    return this.Table.AllColumnNames\r\n  }\r\n\r\n  inputVM\r\n  get InputVM() {\r\n    if (!this.inputVM) {\r\n      var obj = this.inputVM = textUtil.get(this.Title);\r\n      obj.onSetContent = (v) => this.Title = v;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var obj = this.selectVM = selectUtil.get(this.AllNames, this.Title);\r\n      obj.OnSelectedItemChanged = (v) => this.Title = v;\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        return <InputView store={this.InputVM} />\r\n      case it.select:\r\n        var width = this.Table.Column_Title_SelectWidth\r\n        return <div style={{width}}>\r\n          <SelectView store={this.SelectVM} />\r\n        </div>\r\n    }\r\n  }\r\n\r\n  IsShow_MoveCommand = false\r\n\r\n  get CanShow_MoveCommand() {\r\n    return this.Table.CanShow_MoveCommand;\r\n  }\r\n\r\n  Show_MoveCommand = () => {\r\n    this.IsShow_MoveCommand = true;\r\n  }\r\n\r\n  Collapse_MoveCommand = () => {\r\n    this.IsShow_MoveCommand = false;\r\n  }\r\n\r\n  MoveLeft = () => {\r\n    var index = this.Index;\r\n    if (index === 0) return;\r\n\r\n    var list = this.CurrentList;\r\n    var l1 = list.filter(x => !x.IsActive);\r\n    if (l1.length === 1) return;\r\n\r\n    genUtil.MoveItem(list, index, index - 1);\r\n    this.Table.Update();\r\n  }\r\n\r\n  MoveRight = () => {\r\n    var index = this.Index;\r\n\r\n    var list = this.CurrentList;\r\n    var l1 = list.filter(x => !x.IsActive);\r\n\r\n    if (l1.length === 1 || index === l1.length) {\r\n      return\r\n    }\r\n\r\n    genUtil.MoveItem(list, index, index + 1);\r\n    this.Table.Update();\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TableRowUtil'\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport default class TableRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Item: observable\r\n    })\r\n  }\r\n\r\n  key\r\n  get Key() {\r\n    if (!this.key) {\r\n      this.key = this.Item._id ? this.Item._id : this.Item.id;\r\n      if (!this.key) {\r\n        this.key = genUtil.randomId();\r\n      }\r\n    }\r\n    return this.key;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Table.Rows.indexOf(this);\r\n  }\r\n\r\n  Item = undefined;\r\n\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  Edit = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleItem && table.CanEditItem) {\r\n      this.Cells.forEach(x => x.RenderState = rs.edit);\r\n    }\r\n  }\r\n\r\n  OK = () => {\r\n    this.Cells.forEach(x => x.RenderState = rs._default);\r\n    this.Table.EditItem(this.Item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport * as util from './TableCellUtil'\r\n\r\nexport default class TableCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState: observable\r\n    })\r\n  }\r\n\r\n  get Key() {\r\n    return `${this.Column.Key}_${this.Row.Key}`;\r\n  }\r\n\r\n  get Item() {\r\n    return this.Row.Item;\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Row.Cells.indexOf(this);\r\n  }\r\n\r\n  get RowIndex() {\r\n    return this.Row.Index;\r\n  }\r\n\r\n  renderState = undefined\r\n  get RenderState() {\r\n    if (!this.renderState) {\r\n      this.renderState = this.Column.RenderState;\r\n    }\r\n    return this.renderState;\r\n  }\r\n  set RenderState(v) {\r\n    this.renderState = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM(){\r\n    if (!this.valueVM){\r\n      var val = util.GetValue(this);\r\n      this.valueVM = textUtil.get(val);\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = this.Column.Render_Dict;\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n\r\n  get DataIndex() {\r\n    return this.Column.DataIndex;\r\n  }\r\n\r\n  Render = () => {\r\n    var dataIndex = this.DataIndex;\r\n    var item = this.Item;\r\n    var value  = util.GetValue(this);\r\n\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(value, item, dataIndex, this, this.Row);\r\n  }\r\n}","import { PMData } from \"../main/single/model/PMData\";\r\nimport TableCell from \"./TableCell\"\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (row, col) => {\r\n  var qI = new TableCell();\r\n  qI.Row = row;\r\n  qI.Column = col;\r\n  qI.Table = row.Table;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetValue = (q) => {\r\n  var dataIndex = q.DataIndex;\r\n  var item = q.Item;\r\n\r\n  if (q.Table.Override_Get_CellValue){\r\n    var val = q.Table.Override_Get_CellValue(item, q, q.Row, q.Column);\r\n    return val;\r\n  }\r\n\r\n  var value = undefined;\r\n\r\n  if (dataIndex) {\r\n    value = item;\r\n    dataIndex.forEach(x => {\r\n      value = value[x]\r\n    })\r\n  }\r\n\r\n  return value;\r\n}","import TableRow from \"./TableRow\"\r\nimport * as cellUtil from './TableCellUtil'\r\nimport { PMData } from \"../main/single/model/PMData\";\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport const get = (item, table) => {\r\n  var qI = new TableRow();\r\n  qI.Item = item;\r\n  qI.Table = table;\r\n  return qI;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var columns = q.Table.Columns;\r\n  return columns.map(x => cellUtil.get(q, x));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport TableColumn from './TableColumn';\r\nimport * as colUtil from './TableColumnUtil'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport * as rs from './RenderState'\r\nimport * as util from './TableVMUtil'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport InputView from '../input/InputView'\r\nimport { Button } from 'antd';\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as rowUtil from './TableRowUtil'\r\nimport * as cit from './TableColumn_InputType'\r\n\r\nexport default class TableVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      columns: observable,\r\n      dataSource: observable,\r\n      rows: observable,\r\n\r\n      AllColumnNames : observable,\r\n      Column_InputType : observable,\r\n\r\n      CanHandleItem: observable,\r\n      CanAddItem: observable,\r\n      CanDeleteItem: observable,\r\n      CanEditItem: observable,\r\n\r\n      CanHandleItem: observable,\r\n      CanAddItem: observable,\r\n      CanDeleteItem: observable,\r\n      CanEditItem: observable,\r\n      IsShowActionColumn: observable,\r\n    })\r\n  }\r\n\r\n  // Có thể xử lý dữ liệu 1 dòng (bao gồm Xóa, Thêm, Sửa)\r\n  CanHandleItem = true\r\n\r\n  // Thêm 1 dòng\r\n  CanAddItem = true\r\n\r\n  // Xóa 1 dòng\r\n  CanDeleteItem = true\r\n\r\n  // Dùng để chỉnh sửa thông tin 1 Dòng\r\n  CanEditItem = true\r\n\r\n  // Có thể xử lý dữ liệu 1 cột (bao gồm Xóa, Thêm, Sửa)\r\n  CanHandleColumn = true\r\n\r\n  // Thêm 1 cột\r\n  CanAddColumn = true\r\n\r\n  // Xóa 1 cột\r\n  CanDeleteColumn = true\r\n\r\n  // Chỉnh sửa thông tin 1 cột\r\n  CanEditColumn = true\r\n\r\n  IsShowActionColumn = true\r\n\r\n  columns = undefined\r\n  get Columns() {\r\n    if (!this.columns) {\r\n      this.columns = [\r\n        colUtil.get('Tên cấu kiện', 'ElementName', null, this),\r\n        colUtil.get('Đường kính', 'Diameter', null, this),\r\n      ];\r\n\r\n      if (this.IsShowActionColumn) {\r\n        this.columns.push(colUtil.GetActionColumn(this));\r\n      }\r\n    }\r\n    return this.columns;\r\n  }\r\n  set Columns(v) {\r\n    this.columns = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  dataSource = undefined\r\n  get DataSource() {\r\n    if (!this.dataSource) {\r\n      this.dataSource = [ ]\r\n    }\r\n    return this.dataSource;\r\n  }\r\n  set DataSource(v) {\r\n    this.dataSource = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  rows = undefined\r\n  get Rows() {\r\n    if (!this.rows) {\r\n      this.rows = util.GetRows(this);\r\n    }\r\n    return this.rows;\r\n  }\r\n  set Rows(v) {\r\n    this.rows = v;\r\n  }\r\n\r\n  AddItem = () => {\r\n    if (this.CanHandleItem && this.CanAddItem) {\r\n      var item = undefined\r\n      if (this.OnGetItemForAdd) {\r\n        item = this.OnGetItemForAdd();\r\n      } else {\r\n        item = {\r\n          Key: genUtil.randomId(),\r\n          IsTypeNotDefined: true\r\n        };\r\n      }\r\n      this.DataSource.push(item);\r\n\r\n      var row = rowUtil.get(item, this);\r\n      this.Rows.push(row);\r\n      row.Edit();\r\n    }\r\n  }\r\n\r\n  DeleteItem = (item, row) => {\r\n    if (this.CanHandleItem && this.CanDeleteItem) {\r\n      var list = this.DataSource;\r\n      var index = list.indexOf(item);\r\n      list.splice(index, 1);\r\n      this.Rows.splice(index, 1);\r\n\r\n      if (this.OnDeleteItem) {\r\n        this.OnDeleteItem(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  EditItem = (item) => {\r\n    if (this.CanHandleItem && this.CanEditItem) {\r\n      if (item.IsTypeNotDefined) {\r\n        var index = this.DataSource.findIndex(x => x.Key === item.Key);\r\n        item = this.DataSource[index] = { ...item };\r\n      }\r\n\r\n      if (this.OnEditItem) {\r\n        this.OnEditItem(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddColumn = () => {\r\n    if (this.CanHandleColumn && this.CanDeleteColumn) {\r\n      var col = colUtil.GetByTitle(null, this);\r\n\r\n      var actionCol_Index = this.Columns.findIndex(x => x.IsAction);\r\n      if (actionCol_Index !== -1){\r\n        this.Columns.splice(actionCol_Index, 0, col);  \r\n      } else {\r\n        this.Columns.push(col);\r\n      }\r\n\r\n      col.Edit();\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    this.Rows = null;\r\n  }\r\n\r\n  // Ghi đè cách truy xuất giá trị 1 cell theo Item, Cell, Row, Col\r\n  Override_Get_CellValue\r\n\r\n  // Khi hiệu chỉnh đầu mục cột,\r\n  // sử dụng 2 cách để hiểu chỉnh: select và input\r\n  Column_InputType = cit.input\r\n  AllColumnNames = []\r\n\r\n  // Có thể di chuyển vị trí các cột hay không\r\n  CanShow_MoveCommand = true\r\n\r\n  // Thiết lập sẵn bề rỗng của \r\n  Column_Title_SelectWidth\r\n}","import * as rowUtil from './TableRowUtil'\r\nimport * as colUtil from './TableColumnUtil'\r\nimport TableVM from './TableVM';\r\n\r\n// Instance\r\nexport const get = (data) => {\r\n  var qI = new TableVM();\r\n  qI.Columns = data.columns.map(x => colUtil.GetByTitle(x, qI));\r\n  qI.DataSource = data.dataSource;\r\n  return qI;\r\n}\r\n\r\nexport const GetByColumn_Data = (colNames, data, isHaveAction = true) => {\r\n  var qI = new TableVM();\r\n  \r\n  var cols = colNames.map(x => colUtil.GetByTitle(x, qI));\r\n  if (isHaveAction){\r\n    cols.push(colUtil.GetActionColumn(qI));\r\n  }\r\n\r\n  qI.Columns = cols;\r\n\r\n  qI.DataSource = data;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetRows = (q) => {\r\n  return q.DataSource.map(x => rowUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportDataVMUtil'\r\n\r\nexport class WorkItemExportDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      \r\n    })\r\n  }\r\n\r\n\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as checkboxUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport class WorkItemExportSettingVM extends SettingVM {\r\n  IsCategoryChecked = true\r\n\r\n  categoryCheckboxVM\r\n  get CategoryCheckboxVM(){\r\n    if (!this.categoryCheckboxVM){\r\n      debugger\r\n      var obj =this.categoryCheckboxVM = \r\n        checkboxUtil.get(undefined, this.IsCategoryChecked)\r\n    }\r\n    return this.categoryCheckboxVM;\r\n  }\r\n}","import * as dataVMUtil from './WorkItemExportDataVMUtil'\r\nimport { WorkItemExportSettingVM } from './WorkItemExportSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkItemExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { WorkItemExportDataVM } from './WorkItemExportDataVM';\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport class WorkItemExportSetting extends Setting {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportSetting_DictVMUtil'\r\nimport * as itemUtil from './WorkItemExportSettingVMUtil';\r\nimport { WorkItemExportSetting } from './WorkItemExportSetting';\r\n\r\nexport class WorkItemExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = [\r\n        itemUtil.get(new WorkItemExportSetting())\r\n      ]\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM) {\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","import TableVM from \"../../../../table/TableVM\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport CheckboxView from '../../../../checkbox/CheckboxView'\r\nimport { WorkItemExportSettingVM } from \"./WorkItemExportSettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n\r\n  var nameCol = colUtil.get('Tên thiết lập', ['Name'], null, qI);\r\n  var isCateCol = colUtil.get('Category', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      debugger\r\n      var checkBoxVM = item.CategoryCheckboxVM;\r\n      return <CheckboxView store={item.CategoryCheckboxVM}/>\r\n    })\r\n  ], qI);\r\n  var isSubWorkItemCol = colUtil.get('Hạng mục phụ', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      return <CheckboxView />\r\n    })\r\n  ], qI);\r\n\r\n  qI.Columns = [\r\n    nameCol, isCateCol, isSubWorkItemCol,\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return new WorkItemExportSettingVM();\r\n  }\r\n  \r\n  return qI;\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../model/PMData';\r\n\r\nimport * as workpackage_DictVMUtil from '../../entity/workpackage/Workpackage_DictVMUtil'\r\nimport * as elementFilterSetting_DictVMUtil from \r\n  '../../entity/setting/elementFilter/ElementFilterSetting_DictVMUtil'\r\nimport * as massExportSetting_DictVMUtil from \r\n  '../../entity/setting/massExport/MassExportSetting_DictVMUtil'\r\nimport * as massGroupSetting_DictVMUtil from \r\n  '../../entity/setting/massGroup/MassGroupSetting_DictVMUtil'\r\nimport * as project_DictVMUtil from '../../entity/project/Project_DictVMUtil'\r\n\r\nimport * as massResultCompVMUtil from '../../entity/mass/result/MassResultCompVMUtil'\r\n\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\n\r\nimport * as wieDictVMUtil from \r\n  '../../entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport const GetWorkpackage_DictVM = (data) => {\r\n  return workpackage_DictVMUtil.get(pmData().Workpackage_Dict);\r\n}\r\n\r\nexport const GetElementFilterSetting_DictVM = (data) => {\r\n  return elementFilterSetting_DictVMUtil.get\r\n    (pmData().ElementFilterSetting_Dict);\r\n}\r\n\r\nexport const GetMassExportSetting_DictVM = (data) => {\r\n  return massExportSetting_DictVMUtil.get\r\n    (pmData().MassExportSetting_Dict);\r\n}\r\n\r\nexport const GetMassGroupSetting_DictVM = (data) => {\r\n  return massGroupSetting_DictVMUtil.get\r\n    (pmData().MassGroupSetting_Dict);\r\n}\r\n\r\nexport const GetProject_DictVM = (data) => {\r\n  return project_DictVMUtil.get\r\n    (pmData().Project_Dict);\r\n}\r\n\r\nexport const GetMassResultCompVM= (data) => {\r\n  return massResultCompVMUtil.get\r\n  (pmData().MassResultComp);\r\n}\r\n\r\nexport const GetWorkItemExportSetting_Dict = (data) => {\r\n  return wieDictVMUtil.get(pmData().WorkItemExportSetting_Dict);\r\n}","export const mass = 'mass'\r\nexport const typicallevel = 'typicallevel'\r\nexport const phase = 'phase'\r\nexport const inputdata = 'inputdata'\r\nexport const mepsetting = 'mepsetting'\r\nexport const document = 'document'","import { makeObservable, observable, action } from 'mobx';\r\nimport { pmData } from '../../entity/filter/EntFilterUtil';\r\nimport { PMData } from '../model/PMData';\r\nimport * as util from './PMDataVMUtil'\r\nimport * as pvt from '../../entity/project/ProjectViewType'\r\n\r\nexport class PMDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isDebug: observable,\r\n      projectViewType : observable,\r\n      currentProject : observable,\r\n      main_Classname : observable\r\n    })\r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMDataVM();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get pmData(){\r\n    return PMData.Instance;\r\n  }\r\n\r\n  workpackage_DictVM\r\n  get Workpackage_DictVM() {\r\n    if (!this.workpackage_DictVM){\r\n      this.workpackage_DictVM = util.GetWorkpackage_DictVM();\r\n    }\r\n    return this.workpackage_DictVM;\r\n  }\r\n\r\n  elementFilterSetting_DictVM\r\n  get ElementFilterSetting_DictVM() {\r\n    if (!this.elementFilterSetting_DictVM){\r\n      this.elementFilterSetting_DictVM = util.GetElementFilterSetting_DictVM();\r\n    }\r\n    return this.elementFilterSetting_DictVM;\r\n  }\r\n\r\n  massExportSetting_DictVM\r\n  get MassExportSetting_DictVM() {\r\n    if (!this.massExportSetting_DictVM){\r\n      this.massExportSetting_DictVM = util.GetMassExportSetting_DictVM();\r\n    }\r\n    return this.massExportSetting_DictVM;\r\n  }\r\n\r\n  massGroupSetting_DictVM\r\n  get MassGroupSetting_DictVM() {\r\n    if (!this.massGroupSetting_DictVM){\r\n      this.massGroupSetting_DictVM = util.GetMassGroupSetting_DictVM();\r\n    }\r\n    return this.massGroupSetting_DictVM;\r\n  }\r\n\r\n  project_DictVM\r\n  get Project_DictVM() {\r\n    if (!this.project_DictVM){\r\n      this.project_DictVM = util.GetProject_DictVM();\r\n    }\r\n    return this.project_DictVM;\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM(){\r\n    if (!this.massResultCompVM){\r\n      this.massResultCompVM = util.GetMassResultCompVM();\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n  set MassResultCompVM(v) {\r\n    this.massResultCompVM = v;\r\n    if (!v)\r\n    {\r\n      this.pmData.MassResultComp = v;\r\n    }\r\n    else{\r\n      this.pmData.MassResultComp = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = this.pmData.FilterValueTypes;\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = this.pmData.StringFilterTypes;\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.pmData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = this.pmData.ValueRetrieveTypes\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = this.pmData.ParameterNames;\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = this.pmData.MassPropertyNames;\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = this.pmData.MassTypes;\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = \r\n        util.GetWorkItemExportSetting_Dict(this);\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n\r\n  isDebug = undefined\r\n  get IsDebug(){\r\n    if (this.isDebug === undefined){\r\n      this.isDebug = this.pmData.IsDebug;\r\n    }\r\n    return this.isDebug;\r\n  } set IsDebug(v){\r\n    this.isDebug = this.pmData.IsDebug = v;\r\n  }\r\n\r\n  OnSet_ProjectViewType_Func_Dict = []\r\n\r\n  projectViewType = pvt.mass\r\n  //projectViewType = pvt.document\r\n  get ProjectViewType(){\r\n    return this.projectViewType;\r\n  } set ProjectViewType(v){\r\n    this.projectViewType = v;\r\n    this.OnSet_ProjectViewType_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  OnSet_CurrentProject_Func_Dict = []\r\n\r\n  currentProject = undefined\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n    this.OnSet_CurrentProject_Func_Dict.forEach(x => x.Value());\r\n\r\n    this.pmData.CurrentProject = v?.ModelItem\r\n  }\r\n\r\n  get UpdatedDate(){\r\n    return this.pmData.UpdatedDate;\r\n  }\r\n\r\n  // Classname scale bề rộng dự án cho phù hợp\r\n  // View BoQ : 800px\r\n  // View Detail : 100%\r\n  main_Classname = 'projectcomp__main'\r\n  get Main_Classname(){\r\n    return this.main_Classname;\r\n  } set Main_Classname(v){\r\n    this.main_Classname = v;\r\n  }\r\n}","import * as util from './MGS_FieldVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MGS_FieldVM {\r\n  get Index() {\r\n    return this.Dict.FieldVMs.indexOf(this);\r\n  }\r\n\r\n  get Fields(){\r\n    return this.Dict.ModelItem.Fields;\r\n  }\r\n\r\n  get Field(){\r\n    return this.Fields[this.Index];\r\n  }\r\n  set Field(v){\r\n    this.Fields[this.Index] = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return util.GetFieldStorageList();\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = selectVMUtil.get(this.FieldStorageList, this.Field);\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    var index = this.Index;\r\n    this.Fields.splice(index, 1);\r\n    \r\n    var list = this.Dict.FieldVMs;\r\n    list.splice(index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldSelectVM.InitialItem = v.Field;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MGS_FieldVM from \"./MGS_FieldVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MGS_FieldVM();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldStorageList = () => {\r\n  return pmDataVM().MassPropertyNames;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassGroupSettingDataVMUtil'\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport default class MassGroupSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fieldVMs : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  fieldVMs = undefined\r\n  get FieldVMs(){\r\n    if (!this.fieldVMs){\r\n      this.fieldVMs = util.GetFieldVMs(this);\r\n    }\r\n    return this.fieldVMs;\r\n  }\r\n  set FieldVMs(v){\r\n    var list = this.fieldVMs;\r\n    var modelList = this.ModelItem.Fields;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount){\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount){\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = originItemVM.Field;\r\n        modelList.push(item);\r\n\r\n        var itemVM = fieldVMUtil.get(item,this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewFieldVM = () => {\r\n    var item = this.ModelItem.AddNewField();\r\n    var itemView = fieldVMUtil.get(item, this);\r\n    this.FieldVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldVMs = v.FieldVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassGroupSettingDataVM from './MassGroupSettingDataVM';\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldVMs = (q) => {\r\n  var fields = q.ModelItem.Fields;\r\n  return fields.map(x => fieldVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassGroupSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    \r\n  }\r\n}","import * as dataVMUtil from './MassGroupSettingDataVMUtil'\r\nimport MassGroupSettingVM from './MassGroupSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport class CSVExport {\r\n  data = []\r\n  get Data() {\r\n    if (this.Override_Get_Data) {\r\n      return this.Override_Get_Data()\r\n    }\r\n    return this.data;\r\n  } set Data(v) {\r\n    this.data = v;\r\n  }\r\n\r\n  fileName\r\n  get FileName() {\r\n    if (this.Override_Get_FileName) {\r\n      return this.Override_Get_FileName();\r\n    }\r\n    return this.fileName;\r\n  } set FileName(v) {\r\n    this.fileName = v;\r\n  }\r\n\r\n  Export = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    const ws = XLSX.utils.json_to_sheet(this.Data, this.Headers);\r\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n  \r\n  ExportTest = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    var ws1 = {}\r\n    ws1.Name = 'Title';\r\n    ws1['!ref'] = \"A1:E5\";\r\n    ws1['A1'] = {\r\n      t: 'n', \r\n      v: 100\r\n    }\r\n\r\n    var ws2 = {}\r\n    ws2.Name = 'Raw Data'\r\n    ws2['!ref'] = \"A1:E5\";\r\n    ws2['B2'] = {\r\n      t: 'n', \r\n      v: 200\r\n    }\r\n    ws2['B3'] = {\r\n      v: 200, f : 'B2'\r\n    }\r\n    ws2['C1'] = {\r\n      v: 300, \r\n      f : 'Title!A1'\r\n    }\r\n\r\n    ws2['C2'] = {\r\n      v: 300, \r\n      f : 'sum(Title!A1, B2)'\r\n    }\r\n\r\n    // const ws = XLSX.utils.json_to_sheet(this.Data, this.Headers);\r\n    // ws['!ref'] = \"A1:E5\";\r\n    // ws['E5'] = {\r\n    //   t : 's',\r\n    //   v : '100'\r\n    // };\r\n    // debugger\r\n\r\n    //const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    \r\n    const wb = { \r\n      Sheets: { \r\n        \r\n       }, \r\n      SheetNames: [ws1.Name, ws2.Name] \r\n    };\r\n    wb.Sheets[ws1.Name] = ws1;\r\n    wb.Sheets[ws2.Name] = ws2;\r\n\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n}","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport class ExcelExport {\r\n  workbook\r\n  get Workbook(){\r\n    if (this.Override_Get_Workbook){\r\n      return this.Override_Get_Workbook()\r\n    }\r\n    return this.workbook;\r\n  } set Workbook(v){\r\n    this.workbook = v;\r\n  }\r\n\r\n  fileName\r\n  get FileName() {\r\n    if (this.Override_Get_FileName) {\r\n      return this.Override_Get_FileName();\r\n    }\r\n    return this.fileName;\r\n  } set FileName(v) {\r\n    this.fileName = v;\r\n  }\r\n\r\n  Export = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    \r\n    const excelBuffer = XLSX.write(this.Workbook, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './MT_CellUtil'\r\n\r\nexport class MT_Cell {\r\n  // Lấy thứ tự trong lập trình\r\n  row = 0\r\n  get Row(){\r\n    if (this.Override_Get_Row){\r\n      return this.Override_Get_Row();\r\n    }\r\n    return this.row;\r\n  } set Row(v){\r\n    this.row = v;\r\n    this.Override_Get_Row = undefined;\r\n  }\r\n\r\n  // Lấy thứ tự trong lập trình\r\n  column = 0\r\n  get Column(){\r\n    if (this.Override_Get_Column){\r\n      return this.Override_Get_Column();\r\n    }\r\n    return this.column\r\n  } set Column(v){\r\n    this.column = v;\r\n    this.Override_Get_Column = undefined;\r\n  }\r\n\r\n  Type \r\n  Value\r\n\r\n  formula\r\n  get Formula(){\r\n    if (this.Override_Get_Formula){\r\n      return this.Override_Get_Formula();\r\n    }\r\n    return this.formula;\r\n  } set Formula(v){\r\n    this.formula = v;\r\n    this.Override_Get_Formula = undefined;\r\n  }\r\n\r\n  get Address(){\r\n    var obj = genUtil.ExcelCellName(this.Row, this.Column);\r\n    return obj;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  isContinueSubRows\r\n  get IsContinueSubRows(){\r\n    if (this.isContinueSubRows === undefined){\r\n      this.isContinueSubRows = util.GetIsContinueSubRows(this);\r\n    }\r\n    return this.isContinueSubRows;\r\n  }\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      t : this.Type,\r\n      v : this.Value,\r\n      f : this.Formula,\r\n      z : this.Format,\r\n      s : this.Style\r\n    }\r\n    return obj;\r\n  }\r\n}","// Property\r\nexport const GetSubItems = (q) => {\r\n  var column = q.Column;\r\n  return q.Dict.SubItems.map(x => {\r\n    var list = x.Cells;\r\n    var index = list.findIndex(y => y.Column === column);\r\n    return index !== -1 ? list[index] : undefined;\r\n  }).filter(x => x !== undefined);\r\n}\r\n\r\nexport const GetIsContinueSubRows = (q) => {\r\n  var isValid = true;\r\n\r\n  q.SubItems.forEach(x => {\r\n    if (isValid && x.SubItems.length !== 0){\r\n      isValid = false;\r\n    }\r\n  })\r\n\r\n  return isValid;\r\n}","import * as util from './MT_Data_RowUtil'\r\n\r\nexport class MT_Data_Row {\r\n  Worksheet\r\n\r\n  Row\r\n\r\n  get Rank(){\r\n    return this.Row.Rank;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  get FullItems(){\r\n    return util.GetFullItems(this);\r\n  }\r\n\r\n  cells\r\n  get Cells(){\r\n    if (!this.cells){\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  get FullIndex() {\r\n    return this.Worksheet.FullRows.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  }\r\n}","export const string = 's'\r\nexport const number = 'n'","import { MT_Cell } from \"./MT_Cell\";\r\nimport { MT_Data_Row } from \"./MT_Data_Row\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\n\r\n// Instance\r\nexport const get = (row, ws, supItem) => {\r\n  var qI = new MT_Data_Row();\r\n\r\n  qI.Row = row;\r\n  qI.Worksheet = ws;\r\n  qI.SupItem = supItem;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetSubItems = (q) => {\r\n  return q.Row.SubItems.map(x => get(x, q.Worksheet, q));\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  var row = q.Row;\r\n  var title = '';\r\n\r\n  for (var i = 0; i < row.Rank; i++) {\r\n    title += '  ';\r\n  }\r\n\r\n  title += row.Title;\r\n\r\n  return title;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var vc_dict = q.ValueCell_Dict = [];\r\n\r\n  var firstCol = q.Worksheet.First_ValueColumn;\r\n  var firstRow = q.Worksheet.First_ValueRow;\r\n\r\n  var row = q.Row;\r\n  var list = []\r\n  var getRowFunc = () => q.FullIndex + firstRow;\r\n\r\n  var titleCell = new MT_Cell();\r\n  titleCell.Dict = q;\r\n  titleCell.Type = c_vt.string;\r\n\r\n  titleCell.Value = q.Title;\r\n  titleCell.Column = 0 + firstCol;\r\n  titleCell.Override_Get_Row = getRowFunc\r\n  list.push(titleCell);\r\n\r\n  var columns = row.Table.Columns\r\n  row.Cells.forEach(x => {\r\n    var valueCell = new MT_Cell()\r\n    valueCell.Dict = q;\r\n    valueCell.Type = c_vt.number;\r\n    valueCell.Value = x.TotalValue\r\n    valueCell.Format = '0.00'\r\n    valueCell.Column = \r\n      columns.indexOf(x.Column) + 1 + firstCol\r\n    valueCell.Override_Get_Row = getRowFunc\r\n\r\n    valueCell.Override_Get_Formula = () => {\r\n      var subItems = valueCell.SubItems;\r\n      var length = subItems.length;\r\n      if (length === 0) return undefined;\r\n\r\n      var formula\r\n      if (!valueCell.IsContinueSubRows) {\r\n        formula = subItems.reduce((a, x, i) => {\r\n          if (i !== 0) {\r\n            a += ','\r\n          };\r\n          a += x.Address\r\n          return a\r\n        }, 'SUM(');\r\n\r\n        formula += ')';\r\n      } else {\r\n        formula = `SUM(${subItems[0].Address}:${subItems[length-1].Address})`\r\n      }\r\n\r\n      return formula;\r\n    }\r\n\r\n    var key = x.Column.Name\r\n    list.push(valueCell);\r\n    vc_dict.push({\r\n      Key: key,\r\n      Value: valueCell\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetFullItems = (q) => {\r\n  var list = [q];\r\n\r\n  q.SubItems.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  });\r\n\r\n  return list;\r\n}","import * as util from './MT_Data_WorksheetUtil'\r\n\r\nexport class MT_Data_Worksheet {\r\n  get Table(){\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  mainRows\r\n  get MainRows(){\r\n    if (!this.mainRows){\r\n      this.mainRows = util.GetMainRows(this)\r\n    }\r\n    return this.mainRows;\r\n  }\r\n\r\n  fullRows\r\n  get FullRows(){\r\n    if (!this.fullRows){\r\n      this.fullRows = util.GetFullRows(this);\r\n    }\r\n    return this.fullRows;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells(){\r\n    if (!this.valueCells){\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells;\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName(){\r\n    return util.GetRangeName(this); \r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      '!ref' : this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import * as rowUtil from './MT_Data_RowUtil'\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { MT_Cell } from './MT_Cell';\r\n\r\n// Property\r\nexport const GetMainRows = (q) => {\r\n  return q.Table.MainRows.map(x => rowUtil.get(x, q));\r\n}\r\n\r\nexport const GetFullRows = (q) => {\r\n  var list = [];\r\n\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var list = [];\r\n\r\n  q.FullRows.forEach(x => {\r\n    list.push.apply(list, x.Cells);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var list = [];\r\n  q.Table.Columns.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x.Name;\r\n    cell.Column = i + fc + 1;\r\n    cell.Row = fr\r\n    cell.Style = {\r\n      font : {\r\n        bold : true\r\n      }\r\n    }\r\n\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_RawData_WorksheetUtil'\r\n\r\nexport class MT_RawData_Worksheet {\r\n  Workbook\r\n\r\n  get Table() {\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  dataRows\r\n  get DataRows(){\r\n    if (!this.dataRows){\r\n      this.dataRows = util.GetDataRows(this);\r\n    }\r\n    return this.dataRows;\r\n  }\r\n\r\n  tableRows\r\n  get TableRows() {\r\n    if (!this.tableRows) {\r\n      this.tableRows = util.GetTableRows(this);\r\n    }\r\n    return this.tableRows;\r\n  }\r\n\r\n  records\r\n  get Records() {\r\n    if (!this.records) {\r\n      this.records = util.GetRecords(this);\r\n    }\r\n    return this.records\r\n  }\r\n\r\n  InfoFields = []\r\n\r\n  valueFields\r\n  get ValueFields() {\r\n    if (!this.valueFields) {\r\n      this.valueFields = util.GetValueFields(this);\r\n    }\r\n    return this.valueFields;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells() {\r\n    if (!this.valueCells) {\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName() {\r\n    return util.GetRangeName(this);\r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData() {\r\n    var obj = {\r\n      '!ref': this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Cell } from \"./MT_Cell\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Property\r\nexport const GetDataRows = (q) => {\r\n  return q.Workbook.Data_WS.FullRows\r\n    .filter(x => x.SubItems.length === 0)\r\n}\r\n\r\nexport const GetTableRows = (q) => {\r\n  return q.DataRows.map(x => x.Row)\r\n}\r\n\r\nexport const GetValueFields = (q) => {\r\n  return q.Table.Columns.map(x => x.Name);\r\n}\r\n\r\nexport const GetRecords = (q) => {\r\n  return q.DataRows.map(x => {\r\n    // Init Cells\r\n    var cells = x.Cells;\r\n\r\n    var obj = x.Row.ExportData;\r\n\r\n    // Xử lý phần sắp xếp  Info Fields\r\n    var infoFields = q.InfoFields;\r\n    obj.Infos.map(x => x.Key).forEach(y => {\r\n      if (!infoFields.includes(y)) {\r\n        infoFields.push(y);\r\n      }\r\n    });\r\n\r\n    return {\r\n      Binding_DataRow: x,\r\n      Value: obj\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var fc = q.First_ValueColumn;\r\n  var fr = q.First_ValueRow;\r\n\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var list = [];\r\n  var ifs = q.InfoFields;\r\n  var ifl = ifs.length\r\n  var vfs = q.ValueFields;\r\n\r\n  records.forEach((x, i) => {\r\n    // Truy xuất phần binding\r\n    var vc_dict = x.Binding_DataRow.ValueCell_Dict\r\n\r\n    // Xử lý phần Value Object\r\n    var value = x.Value;\r\n    var cell\r\n    var row = i + fr;\r\n\r\n    // Xử lý Info\r\n    value.Infos.forEach(y => {\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.string;\r\n      cell.Value = y.Value;\r\n      cell.Column = ifs.indexOf(y.Key) + fc;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n    })\r\n\r\n    // Xử lý Value\r\n    value.Values.forEach(y => {\r\n      var key = y.Key;\r\n      var cell_val = y.Value;\r\n\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.number;\r\n      cell.Value = cell_val;\r\n      cell.Format = '0.00'\r\n      cell.Column = vfs.indexOf(key) + fc + ifl;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n\r\n      // Xử lý phần Binding\r\n      //debugger\r\n      var index = vc_dict.findIndex(z => z.Key === key);\r\n      var data_cell = vc_dict[index].Value;\r\n\r\n      if (cell_val) {\r\n        data_cell.Formula = `raw_data!${cell.Address}`;\r\n      }\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var fields = q.InfoFields.concat(q.ValueFields)\r\n\r\n  var list = [];\r\n  fields.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x;\r\n    cell.Column = i + fc;\r\n    cell.Row = fr\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_WorkbookUtil'\r\n\r\nexport class MT_Workbook {\r\n  Table\r\n\r\n  get All_WS(){\r\n    return [ this.RawData_WS, this.Data_WS]\r\n    //return [ this.Data_WS, this.RawData_WS]\r\n    //return [ this.Data_WS ]\r\n  }\r\n\r\n  data_WS\r\n  get Data_WS(){\r\n    if (!this.data_WS){\r\n      this.data_WS = util.GetData_WS(this);\r\n    }\r\n    return this.data_WS;\r\n  }\r\n\r\n  rawData_WS\r\n  get RawData_WS(){\r\n    if (!this.rawData_WS){\r\n      this.rawData_WS = util.GetRawData_WS(this);\r\n    }\r\n    return this.rawData_WS;\r\n  }\r\n\r\n  get ResultData (){\r\n    var obj = {\r\n      Sheets : { },\r\n      SheetNames : []\r\n    }\r\n\r\n    this.All_WS.forEach(x => {\r\n      obj.Sheets[x.Title] = x.ResultData\r\n      obj.SheetNames.push(x.Title);\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Data_Worksheet } from \"./MT_Data_Worksheet\";\r\nimport { MT_RawData_Worksheet } from \"./MT_RawData_Worksheet\";\r\nimport { MT_Workbook } from \"./MT_Workbook\"\r\n\r\n// Instance\r\nexport const get = (table) => {\r\n  var qI = new MT_Workbook();\r\n\r\n  qI.Table = table;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetData_WS = (q) =>{\r\n  var qI = new MT_Data_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'data'\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRawData_WS = (q) => {\r\n  var qI = new MT_RawData_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'raw_data'\r\n\r\n  return qI;\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as mif from '../item/MassItemField'\r\nimport MassColumn from './MassColumn';\r\nimport * as colUtil from './MassColumnUtil'\r\nimport * as rowUtil from './MassRowUtil'\r\nimport * as cellUtil from './MassCellUtil'\r\nimport * as util from './MassTableUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as st from '../../setting/base/SettingType'\r\nimport { message } from 'antd';\r\nimport * as mgsUtil from '../../setting/massGroup/MassGroupSettingUtil'\r\nimport * as mgsVMUtil from '../../setting/massGroup/MassGroupSettingVMUtil'\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport * as compUtil from './rowgroup/MassGroupComponentUtil'\r\nimport * as exportUtil from '../../../../export/csv/CSVExportUtil';\r\nimport dayjs from 'dayjs';\r\nimport * as eeUtil from '../../../../export/excel/ExcelExportUtil';\r\nimport * as wbUtil from './export/MT_WorkbookUtil';\r\nimport * as mgi_st from './MassGroupInput_StateType'\r\nimport InputView from '../../../../input/InputView';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport default class MassTable {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsValidTable: observable,\r\n      Columns: observable,\r\n      MainRows: observable,\r\n      Cells: observable,\r\n      columnField: observable,\r\n      IsOnSaveMassGroup: observable,\r\n      MassGroupInput_State: observable,\r\n      Is_Override_MassGroup_Modal_Open: observable\r\n    })\r\n  }\r\n\r\n\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    if (v && v.length !== 0) {\r\n      this.Build();\r\n      this.IsValidTable = true;\r\n    }\r\n    else {\r\n      this.IsValidTable = false;\r\n    }\r\n  }\r\n\r\n  IsValidTable = false\r\n\r\n  columnField = mif.Project\r\n  get ColumnField() {\r\n    return this.columnField;\r\n  }\r\n  set ColumnField(v) {\r\n    this.columnField = v;\r\n  }\r\n\r\n  massGroupSetting\r\n  get MassGroupSetting() {\r\n    return this.massGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.massGroupSetting = v;\r\n    if (!v) {\r\n      this.MainMGC = v;\r\n    } else {\r\n      this.MainMGC = compUtil.Clone(v.Data.MassGroupComponent);\r\n    }\r\n  }\r\n\r\n  mainMGC\r\n  get MainMGC() {\r\n    if (!this.mainMGC) {\r\n      this.mainMGC = util.GetMainMGC(this);\r\n    }\r\n    return this.mainMGC;\r\n  }\r\n  set MainMGC(v) {\r\n    this.mainMGC = v;\r\n    this.Init();\r\n    if (!v) {\r\n      this.MainMGI = undefined;\r\n    } else {\r\n      this.MainMGI = util.GetMainMGI(this);\r\n    }\r\n  }\r\n\r\n  mainMGI\r\n  get MainMGI() {\r\n    if (!this.mainMGI) {\r\n      this.mainMGI = util.GetMainMGI(this);\r\n    }\r\n    return this.mainMGI;\r\n  }\r\n  set MainMGI(v) {\r\n    this.mainMGI = v;\r\n  }\r\n\r\n  Columns = undefined\r\n  FullRows = undefined\r\n  MainRows = undefined\r\n  Cells = undefined\r\n\r\n  Init = () => {\r\n    this.Columns = [];\r\n    this.MainRows = [];\r\n    this.FullRows = [];\r\n    this.Cells = [];\r\n\r\n    // Reset các dòng tạo bởi người dùng\r\n    this.CreatedByUser_Rows = []\r\n    this.Handled_CreatedByUser_Rows = []\r\n  }\r\n\r\n  get AllRows() {\r\n    return util.GetAllRows(this);\r\n  }\r\n\r\n  GetColumn = (v) => {\r\n    var list = this.Columns;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = colUtil.get(v, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetRow = (v, supItem) => {\r\n    var list = undefined;\r\n    if (supItem) {\r\n      list = supItem.SubItems;\r\n    } else {\r\n      list = this.MainRows;\r\n    }\r\n\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = rowUtil.get(v, this);\r\n      item.SupItem = supItem;\r\n\r\n      list.push(item);\r\n      this.FullRows.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetCell = (col, row, canAdd = true) => {\r\n    var list = this.Cells;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Column === col && x.Row === row);\r\n    if (index === -1) {\r\n      if (!canAdd) return undefined;\r\n\r\n      item = cellUtil.get(col, row, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n\r\n  Build = () => {\r\n    var colField = this.ColumnField;\r\n\r\n    if (colField === mif.Phase) {\r\n      pmData().MassResultComp.Phases.forEach(x => {\r\n        var col = this.GetColumn(mif.GetValueString(x, colField));\r\n      })\r\n    }\r\n\r\n    this.Items.forEach(x => {\r\n      switch (colField) {\r\n        case mif.Phase:\r\n          x.ValidPhasesByInput.forEach(y => {\r\n            this.HandleItem(x, y);\r\n          })\r\n          break;\r\n        default:\r\n          this.HandleItem(x, x.GetValue(colField));\r\n          break;\r\n      }\r\n    })\r\n\r\n    // Lúc nào cũng AsyncData\r\n    // if (!this.IsHaveAsyncData) {\r\n    //   this.UpdateData();\r\n    // }\r\n  }\r\n\r\n  //IsHaveAsyncData = false;\r\n  IsOnSaveMassGroup = false;\r\n\r\n  HandledItems = []\r\n  HandledItemPhases = []\r\n\r\n  OnSetHandledRatio_Funcs = []\r\n\r\n  handledRatio\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  } set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.OnSetHandledRatio_Funcs.forEach(x => x(v));\r\n  }\r\n\r\n  AddHandledItems = (item) => {\r\n    if (this.ColumnField !== mif.Phase) {\r\n      this.HandledItems.push(item);\r\n    } else {\r\n      var list = this.HandledItemPhases;\r\n      var index = list.findIndex(x => x.Item === item);\r\n      var obj = undefined;\r\n      if (index === -1) {\r\n        obj = {\r\n          Item: item,\r\n          Count: 0\r\n        };\r\n        list.push(obj);\r\n      } else {\r\n        obj = list[index];\r\n      }\r\n      obj.Count++;\r\n\r\n      if (obj.Count === item.ValidPhasesByInput.length) {\r\n        this.HandledItems.push(item);\r\n      }\r\n    }\r\n\r\n    this.HandledRatio = this.HandledItems.length / this.Items.length;\r\n\r\n    if (this.HandledItems.length === this.Items.length) {\r\n      this.UpdateData();\r\n      this.HandledItems = [];\r\n    }\r\n  }\r\n\r\n  UpdateData = () => {\r\n    this.MainRows.forEach(x => x.UpdateData());\r\n    this.MainRows = rowUtil.Order(this.MainRows);\r\n\r\n    this.Cells.forEach(x => x.UpdateData());\r\n\r\n    this.IsUpdateDataDone = true;\r\n  }\r\n\r\n  OnIsUpdateDataDone_Funcs = []\r\n\r\n  set IsUpdateDataDone(v) {\r\n    this.OnIsUpdateDataDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  HandleItem = (item, colFieldValue, mgc, initialRow) => {\r\n    var col =\r\n      this.GetColumn(mif.GetValueString(colFieldValue, this.ColumnField));\r\n    var rows = initialRow ? [initialRow] : [];\r\n    var mgc = mgc ? mgc : this.MainMGC;\r\n\r\n    this.HandleRowFieldIndex(item, col, rows, mgc, 0);\r\n  }\r\n\r\n  // Xử lý tạo Row với giá trị tương ứng và Cell bên trong\r\n  GetRow_Value_FieldIndex = (item, col, rows, val, mgc, rowFieldIndex) => {\r\n    var mgis = mgc.Items;\r\n    var itemCount = mgis.length;\r\n    var mgi = mgis[rowFieldIndex];\r\n\r\n    // Sup Row của dòng khối lượng đang xét\r\n    var lastRow = rows.length !== 0 ? rows[rows.length - 1] : undefined\r\n    // mgi.SupRow = lastRow;\r\n    mgi.AddSupRow(lastRow);\r\n\r\n    var rowField = mgi.Field;\r\n    if (!rowField) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var valueString = mif.GetValueString(val, rowField);\r\n    var fullValue = lastRow ? `${lastRow.FullValue}__${valueString}` : valueString;\r\n\r\n    if (mgi.NotIncludeValues.includes(fullValue)) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var row = undefined;\r\n    const addRow = (supRow) => {\r\n      return this.Handle_AddRow(fullValue, supRow);\r\n    }\r\n\r\n    const handleRow = (row) => {\r\n      // Gắn thông tin gốc vào Row\r\n      row.RawValue = valueString;\r\n      row.MassGroupItem = mgi;\r\n      rows.push(row);\r\n\r\n      var subMgcs = mgi.SubComponents;\r\n      var subIndex = subMgcs.findIndex(x =>\r\n        filterUtil.IsValid(x.Filter, fullValue));\r\n      if (subIndex !== -1) {\r\n        mgc = subMgcs[subIndex];\r\n        mgc.IsHaveMassItem = true;\r\n\r\n        rowFieldIndex = -1;\r\n        itemCount = mgc.Items.length;\r\n\r\n        row.SubMassGroupComponent = mgc;\r\n      }\r\n\r\n      var cell = this.GetCell(col, row);\r\n      cell.Items.push(item);\r\n\r\n      if (rowFieldIndex === itemCount - 1) {\r\n        this.AddHandledItems(item);\r\n      } else {\r\n        this.HandleRowFieldIndex(item, col, rows, mgc, rowFieldIndex + 1);\r\n      }\r\n    }\r\n\r\n    var mgiItem = mgi.GetItem(fullValue, valueString);\r\n    var replaceMgi = mgiItem.NewMGI;\r\n    if (replaceMgi) {\r\n      // Lấy thông tin SupName\r\n      var supName = mgiItem.SupValue;\r\n\r\n      // Thêm Value-Title cho MassGroupItem\r\n      replaceMgi.GetItem(fullValue, valueString);\r\n\r\n      // Đính thông tin OriginSupRow cũ\r\n      if (lastRow) {\r\n        lastRow.Is_Original_SupRow = true;\r\n      }\r\n\r\n      this.Handle_ReplaceMGI(replaceMgi, supName, addRow, handleRow, lastRow, item);\r\n    } else {\r\n      row = addRow(lastRow);\r\n      handleRow(row);\r\n    }\r\n  }\r\n\r\n  Handle_AddRow = (fullValue, supRow) => {\r\n    var r1 = this.GetRow(fullValue, supRow);\r\n    r1.FullValue = fullValue;\r\n    return r1;\r\n  }\r\n\r\n  Handle_ReplaceMGI = (replaceMgi, supName, addRow, handleRow, originalSupRow, massItem) => {\r\n    var isGet_SupRow_Done\r\n\r\n    // Lấy SupRow phù hợp có trong ReplaceMGI\r\n    const getSupRow = () => {\r\n      var list = replaceMgi.SupRows;\r\n      var index = list.findIndex(x => x.Name === supName);\r\n      if (index !== -1) {\r\n        isGet_SupRow_Done = true;\r\n        return list[index]\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    // Thêm Row vào SupRow\r\n    const awaitGetSupRowForAdd = (supRow) => {\r\n      var r2 = addRow(supRow);\r\n      r2.ReplaceMGI = replaceMgi;\r\n\r\n      return r2;\r\n    }\r\n\r\n    // Đính thông tin OriginSupRow\r\n    const setOriginal_SupRow = (row) => {\r\n      row.Original_SupRow = originalSupRow;\r\n      row.IsReplaced = true;\r\n    }\r\n\r\n    // Tổn hợp các Phương thức ở trên\r\n    const fullFunc = () => {\r\n      var sr = getSupRow();\r\n      if (sr) {\r\n        var r = awaitGetSupRowForAdd(sr);\r\n        setOriginal_SupRow(r);\r\n        handleRow(r);\r\n      }\r\n    }\r\n\r\n    fullFunc();\r\n    genUtil.Add_2(\r\n      replaceMgi.On_AddSupRow_Func_Dict,\r\n      () => {\r\n        if (!isGet_SupRow_Done && replaceMgi.NewRow?.Name === supName) {\r\n          fullFunc();\r\n        }\r\n      },\r\n      false);\r\n\r\n    // var row = undefined\r\n    // if (replaceMgi.IsFirstSetSupRow) {\r\n    //   row = awaitGetSupRowForAdd();\r\n    //   setOriginal_SupRow(row);\r\n    //   handleRow(row);\r\n    // } else {\r\n    //   replaceMgi.OnIsFirstSetSupRow_Funcs.push(() => {\r\n    //     row = awaitGetSupRowForAdd();\r\n    //     setOriginal_SupRow(row);\r\n    //     handleRow(row);\r\n    //   })\r\n    // }\r\n  }\r\n\r\n  HandleRowFieldIndex = (item, col, rows, mgc, rowFieldIndex) => {\r\n    var rowField = mgc.Items[rowFieldIndex].Field;\r\n\r\n    var val = item.GetValue(rowField, (val) =>\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex));\r\n    if (!Array.isArray(val)) {\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex);\r\n    }\r\n\r\n    // Lúc nào cũng có AsyncData\r\n    // else {\r\n    //   this.IsHaveAsyncData = true;\r\n    // }\r\n  }\r\n\r\n  // MassGroupInput\r\n  get Reference_MassGroupSetting_SelectVM() {\r\n    return this.Dict.Dict.ViewItem.MassGroupSettingSelectVM;\r\n  }\r\n\r\n  SaveMassGroup = () => {\r\n    // Init MassGroup StorageList\r\n    var refSelectVM = this.Reference_MassGroupSetting_SelectVM;\r\n    var obj = this.MassGroupSelectVM;\r\n    obj.Items = [...refSelectVM.Items];\r\n    obj.InitialItem = refSelectVM.SelectedItem;\r\n\r\n    this.MassGroupInput_State = mgi_st.select\r\n    this.IsOnSaveMassGroup = true;\r\n  }\r\n\r\n  MassGroupInput_State = undefined\r\n\r\n  Toggle_MassGroupInput_State = () => {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        this.MassGroupInput_State = mgi_st.input\r\n        break;\r\n      case mgi_st.input:\r\n        this.MassGroupInput_State = mgi_st.select\r\n        break;\r\n    }\r\n  }\r\n\r\n  get MassGroupInput_Toggle_Classname() {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        return 'btn-warning';\r\n      case mgi_st.input:\r\n        return 'btn-success';\r\n    }\r\n  }\r\n\r\n  get MassGroupInput_Toggle_Content() {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        return 'sel';\r\n      case mgi_st.input:\r\n        return 'inp';\r\n    }\r\n  }\r\n\r\n  massGroupName = undefined\r\n  get MassGroupName() {\r\n    if (!this.massGroupName) {\r\n      this.massGroupName = util.GetMassGroupName(this);\r\n    }\r\n    return this.massGroupName;\r\n  }\r\n  set MassGroupName(v) {\r\n    this.massGroupName = v;\r\n  }\r\n\r\n  massGroupNameVM\r\n  get MassGroupNameVM() {\r\n    if (!this.massGroupNameVM) {\r\n      var obj = this.massGroupNameVM =\r\n        textUtil.get(this.MassGroupName, 'Tên set khối lượng');\r\n      obj.onSetContent = (v) => this.MassGroupName = v;\r\n    }\r\n    return this.massGroupNameVM;\r\n  }\r\n\r\n  massGroupSelectVM\r\n  get MassGroupSelectVM() {\r\n    if (!this.massGroupSelectVM) {\r\n      var obj = this.massGroupSelectVM = selectUtil.get([], undefined);\r\n      obj.Placeholder = 'Bộ set khối lượng';\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.MassGroupName = v?.Name\r\n      };\r\n    }\r\n    return this.massGroupSelectVM;\r\n  }\r\n\r\n  get MassGroupInput_Element() {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        var obj = this.MassGroupSelectVM;\r\n        var list = obj.Items;\r\n        var index = list.findIndex(x => x.Name === this.MassGroupName);\r\n        obj.InitialItem = index !== -1 ?\r\n          list[index] : undefined\r\n        return <SelectView store={obj} />\r\n      case mgi_st.input:\r\n        var obj = this.MassGroupNameVM;\r\n        obj.Content = this.MassGroupName;\r\n        return <InputView store={obj} />\r\n    }\r\n  }\r\n\r\n  MassGroupInputOK = () => {\r\n    if (!this.MassGroupName || this.MassGroupName.length === 0) {\r\n      switch (this.MassGroupInput_State) {\r\n        case mgi_st.select:\r\n          message.warning('Vui lòng chọn bộ thiết lập!')\r\n          return;\r\n        case mgi_st.input:\r\n          message.warning('Vui lòng nhập tên thiết lập!')\r\n          return;\r\n      }\r\n    }\r\n\r\n    var needValidateForOveride = true;\r\n    var items = pmData().MassGroupSetting_Dict.Items;\r\n    var index = items.findIndex(x => x.Name === this.MassGroupName);\r\n    var _id = undefined;\r\n    if (index !== -1) {\r\n      _id = items[index]._id;\r\n\r\n      if (this.MassGroupInput_State === mgi_st.input) {\r\n        needValidateForOveride = false;\r\n      }\r\n    }\r\n\r\n    const handle_UpdateMassGroup = () => {\r\n      var apiData = {\r\n        _id,\r\n        name: this.MassGroupName,\r\n        settingType: st.massgroup,\r\n        data: {\r\n          massGroupComponent: this.MainMGC.ApiData\r\n        }\r\n      };\r\n\r\n      var url = `https://api.bimdev.vn/api/hbs/mg`;\r\n\r\n      var isNew = _id ? false : true;\r\n      var command = isNew ? 'add' : 'edit';\r\n      const apiFunc = () => !isNew ? api.put(`${url}/${command}`, apiData) :\r\n        api.post(`${url}/${command}`, apiData);\r\n\r\n      apiFunc().then(response => response.data)\r\n        .then(data => {\r\n          var refVM = this.Reference_MassGroupSetting_SelectVM\r\n\r\n          var dict = pmData().MassGroupSetting_Dict;\r\n          var item = mgsUtil.get(data, dict);\r\n          var dictVM = pmDataVM().MassGroupSetting_DictVM;\r\n          var itemVM = mgsVMUtil.get(item, dictVM);\r\n\r\n          if (isNew) {\r\n            dict.Items.push(item);\r\n            dictVM.Items.push(itemVM);\r\n\r\n            refVM.Items.push(itemVM);\r\n          } else {\r\n            dict.Items[index] = item;\r\n            dictVM.Items[index] = item;\r\n\r\n            refVM.Items[index] = itemVM;\r\n            // Refresh lại selected item nếu trùng với đối tượng update\r\n            if (refVM.SelectedIndex === index) {\r\n              refVM.InitialItem = itemVM;\r\n            }\r\n          }\r\n\r\n          message.success(`${command} massgroup successfully`);\r\n        })\r\n\r\n      this.IsOnSaveMassGroup = false;\r\n      this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n    }\r\n\r\n    if (needValidateForOveride) {\r\n      handle_UpdateMassGroup();\r\n    } else {\r\n      this.Override_MassGroup_Modal_OKFunc =\r\n        () => handle_UpdateMassGroup();\r\n\r\n      this.Is_Override_MassGroup_Modal_Open = true;\r\n    }\r\n  }\r\n\r\n  Is_Override_MassGroup_Modal_Open = false\r\n\r\n  get Override_MassGroup_ModalElement() {\r\n    var title = 'Cảnh báo'\r\n    var content = 'Thiết lập đã có sẵn, bạn có muốn ghi đè không?'\r\n\r\n    const modalCancel = () =>\r\n      this.Is_Override_MassGroup_Modal_Open = false\r\n\r\n    const modalOK = () => {\r\n      this.Is_Override_MassGroup_Modal_Open = false\r\n      this.Override_MassGroup_Modal_OKFunc();\r\n    }\r\n\r\n    return <Modal title={title}\r\n      visible={this.Is_Override_MassGroup_Modal_Open}\r\n      onOk={modalOK} onCancel={modalCancel}>\r\n      {content}\r\n    </Modal>\r\n  }\r\n\r\n  MassGroupInputCancel = () => {\r\n    this.IsOnSaveMassGroup = false;\r\n    this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n  }\r\n\r\n  AddMainRow = () => {\r\n    return rowUtil.Add(undefined, this);\r\n  }\r\n\r\n  // Excel Export\r\n  get ExportTitle() {\r\n    var text = pmData().CurrentProject?.Name;\r\n    text = text ? text + '_' : '';\r\n\r\n    if (this.ColumnField === mif.Phase) {\r\n      text += 'phase_'\r\n    }\r\n\r\n    const formatedDate = dayjs(Date.now()).format(\"YYMMDD\");\r\n    text += `masstable_${formatedDate}`\r\n    return text;\r\n  }\r\n\r\n  get ExcelWorkbook() {\r\n    return wbUtil.get(this).ResultData;\r\n  }\r\n\r\n  excelExport\r\n  get ExcelExport() {\r\n    if (!this.excelExport) {\r\n      this.excelExport = eeUtil.get(\r\n        undefined, undefined,\r\n        () => this.ExportTitle,\r\n        () => this.ExcelWorkbook);\r\n    }\r\n    return this.excelExport;\r\n  }\r\n\r\n  Export = () => {\r\n    this.ExcelExport.Export();\r\n  }\r\n\r\n  // Lưu trữ các Row tạo bởi người dùng\r\n  // Trước mặt dùng để xử lý lỗi không update TotalValue\r\n  // trong lần đầu tiên truy xuất bảng khối lượng\r\n  CreatedByUser_Rows\r\n  Handled_CreatedByUser_Rows\r\n\r\n  Add_Handled_CreatedByUser_Row = (row) => {\r\n    this.Handled_CreatedByUser_Rows.push(row);\r\n\r\n    if (this.CreatedByUser_Rows.length === this.Handled_CreatedByUser_Rows.length) {\r\n      // Xử lý TotalValue thành công với tất cả các CreatedByUser_Row\r\n    }\r\n  }\r\n}","import MassColumn from \"./MassColumn\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassColumn();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import {ExcelExport} from './ExcelExport'\r\n\r\nexport const get = (fileName, wb, ovrgFileName, ovrgWb) => {\r\n  var qI = new ExcelExport();\r\n\r\n  qI.FileName = fileName;\r\n  qI.Override_Get_FileName = ovrgFileName;\r\n  qI.Workbook = wb;\r\n  qI.Override_Get_Workbook = ovrgWb;\r\n\r\n  return qI;\r\n}","import MassTable from \"../table/MassTable\";\r\nimport * as util from './MassItem_DictUtil'\r\n\r\nexport default class MassItem_Dict {\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n    this.MassTable.Items = v;\r\n  }\r\n\r\n  massTable\r\n  get MassTable() {\r\n    if (!this.massTable) {\r\n      this.massTable = util.GetMassTable(this);\r\n    }\r\n    return this.massTable;\r\n  }\r\n\r\n  set MassGroupSetting(v)  {\r\n    this.MassTable.MassGroupSetting = v;\r\n  }\r\n}","import MassTable from \"../table/MassTable\";\r\n\r\n// Property\r\nexport const GetMassTable = (q) => {\r\n  var qI = new MassTable();\r\n  qI.Dict = q;\r\n\r\n  return qI;\r\n}","import MassItem_Dict from '../item/MassItem_Dict';\r\nimport * as util from './MassResultCompUtil'\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as mif from '../item/MassItemField'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassResultComp {\r\n  Projects = []\r\n\r\n  Phases = []\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict(){\r\n    if (!this.massItem_Dict){\r\n      this.massItem_Dict = util.GetMassItem_Dict(this);\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  isHavePhase = false\r\n  get IsHavePhase(){\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v){\r\n    this.isHavePhase = v;\r\n    if (v){\r\n    this.MassItem_Dict.MassTable.ColumnField = mif.Phase\r\n    }else{\r\n      this.MassItem_Dict.MassTable.ColumnField = mif.Project\r\n    }\r\n  }\r\n\r\n  GetMassData = () => {\r\n     // Gắn thông tin truy xuất lần đầu hay không\r\n     if (pmData().Is_First_Get_MassTable === undefined){\r\n      // undefined => truy xuất lần đầu\r\n      pmData().Is_First_Get_MassTable = true;\r\n    } else {\r\n      // có giá trị => không phải lần đầu\r\n      pmData().Is_First_Get_MassTable = false;\r\n    }\r\n    \r\n    var wp_Dict = pmData().Workpackage_Dict;\r\n    if (wp_Dict.IsDataChanged){\r\n      wp_Dict.RefreshData();\r\n    }\r\n\r\n    massItemUtil.getAll(this.ApiData, (items) => {\r\n      var dict = this.MassItem_Dict;\r\n\r\n      dict.MassGroupSetting = this.MassGroupSetting ? \r\n        this.MassGroupSetting : undefined;\r\n      dict.Items = items;\r\n      \r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n}","import MassItem_Dict from \"../item/MassItem_Dict\"\r\n\r\n\r\n//\r\nexport const GetMassItem_Dict = (q) => {\r\n  var qI = new MassItem_Dict();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n// Method\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    projectIds : q.Projects.map(x => x._id),\r\n    phaseIds : q.IsHavePhase ? q.Phases.map(x => x._id) : undefined\r\n  }\r\n}","import { Button, message, Space, Tag } from \"antd\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport TableVM from \"../../../../table/TableVM\";\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new RebarMass_Dict();\r\n  qI.Project = project;\r\n\r\n  var projectId = qI.projectId;\r\n  massItemUtil.getRebars(projectId, (items) => {\r\n    qI.Items = items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n  qI.Columns = [\r\n    colUtil.get('Tên cấu kiện', ['Info', 'elementName'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.elementName)\r\n      ], qI),\r\n\r\n    colUtil.get('Hạng mục', ['Info', 'workItem'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.workItem)\r\n      ], qI),\r\n\r\n    colUtil.get('Đường kính', ['Info', 'diameter'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.diameter)\r\n      ], qI),\r\n\r\n    colUtil.get('Khối lượng', ['Value'], null, qI),\r\n\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return massItemUtil.GetDefaultRebarMass(q.Project);\r\n  }\r\n\r\n  qI.OnEditItem = (item) => {\r\n    item.AddDatabase();\r\n  }\r\n\r\n  qI.OnDeleteItem = (item) => {\r\n    item.DeleteDatabase();\r\n  }\r\n\r\n  return qI;\r\n}","export const m = \"m\";\r\nexport const m2 = \"m2\";\r\nexport const m3 = \"m3\";\r\nexport const kg = \"kg\";","import * as util from './RebarMass_DictUtil'\r\n\r\nexport default class RebarMass_Dict {\r\n  project\r\n  get Project(){\r\n    return this.project;\r\n  }\r\n  set Project(v){\r\n    this.project = v;\r\n    this.projectId = v._id;\r\n  }\r\n\r\n  projectId\r\n\r\n  items = []\r\n  get Items(){\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.TableVM.DataSource = v;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM){\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './LevelGroupUtil'\r\n\r\nexport class LevelGroup {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.LevelGroups.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      levels : this.Levels ? this.Levels : [],\r\n      primary: this.Primary\r\n    }\r\n  }\r\n\r\n  get Count(){\r\n    return this.Levels.length\r\n  }\r\n\r\n\r\n  OnGetLevelStorageList_Func_Dict = []\r\n  get GetLevelStorageList(){\r\n    return this.getLevelStorageList;\r\n  }\r\n  set GetLevelStorageList(v){\r\n    this.getLevelStorageList = v;\r\n    this.OnGetLevelStorageList_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  IsGet_LevelStorageList\r\n\r\n  get LevelStorageList (){\r\n    var obj = this.Dict.LevelStorageList;\r\n    if (!obj && !this.IsGet_LevelStorageList){\r\n      this.IsGet_LevelStorageList = true;\r\n      this.Setting.OnGetLevelStorageList_Funcs.push(() => {\r\n        this.GetLevelStorageList = true\r\n      });\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Setting (){\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  get LevelIndexs(){\r\n    return this.Levels.map(x => this.LevelStorageList.indexOf(x));\r\n  }\r\n\r\n  get MinLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.min.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get MaxLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.max.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get Description(){\r\n    if (!this.LevelStorageList) return undefined;\r\n    return `Typ: ${this.MinLevel} - ${this.MaxLevel} (${this.Count})`;\r\n  }\r\n\r\n  get FullDescription() {\r\n    if (!this.Description) return undefined;\r\n    return `${this.Dict.FilterDescription} (${this.Description})`;\r\n  }\r\n\r\n  primary\r\n  get Primary(){\r\n    if (!this.primary){\r\n      this.primary = util.GetDefaultPrimary(this);\r\n    }\r\n    return this.primary\r\n  } set Primary(v){\r\n    this.primary = v;\r\n  }\r\n}","import { LevelGroup } from \"./LevelGroup\"\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new LevelGroup();\r\n\r\n  if (Array.isArray(data)) {\r\n    qI.Levels = data;\r\n  } else {\r\n    qI.Levels = data.levels;\r\n    qI.Primary = data.primary\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LevelGroup();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as it from './TLS_FilterValue_InputType'\r\n\r\nexport class TLS_FilterValue {\r\n  Value = undefined\r\n  InputType = it.select\r\n\r\n  get ApiData(){\r\n    return {\r\n      value: this.Value,\r\n      inputType : this.InputType\r\n    }\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { TLS_FilterValue } from './TLS_FilterValue';\r\n\r\nexport class TLS_Filter {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  //Values = [ 'Cột' ]\r\n  get Values(){\r\n    return this.Items.filter(x => x.Value).map(x => x.Value);\r\n  }\r\n\r\n  Items = []\r\n\r\n  AddItem = () => {\r\n    var item = new TLS_FilterValue();\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  field\r\n  get Field(){\r\n    if (!this.field){\r\n      this.field = this.FieldStorageList[0]\r\n    }\r\n    return this.field;\r\n  } set Field(v){\r\n    this.field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      field : this.Field,\r\n      items : this.Items.filter(x => x.Value).map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Description() {\r\n    var obj =  this.Values.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += ', ';\r\n      }\r\n      a += b;\r\n      return a;\r\n    }, '')\r\n\r\n    return `${this.Field}: ${obj}`;\r\n  }\r\n}","import { TLS_Filter } from \"./TLS_Filter\";\r\nimport { TLS_FilterValue } from \"./TLS_FilterValue\";\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Field = data.field;\r\n\r\n  if (data.items){\r\n    qI.Items = data.items.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x.value;\r\n      obj.InputType = x.inputType\r\n      return obj;\r\n    })\r\n  } else {\r\n    qI.Items = data.values.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x;\r\n      return obj;\r\n    })\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\nimport * as util from './TLS_PageItemUtil'\r\n\r\nexport class TLS_PageItem {\r\n  _id\r\n  get id(){\r\n    if (!this._id){\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  Name = 'tên setting'\r\n\r\n  get Index (){\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.PageItems.splice(this.Index, 1);\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  // Level Groups\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups\r\n  get LevelGroups(){\r\n    if (!this.levelGroups){\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  } set LevelGroups(v){\r\n    this.levelGroups = v;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.GetDefault(this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  filters\r\n  get Filters(){\r\n    if (!this.filters){\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  } set Filters(v){\r\n    this.filters = v;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.GetDefault(this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n\r\n  get FilterDescription() {\r\n    var obj = this.Filters.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += '; ';\r\n      }\r\n      a += b.Description;\r\n      return a;\r\n    }, '')\r\n    return obj;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      levelGroups : this.LevelGroups.map(x => x.ApiData).filter(x => x.levels.length !== 0),\r\n      filters : this.Filters.map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n}","import { TLS_PageItem } from \"./TLS_PageItem\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = data.name;\r\n  qI.Filters = data.filters.map(x => filterUtil.get(x, qI));\r\n  qI.LevelGroups = data.levelGroups ? data.levelGroups.map(x => levelGroupUtil.get(x, qI))\r\n     : data.levels.map(x => levelGroupUtil.get(x, qI))\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = 'setting 1';\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetLevelGroups = (q) => {\r\n  return [ levelGroupUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return [ filterUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport class TypicalLevelSettingData {\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n  \r\n  // Page Item\r\n  pageItems\r\n  get PageItems(){\r\n    if (!this.pageItems){\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  } set PageItems(v){\r\n    this.pageItems = v;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.GetDefault(this);\r\n    this.PageItems.push(item);\r\n    item.Name = `setting ${item.Index +1}`\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      pageItems : this.PageItems.map(x => x.ApiData)\r\n    }\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSettingData } from './TypicalLevelSettingData';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.PageItems = data.pageItems.map(x => pageItemUtil.get(x, qI));\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return [ pageItemUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingUtil'\r\n\r\nexport class TypicalLevelSetting extends Setting {\r\n  fieldFilterStorageList\r\n  get FieldFilterStorageList(){\r\n    if (!this.fieldFilterStorageList){\r\n      this.fieldFilterStorageList = util.GetFieldFilterStorageList();\r\n    }\r\n    return this.fieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    util.SaveDatabase(this)\r\n  }\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n    this.GetLevelStorageList = true;\r\n  }\r\n\r\n  OnGetLevelStorageList_Funcs = []\r\n\r\n  set GetLevelStorageList(v){\r\n    this.OnGetLevelStorageList_Funcs.forEach(x => x());\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './TypicalLevelSettingDataUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSetting } from './TypicalLevelSetting';\r\nimport * as st from '../base/SettingType'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\nimport { message } from 'antd';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (data, project, phase) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.SettingType = data.settingType;\r\n  qI.Data = dataUtil.get(data.data, qI);\r\n  qI.Project = project;\r\n  qI.Phase = phase;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (project) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI.Name = 'thiết lập ...';\r\n  qI.Description = 'Mô tả thiết lập ...';\r\n  qI.SettingType = st.typicallevel\r\n  qI.Data = dataUtil.GetTest(qI);\r\n  qI.Project = project;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFromDb_Async = (project, phase, handle) => {\r\n  var apiData = {\r\n    projectId: project._id,\r\n    phaseId: phase?._id\r\n  }\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  const apiFunc = () => api.post(`${url}/get`, apiData)\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      var resData = data ? get(data, project, phase) : undefined;\r\n      var editData = resData ? resData : GetTest(project);\r\n      handle(resData, editData);\r\n    })\r\n}\r\n\r\n// Property\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}\r\n\r\n// Method\r\nexport const SaveDatabase = (q) => {\r\n  var _id = q._id;\r\n  var apiData = q.ApiData;\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  var isNew = _id ? true : false\r\n  const apiFunc = () => isNew ?\r\n    api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew) q._id = data._id\r\n      message.success('add setting successfully!');\r\n    })\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  var level_Dict = q.Project.Level_Dict;\r\n\r\n  const getLevelsFunc = (items) => {\r\n    return items.map(x => x.Name);\r\n  }\r\n\r\n  if (level_Dict.Items) {\r\n    return getLevelsFunc(level_Dict.Items);\r\n  } else {\r\n    level_Dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.LevelStorageList = getLevelsFunc(level_Dict.Items);\r\n    });\r\n  }\r\n}\r\n","import * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\nexport default class Phase {\r\n  exportSetVersions\r\n  get ExportSetVersions(){\r\n    return this.exportSetVersions;\r\n  }\r\n  set ExportSetVersions(v){\r\n    this.exportSetVersions = v;\r\n    this.exportSetVersionIds = v.map(x => x._id);\r\n  }\r\n\r\n  OnGetExportSetVersions_Func = [];\r\n\r\n  set GetExportSetVersions(v){\r\n    this.OnGetExportSetVersions_Func.forEach(x => x());\r\n  }\r\n\r\n  exportSetVersionIds\r\n\r\n  get Project(){\r\n    return this.Dict.Dict;\r\n  }\r\n\r\n  OnGetTypicalLevelSetting_Funcs = []\r\n\r\n  set GetTypicalLevelSetting(v) {\r\n    this.OnGetTypicalLevelSetting_Funcs.forEach(x => x());\r\n  }\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this.Project, this, \r\n          (resData, editData) => {\r\n          this.TypicalLevelSetting = resData;\r\n          this.GetTypicalLevelSetting = true\r\n        })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport Phase from './Phase';\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Phase();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.Dict = dict;\r\n\r\n  GetExportSetVersionData(q._id, (data) => {\r\n    qI.ExportSetVersions = data;\r\n    qI.GetExportSetVersions = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbphase/list?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}\r\n\r\nexport const GetExportSetVersionData = (phaseId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/byphase?phaseId=${phaseId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}","import { message } from 'antd';\r\nimport * as util from './Phase_DictUtil'\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as itemUtil from './PhaseUtil'\r\nimport * as settingUtil from '../setting/base/SettingUtil'\r\n\r\nexport class Phase_Dict {\r\n  get Project() {\r\n    return this.Dict;\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n  \r\n  AddMassVersion = () => {\r\n    var apiData = this.Input.ApiData;\r\n    var url = `https://api.bimdev.vn/api/hbphase`;\r\n\r\n    const apiFunc = () => api.put(`${url}/mass/add`, apiData);\r\n    var project = this.Project;\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        var item = itemUtil.get(data, this);\r\n        this.Add(item);\r\n        message.success(\"create version successfully!\");\r\n\r\n        settingUtil.AddPhase(project._id, data._id);\r\n      })\r\n\r\n    // Thêm version mới cho InputExportSet sau khi lưu version\r\n    var addVersionFunc = (exportSet) => exportSet.AddVersion();\r\n\r\n    var inputExportSet = project.InputExportSet;\r\n    if (!inputExportSet){\r\n      project.OnGetInputExportSetDone_Funcs.push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        addVersionFunc(inputExportSet);\r\n      })\r\n    }else{\r\n      addVersionFunc(inputExportSet);\r\n    }\r\n  }\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport const AddPhase = (projectId, phaseId) => {\r\n  var apiData = {\r\n    projectId, phaseId\r\n  }\r\n  var url = `https://api.bimdev.vn/api/hbs`;\r\n\r\n  const apiFunc = () => api.post(`${url}/addphase`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      message.success(\"attach phase to settings successfully!\");\r\n    })\r\n}","export default class PhaseInput {\r\n  get ApiData(){\r\n    var projectId = this.Dict.Dict._id;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n\r\n    return {\r\n      projectId, name, description\r\n    }\r\n  }\r\n}","import { Phase_Dict } from \"./Phase_Dict\";\r\nimport * as phaseUtil from './PhaseUtil'\r\nimport * as inputUtil from './PhaseInputUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Phase_Dict();\r\n  qI.Dict = project;\r\n\r\n  phaseUtil.getByProject(project._id, (data) => {\r\n    qI.Items = data.map(x => phaseUtil.get(x, qI));\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputUtil.get(q);\r\n}","import PhaseInput from './PhaseInput';\r\n\r\nexport const get = (dict) => {\r\n  var qI = new PhaseInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Version 1';\r\n  qI.Description = 'mô tả phiên bản';\r\n\r\n  return qI;\r\n}","import RebarMass_Dict from '../mass/rebar/RebarMass_Dict';\r\nimport * as phaseDictUtil from '../phase/Phase_DictUtil'\r\nimport * as util from './ProjectUtil'\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\n\r\nexport default class Project {\r\n  phase_Dict\r\n  get Phase_Dict() {\r\n    if (!this.phase_Dict) {\r\n      this.phase_Dict = phaseDictUtil.get(this);\r\n    }\r\n    return this.phase_Dict;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = util.GetRebarMass_Dict(this);\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  inputExportSet\r\n  get InputExportSet() {\r\n    if (!this.inputExportSet) {\r\n      util.GetInputExportSet_Async(this);\r\n    }\r\n    return this.inputExportSet;\r\n  }\r\n  set InputExportSet(v) {\r\n    this.inputExportSet = v;\r\n    this.GetInputExportSetDone = true;\r\n  }\r\n\r\n  OnGetInputExportSetDone_Funcs = []\r\n\r\n  getInputExportSetDone\r\n  get GetInputExportSetDone() {\r\n    return this.getInputExportSetDone;\r\n  }\r\n  set GetInputExportSetDone(v) {\r\n    this.getInputExportSetDone = v;\r\n    this.OnGetInputExportSetDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  // Level\r\n  // Old Version\r\n  level_Dict\r\n  get Level_Dict() {\r\n    if (!this.level_Dict) {\r\n      this.level_Dict = util.GetLevel_Dict(this);\r\n    }\r\n    return this.level_Dict;\r\n  }\r\n\r\n  // LevelSetting\r\n  OnSet_LevelSetting_Func_Dict = []\r\n\r\n  levelSetting\r\n  get LevelSetting() {\r\n    if (!this.levelSetting) {\r\n      util.Handle_LevelSetting(this)\r\n    }\r\n    return this.levelSetting\r\n  } set LevelSetting(v) {\r\n    this.levelSetting = v;\r\n\r\n    genUtil.Handle(\r\n      this.OnSet_LevelSetting_Func_Dict,\r\n      (v) => this.OnSet_LevelSetting_Func_Dict = v)\r\n  }\r\n\r\n  // TypicalLevelSetting\r\n  OnGetTypicalLevelSetting_Funcs = []\r\n\r\n  set GetTypicalLevelSetting(v) {\r\n    this.OnGetTypicalLevelSetting_Funcs.forEach(x => x());\r\n  }\r\n\r\n  IsOnGetDb_Async\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this, null,\r\n          (resData, editData) => {\r\n            this.TypicalLevelSetting = resData;\r\n            this.TypicalLevelSetting_ForEdit = editData;\r\n            this.GetTypicalLevelSetting = true\r\n          })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = this.TypicalLevelSetting;\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  url\r\n  get Url() {\r\n    if (!this.url) {\r\n      var isHash = true;\r\n      var obj = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/project`;\r\n      obj = `${obj}/${this._id}`;\r\n\r\n      this.url = obj;\r\n    }\r\n    return this.url;\r\n  }\r\n}","import * as util from './ExportSetUtil'\r\n\r\nexport class ExportSet {\r\n  currentVersion\r\n  get CurrentVersion(){\r\n    if (!this.currentVersion){\r\n      util.GetCurrentVersion_Async(this);\r\n    }\r\n    return this.currentVersion;\r\n  }\r\n  set CurrentVersion(v){\r\n    this.currentVersion = v;\r\n    this.GetCurrentVersionDone = v;\r\n  }\r\n\r\n  OnGetCurrentVersionDone_Func =[]\r\n\r\n  set GetCurrentVersionDone(v){\r\n    this.OnGetCurrentVersionDone_Func.forEach(x => x());\r\n  }\r\n\r\n  AddVersion = () => {\r\n    util.AddVersion_Async(this);\r\n  }\r\n}","export class ExportSetVersion {\r\n  \r\n}","import * as api from  '../../../../util/apiUtil'\r\nimport { ExportSetVersion } from \"./ExportSetVersion\";\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSetVersion();\r\n  qI._id = data._id;\r\n  return qI;\r\n}\r\n\r\nexport const getLastestByExportSet = (exportSetId, handle) => {\r\n  if (!exportSetId) return;\r\n  var url = `https://api.bimdev.vn/api/hbesv/last?exportSetId=${exportSetId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","import { ExportSet } from \"./ExportSet\"\r\nimport * as api from  '../../../../util/apiUtil'\r\nimport * as versionUtil from './ExportSetVersionUtil'\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSet();\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.RetrieveFrom = data.retrieveFrom;\r\n  return qI;\r\n}\r\n\r\nexport const GetCurrentVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  versionUtil.getLastestByExportSet(exportSetId, (item) => {\r\n    if (!item) {\r\n      AddVersion_Async(q);\r\n    } else {\r\n      q.CurrentVersion = item;\r\n    }\r\n  })\r\n}\r\n\r\nexport const AddVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  var apiData = {\r\n    exportSetId\r\n  }\r\n\r\n  versionUtil.add(apiData, (addItem) => {\r\n    q.CurrentVersion = addItem;\r\n  })\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbes/input?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbes/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","export class Level_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","export class Level\r\n{\r\n  Name\r\n  Elevation\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { Level } from \"./Level\"\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new Level();\r\n  qI.Name = data.name;\r\n  qI.Elevation = data.elevation;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (apiData, dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbl/list\";\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      if (!data) data = []\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './LS_ItemUtil'\r\n\r\nexport class LS_Item {\r\n  _id\r\n\r\n  tempId\r\n  get TempId(){\r\n    if (!this.tempId){\r\n      this.tempId = genUtil.newGUID();\r\n    }\r\n    return this.tempId;\r\n  }\r\n\r\n  get id() {\r\n    return this._id ? this._id : this.TempId;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n\r\n  // Data\r\n  Name = ''\r\n\r\n  Values = []\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      values: this.Values\r\n    }\r\n    return obj;\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './LevelSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport * as itemUtil from './item/LS_ItemUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class LevelSettingData {\r\n  // Items\r\n  Items = []\r\n\r\n  AddItem = () => {\r\n    var item = itemUtil.GetDefault(this);\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      items : this.Items.map(x => x.ApiData)\r\n    }\r\n  }\r\n}","import { LS_Item } from \"./LS_Item\"\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new LS_Item();\r\n\r\n  qI.Name = data.name;\r\n  qI.Values = data.Values\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LS_Item();\r\n\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\n","export const url = 'https://api.bimdev.vn/api/hbs/lv'","import Setting from \"../base/Setting\";\r\nimport { url } from './LevelSetting_Url'\r\nimport * as st from '../base/SettingType'\r\n\r\nexport class LevelSetting extends Setting {\r\n  SettingType = st.level\r\n\r\n  Url = url\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './LevelSettingDataUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport { LevelSetting } from './LevelSetting';\r\nimport { message } from 'antd';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const GetFromDb = (data, project, phase) => {\r\n  var qI = new LevelSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.Data = dataUtil.GetFromDb(data.data, qI);\r\n  qI.Project = project;\r\n  qI.Phase = phase;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (project) => {\r\n  var qI = new LevelSetting();\r\n\r\n  qI.Name = 'thiết lập level';\r\n  qI.Description = 'Mô tả thiết lập';\r\n  qI.Data = dataUtil.GetDefault(qI);\r\n  qI.Project = project;\r\n\r\n  return qI;\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport { LevelSettingData } from './LevelSettingData';\r\nimport * as itemUtil from './item/LS_ItemUtil';\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const GetFromDb = (data, dict) => {\r\n  var qI = new LevelSettingData();\r\n  \r\n  qI.Items = data.items.map(x => itemUtil.GetFromDb(x, qI));\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LevelSettingData();\r\n\r\n  qI.Items = []\r\n\r\n  return qI;\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\nimport Project from './Project';\r\nimport * as rebarMassDictUtil from '../mass/rebar/RebarMass_DictUtil'\r\nimport * as exportSetUtil from '../exportset/ExportSetUtil'\r\nimport * as vrf from '../value/ValueRetrieveFrom'\r\nimport * as levelDictUtil from '../level/Level_DictUtil'\r\nimport * as levelTypicalUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\nimport * as levelUtil from '../setting/level/LevelSettingUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Project();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Code = q.code;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getById = (_id, handle) => {\r\n  if (!_id) return undefined;\r\n  var url = `https://api.bimdev.vn/api/hbp/get?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      if (handle) {\r\n        handle(item);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetRebarMass_Dict = (q) => {\r\n  return rebarMassDictUtil.get(q);\r\n}\r\n\r\nexport const GetInputExportSet_Async = (q) => {\r\n  var projectId = q._id;\r\n\r\n  exportSetUtil.getByProject(projectId, (item) => {\r\n    if (!item) {\r\n      var apiData = {\r\n        projectId,\r\n        name: 'Dữ liệu khối lượng input',\r\n        description: 'mô tả dữ liệu',\r\n        retrieveFrom: vrf.input\r\n      }\r\n      exportSetUtil.add(apiData, (addItem) => {\r\n        q.InputExportSet = addItem;\r\n      })\r\n    } else {\r\n      q.InputExportSet = item;\r\n    }\r\n  })\r\n}\r\n\r\n// Old Version\r\nexport const GetLevel_Dict = (q) => {\r\n  return levelDictUtil.get(q)\r\n}\r\n\r\n// LevelSetting\r\nexport const Handle_LevelSetting = (q) => {\r\n  if (q.IsGet_LevelSetting) return undefined\r\n  q.IsGet_LevelSetting = true;\r\n\r\n  q.LevelSetting = levelUtil.GetDefault(q);\r\n}\r\n\r\n// TypicalLevelSetting\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  return levelTypicalUtil.GetTest(q);\r\n}","export const model = \"model\";\r\nexport const input = \"input\";","import { Level_Dict } from \"./Level_Dict\"\r\nimport * as itemUtil from './LevelUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Level_Dict();\r\n  qI.Project = project;\r\n\r\n  itemUtil.getAll({ projectId : project._id }, qI, (items) => {\r\n    qI.Items = items.sort((a,b) => a.Elevation - b.Elevation);\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ProjectUtil'\r\n\r\nexport class Project_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class ElementFilterSetting extends Setting {\r\n  \r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './ElementFilterSettingDataUtil'\r\n\r\nexport default class ElementFilterSettingData {\r\n  CategoryFilter\r\n\r\n  IsHaveFamilyFilter\r\n\r\n  FamilyFilter\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport ElementFilterSettingData from './ElementFilterSettingData';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as fct from '../../filter/FilterCategoryType'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingData();\r\n  qI.CategoryFilter = filterUtil.get(q.categoryFilter);\r\n  return qI;\r\n}\r\n\r\nexport const getDefault = () => {\r\n  var qI = new ElementFilterSettingData();\r\n\r\n  var cateFilter = new EntFilter();\r\n  cateFilter.CategoryType = fct.category;\r\n  cateFilter.ValueType = fvt.bystring;\r\n  cateFilter.StringFilterType = sft.byequal;\r\n  cateFilter.Values = ['Floors'];\r\n  qI.CategoryFilter = cateFilter;\r\n\r\n  qI.IsHaveFamilyFilter = false;\r\n\r\n  var familyFilter = new EntFilter();\r\n  familyFilter.CategoryType = fct.family;\r\n  familyFilter.ValueType = fvt.bystring;\r\n  familyFilter.StringFilterType = sft.byequal;\r\n  familyFilter.Values = [];\r\n  qI.FamilyFilter = familyFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    categoryFilter : q.CategoryFilter.ApiData,\r\n    familyFilter : q.IsHaveFamilyFilter ? \r\n      q.FamilyFilter.ApiData : undefined\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport ElementFilterSetting from \"./ElementFilterSetting\"\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/ef/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as util from './SettingInputUtil'\r\n\r\nexport default class SettingInput {\r\n  Name\r\n  Description\r\n  SettingType\r\n\r\n  data\r\n  get Data() {\r\n    if (!this.data) {\r\n      this.data = this.GetData();\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n  }\r\n\r\n  GetData = () => {\r\n    if (this.OnGetData) {\r\n      return this.OnGetData();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem(){\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v){\r\n    this.editItem = v;\r\n    if (!v){\r\n      this.EditItemId = undefined;\r\n    }\r\n    else{\r\n      this.EditItemId = v._id;\r\n    }\r\n  }\r\n\r\n\r\n  EditItemId\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.EditItem = undefined;\r\n    }\r\n  }\r\n\r\n  urlPrefix\r\n  get UrlPrefix() {\r\n    if (!this.urlPrefix){\r\n      this.urlPrefix = util.GetUrlPrefix(this);\r\n    }\r\n    return this.urlPrefix;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.EditItemId;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var settingType = this.SettingType;\r\n    var data = this.Data.ApiData;\r\n    var prefix = this.UrlPrefix;\r\n\r\n    var apiData = {\r\n      _id, name, description, settingType, data\r\n    }\r\n    var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewItem = this.GetEditItem(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n}","import * as st from './SettingType'\r\n\r\nexport const GetUrlPrefix = (q) => {\r\n  var prefix = undefined\r\n  switch (q.SettingType) {\r\n    case st.elementfilter:\r\n      prefix = 'ef';\r\n      break;\r\n    case st.massexport:\r\n      prefix = 'me';\r\n      break;\r\n    case st.massgroup:\r\n      prefix = 'mg';\r\n      break;\r\n  }\r\n  return prefix;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as elementFilterSettingUtil from './ElementFilterSettingUtil'\r\n\r\nexport default class ElementFilterSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return elementFilterSettingUtil.get(data, dict);\r\n  }\r\n}","import ElementFilterSettingInput from \"./ElementFilterSettingInput\";\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new ElementFilterSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bộ lọc cột';\r\n  qI.Description = 'mô tả bộ lọc';\r\n  qI.SettingType = st.elementfilter;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.getDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ElementFilterSettingUtil'\r\nimport * as inputUtil from './ElementFilterSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class ElementFilterSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassExportSettingDataUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\nimport { reaction } from \"mobx\";\r\n\r\nexport default class MassExportSettingData {\r\n  elementFilterId\r\n\r\n  elementFilter\r\n  get ElementFilter(){\r\n    if (!this.elementFilter){\r\n      this.elementFilter = util.GetElementFilter(this);\r\n    }\r\n    return this.elementFilter;\r\n  }\r\n  set ElementFilter(v) {\r\n    this.elementFilter = v;\r\n    if (!v){\r\n      this.elementFilterId = undefined;\r\n    }\r\n    else{\r\n      this.elementFilterId = v._id;\r\n    }\r\n  }\r\n\r\n  valueSettings\r\n  get ValueSettings(){\r\n    if (!this.valueSettings){\r\n      this.valueSettings = util.GetDefaultValueSettings(this);\r\n    }\r\n    return this.valueSettings;\r\n  }\r\n  set ValueSettings(v){\r\n    this.valueSettings = v;\r\n  }\r\n\r\n  AddNewValueSetting = () => {\r\n    var modelList = this.ValueSettings;\r\n    var item = valueSettingUtil.GetDefault(this);\r\n    modelList.push(item);\r\n\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassExportSettingData from './MassExportSettingData';\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingData();\r\n  qI.elementFilterId = q.elementFilterId;\r\n  qI.ValueSettings = q.exportSettings.map(x => valueSettingUtil.get(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassExportSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilter = (q) => {\r\n  var elemFilterId = q.elementFilterId;\r\n  if (!elemFilterId) return undefined;\r\n\r\n  var list = pmData().ElementFilterSetting_Dict.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === elemFilterId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetDefaultValueSettings = (q) => {\r\n  return [ valueSettingUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    elementFilterId : q.elementFilterId,\r\n    exportSettings : q.ValueSettings.map(x => x.ApiData)\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassExportSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSetting from './MassExportSetting';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/me/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as massExportSettingUtil from './MassExportSettingUtil'\r\n\r\nexport default class MassExportSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return massExportSettingUtil.get(data, dict);\r\n  }\r\n}","import * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSettingInput from \"./MassExportSettingInput\";\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new MassExportSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bêtông sàn';\r\n  qI.Description = 'mô tả thiết lập';\r\n  qI.SettingType = st.massexport;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.GetDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './MassExportSettingUtil'\r\nimport * as inputUtil from './MassExportSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassExportSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import * as itemUtil from './MassGroupSettingUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassGroupSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n}","\r\nexport default class VCS_Item{\r\n  Color\r\n  Filter\r\n}","import * as util from './VersionCompareSettingUtil'\r\n\r\nexport default class VersionCompareSetting{\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems();\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as nft from '../../filter/NumberFilterType'\r\nimport VCS_Item from \"./VCS_Item\";\r\n\r\nexport const GetItems = (q) => {\r\n  var list = [];\r\n\r\n  // < 80\r\n  var item = new VCS_Item();\r\n  item.Color = '#1956c9';\r\n\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bysmaller;\r\n  filter.Values = [ 0.80 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n  // 80 -85\r\n  item = new VCS_Item();\r\n  item.Color = '#3f79d6';\r\n\r\n  filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bybetween;\r\n  filter.IsEqualLeft = true;\r\n  filter.Values = [ 0.80, 0.85 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n   // 85 -90\r\n   item = new VCS_Item();\r\n   item.Color = '#6f9fe9';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.85, 0.90 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 90 -95\r\n   item = new VCS_Item();\r\n   item.Color = '#a5c2f2';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.9, 0.95 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 95 -100\r\n   item = new VCS_Item();\r\n   item.Color = '#c9d9f6';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.95, 1 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 100 -105\r\n   item = new VCS_Item();\r\n   item.Color = '#f3cccc';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1, 1.05 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 105 -110\r\n   item = new VCS_Item();\r\n   item.Color = '#e9999a';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1.05, 1.10 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#de6568';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.10, 1.15 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#c90010';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.15, 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 115 -120\r\n    item = new VCS_Item();\r\n    item.Color = '#980009';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybigger;\r\n    filter.Values = [ 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    return list;\r\n}","\r\nexport class WorkItemExportSetting_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","export class TrackingItem{\r\n  Values = []\r\n\r\n  Count = 0\r\n}","import * as genUtil from '../../../../util/generalUtil'\r\nimport { TrackingItem } from './TrackingItem';\r\n\r\nexport class Tracking{\r\n  Items = []\r\n\r\n  AddItem = (values) => {\r\n    var list = this.Items;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => genUtil.IsSameValues(x.Values, values));\r\n    if (index === -1){\r\n      item = new TrackingItem();\r\n      item.Values = values;\r\n      list.push(item);\r\n    } else {\r\n      item = list[index];\r\n    }\r\n\r\n    item.Count ++;\r\n    return item;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\n\r\nexport class WorkpackageInput {\r\n  Code\r\n  // = \"300\"\r\n  Name\r\n  // = \"Lắp đặt cốp thép\"\r\n  Description = 'mô tả công tác'\r\n  // = \"Mô tả quá trình lắp cốp thép\"\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.Workpackage = undefined;\r\n    }\r\n  }\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.WorkpackageId = undefined;\r\n    }\r\n    else{\r\n      this.WorkpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  WorkpackageId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    if (!v){\r\n      this.SupId = undefined;\r\n    }\r\n    else{\r\n      this.SupId = v._id;\r\n    }\r\n  }\r\n\r\n  SupId\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.WorkpackageId;\r\n    var code = this.Code;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var supId = this.SupId;\r\n\r\n    var apiData = {\r\n      _id, name, code, description, supId\r\n    };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp\";\r\n\r\n    const apiFunc =  () =>  _id ? \r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewWorkpackage = workpackageUtil.get(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  UpdateWorkpackage\r\n}","import { WorkpackageInput } from './WorkpackageInput';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\n\r\nexport class Workpackage_Dict {\r\n  constructor() {\r\n    workpackageUtil.getAll(this, (wps) => {\r\n      this.Workpackages = wps;\r\n      this.GetWorkpackagesDone = true;\r\n    });\r\n  }\r\n\r\n  Workpackages\r\n\r\n  set GetWorkpackagesDone(v) {\r\n    if (this.OnGetWorkpackagesDone) {\r\n      this.OnGetWorkpackagesDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentWorkpackage\r\n\r\n  workpackageInput\r\n  get WorkpackageInput() {\r\n    if (!this.workpackageInput){\r\n      var obj = this.workpackageInput = new WorkpackageInput();\r\n      obj.Dict = this;\r\n    }\r\n    return this.workpackageInput;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Workpackages.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.WorkpackageInput;\r\n    var wp = input.Workpackage;\r\n\r\n    if (!input.IsNew){\r\n      var action = () => { \r\n        wp.Code = input.Code;\r\n        wp.Name = input.Name;\r\n        wp.Description = input.Description;\r\n        wp.FullName = wp.GetFullName();\r\n      };\r\n      genUtil.UpdateFromModel(wp, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewWorkpackage);\r\n    }\r\n\r\n    this.IsDataChanged = true;\r\n  }\r\n\r\n  IsDataChanged\r\n\r\n  RefreshData = () => {\r\n    this.Workpackages.forEach(x => {\r\n      x.SubItems = undefined;\r\n      x.UpperList = undefined;\r\n      x.LowerList = undefined;\r\n      x.Rank = undefined\r\n    })\r\n\r\n    this.IsDataChanged = false;\r\n  }\r\n}","export const url = 'https://api.bimdev.vn/api/hbs/md'","import Setting from \"../base/Setting\";\r\nimport * as util from './MassDetailSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class MassDetailSettingData {\r\n  Columns\r\n\r\n  MainMassType\r\n\r\n  get ApiData() {\r\n    return {\r\n      columns : this.Columns,\r\n      mainMassType : this.MainMassType\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as st from '../base/SettingType'\r\nimport {url} from './MassDetailSetting_Url'\r\n\r\nexport class MassDetailSetting extends Setting {\r\n\r\n  SettingType = st.massdetail\r\n\r\n  Url = url\r\n  \r\n}","import { url } from './MassDetailSetting_Url'\r\nimport * as dataUtil from './MassDetailSettingDataUtil'\r\nimport { MassDetailSetting } from './MassDetailSetting';\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  if (!dict){\r\n    dict = pmData().MassDetailSetting_Dict\r\n  }\r\n\r\n  var qI = new MassDetailSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.SettingType = data.settingType;\r\n  qI.Data = dataUtil.GetFromDb(data.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  api.get(`${url}/list`).then(response => response.data)\r\n    .then(data => {\r\n      if (!data) return undefined\r\n      var items = data.map(x => GetFromDb(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassDetailSetting();\r\n\r\n  qI.Dict = pmData().MassDetailSetting_Dict\r\n  qI.Data = dataUtil.GetDefault();\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  var qI = new MassDetailSetting();\r\n\r\n  qI.Name = q.Name;\r\n  qI.Description = q.Description;\r\n  qI.SettingType = q.SettingType;\r\n  qI.Data = dataUtil.Clone(q.Data);\r\n  qI.Dict = q.Dict;\r\n\r\n  return qI;\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport { MassDetailSettingData } from './MassDetailSettingData';\r\nimport * as mif from '../../mass/item/MassItemField'\r\nimport * as mt from '../../mass/MassType'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const GetFromDb = (data) => {\r\n  var qI = new MassDetailSettingData();\r\n  \r\n  qI.Columns = data.columns\r\n  qI.MainMassType = data.mainMassType;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassDetailSettingData();\r\n\r\n  qI.Columns = [mif.Value, mif.Unit]\r\n  qI.MainMassType = mt.concrete\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  var qI = new MassDetailSettingData();\r\n  \r\n  qI.Columns = q.Columns\r\n  qI.MainMassType = q.MainMassType;\r\n\r\n  return qI;\r\n}","import * as itemUtil from './MassDetailSettingUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassDetailSetting_Dict {\r\n  items\r\n  get Items(){\r\n    return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n    this.GetItemsDone = true;\r\n  }\r\n\r\n  OnGetItemsDone_Func_Dict = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Func_Dict.forEach(x => x.Value());\r\n  }\r\n}","import { MassDetailSetting_Dict } from \"./MassDetailSetting_Dict\"\r\nimport * as itemUtil from './MassDetailSettingUtil'\r\n\r\nexport const get = () => {\r\n  var qI = new MassDetailSetting_Dict();\r\n\r\n  itemUtil.getAll(qI, (items) => {\r\n    qI.Items = items;\r\n  })\r\n\r\n  return qI;\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workPackageUtil from '../../entity/workpackage/WorkpackageUtil'\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\nimport * as vrt from '../../entity/setting/massExport/exportSetting/MES_ValueRetrieveType'\r\nimport * as mpn from '../../entity/mass/MassPropertyName'\r\nimport * as mt from '../../entity/mass/MassType'\r\nimport * as mif from '../../entity/mass/item/MassItemField'\r\nimport * as massDetailSetting_DictUtil from '../../entity/setting/massDetail/MassDetailSetting_DictUtil'\r\n\r\nexport const GetFilterValueTypes = (data) => {\r\n  return fvt.GetAll();\r\n}\r\n\r\nexport const GetStringFilterTypes = (data) => {\r\n  return sft.GetAll();\r\n}\r\n\r\nexport const GetValueRetrieveTypes = (data) => {\r\n  return vrt.GetAll();\r\n}\r\n\r\nexport const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Column']\r\n}\r\n\r\nexport const GetParameterNames = (data) => {\r\n  return ['Volume', 'HB_Formwork_Total']\r\n}\r\n\r\nexport const GetMassPropertyNames = (data) => {\r\n  return mpn.GetAll();\r\n}\r\n\r\nexport const GetMassItemFields = (data) => {\r\n  return mif.GetAll();\r\n}\r\n\r\nexport const GetMIFs_ForMassGroup = () => {\r\n  return mif.GetForMassGroup();\r\n}\r\n\r\nexport const GetMassTypes = (data) => {\r\n  return mt.GetAll();\r\n}\r\n\r\nexport const GetMassDetailSetting_Dict = (data) => {\r\n  return massDetailSetting_DictUtil.get();\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport MassResultComp from '../../entity/mass/result/MassResultComp';\r\nimport { Project_Dict } from '../../entity/project/Project_Dict';\r\nimport { ElementFilterSetting_Dict } from '../../entity/setting/elementFilter/ElementFilterSetting_Dict';\r\nimport { MassExportSetting_Dict } from '../../entity/setting/massExport/MassExportSetting_Dict';\r\nimport { MassGroupSetting_Dict } from '../../entity/setting/massGroup/MassGroupSetting_Dict';\r\nimport VersionCompareSetting from '../../entity/setting/versionCompare/VersionCompareSetting';\r\nimport { WorkItemExportSetting_Dict } from '../../entity/setting/workitemexport/WorkItemExportSetting_Dict';\r\nimport { Tracking } from '../../entity/tracking/Tracking';\r\nimport { Workpackage_Dict } from '../../entity/workpackage/Workpackage_Dict';\r\nimport { CategoryData } from './CategoryData';\r\nimport * as util from './PMDataUtil'\r\n\r\nexport class PMData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get categoryData(){\r\n    return CategoryData.Instance;\r\n  }\r\n\r\n  workpackage_Dict\r\n  get Workpackage_Dict() {\r\n    if (!this.workpackage_Dict){\r\n      this.workpackage_Dict = new Workpackage_Dict();\r\n    }\r\n    return this.workpackage_Dict;\r\n  }\r\n\r\n  elementFilterSetting_Dict\r\n  get ElementFilterSetting_Dict() {\r\n    if (!this.elementFilterSetting_Dict){\r\n      this.elementFilterSetting_Dict = new ElementFilterSetting_Dict();\r\n    }\r\n    return this.elementFilterSetting_Dict;\r\n  }\r\n\r\n  massExportSetting_Dict\r\n  get MassExportSetting_Dict() {\r\n    if (!this.massExportSetting_Dict){\r\n      this.massExportSetting_Dict = new MassExportSetting_Dict();\r\n    }\r\n    return this.massExportSetting_Dict;\r\n  }\r\n\r\n  massGroupSetting_Dict\r\n  get MassGroupSetting_Dict() {\r\n    if (!this.massGroupSetting_Dict){\r\n      this.massGroupSetting_Dict = new MassGroupSetting_Dict();\r\n    }\r\n    return this.massGroupSetting_Dict;\r\n  }\r\n\r\n  project_Dict\r\n  get Project_Dict() {\r\n    if (!this.project_Dict){\r\n      this.project_Dict = new Project_Dict();\r\n    }\r\n    return this.project_Dict;\r\n  }\r\n\r\n  massResultComp\r\n  get MassResultComp(){\r\n    if (!this.massResultComp){\r\n      this.massResultComp = new MassResultComp();\r\n    }\r\n    return this.massResultComp;\r\n  }\r\n  set MassResultComp(v){\r\n    this.massResultComp = v;\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = util.GetFilterValueTypes();\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = util.GetStringFilterTypes();\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = util.GetValueRetrieveTypes();\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.categoryData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = util.GetParameterNames();\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = util.GetMassPropertyNames();\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massItemFields\r\n  get MassItemFields(){\r\n    if (!this.massItemFields){\r\n      this.massItemFields = util.GetMassItemFields();\r\n    }\r\n    return this.massItemFields;\r\n  }\r\n\r\n  mifs_ForMassGroup\r\n  get MIFs_ForMassGroup(){\r\n    if (!this.mifs_ForMassGroup){\r\n      this.mifs_ForMassGroup = util.GetMIFs_ForMassGroup();\r\n    }\r\n    return this.mifs_ForMassGroup;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = util.GetMassTypes();\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  versionCompareSetting\r\n  get VersionCompareSetting(){\r\n    if (!this.versionCompareSetting){\r\n      this.versionCompareSetting = new VersionCompareSetting();\r\n    }\r\n    return this.versionCompareSetting;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = new WorkItemExportSetting_Dict();\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n\r\n  massDetailSetting_Dict\r\n  get MassDetailSetting_Dict(){\r\n    if (!this.massDetailSetting_Dict){\r\n      this.massDetailSetting_Dict = util.GetMassDetailSetting_Dict(this);\r\n    }\r\n    return this.massDetailSetting_Dict;\r\n  }\r\n\r\n  DebugPoints = []\r\n\r\n  tracking\r\n  get Tracking(){\r\n    if (!this.tracking){\r\n      this.tracking = new Tracking();\r\n    }\r\n    return this.tracking;\r\n  }\r\n\r\n  IsDebug = false\r\n\r\n  OnSet_CurrentProject_Func_Dict = []\r\n\r\n  UpdatedDate = '08/04/2021'\r\n\r\n  // Kiểm tra có phải lần đầu truy xuất bảng khối lượng\r\n  // sau khi mở trang web hay ko?\r\n  Is_First_Get_MassTable\r\n\r\n  // Đối tượng noted trong debug\r\n  LoggingItems = []\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as util from './WorkpackageUtil'\r\n\r\nexport class Workpackage {\r\n  get Index() {\r\n    return this.Dict.Workpackages.indexOf(this);\r\n  }\r\n\r\n  _id\r\n\r\n  SupId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (this.OnCodeChanged) {\r\n      this.OnCodeChanged(v);\r\n    }\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (this.OnNameChanged) {\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged) {\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  fullName\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.GetFullName();\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n    if (this.OnFullNameChanged) {\r\n      this.OnFullNameChanged(v);\r\n    }\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n  set SubItems(v){\r\n    this.subItems = v;\r\n  }\r\n\r\n  upperList\r\n  get UpperList(){\r\n    if (!this.upperList){\r\n      this.upperList = util.GetUpperList(this);\r\n    }\r\n    return this.upperList;\r\n  }\r\n  set UpperList(v){\r\n    this.upperList = v;\r\n  }\r\n\r\n  lowerList\r\n  get LowerList(){\r\n    if (!this.lowerList){\r\n      this.lowerList = util.GetLowerList(this);\r\n    }\r\n    return this.lowerList;\r\n  }\r\n  set LowerList(v){\r\n    this.lowerList = v;\r\n  }\r\n\r\n  rank\r\n  get Rank() {\r\n    if (!this.rank){\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v){\r\n    this.rank = v;\r\n  }\r\n\r\n  get LowerIds() {\r\n    return this.LowerList.map(x => x._id);\r\n  }\r\n\r\n  GetFullName = () => {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  Delete = () => {\r\n    var { _id } = this;\r\n    var apiData = { _id };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete workpackage successfully'));\r\n\r\n    var dict = this.Dict;\r\n    dict.Workpackages.splice(this.Index, 1);\r\n    if (this.OnDelete) {\r\n      this.OnDelete();\r\n    }\r\n\r\n    dict.IsDataChanged = true;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../../single/model/PMData';\r\nimport { Workpackage } from \"./Workpackage\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (dbItem, dict) => {\r\n  var { _id, name, code, description, supId } = dbItem;\r\n\r\n  var qI = new Workpackage();\r\n  qI._id = _id;\r\n  qI.Name = name;\r\n  qI.Code = code;\r\n  qI.Description = description;\r\n  qI.SupId = supId;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supId = q.SupId;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var index = list.findIndex(x => x._id === supId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetSubItems = (q) => {\r\n  var id = q._id;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  return list.filter(x => x !== q && x.SupId === id);\r\n}\r\n\r\nexport const GetUpperList = (q) => {\r\n  var supItem = q.SupItem;\r\n  if (!supItem){\r\n    return [q];\r\n  }else{\r\n    var list = [...supItem.UpperList];\r\n    list.push(q);\r\n    return list;\r\n  }\r\n}\r\n\r\nexport const GetLowerList = (q) => {\r\n  var list = [q];\r\n  q.SubItems.forEach((x, i) => {\r\n    list.push.apply(list, x.LowerList);\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  var supItem = q.SupItem;\r\n  return supItem ? supItem.Rank +1 : 0;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbwp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var wps = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(wps);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as util from './Workpackage_DictVMUtil'\r\n\r\nexport class Workpackage_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      workpackageVMs: observable,\r\n    })\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  Workpackage_Dict\r\n\r\n  get M2VM() {\r\n    return this.Workpackage_Dict.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage_Dict.M2VM = v;\r\n  }\r\n\r\n  workpackageVMs = undefined\r\n  get WorkpackageVMs() {\r\n    if (!this.workpackageVMs){\r\n      this.workpackageVMs = util.GetWorkpackageVMs(this);\r\n    }\r\n    return this.workpackageVMs;\r\n  }\r\n\r\n  currentWorkpackageVM\r\n  set CurrentWorkpackageVM(v) {\r\n    this.Workpackage_Dict = v;\r\n    this.Workpackage_Dict.CurrentWorkpackage = v.Workpackage;\r\n\r\n    this.WorkpackageInputVM.WorkpackageVM = v;\r\n  }\r\n\r\n  workpackageInputMV\r\n  get WorkpackageInputVM() {\r\n    if (!this.workpackageInputVM){\r\n      this.workpackageInputVM = util.GetWorkpackageInputVM(this);\r\n    }\r\n    return this.workpackageInputVM;\r\n  }\r\n\r\n  Add = (itemView) => {\r\n    this.WorkpackageVMs.push(itemView);\r\n    if (this.OnAdd){\r\n      this.OnAdd(itemView);\r\n    }\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport CheckboxView from \"../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../select/SelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass Workpackage_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Workpackage_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n    var wp = data.CurrentWorkpackageVM = wps[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n\r\n    var elems = wps ? wps.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var inputVM = data.WorkpackageInputVM;\r\n    var commandVM = inputVM.CommandVM;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Công tác</b>\r\n        </Divider>\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search công tác\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={inputVM.CodeVM} />\r\n          <InputView store={inputVM.NameVM} />\r\n          <InputView store={inputVM.DescriptionVM} />\r\n          <SelectView store={inputVM.SupItemSelectVM} />\r\n          <div>\r\n            <CheckboxView store={inputVM.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={inputVM.AddDatabase}>{commandVM.Content}</Button>\r\n            {inputVM.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Workpackage_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\nimport SelectView from \"../../../select/SelectView\";\r\nimport { MultiSelectVM } from \"../../../select/MultiSelectVM\";\r\nimport MultiSelectView from \"../../../select/MultiSelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass EntFilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntFilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.ItemVMs;\r\n    var wp = data.CurrentItemVM = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <SelectView store={data.ValueTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <SelectView store={data.StringFilterTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <MultiSelectView store={data.ValuesSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntFilterView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataVM from \"./ElementFilterSettingDataVM\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { IsHaveFamilyFilter } = data;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập lọc Category\r\n        </Divider>\r\n        <EntFilterView store={data.CategoryFilterVM} />\r\n\r\n        <Divider orientation=\"left\" plain>\r\n          {/* Thiết lập lọc Family */}\r\n          <CheckboxView store={data.IsHaveFamilyFilterVM}/>\r\n        </Divider>\r\n        {IsHaveFamilyFilter? <EntFilterView store={data.FamilyFilterVM} /> : \"\"}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataView from \"./ElementFilterSettingDataView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    \r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Bộ lọc đối tượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search bộ lọc\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{marginTop:20}}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <ElementFilterSettingDataView store={input.DataVM}/>\r\n\r\n          <CheckboxView store={input.IsNewVM} />\r\n          <Button style={{margin:10}}\r\n            onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n          {input.DeleteView}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSetting_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../../input/InputView\";\r\nimport EntFilterView from \"../../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../../checkbox/CheckboxView\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as floatItemVMUtil from \"../../../../../float/FloatItemVMUtil\";\r\nimport FloatItemView from \"../../../../../float/FloatItemView\";\r\nimport { CloseCircleFilled } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MES_ValueSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MES_ValueSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var floatItemStore = floatItemVMUtil.get('top right')\r\n    floatItemStore.wrapper = <Button size='small' type='primary' \r\n      onClick={data.Delete}>x</Button>\r\n\r\n    return (\r\n      <>\r\n        <div style={{ padding: '10px 35px 10px 10px', margin: '8px auto', border: 'solid 0.5px', borderRadius: '10px', position:'relative' }}>\r\n          <FloatItemView store={floatItemStore} />\r\n          <SelectView store={data.RetrieveTypeSelectVM} />\r\n          <SelectView store={data.MassTypeSelectVM} />\r\n          <EntFilterView store={data.ValueFilterVM} />\r\n          <SelectView store={data.WorkpackageSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MES_ValueSettingView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleFilled } from \"@ant-design/icons\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassExportSettingDataVM from \"./MassExportSettingDataVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MES_ValueSettingView from \"./exportSetting/MES_ValueSettingView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var valueSettingElems = data.ValueSettingVMs.map((x, i) => {\r\n      return <MES_ValueSettingView key={i} store={x} />\r\n    })\r\n\r\n    return (\r\n      <>\r\n        <SelectView store={data.ElementFilterSelectVM} />\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập giá trị\r\n          <Button type='primary' size='small' onClick={data.AddNewValueSettingVM}\r\n            style={{marginLeft:15}}>+</Button>\r\n        </Divider>\r\n        {valueSettingElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MassExportSettingDataView from \"./MassExportSettingDataView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất khối lượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search thiết lập\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <MassExportSettingDataView store={input.DataVM} />\r\n\r\n          <div>\r\n            <CheckboxView store={input.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n            {input.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSetting_DictView)","import { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport MassCell_Value from \"./MassCell_Value\";\r\n\r\nclass MassCell_ValueView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassCell_Value();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    if (data.Dict.Row.Title === 'DẦM 6, 7'){\r\n      debugger\r\n      var value = data.Value;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {data.Value}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassCell_ValueView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Popover, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassCell from \"./MassCell\";\r\nimport './MassTable.css'\r\nimport Icon, { InfoCircleOutlined } from '@ant-design/icons';\r\nimport MassCell_ValueView from \"./value/MassCell_ValueView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassCellView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassCell();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* Đối tượng ẩn để cập nhập màu sắc Cell */}\r\n        <span className='d-none'>\r\n          {data.ContentVM.Content}\r\n        </span>\r\n\r\n        <td style={data.TDStyle}>\r\n          <div className='masscell__div'>\r\n            <div className='masscell__value'>\r\n              {data.IsHaveWarning ?\r\n                <Popover trigger='hover'\r\n                  content={<div>\r\n                    {data.TLS_LevelGroup_Descriptions ?\r\n                      data.TLS_LevelGroup_Descriptions.map(x => {\r\n                        return <span key={x}>{x}</span>\r\n                      })\r\n                      : ''}\r\n                  </div>}>\r\n                  <InfoCircleOutlined className='masscell__warningicon' />\r\n                </Popover>\r\n                : ''}\r\n              <a style={data.AStyle}\r\n                onClick={data.ShowDetail}>\r\n                {data.ContentVM.Content}\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassCellView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\nimport { EditableTextVM } from \"./EditableTextVM\";\r\nimport './Text.css'\r\n\r\nclass EditableTextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EditableTextVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.Render()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EditableTextView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select, Space } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MultiSelectView from \"../../../../select/MultiSelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRow from \"./MassRow\";\r\nimport MassCellView from \"./MassCellView\";\r\nimport { DownCircleOutlined, EnterOutlined, InfoCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\r\nimport EditableTextView from \"../../../../text/EditableTextView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassRowView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var table = data.Dict;\r\n    var columns = table.Columns;\r\n\r\n    var subElems = data.IsShowSub ? data.SubItems.map((x, i) => {\r\n      return <MassRowView store={x} key={x.id} />\r\n    }) : ''\r\n\r\n    var toggleButton = data.IsHaveSub ?\r\n      <Button size='small' style={{ marginRight: 5, minWidth: 25 }} type='primary'\r\n        onClick={data.ToggleSub}>\r\n        <TextView store={data.ToggleButtonContentVM} />\r\n      </Button>\r\n      : <div style={{ padding: '0 15.5px' }} />;\r\n\r\n    return (\r\n      <>\r\n        <tr>\r\n          <th scope=\"row\" >\r\n            <div className='massrow__title__wrapper'\r\n              style={data.Style}>\r\n              {toggleButton}\r\n              <span>\r\n                <EditableTextView store={data.Editable_TitleVM} />\r\n              </span>\r\n\r\n              {data.IsHave_Addition_Wrapper ?\r\n                <div className='massrow__addition__wrapper'>\r\n                  {data.AdditionInfomation_Element}\r\n                  {data.RawValue_Element}\r\n                </div>\r\n                : ''}\r\n\r\n              {data.HoverToolElement}\r\n              {data.ModalElement}\r\n            </div>\r\n          </th>\r\n          {columns.map((y, j) => {\r\n            var cell = table.GetCell(y, data, false);\r\n            return cell ? <MassCellView key={cell.id} store={cell} /> : ''\r\n          })}\r\n        </tr>\r\n        {subElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRowView)","import { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { CSVExport } from \"./CSVExport\";\r\n\r\nclass CSVExportView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new CSVExport();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  Test = (e) => {\r\n    debugger\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <CSVLink data={data.Data} filename={data.FileName}\r\n          headers={data.Headers}\r\n          onClick={this.Test}>\r\n          {data.Title}\r\n        </CSVLink>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CSVExportView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassTable from \"./MassTable\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRowView from \"./MassRowView\";\r\nimport './MassTable.css'\r\nimport CSVExportView from \"../../../../export/csv/CSVExportView\";\r\nimport { DownloadOutlined, SaveFilled } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var columns = data.Columns;\r\n    var rows = data.MainRows;\r\n\r\n    var thElems = columns ? columns.map((x, i) => {\r\n      return <th scope=\"col\" key={x.id} className='text-center masscell_th'>{x.Name}</th>\r\n    }) : '';\r\n\r\n    var tbodyElems = rows ? rows.map((x, i) => {\r\n      return <MassRowView key={x.id} store={x} />\r\n    }) : '';\r\n\r\n\r\n    return (\r\n      <>\r\n        {data.IsValidTable ?\r\n          <>\r\n            <div className=\"masstable__title__wrapper\">\r\n              <h4 className=\"masstable__title\">\r\n                BẢNG TỔNG HỢP KHỐI LƯỢNG\r\n              </h4>\r\n              <div>\r\n                <Button type='primary' size='small' style={{ marginLeft: 15 }}\r\n                  disabled={data.IsOnSaveMassGroup}\r\n                  onClick={data.SaveMassGroup}>\r\n                  <SaveFilled />\r\n                </Button>\r\n                <Button type='primary' size='small' onClick={data.Export}\r\n                  className='masstable__export'>\r\n                  <DownloadOutlined />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {data.IsOnSaveMassGroup ?\r\n              <div className='mass__groupname__wrapper'>\r\n                <div className='mass__groupname__wrapper_dec'>\r\n                  <div className='mass__groupname__input'>\r\n                    {data.MassGroupInput_Element}\r\n                  </div>\r\n\r\n                  <div className='mass__groupname__button_wrapper'>\r\n                    <Button type='primary' size='small'\r\n                      className={data.MassGroupInput_Toggle_Classname}\r\n                      onClick={data.Toggle_MassGroupInput_State}>\r\n                      {data.MassGroupInput_Toggle_Content}\r\n                    </Button>\r\n                    <Button type='primary' size='small'\r\n                      onClick={data.MassGroupInputOK}>ok</Button>\r\n                    <Button type='default' size='small'\r\n                      onClick={data.MassGroupInputCancel}>cancel</Button>\r\n\r\n                    {data.Override_MassGroup_ModalElement}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              : ''}\r\n\r\n            < table className=\"table table-bordered table-sm masstable\">\r\n              <thead className=\"thead-light\">\r\n                <tr>\r\n                  <th scope=\"col\" className='masstitle__th'>\r\n                    <Button onClick={data.AddMainRow} type='primary' size='small'\r\n                      style={{ backgroundColor: '#52c41a', border: 'none' }}>+</Button>\r\n                  </th>\r\n                  {thElems}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tbodyElems}\r\n              </tbody>\r\n            </table>\r\n          </> : ''\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassTableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport MassResultCompVM from \"./MassResultCompVM\";\r\nimport MultiSelectView from '../../../../select/MultiSelectView'\r\nimport MassTableView from \"../table/MassTableView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport NewInputView from \"../../../../input/NewInputView\";\r\nimport { TextVM } from \"../../../../text/TextVM\";\r\nimport InputView from \"../../../../input/InputView\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass MassResultCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = pmDataVM().MassResultCompVM\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.IsShowProjectSelect ?\r\n          <MultiSelectView store={data.ProjectSelectVM} /> : ''}\r\n\r\n        {data.CanHavePhase ?\r\n          <>\r\n            <CheckboxView store={data.IsShowPhaseSelectVM} />\r\n            {data.IsHavePhase ?\r\n              <MultiSelectView store={data.PhaseSelectVM} /> : ''}\r\n          </>\r\n          : ''\r\n        }\r\n\r\n        <div style={{ marginTop: 8 }} >\r\n          <SelectView store={data.MassGroupSettingSelectVM} />\r\n        </div>\r\n\r\n        <Button style={{ marginTop: 8 }} onClick={data.GetMassData}\r\n          size='middle' type='primary'>GET DATA</Button>\r\n        <div style={{ marginTop: 15 }}>\r\n          {data.IsDataPending ?\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <div>\r\n                <Spin />\r\n                <TextView store={data.LoadingSpinTipVM} />\r\n              </div>\r\n            </div> : <MassTableView store={data.MassItem_Dict.MassTable} />}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassResultCompView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport TableVM from \"./TableVM\";\r\nimport * as rs from './RenderState'\r\nimport './Table.css'\r\nimport { LeftCircleOutlined, RightCircleOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TableVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var columns = data.Columns;\r\n\r\n    var rows = data.Rows;\r\n    var tableElem = '';\r\n    if (columns && rows) {\r\n      var theadElem = <thead className=\"thead-light\">\r\n        <tr>\r\n          {columns.map(x => {\r\n            return <th scope=\"col\" key={x.Key}>\r\n              <div className='column__title__wrapper'\r\n                onMouseEnter={x.Show_MoveCommand}\r\n                onMouseLeave={x.Collapse_MoveCommand}>\r\n\r\n                {x.CanShow_MoveCommand ?\r\n                  <div className='column__title__left'>\r\n                    {x.IsShow_MoveCommand ?\r\n                      <Button type='primary' size='small'\r\n                        className='column__title__move__button'\r\n                        onClick={x.MoveLeft}>\r\n                        <LeftCircleOutlined />\r\n                      </Button>\r\n                      : <div className='column__title__move__blank' />}\r\n                  </div>\r\n                  : ''}\r\n\r\n                {x.TitleRender()}\r\n\r\n                {x.CanShow_MoveCommand ?\r\n                  <div className='column__title__right'>\r\n                    {x.IsShow_MoveCommand ?\r\n                      <Button type='primary' size='small'\r\n                        className='column__title__move__button right'\r\n                        onClick={x.MoveRight}>\r\n                        <RightCircleOutlined />\r\n                      </Button>\r\n                      : <div className='column__title__move__blank' />}\r\n                  </div>\r\n                  : ''}\r\n              </div>\r\n            </th>\r\n          })}\r\n        </tr>\r\n      </thead>\r\n\r\n      var tbodyElem = <tbody>\r\n        {rows.map(x => {\r\n          return <tr key={x.Key}>\r\n            {x.Cells.map(y => {\r\n              return <td key={y.Key}>{y.Render()}</td>\r\n            })}\r\n          </tr>\r\n        })}\r\n      </tbody>\r\n\r\n      tableElem = <table className=\"table table-sm\">\r\n        {theadElem}{tbodyElem}\r\n      </table>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {tableElem}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport TableView from \"../../../../table/TableView\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass WorkItemExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new WorkItemExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất hạng mục</b>\r\n        </Divider>\r\n        \r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(WorkItemExportSetting_DictView)","import * as util from './LeftNavUtil'\r\n\r\nexport class LeftNav {\r\n  Title\r\n\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  currentProject\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n    \r\n    this.Items = util.GetItems(this);\r\n  }\r\n}","export class LeftNavItem {\r\n  Title\r\n  Value\r\n}","import { LeftNavItem } from \"./LeftNavItem\"\r\n\r\nexport const get = (title, value) => {\r\n  var qI = new LeftNavItem();\r\n  qI.Title = title;\r\n  qI.Value = value;\r\n  return qI;\r\n}","import { LeftNav } from \"./LeftNav\"\r\nimport * as pvt from '../../project/ProjectViewType'\r\nimport * as itemUtil from './LeftNavItemUtil'\r\n\r\nexport const GetTest = () => {\r\n  var qI = new LeftNav();\r\n\r\n  qI.Title = 'HikariComplex'\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.CurrentProject ?\r\n    [\r\n      itemUtil.get('MASS', pvt.mass),\r\n      itemUtil.get('LEVEL', pvt.typicallevel),\r\n      itemUtil.get('PHASE', pvt.phase),\r\n      itemUtil.get('INPUT DATA', pvt.inputdata)\r\n    ]                                    \r\n      : \r\n    [\r\n      itemUtil.get('MASS', pvt.mass),\r\n      itemUtil.get('MEP SETTING', pvt.mepsetting),\r\n      itemUtil.get('DOCUMENT', pvt.document),\r\n    ]\r\n}","import { LeftNavVM } from \"./LeftNavVM\"\r\nimport * as modelUtil from './LeftNavUtil'\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nexport const get = (q) => {\r\n  var qI = new LeftNavVM();\r\n\r\n  qI.ModelItem = q;\r\n  genUtil.Add(\r\n    pmDataVM().OnSet_CurrentProject_Func_Dict,\r\n    () => qI.CurrentProject = pmDataVM().CurrentProject,\r\n    false);\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(modelUtil.GetTest());\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items;\r\n}\r\n\r\nexport const GetPreTitle = (q) => {\r\n  return q.CurrentProject ? 'DỰ ÁN'\r\n    : 'CÁC DỰ ÁN';\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  return q.CurrentProject ? q.CurrentProject.Name \r\n    : '';\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { pmData } from '../../mass/item/MassItemUtil';\r\nimport * as pvt from '../../project/ProjectViewType'\r\nimport * as util from './LeftNavVMUtil'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class LeftNavVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectViewType : observable,\r\n      items : observable,\r\n      title : observable,\r\n      preTitle : observable\r\n    })\r\n  }\r\n\r\n  preTitle = undefined\r\n  get PreTitle (){\r\n    if (!this.preTitle){\r\n      this.preTitle = util.GetPreTitle(this);\r\n    }\r\n    return this.preTitle;\r\n  } set PreTitle(v){\r\n    this.preTitle = v;\r\n  }\r\n\r\n  title = undefined\r\n  get Title (){\r\n    if (!this.title){\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  } set Title(v){\r\n    this.title = v;\r\n  }\r\n\r\n  items = undefined\r\n  get Items (){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  currentProject\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n\r\n    this.ModelItem.CurrentProject = v?.ModelItem;\r\n    this.Items = util.GetItems(this);\r\n    this.PreTitle = util.GetPreTitle(this);\r\n    this.Title = util.GetTitle(this);\r\n  }\r\n\r\n  projectViewType = undefined\r\n  get ProjectViewType(){\r\n    if (!this.projectViewType){\r\n      this.projectViewType = pmDataVM().ProjectViewType;\r\n    }\r\n    return this.projectViewType\r\n  } set ProjectViewType(v){\r\n    this.projectViewType = pmDataVM().ProjectViewType = v;\r\n  }\r\n\r\n  GetItemClass = (item) => {\r\n    return `leftnav__item ${item.Value === this.ProjectViewType ? 'active' : ''}`;\r\n  }\r\n\r\n  SetView = (item) => {\r\n    this.ProjectViewType = item.Value;\r\n  }\r\n\r\n  get UpdatedDate(){\r\n    return pmData().UpdatedDate;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { } from '@ant-design/icons';\r\nimport './LeftNav.css'\r\nimport { LeftNavVM } from './LeftNavVM';\r\nimport * as navUtil from './LeftNavVMUtil'\r\n\r\nclass LeftNavView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = navUtil.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <nav className='leftnav'>\r\n          {/* Wrapper */}\r\n          <div className='leftnav__wrapper'>\r\n            {/* Body */}\r\n            <div className='leftnav__body'>\r\n\r\n              {/* Title */}\r\n              <span className='leftnav__title'>\r\n                <span className='leftnav__title__prefix'>\r\n                  {data.PreTitle}\r\n                </span>\r\n                <span className='leftnav__title__name'>\r\n                  {data.Title}\r\n                </span>\r\n              </span>\r\n\r\n              {/* Items */}\r\n              <div className='leftnav__items'>\r\n                {data.Items.map(x => {\r\n                  return <a key={x.Value} onClick={() => data.SetView(x)}\r\n                    className={data.GetItemClass(x)}>\r\n                    {x.Title}\r\n                  </a>\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Footer */}\r\n            <div className='leftnav__footer'>\r\n              <span>© Copyright</span>\r\n              <span>{`Updated Date: ${data.UpdatedDate}`}</span>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LeftNavView);\r\n","import * as mif from '../item/MassItemField'\r\nimport * as tableUtil from '../../../../table/TableVMUtil'\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport * as cit from '../../../../table/TableColumn_InputType'\r\nimport TableVM from '../../../../table/TableVM'\r\nimport { MassDetailTable } from './MassDetailTable'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new MassDetailTable();\r\n  \r\n  qI.Dict = dict;\r\n  var obj = qI.Table;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetInitialColumnNames = (q) => {\r\n  return q.SettingData.Columns;\r\n}\r\n\r\nexport const GetColumns = (q) => {\r\n  return q.InitialColumnNames.map(x => colUtil.GetByTitle(x, q.Table));\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.CanHandleItem = false;\r\n  qI.AllColumnNames = mif.GetForMassGroup();\r\n  qI.Column_InputType = cit.select\r\n  qI.Override_Get_CellValue = (item, cell, row, col) => {\r\n    var field = col.DataIndex[0];\r\n    var val = item.GetValue(field);\r\n    return val;\r\n  }\r\n  qI.Column_Title_SelectWidth = 150\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassDetailTableUtil'\r\n\r\nexport class MassDetailTable {\r\n  constructor() {\r\n    // makeObservable(this, {\r\n\r\n    // })\r\n  }\r\n\r\n  data\r\n  get Data(){\r\n    return this.data;\r\n  } set Data(v){\r\n    this.data = v;\r\n    this.Table.DataSource = v;\r\n  }\r\n\r\n  initialColumnNames\r\n  get InitialColumnNames(){\r\n    if (!this.initialColumnNames){\r\n      this.initialColumnNames = util.GetInitialColumnNames(this);\r\n    }\r\n    return this.initialColumnNames;\r\n  } set InitialColumnNames (v){\r\n    this.initialColumnNames = v;\r\n\r\n    this.Columns = util.GetColumns(this);\r\n  }\r\n\r\n  columns\r\n  get Columns(){\r\n    if (!this.columns){\r\n      this.columns = util.GetColumns(this);\r\n    }\r\n    return this.columns\r\n  } set Columns(v){\r\n    this.columns = v;\r\n    this.Table.Columns = v;\r\n  }\r\n\r\n  table\r\n  get Table(){\r\n    if (!this.table){\r\n      var obj = this.table = util.GetTable(this);\r\n      obj.Columns = this.Columns;\r\n    }\r\n    return this.table;\r\n  }\r\n\r\n  AddColumn = () => {\r\n    this.Table.AddColumn();\r\n  }\r\n\r\n  get ColumnNames (){\r\n    return this.Table.Columns.filter(x => !x.IsAction)\r\n      .map(x => x.Title);\r\n  }\r\n\r\n  settingData\r\n  get SettingData(){\r\n    if (!this.settingData){\r\n      this.settingData = this.Dict.Setting?.Data;\r\n    }\r\n    return this.settingData;\r\n  } set SettingData(v){\r\n    this.settingData = v;\r\n\r\n    this.InitialColumnNames = util.GetInitialColumnNames(this);\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { PMData } from \"../../../single/model/PMData\";\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as tableUtil from './MassDetailTableUtil'\r\nimport * as mt from '../MassType'\r\nimport * as settingUtil from '../../setting/massDetail/MassDetailSettingUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Property\r\nexport const GetSettingName = (q) => {\r\n  return q.Setting?.Name;\r\n}\r\n\r\nexport const Handle_SettingStorageList = (q) => {\r\n  const set_StorageList = (v) => q.SettingStorageList = v;\r\n  \r\n  var dict = pmData().MassDetailSetting_Dict;\r\n  if (dict.Items){\r\n    set_StorageList(dict.Items);\r\n  } else {\r\n    genUtil.Add(\r\n      dict.OnGetItemsDone_Func_Dict,\r\n      () => set_StorageList(dict.Items)\r\n    )\r\n  }\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  return tableUtil.get(q);\r\n}\r\n\r\nexport const GetDefaultSetting = (q) => {\r\n  console.log(q.MainMassType);\r\n\r\n  var obj = settingUtil.GetDefault();\r\n  return obj;\r\n}\r\n\r\n// Xảy ra khi cập nhập thành công Items\r\nexport const Handle_Setting = (q) => {\r\n  var massType = q.MainMassType;\r\n\r\n  const handle_SettingFunc = (settings) => {\r\n    var index = settings.findIndex(x => x.Data.MainMassType === massType);\r\n    if (index !== -1){\r\n      var setting = settings[index];\r\n      q.SettingSelectVM_ForInput.InitialItem = setting;\r\n      q.Setting = settingUtil.Clone(setting);\r\n    }\r\n  }\r\n\r\n  var list = q.SettingStorageList;\r\n  if (list){\r\n    handle_SettingFunc(list);\r\n  } else {\r\n    genUtil.Add(\r\n      q.IsGet_SettingStorageList_Done_Func_Dict,\r\n      () => handle_SettingFunc(q.SettingStorageList),\r\n      true\r\n    )\r\n  }\r\n}\r\n\r\nexport const GetMainMassType = (q) => {\r\n  var list = q.Items;\r\n  return list.length === 0 ? mt.concrete : list[0].MassType;\r\n}","import { makeObservable, observable, action, set } from 'mobx';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport { MassDetailTable } from './MassDetailTable';\r\nimport * as mdi_st from './MassDetailInput_StateType'\r\nimport * as textUtil from '../../../../text/TextVMUtil';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport InputView from '../../../../input/InputView';\r\nimport { message } from 'antd';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as util from './MassDetailVMUtil'\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport * as settingUtil from '../../setting/massDetail/MassDetailSettingUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class MassDetailVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsOnSaveSetting: observable, \r\n      SettingInput_State : observable,\r\n      Is_Override_Setting_Modal_Open : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n    massItemUtil.getByViewDetail(v, (items) => {\r\n      this.Items = items;\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    this.MainMassType = util.GetMainMassType(this);\r\n    util.Handle_Setting(this);\r\n    this.DetailTable.Data = v;\r\n  }\r\n\r\n  detailTable\r\n  get DetailTable() {\r\n    if (!this.detailTable) {\r\n      this.detailTable = util.GetTable(this);\r\n    }\r\n    return this.detailTable;\r\n  }\r\n\r\n  // Setting for input\r\n  IsGet_SettingStorageList_Done_Func_Dict = []\r\n\r\n  settingStorageList\r\n  get SettingStorageList() {\r\n    if (!this.settingStorageList) {\r\n      util.Handle_SettingStorageList(this);\r\n    }\r\n    return this.settingStorageList;\r\n  } set SettingStorageList(v) {\r\n    this.settingStorageList = v;\r\n    this.SettingSelectVM_ForInput.Items = v;\r\n\r\n    this.IsGet_SettingStorageList_Done_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  settingSelectVM_ForInput\r\n  get SettingSelectVM_ForInput() {\r\n    if (!this.settingSelectVM_ForInput) {\r\n      var list = this.SettingStorageList ?\r\n        this.SettingStorageList : [];\r\n\r\n      var obj = this.settingSelectVM_ForInput =\r\n        selectUtil.get(list);\r\n\r\n      obj.TitleRender = (item) => item.Name;\r\n      obj.Placeholder = 'Chọn thiết lập';\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.PreSetting = v;\r\n      };\r\n    }\r\n    return this.settingSelectVM_ForInput;\r\n  }\r\n\r\n  SettingOK = () => {\r\n    var preSetting = this.PreSetting;\r\n    if (!preSetting){\r\n      message.warning(\"Bạn chưa chọn bộ thiết lập\");\r\n      return;\r\n    }\r\n\r\n    this.Setting = settingUtil.Clone(preSetting);\r\n  }\r\n  \r\n  setting\r\n  get Setting(){\r\n    if (!this.setting){\r\n      this.setting = util.GetDefaultSetting(this);\r\n    }\r\n    return this.setting;\r\n  } set Setting(v){\r\n    this.setting = v;\r\n\r\n    this.DetailTable.SettingData = v.Data;\r\n  }\r\n\r\n  // Save Settting\r\n  IsOnSaveSetting = false;\r\n\r\n  SaveSetting = () => {\r\n    // Init MassGroup StorageList\r\n    var refSelectVM = this.SettingSelectVM_ForInput;\r\n    var obj = this.SettingSelectVM;\r\n    obj.Items = [...refSelectVM.Items];\r\n    obj.InitialItem = refSelectVM.SelectedItem;\r\n\r\n    this.SettingInput_State = mdi_st.select\r\n    this.IsOnSaveSetting = true;\r\n  }\r\n\r\n  SettingInput_State = undefined\r\n\r\n  Toggle_SettingInput_State = () => {\r\n    switch (this.SettingInput_State) {\r\n      case mdi_st.select:\r\n        this.SettingInput_State = mdi_st.input\r\n        break;\r\n      case mdi_st.input:\r\n        this.SettingInput_State = mdi_st.select\r\n        break;\r\n    }\r\n  }\r\n\r\n  get SettingInput_Toggle_Classname() {\r\n    switch (this.SettingInput_State) {\r\n      case mdi_st.select:\r\n        return 'btn-warning';\r\n      case mdi_st.input:\r\n        return 'btn-success';\r\n    }\r\n  }\r\n\r\n  get SettingInput_Toggle_Content() {\r\n    switch (this.SettingInput_State) {\r\n      case mdi_st.select:\r\n        return 'sel';\r\n      case mdi_st.input:\r\n        return 'inp';\r\n    }\r\n  }\r\n\r\n  settingName = undefined\r\n  get SettingName() {\r\n    if (!this.settingName) {\r\n      this.settingName = util.GetSettingName(this);\r\n    }\r\n    return this.settingName;\r\n  }\r\n  set SettingName(v) {\r\n    this.settingName = v;\r\n  }\r\n\r\n  settingInputVM\r\n  get SettingInputVM() {\r\n    if (!this.settingInputVM) {\r\n      var obj = this.settingInputVM =\r\n        textUtil.get(this.SettingName, 'Tên thiết lập');\r\n      obj.onSetContent = (v) => this.SettingName = v;\r\n    }\r\n    return this.settingInputVM;\r\n  }\r\n\r\n  settingSelectVM\r\n  get SettingSelectVM() {\r\n    if (!this.settingSelectVM) {\r\n      var obj = this.settingSelectVM = selectUtil.get([], undefined);\r\n      obj.Placeholder = 'Chọn thiết lập';\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.SettingName = v?.Name\r\n      };\r\n    }\r\n    return this.settingSelectVM;\r\n  }\r\n\r\n  get SettingInput_Element() {\r\n    switch (this.SettingInput_State) {\r\n      case mdi_st.select:\r\n        var obj = this.SettingSelectVM;\r\n        var list = obj.Items;\r\n        var index = list.findIndex(x => x.Name === this.SettingName);\r\n        obj.InitialItem = index !== -1 ?\r\n          list[index] : undefined\r\n        return <SelectView store={obj} />\r\n      case mdi_st.input:\r\n        var obj = this.SettingInputVM;\r\n        obj.Content = this.SettingName;\r\n        return <InputView store={obj} />\r\n    }\r\n  }\r\n\r\n  SettingInputOK = () => {\r\n    var name = this.SettingName;\r\n    var input_State = this.SettingInput_State;\r\n\r\n    if (!name || name.length === 0) {\r\n      switch (input_State) {\r\n        case mdi_st.select:\r\n          message.warning('Vui lòng chọn bộ thiết lập!')\r\n          return;\r\n        case mdi_st.input:\r\n          message.warning('Vui lòng nhập tên thiết lập!')\r\n          return;\r\n      }\r\n    }\r\n\r\n    var needValidateForOveride = false;\r\n    var items = pmData().MassDetailSetting_Dict.Items;\r\n    var index = items.findIndex(x => x.Name === name);\r\n\r\n    var setting = this.Setting;\r\n    setting.Name = name;\r\n    \r\n    if (index !== -1) {\r\n      setting._id = items[index]._id;\r\n\r\n      if (input_State === mdi_st.input) {\r\n        needValidateForOveride = true;\r\n      }\r\n    }\r\n\r\n    const handle_UpdateSetting = () => {\r\n      // cập nhập MainMassType và Columns vào setting\r\n      var settingData = setting.Data;\r\n      settingData.MainMassType = this.MainMassType;\r\n      settingData.Columns = this.DetailTable.ColumnNames;\r\n\r\n      setting.SaveDatabase((data, isnew) => {\r\n        var refVM = this.SettingSelectVM_ForInput\r\n        var list = refVM.Items;\r\n        var newItem = settingUtil.GetFromDb(data);\r\n        console.log(newItem);\r\n\r\n        if (isnew) {\r\n          list.push(newItem);\r\n          refVM.InitialItem = newItem;\r\n        } else {\r\n          list[index] = newItem;\r\n          // Refresh lại selected item nếu trùng với đối tượng update\r\n          if (refVM.SelectedIndex === index) {\r\n            refVM.InitialItem = newItem;\r\n          }\r\n        }\r\n\r\n        this.IsOnSaveSetting = false\r\n        message.success(`${isnew ? 'add' : 'edit'} setting successfully`);\r\n      })\r\n    }\r\n\r\n    if (!needValidateForOveride) {\r\n      handle_UpdateSetting();\r\n    } else {\r\n      this.Override_Setting_Modal_OKFunc =\r\n        () => handle_UpdateSetting();\r\n\r\n      this.Is_Override_Setting_Modal_Open = true;\r\n    }\r\n  }\r\n\r\n  Is_Override_Setting_Modal_Open = false\r\n\r\n  get Override_Setting_ModalElement() {\r\n    var title = 'Cảnh báo'\r\n    var content = 'Thiết lập đã có sẵn, bạn có muốn ghi đè không?'\r\n\r\n    const modalCancel = () =>\r\n      this.Is_Override_Setting_Modal_Open = false\r\n\r\n    const modalOK = () => {\r\n      this.Is_Override_Setting_Modal_Open = false\r\n      this.Override_Setting_Modal_OKFunc();\r\n    }\r\n\r\n    return <Modal title={title}\r\n      visible={this.Is_Override_Setting_Modal_Open}\r\n      onOk={modalOK} onCancel={modalCancel}>\r\n      {content}\r\n    </Modal>\r\n  }\r\n\r\n  SettingInputCancel = () => {\r\n    this.IsOnSaveSetting = false;\r\n    this.SettingInputVM.Content = util.GetSettingName(this);\r\n  }\r\n\r\n  // Setting Data\r\n  MainMassType\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Row } from 'antd';\r\nimport { MassDetailTable } from './MassDetailTable';\r\nimport TableView from '../../../../table/TableView';\r\n\r\nclass MassDetailTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='massdetail__wrapper'>\r\n          <Button type='primary' size='small'\r\n            className='massdetail__addcolumn'\r\n            onClick={data.AddColumn}>+</Button>\r\n          <TableView store={data.Table} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(MassDetailTableView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { MassDetailVM } from './MassDetailVM';\r\nimport MassDetailTableView from './MassDetailTableView';\r\nimport TableView from '../../../../table/TableView';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport './MassDetail.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\nimport SelectView from '../../../../select/SelectView';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass MassDetailView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n\r\n    // Set up Main Width\r\n    pmDataVM().Main_Classname = 'massdetail__comp'\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='massdetail__setting__wrapper'>\r\n          <b>Bộ thiết lập:</b>\r\n          <SelectView className='massdetail__setting__select' store={data.SettingSelectVM_ForInput} />\r\n          <Button type='primary' size='small'\r\n            onClick={data.SettingOK}>ok</Button>\r\n        </div>\r\n        <div className=\"massdetail__title__wrapper\">\r\n          <h4 className=\"massdetail__title\">\r\n            BẢNG CHI TIẾT KHỐI LƯỢNG\r\n            </h4>\r\n          <div>\r\n            <Button type='primary' size='small' style={{ marginLeft: 15 }}\r\n              disabled={data.IsOnSaveSetting}\r\n              onClick={data.SaveSetting}>\r\n              <SaveFilled />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {data.IsOnSaveSetting ?\r\n          <div className='massdetail__groupname__wrapper'>\r\n            <div className='massdetail__groupname__wrapper_dec'>\r\n              <div className='massdetail__groupname__input'>\r\n                {data.SettingInput_Element}\r\n              </div>\r\n\r\n              <div className='massdetail__groupname__button_wrapper'>\r\n                <Button type='primary' size='small'\r\n                  className={data.SettingInput_Toggle_Classname}\r\n                  onClick={data.Toggle_SettingInput_State}>\r\n                  {data.SettingInput_Toggle_Content}\r\n                </Button>\r\n                <Button type='primary' size='small'\r\n                  onClick={data.SettingInputOK}>ok</Button>\r\n                <Button type='default' size='small'\r\n                  onClick={data.SettingInputCancel}>cancel</Button>\r\n\r\n                {data.Override_Setting_ModalElement}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          : ''}\r\n\r\n        <MassDetailTableView store={data.DetailTable} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(MassDetailView));\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { LevelGroupVM } from './LevelGroupVM';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './LevelGroup.css'\r\n\r\nclass LevelGroupView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new LevelGroupVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='levelgroup__container'>\r\n          <MultiSelectView store={data.LevelSelectVM} />\r\n          <Button size='small' type='text' \r\n            className='levelgroup__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='levelgroup__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LevelGroupView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Popover, Switch } from 'antd';\r\nimport { TLS_FilterValueVM } from './TLS_FilterValueVM';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport './TLS_FilterValue.css'\r\n\r\nclass TLS_FilterValueView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterValueVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n\r\n        <div className='tls_filter__value'>\r\n          {/* Input */}\r\n          <Popover\r\n            trigger={data.PopoverState.Content}\r\n            content={\r\n              <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n                checked={data.SwitchChecked_Funcs()} onChange={data.ToggleInputType} />\r\n            }>\r\n            <span>\r\n              {data.InputElement}\r\n            </span>\r\n          </Popover>\r\n          \r\n          {/* Delete */}\r\n          <Button type='primary' size='small' onClick={data.Delete}\r\n            className='tls_filter__value__delete'>x</Button>\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterValueView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { TLS_FilterVM } from './TLS_FilterVM';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport './TLS_Filter.css'\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport TLS_FilterValueView from './TLS_FilterValueView';\r\n\r\nclass TLS_FilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls_filter__div'>\r\n          {/* Field Select */}\r\n          <SelectView store={data.FieldSelectVM} \r\n            className='tls_filter_fieldselect'/>\r\n\r\n          <div className='tls_filter__valuediv__wrapper'>\r\n            {/* Add Value */}\r\n            <Button type='primary' size='small' onClick={data.AddItem}\r\n              className='tls_filter__valuediv__addbutton'>+</Button>\r\n\r\n            {/* Value List */}\r\n            <div className='tls_filter__valuediv'>\r\n              {data.Items.map(x => {\r\n                return <TLS_FilterValueView key={x.id} store={x} />\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <Button size='small' type='text'\r\n            className='tls_filter__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='tls_filter__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './TLS_PageItem.css'\r\nimport { TLS_PageItemVM } from './TLS_PageItemVM';\r\nimport TLS_FilterView from '../filter/TLS_FilterView';\r\nimport LevelGroupView from '../levelGroup/LevelGroupView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TLS_PageItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_PageItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__pageitem__wrapper'>\r\n          {/* Filters */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Filter */}\r\n              <Button type='primary' size='small' onClick={data.AddFilter}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập bộ lọc</b></span>\r\n            </div>\r\n\r\n            {/* Filter List */}\r\n            {data.Filters.map(x => {\r\n              return <TLS_FilterView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n\r\n          {/* LevelGroup */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Level */}\r\n              <Button type='primary' size='small' onClick={data.AddLevelGroup}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập level</b></span>\r\n            </div>\r\n\r\n            {/* Level List */}\r\n            {data.LevelGroups.map(x => {\r\n              return <LevelGroupView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_PageItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport LevelGroupView from './levelGroup/LevelGroupView';\r\nimport './TypicalLevelSettingData.css'\r\nimport './pageItem/TLS_PageItem.css'\r\nimport TLS_FilterView from './filter/TLS_FilterView';\r\nimport TLS_PageItemView from './pageItem/TLS_PageItemView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TypicalLevelSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onKeyDown = (v) => {\r\n    //console.log(v);\r\n    v.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__tabs__wrapper'>\r\n          <div className='tls__tabs__div'>\r\n            {/* Add Tab */}\r\n            {!data.IsHaveAddCommandTab ?\r\n            <Button type='primary' size='small' onClick={data.AddPageItem}\r\n              className='tls__tabs__add__outside'>+</Button>\r\n              : ''}\r\n\r\n            {/* Tabs */}\r\n            <Tabs type='card' className='tls__tabs'\r\n              onChange={data.ChangePageKey}\r\n              activeKey={data.CurrentPageKey}\r\n              onKeyDown={this.onKeyDown}>\r\n              {data.AllTabs.map(x => {\r\n                return <TabPane tab={x.TitleElement} key={x.id}>\r\n                  <TLS_PageItemView store={x} />\r\n                </TabPane>\r\n              })}\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingDataView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM';\r\nimport TypicalLevelSettingDataView from './TypicalLevelSettingDataView';\r\nimport NewInputView from '../../../../input/NewInputView';\r\nimport './TypicalLevelSetting.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nclass TypicalLevelSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* Data */}\r\n        <div className='tls'>\r\n          {/* Save Button */}\r\n          <Button type='primary' size='small' className='tls__save__button'\r\n            onClick={data.Save}>\r\n            <SaveFilled className='tls__save' />\r\n          </Button>\r\n          {/* Main Data */}\r\n          <TypicalLevelSettingDataView store={data.DataVM} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport * as stateType from '../state/StateType'\r\n\r\nconst { Option } = Select;\r\n\r\nclass Phase_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Phase_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var input = data.Input;\r\n    var state = data.State;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <Button type='primary' size='middle' onClick={data.AddVersion}\r\n            disabled={state === stateType.addversion}>\r\n            <PlusCircleOutlined /> LƯU KẾT QUẢ HIỆN TẠI\r\n          </Button>\r\n\r\n          {state === stateType.addversion ? <div className=\"mt-3\">\r\n            <InputView store={input.NameVM} />\r\n            <InputView store={input.DescriptionVM} />\r\n            <div className=\"mt-2\">\r\n              <Button type='primary' size='small' onClick={data.OK}>OK</Button>\r\n              <Button type='default' size='small' onClick={data.Cancel}>Cancel</Button>\r\n            </div>\r\n          </div> : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Phase_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport TableView from \"../../../../table/TableView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass RebarMass_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new RebarMass_Dict();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(RebarMass_DictView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport { LevelSettingDataVM } from './LevelSettingDataVM';\r\nimport './LevelSetting.css'\r\n\r\nclass LevelSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new LevelSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        Level Setting\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LevelSettingDataView);\r\n","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as projectUtil from '../ProjectUtil'\r\nimport * as projectVMUtil from '../ProjectVMUtil'\r\nimport * as util from './ProjectCompVMUtil'\r\nimport * as pvt from '../ProjectViewType'\r\nimport MassResultCompView from '../../mass/result/MassResultCompView';\r\nimport TypicalLevelSettingView from '../../setting/typicallevel/TypicalLevelSettingView';\r\nimport Phase_DictView from '../../phase/Phase_DictView';\r\nimport RebarMass_DictView from '../../mass/rebar/RebarMass_DictView';\r\nimport LevelSettingDataView from '../../setting/level/LevelSettingDataView';\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class ProjectCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectVM: observable,\r\n      projectViewType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n    projectUtil.getById(v, (item) => {\r\n      this.ProjectVM = projectVMUtil.get(item);\r\n    })\r\n  }\r\n\r\n  projectVM = undefined\r\n  get ProjectVM() {\r\n    return this.projectVM;\r\n  }\r\n  set ProjectVM(v) {\r\n    this.projectVM = v;\r\n\r\n    pmDataVM().CurrentProject = v;\r\n\r\n    var list = [v];\r\n    pmDataVM().Project_DictVM.Items = list;\r\n    pmData().Phase_Dict = v.ModelItem.Phase_Dict;\r\n\r\n    var massResComp = this.MassResultCompVM;\r\n    massResComp.ProjectVMStorageList = list;\r\n    massResComp.ProjectSelectVM.InitialItems = list;\r\n\r\n    var setItemsFuncs = () => massResComp.PhaseVMStorageList = phase_DictVM.Items;\r\n\r\n    var phase_DictVM = v.Phase_DictVM;\r\n    if (phase_DictVM.Items) {\r\n      setItemsFuncs();\r\n    } else {\r\n      phase_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n        setItemsFuncs();\r\n      })\r\n    }\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM() {\r\n    if (!this.massResultCompVM) {\r\n      var obj = this.massResultCompVM = util.GetMassResultCompVM(this);\r\n      pmDataVM().MassResultCompVM = obj;\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n\r\n  projectViewType = undefined\r\n  get ProjectViewType() {\r\n    if (!this.projectViewType) {\r\n      this.projectViewType = pmDataVM().ProjectViewType;\r\n    }\r\n    return this.projectViewType;\r\n  } set ProjectViewType(v) {\r\n    this.projectViewType = v;\r\n  }\r\n\r\n  get ViewElement() {\r\n    if (!this.ProjectVM) return undefined;\r\n\r\n    switch (this.ProjectViewType) {\r\n      case pvt.mass:\r\n        return <div className='massresult__comp__wrapper'>\r\n          <MassResultCompView store={this.MassResultCompVM} />\r\n        </div>\r\n      case pvt.typicallevel:\r\n        return <>\r\n          {this.ProjectVM.LevelSetting ?\r\n            <LevelSettingDataView store={this.ProjectVM.LevelSetting.Data} />\r\n            : ''}\r\n\r\n          {this.ProjectVM.TypicalLevelSetting_ForEdit ?\r\n            <TypicalLevelSettingView store={this.ProjectVM.TypicalLevelSetting_ForEdit} />\r\n            : ''}\r\n        </>\r\n      case pvt.phase:\r\n        return <div className='phase__comp__wrapper'>\r\n          <Phase_DictView store={this.ProjectVM.Phase_DictVM} />\r\n        </div>\r\n      case pvt.inputdata:\r\n        return <RebarMass_DictView store={this.ProjectVM.RebarMass_Dict} />\r\n    }\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM'\r\nimport MassResultComp from '../../mass/result/MassResultComp'\r\nimport * as massResutlCompVMUtil from '../../mass/result/MassResultCompVMUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport ProjectCompVM from './ProjectCompVM';\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\n// Instance\r\nexport const get = () => {\r\n  var qI = new ProjectCompVM();\r\n\r\n  genUtil.Add(\r\n    pmDataVM().OnSet_ProjectViewType_Func_Dict,\r\n    () => qI.ProjectViewType = pmDataVM().ProjectViewType,\r\n    false);\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetMassResultCompVM = (q) => {\r\n  var obj = massResutlCompVMUtil.get(new MassResultComp(), false);\r\n  obj.IsShowProjectSelect = false;\r\n  obj.CanHavePhase = true;\r\n  return obj;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport './ProjectComp.css'\r\nimport * as util from './ProjectCompVMUtil'\r\nimport TwoCol_SelectView from '../../../../select/twocol/TwoCol_SelectView';\r\n\r\nclass ProjectCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.get()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var projectVM = data.ProjectVM;\r\n\r\n    return (\r\n      <>\r\n        {projectVM ? data.ViewElement : ''}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(ProjectCompView));\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport './PMData.css'\r\nimport Workpackage_DictView from '../../entity/workpackage/Workpackage_DictView';\r\nimport ElementFilterSetting_DictView from '../../entity/setting/elementFilter/ElementFilterSetting_DictView';\r\nimport MassExportSetting_DictView from '../../entity/setting/massExport/MassExportSetting_DictView';\r\n\r\nimport { PMDataVM } from './PMDataVM';\r\nimport MassResultCompView from '../../entity/mass/result/MassResultCompView';\r\nimport WorkItemExportSetting_DictView from '../../entity/setting/workitemexport/WorkItemExportSetting_DictView';\r\nimport { withRouter } from \"react-router-dom\";\r\n//import { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\r\nimport LeftNavView from '../../entity/nav/left/LeftNavView';\r\nimport TestView from '../../../view/TestView';\r\nimport MassDetailView from '../../entity/mass/detail/MassDetailView';\r\nimport ProjectCompView from '../../entity/project/comp/ProjectCompView';\r\n\r\nclass PMDataView extends Component {\r\n  render() {\r\n    var data = PMDataVM.Instance;\r\n\r\n    return (\r\n      <>\r\n        <div className='projectcomp'>\r\n          <LeftNavView />\r\n          <div className='projectcomp__main__wrapper'>\r\n            <div className={data.Main_Classname}>\r\n\r\n              <Router basename={process.env.PUBLIC_URL}>\r\n                <Switch>\r\n                  <Route exact path=\"/\" component={TestView} />\r\n                  <Route exact path=\"/massdetail/:id\" component={MassDetailView} />\r\n                  <Route exact path=\"/project/:id\" component={ProjectCompView} />\r\n                </Switch>\r\n              </Router>\r\n\r\n            </div>\r\n            <div className='projectcomp__main__bottom' />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(PMDataView);\r\n","export class DO_Comp {\r\n  \r\n}","export class DO_Element {\r\n  SubItems = []\r\n}","export const project = 'project'\r\nexport const element = 'element'\r\nexport const elementinfo = 'element-info'\r\nexport const elementinfo_identify = 'element-info-identify'\r\nexport const elementinfo_locate = 'element-info-locate'\r\nexport const elementinfo_geometry = 'element-info-geometry'\r\nexport const elementinfo_specification = 'element-info-specification'\r\nexport const elementinfo_material = 'element-info-material'","import { DO_Element } from './DO_Element';\r\nimport * as et from './DO_ElementType'\r\n\r\nexport const get = (type, title) => {\r\n  var qI = new DO_Element();\r\n  qI.Title = title ? title : type;\r\n\r\n  switch (type) {\r\n    case et.element:\r\n      qI.SubItems = [\r\n        get('guid'),\r\n        get('projectId'),\r\n        get('exportSetId'),\r\n        get(et.elementinfo, 'info')\r\n      ]\r\n      break;\r\n    case et.project:\r\n      qI.SubItems = []\r\n      break;\r\n    case et.elementinfo:\r\n      qI.SubItems = [\r\n        get(et.elementinfo_identify, 'identify'),\r\n        get(et.elementinfo_locate, 'locate'),\r\n        get(et.elementinfo_geometry, 'geometry'),\r\n        get(et.elementinfo_specification, 'specification'),\r\n        get(et.elementinfo_material, 'material'),\r\n      ]\r\n      break;\r\n    case et.elementinfo_identify:\r\n      qI.SubItems = [\r\n        get('category'),\r\n        get('typename'),\r\n        get('elementName'),\r\n        get('typemark'),\r\n        get('typecomment'),\r\n        get('description'),\r\n        get('model'),\r\n        get('manufacturer'),\r\n        get('keynote'),\r\n        get('assemblycode'),\r\n        get('systemtype'),\r\n        get('systemclassification'),\r\n        get('workItem'),\r\n      ];\r\n      break;\r\n    case et.elementinfo_locate:\r\n      qI.SubItems = [\r\n        get('level'),\r\n        get('baseLevel'),\r\n        get('topLevel'),\r\n        get('block'),\r\n        get('zone'),\r\n      ];\r\n      break;\r\n    default:\r\n      qI.SubItems = [];\r\n      break;\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../text/TextVMUtil';\r\nimport * as util from './DO_ElementVMUtil'\r\n\r\nexport class DO_ElementVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      subItems: observable,\r\n      isOpenSub : observable\r\n    })\r\n  }\r\n\r\n  get Title(){\r\n    return this.ModelItem.Title\r\n  }\r\n\r\n  get IsHaveButton(){\r\n    return this.SubItems.length !== 0;\r\n  }\r\n\r\n  subItems = undefined\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems\r\n  }\r\n\r\n  isOpenSub = false\r\n  get IsOpenSub(){\r\n    return this.isOpenSub\r\n  } set IsOpenSub(v){\r\n    this.isOpenSub = v;\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    this.IsOpenSub = !this.IsOpenSub;\r\n    this.ToggleSubContentVM.Content = util.GetToggleSubContent(this)\r\n  }\r\n\r\n  toggleSubContentVM\r\n  get ToggleSubContentVM(){\r\n    if (!this.toggleSubContentVM){\r\n      this.toggleSubContentVM = \r\n        textUtil.get(util.GetToggleSubContent(this))\r\n    }\r\n    return this.toggleSubContentVM;\r\n  }\r\n}","import { DO_ElementVM } from \"./DO_ElementVM\"\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new DO_ElementVM();\r\n\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetSubItems = (q) => {\r\n  return q.ModelItem.SubItems.map(x => get(x));\r\n}\r\n\r\nexport const GetToggleSubContent = (q) => {\r\n  return q.IsOpenSub ? '-' : '+';\r\n}","import { DO_CompVM } from \"./DO_CompVM\"\r\nimport * as modelUtil from './DO_CompUtil'\r\nimport * as itemUtil from '../DO_ElementVMUtil'\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI =new DO_CompVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(modelUtil.GetTest());\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  var obj = q.ModelItem.Items.map(x => itemUtil.get(x));\r\n  return obj;\r\n} ","import { DO_Comp } from \"./DO_Comp\"\r\nimport * as itemUtil from '../DO_ElementUtil'\r\nimport * as et from '../DO_ElementType'\r\n\r\nexport const GetTest = () => {\r\n  var qI = new DO_Comp();\r\n  \r\n  qI.Items = [\r\n    itemUtil.get(et.project),\r\n    itemUtil.get(et.element),\r\n  ]\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DO_CompVMUtil'\r\n\r\nexport class DO_CompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n  \r\n  items = undefined;\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport { DO_ElementVM } from \"./DO_ElementVM\";\r\nimport './comp/DO_Comp.css'\r\n\r\nclass DO_ElementView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DO_ElementVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className='doelement'>\r\n          {data.Title}\r\n\r\n          {/* Toggle Sub Button */}\r\n          {data.IsHaveButton ?\r\n            <Button className='doelement__button'\r\n              type='primary' size='small'\r\n              onClick={data.ToggleSub}>\r\n                {data.ToggleSubContentVM.Content}\r\n              </Button>\r\n            : ''}\r\n\r\n          {/* Sub Items */}\r\n          {data.IsOpenSub ?\r\n            <div className='doelement__dict'>\r\n              {data.SubItems.map(x => {\r\n                return <DO_ElementView key={x.Title}\r\n                  store={x} />\r\n              })}\r\n            </div>\r\n            : ''}\r\n        </span>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DO_ElementView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport { DO_CompVM } from \"./DO_CompVM\";\r\nimport * as util from './DO_CompVMUtil'\r\nimport './DO_Comp.css'\r\nimport DO_ElementView from \"../DO_ElementView\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass DO_CompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='doelement__dict'>\r\n          {data.Items ?\r\n            data.Items.map(x => {\r\n              return <DO_ElementView key={x.Title}\r\n                store={x} />\r\n            })\r\n            : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DO_CompView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport PMDataView from '../main/single/form/PMDataView';\r\nimport { Col, Row } from 'antd';\r\nimport MassResultCompView from '../main/entity/mass/result/MassResultCompView';\r\nimport { PMDataVM } from '../main/single/form/PMDataVM';\r\nimport * as pvt from '../main/entity/project/ProjectViewType'\r\nimport DO_CompView from '../main/entity/doc/comp/DO_CompView';\r\nimport '../main/entity/project/comp/ProjectComp.css'\r\n\r\nclass TestView extends Component {\r\n  render() {\r\n    var data = PMDataVM.Instance;\r\n\r\n    var elem = ''\r\n    switch (data.ProjectViewType) {\r\n      case pvt.mass:\r\n        elem = <div className='massresult__comp__wrapper'>\r\n          <MassResultCompView store={data.MassResultCompVM} />\r\n        </div>\r\n        break;\r\n      case pvt.mepsetting:\r\n        elem = 'MEP Setting'\r\n        break;\r\n      case pvt.document:\r\n        elem = <DO_CompView />\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {elem}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TestView);\r\n","import './App.css';\r\nimport \"antd/dist/antd.css\";\r\nimport { Component } from 'react';\r\n\r\nimport TestView from './model/view/TestView';\r\nimport PMDataView from './model/main/single/form/PMDataView';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <PMDataView />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}