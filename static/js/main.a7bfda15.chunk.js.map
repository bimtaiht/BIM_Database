{"version":3,"sources":["model/text/TextState.js","model/text/TextVM.js","model/text/TextVMUtil.js","model/input/InputView.js","util/apiUtil.js","model/main/entity/mass/MassType.js","model/main/entity/mass/item/MassItemField.js","util/generalUtil.js","model/main/entity/mass/table/MassColumn.js","model/input/NewInputView.js","model/text/TextRenderState.js","model/text/TextRenderItem.js","model/text/TextRenderItemUtil.js","model/text/TextRender_Dict.js","model/text/EditableTextVM.js","model/main/single/model/CategoryData.js","model/main/single/model/CategoryDataUtil.js","model/main/entity/filter/FilterCategoryType.js","model/main/entity/filter/FilterValueType.js","model/main/entity/filter/StringFilterType.js","model/main/entity/filter/NumberFilterType.js","model/main/entity/filter/EntFilterUtil.js","model/main/entity/filter/EntFilter.js","model/main/entity/mass/table/rowgroup/MGI_I_CreateType.js","model/main/entity/mass/table/rowgroup/MGI_ItemUtil.js","model/main/entity/mass/table/rowgroup/MGI_Item.js","model/main/entity/mass/item/MassItem.js","model/main/entity/mass/item/phaseValue/MIPh_Item.js","model/main/entity/mass/item/phaseValue/MIPh_ItemUtil.js","model/main/entity/mass/item/MassItemUtil.js","model/main/entity/mass/table/rowgroup/MassGroupItem.js","model/main/entity/mass/table/rowgroup/MassGroupComponent.js","model/main/entity/mass/table/rowgroup/MassGroupComponentUtil.js","model/main/entity/mass/table/rowgroup/MassGroupItemUtil.js","model/select/MultiSelectVMUtil.js","model/select/MultiSelectVM.js","model/select/MultiSelectView.js","model/hover/EntHoverVM.js","model/hover/EntHoverView.js","model/select/SelectVMUtil.js","model/select/SelectVM.js","model/float/FloatItemVM.js","model/float/FloatItemVMUtil.js","model/float/FloatItemView.js","model/select/SelectView.js","model/main/entity/mass/table/location/RRLF_LocationType.js","model/main/entity/mass/table/location/ReplaceRowLocationFactory.js","model/main/entity/mass/table/location/ReplaceRowLocationFactoryUtil.js","model/main/entity/mass/table/MassRow_Field_InputType.js","model/select/twocol/TwoCol_SelectVM.js","model/select/twocol/TwoCol_SelectVMUtil.js","model/select/twocol/TwoCol_SelectView.js","model/main/entity/mass/table/tool/MassRow_ToolElement.js","model/main/entity/mass/table/tool/MassRow_ToolElementUtil.js","model/main/entity/mass/table/tool/MassRow_ToolElementView.js","model/main/entity/mass/table/MassRow.js","model/text/EditableTextVMUtil.js","model/text/TextView.js","model/main/entity/mass/table/MassCell.js","model/main/entity/mass/table/value/MassCell_Value.js","model/main/entity/mass/table/MassCellUtil.js","model/main/entity/mass/table/MassRowUtil.js","model/main/entity/mass/table/MassTableUtil.js","model/main/entity/setting/base/SettingType.js","model/main/entity/setting/base/Setting.js","model/main/entity/setting/massGroup/MassGroupSettingData.js","model/main/entity/mass/MassPropertyName.js","model/main/entity/setting/massGroup/MassGroupSettingDataUtil.js","model/main/entity/setting/massGroup/MassGroupSetting.js","model/main/entity/setting/massGroup/MassGroupSettingUtil.js","model/main/entity/workpackage/WorkpackageVM.js","model/main/entity/workpackage/WorkpackageVMUtil.js","model/checkbox/CheckboxVM.js","model/checkbox/CheckboxVMUtil.js","model/main/entity/workpackage/WorkpackageInputVM.js","model/main/entity/workpackage/WorkpackageInputVMUtil.js","model/main/entity/workpackage/Workpackage_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVM.js","model/main/entity/setting/base/SettingVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingVM.js","model/main/entity/filter/EntFilterVM.js","model/main/entity/filter/EntFilterVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingVMUtil.js","model/main/entity/setting/base/SettingVMUtil.js","model/main/entity/setting/base/SettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVM.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictVMUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVM.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingVMUtil.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSetting.js","model/main/entity/setting/massExport/exportSetting/MES_ValueRetrieveType.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingDataVM.js","model/main/entity/setting/massExport/MassExportSettingDataVMUtil.js","model/main/entity/setting/massExport/MassExportSettingVM.js","model/main/entity/setting/massExport/MassExportSettingVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVM.js","model/main/entity/setting/massExport/MassExportSetting_DictVMUtil.js","model/main/entity/setting/massExport/MassExportSettingInputVMUtil.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVM.js","model/main/entity/setting/massGroup/MassGroupSetting_DictVMUtil.js","model/main/entity/phase/PhaseVM.js","model/main/entity/phase/PhaseVMUtil.js","model/main/entity/state/StateType.js","model/main/entity/phase/Phase_DictVM.js","model/main/entity/phase/PhaseInputVM.js","model/main/entity/phase/Phase_DictVMUtil.js","model/main/entity/phase/PhaseInputVMUtil.js","model/main/entity/project/ProjectVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemStateType.js","model/checkbox/CheckboxView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVM.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue_InputType.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueVMUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVM.js","model/main/entity/setting/typicallevel/filter/TLS_FilterVMUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVM.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataVMUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVM.js","model/main/entity/setting/typicallevel/TypicalLevelSettingVMUtil.js","model/main/entity/project/ProjectVMUtil.js","model/main/entity/project/Project_DictVM.js","model/main/entity/project/Project_DictVMUtil.js","model/main/entity/mass/result/MassResultCompVM.js","model/main/entity/mass/result/MassResultCompVMUtil.js","model/table/RenderState.js","model/table/RenderItem.js","model/table/RenderItemUtil.js","model/table/Render_Dict.js","model/table/TitleRenderItem.js","model/table/TitleRenderItemUtil.js","model/table/TitleRender_Dict.js","model/table/TableColumn_InputType.js","model/table/TableColumnUtil.js","model/table/TableColumn.js","model/table/TableRow.js","model/table/TableCell.js","model/table/TableCellUtil.js","model/table/TableRowUtil.js","model/table/TableVM.js","model/table/TableVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVM.js","model/main/entity/setting/workitemexport/WorkItemExportSettingVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportDataVMUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVM.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil.js","model/main/single/form/PMDataVMUtil.js","model/main/entity/project/ProjectViewType.js","model/main/single/form/PMDataVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVM.js","model/main/entity/setting/massGroup/field/MGS_FieldVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingDataVM.js","model/main/entity/setting/massGroup/MassGroupSettingDataVMUtil.js","model/main/entity/setting/massGroup/MassGroupSettingVM.js","model/main/entity/setting/massGroup/MassGroupSettingVMUtil.js","model/export/csv/CSVExport.js","model/export/excel/ExcelExport.js","model/main/entity/mass/table/export/MT_Cell.js","model/main/entity/mass/table/export/MT_CellUtil.js","model/main/entity/mass/table/export/MT_Data_Row.js","model/main/entity/mass/table/export/MT_Cell_ValueType.js","model/main/entity/mass/table/export/MT_Data_RowUtil.js","model/main/entity/mass/table/export/MT_Data_Worksheet.js","model/main/entity/mass/table/export/MT_Data_WorksheetUtil.js","model/main/entity/mass/table/export/MT_RawData_Worksheet.js","model/main/entity/mass/table/export/MT_RawData_WorksheetUtil.js","model/main/entity/mass/table/export/MT_Workbook.js","model/main/entity/mass/table/export/MT_WorkbookUtil.js","model/main/entity/mass/table/MassGroupInput_StateType.js","model/main/entity/mass/table/MassTable.js","model/main/entity/mass/table/MassColumnUtil.js","model/export/excel/ExcelExportUtil.js","model/main/entity/mass/item/MassItem_Dict.js","model/main/entity/mass/item/MassItem_DictUtil.js","model/main/entity/mass/result/MassResultComp.js","model/main/entity/mass/result/MassResultCompUtil.js","model/main/entity/mass/rebar/RebarMass_DictUtil.js","model/main/entity/value/ValueUnit.js","model/main/entity/mass/rebar/RebarMass_Dict.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroup.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupUtil.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValue.js","model/main/entity/setting/typicallevel/filter/TLS_Filter.js","model/main/entity/setting/typicallevel/filter/TLS_FilterUtil.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItem.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSettingData.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataUtil.js","model/main/entity/setting/typicallevel/TypicalLevelSetting.js","model/main/entity/setting/typicallevel/TypicalLevelSettingUtil.js","model/main/entity/phase/Phase.js","model/main/entity/phase/PhaseUtil.js","model/main/entity/phase/Phase_Dict.js","model/main/entity/setting/base/SettingUtil.js","model/main/entity/phase/PhaseInput.js","model/main/entity/phase/Phase_DictUtil.js","model/main/entity/phase/PhaseInputUtil.js","model/main/entity/project/Project.js","model/main/entity/exportset/ExportSet.js","model/main/entity/exportset/ExportSetVersion.js","model/main/entity/exportset/ExportSetVersionUtil.js","model/main/entity/exportset/ExportSetUtil.js","model/main/entity/level/Level_Dict.js","model/main/entity/level/Level.js","model/main/entity/level/LevelUtil.js","model/main/entity/project/ProjectUtil.js","model/main/entity/value/ValueRetrieveFrom.js","model/main/entity/level/Level_DictUtil.js","model/main/entity/project/Project_Dict.js","model/main/entity/setting/elementFilter/ElementFilterSetting.js","model/main/entity/setting/elementFilter/ElementFilterSettingData.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingUtil.js","model/main/entity/setting/base/SettingInput.js","model/main/entity/setting/base/SettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSettingInput.js","model/main/entity/setting/elementFilter/ElementFilterSettingInputUtil.js","model/main/entity/setting/elementFilter/ElementFilterSetting_Dict.js","model/main/entity/setting/massExport/MassExportSettingData.js","model/main/entity/setting/massExport/MassExportSettingDataUtil.js","model/main/entity/setting/massExport/MassExportSetting.js","model/main/entity/setting/massExport/MassExportSettingUtil.js","model/main/entity/setting/massExport/MassExportSettingInput.js","model/main/entity/setting/massExport/MassExportSettingInputUtil.js","model/main/entity/setting/massExport/MassExportSetting_Dict.js","model/main/entity/setting/massGroup/MassGroupSetting_Dict.js","model/main/entity/setting/versionCompare/VCS_Item.js","model/main/entity/setting/versionCompare/VersionCompareSetting.js","model/main/entity/setting/versionCompare/VersionCompareSettingUtil.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_Dict.js","model/main/entity/tracking/TrackingItem.js","model/main/entity/tracking/Tracking.js","model/main/entity/workpackage/WorkpackageInput.js","model/main/entity/workpackage/Workpackage_Dict.js","model/main/entity/setting/massDetail/MassDetailSetting_Url.js","model/main/entity/setting/massDetail/MassDetailSettingData.js","model/main/entity/setting/massDetail/MassDetailSetting.js","model/main/entity/setting/massDetail/MassDetailSettingUtil.js","model/main/entity/setting/massDetail/MassDetailSettingDataUtil.js","model/main/entity/setting/massDetail/MassDetailSetting_Dict.js","model/main/entity/setting/massDetail/MassDetailSetting_DictUtil.js","model/main/single/model/PMDataUtil.js","model/main/single/model/PMData.js","model/main/entity/workpackage/Workpackage.js","model/main/entity/workpackage/WorkpackageUtil.js","model/main/entity/workpackage/Workpackage_DictVM.js","model/main/entity/workpackage/Workpackage_DictView.js","model/main/entity/filter/EntFilterView.js","model/main/entity/setting/elementFilter/ElementFilterSettingDataView.js","model/main/entity/setting/elementFilter/ElementFilterSetting_DictView.js","model/main/entity/setting/massExport/exportSetting/MES_ValueSettingView.js","model/main/entity/setting/massExport/MassExportSettingDataView.js","model/main/entity/setting/massExport/MassExportSetting_DictView.js","model/main/entity/mass/table/value/MassCell_ValueView.js","model/main/entity/mass/table/MassCellView.js","model/text/EditableTextView.js","model/main/entity/mass/table/MassRowView.js","model/export/csv/CSVExportView.js","model/main/entity/mass/table/MassTableView.js","model/main/entity/mass/result/MassResultCompView.js","model/table/TableView.js","model/main/entity/setting/workitemexport/WorkItemExportSetting_DictView.js","model/main/entity/nav/left/LeftNav.js","model/main/entity/nav/left/LeftNavItem.js","model/main/entity/nav/left/LeftNavItemUtil.js","model/main/entity/nav/left/LeftNavUtil.js","model/main/entity/nav/left/LeftNavVMUtil.js","model/main/entity/nav/left/LeftNavVM.js","model/main/entity/nav/left/LeftNavView.js","model/main/entity/mass/detail/MassDetailTableUtil.js","model/main/entity/mass/detail/MassDetailTable.js","model/main/entity/mass/detail/MassDetailInput_StateType.js","model/main/entity/mass/detail/MassDetailVMUtil.js","model/main/entity/mass/detail/MassDetailVM.js","model/main/entity/mass/detail/MassDetailTableView.js","model/main/entity/mass/detail/MassDetailView.js","model/main/entity/setting/typicallevel/levelGroup/LevelGroupView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterValueView.js","model/main/entity/setting/typicallevel/filter/TLS_FilterView.js","model/main/entity/setting/typicallevel/pageItem/TLS_PageItemView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingDataView.js","model/main/entity/setting/typicallevel/TypicalLevelSettingView.js","model/main/entity/phase/Phase_DictView.js","model/main/entity/mass/rebar/RebarMass_DictView.js","model/main/entity/project/comp/ProjectCompVM.js","model/main/entity/project/comp/ProjectCompVMUtil.js","model/main/entity/project/comp/ProjectCompView.js","model/main/single/form/PMDataView.js","model/main/entity/doc/comp/DO_Comp.js","model/main/entity/doc/DO_Element.js","model/main/entity/doc/DO_ElementType.js","model/main/entity/doc/DO_ElementUtil.js","model/main/entity/doc/DO_ElementVM.js","model/main/entity/doc/DO_ElementVMUtil.js","model/main/entity/doc/comp/DO_CompVMUtil.js","model/main/entity/doc/comp/DO_CompUtil.js","model/main/entity/doc/comp/DO_CompVM.js","model/main/entity/doc/DO_ElementView.js","model/main/entity/doc/comp/DO_CompView.js","model/view/TestView.js","App.js","reportWebVitals.js","index.js"],"names":["text","password","TextVM","content","undefined","placeholder","State","ts","makeObservable","this","observable","v","onSetContent","style","inputStyle","wrapper","position","get","q","qI","InputView","props","onChange","e","value","target","state","Content","store","textVMUtil","data","Password","Component","observer","http","timeout","axios","create","baseURL","Accept","handleResponse","response","success","status","message","statusText","callApi","action","a","err","error","timeout_default","url","config","put","payload","result","post","concrete","formwork","rebar","Project","Phase","Workpackage","Value","Unit","elementName","MassType","workItem","level","diameter","block","zone","typename","materialName","systemtype","systemclassification","familyName","size","GetForMassGroup","GetFullFields","massItem","field","fields","isFromElement","massType","includes","mt","groupName","GetValueString","massFieldValue","Name","FullName","GetListForTypicalLevelFilter","randomId","Intl","DateTimeFormat","Math","random","toString","substr","newGUID","replace","c","crypto","getRandomValues","Uint8Array","UpdateFromModel","obj","M2VM","MoveItem","list","oldIndex","newIndex","temp","IsSameValues","list1","list2","isValidCheck","isSame","length","forEach","x","i","Remove","dict","key","index","findIndex","Key","splice","Add","func","isDelete","newfunc","push","ExcelCellName","row","col","n","ordA","charCodeAt","len","s","String","fromCharCode","floor","ExcelColumnName","ExcelRangeName","row1","col1","row2","col2","MassColumn","Cells","_id","genUtil","Dict","Columns","indexOf","NewInputView","handleChange","OnPaste","preventDefault","pasteEvent","originalEvent","clipboardData","getData","OnKeyDown","ctrlKey","which","keyCode","contentEditable","React","createRef","minWidth","fontFamily","className","innerRef","Placeholder","html","onKeyDown","onPaste","_default","edit","TextRenderItem","render","util","GetRender","rs","context","Is_Tool_Visible","Is_Edit_Visible","type","onClick","Edit","Is_OK_Visible","EditOK","TextRender_Dict","Items","item","Render","renderUtil","EditableTextVM","IsEditing","OnSet_RenderState_Func_Dict","renderState","CanChange_RenderState","RenderState","Render_Dict","titleFunc","render_Dict","CategoryData","categoryNames","instance","category","family","parameter","bystring","bynumber","byequal","bycontain","bynotcontain","bysmaller","bybigger","bybetween","categoryType","EntFilter","ValueType","valueType","NumberFilterType","numberFilterType","StringFilterType","stringFilterType","Values","values","CategoryType","GetValueStorageList","fct","Instance","CategoryNames","PMData","ParameterNames","IsValid","filter","isValid","filterValues","fvt","sft","lowerVal","toLowerCase","isNaN","nft","leftVal","rightVal","IsEqualLeft","IsEqualRight","valueStorageList","byuser","byauto","mgi","createType","MGI_Item","MassGroupItem","CreateType","ct","Title","Delete","Index","title","newMGI","newMGI_id","SupComponent","AllItems","id","supValue","SupValue","MassItem","IsGetElement","OnGetElementDone_Funcs","GetValue","mif","Element","roundingFactor","toLocaleString","maximumFractionDigits","getValFunc","AddDatabase","handle","apiData","ApiData","command","api","then","DeleteDatabase","IsGet_TLS_LevelGroup","OnGet_TLS_LevelGroup_Func_Dict","OnGet_FullValue_Func_Dict","GetPhaseItem","phaseName","PhaseItems","project","workpackage","phases","projectId","elementId","workpackageId","exportSetId","exportSetVersionId","unit","info","Info","get_TLS_LevelGroup","tls_LevelGroup","Get_TLS_LevelGroup","get_FullValue","fullValue","Get_FullValue","phaseItems","MIPh_Item","Handle_TLS_LevelGroup","phase","getLevelGroup_Func","tls","pi","GetValidTLS_PageItem","Data","GetValidTLS_LevelGroup","TypicalLevelSetting","TLS_LevelGroup","OnGetTypicalLevelSetting_Funcs","validPi","PageItems","IsValidTLS_PageItem","pageItem","filters","Filters","Field","validLg","LevelGroups","Primary","Handle_FullValue","IsGet_FullValue","getFullValue_Func","lg","count","Count","FullValue","pmData","Elements","GetProject","Project_Dict","getByViewDetail","viewDetail","masses","items","map","GetWorkpackage","Workpackage_Dict","Workpackages","GetPhases","Phase_Dict","exportSetVersionIds","GetValidPhasesByInput","inputPhases","MassResultComp","Phases","GetPhaseItems","phaseItemUtil","SubComponents","NotIncludeValues","AddNotIncludeValue","GetItem","itemUtil","SupRows","On_AddSupRow_Func_Dict","AddSupRow","NewRow","HandleCreatedByUserRows","OnIsFirstSetSupRow_Funcs","mgii_ct","IsAdd_Done","supRow","supRows","y","addRow","Table","GetRow","IsCreatedByUser","CreatedByUser_Rows","handleRow","handleNonField","subMgcIndex","Filter","replaceMgi","NewMGI","supName","Handle_ReplaceMGI","subComponents","valueOrders","ValueOrders","notIncludeValues","isFirstSetSupRow","IsHaveMassItem","table","MassGroupComponent","originComponent","OriginComponent","AllSubItems","apply","supItem","filterUtil","SupItem","Clone","GetOriginComponent","subComps","supCom","getFromDb","compUtil","IsHaveValueOrder","GetTable","initialItems","MultiSelectVM","InitialItems","GetInitialIndexs","selectedIndexs","GetSelectedItems","SelectedIndexs","open","canOpen","InitialIndexs","initialIndexs","SelectedItems","selectedItems","OnSelectedItemChanged","titleRender","DisplayContent","OnSetOpen","Option","Select","MultiSelectView","onValueChange","onDropdownVisibleChange","Open","width","elems","displayContent","TitleRender","mode","optionFilterProp","filterOption","input","option","children","CanOpen","EntHoverVM","IsElementVisible","ShowElement","HideElement","EntHoverView","onMouseEnter","onMouseLeave","initialItem","SelectVM","InitialItem","GetInitialIndex","selectedIndex","GetSelectedItem","SelectedIndex","CanClear","Clear","isDisabled","InitialIndex","initialIndex","SelectedItem","selectedItem","padding","FloatItemVM","getClassName","location","loc","FloatItemView","getWrapperContent","floatItemVMUtil","SelectView","floatElem","floatItemStore","DivStyle","showSearch","disabled","IsDisabled","inside","lower","ReplaceRowLocationFactory","Location","lt","ToggleLocation","backgroundColor","Color","border","select","TwoCol_SelectVM","inputTitle","outputTitle","availableItems","GetKey","index1","AvailableItems","IsChanged","Unselect","InputTitle","OutputTitle","TwoCol_SelectView","MassRow_ToolElement","editable_TitleVM_RenderState","Method","name","Editable_TitleVM","MassRow_ToolElementView","Editable_TitleVM_RenderState","trs","UpCircleOutlined","DownCircleOutlined","danger","MassRow","subItems","UpdateCells","UpdateData","isShowSub","rank","isHaveSub","IsToolVisible","FieldInputType","mr_f_it","Toggle_FieldInputType","TempField","FieldInputVM","FieldSelectVM","GetCellByColumn","Column","Is_Original_SupRow","SubItems","CurrentList","Rank","IsHaveSub","ToggleSub","IsShowSub","SetSubFields","tempSubFields","TempSubFields","SubFields","supMgi","mgc","SubItem","subMgis","mgiUtil","SubMassGroupComponent","Original_SubMassGroupItem","ColumnField","ValidPhasesByInput","HandleItem","MoveUp","orderItems","OrderMGI","OrderItems","orderValues","OrderValues","mgiIndex1","mgiIndex2","MoveDown","AddSub","MainRows","ReplaceOK","factory","ReplaceFactory","refRow","ReferenceRow","rrlf_lt","Replace","Replace_SubItems","Temp_SelectSubItems","IsReplaced","Original_SupRow","oldMgi","newMgi","Replace_SubMassGroupItem","MainMGI","mgi_i","ReplaceMGI","cl","IsShowSubFieldSelect","IsModalVisible","OpenModal","TitleVM","SubFieldSelectVM","SelectSubItemsVM","LocationStorageList","locSelectVM","LocationSelectVM","ModalOK","ModalCancel","PMS_WorkPackages","AddHandleTotal_Cell","cell","HandleTotal_Cells","Is_HandleTotal_Cells_Done","Add_Handled_CreatedByUser_Row","IsHaveAdditionInformation","AdditionInformation","Is_SelectSubItems_ModalOpen","Open_SelectSubItems_Modal","SelectSubItems_ModalCancel","SelectSubItems_ModalOK","isShow_RawValue","currentList","cells","reduce","b","concat","massGroupItem","replaceMGI","original_SubMassGroupItem","replace_SubMassGroupItem","isReplaced","original_SupRow","subFields","ToggleButtonContentVM","toggleButtonContent","toggleButtonContentVM","ToggleButtonContent","OnSetContent","fieldInputVM","fieldSelectVM","unCheckedChildren","checkedChildren","checked","subFieldSelectVM","titleVM","editable_TitleVM","canEdit","isToolVisible","editTextUtil","IsShow_RawValue","ToolElement","AllRows","locationSelectVM","replaceFactory","pms_WorkPackages_SelectVM","selectUtil","titleWidth","visible","onOk","onCancel","gutter","marginTop","flex","FieldInputElement","SelectSubItems_ModalElement","ButtonStyle","toolElement","trigger","InfoCircleOutlined","ExportInfo","TotalValue","Infos","ExportValue","on_HandleTotal_Cells_Done_Dict_Funcs","On_HandleTotal_Cells_Done_Dict_Funcs","selectSubItemsVM","tc_selectUtil","marginLeft","RawValue","TextView","MassCell","OnGet_TotalValue_Func_Dict","totalValue","AsString","console","log","Row","isUpdateSup","oldVal","SubCells","IsHaveVCS_Item","ShowDetail","process","openTabFunc","window","getUrl","viewDetailId","GetViewDetailId","vcs_Item","valueColor","tdBgColor","massIds","OnGet_TLS_LevelGroups_Func_Dict","isHaveWarning","tls_LevelGroup_Descriptions","unitVM","Get_TotalValue","ContentVM","ValueString","contentVM","valueObject","subCells","isHaveVCS_Item","ValueColor","TDBgColor","color","fontWeight","tls_LevelGroups","Get_TLS_LevelGroups","MassCell_Value","GetIsHaveVCS_Item","ColumnIndex","GetValueColor","VCS_Item","GetTDBgColor","Handle_VCS_Item","VersionCompareSetting","compareIndex","compareItem","getItem","ratio","GetMassType","isPending","Handle_TLS_LevelGroups","IsGet_TLS_LevelGroups","handledCount","checkadd_Val","val","handle_Val","Array","isArray","TLS_LevelGroups","targetObj","ReGet_Unit","IsGet_Unit","Get_Unit","ReHandle_TotalValue","IsGet_TotalValue","Handle_TotalValue","CanHave_TotalValue","checkedList","totalVal","handleItems","Number","GetIsHaveWarning","getWarningFunc","levelGroups","IsHaveWarning","Handle_TLS_LevelGroup_Descriptions","IsGet_TLS_LevelGroup_Descriptions","TLS_LevelGroup_Descriptions","getDescFunc","FullDescription","OnGetLevelStorageList_Func_Dict","OnGet_TLS_LevelGroups_Funcs","Get_SupItem","IsGet_SupItem","Get_SubCells","subRows","Get_ValueObject","Get_ValueString","formatValue","GetRank","GetStyle","GetIsHaveSub","GetToggleButtonContent","GetFieldSelectVM","storageList","MIFs_ForMassGroup","GetSubFieldSelectVM","multiSelectUtil","Order","sort","GetLocationSelectVM","GetOriginal_SubMassGroupItem","GetReplace_SubMassGroupItem","GetSubFields","subMGI","SubMassGroupItem","mgis","lastValidIndex","isValidHandle","HaveMassItemSubComponents","currentIndex","CreateSubMassGroupItem","mgcIndex","mgi_I","mgi_iUtil","GetOn_HandleTotal_Cells_Done_Dict_Funcs","Get_Original_SupRow","IsGet_Original_SupRow","Get_Original_Full_SupRows","reverse","Get_IsHaveAdditionInformation","Get_AdditionInformation","Original_Full_SupRows","Get_ToolElement","Get_Cells","GetIsShow_RawValue","GetMassGroupName","MassGroupSetting","GetMainMGI","MainMGC","SupRow","elementfilter","massexport","massgroup","massdetail","Setting","OnDelete","Input","EditItemId","SaveDatabase","isNew","Url","OnNameChanged","description","OnDescriptionChanged","OnDataChanged","settingType","SettingType","Description","MassGroupSettingData","AddNewField","MassPropertyNames","Fields","Category","GetDefaultFields","mpn","massGroupCompUtil","massGroupComponent","dataUtil","WorkpackageVM","code","fullName","WorkpackageVMs","Code","codeVM","nameVM","descriptionVM","OnCodeChanged","OnFullNameChanged","GetSupItem","supWp","PMDataVM","Workpackage_DictVM","CheckboxVM","Cancel","ischecked","isDisable","onCheckChange","WorkpackageInputVM","workpackageVMStorageList","commandName","IsNew","WorkpackageInput","DeleteFunc","CodeVM","NameVM","DescriptionVM","IsNewVM","Ischecked","selectVM","SupItemSelectVM","supItemSelectVM","selectVMUtil","WorkpackageVMStorageList","CommandVM","workpackageVM","isNewVM","checkboxVMUtil","commandVM","CommandName","pmDataVM","GetCommandName","GetWorkpackageVMStorageList","GetWorkpackageInputVM","dictVM","OnGetItemsDone_Funcs","OnAddDatabaseDone","OnAdd","workpackageInputVMUtil","ElementFilterSetting_DictVM","ModelItem","OnGetItemsDone","currentItem","CurrentItem","EditItem","SettingVM","GetDataVM","OnGetDataVM","textUtil","dataVM","OnInitialSetDataVM","ElementFilterSettingVM","cateFilterVM","CategoryFilterVM","OnInitialData","famFilterVM","FamilyFilterVM","EntFilterVM","SetData","ValueTypeSelectVM","StringFilterTypeSelectVM","ValuesSelectVM","ValueStorageList","valueTypeSelectVM","FilterValueTypes","stringFilterTypeSelectVM","StringFilterTypes","valuesSelectVM","multiSelectVMUtil","ValueSelectPlaceholder","ElementFilterSettingDataVM","GetCategoryFilterVM","CategoryFilter","filterVMUtil","isHaveFamilyFilter","GetFamilyFilterVM","FamilyFilter","IsHaveFamilyFilter","IsHaveFamilyFilterVM","categoryFilterVM","familyFilterVM","isHaveFamilyFilterVM","DataVM","dataVMUtil","SettingInputVM","settingTypeVM","editItem","SettingTypeVM","ElementFilterSettingInputVM","GetItems","itemVMUtil","GetInput","inputVMUtil","MES_ValueSettingVM","ValueSettingVMs","RetrieveTypeSelectVM","RetrieveType","ValueFilterVM","WorkpackageSelectVM","MassTypeSelectVM","retrieveType","retrieveTypeSelectVM","RetrieveTypeStorageList","valueFilterVM","ValueFilter","modelItem","workpackageSelectVM","massTypeSelectVM","MassTypeStorageList","GetRetrieveTypeStorageList","ValueRetrieveTypes","GetWorkpackageVM","GetMassTypeStorageList","MassTypes","MES_ValueSetting","ValueSettings","byparameter","GetDefault","vrt","valueFilter","GetApiData","MassExportSettingDataVM","elementFilterVMStorageList","valueSettingVMs","AddNewValueSettingVM","AddNewValueSetting","itemView","valueSettingVMUtil","ElementFilterSelectVM","ElementFilterVM","elementFilterVM","ElementFilter","elementFilterSelectVM","ElementFilterVMStorageList","modelList","oldCount","newCount","delta","abs","originItemVM","valueSettingUtil","itemVM","GetElementFilterVMStorageList","GetElementFilterVM","elemFilter","GetValueSettingVMs","MassExportSettingVM","MassExportSettingInputVM","MassExportSetting_DictVM","MassGroupSetting_DictVM","PhaseVM","addversion","Phase_DictVM","AddVersion","stateType","OK","AddMassVersion","warning","PhaseInputVM","ProjectVM","typicalLevelSetting","typicalLevelSetting_ForEdit","phase_DictVM","rebarMass_Dict","RebarMass_Dict","InputExportSet","Level_Dict","CheckboxView","onCheckedChange","OnCheckChanging","LevelGroupVM","primary","isSelectOpen","LevelStorageList","Levels","levelSelectVM","OnGetLevelStorageList_Funcs","triggerVM","IsSelectOpen","buttonTypeVM","addContentVM","GetDefaultPrimary","TLS_FilterValueVM","inputType","ToggleInputType","InputType","it","ValueVM","SwitchChecked_Funcs","valueVM","SelectOpen","selectOpen","PopoverState","popoverState","GetPopoverState","TLS_FilterVM","AddItem","valueUtil","FieldFilterStorageList","FieldStorageList","TLS_PageItemVM","st","ToggleState","NameOK","NameCancel","isLast","IsLast","AllTabs","IsModelChangePageKey","CurrentPageKey","AddLevelGroup","levelGroupUtil","AddFilter","delElem","InputToolElement","InputElement","GetLevelGroups","GetFilters","TypicalLevelSettingDataVM","pageItems","AddPageItem","pageItemUtil","IsHaveAddCommandTab","allTabs","currentPageKey","ChangePageKey","addCommandTab","TitleElement","AddCommandTab","GetPageItems","TypicalLevelSettingVM","Save","GetPhase_DictVM","GetItemsDone","phaseDictVMUtil","GetTypicalLevelSetting_Func","model","typicalLevelUtil","GetTypicalLevelSetting","GetTypicalLevelSetting_ForEdit","TypicalLevelSetting_ForEdit","Project_DictVM","MassResultCompVM","IsShowProjectSelect","CanHavePhase","isHavePhase","massGroupSettingStorageList","IsDataPending","handledRatio","GetMassData","HandledRatio","projects","Projects","projectVMs","projectVMStorageList","ProjectSelectVM","projectSelectOpen","ProjectPopoverState","projectPopoverState","projectSelectVM","ProjectVMStorageList","ProjectVMs","placement","rel","href","ProjectSelectOpen","phaseVMs","massItem_Dict","MassItem_Dict","phaseVMStorageList","PhaseSelectVM","phaseSelectVM","PhaseVMStorageList","PhaseVMs","IsHavePhase","isShowPhaseSelectVM","MassGroupSettingSelectVM","massGroupSettingSelectVM","MassGroupSettingStorageList","toFixed","loadingSpinTipVM","LoadingSpinTip","LoadingSpinTipVM","isfetchProjects","ViewItem","GetProjectVMStorageList","massTable","MassTable","OnIsUpdateDataDone_Funcs","OnSetHandledRatio_Funcs","GetProjectVMs","GetPhaseVMs","GetMassGroupSettingStorageList","MassGroupSetting_Dict","GetProjectPopoverStateValue","RenderItem","dataIndex","inputVM","TitleRenderItem","column","CanHandleColumn","IsShow_MoveCommand","CanEditColumn","CanDeleteColumn","TitleRender_Dict","renders","TableColumn","DataIndex","GetByTitle","OnSetTitleOK_Funcs","Update","GetActionColumn","editElem","CanHandleItem","CanEditItem","CanDeleteItem","DeleteItem","IsAction","display","AddColumn","CanAddItem","TitleRenderState","Show_MoveCommand","Collapse_MoveCommand","MoveLeft","IsActive","MoveRight","l1","AllNames","titleRender_Dict","Column_InputType","AllColumnNames","InputVM","Column_Title_SelectWidth","CanShow_MoveCommand","TableRow","Item","Rows","TableCell","Override_Get_CellValue","GetCells","cellUtil","TableVM","CanAddColumn","IsShowActionColumn","columns","dataSource","rows","OnGetItemForAdd","IsTypeNotDefined","DataSource","rowUtil","OnDeleteItem","OnEditItem","colUtil","actionCol_Index","cit","WorkItemExportDataVM","WorkItemExportSettingVM","IsCategoryChecked","categoryCheckboxVM","checkboxUtil","WorkItemExportSetting","WorkItemExportSetting_DictVM","tableVM","GetTableVM","nameCol","isCateCol","CategoryCheckboxVM","isSubWorkItemCol","GetWorkpackage_DictVM","OnGetWorkpackagesDone","workpackageVMUtil","workpackage_DictVMUtil","GetElementFilterSetting_DictVM","elementFilterSetting_DictVMUtil","ElementFilterSetting_Dict","GetMassExportSetting_DictVM","massExportSetting_DictVMUtil","MassExportSetting_Dict","GetMassGroupSetting_DictVM","massGroupSetting_DictVMUtil","GetProject_DictVM","project_DictVMUtil","GetWorkItemExportSetting_Dict","wieDictVMUtil","WorkItemExportSetting_Dict","mass","typicallevel","inputdata","mepsetting","document","isDebug","OnSet_ProjectViewType_Func_Dict","projectViewType","pvt","OnSet_CurrentProject_Func_Dict","currentProject","main_Classname","workpackage_DictVM","elementFilterSetting_DictVM","massExportSetting_DictVM","massGroupSetting_DictVM","project_DictVM","massResultCompVM","massResultCompVMUtil","filterValueTypes","stringFilterTypes","valueRetrieveTypes","parameterNames","massPropertyNames","massTypes","workItemExportSetting_Dict","IsDebug","CurrentProject","UpdatedDate","MGS_FieldVM","FieldVMs","GetFieldStorageList","MassGroupSettingDataVM","fieldVMs","AddNewFieldVM","fieldVMUtil","GetFieldVMs","MassGroupSettingVM","CSVExport","Export","wb","Sheets","XLSX","json_to_sheet","Headers","SheetNames","excelBuffer","bookType","Blob","FileSaver","FileName","ExportTest","ws1","t","ws2","f","Override_Get_Data","Override_Get_FileName","fileName","ExcelExport","Workbook","Override_Get_Workbook","workbook","MT_Cell","Override_Get_Row","Override_Get_Column","Override_Get_Formula","formula","isContinueSubRows","Type","Formula","z","Format","Style","MT_Data_Row","Worksheet","FullRows","string","ws","GetSubItems","GetTitle","vc_dict","ValueCell_Dict","firstCol","First_ValueColumn","firstRow","First_ValueRow","getRowFunc","FullIndex","titleCell","c_vt","valueCell","IsContinueSubRows","Address","GetFullItems","FullItems","MT_Data_Worksheet","First_TitleColumn","First_TitleRow","mainRows","fullRows","valueCells","titleCells","fc","fr","font","bold","allCells","TitleCells","ValueCells","listCells","AllCells","range","minRow","minCol","maxRow","maxCol","RangeName","ResultData","MT_RawData_Worksheet","InfoFields","dataRows","Data_WS","tableRows","DataRows","records","ExportData","infoFields","Binding_DataRow","valueFields","Records","ifs","ifl","vfs","ValueFields","cell_val","data_cell","MT_Workbook","RawData_WS","data_WS","rawData_WS","All_WS","GetData_WS","GetRawData_WS","IsValidTable","columnField","Init","Handled_CreatedByUser_Rows","GetColumn","GetCell","canAdd","Build","colField","IsHaveAsyncData","IsOnSaveMassGroup","HandledItems","HandledItemPhases","AddHandledItems","IsUpdateDataDone","colFieldValue","initialRow","HandleRowFieldIndex","GetRow_Value_FieldIndex","rowFieldIndex","itemCount","lastRow","rowField","valueString","Handle_AddRow","subMgcs","subIndex","mgiItem","r1","originalSupRow","isGet_SupRow_Done","fullFunc","sr","getSupRow","r","r2","awaitGetSupRowForAdd","SaveMassGroup","refSelectVM","Reference_MassGroupSetting_SelectVM","MassGroupSelectVM","MassGroupInput_State","mgi_st","Toggle_MassGroupInput_State","massGroupName","MassGroupInputOK","MassGroupName","needValidateForOveride","handle_UpdateMassGroup","refVM","mgsUtil","mgsVMUtil","MassGroupNameVM","Override_MassGroup_Modal_OKFunc","Is_Override_MassGroup_Modal_Open","MassGroupInputCancel","AddMainRow","massGroupSetting","mainMGC","mgi1","mainMGI","massGroupNameVM","massGroupSelectVM","formatedDate","dayjs","Date","now","format","wbUtil","excelExport","ovrgFileName","ovrgWb","eeUtil","ExportTitle","ExcelWorkbook","Is_First_Get_MassTable","wp_Dict","IsDataChanged","RefreshData","projectIds","phaseIds","massItemUtil","setExportSetData","exportSet","currentVersion","CurrentVersion","OnGetCurrentVersionDone_Func","inputExportSet","OnGetInputExportSetDone_Funcs","LevelGroup","levels","getLevelStorageList","IsGet_LevelStorageList","GetLevelStorageList","min","LevelIndexs","max","MinLevel","MaxLevel","FilterDescription","TLS_FilterValue","TLS_Filter","arr","TLS_PageItem","TypicalLevelSettingData","fieldFilterStorageList","levelStorageList","GetTest","GetFromDb_Async","phaseId","resData","editData","GetFieldFilterStorageList","fieldUtil","level_Dict","getLevelsFunc","OnGetExportSetVersions_Func","exportSetVersions","IsOnGetDb_Async","GetExportSetVersionData","ExportSetVersions","GetExportSetVersions","settingUtil","addVersionFunc","PhaseInput","phaseUtil","inputUtil","phase_Dict","phaseDictUtil","GetInputExportSetDone","getInputExportSetDone","ExportSet","GetCurrentVersionDone","ExportSetVersion","RetrieveFrom","retrieveFrom","GetCurrentVersion_Async","versionUtil","AddVersion_Async","addItem","Level","getAll","Elevation","elevation","GetRebarMass_Dict","rebarMassDictUtil","GetInputExportSet_Async","exportSetUtil","GetLevel_Dict","levelDictUtil","ElementFilterSetting","ElementFilterSettingData","categoryFilter","familyFilter","SettingInput","GetData","OnGetData","prefix","UrlPrefix","AddDatabaseDone","NewItem","GetEditItem","urlPrefix","ElementFilterSettingInput","elementFilterSettingUtil","cateFilter","MassExportSettingData","elementFilter","elementFilterId","valueSettings","exportSettings","GetElementFilter","elemFilterId","GetDefaultValueSettings","MassExportSetting","MassExportSettingInput","massExportSettingUtil","TrackingItem","Tracking","WorkpackageId","supId","SupId","NewWorkpackage","workpackageUtil","wp","GetFullName","UpperList","LowerList","wps","GetWorkpackagesDone","workpackageInput","MassDetailSettingData","mainMassType","MainMassType","MassDetailSetting","GetFromDb","MassDetailSetting_Dict","OnGetItemsDone_Func_Dict","GetFilterValueTypes","GetStringFilterTypes","GetValueRetrieveTypes","GetMassPropertyNames","GetMassItemFields","GetMassTypes","DebugPoints","workpackage_Dict","elementFilterSetting_Dict","massExportSetting_Dict","massGroupSetting_Dict","project_Dict","massResultComp","categoryData","massItemFields","mifs_ForMassGroup","versionCompareSetting","massDetailSetting_Dict","massDetailSetting_DictUtil","tracking","upperList","lowerList","dbItem","GetUpperList","GetLowerList","workpackageVMs","CurrentWorkpackage","workpackageInputVM","Workpackage_DictView","CurrentWorkpackageVM","searchName","SearchName","orientation","plain","margin","DeleteView","EntFilterView","test","ItemVMs","CurrentItemVM","ElementFilterSettingDataView","ElementFilterSetting_DictView","MES_ValueSettingView","borderRadius","MassExportSettingDataView","valueSettingElems","MassExportSetting_DictView","MassCell_ValueView","MassCellView","TDStyle","AStyle","EditableTextView","MassRowView","subElems","toggleButton","marginRight","scope","IsHave_Addition_Wrapper","AdditionInfomation_Element","RawValue_Element","HoverToolElement","ModalElement","j","CSVExportView","Test","filename","headers","MassTableView","thElems","tbodyElems","SaveFilled","DownloadOutlined","MassGroupInput_Element","MassGroupInput_Toggle_Classname","MassGroupInput_Toggle_Content","Override_MassGroup_ModalElement","MassResultCompView","IsShowPhaseSelectVM","justifyContent","TableView","tableElem","theadElem","LeftCircleOutlined","RightCircleOutlined","tbodyElem","WorkItemExportSetting_DictView","LeftNav","LeftNavItem","LeftNavVM","modelUtil","GetPreTitle","preTitle","GetItemClass","ProjectViewType","SetView","PreTitle","LeftNavView","navUtil","GetInitialColumnNames","SettingData","GetColumns","InitialColumnNames","MassDetailTable","initialColumnNames","settingData","GetSettingName","Handle_SettingStorageList","set_StorageList","SettingStorageList","tableUtil","MassDetailVM","IsGet_SettingStorageList_Done_Func_Dict","SettingOK","preSetting","PreSetting","IsOnSaveSetting","SaveSetting","SettingSelectVM_ForInput","SettingSelectVM","SettingInput_State","mdi_st","Toggle_SettingInput_State","settingName","SettingInputOK","SettingName","input_State","setting","handle_UpdateSetting","DetailTable","ColumnNames","isnew","newItem","Override_Setting_Modal_OKFunc","Is_Override_Setting_Modal_Open","SettingInputCancel","handle_SettingFunc","settings","detailTable","settingStorageList","settingSelectVM_ForInput","settingInputVM","settingSelectVM","MassDetailTableView","MassDetailView","match","params","Main_Classname","SettingInput_Element","SettingInput_Toggle_Classname","SettingInput_Toggle_Content","Override_Setting_ModalElement","withRouter","LevelGroupView","LevelSelectVM","DeleteFilled","TLS_FilterValueView","TLS_FilterView","TLS_PageItemView","Tabs","TabPane","TypicalLevelSettingDataView","stopPropagation","activeKey","tab","TypicalLevelSettingView","Phase_DictView","PlusCircleOutlined","RebarMass_DictView","ProjectCompVM","projectVM","projectUtil","projectVMUtil","massResComp","setItemsFuncs","GetMassResultCompVM","massResutlCompVMUtil","ProjectCompView","ViewElement","PMDataView","basename","exact","path","component","TestView","DO_Comp","DO_Element","element","elementinfo","elementinfo_identify","elementinfo_locate","et","DO_ElementVM","isOpenSub","IsOpenSub","ToggleSubContentVM","toggleSubContentVM","GetToggleSubContent","DO_CompVM","DO_ElementView","IsHaveButton","DO_CompView","elem","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"0uBAAaA,EAAO,OACPC,EAAW,WCEXC,EAAb,WACE,aAAe,yBAQfC,aAAUC,EARI,KAmBdC,YAAc,sBAnBA,KAsCdC,MAAQC,EArCNC,YAAeC,KAAM,CACnBN,QAASO,IACTL,YAAcK,IACdJ,MAAQI,MALd,oDAWI,OAAOD,KAAKN,SAXhB,aAacQ,GACVF,KAAKN,QAAUQ,EACXF,KAAKG,cACPH,KAAKG,aAAaD,KAhBxB,gCAqBkBA,GACdF,KAAKJ,YAAcM,IAtBvB,4BAoCI,OAPKF,KAAKI,QACRJ,KAAKI,MAAQJ,KAAKK,WAAaL,KAAKK,WAAa,GAE7CL,KAAKM,UACPN,KAAKI,MAAMG,SAAW,aAGnBP,KAAKI,UApChB,KCDaI,EAAM,SAACC,EAAGb,GACrB,IAAIc,EAAK,IAAIjB,EAGb,OAFAiB,EAAGhB,QAAUe,EACbC,EAAGd,YAAcA,EACVc,GCCHC,E,kDACJ,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAWRC,SAAW,SAACC,GAAO,IACXC,EAAUD,EAAEE,OAAZD,MACN,EAAKE,MAAMC,QAAUH,GAdJ,IAGXI,EAAU,EAAKP,MAAfO,MACN,GAAKA,EAIH,EAAKF,MAAQE,MAJH,CAEV,EAAKF,MAAQG,EADF,uBALI,S,qDAkBjB,IAAIC,EAAOrB,KAAKiB,MACVvB,EAAyB2B,EAAzB3B,QAASE,EAAgByB,EAAhBzB,YAEf,OACE,qCACGyB,EAAKxB,QAAUC,EACd,cAAC,IAAD,CAAOiB,MAAOrB,EAASmB,SAAUb,KAAKa,SACpCjB,YAAaA,IAAkB,GAClCyB,EAAKxB,QAAUC,EACd,cAAC,IAAMwB,SAAP,CAAgBP,MAAOrB,EAASmB,SAAUb,KAAKa,WAAe,U,GA5BhDU,aAkCTC,cAASb,G,4DC5BlBc,EAAO,SAACC,GAAD,OAAaC,IAAMC,OAAO,CACnCC,QAXmB,4BAYnBC,OAAQ,mBACR,eAAgB,mBAChBJ,aAUEK,EAAiB,SAACC,GAKtB,MAAO,CACLC,QAJcD,EAASE,QAAU,KAAOF,EAASE,OAAS,IAK1Db,KAJWW,EAASX,KAKpBc,QAJYH,EAASI,aAQZC,EAAO,uCAAG,WAAOC,GAAP,eAAAC,EAAA,+EAEID,EAFJ,cAEbN,EAFa,yBAGZD,EAAeC,IAHH,0DAnBKQ,EAwBE,EAAD,GAvB3BL,IAAQM,MAAR,iCAAwCD,IACjC,CACLP,SAAS,KAgBU,wEAnBI,IAACO,IAmBL,0BAAH,sDASPE,EAAkB,IAElBlC,EAAG,uCAAG,WAAOmC,EAAKC,EAAQlB,GAApB,SAAAa,EAAA,6DACjBb,EAAUA,GAAoBgB,EADb,kBAEVL,EAAQZ,EAAKC,GAASlB,IAAImC,EAAKC,KAFrB,2CAAH,0DAKHC,EAAG,uCAAG,WAAOF,EAAKG,EAASF,EAAQlB,GAA7B,eAAAa,EAAA,6DACjBb,EAAUA,GAAoBgB,EADb,SAEEL,EAAQZ,EAAKC,GAASmB,IAAIF,EAAKG,EAASF,IAF1C,cAEbG,EAFa,yBAGVA,GAHU,2CAAH,4DAMHC,EAAI,uCAAG,WAAOL,EAAKG,EAASF,EAAQlB,GAA7B,eAAAa,EAAA,6DAClBb,EAAUA,GAAoBgB,EADZ,SAECL,EAAQZ,EAAKC,GAASsB,KAAKL,EAAKG,EAASF,IAF1C,cAEdG,EAFc,yBAGXA,GAHW,2CAAH,4DC7DJE,EAAW,WACXC,EAAW,WACXC,EAAQ,QCARC,EAAU,UACVC,EAAQ,QACRC,EAAc,cACdC,EAAQ,QACRC,EAAO,OAGPC,EAAc,cACdC,EAAW,WACXC,EAAW,WACXC,EAAQ,QACRC,EAAW,WACXC,EAAQ,QAERC,EAAO,OACPC,EAAW,WACXC,GAAe,eACfC,GAAa,aACbC,GAAuB,uBACvBC,GAAa,aACbC,GAAO,OAMPC,GAAkB,WAC7B,MAAO,CACLZ,EAAUC,EAAUC,EAAOE,EAAOC,EAClCK,GAAYJ,EACZP,EAAaQ,GACbC,GAAYC,GAAsBE,KAiBzBE,GAAgB,SAACC,EAAUC,GACtC,OAAQA,GACN,KAAKrB,EACL,KAAKG,EACL,KAAKC,EACL,KAAKE,EACL,KAAKL,EACH,MAAO,CACLqB,OAAQ,CAACD,GACTE,eAAe,GAEnB,KAAKhB,EACL,KAAKF,EACL,IAvDqB,YAwDrB,IAzDqB,YA0DrB,KAAKG,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,GACL,KAAKC,GACL,KAAKC,GACL,KAAKC,GACL,KAAKC,GACH,IAAIO,EAAWJ,EAAQ,SACvB,GA7BG,CAACP,IA6BsBY,SAASJ,IACjCG,IAAaE,EACb,MAAO,CACLJ,OAAQ,CAAC,OAAQD,GACjBE,eAAe,GAGjB,IAAII,OAAYpF,EAEhB,OAAQ8E,GACN,KAAKd,EACL,KAAKF,EACL,KAAKO,EACL,KAAKE,GACL,KAAKC,GACL,KAAKC,GACHW,EAAY,WACZ,MACF,KAAKnB,EACL,KAAKE,EACL,KAAKC,EACHgB,EAAY,SACZ,MACF,KAAKV,GACHU,EAAY,WAGhB,MAAO,CACLL,OAAQ,CAAC,UAAW,OAAQK,EAAWN,GACvCE,eAAe,KAMZK,GAAiB,SAACC,EAAgBR,GAC7C,IAAI1D,OAAQpB,EAEZ,OAAQ8E,GACN,KAAKrB,EACL,KAAKC,EACHtC,EAAQkE,EAAeC,KACvB,MACF,KAAK5B,EACHvC,EAAQkE,EAAeE,SACvB,MACF,QACEpE,EAAQkE,EAIZ,OAAOlE,GAAgB,aAGZqE,GAA+B,WAC1C,MAAO,CAACzB,EAAUD,EAAUI,IC3HjBuB,IANS,IAAIC,KAAKC,eAAe,SAMtB,WAItB,OAAOC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,KAGjCC,GAAU,WACrB,OAAQ,CAAC,MAAQ,KAAO,KAAO,KAAO,MAAMC,QAAQ,UAAU,SAAAC,GAAC,OAC5DA,EAAIC,OAAOC,gBAAgB,IAAIC,WAAW,IAAI,GAAK,IAAMH,EAAI,GAAGJ,SAAS,QAIjEQ,GAAkB,SAACC,EAAK7D,GACnC6D,EAAIC,MAAO,EACX9D,IACA6D,EAAIC,MAAO,GAGAC,GAAW,SAACC,EAAMC,EAAUC,GACvC,IAAkB,IAAdD,IAAiC,IAAdC,GACrBD,IAAaC,EADf,CAEA,IAAIC,EAAOH,EAAKC,GAChBD,EAAKC,GAAYD,EAAKE,GACtBF,EAAKE,GAAYC,IAiBNC,GAAe,SAACC,EAAOC,GAClC,IAAIC,GAAe,EACfC,GAAS,EAEb,OAAIH,EAAMI,SAAWH,EAAMG,SAE3BJ,EAAMK,SAAQ,SAACC,EAAGC,GACZL,IAAiBD,EAAM/B,SAASoC,KAClCJ,GAAe,EAAOC,GAAS,MAI5BA,IAyBIK,GAAS,SAACC,EAAMC,GAC3B,IAAIC,EAAQF,EAAKG,WAAU,SAAAN,GAAC,OAAIA,EAAEO,MAAQH,KAC1C,GAAc,IAAVC,EACF,OAAOF,EAAKK,OAAOH,EAAO,IAIjBI,GAAM,SAACN,EAAMO,GAA2B,IAArBC,IAAoB,yDAC9CP,EAAMzB,KAENiC,EAAU,WACRF,GACFA,IAEEC,GACFT,GAAOC,EAAMC,IAIjBD,EAAKU,KAAK,CACRN,IAAK5B,KACLrC,MAAOsE,KAkBEE,GAAgB,SAACC,EAAKC,GACjC,MAAM,GAAN,OAd6B,SAACC,GAM9B,IALA,IAAIC,EAAO,IAAIC,WAAW,GAEtBC,EADO,IAAID,WAAW,GACTD,EAAO,EAEpBG,EAAI,GACFJ,GAAK,GACPI,EAAIC,OAAOC,aAAaN,EAAIG,EAAMF,GAAQG,EAC1CJ,EAAI1C,KAAKiD,MAAMP,EAAIG,GAAO,EAE9B,OAAOC,EAIGI,CAAgBT,IAA1B,OAAiCD,EAAI,IAG1BW,GAAiB,SAACC,EAAMC,EAAMC,EAAMC,GAC/C,MAAM,GAAN,OAAUhB,GAAca,EAAMC,GAA9B,YAAuCd,GAAce,EAAMC,KChIxCC,G,iDAanBC,MAAQ,G,+CAPN,OAHKjJ,KAAKkJ,MACRlJ,KAAKkJ,IAAMC,MAENnJ,KAAKkJ,M,4BAIZ,OAAOlJ,KAAKoJ,KAAKC,QAAQC,QAAQtJ,U,0BCF/BuJ,G,kDACJ,WAAY3I,GAAQ,IAAD,uBACjB,cAAMA,IAYR4I,aAAe,SAAC1I,GACH,EAAKG,MACXC,QAAUJ,EAAEE,OAAOD,OAfP,EAkBnB0I,QAAU,SAAC3I,GACTA,EAAE4I,iBACF,IFkIyBC,EElIrBpK,IFkIqBoK,EElIO7I,GFmIX8I,eAAiBD,GAAYE,cAAcC,QAAQ,cEjI7D,EAAK7I,MACXC,QAAU3B,GAvBE,EA0BnBwK,UAAY,SAACjJ,IAEPA,EAAEkJ,SAAsB,IAAXlJ,EAAEmJ,OAGVnJ,EAAEkJ,SAAsB,IAAXlJ,EAAEmJ,OAIF,IAAbnJ,EAAEoJ,UANTpJ,EAAE4I,kBA1BJ,EAAKS,gBAAkBC,IAAMC,YAHZ,IAIXlJ,EAAU,EAAKP,MAAfO,MACN,GAAKA,EAIH,EAAKF,MAAQE,MAJH,CAEV,EAAKF,MAAQG,EADF,uBANI,S,qDAyCjB,IAAIC,EAAOrB,KAAKiB,MACZC,EAAUG,EAAKH,QACfd,EAAQJ,KAAKY,MAAMR,MAAQJ,KAAKY,MAAMR,MAAQ,GAMlD,OALKA,EAAMkK,WACTlK,EAAMkK,SAAW,IACjBlK,EAAMmK,WAAa,YAInB,qCACGlJ,EAAKxB,QAAUC,EACd,cAAC,KAAD,CAAiB0K,UAAU,YAAYC,SAAUzK,KAAKmK,gBACpDvK,YAAayB,EAAKqJ,YAClBtK,MAAOA,EACPuK,KAAMzJ,GAAoB,GAC1BL,SAAUb,KAAKwJ,aACfoB,UAAW5K,KAAK+J,UAChBc,QAAS7K,KAAKyJ,UACd,GACHpI,EAAKxB,QAAUC,EACd,cAAC,IAAMwB,SAAP,CAAgBP,MAAOG,EAASL,SAAUb,KAAKwJ,aAC7CpJ,MAAOA,IAAY,U,GA/DJmB,aAqEZC,eAAS+H,IC/EXuB,GAAW,UACXC,GAAO,OCCPC,GAAb,+FAMI,OAHKhL,KAAKiL,SACRjL,KAAKiL,OAASC,GAAelL,OAExBA,KAAKiL,QANhB,aAQa/K,GACTF,KAAKiL,OAAS/K,MATlB,KCWaiL,GAAY,SAAC1K,GACxB,OAAQA,EAAEZ,OACR,KAAKuL,GACH,OAAO,SAAC1L,EAAS2L,GAAV,OAAsB,qCAC1B3L,EACC2L,EAAQC,iBAAmBD,EAAQE,gBACnC,cAAC,IAAD,CAAQC,KAAK,UAAUnH,KAAK,QAC1BmG,UAAU,qBAAqBiB,QAASJ,EAAQK,KADlD,eAGE,OAER,KAAKN,GACH,OAAO,SAAC1L,EAAS2L,GAAV,OAAsB,mCAC3B,uBAAMb,UAAU,iBAAhB,UACE,cAAC,GAAD,CAAcrJ,MAAOkK,IACpBA,EAAQC,iBAAmBD,EAAQM,cAClC,cAAC,IAAD,CAAQH,KAAK,UAAUnH,KAAK,QAC1BoH,QAASJ,EAAQO,OADnB,gBAEE,SAGV,QACE,SCjCeC,G,iDACnBC,MAAQ,G,KAERX,UAAY,SAAClK,GACX,IAAIqF,EAAO,EAAKwF,MACZxE,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEpH,QAAUoB,KAC5C,IAAe,IAAXqG,EAAa,CACf,IAAIyE,EDHS,SAAC9K,EAAOgK,GACzB,IAAIvK,EAAK,IAAIsK,GAGb,OAFAtK,EAAGb,MAAQoB,EACXP,EAAGsL,OAASf,EACLvK,ECDQuL,CAAehL,GAE1B,OADAqF,EAAKwB,KAAKiE,GACHA,EAET,OAAOzF,EAAKgB,KCPH4E,GAAb,WACE,aAAe,IAAD,gCAcdxM,aAAUC,EAdI,KAyBdC,YAAc,sBAzBA,KA4CdC,MAAQC,EA5CM,KA8CdqM,WAAY,EA9CE,KAqEdC,4BAA8B,GArEhB,KAuEdC,YAAcjB,GAvEA,KAmFdkB,uBAAwB,EAnFV,KAqFdhB,iBAAkB,EArFJ,KAsFdC,iBAAkB,EAtFJ,KAuFdI,eAAgB,EAvFF,KAyFdD,KAAO,WACL,EAAKa,YAAcnB,IA1FP,KA6FdQ,OAAS,WACP,EAAKW,YAAcnB,IA9FP,KAiGdY,OAAS,WAEP,OADa,EAAKQ,YAAYrB,UAAU,EAAKoB,aAC/BP,OAAO,EAAK9K,QAAS,IAlGnCnB,YAAeC,KAAM,CACnBN,QAASO,IACTL,YAAaK,IACbJ,MAAOI,IACNkM,UAAWlM,IACZoM,YAAapM,IACbqL,gBAAiBrL,IACjBsL,gBAAkBtL,IAClB0L,cAAe1L,IACfqM,sBAAwBrM,MAX9B,oDAiBI,OAAOD,KAAKN,SAjBhB,aAmBcQ,GACVF,KAAKN,QAAUQ,EACXF,KAAKG,cACPH,KAAKG,aAAaD,KAtBxB,gCA2BkBA,GACdF,KAAKJ,YAAcM,IA5BvB,4BA0CI,OAPKF,KAAKI,QACRJ,KAAKI,MAAQJ,KAAKK,WAAaL,KAAKK,WAAa,GAE7CL,KAAKM,UACPN,KAAKI,MAAMG,SAAW,aAGnBP,KAAKI,QA1ChB,gCAkDmB,IAAD,OAId,OAHKJ,KAAKyM,YACRzM,KAAKyM,UAAY,kBAAM,EAAKvL,UAEvBlB,KAAKyM,WAtDhB,aAuDkBvM,GACdF,KAAKyM,UAAYvM,IAxDrB,kCAgEI,OAHKF,KAAK0M,cACR1M,KAAK0M,YAAc,IAAIb,IAElB7L,KAAK0M,aAhEhB,aAkEkBxM,GACdF,KAAK0M,YAAcxM,IAnEvB,kCA0EI,OAAOF,KAAKqM,aA1EhB,aA2EoBnM,GACXF,KAAKsM,wBAIVtM,KAAKqM,YAAcnM,EACnBF,KAAKoM,4BAA4BpF,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,gBAjFpD,KCJaoJ,GAAb,WACE,aAAe,oBADjB,0DAkBI,OAHK3M,KAAK4M,gBACR5M,KAAK4M,cCjBF,CAAC,SAAU,qBAAsB,QAAS,uBDmBxC5M,KAAK4M,iBAlBhB,gCAUI,OAHK5M,KAAK6M,WACR7M,KAAK6M,SAAW,IAAIF,GAEf3M,KAAK6M,aAVhB,KEFaC,GAAW,WACXC,GAAS,SACTC,GAAY,YCFZC,GAAW,WACXC,GAAW,WCDXC,GAAU,UACVC,GAAY,YACZC,GAAe,eCFfF,GAAU,UACVG,GAAY,YAEZC,GAAW,WAEXC,GAAY,YCWZhN,GAAM,SAACC,EAAGgN,GACrB,IAAI/M,EAAK,IAAIgN,GAMb,OALAhN,EAAGiN,UAAYlN,EAAEmN,UACjBlN,EAAGmN,iBAAmBpN,EAAEqN,iBACxBpN,EAAGqN,iBAAmBtN,EAAEuN,iBACxBtN,EAAGuN,OAASxN,EAAEyN,OACdxN,EAAGyN,aAAeV,EACX/M,GAcI0N,GAAsB,SAAC3N,GAClC,IAAI6F,EAAO,GAEX,OAAQ7F,EAAE0N,cACR,KAAKE,GACH/H,EAjCGqG,GAAa2B,SAiCMC,cACtB,MACF,KAAKF,GACH/H,EAhCGkI,GAAOF,SAgCMG,eAIpB,OAAOnI,GAYIoI,GAAU,SAACC,EAAQ5N,GAC9B,QAAcpB,IAAVoB,GAAiC,OAAVA,EAAgB,OAAO,EAElD,IAAI6N,GAAU,EACVC,EAAeF,EAAOV,OAC1B,OAAQU,EAAOhB,WACb,KAAKmB,GACH,GAAqB,kBAAV/N,EAET,OADiB4N,EAAOZ,kBAEtB,KAAKgB,GACHF,EAAa7H,SAAQ,SAAAC,GACd2H,GAAW3H,IAAMlG,IACpB6N,GAAU,MAGd,MACF,KAAKG,GACH,IAAIC,EAAWjO,EAAMkO,cACrBJ,EAAa7H,SAAQ,SAAAC,IACd2H,GAAWI,EAASnK,SAASoC,EAAEgI,iBAClCL,GAAU,MAGd,MACF,KAAKG,GACCC,EAAWjO,EAAMkO,cACrBL,GAAU,EACVC,EAAa7H,SAAQ,SAAAC,GACf2H,GAAWI,EAASnK,SAASoC,EAAEgI,iBACjCL,GAAU,MAMpB,MACF,KAAKE,GACH,IAAKI,MAAMnO,GAET,OADiB4N,EAAOd,kBAEtB,KAAKsB,GACH,OAAOpO,IAAU8N,EAAa,GAChC,KAAKM,GACH,OAAOpO,EAAQ8N,EAAa,GAC9B,IDxGsB,mBCyGpB,OAAO9N,GAAS8N,EAAa,GAC/B,KAAKM,GACH,OAAOpO,EAAQ8N,EAAa,GAC9B,ID1GqB,kBC2GnB,OAAO9N,GAAS8N,EAAa,GAC/B,KAAKM,GACH,IAAIC,EAAUP,EAAa,GACvBQ,EAAWR,EAAa,GAC5B,OAAQF,EAAOW,aAAeF,IAAYrO,GACxCqO,EAAUrO,GAASA,EAAQsO,GACvBV,EAAOY,cAAgBxO,IAAUsO,GAOjD,OAAOT,GC1HIlB,GAAb,+FAUI,OAAO1N,KAAKkO,QAVhB,aAYahO,GACTF,KAAKkO,OAAShO,IAblB,uCAuBI,OAHKF,KAAKwP,mBACRxP,KAAKwP,iBAAmBtE,GAAyBlL,OAE5CA,KAAKwP,mBAvBhB,8BA2BI,MDwBK,CACL5B,WAFuBnN,ECvBAT,MDyBV2N,UACbG,iBAAkBrN,EAAEoN,iBACpBG,iBAAkBvN,EAAEsN,iBACpBG,OAAQzN,EAAEwN,QALY,IAACxN,MClD3B,KCFagP,GAAS,SACTC,GAAS,SCGT9N,GAAS,SAAC+N,EAAKC,GAC1B,IAAIlP,EAAK,IAAImP,GAWb,OAVAnP,EAAGoP,cAAgBH,EAEdC,GAGHlP,EAAGqP,WAAaC,GAChBtP,EAAG6C,MAAQ4F,KACXzI,EAAGuP,MAAQ,iCAJXvP,EAAGqP,WAAaC,GAOXtP,GCXYmP,G,4DAqDnBK,OAAS,WACP,EAAKJ,cAAchE,MAAMrE,OAAO,EAAK0I,MAAO,I,kDAhD5C,OAAOnQ,KAAK8P,cAAchE,MAAMxC,QAAQtJ,Q,4BAQxC,OAHKA,KAAKoQ,QACRpQ,KAAKoQ,MAAQpQ,KAAKuD,OAEbvD,KAAKoQ,O,aAEJlQ,GACRF,KAAKoQ,MAAQlQ,I,6BAYb,OAPKF,KAAKqQ,SACRrQ,KAAKqQ,ODiBc,SAAC5P,GACxB,IAAIyI,EAAMzI,EAAE6P,UACZ,GAAKpH,EAAL,CACA,IAAI5C,EAAO7F,EAAEqP,cAAcS,aAAaC,SAEpClJ,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEiC,MAAQA,KAC1C,OAAkB,IAAX5B,EAAehB,EAAKgB,QAAS3H,GCvBlBuL,CAAelL,OAExBA,KAAKqQ,QAAUrQ,KAAKsQ,YACvBtQ,KAAKsQ,eAAY3Q,IAGdK,KAAKqQ,Q,aAEHnQ,GACTF,KAAKqQ,OAASnQ,EACTA,GAAKA,IAAMF,KAAK8P,cAInB9P,KAAKsQ,UAAYpQ,EAAEuQ,GAHnBzQ,KAAKsQ,eAAY3Q,I,8BAUnB,MAAO,CACLoB,MAAQf,KAAKuD,MACbmN,SAAU1Q,KAAK2Q,SACfP,MAAQpQ,KAAKiQ,MACbK,UAAYtQ,KAAKsQ,UACjBV,WAAa5P,KAAK+P,gB,KCjDHa,G,4DAoCnBC,cAAe,E,KAEfC,uBAAyB,G,KAMzBC,SAAW,SAACtM,GACV,GAAKA,EAAL,CAIA,IAAIpD,EAAO2P,GAAkB,EAAMvM,GAC7BC,EAA0BrD,EAA1BqD,OA6BN,OA7BgCrD,EAAlBsD,eA6BQ,EAAKsM,QA3BV,WACf,IAAI9K,EAAM,EACNyI,GAAU,EAYd,GAVAlK,EAAOsC,SAAQ,SAAAC,GACb,GAAI2H,EAAS,CACX,IAAInI,EAAON,EAAIc,QAEHtH,KADZwG,EAAMM,KAEJmI,GAAU,OAKZnK,IAAUuM,EAAU,CACtB,IAAIE,EAAiB,EAEH,SAAd,EAAK1N,OACP0N,EAAiB,GAGnB/K,EAAMA,EAAIgL,eAAe,QAAS,CAAEC,sBAAuBF,IAG7D,OAAO/K,EAIGkL,QAGV,I,KAmBJC,YAAc,SAACC,GACb,IAAIC,EAAU,EAAKC,QACbvI,EAAQsI,EAARtI,IACFvG,EAAG,gCAEH+O,EAAUxI,EAAM,OAAS,OACPA,EACpByI,EAAA,UAAWhP,EAAX,YAAkB+O,GAAWF,GAAWG,EAAA,UAAYhP,EAAZ,YAAmB+O,GAAWF,IAE9DI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACY,QAAZqQ,IACF,EAAKxI,IAAM7H,EAAK6H,KAEdqI,GACFA,EAAOlQ,GAETc,IAAQF,QAAR,UAAmByP,EAAnB,2B,KAING,eAAiB,SAACN,GAChB,IAAIC,EAAU,CACZtI,IAAK,EAAKA,KAGUyI,EAAA,UADf,gCACe,WAAyBH,GAErCI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACAkQ,GACFA,EAAOlQ,GAETc,IAAQF,QAAR,gC,KAIN6P,sBAAuB,E,KACvBC,+BAAiC,G,KAqBjCC,0BAA4B,G,KA0B5BC,aAAe,SAACC,GACd,IAAI5L,EAAO,EAAK6L,WACZ7K,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAE5D,MAAM6B,OAASgN,KACjD,OAAO5L,EAAKgB,I,oDAnLZ,OAHKtH,KAAKoS,UACRpS,KAAKoS,QAAUlH,GAAgBlL,OAE1BA,KAAKoS,U,kCAUZ,OAHKpS,KAAKqS,cACRrS,KAAKqS,YAAcnH,GAAoBlL,OAElCA,KAAKqS,c,6BAQZ,OAHKrS,KAAKsS,SACRtS,KAAKsS,OAASpH,GAAelL,OAExBA,KAAKsS,S,yCAIZ,OAAOpH,GAA2BlL,Q,mCAOjBE,GACjBF,KAAK8Q,uBAAuB9J,SAAQ,SAAAC,GAAC,OAAIA,S,8BA+CzC,MAAO,CACLiC,IAAKlJ,KAAKkJ,IACVqJ,UAAWvS,KAAKuS,UAChBC,UAAWxS,KAAKwS,UAChBC,cAAezS,KAAKyS,cACpBC,YAAa1S,KAAK0S,YAClBC,mBAAoB3S,KAAK2S,mBACzB5R,MAAOf,KAAKuD,MACZqP,KAAM5S,KAAKwD,KACXoB,SAAU5E,KAAK0D,SACfmP,KAAM7S,KAAK8S,Q,yCA6Cb,OAAO9S,KAAK+S,oB,aAES7S,GACrBF,KAAK+R,+BAA+B/K,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,WACnDvD,KAAK+S,mBAAqB7S,I,qCAQ1B,OAHKF,KAAKgT,gBACR9H,GAA2BlL,MAEtBA,KAAKgT,gB,aACO9S,GACnBF,KAAKgT,eAAiB9S,EACtBF,KAAKiT,oBAAqB,I,kCAIV/S,GAChBF,KAAKgS,0BAA0BhL,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,WAC9CvD,KAAKkT,cAAgBhT,I,gCASrB,OAHKF,KAAKmT,WACRjI,GAAsBlL,MAEjBA,KAAKmT,W,aACEjT,GACdF,KAAKmT,UAAYjT,EACjBF,KAAKoT,eAAgB,I,iCAQrB,OAHKpT,KAAKqT,aACRrT,KAAKqT,WAAanI,GAAmBlL,OAEhCA,KAAKqT,e,KC3LKC,G,iDAWnBxB,sBAAuB,E,KACvBC,+BAAiC,G,KAqBjCC,0BAA4B,G,oDA7B1B,OAAOhS,KAAKqD,MAAMD,U,+BAIlB,OAAOpD,KAAKoJ,O,yCAOZ,OAAOpJ,KAAK+S,oB,aAES7S,GACrBF,KAAK+R,+BAA+B/K,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,WACnDvD,KAAK+S,mBAAqB7S,I,qCAQ1B,OAHKF,KAAKgT,gBACR9H,GAA2BlL,MAEtBA,KAAKgT,gB,aACO9S,GACnBF,KAAKgT,eAAiB9S,EACtBF,KAAKiT,oBAAqB,I,kCAIV/S,GAChBF,KAAKgS,0BAA0BhL,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,a,gCAS9C,OAHKvD,KAAKmT,WACRjI,GAAsBlL,MAEjBA,KAAKmT,W,aACEjT,GACdF,KAAKmT,UAAYjT,EACjBF,KAAKoT,eAAgB,M,KCpCZG,GAAwB,SAAC9S,GACpC,IAAIA,EAAEqR,qBAAN,CACArR,EAAEqR,sBAAuB,EAEzB,IAAI0B,EAAQ/S,EAAE4C,MAERoQ,EAAqB,SAACC,GAC1B,IAAIC,EAAKC,GAAqBnT,EAAGiT,EAAIG,MACrC,OAAOC,GAAuBrT,EAAGkT,IAG/BD,EAAMF,EAAMO,oBACZL,EACFjT,EAAEuT,eAAiBP,EAAmBC,GAEtCF,EAAMS,+BAA+BnM,MAAK,WACxCrH,EAAEuT,eAAiBP,EAAmBD,EAAMO,0BAKrCH,GAAuB,SAACnT,EAAGiT,GACtC,GAAKA,EAAL,CACA,IAAIQ,OAAUvU,EAOd,OANA+T,EAAIS,UAAUnN,SAAQ,SAAAC,IACfiN,GAAWE,GAAoB3T,EAAGwG,KACrCiN,EAAUjN,MAIPiN,IAGIE,GAAsB,SAAC3T,EAAG4T,GACrC,IAAIC,EAAUD,EAASE,QACnB3F,GAAU,EAOd,OANA0F,EAAQtN,SAAQ,SAAAC,GACd,GAAI2H,EAAS,CACX,IAAInK,EAAQwC,EAAEuN,MACd5F,EAAU3H,EAAEgH,OAAOpJ,SAASpE,EAAEmQ,SAASG,SAAStM,QAG7CmK,GAGIkF,GAAyB,SAACrT,EAAG4T,GACxC,GAAKA,EAAL,CACA,IAAII,OAAU9U,EAUd,OATA0U,EAASK,YAAY1N,SAAQ,SAAAC,GAKtBwN,GAAWxN,EAAE0N,UAAYlU,EAAEmQ,SAASG,SAASC,KAChDyD,EAAUxN,MAGPwN,IAGIG,GAAmB,SAACnU,GAC/B,IAAIA,EAAEoU,gBAAN,CACApU,EAAEoU,iBAAkB,EAEpB,IAAMC,EAAoB,SAACC,GACzB,IAAIC,EAAQD,EAAKA,EAAGE,MAAQ,EAE5B,OADUxU,EAAEmQ,SAASrN,MAAQyR,GAI3BvU,EAAEuT,gBAAkBvT,EAAEwS,mBACxBxS,EAAEyU,UAAYJ,EAAkBrU,EAAEuT,gBAElC7K,GAAY1I,EAAEsR,gCACZ,WACEtR,EAAEyU,UAAYJ,EAAkBrU,EAAEuT,qBC9E7BmB,GAAS,WACpB,OAAO3G,GAAOF,UAIH9N,GAAM,SAACC,GAClB,IAAIC,EAAK,IAAIkQ,GAab,OAXAlQ,EAAGwI,IAAMzI,EAAEyI,IACXxI,EAAG6C,MAAQ9C,EAAEM,MACbL,EAAG8C,KAAO/C,EAAEmS,KACZlS,EAAGgD,SAAWjD,EAAEmE,SAChBlE,EAAGoS,KAAOrS,EAAEoS,KACZnS,EAAG6R,UAAY9R,EAAE8R,UACjB7R,EAAG+R,cAAgBhS,EAAEgS,cACrB/R,EAAGgS,YAAcjS,EAAEiS,YACnBhS,EAAGiS,mBAAqBlS,EAAEkS,mBAC1BjS,EAAGuQ,QAAUxQ,EAAE2U,UAAkC,IAAtB3U,EAAE2U,SAASrO,OAAetG,EAAE2U,SAAS,QAAKzV,EAE9De,GAuCI2U,GAAa,SAAC5U,GACzB,IAAI6F,EAAO6O,KAASG,aAAaxJ,MAC3ByG,EAAc9R,EAAd8R,UACFjL,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEiC,MAAQqJ,KAC1C,OAAkB,IAAXjL,EAAehB,EAAKgB,QAAS3H,GA6CzB4V,GAAkB,SAACrM,EAAKqI,GACnC,IAAI5O,EAAG,uDAAmDuG,GAC1DyI,EAAQhP,GAAKiP,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GAAS,IxBhHUuD,EwBiHjB4Q,EAAuBnU,EAAvBmU,WAAYC,EAAWpU,EAAXoU,OAEdC,GxBnHmB9Q,EwBkHY4Q,EAAW5Q,SAClC6Q,EAAOE,KAAI,SAAA1O,GAAC,OAAIzG,GAAIyG,OAC5BsK,GACFA,EAAOmE,OAMFE,GAAiB,SAACnV,GAC7B,IAAI6F,EAAO6O,KAASU,iBAAiBC,aAC/BrD,EAAkBhS,EAAlBgS,cACFnL,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEiC,MAAQuJ,KAC1C,OAAkB,IAAXnL,EAAehB,EAAKgB,QAAS3H,GAGzBoW,GAAY,SAACtV,GACxB,IAAI6F,EAAO,GACPgM,EAAS6C,KAASa,WAAWlK,MAC7B6G,EAAqBlS,EAAEkS,mBAM3B,OALAL,EAAOtL,SAAQ,SAAAC,GACTA,EAAEgP,oBAAoBpR,SAAS8N,IACjCrM,EAAKwB,KAAKb,MAGPX,GAGI4P,GAAwB,SAACzV,GACpC,IAAI0V,EAAchB,KAASiB,eAAeC,OACtC/D,EAAS7R,EAAE4V,OACX/P,EAAO,GAMX,OALAgM,EAAOtL,SAAQ,SAAAC,GACTkP,EAAYtR,SAASoC,IACvBX,EAAKwB,KAAKb,MAGPX,GAgBIiN,GAAwB,SAAC9S,GACpC,IAAIA,EAAEqR,qBAAN,CACArR,EAAEqR,sBAAuB,EAEzB,IAAIM,EAAU3R,EAAE2C,QAEVqQ,EAAqB,SAACC,GAC1B,IAAIC,EAAKC,GAAqBnT,EAAGiT,EAAIG,MAErC,OADUC,GAAuBrT,EAAGkT,IAIlCD,EAAMtB,EAAQ2B,oBACdL,EACFjT,EAAEuT,eAAiBP,EAAmBC,GAEtCtB,EAAQ6B,+BAA+BnM,MAAK,WAC1CrH,EAAEuT,eAAiBP,EAAmBrB,EAAQ2B,0BAKvCH,GAAuB,SAACnT,EAAGiT,GACtC,GAAKA,EAAL,CACA,IAAIQ,OAAUvU,EAOd,OANA+T,EAAIS,UAAUnN,SAAQ,SAAAC,IACfiN,GAAWE,GAAoB3T,EAAGwG,KACrCiN,EAAUjN,MAIPiN,IAGIE,GAAsB,SAAC3T,EAAG4T,GACrC,IAAIC,EAAUD,EAASE,QACnB3F,GAAU,EAOd,OANA0F,EAAQtN,SAAQ,SAAAC,GACd,GAAI2H,EAAS,CACX,IAAInK,EAAQwC,EAAEuN,MACd5F,EAAU3H,EAAEgH,OAAOpJ,SAASpE,EAAEsQ,SAAStM,QAGpCmK,GAGIkF,GAAyB,SAACrT,EAAG4T,GACxC,GAAKA,EAAL,CACA,IAAII,OAAU9U,EAUd,OATA0U,EAASK,YAAY1N,SAAQ,SAAAC,GAKtBwN,GAAWxN,EAAE0N,UAAYlU,EAAEsQ,SAASC,KACvCyD,EAAUxN,MAGPwN,IAGIG,GAAmB,SAACnU,GAC/B,IAAIA,EAAEoU,gBAAN,CACApU,EAAEoU,iBAAkB,EAEpB,IAAMC,EAAoB,SAACC,GACzB,IAAIC,EAAQD,EAAKA,EAAGE,MAAQ,EAG5B,OAFUxU,EAAE8C,MAAQyR,GAKlBvU,EAAEuT,gBAAkBvT,EAAEwS,mBACxBxS,EAAEyU,UAAYJ,EAAkBrU,EAAEuT,gBAElC7K,GAAY1I,EAAEsR,gCACZ,WACEtR,EAAEyU,UAAYJ,EAAkBrU,EAAEuT,qBAK7BsC,GAAgB,SAAC7V,GAC5B,OAAOA,EAAE4V,OAAOV,KAAI,SAAA1O,GAAC,OD7PJ,SAACuM,EAAOpM,GACzB,IAAI1G,EAAK,IAAI4S,GAGb,OAFA5S,EAAG2C,MAAQmQ,EACX9S,EAAG0I,KAAOhC,EACH1G,ECyPkB6V,CAAkBtP,EAAGxG,OC1P3BqP,G,4DAEnB0G,cAAgB,G,KAChBC,iBAAmB,G,KAKnB3K,MAAQ,G,KAsCR4K,mBAAqB,SAACxW,IAEL,IADH,EAAKuW,iBAAiBnN,QAAQpJ,IAExC,EAAKuW,iBAAiB3O,KAAK5H,I,KAI/ByW,QAAU,SAACzW,EAAGkQ,GACZ,IAAI9I,EAAQ,EAAKwE,MAAMvE,WAAU,SAAAN,GAAC,OAAIA,EAAE1D,QAAUrD,KAClD,IAAe,IAAXoH,EAAc,CAChB,IAAIyE,EAAO6K,GAAgB,GAI3B,OAHA7K,EAAKxI,MAAQrD,EACb6L,EAAKkE,MAAQG,EACb,EAAKtE,MAAMhE,KAAKiE,GACTA,EAET,OAAO,EAAKD,MAAMxE,I,KAGpBuP,QAAU,G,KAEVC,uBAAyB,G,KAEzBC,UAAY,SAAC7W,GACX,IAAIoG,EAAO,EAAKuQ,SACS,IAArBvQ,EAAKgD,QAAQpJ,KAEjB,EAAK8W,OAAS9W,EACdoG,EAAKwB,KAAK5H,GACV,EAAK+W,0BAEL,EAAKH,uBAAuB9P,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,a,KAG7C2T,yBAA2B,G,KA0B3BD,wBAA0B,WACR,EAAKnL,MAClB6C,QAAO,SAAA1H,GAAC,OAAIA,EAAE8I,aAAeoH,KAAmBlQ,EAAEmQ,cAE3CpQ,SAAQ,SAAAC,GAChB,IAEIoQ,EAFAtW,EAAQkG,EAAE1D,MACV+T,EAAU,EAAKT,QAGfjI,GAAU,EACd,GAAK3H,EAAE0J,UAA+B,IAAnB2G,EAAQvQ,OAEpB,CACL,IAAIO,EAAQgQ,EAAQ/P,WAAU,SAAAgQ,GAAC,OAAIA,EAAErS,OAAS+B,EAAE0J,aACjC,IAAXrJ,EACF+P,EAASC,EAAQhQ,GAEjBsH,GAAU,OANZyI,EAASC,EAAQ,GAUnB,IAAK1I,EAAS,OAAO,EAGrB3H,EAAEmQ,YAAa,EAEf,IAAMI,EAAS,SAACH,GACd,IAAIrP,EAAM,EAAKyP,MAAMC,OAAO3W,EAAOsW,GAMnC,OALArP,EAAIkN,UAAYnU,EAChBiH,EAAI2P,iBAAkB,EAGtB,EAAKF,MAAMG,mBAAmB9P,KAAKE,GAC5BA,GAGH6P,EAAY,SAAC7P,GACjBA,EAAI8H,cAAgB,EACpBgI,EAAe9P,IAGX8P,EAAiB,SAAC9P,GACtB,IAAI+P,EAAc,EAAKvB,cAAcjP,WAAU,SAAAgQ,GAAC,OAC9CA,EAAES,OAAO/J,OAAOpJ,SAASoC,EAAE1D,WACR,IAAjBwU,GACW,EAAKvB,cAAcuB,GAAajM,MAAM,GAC5CiL,UAAU/O,IAIjBiQ,EAAahR,EAAEiR,OACnB,GAAID,EAAY,CACd,IAAIE,EAAUlR,EAAE0J,SAEhBsH,EAAWtB,QAAQ5V,GACnB,EAAK0W,MAAMW,kBAAkBH,EAAWE,EAASX,EAAQK,QAEzDA,EAAUL,EAAOH,Q,+CApJrB,OAHKrX,KAAKkJ,MACRlJ,KAAKkJ,IAAMC,MAENnJ,KAAKkJ,K,aAEPhJ,GACLF,KAAKkJ,IAAMhJ,I,4BAIX,OAAOF,KAAKuQ,aAAazE,MAAMxC,QAAQtJ,Q,iCAIvC,OAAOA,KAAK8L,Q,kCAIZ,OAAO9L,KAAK8L,MAAM6J,KAAI,SAAA1O,GAAC,OAAIA,EAAE1D,W,8BAI7B,IAAImS,EAAQ1V,KAAK8L,MAAM6J,KAAI,SAAA1O,GAAC,OAAIA,EAAEwK,WAElC,MAAO,CACLvI,IAAKlJ,KAAKyQ,GACVhM,MAAOzE,KAAKwU,MACZ6D,cAAerY,KAAKwW,cAAcb,KAAI,SAAA1O,GAAC,OAAIA,EAAEwK,WAC7C6G,YAAatY,KAAKuY,YAClBC,iBAAkBxY,KAAKyW,iBACvBf,W,uCA0CF,OAAO1V,KAAKyY,kB,aAEOvY,GACnBF,KAAKyY,iBAAmBvY,EACxBF,KAAKkX,yBAAyBlQ,SAAQ,SAAAC,GAAC,OAAIA,S,gDAI3C,OAAOjH,KAAKwW,cAAc7H,QAAO,SAAA1H,GAAC,OAAIA,EAAEyR,oB,4BAQxC,OAHK1Y,KAAK2Y,QACR3Y,KAAK2Y,MAAQzN,GAAclL,OAEtBA,KAAK2Y,O,aAEJzY,GACRF,KAAK2Y,MAAQzY,M,KC7GI0Y,G,wGAUjB,OAHK5Y,KAAK6Y,kBACR7Y,KAAK6Y,gBAAkB3N,GAAwBlL,OAE1CA,KAAK6Y,kB,8BAIZ,MAAO,CACLlK,OAAS3O,KAAKgY,OAAShY,KAAKgY,OAAOvG,aAAU9R,EAC7C+V,MAAO1V,KAAK8L,MAAM6J,KAAI,SAAA1O,GAAC,OAAIA,EAAEwK,c,+BAK/B,OAAOzR,KAAK8Y,gBAAgBC,c,kCAI5B,IAAIzS,EAAI,YAAOtG,KAAK8L,OAGpB,OAFA9L,KAAK8L,MAAM9E,SAAQ,SAAAC,GAAC,OAClBA,EAAEuP,cAAcxP,SAAQ,SAAAuQ,GAAC,OAAIjR,EAAKwB,KAAKkR,MAAM1S,EAAMiR,EAAEwB,mBAChDzS,M,KCrBE9F,GAAM,SAACa,EAAM4X,GACxB,IAAIvY,EAAK,IAAIkY,GAMb,OAJAlY,EAAGsX,OAAS3W,EAAKsN,OAASuK,GAAe7X,EAAKsN,aAAUhP,EAExDe,EAAGoL,MAAQzK,EAAKqU,MAAMC,KAAI,SAAA1O,GAAC,OAAI2P,GAAmB3P,EAAGvG,MACrDA,EAAGyY,QAAUF,EACNvY,GAGI0Y,GAAQ,SAAC3Y,EAAGwY,GACvB,IAAKxY,EAAG,OAAOA,EACf,IAAIC,EAAK,IAAIkY,GAKb,OAJAlY,EAAGsX,OXIgB,SAACvX,GACpB,IAAKA,EAAG,OAAOA,EACf,IAAIC,EAAK,IAAIgN,GAMb,OALAhN,EAAGiN,UAAYlN,EAAEkN,UACjBjN,EAAGmN,iBAAmBpN,EAAEoN,iBACxBnN,EAAGqN,iBAAmBtN,EAAEsN,iBACxBrN,EAAGuN,OAAH,YAAgBxN,EAAEwN,QAClBvN,EAAGyN,aAAe1N,EAAE0N,aACbzN,EWZKwY,CAAiBzY,EAAEuX,QAE/BtX,EAAGoL,MAAQrL,EAAEqL,MAAM6J,KAAI,SAAA1O,GAAC,OAAI2P,GAAe3P,EAAGvG,MAC9CA,EAAGyY,QAAUF,EACNvY,GAGI2Y,GAAqB,SAAC5Y,GACjC,OAAOA,EAAE0Y,QAAU1Y,EAAE0Y,QAAQ5I,aAAauI,gBAAkBrY,GCrBjDD,GAAM,SAACiE,EAAO6U,EAAUC,GACnC,IAAI7Y,EAAK,IAAIoP,GAMb,OALApP,EAAG8T,MAAQ/P,EACX/D,EAAG6P,aAAegJ,EACdD,IACF5Y,EAAG8V,cAAgB8C,GAEd5Y,GAGI8Y,GAAY,SAACnY,EAAMkY,GAC9B,IAAI7Y,EAAK,IAAIoP,GAkBb,OAjBApP,EAAGwI,IAAM7H,EAAK6H,IACdxI,EAAG8T,MAAQnT,EAAKoD,MAChB/D,EAAG6P,aAAegJ,EAClB7Y,EAAG8V,cAAgBnV,EAAKgX,cAAgBhX,EAAKgX,cAAc1C,KAAI,SAAA1O,GAAC,OAAIwS,GAAaxS,EAAGvG,MAChF,GAEAW,EAAKqU,OACPhV,EAAGoL,MAAQzK,EAAKqU,MAAMC,KAAI,SAAA1O,GAAC,OTTN,SAAC5F,EAAMsO,GAC9B,IAAIjP,EAAK,IAAImP,GASb,OAPAnP,EAAG6C,MAAQlC,EAAKN,MAChBL,EAAGiQ,SAAWtP,EAAKqP,SACnBhQ,EAAGuP,MAAQ5O,EAAK+O,MAChB1P,EAAG4P,UAAYjP,EAAKiP,UACpB5P,EAAGoP,cAAgBH,EACnBjP,EAAGqP,WAAa1O,EAAKuO,WAAavO,EAAKuO,WAAaI,GAE7CtP,ESD0BkW,CAAmB3P,EAAGvG,MAClDiO,QAAO,SAAA1H,GAAC,OAAIA,EAAE1D,SACjB7C,EAAGgZ,kBAAmB,IAEtBhZ,EAAGoL,MAAQ,GACXpL,EAAGgZ,kBAAmB,GAGxBhZ,EAAG+V,iBAAmBpV,EAAKmX,iBAAmBnX,EAAKmX,iBAAmB,GAE/D9X,GAGI0Y,GAAQ,SAAC3Y,EAAG8Y,GACvB,IAAK9Y,EAAG,OAAOA,EACf,IAAIC,EAAK,IAAIoP,GAQb,OAPApP,EAAG+P,GAAKhQ,EAAEgQ,GACV/P,EAAG8T,MAAQ/T,EAAE+T,MACb9T,EAAGoL,MAAQrL,EAAEqL,MAAM6J,KAAI,SAAA1O,GAAC,OTdL,SAACxG,EAAGkP,GACvB,IAAIjP,EAAK,IAAImP,GASb,OAPAnP,EAAG6C,MAAQ9C,EAAE8C,MACb7C,EAAGiQ,SAAWlQ,EAAEkQ,SAChBjQ,EAAGuP,MAAQxP,EAAEwP,MACbvP,EAAG4P,UAAY7P,EAAE6P,UACjB5P,EAAGoP,cAAgBH,EACnBjP,EAAGqP,WAAatP,EAAEsP,WAEXrP,ESIqBkW,CAAe3P,EAAGvG,MAC9CA,EAAG+V,iBAAH,YAA0BhW,EAAEgW,kBAC5B/V,EAAGgZ,iBAAmBjZ,EAAEiZ,iBACxBhZ,EAAG6P,aAAegJ,EAClB7Y,EAAG8V,cAAgB/V,EAAE+V,cAAcb,KAAI,SAAA1O,GAAC,OAAIwS,GAAexS,EAAGvG,MACvDA,GAGIiZ,GAAW,SAAClZ,GACvB,OAAOA,EAAE8P,aAAa4I,QAAQ1B,O,oBCrDnBjX,GAAM,SAACkV,EAAOkE,GACzB,IAAIlZ,EAAK,IAAImZ,GAGb,OAFAnZ,EAAGoL,MAAQ4J,EACXhV,EAAGoZ,aAAeF,EACXlZ,GCHImZ,GAAb,WACE,aAAe,IAAD,gCASdnE,WAAQ/V,EATM,KAsCdoa,iBAAkB,WAChB,IAAIH,EAAe,EAAKE,aACxB,OAAKF,EACEA,EAAajE,KAAI,SAAA1O,GAAC,OAAI,EAAK6E,MAAMxC,QAAQrC,MAAI0H,QAAO,SAAA1H,GAAC,OAAW,IAAPA,KADtC,IAxCd,KA4Cd+S,eAAiB,GA5CH,KAmEdC,iBAAmB,WACjB,OAAO,EAAKC,eAAevE,KAAI,SAAA1O,GAAC,OAAI,EAAK6E,MAAM7E,OApEnC,KA6FdkT,MAAO,EA7FO,KAwGdC,SAAU,EAvGRra,YAAeC,KAAM,CACnB0V,MAAOzV,IACP+Z,eAAgB/Z,IAChBka,KAAOla,IACPma,QAAUna,MANhB,kDAYI,OAAOD,KAAK0V,OAZhB,aAcYxV,GACRF,KAAK0V,MAAQxV,IAfjB,mCAoBI,OAAOF,KAAK4Z,cApBhB,aAsBmB1Z,GACfF,KAAK4Z,aAAe1Z,EACpBF,KAAKqa,cAAgBra,KAAK+Z,mBAC1B/Z,KAAKka,eAAiBla,KAAKqa,gBAzB/B,oCAiCI,OAHKra,KAAKsa,gBACRta,KAAKsa,cAAgBta,KAAK+Z,oBAErB/Z,KAAKsa,eAjChB,aAmCoBpa,GAChBF,KAAKsa,cAAgBpa,IApCzB,qCA+CI,OAAOF,KAAKga,gBA/ChB,aAiDqB9Z,GACjBF,KAAKga,eAAiB9Z,EACtBF,KAAKua,cAAgBva,KAAKia,qBAnD9B,oCA2DI,OAHKja,KAAKwa,gBACRxa,KAAKwa,cAAgBxa,KAAKia,oBAErBja,KAAKwa,eA3DhB,aA6DoBta,GAChBF,KAAKwa,cAAgBta,EACjBF,KAAKya,uBACPza,KAAKya,sBAAsBva,KAhEjC,kCA6EI,OAHKF,KAAKJ,cACRI,KAAKJ,YAAc,+CAEdI,KAAKJ,aA7EhB,aA+EkBM,GACdF,KAAKJ,YAAcM,IAhFvB,kCAwFI,OAHKF,KAAK0a,cACR1a,KAAK0a,YD/EF,SAAC3O,GAAD,OAAUA,EAAK4O,eAAiB5O,EAAK4O,eAA3B,UAA+C5O,KCiFvD/L,KAAK0a,aAxFhB,aA0FmBxa,GACfF,KAAK0a,YAAcxa,IA3FvB,2BAgGI,OAAOF,KAAKma,MAhGhB,aAkGWja,GACPF,KAAKma,KAAOja,EACRF,KAAK4a,WACP5a,KAAK4a,UAAU1a,KArGrB,8BA2GI,OAAOF,KAAKoa,SA3GhB,aA4GgBla,GACZF,KAAKoa,QAAUla,MA7GnB,KCIQ2a,GAAWC,IAAXD,OAEFE,G,kDACJ,WAAYna,GAAQ,IAAD,uBACjB,cAAMA,IAURoa,cAAgB,SAAC9a,GACJ,EAAKe,MACXiZ,eAAiBha,GAbL,EAgBnB+a,wBAA0B,SAAC/a,GACd,EAAKe,MACXia,KAAOhb,GAlBK,IAGXiB,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI0Y,GALF,E,qDAsBjB,IAAIxY,EAAOrB,KAAKiB,MACZb,EAAQJ,KAAKY,MAAMR,MAAQJ,KAAKY,MAAMR,MAAQ,CAAE+a,MAAO,QACrDzQ,EAAsDrJ,EAAtDqJ,YAAaoB,EAAyCzK,EAAzCyK,MAAOoO,EAAkC7Y,EAAlC6Y,eAAgBG,EAAkBhZ,EAAlBgZ,cAEZ,IAA1BH,EAAenT,SACjBmT,EAAiBG,EACjBhZ,EAAKgZ,cAAgB,IAGvB,IAAIe,EAAQtP,EAAQA,EAAM6J,KAAI,SAAC5J,EAAMzE,GACnC,IAAI+T,EAAiBha,EAAKia,YAAYvP,GAElC0E,OAAK9Q,EAQT,OANE8Q,OADW9Q,IAAToM,EACG5C,KACmB,kBAAT4C,GAAsBmD,MAAMnD,GAGtCA,EAAK7C,IAAM6C,EAAK7C,IAAM6C,EAAK0E,GAF3B1E,EAIA,cAAC8O,GAAD,CAAiB9Z,MAAOuG,EAAxB,SAAgC+T,GAAnB5K,MACjB,GAEL,OACE,mCACE,cAAC,IAAD,CAAQrQ,MAAOA,EACbmb,KAAK,WACL3b,YAAa8K,EACb8Q,iBAAiB,WACjB3a,SAAUb,KAAKgb,cACfja,MAAOmZ,EACPuB,aAAc,SAACC,EAAOC,GAAR,OACZA,EAAOC,SAAS3M,cAAc3F,QAAQoS,EAAMzM,gBAAkB,GAEhEkL,KAAM9Y,EAAKwa,SAAWxa,EAAK6Z,KAC3BD,wBAAyBjb,KAAKib,wBAVhC,SAYGG,U,GA5DmB7Z,aAmEfC,eAASuZ,I,wCC1EHe,GACnB,aAAe,IAAD,gCAMdC,kBAAmB,EANL,KAQdC,YAAc,WACZ,EAAKD,kBAAoB,GATb,KAYdE,YAAc,WACZ,EAAKF,kBAAoB,GAZzBhc,YAAeC,KAAM,CACnB+b,iBAAkB9b,OCClBic,G,kDACJ,WAAYtb,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI2a,GALF,E,qDAYjB,IAAIza,EAAOrB,KAAKiB,MACZuJ,EAAYxK,KAAKY,MAAM4J,UAC3B,IAAKnJ,EAAKjB,MAAO,CACf,IAAIA,EAAQJ,KAAKY,MAAMR,MAAQJ,KAAKY,MAAMR,MAAQ,GAC7CA,EAAMkK,WACTlK,EAAMkK,SAAW,KAEnBjJ,EAAKjB,MAAQA,EAGf,OACE,mCACE,qBAAKoK,UAAWA,EAAWpK,MAAOiB,EAAKjB,MACrC+b,aAAc9a,EAAK2a,YACnBI,aAAc/a,EAAK4a,YAFrB,SAGG5a,EAAK0a,iBAAmB1a,EAAK4P,QAAU,W,GA5BvB1P,aAmCZC,eAAS0a,I,UCvCX1b,GAAM,SAACkV,EAAO2G,GACzB,IAAI3b,EAAK,IAAI4b,GAGb,OAFA5b,EAAGoL,MAAQ4J,EACXhV,EAAG6b,YAAcF,EACV3b,GCHI4b,GAAb,WACE,aAAe,IAAD,gCAWd5G,WAAQ/V,EAXM,KAsBd0c,iBAAc1c,EAtBA,KA2Cd6c,gBAAkB,WAChB,IAAIlV,EAAQ,EAAKwE,MAAMxC,QAAQ,EAAKiT,aACpC,OAAkB,IAAXjV,EAAeA,EAAQ,MA7ClB,KAgDdmV,mBAAgB9c,EAhDF,KAuEd+c,gBAAkB,WAChB,IAAIpV,EAAQ,EAAKqV,cACjB,IAAe,IAAXrV,EACJ,OAAO,EAAKwE,MAAMxE,IA1EN,KAwFdsV,UAAW,EAxFG,KA0FdC,MAAQ,WACN,EAAKF,cAAgB,MA3FT,KAgHdxC,MAAO,EAhHO,KA2HdC,SAAU,EA3HI,KAkId0C,YAAa,EAjIX/c,YAAeC,KAAM,CACnB0V,MAAQzV,IACRwc,cAAgBxc,IAChB2c,SAAU3c,IACVka,KAAOla,IACPma,QAAUna,IACV6c,WAAa7c,MARnB,kDAiBI,OAHKD,KAAK0V,QACR1V,KAAK0V,MAAQ,IAER1V,KAAK0V,OAjBhB,aAmBYxV,GACRF,KAAK0V,MAAQxV,IApBjB,kCAyBI,OAAOF,KAAKqc,aAzBhB,aA2BkBnc,GACdF,KAAKqc,YAAcnc,EACnBF,KAAK+c,aAAe/c,KAAKwc,kBACzBxc,KAAK2c,cAAgB3c,KAAK+c,eA9B9B,mCAsCI,OAHK/c,KAAKgd,eACRhd,KAAKgd,aAAehd,KAAKwc,mBAEpBxc,KAAKgd,cAtChB,aAwCmB9c,GACfF,KAAKgd,aAAe9c,IAzCxB,oCAmDI,OAAOF,KAAKyc,eAnDhB,aAqDoBvc,GAChBF,KAAKyc,cAAgBvc,EACrBF,KAAKid,aAAejd,KAAK0c,oBAvD7B,mCA+DI,OAHK1c,KAAKkd,eACRld,KAAKkd,aAAeld,KAAK0c,mBAEpB1c,KAAKkd,cA/DhB,aAiEoBhd,GAChBF,KAAKkd,aAAehd,EAChBF,KAAKya,uBACPza,KAAKya,sBAAsBva,KApEjC,kCAmFI,OAHKF,KAAKJ,cACRI,KAAKJ,YAAc,+CAEdI,KAAKJ,aAnFhB,aAqFkBM,GACdF,KAAKJ,YAAcM,IAtFvB,+BAgGI,OAAOF,KAAK4c,SAAW,CACrBrc,SAAU,WACV4c,QAAS,cACP,KAnGR,kCA2GI,OAHKnd,KAAK0a,cACR1a,KAAK0a,YDlGF,SAAC3O,GAAD,OAAUA,EAAK4O,eAAiB5O,EAAK4O,eAA3B,UAA+C5O,KCoGvD/L,KAAK0a,aA3GhB,aA6GmBxa,GACfF,KAAK0a,YAAcxa,IA9GvB,2BAmHI,OAAOF,KAAKma,MAnHhB,aAqHWja,GACPF,KAAKma,KAAOja,EACRF,KAAK4a,WACP5a,KAAK4a,UAAU1a,KAxHrB,8BA8HI,OAAOF,KAAKoa,SA9HhB,aA+HgBla,GACZF,KAAKoa,QAAUla,IAhInB,iCAqII,OAAOF,KAAK8c,YArIhB,aAsImB5c,GACfF,KAAK8c,WAAa5c,MAvItB,KCDqBkd,G,iDAInBC,aAAe,WAIb,OAHK,EAAK7S,YACR,EAAKA,UAAL,gBAA0B,EAAK8S,WAE1B,EAAK9S,YCRHhK,GAAM,SAAC+c,GAClB,IAAI7c,EAAK,IAAI0c,GAEb,OADA1c,EAAG4c,SAAWC,EACP7c,GCDH8c,G,kDACJ,WAAY5c,GAAQ,IAAD,uBACjB,cAAMA,IAUR6c,kBAAoB,WAAO,IACnBnd,EAAY,EAAKW,MAAjBX,QACN,OAAKA,GAAgB,IAbJ,IAGXa,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACUuc,GAAoB,aALlB,E,qDAkBjB,IAAIrc,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,sBAAMuJ,UAAWnJ,EAAKgc,eAAtB,SAAuCrd,KAAKyd,4B,GAvBxBlc,aA6BbC,eAASgc,ICvBhB3C,I,OAAWC,IAAXD,QAEF8C,G,kDACJ,WAAY/c,GAAQ,IAAD,uBACjB,cAAMA,IAURoa,cAAgB,SAAC9a,GACJ,EAAKe,MACX0b,cAAgBzc,GAbJ,EAgBnB+a,wBAA0B,SAAC/a,GACd,EAAKe,MACXia,KAAOhb,GAlBK,IAGXiB,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAImb,GALF,E,qDAsBjB,IAAIjb,EAAOrB,KAAKiB,MACZuJ,EAAYxK,KAAKY,MAAM4J,UAAYxK,KAAKY,MAAM4J,UAAY,GAC1DpK,EAAQJ,KAAKY,MAAMR,MAAQJ,KAAKY,MAAMR,MAAQ,CAAE+a,MAAO,QACrDzQ,EAAoDrJ,EAApDqJ,YAAaoB,EAAuCzK,EAAvCyK,MAAO6Q,EAAgCtb,EAAhCsb,cAAeI,EAAiB1b,EAAjB0b,cAElB,IAAnBJ,IACFA,EAAgBI,EAChB1b,EAAK0b,cAAgB,GAGvB,IAAI3B,EAAQtP,EAAQA,EAAM6J,KAAI,SAAC5J,EAAMzE,GACnC,IAAI+T,EAAiBha,EAAKia,YAAYvP,GAElC0E,OAAK9Q,EAQT,OANE8Q,OADW9Q,IAAToM,EACG5C,KACoB,kBAAT4C,GAAsBmD,MAAMnD,GAGvCA,EAAK7C,IAAM6C,EAAK7C,IAAM6C,EAAK0E,GAF3B1E,EAIA,cAAC,GAAD,CAAiBhL,MAAOuG,EAAxB,SAAgC+T,GAAnB5K,MACjB,GAEDmN,EAAY,GAChB,GAAIvc,EAAKub,SAAU,CACjB,IAAIiB,EAAiBH,GAAoB,SACzCG,EAAevd,QAAU,cAAC,IAAD,CAAQ+D,KAAK,QAAQmH,KAAK,UACjDC,QAASpK,EAAKwb,MADS,eAGzBe,EAAY,cAAC,GAAD,CAAezc,MAAO0c,IAGpC,OACE,mCACE,sBAAKrT,UAAS,0BAAqBA,GACjCpK,MAAOiB,EAAKyc,SADd,UAEGF,EACD,cAAC,IAAD,CAAQxd,MAAOA,EACb2d,YAAU,EACVne,YAAa8K,EACb8Q,iBAAiB,WACjB3a,SAAUb,KAAKgb,cACfja,MAAO4b,EACPlB,aAAc,SAACC,EAAOC,GAAR,OACZA,EAAOC,SAAS3M,cAAc3F,QAAQoS,EAAMzM,gBAAkB,GAEhEkL,KAAM9Y,EAAKwa,SAAWxa,EAAK6Z,KAC3BD,wBAAyBjb,KAAKib,wBAC9B+C,SAAU3c,EAAK4c,WAXjB,SAaG7C,a,GA1EY7Z,aAkFVC,eAASmc,IC9FXO,GAAS,SACTC,GAAQ,QCQAC,G,WACnB,aAAe,IAAD,gCAOdC,SAAWC,GAPG,KAqBdC,eAAiB,WACf,OAAQ,EAAKF,UACX,KAAKC,GACH,EAAKD,SAAWC,GAChB,MACF,KAAKA,GACH,EAAKD,SAAWC,KA1BpBve,YAAeC,KAAM,CACnBqe,SAAUpe,M,kDAQZ,OClBoB,SAACC,GACvB,OAAQA,EAAEme,UACR,KAAKC,GACH,MAAO,UACT,KAAKA,GACH,MAAO,WDaFpT,CAAclL,Q,kCAIrB,MAAO,CACLmb,MAAO,GACPqD,gBAAiBxe,KAAKye,MACtBC,OAAQ,Y,KE3BDhD,GAAQ,QACRiD,GAAS,SCGTC,GAAb,WACE,aAAe,IAAD,gCAUdlJ,WAAQ/V,EAVM,KAqBdkf,gBAAalf,EArBC,KA+Bdmf,iBAAcnf,EA/BA,KAyCdof,oBAAiBpf,EAzCH,KAgDd6a,cAAgB,GAhDF,KAuDdwE,OAAS,SAACjT,GACR,MAAoB,kBAATA,EAA0BA,EAC5BA,EAAK0E,GAAK1E,EAAK0E,GAAKtH,MAzDjB,KA6Dd2R,OAAS,SAAC/O,GACR,IAAIkT,EAAS,EAAKC,eAAe5V,QAAQyC,GACzC,EAAKmT,eAAezX,OAAOwX,EAAQ,GAEnC,EAAK1E,cAAczS,KAAKiE,GAExB,EAAKoT,WAAY,GAnEL,KAsEdC,SAAW,SAACrT,GACV,IAAIkT,EAAS,EAAK1E,cAAcjR,QAAQyC,GACxC,EAAKwO,cAAc9S,OAAOwX,EAAQ,GAElC,IAAI3X,EAAQ,EAAKwE,MAAMxC,QAAQyC,GAC3BzE,EAAQ,EAAK4X,eAAenY,OAC9B,EAAKmY,eAAezX,OAAOH,EAAO,EAAGyE,GAErC,EAAKmT,eAAepX,KAAKiE,GAG3B,EAAKoT,WAAY,GAhFjBpf,YAAeC,KAAM,CACnB0V,MAAOzV,IACP8e,eAAgB9e,IAChBua,cAAeva,IACf4e,WAAY5e,IACZ6e,YAAa7e,MAPnB,kDAaI,OAAOD,KAAK0V,OAbhB,aAeYxV,GACRF,KAAK0V,MAAQxV,EAEbF,KAAKkf,eAAL,YAA0Blf,KAAK8L,OAC/B9L,KAAKua,cAAgB,KAnBzB,iCA2BI,OAHKva,KAAK6e,aACR7e,KAAK6e,WAAa,2BAEb7e,KAAK6e,YA3BhB,aA4BmB3e,GACfF,KAAK6e,WAAa3e,IA7BtB,kCAqCI,OAHKF,KAAK8e,cACR9e,KAAK8e,YAAc,4BAEd9e,KAAK8e,aArChB,aAsCoB5e,GAChBF,KAAK8e,YAAc5e,IAvCvB,qCA4CI,OAAOF,KAAK+e,gBA5ChB,aA6CuB7e,GACnBF,KAAK+e,eAAiB7e,IA9C1B,oCAmDI,OAAOF,KAAKwa,eAnDhB,aAoDsBta,GAClBF,KAAKwa,cAAgBta,IArDzB,8BAqFgBA,GACRF,KAAKya,uBACPza,KAAKya,sBAAsBza,KAAKua,iBAvFtC,6BAgGI,OAHKva,KAAKiL,SACRjL,KAAKiL,OAASC,GAAelL,OAExBA,KAAKiL,QAhGhB,aAkGa/K,GACTF,KAAKiL,OAAS/K,MAnGlB,KCDaM,GAAM,SAACkV,EAAOzK,EAAQ4T,EAAYC,GAC7C,IAAIpe,EAAK,IAAIke,GAOb,OALAle,EAAGoL,MAAQ4J,EACXhV,EAAGsL,OAASf,EACZvK,EAAG2e,WAAaR,EAChBne,EAAG4e,YAAcR,EAEVpe,GAgBIyK,GAAY,SAAC1K,GACxB,OAAO,SAACsL,GAAD,OAAUA,ICpBbwT,I,yDACJ,WAAY3e,GAAQ,IAAD,uBACjB,cAAMA,IAURoa,cAAgB,SAAC9a,GACJ,EAAKe,MACXiZ,eAAiBha,GAbL,EAgBnB+a,wBAA0B,SAAC/a,GACd,EAAKe,MACXia,KAAOhb,GAlBK,IAGXiB,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GDEAX,GACL,CACE,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,IACV,IAAK,IAAK,MCZK,E,qDAsBjB,IAAIa,EAAOrB,KAAKiB,MACJjB,KAAKY,MAAMR,MAEvB,OACE,mCACE,wBAAOoK,UAAU,WAAjB,UACE,gCACE,+BACE,6BACE,qBAAKA,UAAU,kBAAf,SACE,+BACGnJ,EAAKge,iBAIZ,6BACE,qBAAK7U,UAAU,kBAAf,SACGnJ,EAAKie,qBAKd,gCACE,+BACE,6BACE,sBAAM9U,UAAU,8BAAhB,SACGnJ,EAAK6d,eAAevJ,KAAI,SAAA1O,GACvB,OAAO,sBAA2BwE,QAAS,kBAAMpK,EAAKyZ,OAAO7T,IAAtD,SACJ5F,EAAK2K,OAAO/E,IADG5F,EAAK2d,OAAO/X,WAMpC,6BACE,sBAAMuD,UAAU,8BAAhB,SACGnJ,EAAKkZ,cAAc5E,KAAI,SAAA1O,GACtB,OAAO,sBAA2BwE,QAAS,kBAAMpK,EAAK+d,SAASnY,IAAxD,SACJ5F,EAAK2K,OAAO/E,IADG5F,EAAK2d,OAAO/X,yB,GA3DlB1F,cAyEjBC,eAAS+d,IC9EHC,G,WACnB,aAAe,IAAD,gCAUdC,kCAA8B9f,EAVhB,KAuBd+f,OAAS,SAACC,GACR,OAAO,EAAKvW,KAAKuW,IAvBjB5f,YAAeC,KAAM,CACnByf,6BAA8Bxf,M,6DAKhC,OAAOD,KAAKoJ,KAAKwW,mB,mDASjB,YAJ0CjgB,IAAtCK,KAAKyf,+BACPzf,KAAKyf,6BACkCzf,KCflC4f,iBAAiBrT,aDiBjBvM,KAAKyf,8B,aACqBvf,GACjCF,KAAKyf,6BAA+Bvf,EAEpCF,KAAK4f,iBAAiBrT,YAAarM,M,yBEfjC2f,G,kDACJ,WAAYjf,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIqe,GALF,E,qDAYjB,IAAIne,EAAOrB,KAAKiB,MAEhB,OACE,qCACGI,EAAKye,+BAAiCC,GACrC,cAAC,IAAD,CAAQ1b,KAAK,QAAQmH,KAAK,UACxBhB,UAAU,cACViB,QAAS,kBAAMpK,EAAKye,6BAA+BC,IAFrD,eAKA,GAEF,cAAC,IAAD,CAAQ1b,KAAK,QAAQmH,KAAK,UACxBhB,UAAU,cACViB,QAASpK,EAAKqe,OAAO,UAFvB,SAGE,cAACM,GAAA,EAAD,MAEF,cAAC,IAAD,CAAQ3b,KAAK,QAAQmH,KAAK,UACxBhB,UAAU,cACViB,QAASpK,EAAKqe,OAAO,YAFvB,SAGE,cAACO,GAAA,EAAD,MAGF,cAAC,IAAD,CAAQzU,KAAK,UAAUnH,KAAK,QAC1BmG,UAAU,cACViB,QAASpK,EAAKqe,OAAO,aAFvB,iBAIA,cAAC,IAAD,CAAQrb,KAAK,QAAQmH,KAAK,UACxBhB,UAAU,cACViB,QAASpK,EAAKqe,OAAO,UAFvB,eAGA,cAAC,IAAD,CAAQlU,KAAK,UAAUnH,KAAK,QAAQ6b,QAAM,EACxCzU,QAASpK,EAAKqe,OAAO,UADvB,sB,GA3C8Bne,aAkDvBC,eAASqe,ICxBHM,G,WACnB,aAAe,IAAD,gCAwDdC,SAAW,GAxDG,KAkFdC,YAAc,WACZ,EAAKpX,MAAMjC,SAAQ,SAAAC,GAAC,OAAIA,EAAEqZ,iBAnFd,KAmMdC,WAAY,EAnME,KAgOdC,UAAO7gB,EAhOO,KA4Od8gB,eAAY9gB,EA5OE,KA2Pd+gB,eAAgB,EA3PF,KA6PdC,eAAiBC,GA7PH,KA+PdC,sBAAwB,WACtB,OAAQ,EAAKF,gBACX,KAAKC,GACH,EAAKE,UAAY,EAAKC,aAAa7f,QACnC,EAAKyf,eAAiBC,GACtB,MACF,KAAKA,GACH,EAAKI,cAAczE,YAAc,EAAKuE,UACtC,EAAKH,eAAiBC,KAvQd,KA0TdxQ,WAAQzQ,EA1TM,KAyXdshB,gBAAkB,SAAChZ,GACjB,IAAIX,EAAQ,EAAK2B,MAAM1B,WAAU,SAAAN,GAAC,OAAIA,EAAEia,SAAWjZ,KACnD,OAAkB,IAAXX,EAAe,EAAK2B,MAAM3B,QAAS3H,GA3X9B,KA8Xd2gB,WAAa,WAIP,EAAKa,oBAA+C,IAAzB,EAAKC,SAASra,OAC3C,EAAKsa,YAAY5Z,OAAO,EAAK0I,MAAO,IAItC,EAAKmR,KAAOpW,GAAa,GACzB,EAAKqW,UAAYrW,GAAkB,GAEnC,EAAKkW,SAAWlW,GAAW,EAAKkW,UAChC,EAAKA,SAASpa,SAAQ,SAAAC,GAAC,OAAIA,EAAEqZ,kBA3YjB,KA8YdkB,UAAY,WACV,EAAKC,WAAa,EAAKA,WA/YX,KAkZdC,aAAe,WACb,IAAIC,EAAgB,EAAKC,cAAgB,EAAKA,cAAgB,GAE1D9a,GAAS,EAUb,GATI,EAAK+a,UAAU9a,SAAW4a,EAAc5a,OAC1CD,GAAS,EAET,EAAK+a,UAAU7a,SAAQ,SAACC,EAAGC,GACrBJ,GAAUG,IAAM0a,EAAcza,KAChCJ,GAAS,OAIXA,EAAJ,CACA,EAAK+a,UAAYF,EAEjB,IAAIhT,EAAS,IAAIjB,GACjBiB,EAAOhB,UAAYmB,GACnBH,EAAOZ,iBAAmBgB,GAC1BJ,EAAOV,OAAS,CAAC,EAAKiH,WAEtB,IAAI4M,EAAS,EAAKhS,cAEdiS,EAAM,IAAInJ,GACdmJ,EAAIC,QAAUF,EACdC,EAAI/J,OAASrJ,EAEb,IAAIsT,EAAUF,EAAIjW,MAAQ6V,EAAchM,KAAI,SAAA1O,GAAC,OAAIib,GAAYjb,EAAG,KAAM8a,MAElEzI,EAAWwI,EAAOtL,cACtB,GAAI,EAAK2L,sBAAuB,CAC9B,IAAI7a,EAAQgS,EAAShQ,QAAQ,EAAK6Y,uBAClC7I,EAAShS,GAASya,OAElBzI,EAASxR,KAAKia,GAOhB,GAJA,EAAKI,sBAAwBJ,EAC7B,EAAKX,SAAW,GAChB,EAAKgB,+BAA4BziB,EAEV,IAAnBsiB,EAAQlb,OAAc,CACxB,IAAI4R,EAAQ,EAAKlB,MACjB,EAAK3L,MAAM9E,SAAQ,SAAAC,GAGjB,OAAQ0R,EAAM0J,aACZ,KAAKrR,EACH/J,EAAEqb,mBAAmBtb,SAAQ,SAAAuQ,GAAC,OAC5BoB,EAAM4J,WAAWtb,EAAGsQ,EAAGwK,EAAK,MAC9B,MACF,QACEpJ,EAAM4J,WAAWtb,EAAGA,EAAE8J,SAAS4H,EAAM0J,aAAcN,EAAK,UAtcpD,KA6cdS,OAAS,WACP,IAAIlc,EAAO,EAAK+a,YACZ/Z,EAAQ,EAAK6I,MACjB,GAAI,IAAM7I,EAAV,CAEA,IAAImb,EAAa,EAAKC,SAASC,WAC3BC,EAAc,EAAKF,SAASG,YAC5BC,EAAYF,EAAYtZ,QAAQhD,EAAKgB,GAAO4N,WAC5C6N,EAAYH,EAAYtZ,QAAQhD,EAAKgB,EAAQ,GAAG4N,WAEpD/L,GAAiB7C,EAAMgB,EAAOA,EAAQ,GACtC6B,GAAiBsZ,EAAYK,EAAWC,KAxd5B,KA2ddC,SAAW,WACT,IAAI1c,EAAO,EAAK+a,YACZ/Z,EAAQ,EAAK6I,MACjB,GAAI7J,EAAKS,OAAS,IAAMO,EAAxB,CAEA,IAAImb,EAAa,EAAKC,SAASC,WAC3BC,EAAc,EAAKF,SAASG,YAC5BC,EAAYF,EAAYtZ,QAAQhD,EAAKgB,GAAO4N,WAC5C6N,EAAYH,EAAYtZ,QAAQhD,EAAKgB,EAAQ,GAAG4N,WAEpD/L,GAAiB7C,EAAMgB,EAAOA,EAAQ,GACtC6B,GAAiBsZ,EAAYK,EAAWC,KAte5B,KAyedE,OAAS,WACP/X,GAAS,EAAM,EAAKuM,QA1eR,KA6edvH,OAAS,WACP,IAAI+I,EAAU,EAAKE,QACf7S,EAAO,EAAK+a,aAEZ,EAAK1J,gBACP,EAAK7H,cAAc6G,QAAQ,EAAKzB,WAAWhF,SAE3C,EAAKJ,cAAc4G,mBAAmB,EAAKxB,WAG7C5O,EAAKmB,OAAO,EAAK0I,MAAO,GAEpB8I,KACkB,IAAhB3S,EAAKS,QACOkS,EAAU,EAAKxB,MAAMyL,SAAWjK,EAAQoI,aAC9C5Z,OAAOwR,EAAQ9I,MAAO,GAE9B8I,EAAQhQ,MAAMjC,SAAQ,SAAAC,GACpBA,EAAEqZ,kBA/fI,KA6gBd6C,UAAY,WACV,IAAIC,EAAU,EAAKC,eACfC,EAASF,EAAQG,aAErB,GAAKD,EAAL,CAEA,IAAI/F,EAAM6F,EAAQ/E,SACbiF,IAAW,GAAQ/F,IAAQiG,IAC7BF,IAAW,EAAKnK,SAAWoE,IAAQiG,KAItC,EAAKC,QAAQH,EAAQ/F,GAErB6F,EAAQ/E,SAAWmF,MA3hBP,KA8hBdE,iBAAmB,WACF,EAAKC,oBACX3c,SAAQ,SAAAC,GACfA,EAAEwc,QAAQ,EAAMD,QAjiBN,KAqiBdC,QAAU,SAACH,EAAQ/F,GAAS,IAAD,EAEzB,EAAKqG,YAAa,EACR,EAAKC,gBAAf,IAGIC,EAAS,EAAKhU,cACduH,OAAS1X,EAGb,OAAQ4d,GACN,KAAKiG,GACHnM,EAASiM,EACT,MACF,KAAKE,GACHnM,EAASiM,EAAOnK,QAKpB,GAAI,EAAKA,UAAY9B,EAArB,CAGA,IAAI0M,EAAS1M,EACVA,EAAO2M,yBAA2B3M,EAAO2M,yBACxC9Y,GAA4BmM,GAC5B,EAAKI,MAAMwM,QAGXC,EAAQJ,EAAOnN,QAAQ,EAAKzB,WAChCgP,EAAMhM,OAAS6L,EACfG,EAAMvT,SAAN,UAAiB0G,SAAjB,aAAiB,EAAQnS,KAEzB,EAAKif,WAAaJ,EAGlB,IAAIK,EAAK,EAAK/C,YACd+C,EAAG3c,OAAO,EAAK0I,MAAO,GAOtB,IAHA,IAAI8I,EAAU,EAAKE,QAGE,IAAdiL,EAAGrd,SAGRqd,EAAKnL,EAAUA,EAAQoI,YAAc,EAAK5J,MAAMyL,UAC7Czb,OAAOwR,EAAQ9I,MAAO,GAEzB8I,EAAUA,EAAQE,QAIhBF,GACFA,EAAQhQ,MAAMjC,SAAQ,SAAAC,GACpBA,EAAEqZ,YAAW,MAKjB,EAAKnH,QAAU9B,EACJ,EAAKgK,YACXvZ,KAAK,GAGNuP,GACFA,EAAOpO,MAAMjC,SAAQ,SAAAC,GACnBA,EAAEqZ,YAAW,MAIjB,EAAK+D,sBAAuB,IA7mBhB,KAgnBdC,gBAAiB,EAhnBH,KAknBdC,UAAY,WACV,EAAKD,gBAAiB,EAGtB,EAAKE,QAAQtjB,QAAU,EAAK+O,MAG5B,EAAK8Q,aAAa7f,QAAU,EAAKsT,MACjC,EAAKwM,cAAczE,YAAc,EAAK/H,MACtC,EAAKsM,UAAY,EAAKtM,MAGC,EAAKiQ,iBACX3K,aAAe,EAAK+H,UAGrC,EAAK8B,yBAAsBhkB,EAC3B,EAAK+kB,iBAAiB5Y,MAAQ,EAAK6Y,oBAEnC,IAAIC,EAAc,EAAKC,iBACvBD,EAAY9Y,MAAQ,EAAK6Y,oBACzBC,EAAYrI,iBAAc5c,GAvoBd,KA0oBdmlB,QAAU,WACR,EAAKR,gBAAiB,EAGtB,IAAIlU,EAAQ,EAAKoU,QAAQtjB,QACzB,EAAK+O,MAAQG,EACb,EAAKN,cAAc6G,QAAQ,EAAKzB,WAAWjF,MAAQG,EAG/C,EAAKoE,QAAU,EAAKsM,YACtB,EAAKtM,MAAQ,EAAKsM,WAKf,EAAKnJ,iBACR,EAAK+J,eAGQ,EAAKiC,oBAGlB,EAAKD,mBAGL,EAAKP,aAnqBK,KAuqBd4B,YAAc,WACZ,EAAKT,gBAAiB,GAxqBV,KA2qBdU,iBAAmB,CACjB,6BACA,wDACA,+EACA,yCA/qBY,KAs1BdC,oBAAsB,SAACC,GAChB,EAAKC,oBACR,EAAKA,kBAAoB,IAG3B,IAAI7e,EAAO,EAAK6e,kBAEhB7e,EAAKwB,KAAKod,GACN5e,EAAKS,SAAW,EAAKkC,MAAMlC,SAC7B,EAAKoe,uBAAoBxlB,EACzB,EAAKylB,2BAA4B,EAK7B,EAAKzN,iBACP,EAAKF,MAAM4N,8BAA8B,KAt2BjC,KA22BdC,2BAA4B,EA32Bd,KAi3BdC,yBAAsB5lB,EAj3BR,KAo3Bd6lB,6BAA8B,EAp3BhB,KAk4BdC,0BAA4B,WAC1B,EAAKD,6BAA8B,GAn4BvB,KAs4BdE,2BAA6B,WAC3B,EAAKF,6BAA8B,GAv4BvB,KA04BdG,uBAAyB,WACvB,EAAKH,6BAA8B,GA34BvB,KAk6Bd7B,yBAAsBhkB,EAl6BR,KAo6BdimB,qBAAkBjmB,EAn6BhBI,YAAeC,KAAM,CACnBwgB,KAAMvgB,IACNsgB,UAAWtgB,IACXwgB,UAAWxgB,IACXygB,cAAezgB,IACfmgB,SAAUngB,IACVqkB,eAAgBrkB,IAChBmQ,MAAOnQ,IACP0gB,eAAgB1gB,IAChBqlB,0BAA2BrlB,IAC3BslB,oBAAqBtlB,IACrBulB,4BAA6BvlB,IAC7B0jB,oBAAqB1jB,IACrB2lB,gBAAiB3lB,M,+CASnB,OAHKD,KAAKkJ,MACRlJ,KAAKkJ,IAAMC,MAENnJ,KAAKkJ,M,4BAIZ,OAAOlJ,KAAKqhB,YAAY/X,QAAQtJ,Q,8BAKhC,OAAOA,KAAKiZ,S,aAEF/Y,GACVF,KAAKiZ,QAAU/Y,EACfF,KAAKqhB,iBAAc1hB,EACnBK,KAAKshB,UAAO3hB,I,kCAQZ,OAHKK,KAAK6lB,cACR7lB,KAAK6lB,YAAc7lB,KAAKmZ,QAAUnZ,KAAKmZ,QAAQiI,SAAWphB,KAAKyX,MAAMyL,UAEhEljB,KAAK6lB,a,aAEE3lB,GACdF,KAAK6lB,YAAc3lB,I,4BAInB,OAAOF,KAAKoJ,O,+BAMZ,OAAOpJ,KAAKogB,U,aACClgB,GACbF,KAAKogB,SAAWlgB,I,+BAIhB,IAAIoG,EAAO,GAKX,OAJAA,EAAKwB,KAAK9H,MACVA,KAAKohB,SAASpa,SAAQ,SAAAC,GACpBX,EAAKwB,KAAKkR,MAAM1S,EAAMW,EAAEuJ,aAEnBlK,I,4BAUP,OAJKtG,KAAK8lB,QACR9lB,KAAK8lB,MAAQ5a,GAAelL,OAGvBA,KAAK8lB,Q,4BAQZ,IAAIpQ,EAAQ1V,KAAKiJ,MAAM8c,QAAO,SAACxjB,EAAGyjB,GAAJ,OAAUzjB,EAAE0jB,OAAOD,EAAEla,SAAQ,IAE3D,OADA4J,EAAQA,EAAM/G,QAAO,SAAC1H,EAAGC,EAAG3E,GAAP,OAAaA,EAAE+G,QAAQrC,KAAOC,O,oCAOnD,OAAOlH,KAAKkmB,e,aAEIhmB,GAEhB,GADAF,KAAKkmB,cAAgBhmB,EACjBA,EAAG,CACL,IAAIkQ,EAAQlQ,EAAEyW,QAAQ3W,KAAKkV,WAAWjF,MACtCjQ,KAAKiQ,MAAQG,K,iCAMf,OAAOpQ,KAAKmmB,Y,aACGjmB,GACfF,KAAKmmB,WAAajmB,I,gDAQlB,OAHKF,KAAKomB,4BACRpmB,KAAKomB,0BAA4Blb,GAAkClL,OAE9DA,KAAKomB,2B,aAEgBlmB,GAC5BF,KAAKomB,0BAA4BlmB,I,+CAQjC,OAHKF,KAAKqmB,2BACRrmB,KAAKqmB,yBAA2Bnb,GAAiClL,OAE5DA,KAAKqmB,0B,aAEenmB,GAC3BF,KAAKqmB,yBAA2BnmB,I,uCAIhC,OAAOF,KAAKgkB,yBACVhkB,KAAKgkB,yBAA2BhkB,KAAKoiB,2B,aAClBliB,GACrBF,KAAKgkB,yBAA2B9jB,I,4BAQhC,OAHKF,KAAKyE,QACRzE,KAAKyE,MAAQzE,KAAK8P,cAAgB9P,KAAK8P,cAAc0E,WAAQ7U,GAExDK,KAAKyE,O,aACFvE,GACVF,KAAKyE,MAAQvE,I,iCAKb,OAAOF,KAAKsmB,Y,aACGpmB,GACfF,KAAKsmB,WAAapmB,GACRF,KAAKslB,0BACXpa,GAAmClL,SAGrCA,KAAKulB,oBAAsBra,GAA6BlL,S,sCAS1D,OAHKA,KAAKumB,kBACRvmB,KAAKumB,gBAAkBrb,GAAyBlL,OAE3CA,KAAKumB,iB,aACQrmB,GACpBF,KAAKumB,gBAAkBrmB,I,4CAIvB,OAAOgL,GAA+BlL,Q,+BAItC,OAAOA,KAAKmkB,WAAankB,KAAKmkB,WAAankB,KAAK8P,gB,gCAQhD,OAHK9P,KAAKwmB,YACRxmB,KAAKwmB,UAAYtb,GAAkBlL,OAE9BA,KAAKwmB,W,aAEAtmB,GACZF,KAAKwmB,UAAYtmB,I,gCAOjB,OAAOF,KAAKugB,W,aAEArgB,GACZF,KAAKugB,UAAYrgB,EACjBF,KAAKymB,sBAAsBvlB,QAAUgK,GAA4BlL,Q,0CAQjE,OAHKA,KAAK0mB,sBACR1mB,KAAK0mB,oBAAsBxb,GAA4BlL,OAElDA,KAAK0mB,qB,aAEUxmB,GACtBF,KAAK0mB,oBAAsBxmB,I,4CAIA,IAAD,OACrBF,KAAK2mB,yBACE3mB,KAAK2mB,sBAAwBvlB,EAAepB,KAAK4mB,sBACvDC,aAAe,SAAC3mB,GAAD,OAAO,EAAK0mB,oBAAsB1mB,IAEvD,OAAOF,KAAK2mB,wB,2BAQZ,YAHkBhnB,IAAdK,KAAKwgB,OACPxgB,KAAKwgB,KAAOtV,GAAalL,OAEpBA,KAAKwgB,M,aAELtgB,GACPF,KAAKwgB,KAAOtgB,EACZF,KAAKohB,SAASpa,SAAQ,SAAAC,GAAC,OAAIA,EAAEqa,UAAO3hB,O,gCAQpC,OAHKK,KAAKygB,YACRzgB,KAAKygB,UAAYvV,GAAkBlL,OAE9BA,KAAKygB,W,aAEAvgB,GACZF,KAAKygB,UAAYvgB,I,4BAIjB,OAAOgL,GAAclL,Q,mCAuBH,IAAD,OACZA,KAAK8mB,gBACE9mB,KAAK8mB,aAAe1lB,KAC1BjB,aAAe,SAACD,GAAD,OAAO,EAAK4gB,UAAY5gB,IAE7C,OAAOF,KAAK8mB,e,oCAQZ,OAHK9mB,KAAK+mB,gBACR/mB,KAAK+mB,cAAgB7b,GAAsBlL,OAEtCA,KAAK+mB,gB,wCAIZ,OAAO,mCACL,sBAAKvc,UAAU,8BAAf,UACE,qBAAKA,UAAU,sBAAf,SACGxK,KAAK2gB,iBAAmBC,GACvB,cAAC,GAAD,CAAYzf,MAAOnB,KAAKghB,gBACxB,cAAC,GAAD,CAAc7f,MAAOnB,KAAK+gB,iBAG7B/gB,KAAK2X,gBACJ,cAAC,KAAD,CAAQqP,kBAAkB,MAAMC,gBAAgB,MAC9CC,QAASlnB,KAAK2gB,iBAAmBC,GACjC/f,SAAUb,KAAK6gB,wBACf,U,uCAUR,OAHK7gB,KAAKmnB,mBACRnnB,KAAKmnB,iBAAmBjc,GAAyBlL,OAE5CA,KAAKmnB,mB,4BASZ,OAAOnnB,KAAKoQ,O,aAEJlQ,GACRF,KAAKoQ,MAAQlQ,EACbF,KAAKwkB,QAAQtjB,QAAUhB,EACvBF,KAAK4f,iBAAiB1e,QAAUhB,I,8BAQhC,OAHKF,KAAKonB,UACRpnB,KAAKonB,QAAUhmB,EAAepB,KAAKiQ,MAAO,yBAErCjQ,KAAKonB,U,uCAIU,IAAD,OACrB,IAAKpnB,KAAKqnB,iBAAkB,CAC1B,IAAIlhB,EAAMnG,KAAKqnB,iBCpXF,SAAC3nB,GAA4C,IAAnC4nB,IAAkC,yDAAlBC,EAAkB,uCACzD7mB,EAAK,IAAIwL,GAWb,OATAxL,EAAGQ,QAAUxB,EACbgB,EAAG4L,sBAAwBgb,OAEL3nB,IAAlB4nB,IACFA,EAAgBD,GAGlB5mB,EAAG4K,gBAAkBic,EAEd7mB,EDyWD8mB,CAAiBxnB,KAAKiQ,OAAO,GAAM,GAErC9J,EAAIoF,iBAAkB,EAEtBpC,GACEhD,EAAIiG,6BACJ,WACE,GAAIjG,EAAIoG,cAAgBwT,GAAc,CAEpC,IAAI3P,EAAQ,EAAKA,MAAQjK,EAAIjF,QAC7B,EAAKumB,gBAAkBvc,GAAwB,GAC/C,EAAK4E,cAAc6G,QAAQ,EAAKzB,WAAWjF,MAAQG,EAEnD,EAAKsX,YAAYjI,6BAA+BtZ,EAAIoG,gBAGxD,GAGJ,OAAOvM,KAAKqnB,mB,0CAIZ,OAAOrnB,KAAKyX,MAAMkQ,U,uCAQlB,OAHK3nB,KAAK4nB,mBACR5nB,KAAK4nB,iBAAmB1c,GAAyBlL,OAE5CA,KAAK4nB,mB,qCAwJZ,OAHK5nB,KAAK6nB,iBACR7nB,KAAK6nB,eAAiB,IAAIzJ,IAErBpe,KAAK6nB,iB,gDA6KZ,OAHK7nB,KAAK8nB,4BACR9nB,KAAK8nB,0BAA4BC,GAAe/nB,KAAKglB,mBAEhDhlB,KAAK8nB,4B,mCAIZ,IAAI1E,EAAUpjB,KAAKqjB,eACf2E,EAAa,QAEjB,OAAO,eAAC,KAAD,CAAO5X,MAAOpQ,KAAKiQ,MAAOgY,QAASjoB,KAAKskB,eAC7CnJ,MAAO,IACP+M,KAAMloB,KAAK8kB,QAASqD,SAAUnoB,KAAK+kB,YAF9B,UAIL,eAAC,KAAD,CAAKqD,OAAQ,GAAIhoB,MAAO,CAAEioB,UAAW,IAArC,UACE,cAAC,KAAD,CAAKC,KAAMN,EAAX,SACE,yDAEF,cAAC,KAAD,CAAKM,KAAK,OAAV,SACE,cAAC,EAAD,CAAWnnB,MAAOnB,KAAKwkB,eAK3B,eAAC,KAAD,CAAK4D,OAAQ,GAAIhoB,MAAO,CAAEioB,UAAW,IAArC,UACE,cAAC,KAAD,CAAKC,KAAMN,EAAX,SACE,+DAEF,cAAC,KAAD,CAAKM,KAAK,OAAV,SACGtoB,KAAKuoB,uBAKRvoB,KAAK2X,gBAOE,GAPgB,eAAC,KAAD,CAAKyQ,OAAQ,GAAIhoB,MAAO,CAAEioB,UAAW,IAArC,UACvB,cAAC,KAAD,CAAKC,KAAMN,EAAX,SACE,wEAEF,cAAC,KAAD,CAAKM,KAAK,OAAV,SACE,cAAC,GAAD,CAAiBnnB,MAAOnB,KAAKykB,wBAKjC,eAAC,KAAD,CAAK2D,OAAQ,GAAIhoB,MAAO,CAAEioB,UAAW,IAArC,UACE,eAAC,KAAD,CAAKC,KAAMN,EAAYxd,UAAU,8BAAjC,UACE,+DACA,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAC1BmG,UAAWxK,KAAK2jB,oBACd,6CAA+C,GACjDlY,QAASzL,KAAKylB,0BAHhB,oCAICzlB,KAAKwoB,+BAER,cAAC,KAAD,CAAKF,KAAK,OAAV,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAKA,KAAK,OAAV,SACE,cAAC,GAAD,CAAYnnB,MAAOnB,KAAK6kB,qBAE1B,cAAC,KAAD,UACE,cAAC,IAAD,CAAQrZ,KAAK,UAAUnH,KAAK,QAC1BjE,MAAOgjB,EAAQqF,YAAahd,QAAS2X,EAAQ7E,eAD/C,SAEE6E,EAAQ/E,0B,uCAmBpB,IAAIlY,EAAM,IAAI2V,GAEd,OADA3V,EAAI8K,QAAU,cAAC,GAAD,CAAyB9P,MAAOnB,KAAK0nB,cAC5C,cAAC,GAAD,CAAcld,UAAU,uBAAuBrJ,MAAOgF,M,kCAQ7D,OAHKnG,KAAK0oB,cACR1oB,KAAK0oB,YAAcxd,GAAqBlL,OAEnCA,KAAK0oB,c,iDAIZ,OAAO,mCACJ1oB,KAAKslB,0BACJ,cAAC,KAAD,CAASqD,QAAQ,QACfjpB,QACE,sBAAM8K,UAAU,OAAhB,SACGxK,KAAKulB,sBAHZ,SAME,cAACqD,GAAA,EAAD,CAAoBpe,UAAU,WAE9B,O,iCAMN,IAMIlE,EALAuM,EAAO,CACTrL,IAFQxH,KAAKwU,MAGbjR,MAAOvD,KAAKiQ,OAWd,OAPKjQ,KAAKmZ,SAGR7S,EAAI,YAAOtG,KAAKmZ,QAAQ0P,aACnB/gB,KAAK+K,GAHVvM,EAAO,CAACuM,GAMHvM,I,kCAIP,IAAIA,EAAO,GAQX,OAPAtG,KAAKiJ,MAAMjC,SAAQ,SAAAC,GACjBX,EAAKwB,KAAK,CACRN,IAAKP,EAAEia,OAAOhc,KACd3B,MAAO0D,EAAE6hB,gBAINxiB,I,iCAIP,MAAO,CACLyiB,MAAO/oB,KAAK6oB,WACZ5a,OAAQjO,KAAKgpB,e,2DAUf,OAJKhpB,KAAKipB,uCACRjpB,KAAKipB,qCACH/d,GAA6ClL,OAE1CA,KAAKipB,uC,8CAGgB/oB,GAC5BF,KAAKkpB,qCACFliB,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,a,8CA6BlB,OAAOvD,KAAKslB,2BAA6BtlB,KAAKynB,kB,kDAS9C,OAAO,cAAC,KAAD,CACLrX,MAAM,yDACN6X,QAASjoB,KAAKwlB,4BACd0C,KAAMloB,KAAK2lB,uBACXwC,SAAUnoB,KAAK0lB,2BAJV,SAKL,qBAAKlb,UAAU,8BAAf,SACE,cAAC,GAAD,CAAmBrJ,MAAOnB,KAAK0kB,yB,uCAkBb,IAAD,OAChB1kB,KAAKmpB,oBACEnpB,KAAKmpB,iBAAmBC,GAChC,IACA,SAACrd,GACC,IAAIsd,EAAyB,GAAZtd,EAAKuV,KACtB,OAAO,qBACLlhB,MAAO,CAAEipB,cADJ,SAEJtd,EAAKkE,UAGV,mCACA,iDAEEwK,sBAAwB,SAACva,GAAD,OAAO,EAAKyjB,oBAAsBzjB,IAEhE,OAAOF,KAAKmpB,mB,sCAUZ,OAHKnpB,KAAK4lB,kBACR5lB,KAAK4lB,gBAAkB1a,GAAwBlL,OAE1CA,KAAK4lB,iB,aACQ1lB,GACpBF,KAAK4lB,gBAAkB1lB,I,uCAIvB,OAAO,mCACJF,KAAKynB,gBACJ,cAAC,KAAD,CAASkB,QAAQ,QACfjpB,QACE,sBAAM8K,UAAU,UAAhB,SACGxK,KAAKspB,WAHZ,SAOE,cAACV,GAAA,EAAD,CAAoBpe,UAAU,cAE9B,S,KEz9BJ+e,G,kDACJ,WAAY3oB,GAAQ,IAAD,uBACjB,cAAMA,IAYR6c,kBAAoB,WAAO,IACnBnd,EAAY,EAAKW,MAAjBX,QACN,OAAKA,GAAgB,IAfJ,IAGXa,EAAU,EAAKP,MAAfO,MAHW,OASf,EAAKF,MALFE,GACU,CACXzB,QAAQ,iBANK,E,qDAmBT,IACFA,EAAYM,KAAKiB,MAAjBvB,QAEN,OACE,qCACGA,EACAM,KAAKyd,2B,GA1BSlc,aAgCRC,eAAS+nB,ICxBHC,G,WACnB,aAAe,IAAD,gCAuBd9T,MAAQ,GAvBM,KAwDd+T,2BAA6B,GAxDf,KA6DdC,gBAAa/pB,EA7DC,KA4IdgqB,SAAW,WACTC,QAAQC,IAAR,UAAe,EAAK3I,OAAOhc,KAA3B,cAAqC,EAAK4kB,IAAI5kB,KAA9C,cAAwD,EAAK4jB,cA7IjD,KAiJdxI,WAAa,SAACyJ,GACZ,IAAIC,EAAS,EAAKlB,WAElB,EAAKmB,SAAW/e,GAAkB,GAElC,EAAK1H,KAAO0H,GAAgB,GAC5BA,GAAyB,GACzB,EAAKxH,SAAWwH,GAAiB,GACjC,EAAKgf,eAAiBhf,GAAuB,GAEzC6e,GAAeC,IAAW,EAAKlB,YAC5B,EAAK3P,SACV,EAAKA,QAAQmH,WAAWyJ,IA7Jd,KAiKdI,WAAa,WACX,IACIxnB,EAAG,UAAMynB,iBAAN,OAAwC,KAAxC,eAEHC,EAAc,SAACnqB,GAAD,OAChBoqB,OAAOnQ,KAFI,SAACja,GAAD,gBAAUyC,EAAV,YAAiBzC,GAEhBqqB,CAAOrqB,GAAI,WAEpB,EAAKsqB,aAMRH,EAAY,EAAKG,cALjB,EAAKC,iBAAgB,SAAAppB,GACnB,IAAI6H,EAAM,EAAKshB,aAAenpB,EAAK6H,IACnCmhB,EAAYnhB,OA3KJ,KAsMdwhB,cAAW/qB,EAtMG,KAiNdgrB,WAAa,UAjNC,KAyNdC,eAAYjrB,EAzNE,KA8Od8R,QAAU,WACR,IAAIoZ,EAAU,EAAKra,SAASmF,KAAI,SAAA1O,GAAC,OAAIA,EAAEiC,OACvC,MAAO,CACLtE,SAAU,EAAKlB,SACfmnB,YAlPU,KAsPdJ,gBAAkB,SAAClZ,GACjB,IAAIC,EAAU,EAAKC,UAEnBE,EADU,4CACGH,GAASI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QAC7CuQ,MAAK,SAAAvQ,GAAI,OAAIkQ,EAAOlQ,OA1PX,KA6PdypB,gCAAkC,GA7PpB,KA6QdC,mBAAgBprB,EA7QF,KAuRdqrB,iCAA8BrrB,EAtR5BI,YAAeC,KAAM,CACnB2qB,WAAY1qB,IACZ2qB,UAAW3qB,IACX8qB,cAAe9qB,IACf+qB,4BAA6B/qB,IAC7ByqB,SAAUzqB,M,+CAUZ,OAHKD,KAAKkJ,MACRlJ,KAAKkJ,IAAMC,MAENnJ,KAAKkJ,M,kCAIZ,OAAOlJ,KAAKkhB,OAAO/Q,Q,4BAKnB,OAAOnQ,KAAK0V,O,aAEJxV,GACRF,KAAK0V,MAAQxV,I,2BAQb,OAHKF,KAAK4S,OACR5S,KAAK4S,KAAO1H,GAAclL,OAErBA,KAAK4S,M,aAEL1S,GACPF,KAAK4S,KAAO1S,I,6BAIA,IAAD,OAKX,OAJKF,KAAKirB,SACRjrB,KAAKirB,OAAS7pB,EAAepB,KAAKwD,MAClCxD,KAAKirB,OAAOpE,aAAe,SAAC3mB,GAAD,OAAO,EAAKsD,KAAOtD,IAEzCF,KAAKirB,S,yCAKZ,YAAqBtrB,IAAdK,KAAKwD,O,mCAIKtD,GACjBF,KAAKypB,2BAA2BziB,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,a,iCAU/C,YAHwB5D,IAApBK,KAAK0pB,YACPxe,GAAuBlL,MAElBA,KAAK0pB,Y,aAECxpB,GACbF,KAAK0pB,WAAaxpB,EAGlBF,KAAK8pB,IAAI7E,oBAAoBjlB,MAE7BA,KAAKkrB,gBAAiB,EAElBlrB,KAAKkqB,gBACPhf,GAAqBlL,MAIvBA,KAAKmrB,UAAUjqB,QAAUlB,KAAKorB,c,gCAQ9B,OAHKprB,KAAKqrB,YACRrrB,KAAKqrB,UAAYjqB,EAAepB,KAAKorB,cAEhCprB,KAAKqrB,Y,kCASZ,OAHKrrB,KAAKsrB,cACRtrB,KAAKsrB,YAAcpgB,GAAqBlL,OAEnCA,KAAKsrB,c,kCAIZ,OAAOpgB,GAAqBlL,Q,8BAS5B,OAHKA,KAAKiZ,UACRjZ,KAAKiZ,QAAU/N,GAAiBlL,OAE3BA,KAAKiZ,S,aACA/Y,GACZF,KAAKiZ,QAAU/Y,I,+BAQf,OAHKF,KAAKurB,WACRvrB,KAAKurB,SAAWrgB,GAAkBlL,OAE7BA,KAAKurB,U,aAEDrrB,GACXF,KAAKurB,SAAWrrB,I,+BAQhB,OAHKF,KAAK4E,WACR5E,KAAK4E,SAAWsG,GAAiBlL,OAE5BA,KAAK4E,U,aAED1E,GACXF,KAAK4E,SAAW1E,I,+BA4ChB,OAAIF,KAAKiqB,SACAjqB,KAAKiqB,SAAStU,KAAI,SAAA1O,GAAC,OAAIA,EAAE6E,SAAOia,QAAO,SAACxjB,EAAGyjB,GAAJ,OAAUzjB,EAAE0jB,OAAOD,KAAI,IAEhEhmB,KAAK8L,Q,qCAQZ,OAHK9L,KAAKwrB,iBACRxrB,KAAKwrB,eAAiBtgB,GAAuBlL,OAExCA,KAAKwrB,gB,aAEKtrB,GACjBF,KAAKwrB,eAAiBtrB,I,+BAKtB,OAAOF,KAAK0qB,U,aAEDxqB,GACXF,KAAK0qB,SAAWxqB,EAEhBF,KAAKyrB,WAAavgB,GAAmBlL,MACrCA,KAAK0rB,UAAYxgB,GAAkBlL,Q,iCAKnC,OAAOA,KAAK2qB,Y,aAECzqB,GACbF,KAAK2qB,WAAazqB,I,gCAKlB,OAAOF,KAAK4qB,W,aAEA1qB,GACZF,KAAK4qB,UAAY1qB,I,6BAIjB,MAAO,CACLyrB,MAAO3rB,KAAKyrB,WACZG,WAAY,U,8BAKd,MAAO,CACLpN,gBAAiBxe,KAAK0rB,a,wCAoBFxrB,GACtBF,KAAK8qB,gCAAgC9jB,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,a,sCAQpD,OAHKvD,KAAK6rB,iBACR3gB,GAA4BlL,MAEvBA,KAAK6rB,iB,aACQ3rB,GACpBF,KAAK6rB,gBAAkB3rB,EACvBF,KAAK8rB,qBAAsB,I,oCAQ3B,YAH2BnsB,IAAvBK,KAAK+qB,gBACP/qB,KAAK+qB,cAAgB7f,GAAsBlL,OAEtCA,KAAK+qB,e,aACM7qB,GAClBF,KAAK+qB,cAAgB7qB,I,kDAQrB,OAHKF,KAAKgrB,6BACR9f,GAAwClL,MAEnCA,KAAKgrB,6B,aACoB9qB,GAChCF,KAAKgrB,4BAA8B9qB,M,KC1SlB6rB,GACnB,aAAe,yBAMfxoB,WAAQ5D,EALNI,YAAeC,KAAM,CACnBuD,MAAOtD,OCGAkV,GAAS,WACpB,OAAO3G,GAAOF,UAGH9N,GAAM,SAACyH,EAAKD,EAAKZ,GAC5B,IAAI1G,EAAK,IAAI8oB,GAQb,OAPA9oB,EAAGwgB,OAASjZ,EACZvH,EAAGopB,IAAM9hB,EACTtH,EAAG0I,KAAOhC,EAEVa,EAAIgB,MAAMnB,KAAKpH,GACfsH,EAAIiB,MAAMnB,KAAKpH,GAERA,GAGIsrB,GAAoB,SAACvrB,GAChC,OAAOA,EAAE2I,KAAKiZ,cAAgBrR,GACiB,IAA1CmE,KAASiB,eAAeC,OAAOtP,QACb,IAAlBtG,EAAEwrB,aAGIC,GAAgB,SAACzrB,GAC5B,OAAIA,EAAEypB,gBAAkBzpB,EAAE0rB,SACjB,UAEA,WAIEC,GAAe,SAAC3rB,GAC3B,OAAIA,EAAEypB,gBAAkBzpB,EAAE0rB,SACjB1rB,EAAE0rB,SAAS1N,MAEX,WAKE4N,GAAkB,SAAC5rB,GAC9B,IAAI6F,EAAO6O,KAASmX,sBAAsBxgB,MAEtCga,EAAQrlB,EAAEqpB,IAAI7gB,MACdsjB,EAAezG,EAAMve,WAAU,SAAAN,GAAC,OAAsB,IAAlBA,EAAEglB,eAC1C,IAAsB,IAAlBM,EAAJ,CAIA,IAAIC,EAAc1G,EAAMyG,GAElBE,EAAU,WACd,IAAIC,EAAQjsB,EAAEqoB,WAAa0D,EAAY1D,WACnCxhB,EAAQhB,EACTiB,WAAU,SAAAN,GAAC,OAAIiS,GAAmBjS,EAAE+Q,OAAQ0U,MAC/C,OAAkB,IAAXplB,EAAehB,EAAKgB,QAAS3H,QAGPA,IAA3B6sB,EAAY1D,WACdroB,EAAE0rB,SAAWM,IAEbtjB,GAAYqjB,EAAY/C,4BAA4B,kBAClDhpB,EAAE0rB,SAAWM,YAhBfhsB,EAAE0rB,cAAWxsB,GAoBJgtB,GAAc,SAAClsB,GAC1B,IAAImE,OAAWjF,EACf,GAAIc,EAAEwpB,SAAU,CACd,IAAI2C,GAAY,EAChBnsB,EAAEwpB,SAASjjB,SAAQ,SAAAC,GACb2lB,GAAa3lB,EAAEvD,WACjBkB,EAAWqC,EAAEvD,SACbkpB,GAAY,WAIZnsB,EAAEqL,OAASrL,EAAEqL,MAAM/E,OAAS,IAC9BnC,EAAWnE,EAAEqL,MAAM,GAAGpI,UAG1B,OAAOkB,GAGIioB,GAAyB,SAACpsB,GACrC,IAAIA,EAAEqsB,sBAAN,CACArsB,EAAEqsB,uBAAwB,EAE1B,IAAIxmB,EAAO,GACPymB,EAAe,EACf/X,EAAQvU,EAAEwpB,SACZxpB,EAAEwpB,SAASljB,OAAStG,EAAEqL,MAAM/E,OAExBimB,EAAe,SAACC,EAAK3mB,IACqB,IAA1CA,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEwJ,KAAOwc,EAAIxc,OACnCnK,EAAKwB,KAAKmlB,IAIRC,EAAa,SAACD,GAClBF,IACIE,IACEE,MAAMC,QAAQH,GAChBA,EAAIjmB,SAAQ,SAAAC,GAAC,OAAI+lB,EAAa/lB,EAAGX,MAEjC0mB,EAAaC,EAAK3mB,IAGlBymB,IAAiB/X,IACnBvU,EAAE4sB,gBAAkB/mB,IAIpB7F,EAAEwpB,SAEJxpB,EAAEwpB,SAASjjB,SAAQ,SAAAC,GACbA,EAAEomB,gBACJH,EAAWjmB,EAAEomB,iBAEblkB,GAAYlC,EAAE6jB,iCACZ,kBAAMoC,EAAWjmB,EAAE+M,sBAKzBvT,EAAEqL,MAAM9E,SAAQ,SAAAC,GACd,IAAIqmB,EAAYrmB,EAGJxG,EAAE2I,KACOiZ,cACJrR,IAEfsc,EAAYrmB,EAAEgL,aAAaxR,EAAEygB,OAAOhc,OAKlCooB,EAAUtZ,gBAAkBsZ,EAAUra,mBACxCia,EAAWI,EAAUtZ,gBAErB7K,GAAYmkB,EAAUvb,gCACpB,kBAAMmb,EAAWI,EAAUtZ,wBAOxBuZ,GAAa,SAAC9sB,GAEzB,OADAA,EAAE+sB,YAAa,EACRC,GAAShtB,IAGLgtB,GAAW,SAAChtB,GACvB,IAAIA,EAAE+sB,WAAN,CAGA,IAAI5a,EAFJnS,EAAE+sB,YAAa,EAGf,IAAI5e,GAAU,EAoBd,OAnBWnO,EAAEwpB,SAAWxpB,EAAEwpB,SAAWxpB,EAAEqL,OAClC9E,SAAQ,SAACC,EAAGC,EAAG3E,GAClB,GAAIqM,EACF,GAAS,GAAL1H,EACF0L,EAAO3L,EAAEzD,UAGT,GAAIoP,IAAS3L,EAAEzD,KAEb,OADAoL,GAAU,GACH,KAMVA,IACHgE,OAAOjT,GAGFiT,IAGI8a,GAAsB,SAACjtB,GAClCA,EAAEktB,kBAAmB,EACrBC,GAAkBntB,IAGPmtB,GAAoB,SAACntB,GAChC,IAAIA,EAAEktB,mBACNltB,EAAEktB,kBAAmB,EAGhBltB,EAAEotB,oBAAP,CAEA,IAAIC,EAAc,GACdC,EAAW,EACXhB,EAAe,EACfiB,EAAc,GAEdhZ,GADOvU,EAAEwpB,SAAWxpB,EAAEwpB,SAAWxpB,EAAEqL,OACtB/E,OAEXmmB,EAAa,SAACD,EAAKlhB,IAGR,IAFHiiB,EAAY1kB,QAAQyC,KAGhCiiB,EAAYlmB,KAAKiE,GAEjBghB,IAEKkB,OAAO/e,MAAM+d,KAChBc,GAAYd,GAEda,EAAYhmB,KAAKmlB,GAEbF,IAAiB/X,IACnBvU,EAAEqoB,WAAaiF,KAIfttB,EAAEwpB,SAEJxpB,EAAEwpB,SAASjjB,SAAQ,SAAAC,GACbA,EAAE6hB,WACJoE,EAAWjmB,EAAE6hB,WAAY7hB,GAEzBkC,GAAYlC,EAAEwiB,4BACZ,WACEyD,EAAWjmB,EAAE6hB,WAAY7hB,SAMjCxG,EAAEqL,MAAM9E,SAAQ,SAAAC,GACd,IAAIqmB,EAAYrmB,EAGJxG,EAAE2I,KACOiZ,cACJrR,IAEfsc,EAAYrmB,EAAEgL,aAAaxR,EAAEygB,OAAOhc,YAKVvF,IAAxB2tB,EAAUpY,UACZgY,EAAWI,EAAUpY,UAAWjO,GAEhCkC,GAAYmkB,EAAUtb,2BACpB,WACEkb,EAAWI,EAAUpY,UAAWjO,WAO/BinB,GAAmB,SAACztB,GAC/B,GAAIA,EAAEqpB,IAAItV,QAAUxD,EAClB,OAAO,EAEP,IAAMmd,EAAiB,SAACC,GACtB,OAA8B,IAAvBA,EAAYrnB,QAGrB,GAAItG,EAAE4sB,gBACJ,OAAOc,EAAe1tB,EAAE4sB,iBAExBlkB,GAAY1I,EAAEqqB,iCACZ,WACErqB,EAAE4tB,cAAgBF,EAAe1tB,EAAE4sB,qBAMhCiB,GAAqC,SAAC7tB,GACjD,IAAIA,EAAE8tB,kCAAN,CACA9tB,EAAE8tB,mCAAoC,EAEtC,IAAMrB,EAAa,SAACD,EAAK3mB,EAAMymB,EAAc/X,GAC3C+X,KAC2B,IAAvBzmB,EAAKgD,QAAQ2jB,IACf3mB,EAAKwB,KAAKmlB,GAERF,IAAiB/X,IACnBvU,EAAE+tB,4BAA8BloB,IAI9BmoB,EAAc,SAACL,GACnB,IAAI9nB,EAAO,GAEP0O,EAAQoZ,EAAYrnB,OAExBqnB,EAAYpnB,SAAQ,SAAAC,GACdA,EAAEynB,gBACJxB,EAAWjmB,EAAEynB,gBAAiBpoB,EALf,EAKmC0O,GAGlD7L,GAAYlC,EAAE0nB,iCAAiC,WAC7CzB,EAAWjmB,EAAEynB,gBAAiBpoB,EATjB,EASqC0O,MACjD,OAKLvU,EAAE4sB,gBACJoB,EAAYhuB,EAAE4sB,iBAEd5sB,EAAEmuB,4BAA4B9mB,MAAK,WACjC2mB,EAAYhuB,EAAE4sB,sBAMPwB,GAAc,SAACpuB,GAC1B,IAAIA,EAAEquB,cAAN,CACAruB,EAAEquB,eAAgB,EAElB,IAAIzX,EAAS5W,EAAEqpB,IAAI3Q,QACnB,GAAK9B,EAAL,CAEA,IAAI/Q,EAAO+Q,EAAOpO,MACd3B,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEia,SAAWzgB,EAAEygB,UAC/C,OAAkB,IAAX5Z,EAAehB,EAAKgB,QAAS3H,KAGzBovB,GAAe,SAACtuB,GAC3B,IAAIuuB,EAAUvuB,EAAEqpB,IAAI1I,SACpB,GAAI4N,GAA8B,IAAnBA,EAAQjoB,OAAc,CACnC,IAAIkB,EAAMxH,EAAEygB,OAMZ,OALW8N,EAAQrZ,KAAI,SAAC1O,EAAGC,EAAG3E,GAE5B,OADU0E,EAAEga,gBAAgBhZ,MAE3B0G,QAAO,SAAA1H,GAAC,YAAUtH,IAANsH,OAONgoB,GAAkB,SAACxuB,GAC9B,IAAIC,EAAK,IAAIqrB,GAIb,OAFArrB,EAAG0I,KAAO3I,EAEHC,GAGIwuB,GAAkB,SAACzuB,GAC9B,IAAKA,EAAEotB,mBAAoB,MAAO,GAElC,IAAInE,EAAajpB,EAAEqoB,WACnB,IAAKY,EAAY,MAAO,GAExB,IAAIxY,EAAiB,EACjB0B,EAAOnS,EAAE+C,KACb,OAAQoP,GACN,IAAK,OACHA,EAAO,SACP1B,EAAiB,EACjB,MACF,QACEA,EAAiB,EAIrB,IAAIie,EAAczF,EAAWvY,eAAe,QAAS,CAAEC,sBAAuBF,IAC9E,MAAM,GAAN,OAAUie,EAAV,YAAyBvc,ICvWduC,GAAS,WACpB,OAAO3G,GAAOF,UAGH9N,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAIyf,GAGb,OAFAzf,EAAGwE,KAAOzE,EACVC,EAAG0I,KAAOhC,EACH1G,GAGI0uB,GAAU,SAAC3uB,GACtB,OAAOA,EAAE0Y,QAAU1Y,EAAE0Y,QAAQmI,KAAO,EAAI,GAG7B+N,GAAW,SAAC5uB,GACvB,MAAO,CACL4oB,WAAqB,GAAT5oB,EAAE6gB,OAILgO,GAAe,SAAC7uB,GAC3B,OAA6B,IAAtBA,EAAE2gB,SAASra,QAGPwoB,GAAyB,SAAC9uB,GACrC,OAAOA,EAAEghB,UAAY,IAAM,KAGhB+N,GAAmB,SAAC/uB,GAC/B,IAAIgvB,EAActa,KAASua,kBACvBvpB,EAAM4hB,GAAe0H,EAAahvB,EAAE+T,OAMxC,OALArO,EAAIuE,YAAc,oBAElBvE,EAAI8X,YAAcxd,EAAEkX,gBAEpBxR,EAAIsU,sBAAwB,SAACva,GAAD,OAAOO,EAAEqgB,UAAY5gB,GAC1CiG,GAGIwpB,GAAsB,SAAClvB,GAClC,IAAIgvB,EAActa,KAASua,kBACvBvpB,EAAMypB,GAAoBH,OAAa9vB,GAG3C,OAFAwG,EAAIuE,YAAc,4BAClBvE,EAAIsU,sBAAwB,SAACva,GAAD,OAAOO,EAAEmhB,cAAgB1hB,GAC9CiG,GAGI0pB,GAAQ,SAACvpB,GACpB,GAAoB,IAAhBA,EAAKS,OAAc,OAAOT,EAE9B,IACIqJ,EADWrJ,EAAK,GACDoc,SACnB,IAAK/S,EAAI+J,iBAAkB,OAAOpT,EAElC,IAAIsc,EAAcjT,EAAIkT,YACtB,OAAOvc,EAAKwpB,MAAK,SAACvtB,EAAGyjB,GACnB,OAAOpD,EAAYtZ,QAAQ/G,EAAE2S,WAAa0N,EAAYtZ,QAAQ0c,EAAE9Q,eAgDvD6a,GAAsB,SAACtvB,GAClC,IAAI0F,EAAM4hB,GAAe,QAAIpoB,GAa7B,OAZAwG,EAAIuE,YAAc,2BAClBvE,EAAImV,YAAc,SAACvP,GACjB,IAAIsd,EAAyB,GAAZtd,EAAKuV,KACtB,OAAO,qBACLlhB,MAAO,CAAEipB,cADJ,SAEJtd,EAAKkE,SAGV9J,EAAIsU,sBAAwB,SAACva,GACbO,EAAE4iB,eACRE,aAAerjB,GAElBiG,GAGI6pB,GAA+B,SAACvvB,GAC3C,IAAI2f,EAAW3f,EAAE2gB,SACjB,GAAwB,IAApBhB,EAASrZ,OACb,OAAOqZ,EAAS,GAAGtQ,eAGRmgB,GAA8B,SAACxvB,GAC1C,IAAI2f,EAAW3f,EAAE2gB,SACjB,GAAwB,IAApBhB,EAASrZ,OACb,OAAOqZ,EAAS,GAAG+D,YAGR+L,GAAe,SAACzvB,GAC3B,IAAI0vB,EAAS1vB,EAAE2vB,iBACf,IAAKD,EAAQ,MAAO,GACpB,IAAIE,EAAOF,EAAO5f,aAAazE,MAE3BwkB,GAAkB,EAClBC,GAAgB,EACpBF,EAAKrpB,SAAQ,SAACC,EAAGC,GACXqpB,GAAwD,IAAvCtpB,EAAEupB,0BAA0BzpB,OAC/CupB,EAAiBppB,EAEjBqpB,GAAgB,KAIpB,IAAIE,EAAeJ,EAAK/mB,QAAQ7I,EAAEqP,eAClC,OAAwB,IAApBwgB,EAA8B,CAACH,EAAO3b,OAC7B6b,EAAK1hB,QAAO,SAAC1H,EAAGC,GAAJ,QACJ,IAAlBupB,GAAuBA,EAAevpB,IACvCA,GAAKopB,KACJ3a,KAAI,SAAA1O,GAAC,OAAIA,EAAEuN,UAKHkc,GAAyB,SAACjwB,GACrC,IAAIkO,EAAS,IAAIjB,GACjBiB,EAAOhB,UAAYmB,GACnBH,EAAOZ,iBAAmBgB,GAC1BJ,EAAOV,OAAS,CAACxN,EAAEyU,WAEnB,IAAI4M,EAASrhB,EAAEqP,cAEXiS,OAAMpiB,EACNgxB,EAAW7O,EAAOtL,cACnBjP,WAAU,SAAAN,GAAC,OAAIkC,GAAqBlC,EAAE+Q,OAAO/J,OAAQU,EAAOV,YAE7C,IAAd0iB,EACF5O,EAAMD,EAAOtL,cAAcma,KAE3B5O,EAAM,IAAInJ,IACNoJ,QAAUF,EACdC,EAAI/J,OAASrJ,EACbmT,EAAOtL,cAAc1O,KAAKia,IAG5B,IAAIpS,EAAMuS,GAAY,KAAM,KAAMH,GAIlC,OAHAA,EAAIjW,MAAQ,CAAC6D,GAEblP,EAAE2vB,iBAAmBzgB,EACdA,GAGIjI,GAAM,SAAC2P,EAAQsB,GAC1B,IAAIhJ,EAAM0H,EACPA,EAAO+Y,iBAAmB/Y,EAAO+Y,iBAChCM,GAAuBrZ,GACvBsB,EAAMsL,QAEN2M,EAAQC,GAAiBlhB,EAAKwH,IAIlCyZ,EAAMjgB,SAAN,OAAiB0G,QAAjB,IAAiBA,OAAjB,EAAiBA,EAAQnS,KAEzByK,EAAI7D,MAAMhE,KAAK8oB,GAEf,IAAI5oB,EAAMxH,GAAIowB,EAAMrtB,MAAOoV,GAC3B3Q,EAAIkN,UAAY0b,EAAMrtB,MACtByE,EAAI2P,iBAAkB,EAGZ3P,EAAIiB,MASd,OAPAjB,EAAI8H,cAAgBH,EAEpB3H,EAAImR,QAAU9B,EACdrP,EAAIqZ,YAAYvZ,KAAKE,GAErBA,EAAI4X,iBAAiBrT,YAAcwT,GAE5B/X,GAGI8oB,GAA0C,SAACrwB,GAEtD,MADU,IAICswB,GAAsB,SAACtwB,GAClC,IAAIA,EAAEuwB,sBAGN,OAFAvwB,EAAEuwB,uBAAwB,EAEnBvwB,EAAE0Y,SAGE8X,GAA4B,SAACxwB,GAIxC,IAHA,IAAI6F,EAAO,GACP2S,EAAUxY,EAAEojB,gBAET5K,GACL3S,EAAKwB,KAAKmR,GACVA,EAAUA,EAAQ4K,gBAIpB,OADAvd,EAAK4qB,UACE5qB,GAII6qB,GAAgC,SAAC1wB,GAC5C,QAAOA,EAAEmjB,YAGEwN,GAA0B,SAAC3wB,GAStC,OARUA,EAAE4wB,sBAAsBtL,QAAO,SAACxjB,EAAG0E,EAAGC,GAK9C,OAJS,GAALA,IACF3E,GAAK,OAEPA,GAAK0E,EAAEgJ,QAEN,KAKQqhB,GAAkB,SAAC7wB,GAC9B,IAAIC,EAAK,IAAI8e,GAEb,OADA9e,EAAG0I,KAAO3I,EACHC,GAII6wB,GAAY,SAAC9wB,GACxB,IAAKA,EAAEkX,gBAAiB,MAAO,GAE/B,IAAIgB,EAAQlY,EAAEgX,MAad,OAXWkB,EAAMtP,QAAQsM,KAAI,SAAA1O,GAC3B,IAAIvG,EAAK,IAAI8oB,GAOb,OANA9oB,EAAGwgB,OAASja,EACZvG,EAAGopB,IAAMrpB,EACTC,EAAG0I,KAAOuP,EAEVA,EAAM1P,MAAMnB,KAAKpH,GAEVA,MAME8wB,GAAqB,SAAC/wB,GACjC,OAAQA,EAAEkX,iBAAmBlX,EAAE6oB,WAAa7oB,EAAEwP,OChSnCwhB,GAAmB,SAAChxB,GAC/B,OAAOA,EAAEixB,iBAAmBjxB,EAAEixB,iBAAiBxsB,KAC3C,IAWOysB,GAAa,SAAClxB,GAAO,IAAD,EAC3BC,EAAE,UAAGD,EAAEmxB,eAAL,aAAG,EAAW9lB,MAAM,GAG1B,OAFApL,EAAG+W,MAAQhX,EACXC,EAAGmxB,YAASlyB,EACLe,GCnCIoxB,GAAgB,gBAChBC,GAAa,aACbC,GAAY,YAEZC,GAAa,aCALC,G,4DA4CnBhiB,OAAS,WAAO,IACThH,EAAO,EAAPA,IAILyI,EADW,uCAFG,CAACzI,QAGO0I,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QAC7CuQ,MAAK,SAAAvQ,GAAI,OAAIc,IAAQF,QAAQ,kCAEhC,EAAKmH,KAAK0C,MAAMrE,OAAO,EAAK0I,MAAO,GAE/B,EAAKgiB,UACP,EAAKA,WAGP,EAAK/oB,KAAKgpB,MAAMC,gBAAa1yB,G,KAc/B2yB,aAAe,SAAC/gB,IzDkES,SAAC9Q,EAAGkC,EAAK4O,GAClC,IAAIC,EAAU/Q,EAAEgR,QAGZ8gB,GAFM/gB,EAAQtI,KAGIqpB,EACpB5gB,EAAA,UAAYhP,EAAZ,QAAuB6O,GACvBG,EAAA,UAAWhP,EAAX,SAAuB6O,IAEfI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACAkxB,IACF9xB,EAAEyI,IAAM7H,EAAK6H,KAEfqI,EAAOlQ,EAAMkxB,MyD/EfppB,CAAoB,EAAM,EAAKqpB,KAAK,SAACnxB,EAAMkxB,GACzC,IAAIjsB,EAAO,EAAK8C,KAAK0C,MACrB,GAAIymB,EACFjsB,EAAKwB,KAAK,OACL,CACL,IAAIR,EAAQhB,EAAKgD,SAAQ,SAAArC,GAAC,OAAIA,EAAEiC,MAAQ,EAAKA,OAC7C5C,EAAKgB,GAAS,EAGZiK,GACFA,EAAOlQ,EAAMkxB,O,iDAhFjB,OAAOvyB,KAAK2f,M,aAELzf,GACPF,KAAK2f,KAAOzf,EACRF,KAAKyyB,eACPzyB,KAAKyyB,cAAcvyB,K,kCAMrB,OAAOF,KAAK0yB,a,aAEExyB,GACdF,KAAK0yB,YAAcxyB,EACfF,KAAK2yB,sBACP3yB,KAAK2yB,qBAAqBzyB,K,2BAQ5B,OAAOF,KAAKqB,M,aAELnB,GACPF,KAAKqB,KAAOnB,EACRF,KAAK4yB,eACP5yB,KAAK4yB,cAAc1yB,K,qCAKrB,OAAOF,KAAKkF,O,4BAIZ,OAAOlF,KAAKoJ,KAAK0C,MAAMxC,QAAQtJ,Q,8BAoBlB,IAAD,EACZ,MAAO,CACLkJ,IAAMlJ,KAAKkJ,IACXqJ,UAAS,UAAGvS,KAAKoD,eAAR,aAAG,EAAc8F,IAC1B2pB,YAAc7yB,KAAK8yB,YACnBnT,KAAO3f,KAAKkF,KACZwtB,YAAc1yB,KAAK+yB,YACnB1xB,KAAOrB,KAAK6T,KAAKpC,a,KC/DFuhB,G,4DAYnBC,YAAc,WACZ,IAAIlnB,EAhBCyC,GAAOF,SAgBQ4kB,kBAAkB,GAEtC,OADA,EAAKC,OAAOrrB,KAAKiE,GACVA,G,mDATP,OAHK/L,KAAK0E,SACR1E,KAAK0E,OAASwG,GAAsBlL,OAE/BA,KAAK0E,Q,aAEHxE,GACTF,KAAK0E,OAASxE,M,KCjBLkzB,GAAW,WCmBXC,GAAmB,WAC9B,MAAO,CAAEC,KCnBU5B,G,4HAAyBQ,ICOjC1xB,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAIgxB,GASb,OAPAhxB,EAAGwI,IAAMzI,EAAEyI,IACXxI,EAAGwE,KAAOzE,EAAEkf,KACZjf,EAAGqyB,YAActyB,EAAEiyB,YACnBhyB,EAAGoyB,YAAcryB,EAAEoyB,YACnBnyB,EAAGmT,KFPc,SAACpT,GAClB,IAAIC,EAAK,IAAIsyB,GAEb,OADAtyB,EAAGkY,mBAAqB2a,GAAsB9yB,EAAE+yB,oBACzC9yB,EEIG+yB,CAAahzB,EAAEY,MACzBX,EAAG0I,KAAOhC,EAEH1G,GCfIgzB,GAAb,WACE,aAAe,IAAD,gCA+BdC,UAAOh0B,EA/BO,KA6CdggB,UAAOhgB,EA7CO,KA2Dd+yB,iBAAc/yB,EA3DA,KAyEdi0B,cAAWj0B,EAzEG,KA0HduQ,OAAS,WACP,EAAK9G,KAAKyqB,eAAepsB,OAAO,EAAK0I,MAAO,IA3HhC,KA8HdwZ,SAAW,WACTC,QAAQC,IAAI,EAAK3kB,KAAM,EAAK4uB,KAAM,EAAKf,cA9HvChzB,YAAeC,KAAM,CACnB4zB,SAAW3zB,MAHjB,gDAQI,OAAOD,KAAKsD,YAAY4F,MAR5B,4BAYI,OAAOlJ,KAAKoJ,KAAKyqB,eAAevqB,QAAQtJ,QAZ5C,2BAgBI,OAAOA,KAAKsD,YAAY8C,MAhB5B,aAkBWlG,GACPF,KAAKsD,YAAY8C,KAAOlG,IAnB5B,8BA6BI,OAHKF,KAAKiZ,UACRjZ,KAAKiZ,QAAU/N,GAAgBlL,OAE1BA,KAAKiZ,UA7BhB,2BAqCI,OAHKjZ,KAAK2zB,OACR3zB,KAAK2zB,KAAO3zB,KAAKsD,YAAYwwB,MAExB9zB,KAAK2zB,MArChB,aAuCWzzB,GACPF,KAAK2zB,KAAOzzB,EACPF,KAAKoG,OACRpG,KAAKsD,YAAYwwB,KAAO5zB,KA1C9B,2BAmDI,OAHKF,KAAK2f,OACR3f,KAAK2f,KAAO3f,KAAKsD,YAAY4B,MAExBlF,KAAK2f,MAnDhB,aAqDWzf,GACPF,KAAK2f,KAAOzf,EACPF,KAAKoG,OACRpG,KAAKsD,YAAY4B,KAAOhF,KAxD9B,kCAiEI,OAHKF,KAAK0yB,cACR1yB,KAAK0yB,YAAc1yB,KAAKsD,YAAYyvB,aAE/B/yB,KAAK0yB,aAjEhB,aAmEkBxyB,GACdF,KAAK0yB,YAAcxyB,EACdF,KAAKoG,OACRpG,KAAKsD,YAAYyvB,YAAc7yB,KAtErC,+BA+EI,OAHKF,KAAK4zB,WACR5zB,KAAK4zB,SAAW5zB,KAAKsD,YAAY6B,UAE5BnF,KAAK4zB,UA/EhB,aAiFe1zB,GACXF,KAAK4zB,SAAW1zB,IAlFpB,iCAsFI,OAAOF,KAAKmF,WAtFhB,qCA0FI,OAAOnF,KAAKmF,WA1FhB,6BA8FgB,IAAD,OACNnF,KAAK+zB,UACE/zB,KAAK+zB,OACb3yB,EAAepB,KAAK8zB,KAAM,eACxB3zB,aAAe,SAACD,GAAD,OAAO,EAAK4zB,KAAO5zB,IAExC,OAAOF,KAAK+zB,SApGhB,6BAwGgB,IAAD,OACN/zB,KAAKg0B,UACEh0B,KAAKg0B,OACb5yB,EAAepB,KAAKkF,KAAM,0BACxB/E,aAAe,SAACD,GAAD,OAAO,EAAKgF,KAAOhF,IAExC,OAAOF,KAAKg0B,SA9GhB,oCAkHuB,IAAD,OACbh0B,KAAKi0B,iBACEj0B,KAAKi0B,cACb7yB,EAAepB,KAAK+yB,YAAa,kBAC/B5yB,aAAe,SAACD,GAAD,OAAO,EAAK6yB,YAAc7yB,IAE/C,OAAOF,KAAKi0B,kBAxHhB,KCGazzB,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAIgzB,GAgCb,OA/BAhzB,EAAG4C,YAAc7C,EACjBC,EAAG0I,KAAOhC,EAEV3G,EAAEyzB,cAAgB,SAACh0B,GACbO,EAAE2F,OACJ1F,EAAGozB,KAAO5zB,IAIdO,EAAEgyB,cAAgB,SAACvyB,GACbO,EAAE2F,OACJ1F,EAAGwE,KAAOhF,IAIdO,EAAEkyB,qBAAuB,SAACzyB,GACpBO,EAAE2F,OACJ1F,EAAGqyB,YAAc7yB,IAIrBO,EAAE0zB,kBAAoB,SAACj0B,GACjBO,EAAE2F,OACJ1F,EAAGyE,SAAWjF,IAIlBO,EAAE0xB,SAAW,WACXzxB,EAAGwP,UAGExP,GAGI0zB,GAAa,SAAC3zB,GACzB,IAAI4zB,EAAQ5zB,EAAE6C,YAAY6V,QACtB7S,EAzCGguB,GAAShmB,SAyCMimB,mBAAmBV,eACrCvsB,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAE3D,cAAgB+wB,KAClD,OAAkB,IAAX/sB,EAAehB,EAAKgB,QAAS3H,GC7CzB60B,GAAb,WACE,aAAe,yBAYfC,QAAS,EAZK,KAcdC,eAAY/0B,EAdE,KAsBdg1B,WAAY,EArBV50B,YAAeC,KAAM,CACnB00B,UAAWz0B,IACX00B,UAAY10B,IACZw0B,OAASx0B,MALf,oDAgBgBC,GACZF,KAAK00B,UAAYx0B,EACbF,KAAK40B,eACP50B,KAAK40B,cAAc10B,OAnBzB,KCAaM,GAAM,SAACmf,EAAM+U,GACxB,IAAIh0B,EAAK,IAAI8zB,GAGb,OAFA9zB,EAAGg0B,UAAYA,EACfh0B,EAAGif,KAAOA,EACHjf,GCCIm0B,GAAb,WACE,aAAe,IAAD,gCAQdlB,UAAOh0B,EARO,KAoBdggB,UAAOhgB,EApBO,KAgCd+yB,iBAAc/yB,EAhCA,KA4CdsZ,aAAUtZ,EA5CI,KA0Ddm1B,8BAA2Bn1B,EA1Db,KAqFd4yB,WAAQ5yB,EArFM,KAkGdo1B,iBAAcp1B,EAlGA,KAgMdgqB,SAAW,2BAAS,EAAKmK,KAAd,YAAsB,EAAK5uB,KAA3B,YAAmC,EAAK6tB,YAAxC,YAAuD,EAAKiC,QAhMzD,KAkMd1jB,YAAc,WACZ,EAAK2jB,iBAAiB3jB,eAnMV,KA6Md4jB,WAAa,WACX,EAAKxB,cAAcpwB,YAAY4M,SAC/B,EAAKwjB,mBAAgB/zB,GA/MT,KAkNdkd,MAAQ,WACN,EAAKsY,OAAOj0B,QAAU,KACtB,EAAKk0B,OAAOl0B,QAAU,KACtB,EAAKm0B,cAAcn0B,QAAU,KAC7B,EAAKo0B,QAAQC,WAAY,GArNzBx1B,YAAeC,KAAM,CACnBuyB,MAAOtyB,MAHb,iDAcI,OAHKD,KAAK2zB,OACR3zB,KAAK2zB,KAAO3zB,KAAKi1B,iBAAiBnB,MAE7B9zB,KAAK2zB,MAdhB,aAgBWzzB,GACPF,KAAK2zB,KAAOzzB,EACZF,KAAKi1B,iBAAiBnB,KAAO5zB,IAlBjC,2BA0BI,OAHKF,KAAK2f,OACR3f,KAAK2f,KAAO3f,KAAKi1B,iBAAiB/vB,MAE7BlF,KAAK2f,MA1BhB,aA4BWzf,GACPF,KAAK2f,KAAOzf,EACZF,KAAKi1B,iBAAiB/vB,KAAOhF,IA9BjC,kCAsCI,OAHKF,KAAK0yB,cACR1yB,KAAK0yB,YAAc1yB,KAAKi1B,iBAAiBlC,aAEpC/yB,KAAK0yB,aAtChB,aAwCkBxyB,GACdF,KAAK0yB,YAAcxyB,EACnBF,KAAKi1B,iBAAiBlC,YAAc7yB,IA1CxC,8BA+CI,OAAOF,KAAKiZ,SA/ChB,aAiDc/Y,GACVF,KAAKiZ,QAAU/Y,EACf,IAAIwb,EAAQ1b,KAAKi1B,iBAIfvZ,EAAMvC,QAHHjZ,EAGaA,EAAEoD,YAFFpD,IArDtB,+CAgEI,OAHKF,KAAK80B,2BACR90B,KAAK80B,yBAA2B5pB,GAAiClL,OAE5DA,KAAK80B,0BAhEhB,aAkE+B50B,GAC3BF,KAAK80B,yBAA2B50B,EAEhC,IAAIs1B,EAAWx1B,KAAKy1B,gBACpBD,EAAS1pB,MAAQ5L,EACjBs1B,EAASjZ,YAAcvc,KAAKmZ,UAvEhC,sCA2EwB,IAAD,OACnB,IAAKnZ,KAAK01B,gBAAgB,CACxB,IAAIvvB,EAAMnG,KAAK01B,gBAAkBC,GAC9B31B,KAAK41B,yBAA0B51B,KAAKmZ,SACvChT,EAAIuE,YAAc,qBAClBvE,EAAIyW,UAAW,EACfzW,EAAIsU,sBAAwB,SAACva,GAAD,OAAO,EAAKiZ,QAAUjZ,GAEpD,OAAOF,KAAK01B,kBAnFhB,4BA2FI,YAHmB/1B,IAAfK,KAAKuyB,QACPvyB,KAAKuyB,MAAQvyB,KAAKi1B,iBAAiBD,OAE9Bh1B,KAAKuyB,OA3FhB,aA6FYryB,GACRF,KAAKuyB,MAAQryB,EACbF,KAAK61B,UAAU30B,QAAUgK,GAAoBlL,MAC7CA,KAAKi1B,iBAAiBD,MAAQ90B,IAhGlC,kCAwGI,OAHKF,KAAK+0B,cACR/0B,KAAK+0B,YAAc7pB,GAAoBlL,OAElCA,KAAK+0B,aAxGhB,aA0GkB70B,GACdF,KAAK+0B,YAAc70B,IA3GvB,oCAgHI,OAAOF,KAAK81B,eAhHhB,aAkHoB51B,GAGhB,GAFAF,KAAK81B,cAAgB51B,EAEhBA,EAIA,CACHF,KAAKi1B,iBAAiB3xB,YAAcpD,EAAEoD,YADnC,IAGGwwB,EAAqC5zB,EAArC4zB,KAAM5uB,EAA+BhF,EAA/BgF,KAAM6tB,EAAyB7yB,EAAzB6yB,YAAa5Z,EAAYjZ,EAAZiZ,QAC/BnZ,KAAKm1B,OAAOj0B,QAAU4yB,EACtB9zB,KAAKo1B,OAAOl0B,QAAUgE,EACtBlF,KAAKq1B,cAAcn0B,QAAU6xB,EAE7B/yB,KAAKy1B,gBAAgBlZ,YAAcpD,EAEnCnZ,KAAKs1B,QAAQC,WAAY,OAbzBv1B,KAAKi1B,iBAAiB3xB,YAAcpD,EACpCF,KAAKs1B,QAAQC,WAAY,IAvH/B,6BAwIgB,IAAD,OACNv1B,KAAK+zB,UACE/zB,KAAK+zB,OACb3yB,EAAepB,KAAK8zB,KAAM,eACxB3zB,aAAe,SAACD,GAAD,OAAO,EAAK4zB,KAAO5zB,IAExC,OAAOF,KAAK+zB,SA9IhB,6BAkJgB,IAAD,OACN/zB,KAAKg0B,UACEh0B,KAAKg0B,OACb5yB,EAAepB,KAAKkF,KAAM,0BACxB/E,aAAe,SAACD,GAAD,OAAO,EAAKgF,KAAOhF,IAExC,OAAOF,KAAKg0B,SAxJhB,oCA4JuB,IAAD,OACbh0B,KAAKi0B,iBACEj0B,KAAKi0B,cACb7yB,EAAepB,KAAK+yB,YAAa,kBAC/B5yB,aAAe,SAACD,GAAD,OAAO,EAAK6yB,YAAc7yB,IAE/C,OAAOF,KAAKi0B,gBAlKhB,8BAsKiB,IAAD,OACZ,IAAKj0B,KAAK+1B,QAAS,CACjB,IAAI5vB,EAAMnG,KAAK+1B,QACXC,GAAmB,0BAAgBh2B,KAAKg1B,OAE5C7uB,EAAIwuB,WAAY,EAChBxuB,EAAIyuB,cAAgB,SAAC10B,GACnB,EAAK80B,MAAQ90B,EAEXiG,EAAIwuB,YADFz0B,GAOR,OAAOF,KAAK+1B,UArLhB,gCAyLmB,IAAD,OACT/1B,KAAKi2B,aACEj2B,KAAKi2B,UAAY70B,EAAepB,KAAKk2B,cAC3C/1B,aAAe,SAACD,GAAD,OAAO,EAAKg2B,YAAch2B,IAE/C,OAAOF,KAAKi2B,YA9LhB,iCAyMI,OAAQj2B,KAAKg1B,MAET,GADF,cAAC,IAAD,CAAQvpB,QAASzL,KAAKk1B,WAAtB,wBA1MN,KCHaiB,GAAW,WACtB,OAAO7B,GAAShmB,UAyBL8nB,GAAiB,SAAC11B,GAE7B,OADYA,EAAGs0B,MACA,SAAW,QAGfqB,GAA8B,SAAC51B,GAC1C,OAAO01B,KAAW5B,mBAAmBV,gBCT1ByC,GAAuB,SAACC,GAEnC,ODrBiB,SAAC91B,EAAG2G,GACrB,IAAI1G,EAAK,IAAIm0B,GAkBb,OAjBAn0B,EAAGu0B,iBAAmBx0B,EACtBC,EAAG0I,KAAOhC,EAEV+uB,KAAW5B,mBAAmBiC,qBAAqB1uB,MAAK,WACtDpH,EAAGk1B,yBAA2BS,GAA4B31B,MAG5DD,EAAEg2B,kBAAoB,SAACv2B,GACrB,IAAIwR,EAAUhR,EAAGw1B,YACjB/zB,IAAQF,QAAR,UAAmByP,EAAnB,+BAIFtK,EAAKsvB,MAAQ,SAACx2B,GACZQ,EAAGgzB,cAAgBxzB,GAGdQ,ECEAi2B,CADKJ,EAAO1gB,iBAAiBof,iBACKsB,IC1B9BK,GAAb,WACE,aAAe,IAAD,gCAmBdlhB,WAAS/V,EAnBK,KAoDd+H,IAAM,SAACqE,GACL,EAAKD,MAAMhE,KAAKiE,IApDhBhM,YAAeC,KAAM,CACnB0V,MAAQzV,MAHd,iDAQI,OAAOD,KAAK62B,UAAUzwB,MAR1B,aAUWlG,GACPF,KAAK62B,UAAUzwB,KAAOlG,IAX1B,iCAcoBA,GACZF,KAAK82B,gBACP92B,KAAK82B,eAAe52B,KAhB1B,4BAyBI,OAHKF,KAAK0V,QACR1V,KAAK0V,MAAQxK,GAAclL,OAEtBA,KAAK0V,QAzBhB,kCAiCI,OAHK1V,KAAK+2B,cACR/2B,KAAK+2B,YAAc/2B,KAAK62B,UAAUG,aAE7Bh3B,KAAK+2B,aAjChB,aAmCkB72B,GACdF,KAAK+2B,YAAc72B,EACdA,GAGHF,KAAK62B,UAAUG,YAAc92B,EAAE22B,UAC/B72B,KAAKoyB,MAAM6E,SAAW/2B,GAHtBF,KAAK62B,UAAUG,YAAc92B,IAtCnC,4BAkDI,OAHKF,KAAK0b,QACR1b,KAAK0b,MAAQxQ,GAAclL,OAEtBA,KAAK0b,UAlDhB,KCAawb,GAAb,WACE,aAAe,IAAD,gCAmBdvX,UAAOhgB,EAnBO,KAmHdw3B,UAAY,WACV,GAAI,EAAKC,YACP,OAAO,EAAKA,eArHF,KA8HdlnB,OAAS,WACP,EAAK9G,KAAK0C,MAAMrE,OAAO,EAAK0I,MAAO,IA9HnCpQ,YAAeC,KAAM,CACnB2f,KAAM1f,MAHZ,gDAQI,OAAOD,KAAK62B,UAAU3tB,MAR1B,2BAYI,OAAOlJ,KAAK62B,UAAUzwB,MAZ1B,aAcWlG,GACPF,KAAK62B,UAAUzwB,KAAOlG,IAf1B,2BAyBI,OAHKF,KAAK2f,OACR3f,KAAK2f,KAAO3f,KAAK62B,UAAU3xB,MAEtBlF,KAAK2f,MAzBhB,aA2BWzf,GACPF,KAAK2f,KAAOzf,EACPF,KAAKoG,OACRpG,KAAK62B,UAAU3xB,KAAOhF,KA9B5B,6BAmCe,IAAD,OACLF,KAAKg0B,UACEh0B,KAAKg0B,OAASqD,EAAar3B,KAAKkF,KAAM,mCAC5C/E,aAAe,SAACD,GAAD,OAAO,EAAKgF,KAAOhF,IAExC,OAAOF,KAAKg0B,SAxChB,kCAgDI,OAHKh0B,KAAK0yB,cACR1yB,KAAK0yB,YAAc1yB,KAAK62B,UAAU9D,aAE7B/yB,KAAK0yB,aAhDhB,aAkDkBxyB,GACdF,KAAK0yB,YAAcxyB,EACdF,KAAKoG,OACRpG,KAAK62B,UAAU9D,YAAc7yB,KArDnC,kCA8DI,OAHKF,KAAK6yB,cACR7yB,KAAK6yB,YAAc7yB,KAAK62B,UAAU/D,aAE7B9yB,KAAK6yB,aA9DhB,aAgEkB3yB,GACdF,KAAK6yB,YAAc3yB,EACnBF,KAAK62B,UAAU/D,YAAc5yB,IAlEjC,iCAsEI,OAAOF,KAAKkF,OAtEhB,qCA0EI,OAAOlF,KAAKkF,OA1EhB,2BAkFI,OAHKlF,KAAKqB,OACRrB,KAAKqB,KAAOrB,KAAK62B,UAAUhjB,MAEtB7T,KAAKqB,MAlFhB,aAoFWnB,GACPF,KAAKqB,KAAOnB,EACPF,KAAKoG,OACRpG,KAAK62B,UAAUhjB,KAAO3T,KAvF5B,6BAgGI,OAHKF,KAAKs3B,SACRt3B,KAAKs3B,OAASt3B,KAAKm3B,aAEdn3B,KAAKs3B,QAhGhB,aAkGap3B,GACTF,KAAKs3B,OAASp3B,EAGVA,GAAKF,KAAKu3B,oBACZv3B,KAAKu3B,mBAAmBr3B,GAGrBF,KAAKoG,OAKNpG,KAAK6T,KAJF3T,EAISA,EAAE22B,UAHF32B,KA5GpB,4BA4HI,OAAOF,KAAKoJ,KAAK0C,MAAMxC,QAAQtJ,UA5HnC,KCDqBw3B,G,4MACnBD,mBAAqB,SAACr3B,GACpB,IAAIu3B,EAAev3B,EAAEw3B,iBACjBD,GACFA,EAAaE,gBAGf,IAAIC,EAAc13B,EAAE23B,eAChBD,GACFA,EAAYD,iB,YATkCT,ICGvCY,GAAb,WACE,aAAe,IAAD,gCAyGdC,QAAU,SAAC73B,GACT,GAAKA,EAAL,CADe,IAGVyN,EAAyDzN,EAAzDyN,UAA6BI,GAA4B7N,EAA9C2N,iBAA8C3N,EAA5B6N,kBAAkBE,EAAU/N,EAAV+N,OACpD,EAAK+pB,kBAAkBzb,YAAc5O,EACrC,EAAKsqB,yBAAyB1b,YAAcxO,EAC5C,EAAKmqB,eAAepe,aAAe7L,IA/GvB,KAkHd0pB,cAAgB,WACE,EAAKhqB,UACE,EAAKE,iBACL,EAAKE,iBACf,EAAKE,QArHlBlO,YAAeC,KAAM,IAFzB,qDAQoB,OAAOs0B,GAAShmB,WARpC,gCAeI,OAHKtO,KAAK4N,YACR5N,KAAK4N,UAAY5N,KAAK62B,UAAUlpB,WAE3B3N,KAAK4N,WAfhB,aAiBgB1N,GACZF,KAAK4N,UAAY1N,EACjBF,KAAK62B,UAAUlpB,UAAYzN,IAnB/B,uCA2BI,OAHKF,KAAK8N,mBACR9N,KAAK8N,iBAAmB9N,KAAK62B,UAAUhpB,kBAElC7N,KAAK8N,kBA3BhB,aA6BuB5N,GACnBF,KAAK8N,iBAAmB5N,EACxBF,KAAK62B,UAAUhpB,iBAAmB3N,IA/BtC,uCAuCI,OAHKF,KAAKgO,mBACRhO,KAAKgO,iBAAmBhO,KAAK62B,UAAU9oB,kBAElC/N,KAAKgO,kBAvChB,aAyCuB9N,GACnBF,KAAKgO,iBAAmB9N,EACxBF,KAAK62B,UAAU9oB,iBAAmB7N,IA3CtC,6BAmDI,OAHKF,KAAKkO,SACRlO,KAAKkO,OAASlO,KAAK62B,UAAU5oB,QAExBjO,KAAKkO,QAnDhB,aAqDahO,GACTF,KAAKkO,OAAShO,EACdF,KAAK62B,UAAU5oB,OAAS/N,IAvD5B,uCA+DI,OAHKF,KAAKwP,mBACRxP,KAAKwP,iBAAmBxP,KAAK62B,UAAUsB,kBAElCn4B,KAAKwP,mBA/DhB,wCAqE2B,IAAD,OACjBxP,KAAKo4B,qBACCp4B,KAAKo4B,kBAAoBzC,GAAiB31B,KAAKm2B,SAASkC,iBAAkBr4B,KAAK2N,YACpF8M,sBAAwB,SAACva,GAC3B,EAAKyN,UAAYzN,IAGrB,OAAOF,KAAKo4B,oBA5EhB,+CAgFkC,IAAD,OACxBp4B,KAAKs4B,4BACEt4B,KAAKs4B,yBAA2B3C,GAAiB31B,KAAKm2B,SAASoC,kBAAmBv4B,KAAK+N,mBAC7F0M,sBAAwB,SAACva,GAC3B,EAAK6N,iBAAmB7N,IAG5B,OAAOF,KAAKs4B,2BAvFhB,qCA2FwB,IAAD,OACnB,IAAKt4B,KAAKw4B,eAAe,CACvB,IAAIryB,EAAMnG,KAAKw4B,eAAiBC,GAAsBz4B,KAAKm4B,iBAAkBn4B,KAAKiO,QAE9EjO,KAAK04B,yBACPvyB,EAAIuE,YAAc1K,KAAK04B,wBAGzBvyB,EAAIsU,sBAAwB,SAACva,GAC3B,EAAK+N,OAAS/N,GAGlB,OAAOF,KAAKw4B,mBAvGhB,KCFah4B,GAAM,SAACC,GAClB,GAAKA,EAAL,CACA,IAAIC,EAAK,IAAIo3B,GAEb,OADAp3B,EAAGm2B,UAAYp2B,EACRC,ICHYi4B,G,WACnB,aAAe,IAAD,gCAiBdC,oBAAsB,WACpB,IAAIjqB,EAAS,EAAKkoB,UAAUgC,eAC5B,OAAOC,GAAiBnqB,IAnBZ,KAsBdoqB,wBAAqBp5B,EAtBP,KA0Cdq5B,kBAAoB,WAClB,IAAIrqB,EAAS,EAAKkoB,UAAUoC,aAC5B,OAAOH,GAAiBnqB,IA5CZ,KA4DdopB,QAAU,SAAC73B,GACT,EAAKw3B,iBAAiBK,QAAQ73B,EAAEw3B,kBAEhC,IAAIhD,GAAqC,IAAzBx0B,EAAEg5B,mBAClB,EAAKC,qBAAqB5D,UAAYb,EAEtC,EAAKmD,eAAeE,QAAQ73B,EAAE23B,iBAjE9B93B,YAAeC,KAAM,CACnB+4B,mBAAqB94B,M,6DAYvB,OAHKD,KAAKo5B,kBAAoBp5B,KAAK62B,YACjC72B,KAAKo5B,iBAAmBp5B,KAAK44B,uBAExB54B,KAAKo5B,mB,yCAaZ,OAHKp5B,KAAK+4B,qBACR/4B,KAAK+4B,mBAAqB/4B,KAAK62B,UAAUqC,oBAEpCl5B,KAAK+4B,oB,aAES74B,GACrBF,KAAK+4B,mBAAqB74B,EAC1BF,KAAK62B,UAAUqC,mBAAqBh5B,I,qCAQpC,OAHKF,KAAKq5B,gBAAkBr5B,KAAK62B,YAC/B72B,KAAKq5B,eAAiBr5B,KAAKg5B,qBAEtBh5B,KAAKq5B,iB,2CASc,IAAD,OACpBr5B,KAAKs5B,wBACEt5B,KAAKs5B,qBACXtD,GAAmB,sCAAwBh2B,KAAKk5B,qBAEhDtE,cAAgB,SAAC10B,GACnB,EAAKg5B,mBAAqBh5B,IAG9B,OAAOF,KAAKs5B,yB,KC5DH94B,GAAM,SAACC,GAClB,IAAIC,EAAK,IAAIi4B,GAEb,OADAj4B,EAAGm2B,UAAYp2B,EACRC,GCFIF,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAI82B,GA6Bb,OA3BA92B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEV3G,EAAEgyB,cAAgB,SAACvyB,GACbO,EAAE2F,OACJ1F,EAAGwE,KAAOhF,IAIdO,EAAEkyB,qBAAuB,SAACzyB,GACpBO,EAAE2F,OACJ1F,EAAGqyB,YAAc7yB,IAIrBO,EAAEmyB,cAAgB,SAAC1yB,GACbO,EAAE2F,OACJ1F,EAAGmT,KAAO3T,EACVQ,EAAG64B,OAAS74B,EAAGy2B,cAInBz2B,EAAG02B,YAAc,WACf,IAAI/1B,EAAOZ,EAAEoT,KACb,OAAO2lB,GAAen4B,IAGjBX,GCnBI01B,GAAiB,SAAC11B,GAE7B,OADYA,EAAGs0B,MACA,SAAW,QCVPyE,G,WACnB,aAAe,IAAD,gCA+EdnC,YAAS33B,EA/EK,KA4Fdw3B,UAAY,WACV,GAAI,EAAKC,YAEP,OADa,EAAKA,eA9FR,KA6Hd7E,WAAQ5yB,EA7HM,KA6Jdo1B,iBAAcp1B,EA7JA,KAyLdu1B,WAAa,WACX,EAAK+B,SAASJ,UAAU3mB,SACxB,EAAK+mB,SAAS/mB,SACd,EAAK+mB,cAAWt3B,GA5LJ,KA+Ld2R,YAAc,WACZ,EAAKulB,UAAUvlB,eA/LfvR,YAAeC,KAAM,CACnBs3B,OAASr3B,IACTsyB,MAAOtyB,M,iDAWT,OAHID,KAAK2f,OACP3f,KAAK2f,KAAO3f,KAAK62B,UAAU3xB,MAEtBlF,KAAK2f,M,aAELzf,GACPF,KAAK2f,KAAOzf,EACZF,KAAK62B,UAAU3xB,KAAOhF,I,kCAQtB,OAHKF,KAAK0yB,cACR1yB,KAAK0yB,YAAc1yB,KAAK62B,UAAU9D,aAE7B/yB,KAAK0yB,a,aAEExyB,GACdF,KAAK0yB,YAAcxyB,EACnBF,KAAK62B,UAAU9D,YAAc7yB,I,kCAQ7B,OAHKF,KAAK6yB,cACR7yB,KAAK6yB,YAAc7yB,KAAK62B,UAAU/D,aAE7B9yB,KAAK6yB,a,aAEE3yB,GACdF,KAAK6yB,YAAc3yB,EACnBF,KAAK62B,UAAU/D,YAAc5yB,I,iCAI7B,OAAOF,KAAKkF,O,6BAIA,IAAD,OACNlF,KAAKg0B,UACEh0B,KAAKg0B,OACb5yB,EAAepB,KAAKkF,KAAM,4BACxB/E,aAAe,SAACD,GAAD,OAAO,EAAKgF,KAAOhF,IAExC,OAAOF,KAAKg0B,S,oCAIO,IAAD,OACbh0B,KAAKi0B,iBACEj0B,KAAKi0B,cACb7yB,EAAepB,KAAK+yB,YAAa,kBAC/B5yB,aAAe,SAACD,GAAD,OAAO,EAAK6yB,YAAc7yB,IAE/C,OAAOF,KAAKi0B,gB,oCAIO,IAAD,OACbj0B,KAAK05B,iBACE15B,KAAK05B,cACbt4B,EAAepB,KAAK8yB,YAAa,kCAC/B3yB,aAAe,SAACD,GAAD,OAAO,EAAK4yB,YAAc5yB,IAE/C,OAAOF,KAAK05B,gB,6BAQZ,OAHK15B,KAAKs3B,SACRt3B,KAAKs3B,OAASt3B,KAAKm3B,aAEdn3B,KAAKs3B,Q,aAEFp3B,GACNF,KAAKu5B,OAAOxB,SACd/3B,KAAKu5B,OAAOxB,QAAQ73B,K,+BActB,OAAOF,KAAK25B,U,aAEDz5B,GACXF,KAAK25B,SAAWz5B,EAEhB,IAAIwb,EAAQ1b,KAAK62B,UACjB,GAAK32B,EAIA,CACHwb,EAAMub,SAAW/2B,EAAE22B,UADhB,IAGG3xB,EAAmChF,EAAnCgF,KAAM6tB,EAA6B7yB,EAA7B6yB,YAAaD,EAAgB5yB,EAAhB4yB,YACzB9yB,KAAKo1B,OAAOl0B,QAAUgE,EACtBlF,KAAKq1B,cAAcn0B,QAAU6xB,EAC7B/yB,KAAK45B,cAAc14B,QAAU4xB,EAE7B9yB,KAAKu5B,OAASr5B,EAAEq5B,OAChBv5B,KAAKs1B,QAAQC,WAAY,OAZzB7Z,EAAMub,SAAW/2B,EACjBF,KAAKs1B,QAAQC,WAAY,I,4BAoB3B,YAHmB51B,IAAfK,KAAKuyB,QACPvyB,KAAKuyB,MAAQvyB,KAAK62B,UAAU7B,OAEvBh1B,KAAKuyB,O,aAEJryB,GACRF,KAAKuyB,MAAQryB,EACbF,KAAK61B,UAAU30B,QAAUgK,GAAoBlL,MAC7CA,KAAK62B,UAAU7B,MAAQ90B,I,8BAIV,IAAD,OACZ,IAAKF,KAAK+1B,QAAS,CACjB,IAAI5vB,EAAMnG,KAAK+1B,QACXC,GAAmB,+BAAiBh2B,KAAKg1B,OAE7C7uB,EAAIwuB,WAAY,EAChBxuB,EAAIyuB,cAAgB,SAAC10B,GACnB,EAAK80B,MAAQ90B,EAEXiG,EAAIwuB,YADFz0B,GAOR,OAAOF,KAAK+1B,U,kCAQZ,OAHK/1B,KAAK+0B,cACR/0B,KAAK+0B,YAAc7pB,GAAoBlL,OAElCA,KAAK+0B,a,aAEE70B,GACdF,KAAK+0B,YAAc70B,I,gCAIJ,IAAD,OACTF,KAAKi2B,aACEj2B,KAAKi2B,UAAY70B,EAAepB,KAAKk2B,cAC3C/1B,aAAe,SAACD,GAAD,OAAO,EAAKg2B,YAAch2B,IAE/C,OAAOF,KAAKi2B,Y,iCAKZ,OAAQj2B,KAAKg1B,MAET,GADF,cAAC,IAAD,CAAQvpB,QAASzL,KAAKk1B,WAAtB,wB,KCxLe2E,G,4HAAoCJ,ICiB5CK,GAAW,SAACvD,GACvB,IAAI7gB,EAAQ6gB,EAAOM,UAAU/qB,MAC7B,GAAK4J,EACL,OAAOA,EAAMC,KAAI,SAAA1O,GAAC,OAAI8yB,GAAe9yB,EAAGsvB,OAG7ByD,GAAW,SAACzD,GAEvB,OCvBiB,SAAC91B,EAAG2G,GACrB,IAAI1G,EAAK,IAAIm5B,GAcb,OAbAn5B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEV3G,EAAEg2B,kBAAoB,SAACv2B,GACrB,IAAIwR,EAAUhR,EAAGw1B,YACjB/zB,IAAQF,QAAR,UAAmByP,EAAnB,0CAGFhR,EAAG02B,YAAc,WACf,IAAI/1B,EAAOZ,EAAEoT,KACb,OAAO2lB,GAAen4B,IAGjBX,EDQAu5B,CADK1D,EAAOM,UAAUzE,MACCmE,IEvBX2D,G,4DAwEnBpF,8BAA2Bn1B,E,KAyD3BuQ,OAAS,WACP,EAAK2mB,UAAU3mB,SACJ,EAAK9G,KAAK+wB,gBAChB1yB,OAAO,EAAK0I,MAAO,I,KAG1B4nB,QAAU,SAAC73B,GACT,EAAKk6B,qBAAqB7d,YAAcrc,EAAEm6B,aAC1C,EAAKC,cAAcvC,QAAQ73B,EAAEo6B,eAC7B,EAAKC,oBAAoBhe,YAAcrc,EAAEwzB,cACzC,EAAK8G,iBAAiBje,YAAcrc,EAAEwD,U,kDAnItC,OAAO1D,KAAKoJ,KAAK+wB,gBAAgB7wB,QAAQtJ,Q,mCAQzC,OAHKA,KAAKy6B,eACRz6B,KAAKy6B,aAAez6B,KAAK62B,UAAUwD,cAE9Br6B,KAAKy6B,c,aAEGv6B,GACfF,KAAKy6B,aAAev6B,EACpBF,KAAK62B,UAAUwD,aAAen6B,I,8CAI9B,OAAOgL,GAAgClL,Q,2CAIb,IAAD,OACpBA,KAAK06B,wBACE16B,KAAK06B,qBAAuB/E,GAAiB31B,KAAK26B,wBAAyB36B,KAAKq6B,eACtF5f,sBAAwB,SAACva,GAAD,OAAO,EAAKm6B,aAAen6B,IAEzD,OAAOF,KAAK06B,uB,oCAKP16B,KAAK46B,iBACE56B,KAAK46B,cAAgB9B,GAAiB94B,KAAK62B,UAAUgE,cAC3DnC,uBAAyB,6BAE/B,OAAO14B,KAAK46B,e,aAEI16B,GAChBF,KAAK46B,cAAgB16B,EAKnBF,KAAK62B,UAAUgE,YAJZ36B,EAI0BA,EAAE22B,UAHF32B,I,oCAY/B,OAHKF,KAAK81B,gBACR91B,KAAK81B,cAAgB5qB,GAAsBlL,OAEtCA,KAAK81B,e,aAEI51B,GAChBF,KAAK81B,cAAgB51B,EACrB,IAAI46B,EAAY96B,KAAK62B,UAChB32B,EAIHF,KAAK62B,UAAUvzB,YAAcpD,EAAEoD,YAH/Bw3B,EAAUx3B,YAAcpD,I,+CAY1B,OAHKF,KAAK80B,2BACR90B,KAAK80B,yBAA2B5pB,GAAiClL,OAE5DA,KAAK80B,0B,aAEe50B,GAC3BF,KAAK80B,yBAA2B50B,EAEhC,IAAIs1B,EAAWx1B,KAAKu6B,oBACpB/E,EAAS1pB,MAAQ5L,EACjBs1B,EAAS7Y,eAAiB,I,0CAID,IAAD,OACxB,IAAK3c,KAAK+6B,oBAAqB,CAC7B,IAAItL,EAAczvB,KAAK41B,yBACrB51B,KAAK41B,yBAA2B,GAE9BzvB,EAAMnG,KAAK+6B,oBAAsBpF,GAClClG,EAAazvB,KAAK0zB,eACrBvtB,EAAIuE,YAAc,2BAClBvE,EAAIsU,sBAAwB,SAACva,GAAD,OAAO,EAAKwzB,cAAgBxzB,GAG1D,OAAOF,KAAK+6B,sB,+BAQZ,OAHK/6B,KAAK4E,WACR5E,KAAK4E,SAAW5E,KAAK62B,UAAUnzB,UAE1B1D,KAAK4E,U,aAED1E,GACXF,KAAK4E,SAAW1E,EAChBF,KAAK62B,UAAUnzB,SAAWxD,I,0CAI1B,OAAOgL,GAA4BlL,Q,uCAIb,IAAD,OACrB,IAAKA,KAAKg7B,iBAAkB,CAC1B,IAAI70B,EAAMnG,KAAKg7B,iBAAmBrF,GAAiB31B,KAAKi7B,oBACtDj7B,KAAK0D,UACPyC,EAAIuE,YAAc,sCAClBvE,EAAIsU,sBAAwB,SAACva,GAAD,OAAO,EAAKwD,SAAWxD,GAErD,OAAOF,KAAKg7B,qB,KChIH7E,GAAW,WACtB,OAAO7B,GAAShmB,UAGL9N,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAIw5B,GAQb,OAPAx5B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEV+uB,KAAW5B,mBAAmBiC,qBAAqB1uB,MAAK,SAAC5H,GACvDQ,EAAGk1B,yBAA2BS,GAA4B31B,MAGrDA,GAGIw6B,GAA6B,SAACz6B,GACzC,OAAO01B,KAAWgF,oBAGPC,GAAmB,SAAC36B,GAC/B,IAAI4R,EAAc5R,EAAEo2B,UAAUvzB,YAC9B,GAAK+O,EAAL,CAEA,IAAI/L,EAAO6vB,KAAW5B,mBAAmBV,eACzC,GAAKvtB,EAAL,CAEA,IAAIgB,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAE3D,cAAgB+O,KAClD,OAAkB,IAAX/K,EAAehB,EAAKgB,QAAS3H,KAGzB02B,GAA8B,SAAC51B,GAC1C,OAAO01B,KAAW5B,mBAAmBV,gBAG1BwH,GAAyB,SAAC56B,GACrC,OAAO01B,KAAWmF,WCrCCC,G,4DA8BnBrrB,OAAS,WACP,EAAK9G,KAAKoyB,cAAc/zB,OAAO,EAAK0I,MAAO,I,kDA7B3C,OAAOnQ,KAAKoJ,KAAKoyB,cAAclyB,QAAQtJ,Q,kCAgBvC,OAHKA,KAAKqS,cACRrS,KAAKqS,YAAcnH,GAAoBlL,OAElCA,KAAKqS,a,aAEEnS,GACdF,KAAKqS,YAAcnS,EAKjBF,KAAKyS,cAJFvS,EAIkBA,EAAEgJ,SAHFvJ,I,8BAYvB,OAAOuL,GAAgBlL,U,KCrCdy7B,GAAc,cCuBdriB,GAAQ,SAAC3Y,EAAG2G,GACvB,IAAI1G,EAAK,IAAI66B,GAMb,OALA76B,EAAG25B,aAAe55B,EAAE45B,aACpB35B,EAAGgD,SAAWjD,EAAEiD,SAChBhD,EAAGm6B,YAAcp6B,EAAEo6B,YACnBn6B,EAAG4C,YAAc7C,EAAE6C,YACnB5C,EAAG0I,KAAOhC,EACH1G,GAGIg7B,GAAa,SAACt0B,GACzB,IAAI1G,EAAK,IAAI66B,GACb76B,EAAG25B,aAAesB,GAClBj7B,EAAG0I,KAAOhC,EAEV,IAAIw0B,EAAc,IAAIluB,GAQtB,OAPAkuB,EAAYztB,aAAeE,GAC3ButB,EAAYjuB,UAAYmB,GACxB8sB,EAAY7tB,iBAAmBgB,GAC/B6sB,EAAY3tB,OAAS,CAAE,UAEvBvN,EAAGm6B,YAAce,EAEVl7B,GAGIkV,GAAiB,SAACnV,GAC7B,IAAIgS,EAAgBhS,EAAEgS,cACtB,GAAKA,EAAL,CAEA,IAAInM,EA3CGkI,GAAOF,SA2CMuH,iBAAiBC,aACrC,GAAKxP,EAAL,CAEA,IAAIgB,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEiC,MAAQuJ,KAC1C,OAAkB,IAAXnL,EAAehB,EAAKgB,QAAS3H,KAGzBk8B,GAAa,SAACp7B,GACzB,MAAO,CACLg6B,aAAeh6B,EAAE45B,aACjBz1B,SAAWnE,EAAEiD,SACbk4B,YAAan7B,EAAEo6B,YAAYppB,QAC3BgB,cAAgBhS,EAAEgS,gBCzDDqpB,G,WACnB,aAAe,IAAD,gCA2BdC,gCAA6Bp8B,EA3Bf,KAsDdq8B,qBAAkBr8B,EAtDJ,KA4Fds8B,qBAAuB,WACrB,IAAIlwB,EAAO,EAAK8qB,UAAUqF,qBACtBC,EAAWC,GAAuBrwB,EAAM,GAE5C,OADA,EAAKouB,gBAAgBryB,KAAKq0B,GACnBA,GAhGK,KAmGdpE,QAAU,SAAC73B,GACT,EAAKm8B,sBAAsB9f,YAAcrc,EAAEo8B,gBAC3C,EAAKnC,gBAAkBj6B,EAAEi6B,iBApGzBp6B,YAAeC,KAAM,CACnBg8B,gBAAiB/7B,M,4DAYnB,OAHKD,KAAKu8B,kBACRv8B,KAAKu8B,gBAAkBrxB,GAAwBlL,OAE1CA,KAAKu8B,iB,aAEMr8B,GAClBF,KAAKu8B,gBAAkBr8B,EACvB,IAAI46B,EAAY96B,KAAK62B,UAKnBiE,EAAU0B,cAJPt8B,EAIuBA,EAAE22B,UAHF32B,I,iDAY5B,OAHKF,KAAK+7B,6BACR/7B,KAAK+7B,2BAA6B7wB,GAAmClL,OAEhEA,KAAK+7B,4B,aAEiB77B,GAC7BF,KAAK+7B,2BAA6B77B,EAElC,IAAIs1B,EAAWx1B,KAAKq8B,sBACpB7G,EAAS1pB,MAAQ5L,EACjBs1B,EAAS7Y,cAAgB,I,4CAIE,IAAD,OAC1B,IAAK3c,KAAKy8B,sBAAuB,CAC/B,IAAIhN,EAAczvB,KAAK08B,2BAA6B18B,KAAK08B,2BAA6B,GAElFv2B,EAAMnG,KAAKy8B,sBAAwB9G,GAAiBlG,EAAazvB,KAAKs8B,iBAC1En2B,EAAIuE,YAAc,6BAClBvE,EAAIsU,sBAAwB,SAACva,GAAD,OAAO,EAAKo8B,gBAAkBp8B,GAE5D,OAAOF,KAAKy8B,wB,sCAQZ,OAHKz8B,KAAKg8B,kBACRh8B,KAAKg8B,gBAAkB9wB,GAAwBlL,OAE1CA,KAAKg8B,iB,aAEM97B,GAClB,IAAIoG,EAAOtG,KAAKg8B,gBACZW,EAAY38B,KAAK62B,UAAU2E,cAE3BoB,EAAWt2B,EAAKS,OAChB81B,EAAW38B,EAAE6G,OAEjBT,EAAKU,SAAQ,SAACC,EAAGC,GACXA,GAAK21B,GACT51B,EAAE8wB,QAAQ73B,EAAEgH,OAGd,IAAI41B,EAAQt3B,KAAKu3B,IAAIH,EAAWC,GAChC,GAAID,EAAWC,EACbv2B,EAAKmB,OAAOo1B,EAAUC,GACtBH,EAAUl1B,OAAOo1B,EAAUC,QAExB,GAAIF,EAAWC,EAClB,IAAK,IAAI31B,EAAI,EAAGA,EAAI41B,EAAO51B,IAAK,CAC9B,IAAI81B,EAAe98B,EAAE08B,EAAW11B,GAE5B6E,EAAOkxB,GACRD,EAAanG,UAAW72B,KAAK62B,WAChC8F,EAAU70B,KAAKiE,GAEf,IAAImxB,EAASd,GAAuBrwB,EAAM/L,MAC1CsG,EAAKwB,KAAKo1B,Q,KC5FL/G,GAAW,WACtB,OAAO7B,GAAShmB,UAGL9N,GAAM,SAACC,GAClB,IAAIC,EAAK,IAAIo7B,GAOb,OANAp7B,EAAGm2B,UAAYp2B,EAEf01B,KAAWS,4BAA4BE,eAAiB,SAAC52B,GACvDQ,EAAGg8B,2BAA6BS,GAA8Bz8B,IAGzDA,GAGI08B,GAAqB,SAAC38B,GACjC,IAAI48B,EAAa58B,EAAEo2B,UAAU2F,cAC7B,GAAKa,EAAL,CAEA,IAAI/2B,EAAO6vB,KAAWS,4BAA4B9qB,MAClD,GAAKxF,EAAL,CAEA,IAAIgB,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAE4vB,YAAcwG,KAChD,OAAkB,IAAX/1B,EAAehB,EAAKgB,QAAS3H,KAGzBw9B,GAAgC,SAAC18B,GAC5C,OAAO01B,KAAWS,4BAA4B9qB,OAGnCwxB,GAAqB,SAAC78B,GAEjC,OADoBA,EAAEo2B,UAAU2E,cACX7lB,KAAI,SAAA1O,GAAC,OAAIm1B,GAAuBn1B,EAAGxG,OClCrC88B,G,4MACnBhG,mBAAqB,SAACr3B,GACEA,EAAEi6B,iB,YAFqBjD,ICCpC12B,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAI68B,GA6Bb,OA3BA78B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEV3G,EAAEgyB,cAAgB,SAACvyB,GACbO,EAAE2F,OACJ1F,EAAGwE,KAAOhF,IAIdO,EAAEkyB,qBAAuB,SAACzyB,GACpBO,EAAE2F,OACJ1F,EAAGqyB,YAAc7yB,IAIrBO,EAAEmyB,cAAgB,SAAC1yB,GACbO,EAAE2F,OACJ1F,EAAGmT,KAAO3T,EACVQ,EAAG64B,OAAS74B,EAAGy2B,cAInBz2B,EAAG02B,YAAc,WACf,IAAI/1B,EAAOZ,EAAEoT,KACb,OAAO2lB,GAAen4B,IAGjBX,GC9BY88B,G,4HAAiC/D,ICAzCgE,GAAb,WACE,aAAe,IAAD,gCAMd/nB,WAAO/V,EANO,KAuCd+H,IAAM,SAACqE,GACL,EAAKD,MAAMhE,KAAKiE,IAvChBhM,YAAeC,KAAM,CACnB0V,MAAQzV,MAHd,kDAYI,OAHKD,KAAK0V,QACR1V,KAAK0V,MAAQxK,GAAclL,OAEtBA,KAAK0V,QAZhB,kCAoBI,OAHK1V,KAAK+2B,cACR/2B,KAAK+2B,YAAc/2B,KAAK62B,UAAUG,aAE7Bh3B,KAAK+2B,aApBhB,aAsBkB72B,GACdF,KAAK+2B,YAAc72B,EACdA,GAGHF,KAAK62B,UAAUG,YAAc92B,EAAE22B,UAC/B72B,KAAKoyB,MAAM6E,SAAW/2B,GAHtBF,KAAK62B,UAAUG,YAAc92B,IAzBnC,4BAqCI,OAHKF,KAAK0b,QACR1b,KAAK0b,MAAQxQ,GAAclL,OAEtBA,KAAK0b,UArChB,KCgBaoe,GAAW,SAACvD,GACvB,IAAI7gB,EAAQ6gB,EAAOM,UAAU/qB,MAC7B,GAAK4J,EACL,OAAOA,EAAMC,KAAI,SAAA1O,GAAC,OAAI8yB,GAAe9yB,EAAGsvB,OAG7ByD,GAAW,SAACzD,GAEvB,OCtBiB,SAAC91B,EAAG2G,GACrB,IAAI1G,EAAK,IAAI88B,GAcb,OAbA98B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEV3G,EAAEg2B,kBAAoB,SAACv2B,GACrB,IAAIwR,EAAUhR,EAAGw1B,YACjB/zB,IAAQF,QAAR,UAAmByP,EAAnB,2BAGFhR,EAAG02B,YAAc,WACf,IAAI/1B,EAAOZ,EAAEoT,KACb,OAAO2lB,GAAen4B,IAGjBX,EDOAu5B,CADK1D,EAAOM,UAAUzE,MACCmE,IExBnBmH,GAAb,WACE,aAAe,IAAD,gCAMdhoB,WAAO/V,EANO,KA8Bd+H,IAAM,SAACqE,GACL,EAAKD,MAAMhE,KAAKiE,IA9BhBhM,YAAeC,KAAM,CACnB0V,MAAQzV,MAHd,kDAYI,OAHKD,KAAK0V,QACR1V,KAAK0V,MAAQxK,GAAclL,OAEtBA,KAAK0V,QAZhB,kCAoBI,OAHK1V,KAAK+2B,cACR/2B,KAAK+2B,YAAc/2B,KAAK62B,UAAUG,aAE7Bh3B,KAAK+2B,aApBhB,aAsBkB72B,GACdF,KAAK+2B,YAAc72B,EAIjBF,KAAK62B,UAAUG,YAHZ92B,EAG0BA,EAAE22B,UAFF32B,MAzBnC,KCea45B,GAAW,SAACvD,GACvB,IAAI7gB,EAAQ6gB,EAAOM,UAAU/qB,MAC7B,GAAK4J,EACL,OAAOA,EAAMC,KAAI,SAAA1O,GAAC,OAAI8yB,GAAe9yB,EAAGsvB,OCpBrBoH,G,4FAEjB,OAAO39B,KAAK62B,UAAU3tB,M,2BAQtB,OAHIlJ,KAAK2f,OACP3f,KAAK2f,KAAO3f,KAAK62B,UAAU3xB,MAEtBlF,KAAK2f,M,aAELzf,GACPF,KAAK2f,KAAOzf,EACZF,KAAK62B,UAAU3xB,KAAOhF,I,kCAQtB,OAHKF,KAAK0yB,cACR1yB,KAAK0yB,YAAc1yB,KAAK62B,UAAU9D,aAE7B/yB,KAAK0yB,a,aAEExyB,GACdF,KAAK0yB,YAAcxyB,EACnBF,KAAK62B,UAAU9D,YAAc7yB,I,qCAI7B,MAAM,GAAN,OAAUF,KAAKkF,U,KC7BN1E,GAAM,SAACC,EAAG2G,GACrB,GAAK3G,EAAL,CACA,IAAIC,EAAK,IAAIi9B,GAKb,OAHAj9B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEH1G,ICTIk9B,GAAa,aCKbC,GAAb,WACE,aAAe,IAAD,gCAOdnoB,WAAO/V,EAPO,KAed62B,qBAAuB,GAfT,KA6Bdv1B,WAAQtB,EA7BM,KAqCd+H,IAAM,SAACqE,GACL,EAAKD,MAAMhE,KAAKiE,IAtCJ,KAyCd+xB,WAAa,WACX,EAAKj+B,MAAQk+B,IA1CD,KA6CdtJ,OAAS,WACP,EAAK50B,WAAQF,GA9CD,KAiDdq+B,GAAK,WACH,IAAIre,EAAO,EAAKyS,MAAMltB,MAEP,IADH,EAAK4G,MAAMvE,WAAU,SAAAN,GAAC,OAAIA,EAAE/B,OAASya,MAMjD,EAAK9f,WAAQF,EACb,EAAKk3B,UAAUoH,kBALb97B,IAAQ+7B,QAAQ,iCApDlBn+B,YAAeC,KAAM,CACnB0V,MAAQzV,IACRgB,MAAQhB,MAJd,kDAaI,OAHKD,KAAK0V,QACR1V,KAAK0V,MAAQxK,GAAclL,OAEtBA,KAAK0V,QAbhB,iCAkBoBxV,GAChBF,KAAKw2B,qBAAqBxvB,SAAQ,SAAAC,GAAC,OAAIA,SAnB3C,4BA2BI,OAHKjH,KAAK0b,QACR1b,KAAK0b,MAAQxQ,GAAclL,OAEtBA,KAAK0b,QA3BhB,4BAgCI,OAAO1b,KAAKiB,OAhChB,aAkCYf,GACRF,KAAKiB,MAAQf,MAnCjB,KCHqBi+B,G,iDACnBxe,UAAOhgB,E,iDAKL,OAHKK,KAAK2f,OACR3f,KAAK2f,KAAO3f,KAAK62B,UAAU3xB,MAEtBlF,KAAK2f,M,aAELzf,GACPF,KAAK2f,KAAOzf,EACZF,KAAK62B,UAAU3xB,KAAOhF,I,kCAQtB,OAHKF,KAAK0yB,cACR1yB,KAAK0yB,YAAc1yB,KAAK62B,UAAU9D,aAE7B/yB,KAAK0yB,a,aAEExyB,GACdF,KAAK0yB,YAAcxyB,EACnBF,KAAK62B,UAAU9D,YAAc7yB,I,6BAIjB,IAAD,OACNF,KAAKg0B,UACEh0B,KAAKg0B,OACb5yB,EAAepB,KAAKkF,KAAM,mBACxB/E,aAAe,SAACD,GAAD,OAAO,EAAKgF,KAAOhF,IAExC,OAAOF,KAAKg0B,S,oCAIO,IAAD,OACbh0B,KAAKi0B,iBACEj0B,KAAKi0B,cACb7yB,EAAepB,KAAK+yB,YAAa,kBAC/B5yB,aAAe,SAACD,GAAD,OAAO,EAAK6yB,YAAc7yB,IAE/C,OAAOF,KAAKi0B,kB,KCxBH6F,GAAW,SAACvD,GACvB,IAAI7gB,EAAQ6gB,EAAOM,UAAU/qB,MAC7B,GAAK4J,EACL,OAAOA,EAAMC,KAAI,SAAA1O,GAAC,OAAI8yB,GAAe9yB,EAAGsvB,OAG7ByD,GAAW,SAACv5B,GACvB,OCzBiB,SAACA,EAAG2G,GACrB,IAAI1G,EAAK,IAAIy9B,GAIb,OAHAz9B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEH1G,EDoBAu5B,CAAgBx5B,EAAEo2B,UAAUzE,MAAO3xB,IExBvB29B,G,WACnB,aAAe,yBA+DfC,yBAAsB1+B,EA/DR,KAyEd2+B,iCAA8B3+B,EAxE5BI,YAAeC,KAAM,CACnBq+B,oBAAqBp+B,IACrBq+B,4BAA6Br+B,M,gDAK/B,OAAOD,KAAK62B,UAAU3tB,M,2BAQtB,OAHKlJ,KAAK2f,OACR3f,KAAK2f,KAAO3f,KAAK62B,UAAU3xB,MAEtBlF,KAAK2f,M,aAELzf,GACPF,KAAK2f,KAAOzf,EACZF,KAAK62B,UAAU3xB,KAAOhF,I,2BAQtB,OAHKF,KAAK2zB,OACR3zB,KAAK2zB,KAAO3zB,KAAK62B,UAAU/C,MAEtB9zB,KAAK2zB,M,aAELzzB,GACPF,KAAK2zB,KAAOzzB,EACZF,KAAK62B,UAAU/C,KAAO5zB,I,mCAQtB,OAHKF,KAAKu+B,eACRv+B,KAAKu+B,aAAerzB,GAAqBlL,OAEpCA,KAAKu+B,e,qCAQZ,OAHKv+B,KAAKw+B,iBACRx+B,KAAKw+B,eAAiBx+B,KAAK62B,UAAU4H,gBAEhCz+B,KAAKw+B,iB,qCAIZ,OAAOx+B,KAAK62B,UAAU6H,iB,qCAItB,MAAM,GAAN,OAAU1+B,KAAK8zB,KAAf,cAAyB9zB,KAAKkF,Q,iCAI9B,OAAOlF,KAAK62B,UAAU8H,a,0CAQtB,OAHK3+B,KAAKq+B,sBACRr+B,KAAKq+B,oBAAsBnzB,GAA4BlL,OAElDA,KAAKq+B,qB,aACYn+B,GACxBF,KAAKq+B,oBAAsBn+B,I,kDAQ3B,OAHKF,KAAKs+B,8BACRt+B,KAAKs+B,4BAA8BpzB,GAAoClL,OAElEA,KAAKs+B,6B,aACoBp+B,GAChCF,KAAKs+B,4BAA8Bp+B,I,0BAInC,OAAOF,KAAK62B,UAAUrE,Q,KCxFbjzB,GAAO,OACPmc,GAAQ,QCKfkjB,I,yDACJ,WAAYh+B,GAAQ,IAAD,uBACjB,cAAMA,IAURi+B,gBAAkB,SAAC/9B,GACjB,IAAIO,EAAO,EAAKJ,MACVimB,EAAYpmB,EAAEE,OAAdkmB,QAEF7lB,EAAKy9B,iBACPz9B,EAAKy9B,gBAAgB5X,GAGlB7lB,EAAKozB,SACRpzB,EAAKk0B,UAAYrO,IApBF,IAGX/lB,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU60B,IAAmB,GALjB,E,qDAwBT,IAAD,EAC8Bh2B,KAAKiB,MAApCyzB,EADC,EACDA,UAAW/U,EADV,EACUA,KAAMgV,EADhB,EACgBA,UAEvB,OACE,mCACE,kCACE,uBAAOnpB,KAAK,WACV0b,QAASwN,EACT7zB,SAAUb,KAAK6+B,gBAAiB7gB,SAAU2W,IAC5C,sBAAMnqB,UAAU,kBAAhB,SAAmCmV,a,GAlClBpe,cAyCZC,eAASo9B,ICtCXG,GAAb,WACE,aAAe,IAAD,gCA6Fd7uB,OAAS,WACP,EAAK2mB,UAAU3mB,SACJ,EAAK9G,KAAKsL,YAChBjN,OAAO,EAAK0I,MAAO,GAExB,EAAKwE,QAAUzJ,GAAuB,IAlG1B,KAqGd8zB,aAAUr/B,EArGI,KA+Gds/B,kBAAet/B,EA9GbI,YAAeC,KAAM,CACnBg/B,QAAS/+B,IACTg/B,aAAch/B,MAJpB,+CASI,OAAOD,KAAK62B,UAAUpmB,KAT1B,uCAaI,OAAOzQ,KAAKoJ,KAAK81B,mBAbrB,6BAiBI,OAAOl/B,KAAK62B,UAAUsI,QAjB1B,aAkBej/B,GACXF,KAAK62B,UAAUsI,OAASj/B,IAnB5B,gCAuBI,OAAOF,KAAKoJ,KAAK8tB,YAvBrB,oCA2BuB,IAAD,OAClB,IAAKl3B,KAAKo/B,cAAe,CACvB,IAAI94B,EAAOtG,KAAKk/B,iBACX54B,GACHtG,KAAKk3B,UAAUL,UAAUwI,4BAA4Bv3B,MAAK,WACxD,IAAI3B,EAAM,EAAKi5B,cACfj5B,EAAI2F,MAAQ,EAAKozB,iBACjB/4B,EAAI2T,aAAe,EAAKqlB,UAI5B74B,EAAOA,GAAc,GACrB,IAAIH,EAAMnG,KAAKo/B,cAAgBxP,GAAoBtpB,EAAMtG,KAAKm/B,QAC9Dh5B,EAAIuE,YAAc,sBAElBvE,EAAImV,YAAc,SAACvP,GACjB,IAGIuzB,EAAYjI,EAFP,EAAKkI,cAAgB,EAAK5qB,UAAY5I,EAAO,QAAU,SAO5DyzB,EAAenI,EAFV,EAAK1iB,UAAY5I,EAAO,UAAY,UAOzC0zB,EAAepI,EAFV,EAAK1iB,UAAY5I,EAAO,GAAK,OAQtC,OAAO,cAAC,KAAD,CAAS4c,QAAS2W,EAAUp+B,QACjCxB,QACE,iCACG,EAAKiV,UAAY5I,EAChB,sBAAMvB,UAAU,sBAAhB,SAAuCi1B,EAAav+B,UAClD,GACJ,cAAC,IAAD,CAAQmD,KAAK,QACXmH,KAAMg0B,EAAat+B,QACnBuK,QAAS,WACP,EAAKkJ,QAAU5I,GAHnB,wBANC,SAaL,sBAAMvB,UAhBC,EAAKmK,UAAY5I,EAAO,sBAAwB,GAgBvD,SAAgCA,OAIpC5F,EAAIyU,UAAY,SAAC1a,GAAD,OAAO,EAAKq/B,aAAer/B,GAC3CiG,EAAIsU,sBAAwB,SAACva,GAC3B,EAAKi/B,OAASj/B,GAC6B,IAAvC,EAAKi/B,OAAO71B,QAAQ,EAAKqL,WAC3B,EAAKA,QAAUzJ,GAAuB,KAI5C,OAAOlL,KAAKo/B,gBAvFhB,4BA2FI,OAAOp/B,KAAKoJ,KAAKsL,YAAYpL,QAAQtJ,QA3FzC,8BA2GI,OAHKA,KAAKg/B,UACRh/B,KAAKg/B,QAAUh/B,KAAK62B,UAAUliB,SAEzB3U,KAAKg/B,SA3GhB,aA4GgB9+B,GACZF,KAAKg/B,QAAUh/B,KAAK62B,UAAUliB,QAAUzU,IA7G5C,mCAkHI,OAAOF,KAAKi/B,cAlHhB,aAmHqB/+B,GACjBF,KAAKi/B,aAAe/+B,MApHxB,KCPaM,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAIq+B,GAGb,OAFAr+B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EACH1G,GAIIg/B,GAAoB,SAACj/B,GAChC,GAAIA,EAAE0+B,QAA8B,IAApB1+B,EAAE0+B,OAAOp4B,OACvB,OAAOtG,EAAE0+B,OAAO,ICZPzjB,GAAQ,QACRiD,GAAS,SCQTghB,GAAb,WACE,aAAe,IAAD,gCAoDdzvB,OAAS,WACP,EAAK9G,KAAKytB,UAAU/qB,MAAMrE,OAAO,EAAK0I,MAAO,GAC7C,EAAK/G,KAAK0C,MAAMrE,OAAO,EAAK0I,MAAO,IAtDvB,KAyDdyvB,eAAYjgC,EAzDE,KAmEdkgC,gBAAkB,WAChB,OAAQ,EAAKC,WACX,KAAKC,GACH,EAAKzjB,SAASC,YAAc,EAAKhZ,MACjC,EAAKA,MAAQ,EAAK+Y,SAASW,aAC3B,EAAK6iB,UAAYC,GACjB,MACF,KAAKA,GACC,EAAKx8B,MACP,EAAKy8B,QAAQ9+B,QAAU,EAAKqC,OAEvB,EAAKy8B,QAAQ9+B,UAChB,EAAK8+B,QAAQ9+B,QAAU,SAEzB,EAAKqC,MAAO,EAAKy8B,QAAQ9+B,SAG3B,EAAK4+B,UAAYC,KApFT,KAyFdE,oBAAsB,kBAAM,EAAKH,YAAcC,IAxF7ChgC,YAAeC,KAAM,CACnB4/B,UAAW3/B,MAHjB,+CAYI,OAHKD,KAAKkJ,MACRlJ,KAAKkJ,IAAMC,MAENnJ,KAAKkJ,MAZhB,4BAgBI,OAAOlJ,KAAKoJ,KAAK0C,MAAMxC,QAAQtJ,QAhBnC,6BAoBI,OAAOA,KAAKoJ,KAAKytB,UAAU/qB,QApB/B,4BAwBI,OAAO9L,KAAKiO,OAAOjO,KAAKmQ,OAAO5M,OAxBnC,aA0BYrD,GACRF,KAAKiO,OAAOjO,KAAKmQ,OAAO5M,MAAQrD,IA3BpC,8BA+BiB,IAAD,OACPF,KAAKkgC,WACElgC,KAAKkgC,QAAU7I,EAAar3B,KAAKuD,QACvCpD,aAAe,SAACD,GAClB,EAAKqD,MAAQrD,IAGjB,OAAOF,KAAKkgC,UAtChB,+BA0CkB,IAAD,OACb,IAAKlgC,KAAKw1B,SAAU,CAClB,IACIrvB,EAAMnG,KAAKw1B,SAAWzN,GADf,CAAC,WAAO,UAAQ,WAAO,UACa/nB,KAAKuD,OACpD4C,EAAIuE,YAAc,MAClBvE,EAAIyU,UAAY,SAAC1a,GAAD,OAAO,EAAKigC,WAAajgC,GACzCiG,EAAIsU,sBAAwB,SAACva,GAAD,OAAO,EAAKqD,MAAQrD,GAElD,OAAOF,KAAKw1B,WAlDhB,gCA+DI,OAHKx1B,KAAK4/B,YACR5/B,KAAK4/B,UAAY5/B,KAAK62B,UAAUiJ,WAE3B9/B,KAAK4/B,WA/DhB,aAgEkB1/B,GACdF,KAAK4/B,UAAY5/B,KAAK62B,UAAUiJ,UAAY5/B,IAjEhD,mCA6FI,OAAQF,KAAK8/B,WACX,KAAKC,GACH,OAAO,cAAC,GAAD,CAAc5+B,MAAOnB,KAAKggC,QAC/Bx1B,UAAU,6BACd,KAAKu1B,GACH,OAAO,cAAC,GAAD,CAAY5+B,MAAOnB,KAAKsc,SAC7B9R,UAAU,iCAnGpB,iCA4GI,YAHwB7K,IAApBK,KAAKogC,aACPpgC,KAAKogC,WAAapgC,KAAKsc,SAASpB,MAE3Blb,KAAKogC,YA5GhB,aA8GiBlgC,GACbF,KAAKogC,WAAalgC,EAClBF,KAAKqgC,aAAan/B,QAAUgK,GAAqBlL,QAhHrD,mCAwHI,OAHKA,KAAKsgC,eACRtgC,KAAKsgC,aAAejJ,EAAansB,GAAqBlL,QAEjDA,KAAKsgC,iBAxHhB,KCPa9/B,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAIi/B,GAGb,OAFAj/B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EACH1G,GAGI6/B,GAAkB,SAAC9/B,GAC5B,OAAOA,EAAE0/B,WAAa,OAAS,SCLtBK,GAAb,WACE,aAAe,IAAD,gCAmCdtwB,OAAS,WACP,EAAK2mB,UAAU3mB,SACf,EAAK9G,KAAKmL,QAAQ9M,OAAO,EAAK0I,MAAO,IArCzB,KAwCduF,WAAQ/V,EAxCM,KAgDd8gC,QAAU,WACR,IAAI10B,EAAO20B,GAAc,EAAK7J,UAAU4J,UAAU,GAElD,OADA,EAAK30B,MAAMhE,KAAKiE,GACTA,GAlDPhM,YAAeC,KAAM,CACnB0V,MAAQzV,MAHd,+CAQI,OAAOD,KAAK62B,UAAUpmB,KAR1B,4BAYI,OAAOzQ,KAAK62B,UAAUriB,OAZ1B,aAactU,GACVF,KAAK62B,UAAUriB,MAAQtU,IAd3B,uCAkBI,OAAOF,KAAKoJ,KAAKu3B,yBAlBrB,oCAsBsB,IAAD,OACjB,IAAK3gC,KAAK+mB,cAAc,CACtB,IAAI5gB,EAAMnG,KAAK+mB,cACbgB,GAAe/nB,KAAK4gC,iBAAkB5gC,KAAKwU,OAC7CrO,EAAIuE,YAAc,iCAClBvE,EAAIsU,sBAAwB,SAACva,GAAD,OAAO,EAAKsU,MAAQtU,GAElD,OAAOF,KAAK+mB,gBA7BhB,4BAiCI,OAAO/mB,KAAKoJ,KAAKmL,QAAQjL,QAAQtJ,QAjCrC,4BA8CI,OAHKA,KAAK0V,QACR1V,KAAK0V,MAAQxK,GAAclL,OAEtBA,KAAK0V,UA9ChB,KCFalV,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAI8/B,GAGb,OAFA9/B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EACH1G,GAGIo5B,GAAW,SAACr5B,GACvB,OAAOA,EAAEo2B,UAAU/qB,MAAM6J,KAAI,SAAA1O,GAAC,OAAIy5B,GAAcz5B,EAAGxG,OCFxCogC,GAAb,WACE,aAAe,IAAD,gCAgBdlhB,UAAOhgB,EAhBO,KA2BdE,MAAQihC,GA3BM,KA6BdC,YAAc,WACZ,OAAQ,EAAKlhC,OACX,KAAKihC,GACH,EAAKjhC,MAAQihC,GACb,MACF,KAAKA,GACH,EAAK1L,OAAOl0B,QAAU,EAAKgE,KAC3B,EAAKrF,MAAQihC,KApCL,KAqDdE,OAAS,WACP,EAAKnhC,MAAQihC,GACb,EAAK57B,KAAO,EAAKkwB,OAAOl0B,SAvDZ,KA0Dd+/B,WAAa,WACX,EAAKphC,MAAQihC,IA3DD,KA4Gd5wB,OAAS,WACP,EAAK2mB,UAAU3mB,SAEf,IAAI5I,EAAQ,EAAK6I,MACb+wB,EAAS,EAAKC,OAEd/5B,EAAO,EAAKgC,KACZ9C,EAAOc,EAAK+M,UAChB7N,EAAKmB,OAAOH,EAAO,GACnBF,EAAKg6B,QAAQ35B,OAAOH,EAAO,GAEP,IAAhBhB,EAAKS,SACPK,EAAKi6B,sBAAuB,EAC5Bj6B,EAAKk6B,gBAAkBJ,EAAS56B,EAAKgB,EAAQ,GAAKhB,EAAKgB,IAAQmJ,KAzHrD,KAuId2d,iBAAczuB,EAvIA,KA+Id4hC,cAAgB,WACd,IAAIx1B,EAAOy1B,GAAmB,EAAK3K,UAAU0K,gBAAiB,GAE9D,OADA,EAAK7sB,YAAY5M,KAAKiE,GACfA,GAlJK,KA0JduI,aAAU3U,EA1JI,KAkKd8hC,UAAY,WACV,IAAI11B,EAAOmN,GAAe,EAAK2d,UAAU4K,YAAa,GAEtD,OADA,EAAKltB,QAAQzM,KAAKiE,GACXA,GApKPhM,YAAeC,KAAM,CACnB2f,KAAM1f,IACNJ,MAAOI,IACPmuB,YAAanuB,IACbqU,QAASrU,MANf,+CAUY,IAAD,EACP,iBAAOD,KAAK62B,iBAAZ,aAAO,EAAgBpmB,IAX3B,aAaSvQ,GACLF,KAAKkJ,IAAMhJ,IAdf,2BAsBI,OAHKF,KAAK2f,OACR3f,KAAK2f,KAAO3f,KAAK62B,UAAU3xB,MAEtBlF,KAAK2f,MAtBhB,aAwBWzf,GACPF,KAAK2f,KAAO3f,KAAK62B,UAAU3xB,KAAOhF,IAzBtC,sCA2CI,OAAOF,KAAKH,QAAUihC,GAAW,6BAA+B,KA3CpE,6BAmDI,OAHK9gC,KAAKg0B,SACRh0B,KAAKg0B,OAASqD,EAAar3B,KAAKkF,OAE3BlF,KAAKg0B,SAnDhB,uCAgEI,OAAO,gCACL,cAAC,IAAD,CAAQxoB,KAAK,UAAUnH,KAAK,QAC1BoH,QAASzL,KAAKghC,OADhB,gBAEA,cAAC,IAAD,CAAQx1B,KAAK,SAASnH,KAAK,QACzBoH,QAASzL,KAAKihC,WADhB,yBAnEN,mCA0EI,OADU,cAAC,GAAD,CAAcz2B,UAAU,qBAAqBrJ,MAAOnB,KAAKo1B,WAzEvE,mCA8EI,IAAIsM,EAAU,cAAC,IAAD,CAAQl2B,KAAK,UAAUnH,KAAK,QAAQoH,QAASzL,KAAKkQ,OAC9D1F,UAAU,uBADE,eAGd,OAAQxK,KAAKH,OACX,KAAKihC,GACH,OAAO,qCACL,+BAAO9gC,KAAKkF,OACZ,cAAC,IAAD,CAAQsG,KAAK,UAAUnH,KAAK,QAAQmG,UAAU,qBAC5CiB,QAASzL,KAAK+gC,YADhB,eAECW,KAEL,KAAKZ,GACH,OAAO,qCACL,cAAC,KAAD,CAASphC,QAASM,KAAK2hC,iBAAkBhZ,QAAQ,QAAjD,SACE,+BACG3oB,KAAK4hC,iBAGTF,QAhGX,4BAsGI,OAAO1hC,KAAKoJ,KAAK+K,UAAU7K,QAAQtJ,QAtGvC,6BA0GI,OAAOA,KAAKoJ,KAAK+K,UAAUpN,OAAS,IAAM/G,KAAKmQ,QA1GnD,gCAgII,OAAOnQ,KAAKoJ,KAAK8tB,YAhIrB,uCAqII,OAAOl3B,KAAKoJ,KAAK81B,mBArIrB,kCA6II,OAHKl/B,KAAKouB,cACRpuB,KAAKouB,YAAcljB,GAAoBlL,OAElCA,KAAKouB,cA7IhB,6CAwJI,OAAOpuB,KAAKoJ,KAAKu3B,yBAxJrB,8BAgKI,OAHK3gC,KAAKsU,UACRtU,KAAKsU,QAAUpJ,GAAgBlL,OAE1BA,KAAKsU,YAhKhB,KCLa9T,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAImgC,GAGb,OAFAngC,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EACH1G,GAGImhC,GAAiB,SAACphC,GAC7B,OAAOA,EAAEo2B,UAAUniB,YAAYiB,KAAI,SAAA1O,GAAC,OAAIu6B,GAAmBv6B,EAAGxG,OAGnDqhC,GAAa,SAACrhC,GACzB,OAAOA,EAAEo2B,UAAUtiB,QAAQoB,KAAI,SAAA1O,GAAC,OAAIiS,GAAejS,EAAGxG,OCV3CshC,GAAb,WACE,aAAe,IAAD,gCAwBdC,eAAYriC,EAxBE,KAgCdsiC,YAAc,WACZ,IAAIl2B,EAAOm2B,GAAiB,EAAKrL,UAAUoL,cAAe,GAC1D,EAAK9tB,UAAUrM,KAAKiE,GAEpB,IAAI7E,EAAI,EAAKi7B,oBAAsB,EAAI,EAKvC,OAJA,EAAKf,QAAQ35B,OAAO,EAAK25B,QAAQr6B,OAASG,EAAG,EAAG6E,GAEhD,EAAKu1B,eAAiBv1B,EAAK0E,GAEpB1E,GAzCK,KAyDdo2B,qBAAsB,EAzDR,KA2DdC,aAAUziC,EA3DI,KAuEd0iC,oBAAiB1iC,EAvEH,KAiFd0hC,sBAAuB,EAjFT,KAmFdiB,cAAgB,SAACpiC,GACX,EAAKmhC,qBACP,EAAKA,sBAAuB,EAE9B,EAAKC,eAAiBphC,GAtFtBH,YAAeC,KAAM,CACnBgiC,UAAW/hC,IACXoiC,eAAgBpiC,IAChBmiC,QAASniC,MALf,sDAaI,OAAOD,KAAKoJ,OAbhB,uCAiBI,OAAOpJ,KAAKoJ,KAAK81B,mBAjBrB,6CAqBI,OAAOl/B,KAAKoJ,KAAKu3B,yBArBrB,gCA8BI,OAHK3gC,KAAKgiC,YACRhiC,KAAKgiC,UAAY92B,GAAkBlL,OAE9BA,KAAKgiC,YA9BhB,oCAuDI,OARKhiC,KAAKuiC,gBACRviC,KAAKuiC,cAAgB,CACnB9xB,GAAI,MACJ+xB,aAAc,cAAC,IAAD,CAAQh4B,UAAU,iBAC9BgB,KAAK,OAAOnH,KAAK,QACjBoH,QAASzL,KAAKiiC,YAFF,iBAKXjiC,KAAKuiC,gBAvDhB,8BA8DI,IAAKviC,KAAKoiC,QAAS,CACjB,IAAIj8B,EAAG,YAAOnG,KAAKmU,WACfnU,KAAKmiC,qBACPh8B,EAAI2B,KAAK9H,KAAKyiC,eAEhBziC,KAAKoiC,QAAUj8B,EAEjB,OAAOnG,KAAKoiC,UArEhB,qCA6EI,OAHKpiC,KAAKqiC,iBACRriC,KAAKqiC,eAAiBriC,KAAKmU,UAAU,GAAG1D,IAEnCzQ,KAAKqiC,gBA7EhB,aA8EuBniC,GACnBF,KAAKqiC,eAAiBniC,MA/E1B,KCUawiC,GAAe,SAACjiC,GAC3B,OAAOA,EAAEo2B,UAAU1iB,UAAUwB,KAAI,SAAA1O,GAAC,OAAIi7B,GAAiBj7B,EAAGxG,OCd/CkiC,GAAb,4MASEC,KAAO,WACL,EAAK/L,UAAU+L,QAVnB,+DAEI,OAAO5iC,KAAK62B,UAAUqI,mBAF1B,6CAMI,OAAOl/B,KAAK62B,UAAU8J,2BAN1B,GAA2CzJ,ICC9B12B,GAAM,SAACC,EAAG2R,GACrB,GAAK3R,EAAL,CAEA,IAAIC,EAAK,IAAIiiC,GAwCb,OAtCAjiC,EAAGm2B,UAAYp2B,EACfC,EAAG0C,QAAUgP,EAab3R,EAAEgyB,cAAgB,SAACvyB,GACbO,EAAE2F,OACJ1F,EAAGwE,KAAOhF,IAIdO,EAAEkyB,qBAAuB,SAACzyB,GACpBO,EAAE2F,OACJ1F,EAAGqyB,YAAc7yB,IAIrBO,EAAEmyB,cAAgB,SAAC1yB,GACbO,EAAE2F,OACJ1F,EAAGmT,KAAO3T,EACVQ,EAAG64B,OAAS74B,EAAGy2B,cAInBz2B,EAAG02B,YAAc,WAEf,OFpCe,SAAC32B,EAAG2G,GACrB,IAAI1G,EAAK,IAAIqhC,GAIb,OAHArhC,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEH1G,EE+BE84B,CADI/4B,EAAEoT,KACenT,IAGvBA,IC3CIF,GAAM,SAACC,EAAG2G,GACrB,GAAK3G,EAAL,CACA,IAAIC,EAAK,IAAI09B,GAKb,OAHA19B,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEH1G,IAGImiC,GAAkB,SAACpiC,GAE9B,OlBZiB,SAACA,GAClB,IAAIC,EAAK,IAAIm9B,GAYb,OAXAn9B,EAAGm2B,UAAYp2B,EAEfA,EAAE+1B,qBAAqB1uB,MAAK,SAAC5H,GACjBQ,EAAGoL,MACbpL,EAAGoiC,cAAe,KAGpBriC,EAAEi2B,MAAQ,SAACx2B,GACTQ,EAAGgH,IAAIqyB,GAAe75B,EAAGQ,KAGpBA,EkBDAqiC,CADStiC,EAAEo2B,UAAU7gB,aAIjBgtB,GAA8B,SAACC,EAAO7wB,GACjD,OAAO8wB,GAAqBD,EAAO7wB,IAGxB+wB,GAAyB,SAAC1iC,GACrC,IAAI2R,EAAU3R,EAAEo2B,UACZnjB,EAAMtB,EAAQ2B,oBAClB,GAAIL,EACF,OAAOsvB,GAA4BtvB,EAAKjT,GAExC2R,EAAQ6B,+BAA+BnM,MAAK,kBAC1CrH,EAAEsT,oBAAsBivB,GAA4B5wB,EAAQ2B,oBAAqBtT,OAI1E2iC,GAAiC,SAAC3iC,GAC7C,IAAI2R,EAAU3R,EAAEo2B,UACZnjB,EAAMtB,EAAQixB,4BAClB,GAAI3vB,EACF,OAAOsvB,GAA4BtvB,EAAKjT,GAExC2R,EAAQ6B,+BAA+BnM,MAAK,WAC1CrH,EAAE4iC,4BAA8BL,GAA4B5wB,EAAQixB,4BAA6B5iC,OCtC1F6iC,GAAb,WACE,aAAe,yBAMf5tB,WAAO/V,EALLI,YAAeC,KAAM,CACnB0V,MAAQzV,MAHd,kDAYI,OAHKD,KAAK0V,QACR1V,KAAK0V,MAAQxK,GAAclL,OAEtBA,KAAK0V,OAZhB,aAcYxV,GACRF,KAAK0V,MAAQxV,EACbF,KAAK62B,UAAU/qB,MAAQ5L,EAAEyV,KAAI,SAAA1O,GAAC,OAAIA,EAAE4vB,eAhBxC,iCAmBoB32B,GACZF,KAAK82B,gBACP92B,KAAK82B,eAAe52B,OArB1B,KCYa45B,GAAW,SAACvD,GACvB,IAAI7gB,EAAQ6gB,EAAOM,UAAU/qB,MAC7B,GAAK4J,EACL,OAAOA,EAAMC,KAAI,SAAA1O,GAAC,OAAI8yB,GAAe9yB,EAAGsvB,OCTrBgN,G,WACnB,aAAe,IAAD,gCA8FdC,qBAAsB,EA9FR,KAyJdC,cAAe,EAzJD,KA2JdC,iBAAc/jC,EA3JA,KA2LdgkC,iCAA8BhkC,EA3LhB,KA0NdikC,eAAgB,EA1NF,KAwOdC,aAAe,EAxOD,KAkPdC,YAAc,WACZ,EAAKF,eAAgB,EACrB,EAAKG,aAAe,EACpB,EAAKlN,UAAUiN,eApPf/jC,YAAeC,KAAM,CACnBwjC,oBAAqBvjC,IACrBwjC,aAAcxjC,IACdyjC,YAAazjC,IACb2jC,cAAe3jC,M,qDASjB,OAHKD,KAAKgkC,WACRhkC,KAAKgkC,SAAWhkC,KAAK62B,UAAUoN,UAE1BjkC,KAAKgkC,U,aAED9jC,GACXF,KAAKgkC,SAAW9jC,EAChBF,KAAK62B,UAAUoN,SAAW/jC,I,iCAQ1B,OAHKF,KAAKkkC,aACRlkC,KAAKkkC,WAAah5B,GAAmBlL,OAEhCA,KAAKkkC,Y,aAEChkC,GACbF,KAAKkkC,WAAahkC,EAClBF,KAAKikC,SAAW/jC,EAAEyV,KAAI,SAAA1O,GAAC,OAAIA,EAAE4vB,e,2CAQ7B,OAHK72B,KAAKmkC,uBACRnkC,KAAKmkC,qBAAuBj5B,GAA6BlL,OAEpDA,KAAKmkC,sB,aAEWjkC,GACvBF,KAAKmkC,qBAAuBjkC,EAE5BF,KAAKkkC,WAAah5B,GAAmBlL,MAErC,IAAIw1B,EAAWx1B,KAAKokC,gBACpB5O,EAAS1pB,MAAQ5L,EACjBs1B,EAAS1b,aAAe9Z,KAAKkkC,a,wCAQ7B,YAH+BvkC,IAA3BK,KAAKqkC,oBACPrkC,KAAKqkC,kBAAoBrkC,KAAKokC,gBAAgBlpB,MAEzClb,KAAKqkC,mB,aAEQnkC,GACpBF,KAAKqkC,kBAAoBnkC,EACzBF,KAAKskC,oBAAoBpjC,QAAUgK,GAAiClL,Q,0CAQpE,OAHKA,KAAKukC,sBACRvkC,KAAKukC,oBAAsBlN,EAAansB,GAAiClL,QAEpEA,KAAKukC,sB,sCAIS,IAAD,OACpB,IAAKvkC,KAAKwkC,gBAAiB,CACzB,IAAIl+B,EAAOtG,KAAKykC,qBAAuBzkC,KAAKykC,qBAAuB,GAC/Dt+B,EAAMnG,KAAKwkC,gBAAkB/L,GAAsBnyB,EAAMtG,KAAK0kC,YAClEv+B,EAAIuE,YAAc,0BAClBvE,EAAImV,YAAc,SAACvP,GAAD,OAAU,cAAC,KAAD,CAAS4c,QAAS,EAAK2b,oBAAoBpjC,QACrEyjC,UAAU,UACVjlC,QACE,mBAAGsB,OAAO,SAAS4jC,IAAI,aAErBC,KAAM94B,EAAKymB,IAFb,0BAHwB,SASzBzmB,EAAK4O,kBAGRxU,EAAIsU,sBAAwB,SAACva,GAAD,OAAO,EAAKwkC,WAAaxkC,GACrDiG,EAAIyU,UAAY,SAAC1a,GAAD,OAAO,EAAK4kC,kBAAoB5kC,GAElD,OAAOF,KAAKwkC,kB,6BAUZ,OAHKxkC,KAAKsS,SACRtS,KAAKsS,OAAStS,KAAK62B,UAAUxgB,QAExBrW,KAAKsS,Q,aAEHpS,GACTF,KAAKsS,OAASpS,EACdF,KAAK62B,UAAUxgB,OAASnW,I,+BAQxB,OAHKF,KAAK+kC,WACR/kC,KAAK+kC,SAAW75B,GAAiBlL,OAE5BA,KAAK+kC,U,aAED7kC,GACXF,KAAK+kC,SAAW7kC,EAChBF,KAAKqW,OAASnW,EAAEyV,KAAI,SAAA1O,GAAC,OAAIA,EAAE4vB,e,oCAQ3B,OAHK72B,KAAKglC,gBACRhlC,KAAKglC,cAAgBhlC,KAAK62B,UAAUoO,eAE/BjlC,KAAKglC,gB,yCAKZ,OAAOhlC,KAAKklC,oB,aAEShlC,GACrBF,KAAKklC,mBAAqBhlC,EAE1BF,KAAK+kC,SAAW75B,GAAiBlL,MAEjC,IAAIw1B,EAAWx1B,KAAKmlC,cACpB3P,EAAS1pB,MAAQ5L,EACjBs1B,EAAS1b,aAAe9Z,KAAK+kC,W,oCAIV,IAAD,OAClB,IAAK/kC,KAAKolC,cAAe,CACvB,IAAI9+B,EAAOtG,KAAKqlC,mBAAqBrlC,KAAKqlC,mBAAqB,GAC3Dl/B,EAAMnG,KAAKolC,cAAgB3M,GAAsBnyB,EAAMtG,KAAKslC,UAChEn/B,EAAIuE,YAAc,oBAClBvE,EAAIsU,sBAAwB,SAACva,GAAD,OAAO,EAAKolC,SAAWplC,GAErD,OAAOF,KAAKolC,gB,kCAUZ,OAHKplC,KAAK0jC,cACR1jC,KAAK0jC,YAAc1jC,KAAK62B,UAAU0O,aAE7BvlC,KAAK0jC,a,aAEExjC,GACdF,KAAK0jC,YAAcxjC,EACnBF,KAAK62B,UAAU0O,YAAcrlC,I,0CAIJ,IAAD,OACnBF,KAAKwlC,uBACExlC,KAAKwlC,oBACXxP,GAAmB,4BAAuBh2B,KAAKulC,cAE/C3Q,cAAgB,SAAC10B,GACnB,EAAKqlC,YAAcrlC,IAGvB,OAAOF,KAAKwlC,sB,uCAIZ,OAAOxlC,KAAK62B,UAAUnF,kB,aAEHxxB,GACnBF,KAAK62B,UAAUnF,iBAAmBxxB,I,kDAK7BF,KAAK2jC,8BACR3jC,KAAK2jC,4BACHz4B,GAAoClL,Q,aAGVE,GAC9BF,KAAK2jC,4BAA8BzjC,EAEpBF,KAAKylC,yBACX35B,MAAQ5L,I,+CAIa,IAAD,OAC7B,IAAKF,KAAK0lC,yBAA0B,CAClC,IAAIp/B,EAAOtG,KAAK2lC,4BACd3lC,KAAK2lC,4BAA8B,GACjCx/B,EAAMnG,KAAK0lC,yBACb/P,GAAiBrvB,GAEnBH,EAAImV,YAAc,SAACvP,GAAD,OAAUA,EAAK4O,gBAEjCxU,EAAIyW,UAAW,EACfzW,EAAIuE,YAAc,kDAClBvE,EAAIsU,sBAAwB,SAACva,GAAD,OAAO,EAAKwxB,iBAAmBxxB,GAE7D,OAAOF,KAAK0lC,2B,qCAMZ,MAAM,qBAAN,QAAiD,IAApB1lC,KAAK+jC,cAAoB6B,QAAQ,GAA9D,Q,uCAQA,OAHK5lC,KAAK6lC,mBACR7lC,KAAK6lC,iBAAmBxO,EAAar3B,KAAK8lC,iBAErC9lC,KAAK6lC,mB,mCAKZ,OAAO7lC,KAAK6jC,c,aAEG3jC,GACfF,KAAK6jC,aAAe3jC,EACpBF,KAAK+lC,iBAAiB7kC,QAAUlB,KAAK8lC,mB,KCnP5B3P,GAAW,WACtB,OAAO7B,GAAShmB,UAOL9N,GAAM,SAACC,GAA+B,IAA5BulC,IAA2B,yDAC5CtlC,EAAK,IAAI6iC,GACb7iC,EAAGm2B,UAAYp2B,EAEfA,EAAEwlC,SAAWvlC,EAETslC,IACF7P,KAAWmN,eAAexM,eAAiB,SAAC52B,GAC1CQ,EAAG+jC,qBAAuByB,GAAwBxlC,KAItDD,EAAE+1B,qBAAqB1uB,MAAK,WAC1B3F,IAAQF,QAAQ,iCAGlB,IAAIkkC,EAAY1lC,EAAEwkC,cAAcmB,UAQhC,OAPAD,EAAUE,yBAAyBv+B,MAAK,WACtCpH,EAAGkjC,eAAgB,KAErBuC,EAAUG,wBAAwBx+B,MAAK,SAAC5H,GACtCQ,EAAGqjC,aAAe7jC,KAGbQ,GAGIwlC,GAA0B,SAACzlC,GACtC,OAAO01B,KAAWmN,eAAex3B,OAGtBy6B,GAAgB,SAAC9lC,GAC5B,IAAIgvB,EAAchvB,EAAEgkC,qBACpB,IAAKhV,EAAa,MAAO,GAEzB,IAAInpB,EAAO,GAUX,OARe7F,EAAEwjC,SACRj9B,SAAQ,SAAAC,GACf,IAAIK,EAAQmoB,EAAYloB,WAAU,SAAAgQ,GAAC,OAAIA,EAAEsf,YAAc5vB,MACxC,IAAXK,GACFhB,EAAKwB,KAAK2nB,EAAYnoB,OAInBhB,GAGIkgC,GAAc,SAAC/lC,GAC1B,IAAIgvB,EAAchvB,EAAE4kC,mBACpB,IAAK5V,EAAa,MAAO,GAEzB,IAAInpB,EAAO,GAUX,OARa7F,EAAE4V,OACRrP,SAAQ,SAAAC,GACb,IAAIK,EAAQmoB,EAAYloB,WAAU,SAAAgQ,GAAC,OAAIA,EAAEsf,YAAc5vB,MACxC,IAAXK,GACFhB,EAAKwB,KAAK2nB,EAAYnoB,OAInBhB,GAGImgC,GAAiC,SAAChmC,GAC7C,IAAI2G,EArEGoH,GAAOF,SAqEMo4B,sBAChBhxB,EAAQtO,EAAK0E,MAMjB,OALK4J,GACHtO,EAAKovB,qBAAqB1uB,MAAK,WAC7BrH,EAAEklC,4BAA8Bv+B,EAAK0E,SAGlC4J,GAIIixB,GAA8B,SAAClmC,GAC1C,OAAOA,EAAEqkC,kBAAoB,OAAS,S,mBC3F3Bh6B,GAAW,UACXC,GAAO,OCCC67B,G,+FAMjB,OAHK5mC,KAAKiL,SACRjL,KAAKiL,OAASC,GAAelL,OAExBA,KAAKiL,Q,aAEH/K,GACTF,KAAKiL,OAAS/K,M,KCLLM,GAAM,SAACS,EAAOgK,GACzB,IAAIvK,EAAK,IAAIkmC,GAGb,OAFAlmC,EAAGb,MAAQoB,EACXP,EAAGsL,OAASf,EACLvK,GAGIyK,GAAY,SAAC1K,GACxB,OAAQA,EAAEZ,OACR,KAAKuL,GACH,OAAO,SAAC6hB,EAAKlhB,EAAM86B,EAAW3hB,EAAMld,GAClC,OAAOkd,EAAK8a,QAAQ9+B,SAExB,KAAKkK,GACH,OAAO,SAACrK,EAAOgL,EAAM86B,EAAW3hB,EAAMld,GACpC,IAAK6+B,EAAW,OAAO9lC,EAEvB,IAAI+lC,EAAU5hB,EAAK8a,QAEfj5B,EAAS8/B,EAAU9/B,OACnBZ,EAAM4F,EAOV,OANA86B,EAAUl4B,QAAO,SAAC1H,EAAGC,GAAJ,OAAUA,EAAIH,EAAS,KACrCC,SAAQ,SAACC,GAAD,OAAOd,EAAMA,EAAIc,MAE5B6/B,EAAQ3mC,aAAe,SAACD,GACtBiG,EAAI0gC,EAAU9/B,EAAS,IAAM7G,GAExB,cAAC,EAAD,CAAWiB,MAAO2lC,KAE7B,QACE,SClCet6B,G,iDACnBV,MAAQ,G,KAERX,UAAY,SAAClK,GACX,IAAIqF,EAAO,EAAKwF,MACZxE,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEpH,QAAUoB,KAC5C,IAAe,IAAXqG,EAAa,CACf,IAAIyE,EAAOE,GAAehL,GAE1B,OADAqF,EAAKwB,KAAKiE,GACHA,EAET,OAAOzF,EAAKgB,KCXKy/B,G,+FAMjB,OAHK/mC,KAAKiL,SACRjL,KAAKiL,OAASC,GAAelL,OAExBA,KAAKiL,Q,aAEH/K,GACTF,KAAKiL,OAAS/K,M,KCELiL,GAAY,SAAC1K,GACxB,OAAQA,EAAEZ,OACR,KAAKuL,GACH,OAAO,SAACgF,EAAO42B,EAAQruB,GACrB,OAAO,mCACL,sBAAKnO,UAAU,yBAAf,UACG4F,EACAuI,EAAMsuB,iBAAoBD,EAAOE,mBAChC,sBAAK18B,UAAU,sBAAf,UACGmO,EAAMwuB,cACL,cAAC,IAAD,CAAQ37B,KAAK,UAAUnH,KAAK,QAC1BjE,MAAO,CAAEoe,gBAAiB,UAAWE,OAAQ,QAC7CjT,QAASu7B,EAAOt7B,KAFlB,eAEqC,GACtCiN,EAAMyuB,gBAAkB,cAAC,IAAD,CAAQ57B,KAAK,UAAU0U,QAAM,EAAC7b,KAAK,QAC1DoH,QAASu7B,EAAO92B,OADO,eACc,MAEvC,SAIZ,KAAK9E,GACH,OAAO,SAACgF,EAAO42B,EAAQruB,GACrB,OAAO,mCACL,sBAAKnO,UAAU,yBAAf,UACGw8B,EAAOpF,aACR,cAAC,IAAD,CAAQp2B,KAAK,UAAUnH,KAAK,QAC1BoH,QAASu7B,EAAOhJ,GADlB,sBAKR,QACE,SC1CeqJ,G,iDACnBv7B,MAAQ,G,KAERX,UAAY,SAAClK,GACX,IAAIqF,EAAO,EAAKwF,MACZxE,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEpH,QAAUoB,KAC5C,IAAe,IAAXqG,EAAa,CACf,IAAIyE,EDHS,SAAC9K,EAAOgK,GACzB,IAAIvK,EAAK,IAAIqmC,GAGb,OAFArmC,EAAGb,MAAQoB,EACXP,EAAGsL,OAASf,EACLvK,ECDQuL,CAAehL,GAE1B,OADAqF,EAAKwB,KAAKiE,GACHA,EAET,OAAOzF,EAAKgB,KCbHqX,GAAS,SACTjD,GAAQ,QCORlb,GAAM,SAAC4P,EAAOy2B,EAAWS,EAAS3uB,GAC7C,IAAIjY,EAAK,IAAI6mC,GACb7mC,EAAGuP,MAAQG,EAEP+c,MAAMC,QAAQyZ,GAChBnmC,EAAG8mC,UAAYX,EAEfnmC,EAAG8mC,UAAY,CAACX,GAGlBnmC,EAAG8G,IAAM2B,KACTzI,EAAG+W,MAAQkB,EAEX,IAAIvR,EAAO1G,EAAG8L,YAOd,OANI86B,GACFA,EAAQtgC,SAAQ,SAAAC,GACdG,EAAK+D,UAAUlE,EAAEpH,OAAOmM,OAAS/E,EAAE+E,UAIhCtL,GAGI+mC,GAAa,SAACr3B,EAAOuI,GAChC,IAAIjY,EAAK,IAAI6mC,GAYb,OAXA7mC,EAAGuP,MAAQG,EACX1P,EAAG8mC,UAAY,CAACp3B,GAChB1P,EAAG8G,IAAM2B,KACTzI,EAAG+W,MAAQkB,EAGXjY,EAAGgnC,mBAAmB5/B,MAAK,WACzBpH,EAAG8mC,UAAY,CAAC9mC,EAAGuP,OACnB0I,EAAMgvB,YAGDjnC,GAGIknC,GAAkB,SAACjvB,GAC9B,IAEI2uB,EAAU,CACZr7B,GAAeb,IAAa,SAAC6hB,EAAKlhB,EAAM86B,EAAW3hB,EAAMld,GACvD,IAAI6/B,EAAW,GACf,GAAIlvB,EAAMmvB,eAAiBnvB,EAAMovB,YAAa,CAE5CF,EAAW,cAAC,IAAD,CAAQr8B,KAAK,UAAUnH,KAAK,QACrCjE,MAAO,CAAEoe,gBAAiB,UAAWE,OAAQ,QAC7CjT,QAHS,kBAAMzD,EAAI0D,QACV,kBAKb,IAAIg2B,EAAU,GACd,GAAI/oB,EAAMmvB,eAAiBnvB,EAAMqvB,cAAe,CAG9CtG,EAAU,cAAC,IAAD,CAAQl2B,KAAK,UAAU0U,QAAM,EAAC7b,KAAK,QAC3CoH,QAHQ,kBAAMkN,EAAMsvB,WAAWl8B,EAAM/D,IAE7B,eAGZ,OAAO,qCACJ6/B,EAAUnG,QAGfz1B,GAAeb,IAAS,SAAC6hB,EAAKlhB,EAAM86B,EAAW3hB,EAAMld,GAEnD,OAAO,cAAC,IAAD,CAAQwD,KAAK,UAAUnH,KAAK,QACjCoH,QAFO,kBAAMzD,EAAIg2B,MACZ,oBAKP/1B,EAAMzH,GA9BEb,UA8BS,KAAM2nC,EAAS3uB,GAmBpC,OAhBA1Q,EAAIigC,UAAW,EAEfjgC,EAAIo/B,iBAAiBl8B,UAAUC,IAAaY,OAAS,kBACnD,sBAAK5L,MAAO,CAAE+nC,QAAS,QAAvB,UACE,cAAC,IAAD,CAAQ38B,KAAK,UAAUnH,KAAK,QAC1BoH,QAASkN,EAAMyvB,UADjB,mBAICzvB,EAAMmvB,eAAiBnvB,EAAM0vB,WAC5B,cAAC,IAAD,CAAQ78B,KAAK,UAAUnH,KAAK,QAC1BoH,QAASkN,EAAM8nB,QADjB,mBAIE,OAGDx4B,GCjFYs/B,G,WACnB,aAAe,IAAD,gCAmBde,iBAAmBl9B,GAnBL,KAoBdmB,YAAcnB,GApBA,KAsBdgF,WAAQzQ,EAtBM,KAgCd+nC,mBAAqB,GAhCP,KAqDdh8B,KAAO,WACL,IAAIiN,EAAQ,EAAKlB,MACbkB,EAAMsuB,iBAAmBtuB,EAAMwuB,gBACjC,EAAKmB,iBAAmBl9B,KAxDd,KA4Dd4yB,GAAK,WACH,EAAKsK,iBAAmBl9B,GACxB,EAAKs8B,mBAAmB1gC,SAAQ,SAAAC,GAAC,OAAIA,EAAE,OA9D3B,KAiEdiJ,OAAS,WACP,IAAIyI,EAAQ,EAAKlB,MACbkB,EAAMsuB,iBAAmBtuB,EAAMyuB,kBACjCzuB,EAAMtP,QAAQ5B,OAAO,EAAK0I,MAAO,GACjCwI,EAAMgvB,WArEI,KAyEdrsB,YAAc,WACZ,IAAIlL,EAAQ,EAAKH,MACb0I,EAAQ,EAAKlB,MAGjB,OADa,EAAK4vB,iBAAiBl8B,UAAU,EAAKm9B,kBACpCt8B,OAAOoE,EAAO,EAAMuI,IA9EtB,KAiFdinB,eAAYjgC,EAjFE,KA4HdunC,oBAAqB,EA5HP,KAkIdqB,iBAAmB,WACjB,EAAKrB,oBAAqB,GAnId,KAsIdsB,qBAAuB,WACrB,EAAKtB,oBAAqB,GAvId,KA0IduB,SAAW,WACT,IAAInhC,EAAQ,EAAK6I,MACjB,GAAc,IAAV7I,EAAJ,CAEA,IAAIhB,EAAO,EAAK+a,YAEE,IADT/a,EAAKqI,QAAO,SAAA1H,GAAC,OAAKA,EAAEyhC,YACtB3hC,SAEPoC,GAAiB7C,EAAMgB,EAAOA,EAAQ,GACtC,EAAKmQ,MAAMkwB,YAnJC,KAsJdgB,UAAY,WACV,IAAIrhC,EAAQ,EAAK6I,MAEb7J,EAAO,EAAK+a,YACZunB,EAAKtiC,EAAKqI,QAAO,SAAA1H,GAAC,OAAKA,EAAEyhC,YAEX,IAAdE,EAAG7hC,QAAgBO,IAAUshC,EAAG7hC,SAIpCoC,GAAiB7C,EAAMgB,EAAOA,EAAQ,GACtC,EAAKmQ,MAAMkwB,WAhKX5nC,YAAeC,KAAM,CACnBoQ,MAAOnQ,IACPqoC,iBAAkBroC,IAClB2/B,UAAW3/B,IACXinC,mBAAoBjnC,M,kDAKtB,OAAOD,KAAKqhB,YAAY/X,QAAQtJ,Q,kCAIhC,OAAOA,KAAKyX,MAAMpO,S,aACFnJ,GAChBF,KAAKyX,MAAMpO,QAAUnJ,I,4BAWrB,OAHKF,KAAKoQ,QACRpQ,KAAKoQ,MD2Da,SAAC3P,GACvB,OAAQA,EAAEq/B,WACR,KAAKC,GACH,OACF,KAAKA,GACH,OAAOt/B,EAAEooC,SAAS,IChEL39B,CAAclL,OAEtBA,KAAKoQ,O,aACFlQ,GACVF,KAAKoQ,MAAQlQ,I,uCAUb,OAHKF,KAAK8oC,mBACR9oC,KAAK8oC,iBAAmB,IAAIzB,IAEvBrnC,KAAK8oC,mB,kCAQZ,OAHK9oC,KAAK0M,cACR1M,KAAK0M,YAAc,IAAIF,IAElBxM,KAAK0M,a,aAEExM,GACdF,KAAK0M,YAAcxM,I,gCAoCnB,OAHKF,KAAK4/B,YACR5/B,KAAK4/B,UAAY5/B,KAAKyX,MAAMsxB,kBAEvB/oC,KAAK4/B,Y,+BAKZ,OAAO5/B,KAAKyX,MAAMuxB,iB,8BAIL,IAAD,OACZ,IAAKhpC,KAAK8mC,QAAS,CACjB,IAAI3gC,EAAMnG,KAAK8mC,QAAUzP,EAAar3B,KAAKiQ,OAC3C9J,EAAIhG,aAAe,SAACD,GAAD,OAAO,EAAK+P,MAAQ/P,GAEzC,OAAOiG,I,+BAIO,IAAD,OACRnG,KAAKw1B,YACEx1B,KAAKw1B,SAAWzN,GAAe/nB,KAAK6oC,SAAU7oC,KAAKiQ,QACzDwK,sBAAwB,SAACva,GAAD,OAAO,EAAK+P,MAAQ/P,IAElD,OAAOF,KAAKw1B,W,mCAIZ,OAAQx1B,KAAK8/B,WACX,KAAKC,GACH,OAAO,cAAC,EAAD,CAAW5+B,MAAOnB,KAAKipC,UAChC,KAAKlJ,GACH,IAAI5kB,EAAQnb,KAAKyX,MAAMyxB,yBACvB,OAAO,qBAAK9oC,MAAO,CAAC+a,SAAb,SACL,cAAC,GAAD,CAAYha,MAAOnB,KAAKsc,gB,0CAQ9B,OAAOtc,KAAKyX,MAAM0xB,wB,KC3IDC,G,WACnB,aAAe,IAAD,gCAqBdC,UAAO1pC,EArBO,KA+Bd+L,KAAO,WACL,IAAIiN,EAAQ,EAAKlB,MACbkB,EAAMmvB,eAAiBnvB,EAAMovB,aAC/B,EAAK9+B,MAAMjC,SAAQ,SAAAC,GAAC,OAAIA,EAAEsF,YAAcnB,OAlC9B,KAsCd4yB,GAAK,WACH,EAAK/0B,MAAMjC,SAAQ,SAAAC,GAAC,OAAIA,EAAEsF,YAAcnB,MACxC,EAAKqM,MAAMwf,SAAS,EAAKoS,OAvCzBtpC,YAAeC,KAAM,CACnBqpC,KAAMppC,M,gDAYR,OANKD,KAAKqH,MACRrH,KAAKqH,IAAMrH,KAAKqpC,KAAKngC,IAAMlJ,KAAKqpC,KAAKngC,IAAMlJ,KAAKqpC,KAAK54B,GAChDzQ,KAAKqH,MACRrH,KAAKqH,IAAM8B,OAGRnJ,KAAKqH,M,4BAIZ,OAAOrH,KAAKyX,MAAM6xB,KAAKhgC,QAAQtJ,Q,4BAU/B,OAHKA,KAAK8lB,QACR9lB,KAAK8lB,MAAQ5a,GAAclL,OAEtBA,KAAK8lB,U,KC7BKyjB,G,WACnB,aAAe,IAAD,gCAsBdl9B,iBAAc1M,EAtBA,KAsDdqM,OAAS,WACP,IAAI66B,EAAY,EAAKW,UACjBz7B,EAAO,EAAKs9B,KACZtoC,EAASmK,GAAc,GAG3B,OADa,EAAKsB,YAAYrB,UAAU,EAAKoB,aAC/BP,OAAOjL,EAAOgL,EAAM86B,EAAW,EAAM,EAAK/c,MA3DxD/pB,YAAeC,KAAM,CACnBqM,YAAapM,M,gDAKf,MAAM,GAAN,OAAUD,KAAKkhB,OAAO1Z,IAAtB,YAA6BxH,KAAK8pB,IAAItiB,O,2BAItC,OAAOxH,KAAK8pB,IAAIuf,O,kCAIhB,OAAOrpC,KAAK8pB,IAAI7gB,MAAMK,QAAQtJ,Q,+BAI9B,OAAOA,KAAK8pB,IAAI3Z,Q,kCAQhB,OAHKnQ,KAAKqM,cACRrM,KAAKqM,YAAcrM,KAAKkhB,OAAO3U,aAE1BvM,KAAKqM,a,aAEEnM,GACdF,KAAKqM,YAAcnM,I,8BAKnB,IAAKF,KAAKkgC,QAAQ,CAChB,IAAIjT,EAAM/hB,GAAclL,MACxBA,KAAKkgC,QAAU7I,EAAapK,GAE9B,OAAOjtB,KAAKkgC,U,kCAQZ,OAHKlgC,KAAK0M,cACR1M,KAAK0M,YAAc1M,KAAKkhB,OAAO1U,aAE1BxM,KAAK0M,c,gCAIZ,OAAO1M,KAAKkhB,OAAOsmB,c,KC1CVz2B,GAAW,SAACtQ,GACvB,IAAIomC,EAAYpmC,EAAE+mC,UACdz7B,EAAOtL,EAAE4oC,KAEb,GAAI5oC,EAAEgX,MAAM+xB,uBAEV,OADU/oC,EAAEgX,MAAM+xB,uBAAuBz9B,EAAMtL,EAAGA,EAAEqpB,IAAKrpB,EAAEygB,QAI7D,IAAIngB,OAAQpB,EASZ,OAPIknC,IACF9lC,EAAQgL,EACR86B,EAAU7/B,SAAQ,SAAAC,GAChBlG,EAAQA,EAAMkG,OAIXlG,GC3BIP,GAAM,SAACuL,EAAM4M,GACxB,IAAIjY,EAAK,IAAI0oC,GAGb,OAFA1oC,EAAG2oC,KAAOt9B,EACVrL,EAAG+W,MAAQkB,EACJjY,GAGI+oC,GAAW,SAAChpC,GAEvB,OADcA,EAAEgX,MAAMpO,QACPsM,KAAI,SAAA1O,GAAC,ODTH,SAACe,EAAKC,GACvB,IAAIvH,EAAK,IAAI6oC,GAIb,OAHA7oC,EAAGopB,IAAM9hB,EACTtH,EAAGwgB,OAASjZ,EACZvH,EAAG+W,MAAQzP,EAAIyP,MACR/W,ECIiBgpC,CAAajpC,EAAGwG,OCFrB0iC,G,WACnB,aAAe,IAAD,kCAuBd7B,eAAgB,EAvBF,KA0BdO,YAAa,EA1BC,KA6BdL,eAAgB,EA7BF,KAgCdD,aAAc,EAhCA,KAmCdd,iBAAkB,EAnCJ,KAsCd2C,cAAe,EAtCD,KAyCdxC,iBAAkB,EAzCJ,KA4CdD,eAAgB,EA5CF,KA8Cd0C,oBAAqB,EA9CP,KAgDdC,aAAUnqC,EAhDI,KAmEdoqC,gBAAapqC,EAnEC,KA+EdqqC,UAAOrqC,EA/EO,KA0Fd8gC,QAAU,WACR,GAAI,EAAKqH,eAAiB,EAAKO,WAAY,CACzC,IAAIt8B,OAAOpM,EAEToM,EADE,EAAKk+B,gBACA,EAAKA,kBAEL,CACLziC,IAAK2B,KACL+gC,kBAAkB,GAGtB,EAAKC,WAAWriC,KAAKiE,GAErB,IAAI/D,EAAMoiC,GAAYr+B,EAAM,GAC5B,EAAKu9B,KAAKxhC,KAAKE,GACfA,EAAI0D,SAzGM,KA6Gdu8B,WAAa,SAACl8B,EAAM/D,GAClB,GAAI,EAAK8/B,eAAiB,EAAKE,cAAe,CAC5C,IAAI1hC,EAAO,EAAK6jC,WACZ7iC,EAAQhB,EAAKgD,QAAQyC,GACzBzF,EAAKmB,OAAOH,EAAO,GACnB,EAAKgiC,KAAK7hC,OAAOH,EAAO,GAEpB,EAAK+iC,cACP,EAAKA,aAAat+B,KArHV,KA0HdkrB,SAAW,SAAClrB,GACV,GAAI,EAAK+7B,eAAiB,EAAKC,YAAa,CAC1C,GAAIh8B,EAAKm+B,iBAAkB,CACzB,IAAI5iC,EAAQ,EAAK6iC,WAAW5iC,WAAU,SAAAN,GAAC,OAAIA,EAAEO,MAAQuE,EAAKvE,OAC1DuE,EAAO,EAAKo+B,WAAW7iC,GAAhB,gBAA8ByE,GAGnC,EAAKu+B,YACP,EAAKA,WAAWv+B,KAlIR,KAuIdq8B,UAAY,WACV,GAAI,EAAKnB,iBAAmB,EAAKG,gBAAiB,CAChD,IAAIn/B,EAAMsiC,GAAmB,KAAM,GAE/BC,EAAkB,EAAKnhC,QAAQ9B,WAAU,SAAAN,GAAC,OAAIA,EAAEihC,aAC3B,IAArBsC,EACF,EAAKnhC,QAAQ5B,OAAO+iC,EAAiB,EAAGviC,GAExC,EAAKoB,QAAQvB,KAAKG,GAGpBA,EAAIyD,SAlJM,KAsJdi8B,OAAS,WACP,EAAK2B,KAAO,MAvJA,KA+JdP,iBAAmB0B,GA/JL,KAgKdzB,eAAiB,GAhKH,KAmKdG,qBAAsB,EAlKpBppC,YAAeC,MAAD,GACZ8pC,QAAS7pC,IACT8pC,WAAY9pC,IACZ+pC,KAAM/pC,IAEN+oC,eAAiB/oC,IACjB8oC,iBAAmB9oC,IAEnB6nC,cAAe7nC,IACfooC,WAAYpoC,IACZ+nC,cAAe/nC,IACf8nC,YAAa9nC,KAXD,+BAaGA,KAbH,4BAcAA,KAdA,+BAeGA,KAfH,6BAgBCA,KAhBD,oCAiBQA,KAjBR,I,oDA2Dd,OAVKD,KAAK8pC,UACR9pC,KAAK8pC,QAAU,CACbS,GAAY,4BAAgB,cAAe,KAAMvqC,MACjDuqC,GAAY,+BAAc,WAAY,KAAMvqC,OAG1CA,KAAK6pC,oBACP7pC,KAAK8pC,QAAQhiC,KAAKyiC,GAAwBvqC,QAGvCA,KAAK8pC,S,aAEF5pC,GACVF,KAAK8pC,QAAU5pC,EACfF,KAAKspC,UAAO3pC,I,iCAQZ,OAHKK,KAAK+pC,aACR/pC,KAAK+pC,WAAa,IAEb/pC,KAAK+pC,Y,aAEC7pC,GACbF,KAAK+pC,WAAa7pC,EAClBF,KAAKspC,UAAO3pC,I,2BC/DO,IAACc,EDuEpB,OAHKT,KAAKgqC,OACRhqC,KAAKgqC,MCrEavpC,EDqEOT,MCpEpBmqC,WAAWx0B,KAAI,SAAA1O,GAAC,OAAImjC,GAAYnjC,EAAGxG,ODsEnCT,KAAKgqC,M,aAEL9pC,GACPF,KAAKgqC,KAAO9pC,M,KElGHwqC,GACX,aAAe,oBACb3qC,YAAeC,KAAM,KCFZ2qC,GAAb,4MACEC,mBAAoB,EADtB,iEAKI,IAAK5qC,KAAK6qC,mBAEC7qC,KAAK6qC,mBACZC,QAAiBnrC,EAAWK,KAAK4qC,mBAErC,OAAO5qC,KAAK6qC,uBAVhB,GAA6C3T,ICAhC12B,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAIiqC,GA6Bb,OA3BAjqC,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEV3G,EAAEgyB,cAAgB,SAACvyB,GACbO,EAAE2F,OACJ1F,EAAGwE,KAAOhF,IAIdO,EAAEkyB,qBAAuB,SAACzyB,GACpBO,EAAE2F,OACJ1F,EAAGqyB,YAAc7yB,IAIrBO,EAAEmyB,cAAgB,SAAC1yB,GACbO,EAAE2F,OACJ1F,EAAGmT,KAAO3T,EACVQ,EAAG64B,OAAS74B,EAAGy2B,cAInBz2B,EAAG02B,YAAc,WAEf,OCvBe,SAAC32B,GAClB,IAAIC,EAAK,IAAIgqC,GAGb,OAFAhqC,EAAGm2B,UAAYp2B,EAERC,EDmBE84B,CADI/4B,EAAEoT,OAIRnT,GE/BIqqC,GAAb,4HAA2C7Y,ICG9B8Y,GAAb,WACE,aAAe,yBAMft1B,WAAQ/V,EALNI,YAAeC,KAAM,CACnB0V,MAAOzV,MAHb,kDAcI,OALKD,KAAK0V,QACR1V,KAAK0V,MAAQ,CACXkB,GAAa,IAAIm0B,MAGd/qC,KAAK0V,QAdhB,8BAsBI,OAHK1V,KAAKirC,UACRjrC,KAAKirC,QAAU//B,GAAgBlL,OAE1BA,KAAKirC,YAtBhB,KCeaC,GAAa,SAACzqC,GACzB,IAAIC,EAAK,IAAIipC,GAEbjpC,EAAGypC,WAAa1pC,EAAEqL,MAElB,IAAIq/B,EAAUZ,GAAY,6BAAiB,CAAC,QAAS,KAAM7pC,GACvD0qC,EAAYb,GAAY,WAAY,KAAM,CAC5Ct+B,GAAeb,IAAa,SAAC6hB,EAAKlhB,GAEfA,EAAKs/B,mBACtB,OAAO,cAAC,GAAD,CAAclqC,MAAO4K,EAAKs/B,yBAElC3qC,GACC4qC,EAAmBf,GAAY,8BAAgB,KAAM,CACvDt+B,GAAeb,IAAa,SAAC6hB,EAAKlhB,GAChC,OAAO,cAAC,GAAD,QAERrL,GAWH,OATAA,EAAG2I,QAAU,CACX8hC,EAASC,EAAWE,EACpBf,GAAwB7pC,IAG1BA,EAAGupC,gBAAkB,WACnB,OAAO,IAAIU,IAGNjqC,GC5BIyU,GAAS,kBAAM3G,GAAOF,UAEtBi9B,GAAwB,SAAClqC,GACpC,OhFnBiB,SAACZ,GAClB,IAAIC,EAAK,IAAI6zB,GAab,OAZA7zB,EAAGmV,iBAAmBpV,EAEtBA,EAAE+qC,sBAAwB,SAACtrC,GACfQ,EAAGmzB,eACbnzB,EAAGoiC,cAAe,GAGpBriC,EAAEi2B,MAAQ,SAAC3qB,GACT,IAAIowB,EAAWsP,GAAsB1/B,EAAMrL,GAC3CA,EAAGgH,IAAIy0B,IAGFz7B,EgFKAgrC,CAA2Bv2B,KAASU,mBAGhC81B,GAAiC,SAACtqC,GAC7C,OpEvBiB,SAACZ,GAClB,IAAIC,EAAK,IAAIk2B,GAYb,OAXAl2B,EAAGm2B,UAAYp2B,EAEfA,EAAEq2B,eAAiB,SAAC52B,GACRQ,EAAGoL,MACbpL,EAAGoiC,cAAe,GAGpBriC,EAAEi2B,MAAQ,SAACx2B,GACTQ,EAAGgH,IAAIqyB,GAAe75B,EAAGQ,KAGpBA,EoEUAkrC,CACJz2B,KAAS02B,4BAGDC,GAA8B,SAACzqC,GAC1C,OvD5BiB,SAACZ,GAClB,IAAIC,EAAK,IAAI+8B,GAWb,OAVA/8B,EAAGm2B,UAAYp2B,EAEfA,EAAEq2B,eAAiB,SAAC52B,GACRQ,EAAGoL,OAGfrL,EAAEi2B,MAAQ,SAACx2B,GACTQ,EAAGgH,IAAIqyB,GAAe75B,EAAGQ,KAGpBA,EuDgBAqrC,CACJ52B,KAAS62B,yBAGDC,GAA6B,SAAC5qC,GACzC,OpDlCiB,SAACZ,GAClB,IAAIC,EAAK,IAAIg9B,GAWb,OAVAh9B,EAAGm2B,UAAYp2B,EAEfA,EAAEq2B,eAAiB,SAAC52B,GACRQ,EAAGoL,OAGfrL,EAAEi2B,MAAQ,SAACx2B,GACTQ,EAAGgH,IAAIqyB,GAAe75B,EAAGQ,KAGpBA,EoDsBAwrC,CACJ/2B,KAASuxB,wBAGDyF,GAAoB,SAAC9qC,GAChC,O1BvCiB,SAACZ,GAClB,IAAIC,EAAK,IAAI4iC,GAQb,OAPA5iC,EAAGm2B,UAAYp2B,EAEfA,EAAEq2B,eAAiB,SAAC52B,GACRQ,EAAGoL,MACbpL,EAAGoiC,cAAe,GAGbpiC,E0B8BA0rC,CACJj3B,KAASG,eAQD+2B,GAAgC,SAAChrC,GAC5C,OD5CiB,SAACZ,GAClB,IAAIC,EAAK,IAAIsqC,GAOb,OANAtqC,EAAGm2B,UAAYp2B,EAEfA,EAAE+1B,qBAAqB1uB,MAAK,SAAC5H,GACjBQ,EAAGoL,SAGRpL,ECoCA4rC,CAAkBn3B,KAASo3B,6BCpDvBC,GAAO,OACPC,GAAe,eACfj5B,GAAQ,QACRk5B,GAAY,YACZC,GAAa,aACbC,GAAW,WCCXtY,GAAb,WACE,aAAe,yBAgJfuY,aAAUltC,EAhJI,KA0JdmtC,gCAAkC,GA1JpB,KA4JdC,gBAAkBC,GA5JJ,KAqKdC,+BAAiC,GArKnB,KAuKdC,oBAAiBvtC,EAvKH,KAwLdwtC,eAAiB,oBAvLfptC,YAAeC,KAAM,CACnB6sC,QAAS5sC,IACT8sC,gBAAkB9sC,IAClBitC,eAAiBjtC,IACjBktC,eAAiBltC,MANvB,mDAmBI,OAAOuO,GAAOF,WAnBlB,yCA2BI,OAHKtO,KAAKotC,qBACRptC,KAAKotC,mBAAqBliC,MAErBlL,KAAKotC,qBA3BhB,kDAmCI,OAHKptC,KAAKqtC,8BACRrtC,KAAKqtC,4BAA8BniC,MAE9BlL,KAAKqtC,8BAnChB,+CA2CI,OAHKrtC,KAAKstC,2BACRttC,KAAKstC,yBAA2BpiC,MAE3BlL,KAAKstC,2BA3ChB,8CAmDI,OAHKttC,KAAKutC,0BACRvtC,KAAKutC,wBAA0BriC,MAE1BlL,KAAKutC,0BAnDhB,qCA2DI,OAHKvtC,KAAKwtC,iBACRxtC,KAAKwtC,eAAiBtiC,MAEjBlL,KAAKwtC,iBA3DhB,uCAmEI,OAHKxtC,KAAKytC,mBACRztC,KAAKytC,iBFxBFC,GACNv4B,KAASiB,iBEyBDpW,KAAKytC,kBAnEhB,aAqEuBvtC,GACnBF,KAAKytC,iBAAmBvtC,EAMtBF,KAAKmV,OAAOiB,eALTlW,EAK0BA,EAAE22B,UAHF32B,IAzEnC,uCAqFI,OAHKF,KAAK2tC,mBACR3tC,KAAK2tC,iBAAmB3tC,KAAKmV,OAAOkjB,kBAE/Br4B,KAAK2tC,mBArFhB,wCA6FI,OAHK3tC,KAAK4tC,oBACR5tC,KAAK4tC,kBAAoB5tC,KAAKmV,OAAOojB,mBAEhCv4B,KAAK4tC,oBA7FhB,oCAqGI,OAHK5tC,KAAK4M,gBACR5M,KAAK4M,cAAgB5M,KAAKmV,OAAO5G,eAE5BvO,KAAK4M,gBArGhB,yCA6GI,OAHK5M,KAAK6tC,qBACR7tC,KAAK6tC,mBAAqB7tC,KAAKmV,OAAOgmB,oBAEjCn7B,KAAK6tC,qBA7GhB,qCAqHI,OAHK7tC,KAAK8tC,iBACR9tC,KAAK8tC,eAAiB9tC,KAAKmV,OAAO1G,gBAE7BzO,KAAK8tC,iBArHhB,wCA6HI,OAHK9tC,KAAK+tC,oBACR/tC,KAAK+tC,kBAAoB/tC,KAAKmV,OAAO+d,mBAEhClzB,KAAK+tC,oBA7HhB,gCAqII,OAHK/tC,KAAKguC,YACRhuC,KAAKguC,UAAYhuC,KAAKmV,OAAOmmB,WAExBt7B,KAAKguC,YArIhB,iDA8II,OAJKhuC,KAAKiuC,6BACRjuC,KAAKiuC,2BACH/iC,MAEGlL,KAAKiuC,6BA9IhB,8BAsJI,YAHqBtuC,IAAjBK,KAAK6sC,UACP7sC,KAAK6sC,QAAU7sC,KAAKmV,OAAO+4B,SAEtBluC,KAAK6sC,SAtJhB,aAuJgB3sC,GACZF,KAAK6sC,QAAU7sC,KAAKmV,OAAO+4B,QAAUhuC,IAxJzC,sCAgKI,OAAOF,KAAK+sC,iBAhKhB,aAiKwB7sC,GACpBF,KAAK+sC,gBAAkB7sC,EACvBF,KAAK8sC,gCAAgC9lC,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,aAnKxD,qCA0KI,OAAOvD,KAAKktC,gBA1KhB,aA2KuBhtC,GACnBF,KAAKktC,eAAiBhtC,EACtBF,KAAKitC,+BAA+BjmC,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,WAEnDvD,KAAKmV,OAAOg5B,eAAZ,OAA6BjuC,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAG22B,YA/KpC,kCAmLI,OAAO72B,KAAKmV,OAAOi5B,cAnLvB,qCA2LI,OAAOpuC,KAAKmtC,gBA3LhB,aA4LuBjtC,GACnBF,KAAKmtC,eAAiBjtC,KA7L1B,gCAeI,OAHKF,KAAK6M,WACR7M,KAAK6M,SAAW,IAAIynB,GAEft0B,KAAK6M,aAfhB,KCHqBwhC,G,4DA6BnBn+B,OAAS,WACP,IAAI5I,EAAQ,EAAK6I,MACjB,EAAKgjB,OAAO1rB,OAAOH,EAAO,GAEf,EAAK8B,KAAKklC,SAChB7mC,OAAOH,EAAO,I,KAGrBywB,QAAU,SAAC73B,GACT,EAAK8gB,cAAczE,YAAcrc,EAAEsU,O,kDApCnC,OAAOxU,KAAKoJ,KAAKklC,SAAShlC,QAAQtJ,Q,6BAIlC,OAAOA,KAAKoJ,KAAKytB,UAAU1D,S,4BAI3B,OAAOnzB,KAAKmzB,OAAOnzB,KAAKmQ,Q,aAEhBjQ,GACRF,KAAKmzB,OAAOnzB,KAAKmQ,OAASjQ,I,uCAI1B,OAAOgL,O,oCAIW,IAAD,OACZlL,KAAK+mB,iBACE/mB,KAAK+mB,cAAgB4O,GAAiB31B,KAAK4gC,iBAAkB5gC,KAAKwU,QACxEiG,sBAAwB,SAACva,GAAD,OAAO,EAAKsU,MAAQtU,IAElD,OAAOF,KAAK+mB,kB,KCtBHvmB,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAI2tC,GAEb,OADA3tC,EAAG0I,KAAOhC,EACH1G,GAGI6tC,GAAsB,WACjC,OAVOja,GAAShmB,SAUE4kB,mBCPCsb,G,WACnB,aAAe,IAAD,gCASdC,cAAW9uC,EATG,KA8Cd+uC,cAAgB,WACH,EAAK7X,UAAU5D,cAA1B,IACIkJ,EAAWwS,GAAgB5iC,EAAM,GAErC,OADA,EAAKuiC,SAASxmC,KAAKq0B,GACZA,GAlDK,KAqDdpE,QAAU,SAAC73B,GACT,EAAKouC,SAAWpuC,EAAEouC,UArDlBvuC,YAAeC,KAAM,CACnByuC,SAAWxuC,M,qDAYb,OAHKD,KAAKyuC,WACRzuC,KAAKyuC,SAAWvjC,GAAiBlL,OAE5BA,KAAKyuC,U,aAEDvuC,GACX,IAAIoG,EAAOtG,KAAKyuC,SACZ9R,EAAY38B,KAAK62B,UAAU1D,OAE3ByJ,EAAWt2B,EAAKS,OAChB81B,EAAW38B,EAAE6G,OAEjBT,EAAKU,SAAQ,SAACC,EAAGC,GACXA,GAAK21B,GACT51B,EAAE8wB,QAAQ73B,EAAEgH,OAGd,IAAI41B,EAAQt3B,KAAKu3B,IAAIH,EAAWC,GAChC,GAAID,EAAWC,EACbv2B,EAAKmB,OAAOo1B,EAAUC,GACtBH,EAAUl1B,OAAOo1B,EAAUC,QAExB,GAAIF,EAAWC,EAClB,IAAK,IAAI31B,EAAI,EAAGA,EAAI41B,EAAO51B,IAAK,CAC9B,IAEI6E,EAFe7L,EAAE08B,EAAW11B,GAERsN,MACxBmoB,EAAU70B,KAAKiE,GAEf,IAAImxB,EAASyR,GAAgB5iC,EAAK/L,MAClCsG,EAAKwB,KAAKo1B,Q,KClCL0R,GAAc,SAACnuC,GAE1B,OADaA,EAAEo2B,UAAU1D,OACXxd,KAAI,SAAA1O,GAAC,OAAI0nC,GAAgB1nC,EAAGxG,OCfvBouC,G,4MACnBtX,mBAAqB,SAACr3B,K,YADwBg3B,ICCnC12B,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAImuC,GA6Bb,OA3BAnuC,EAAGm2B,UAAYp2B,EACfC,EAAG0I,KAAOhC,EAEV3G,EAAEgyB,cAAgB,SAACvyB,GACbO,EAAE2F,OACJ1F,EAAGwE,KAAOhF,IAIdO,EAAEkyB,qBAAuB,SAACzyB,GACpBO,EAAE2F,OACJ1F,EAAGqyB,YAAc7yB,IAIrBO,EAAEmyB,cAAgB,SAAC1yB,GACbO,EAAE2F,OACJ1F,EAAGmT,KAAO3T,EACVQ,EAAG64B,OAAS74B,EAAGy2B,cAInBz2B,EAAG02B,YAAc,WAEf,OFtBe,SAAC32B,GAClB,IAAIC,EAAK,IAAI8tC,GAGb,OAFA9tC,EAAGm2B,UAAYp2B,EAERC,EEkBE84B,CADI/4B,EAAEoT,OAIRnT,G,kBC9BIouC,GAAb,4DACEztC,KAAO,GADT,KAqBE0tC,OAAS,WACP,IAIMC,EAAK,CAAEC,OAAQ,CAAE,KADZC,SAAWC,cAAc,EAAKt7B,KAAM,EAAKu7B,UACfC,WAAY,CAAC,SAC5CC,EAAcJ,SAAWF,EAAI,CAAEO,SAAU,OAAQ/jC,KAAM,UACvDnK,EAAO,IAAImuC,KAAK,CAACF,GAAc,CAAE9jC,KANtB,oFAOjBikC,UAAiBpuC,EAAM,EAAKquC,SANN,UAvB1B,KAgCEC,WAAa,WACX,IAGIC,EAAM,CACVA,KAAW,QACXA,OAAc,QACdA,GAAY,CACVC,EAAG,IACH3vC,EAAG,MAGD4vC,EAAM,CACVA,KAAW,WACXA,OAAc,QACdA,GAAY,CACVD,EAAG,IACH3vC,EAAG,KAEL4vC,GAAY,CACV5vC,EAAG,IAAK6vC,EAAI,MAEdD,GAAY,CACV5vC,EAAG,IACH6vC,EAAI,YAGND,GAAY,CACV5vC,EAAG,IACH6vC,EAAI,sBAaAf,EAAK,CACTC,OAAQ,GAGRI,WAAY,CAACO,EAAI1qC,KAAM4qC,EAAI5qC,OAE7B8pC,EAAGC,OAAOW,EAAI1qC,MAAQ0qC,EACtBZ,EAAGC,OAAOa,EAAI5qC,MAAQ4qC,EAEtB,IAAMR,EAAcJ,SAAWF,EAAI,CAAEO,SAAU,OAAQ/jC,KAAM,UACvDnK,EAAO,IAAImuC,KAAK,CAACF,GAAc,CAAE9jC,KAnDtB,oFAoDjBikC,UAAiBpuC,EAAM,EAAKquC,SAnDN,UAlC1B,iDAGI,OAAI1vC,KAAKgwC,kBACAhwC,KAAKgwC,oBAEPhwC,KAAKqB,MANhB,aAOanB,GACTF,KAAKqB,KAAOnB,IARhB,+BAaI,OAAIF,KAAKiwC,sBACAjwC,KAAKiwC,wBAEPjwC,KAAKkwC,UAhBhB,aAiBiBhwC,GACbF,KAAKkwC,SAAWhwC,MAlBpB,K,qBCAaiwC,GAAb,4DAqBEpB,OAAS,WACP,IAGMO,EAAcJ,SAAW,EAAKkB,SAAU,CAAEb,SAAU,OAAQ/jC,KAAM,UAClEnK,EAAO,IAAImuC,KAAK,CAACF,GAAc,CAAE9jC,KAJtB,oFAKjBikC,UAAiBpuC,EAAM,EAAKquC,SAJN,UAvB1B,qDAGI,OAAI1vC,KAAKqwC,sBACArwC,KAAKqwC,wBAEPrwC,KAAKswC,UANhB,aAOiBpwC,GACbF,KAAKswC,SAAWpwC,IARpB,+BAaI,OAAIF,KAAKiwC,sBACAjwC,KAAKiwC,wBAEPjwC,KAAKkwC,UAhBhB,aAiBiBhwC,GACbF,KAAKkwC,SAAWhwC,MAlBpB,KCAaqwC,GAAb,iDAEEvoC,IAAM,EAFR,KAcEg/B,OAAS,EAdX,gDAII,OAAIhnC,KAAKwwC,iBACAxwC,KAAKwwC,mBAEPxwC,KAAKgI,KAPhB,aAQY9H,GACRF,KAAKgI,IAAM9H,EACXF,KAAKwwC,sBAAmB7wC,IAV5B,6BAgBI,OAAIK,KAAKywC,oBACAzwC,KAAKywC,sBAEPzwC,KAAKgnC,QAnBhB,aAoBe9mC,GACXF,KAAKgnC,OAAS9mC,EACdF,KAAKywC,yBAAsB9wC,IAtB/B,8BA8BI,OAAIK,KAAK0wC,qBACA1wC,KAAK0wC,uBAEP1wC,KAAK2wC,SAjChB,aAkCgBzwC,GACZF,KAAK2wC,QAAUzwC,EACfF,KAAK0wC,0BAAuB/wC,IApChC,8BAyCI,OADUwJ,GAAsBnJ,KAAK8pB,IAAK9pB,KAAKkhB,UAxCnD,+BAiDI,OAHKlhB,KAAKogB,WACRpgB,KAAKogB,SCjDgB,SAAC3f,GAC1B,IAAIumC,EAASvmC,EAAEygB,OACf,OAAOzgB,EAAE2I,KAAKgY,SAASzL,KAAI,SAAA1O,GACzB,IAAIX,EAAOW,EAAEgC,MACT3B,EAAQhB,EAAKiB,WAAU,SAAAgQ,GAAC,OAAIA,EAAE2J,SAAW8lB,KAC7C,OAAkB,IAAX1/B,EAAehB,EAAKgB,QAAS3H,KACnCgP,QAAO,SAAA1H,GAAC,YAAUtH,IAANsH,KD2CKiE,CAAiBlL,OAE5BA,KAAKogB,WAjDhB,wCAyDI,YAH+BzgB,IAA3BK,KAAK4wC,oBACP5wC,KAAK4wC,kBChDyB,SAACnwC,GACnC,IAAImO,GAAU,EAQd,OANAnO,EAAE2gB,SAASpa,SAAQ,SAAAC,GACb2H,GAAiC,IAAtB3H,EAAEma,SAASra,SACxB6H,GAAU,MAIPA,EDuCsB1D,CAA0BlL,OAE9CA,KAAK4wC,oBAzDhB,iCAoEI,MAPU,CACRf,EAAI7vC,KAAK6wC,KACT3wC,EAAIF,KAAKuD,MACTwsC,EAAI/vC,KAAK8wC,QACTC,EAAI/wC,KAAKgxC,OACT1oC,EAAItI,KAAKixC,WAlEf,KEDaC,GAAb,6FAMI,OAAOlxC,KAAK8pB,IAAIxI,OANpB,+BAcI,OAHKthB,KAAKogB,WACRpgB,KAAKogB,SAAWlV,GAAiBlL,OAE5BA,KAAKogB,WAdhB,gCAkBI,OAAOlV,GAAkBlL,QAlB7B,4BA0BI,OAHKA,KAAK8lB,QACR9lB,KAAK8lB,MAAQ5a,GAAclL,OAEtBA,KAAK8lB,QA1BhB,gCA8BI,OAAO9lB,KAAKmxC,UAAUC,SAAS9nC,QAAQtJ,QA9B3C,4BAsCI,OAHKA,KAAKoQ,QACRpQ,KAAKoQ,MAAQlF,GAAclL,OAEtBA,KAAKoQ,UAtChB,KCFaihC,GAAS,ICKT7wC,GAAM,SAACwH,EAAKspC,EAAIr4B,GAC3B,IAAIvY,EAAK,IAAIwwC,GAMb,OAJAxwC,EAAGopB,IAAM9hB,EACTtH,EAAGywC,UAAYG,EACf5wC,EAAGyY,QAAUF,EAENvY,GAII6wC,GAAc,SAAC9wC,GAC1B,OAAOA,EAAEqpB,IAAI1I,SAASzL,KAAI,SAAA1O,GAAC,OAAIzG,GAAIyG,EAAGxG,EAAE0wC,UAAW1wC,OAGxC+wC,GAAW,SAAC/wC,GAIvB,IAHA,IAAIuH,EAAMvH,EAAEqpB,IACR1Z,EAAQ,GAEHlJ,EAAI,EAAGA,EAAIc,EAAIsZ,KAAMpa,IAC5BkJ,GAAS,KAKX,OAFAA,GAASpI,EAAIiI,OAKFw5B,GAAW,SAAChpC,GACvB,IAAIgxC,EAAUhxC,EAAEixC,eAAiB,GAE7BC,EAAWlxC,EAAE0wC,UAAUS,kBACvBC,EAAWpxC,EAAE0wC,UAAUW,eAEvB9pC,EAAMvH,EAAEqpB,IACRxjB,EAAO,GACPyrC,EAAa,kBAAMtxC,EAAEuxC,UAAYH,GAEjCI,EAAY,IAAI1B,GACpB0B,EAAU7oC,KAAO3I,EACjBwxC,EAAUpB,KAAOqB,GAEjBD,EAAU1uC,MAAQ9C,EAAEwP,MACpBgiC,EAAU/wB,OAAS,EAAIywB,EACvBM,EAAUzB,iBAAmBuB,EAC7BzrC,EAAKwB,KAAKmqC,GAEV,IAAInI,EAAU9hC,EAAIyP,MAAMpO,QA0CxB,OAzCArB,EAAIiB,MAAMjC,SAAQ,SAAAC,GAChB,IAAIkrC,EAAY,IAAI5B,GACpB4B,EAAU/oC,KAAO3I,EACjB0xC,EAAUtB,KDvDQ,ICwDlBsB,EAAU5uC,MAAQ0D,EAAE6hB,WACpBqpB,EAAUnB,OAAS,OACnBmB,EAAUjxB,OACR4oB,EAAQxgC,QAAQrC,EAAEia,QAAU,EAAIywB,EAClCQ,EAAU3B,iBAAmBuB,EAE7BI,EAAUzB,qBAAuB,WAC/B,IAIIC,EAJAvwB,EAAW+xB,EAAU/wB,SACrBra,EAASqZ,EAASrZ,OACtB,GAAe,IAAXA,EAiBJ,OAdKorC,EAAUC,kBAWbzB,EAAO,cAAUvwB,EAAS,GAAGiyB,QAAtB,YAAiCjyB,EAASrZ,EAAO,GAAGsrC,QAApD,MAVP1B,EAAUvwB,EAAS2F,QAAO,SAACxjB,EAAG0E,EAAGC,GAK/B,OAJU,IAANA,IACF3E,GAAK,KAEPA,GAAK0E,EAAEorC,UAEN,QAEH1B,GAAW,KAKNA,GAGT,IAAItpC,EAAMJ,EAAEia,OAAOhc,KACnBoB,EAAKwB,KAAKqqC,GACVV,EAAQ3pC,KAAK,CACXN,IAAKH,EACL9D,MAAO4uC,OAIJ7rC,GAGIgsC,GAAe,SAAC7xC,GAC3B,IAAI6F,EAAO,CAAC7F,GAMZ,OAJAA,EAAE2gB,SAASpa,SAAQ,SAAAC,GACjBX,EAAKwB,KAAKkR,MAAM1S,EAAMW,EAAEsrC,cAGnBjsC,GCtGIksC,GAAb,iDAmDEC,kBAAoB,EAnDtB,KAoDEC,eAAiB,EApDnB,KAsDEd,kBAAoB,EAtDtB,KAuDEE,eAAiB,EAvDnB,kDAEI,OAAO9xC,KAAKowC,SAAS34B,QAFzB,+BCI2B,IAAChX,EDQxB,OAHKT,KAAK2yC,WACR3yC,KAAK2yC,UCNiBlyC,EDMWT,MCL5ByX,MAAMyL,SAASvN,KAAI,SAAA1O,GAAC,OAAImjC,GAAYnjC,EAAGxG,ODOvCT,KAAK2yC,WAZhB,+BAoBI,OAHK3yC,KAAK4yC,WACR5yC,KAAK4yC,SCVgB,SAACnyC,GAC1B,IAAI6F,EAAO,GAMX,OAJA7F,EAAEyiB,SAASlc,SAAQ,SAAAC,GACjBX,EAAKwB,KAAKkR,MAAM1S,EAAMW,EAAEsrC,cAGnBjsC,EDGa4E,CAAiBlL,OAE5BA,KAAK4yC,WApBhB,iCA4BI,OAHK5yC,KAAK6yC,aACR7yC,KAAK6yC,WCRkB,SAACpyC,GAC5B,IAAI6F,EAAO,GAMX,OAJA7F,EAAE2wC,SAASpqC,SAAQ,SAAAC,GACjBX,EAAKwB,KAAKkR,MAAM1S,EAAMW,EAAEgC,UAGnB3C,EDCe4E,CAAmBlL,OAEhCA,KAAK6yC,aA5BhB,iCAoCI,OAHK7yC,KAAK8yC,aACR9yC,KAAK8yC,WCNkB,SAACryC,GAC5B,IAAIsyC,EAAKtyC,EAAEgyC,kBACPO,EAAKvyC,EAAEiyC,eAEPpsC,EAAO,GAgBX,OAfA7F,EAAEgX,MAAMpO,QAAQrC,SAAQ,SAACC,EAAGC,GAC1B,IAAIge,EAAO,IAAIqrB,GACfrrB,EAAK2rB,KAAOqB,GACZhtB,EAAK3hB,MAAQ0D,EAAE/B,KACfggB,EAAKhE,OAASha,EAAI6rC,EAAK,EACvB7tB,EAAK4E,IAAMkpB,EACX9tB,EAAK+rB,MAAQ,CACXgC,KAAO,CACLC,MAAO,IAIX5sC,EAAKwB,KAAKod,MAGL5e,EDde4E,CAAmBlL,OAEhCA,KAAK8yC,aApChB,+BA4CI,OAHK9yC,KAAKmzC,WACRnzC,KAAKmzC,SAAWnzC,KAAKozC,WAAWntB,OAAOjmB,KAAKqzC,aAEvCrzC,KAAKmzC,WA5ChB,gCAgDI,OCGwB,SAAC1yC,GAC3B,IAAI6yC,EAAY7yC,EAAE8yC,SAEdC,EAAQF,EAAUvtB,QACpB,WAAqC9e,GAArC,IAAGwsC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,OAA3B,MAA4C,CAC1CH,OAAQA,EAASxsC,EAAE6iB,IAAM2pB,EAASxsC,EAAE6iB,IACpC4pB,OAAQA,EAASzsC,EAAEia,OAASwyB,EAASzsC,EAAEia,OACvCyyB,OAAQA,EAAS1sC,EAAE6iB,IAAM6pB,EAAS1sC,EAAE6iB,IACpC8pB,OAAQA,EAAS3sC,EAAEia,OAAS0yB,EAAS3sC,EAAEia,UAL/B,cAOVuyB,OAAQH,EAAU,GAAGxpB,IAAK4pB,OAAQJ,EAAU,GAAGpyB,OAC/CyyB,OAAQL,EAAU,GAAGxpB,KARX,SAQwBwpB,EAAU,GAAGpyB,SAGjD,OAAO/X,GACJqqC,EAAMC,OAAQD,EAAME,OAAQF,EAAMG,OAAQH,EAAMI,QDlB1C1oC,CAAkBlL,QAhD7B,iCA0DI,IAAImG,EAAM,CACR,OAASnG,KAAK6zC,WAOhB,OAJA7zC,KAAKuzC,SAASvsC,SAAQ,SAAAC,GACpBd,EAAIc,EAAEorC,SAAWprC,EAAE6sC,cAGd3tC,MAlEX,KEAa4tC,GAAb,iDAiCEC,WAAa,GAjCf,KAuEEvB,kBAAoB,EAvEtB,KAwEEC,eAAiB,EAxEnB,KA0EEd,kBAAoB,EA1EtB,KA2EEE,eAAiB,EA3EnB,kDAII,OAAO9xC,KAAKowC,SAAS34B,QAJzB,+BAcI,OAHKzX,KAAKi0C,WACRj0C,KAAKi0C,SAA4Bj0C,KCR5BowC,SAAS8D,QAAQ9C,SACvBziC,QAAO,SAAA1H,GAAC,OAA0B,IAAtBA,EAAEma,SAASra,WDSjB/G,KAAKi0C,WAdhB,gCAsBI,OAHKj0C,KAAKm0C,YACRn0C,KAAKm0C,UAA8Bn0C,KCX9Bo0C,SAASz+B,KAAI,SAAA1O,GAAC,OAAIA,EAAE6iB,QDapB9pB,KAAKm0C,YAtBhB,8BCgB0B,IAAC1zC,EDcvB,OAHKT,KAAKq0C,UACRr0C,KAAKq0C,SCZgB5zC,EDYUT,MCX1Bo0C,SAASz+B,KAAI,SAAA1O,GAERA,EAAEgC,MAAd,IAEI9C,EAAMc,EAAE6iB,IAAIwqB,WAGZC,EAAa9zC,EAAEuzC,WAOnB,OANA7tC,EAAI4iB,MAAMpT,KAAI,SAAA1O,GAAC,OAAIA,EAAEO,OAAKR,SAAQ,SAAAuQ,GAC3Bg9B,EAAW1vC,SAAS0S,IACvBg9B,EAAWzsC,KAAKyP,MAIb,CACLi9B,gBAAiBvtC,EACjB1D,MAAO4C,ODHFnG,KAAKq0C,UA9BhB,kCAwCI,OAHKr0C,KAAKy0C,cACRz0C,KAAKy0C,YAAkCz0C,KCzBlCyX,MAAMpO,QAAQsM,KAAI,SAAA1O,GAAC,OAAIA,EAAE/B,SD2BzBlF,KAAKy0C,cAxChB,iCAgDI,OAHKz0C,KAAK6yC,aACR7yC,KAAK6yC,WCRkB,SAACpyC,GAC5B,IAAIsyC,EAAKtyC,EAAEmxC,kBACPoB,EAAKvyC,EAAEqxC,eAGPuC,EAAU5zC,EAAEi0C,QAEZpuC,EAAO,GACPquC,EAAMl0C,EAAEuzC,WACRY,EAAMD,EAAI5tC,OACV8tC,EAAMp0C,EAAEq0C,YA+CZ,OA7CAT,EAAQrtC,SAAQ,SAACC,EAAGC,GAElB,IAIIge,EAJAusB,EAAUxqC,EAAEutC,gBAAgB9C,eAG5B3wC,EAAQkG,EAAE1D,MAEVyE,EAAMd,EAAI8rC,EAGdjyC,EAAMgoB,MAAM/hB,SAAQ,SAAAuQ,IAClB2N,EAAO,IAAIqrB,IACNM,KAAOqB,GACZhtB,EAAK3hB,MAAQgU,EAAEhU,MACf2hB,EAAKhE,OAASyzB,EAAIrrC,QAAQiO,EAAE/P,KAAOurC,EACnC7tB,EAAK4E,IAAM9hB,EAEX1B,EAAKwB,KAAKod,MAIZnkB,EAAMkN,OAAOjH,SAAQ,SAAAuQ,GACnB,IAAIlQ,EAAMkQ,EAAE/P,IACRutC,EAAWx9B,EAAEhU,OAEjB2hB,EAAO,IAAIqrB,IACNM,KL7EW,IK8EhB3rB,EAAK3hB,MAAQwxC,EACb7vB,EAAK8rB,OAAS,OACd9rB,EAAKhE,OAAS2zB,EAAIvrC,QAAQjC,GAAO0rC,EAAK6B,EACtC1vB,EAAK4E,IAAM9hB,EAEX1B,EAAKwB,KAAKod,GAIV,IAAI5d,EAAQmqC,EAAQlqC,WAAU,SAAAwpC,GAAC,OAAIA,EAAEvpC,MAAQH,KACzC2tC,EAAYvD,EAAQnqC,GAAO/D,MAE3BwxC,IACFC,EAAUlE,QAAV,mBAAgC5rB,EAAKmtB,gBAKpC/rC,EDjDe4E,CAAmBlL,OAEhCA,KAAK6yC,aAhDhB,iCAwDI,OAHK7yC,KAAK8yC,aACR9yC,KAAK8yC,WC4CkB,SAACryC,GAEdA,EAAEi0C,QAAhB,IAEI3B,EAAKtyC,EAAEgyC,kBACPO,EAAKvyC,EAAEiyC,eAEPhuC,EAASjE,EAAEuzC,WAAW/tB,OAAOxlB,EAAEq0C,aAE/BxuC,EAAO,GAUX,OATA5B,EAAOsC,SAAQ,SAACC,EAAGC,GACjB,IAAIge,EAAO,IAAIqrB,GACfrrB,EAAK2rB,KAAOqB,GACZhtB,EAAK3hB,MAAQ0D,EACbie,EAAKhE,OAASha,EAAI6rC,EAClB7tB,EAAK4E,IAAMkpB,EACX1sC,EAAKwB,KAAKod,MAGL5e,ED/De4E,CAAmBlL,OAEhCA,KAAK8yC,aAxDhB,+BAgEI,OAHK9yC,KAAKmzC,WACRnzC,KAAKmzC,SAAWnzC,KAAKozC,WAAWntB,OAAOjmB,KAAKqzC,aAEvCrzC,KAAKmzC,WAhEhB,gCAoEI,OCoDwB,SAAC1yC,GAC3B,IAAI6yC,EAAY7yC,EAAE8yC,SAEdC,EAAQF,EAAUvtB,QACpB,WAAqC9e,GAArC,IAAGwsC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,OAAQC,EAA3B,EAA2BA,OAA3B,MAA4C,CAC1CH,OAAQA,EAASxsC,EAAE6iB,IAAM2pB,EAASxsC,EAAE6iB,IACpC4pB,OAAQA,EAASzsC,EAAEia,OAASwyB,EAASzsC,EAAEia,OACvCyyB,OAAQA,EAAS1sC,EAAE6iB,IAAM6pB,EAAS1sC,EAAE6iB,IACpC8pB,OAAQA,EAAS3sC,EAAEia,OAAS0yB,EAAS3sC,EAAEia,UAL/B,cAOVuyB,OAAQH,EAAU,GAAGxpB,IAAK4pB,OAAQJ,EAAU,GAAGpyB,OAC/CyyB,OAAQL,EAAU,GAAGxpB,KARX,SAQwBwpB,EAAU,GAAGpyB,SAGjD,OAAO/X,GACJqqC,EAAMC,OAAQD,EAAME,OAAQF,EAAMG,OAAQH,EAAMI,QDnE1C1oC,CAAkBlL,QApE7B,iCA8EI,IAAImG,EAAM,CACR,OAAQnG,KAAK6zC,WAOf,OAJA7zC,KAAKuzC,SAASvsC,SAAQ,SAAAC,GACpBd,EAAIc,EAAEorC,SAAWprC,EAAE6sC,cAGd3tC,MAtFX,KEAa8uC,GAAb,+FAII,MAAO,CAAEj1C,KAAKk1C,WAAYl1C,KAAKk0C,WAJnC,8BAcI,OAHKl0C,KAAKm1C,UACRn1C,KAAKm1C,QAAUjqC,GAAgBlL,OAE1BA,KAAKm1C,UAdhB,iCAsBI,OAHKn1C,KAAKo1C,aACRp1C,KAAKo1C,WAAalqC,GAAmBlL,OAEhCA,KAAKo1C,aAtBhB,iCA0BI,IAAIjvC,EAAM,CACR8oC,OAAS,GACTI,WAAa,IAQf,OALArvC,KAAKq1C,OAAOruC,SAAQ,SAAAC,GAClBd,EAAI8oC,OAAOhoC,EAAEgJ,OAAShJ,EAAE6sC,WACxB3tC,EAAIkpC,WAAWvnC,KAAKb,EAAEgJ,UAGjB9J,MApCX,KCYamvC,GAAa,SAAC70C,GACzB,IAAIC,EAAK,IAAI8xC,GAKb,OAHA9xC,EAAG0vC,SAAW3vC,EACdC,EAAGuP,MAAQ,OAEJvP,GAGI60C,GAAgB,SAAC90C,GAC5B,IAAIC,EAAK,IAAIqzC,GAKb,OAHArzC,EAAG0vC,SAAW3vC,EACdC,EAAGuP,MAAQ,WAEJvP,GC7BIgb,GAAQ,QACRiD,GAAS,SC2BTxJ,GAAS,WACpB,OAAO3G,GAAOF,UAOK83B,G,WACnB,aAAe,IAAD,gCA8BdoP,cAAe,EA9BD,KAgCdC,YAAczkC,EAhCA,KAiFd3H,aAAU1J,EAjFI,KAkFdyxC,cAAWzxC,EAlFG,KAmFdujB,cAAWvjB,EAnFG,KAoFdsJ,WAAQtJ,EApFM,KAsFd+1C,KAAO,WACL,EAAKrsC,QAAU,GACf,EAAK6Z,SAAW,GAChB,EAAKkuB,SAAW,GAChB,EAAKnoC,MAAQ,GAGb,EAAK2O,mBAAqB,GAC1B,EAAK+9B,2BAA6B,IA9FtB,KAqGdC,UAAY,SAAC11C,GACX,IAAIoG,EAAO,EAAK+C,QACZ0C,OAAOpM,EACP2H,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAE/B,OAAShF,KAC3C,OAAe,IAAXoH,GACFyE,EC7Ia,SAACtL,EAAG2G,GACrB,IAAI1G,EAAK,IAAIsI,GAGb,OAFAtI,EAAGwE,KAAOzE,EACVC,EAAG0I,KAAOhC,EACH1G,EDyII6pC,CAAYrqC,EAAG,GACtBoG,EAAKwB,KAAKiE,GACHA,GAGAzF,EAAKgB,IA/GF,KAmHdoQ,OAAS,SAACxX,EAAG+Y,GACX,IAAI3S,OAAO3G,EAOPoM,OAAOpM,EACP2H,GANFhB,EADE2S,EACKA,EAAQmI,SAER,EAAK8B,UAIG3b,WAAU,SAAAN,GAAC,OAAIA,EAAE/B,OAAShF,KAC3C,OAAe,IAAXoH,IACFyE,EAAOq+B,GAAYlqC,EAAG,IACjBiZ,QAAUF,EAEf3S,EAAKwB,KAAKiE,GACV,EAAKqlC,SAAStpC,KAAKiE,GACZA,GAGAzF,EAAKgB,IAtIF,KA0IduuC,QAAU,SAAC5tC,EAAKD,GAAwB,IAAnB8tC,IAAkB,yDACjCxvC,EAAO,EAAK2C,MACZ8C,OAAOpM,EACP2H,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEia,SAAWjZ,GAAOhB,EAAE6iB,MAAQ9hB,KAC9D,IAAe,IAAXV,EAAc,CAChB,IAAKwuC,EAAQ,OAIb,OAFA/pC,EAAO29B,GAAazhC,EAAKD,EAAK,GAC9B1B,EAAKwB,KAAKiE,GACHA,EAGP,OAAOzF,EAAKgB,IAtJF,KA2JdyuC,MAAQ,WACN,IAAIC,EAAW,EAAK3zB,YAEhB2zB,IAAahlC,GACfmE,KAASiB,eAAeC,OAAOrP,SAAQ,SAAAC,GAC3B,EAAK2uC,UAAU5kC,GAAmB/J,EAAG+uC,OAInD,EAAKlqC,MAAM9E,SAAQ,SAAAC,GACjB,OAAQ+uC,GACN,KAAKhlC,EACH/J,EAAEqb,mBAAmBtb,SAAQ,SAAAuQ,GAC3B,EAAKgL,WAAWtb,EAAGsQ,MAErB,MACF,QACE,EAAKgL,WAAWtb,EAAGA,EAAE8J,SAASilC,QAK/B,EAAKC,iBACR,EAAK31B,cAlLK,KAsLd21B,iBAAkB,EAtLJ,KAuLdC,mBAAoB,EAvLN,KAyLdC,aAAe,GAzLD,KA0LdC,kBAAoB,GA1LN,KA4Ld9P,wBAA0B,GA5LZ,KAsMd+P,gBAAkB,SAACtqC,GACjB,GAAI,EAAKsW,cAAgBrR,EACvB,EAAKmlC,aAAaruC,KAAKiE,OAClB,CACL,IAAIzF,EAAO,EAAK8vC,kBACZ9uC,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEoiC,OAASt9B,KACvC5F,OAAMxG,GACK,IAAX2H,GACFnB,EAAM,CACJkjC,KAAMt9B,EACNkJ,MAAO,GAET3O,EAAKwB,KAAK3B,IAEVA,EAAMG,EAAKgB,GAEbnB,EAAI8O,QAEA9O,EAAI8O,QAAUlJ,EAAKuW,mBAAmBvb,QACxC,EAAKovC,aAAaruC,KAAKiE,GAI3B,EAAKg4B,aAAe,EAAKoS,aAAapvC,OAAS,EAAK+E,MAAM/E,OAEtD,EAAKovC,aAAapvC,SAAW,EAAK+E,MAAM/E,SAC1C,EAAKuZ,aACL,EAAK61B,aAAe,KAjOV,KAqOd71B,WAAa,WACX,EAAK4C,SAASlc,SAAQ,SAAAC,GAAC,OAAIA,EAAEqZ,gBAC7B,EAAK4C,SAAWknB,GAAc,EAAKlnB,UAEnC,EAAKja,MAAMjC,SAAQ,SAAAC,GAAC,OAAIA,EAAEqZ,gBAE1B,EAAKg2B,kBAAmB,GA3OZ,KA8OdjQ,yBAA2B,GA9Ob,KAoPd9jB,WAAa,SAACxW,EAAMwqC,EAAex0B,EAAKy0B,GACtC,IAAIvuC,EACF,EAAK2tC,UAAU5kC,GAAmBulC,EAAe,EAAKl0B,cACpD2nB,EAAOwM,EAAa,CAACA,GAAc,GACnCz0B,EAAMA,GAAY,EAAK6P,QAE3B,EAAK6kB,oBAAoB1qC,EAAM9D,EAAK+hC,EAAMjoB,EAAK,IA1PnC,KA8Pd20B,wBAA0B,SAAC3qC,EAAM9D,EAAK+hC,EAAM/c,EAAKlL,EAAK40B,GACpD,IAAItmB,EAAOtO,EAAIjW,MACX8qC,EAAYvmB,EAAKtpB,OACjB4I,EAAM0gB,EAAKsmB,GAGXE,EAA0B,IAAhB7M,EAAKjjC,OAAeijC,EAAKA,EAAKjjC,OAAS,QAAKpH,EAE1DgQ,EAAIoH,UAAU8/B,GAEd,IAAIC,EAAWnnC,EAAI6E,MACnB,GAAKsiC,EAAL,CAKA,IAAIC,EAAc/lC,GAAmBic,EAAK6pB,GACtC3jC,EAAY0jC,EAAO,UAAMA,EAAQ3hC,UAAd,aAA4B6hC,GAAgBA,EAEnE,GAAIpnC,EAAI8G,iBAAiB5R,SAASsO,GAChC,EAAKkjC,gBAAgBtqC,OADvB,CAKA,IACMyL,EAAS,SAACH,GACd,OAAO,EAAK2/B,cAAc7jC,EAAWkE,IAGjCQ,EAAY,SAAC7P,GAEjBA,EAAIshB,SAAWytB,EACf/uC,EAAI8H,cAAgBH,EACpBq6B,EAAKliC,KAAKE,GAEV,IAAIivC,EAAUtnC,EAAI6G,cACd0gC,EAAWD,EAAQ1vC,WAAU,SAAAN,GAAC,OAChCiS,GAAmBjS,EAAE+Q,OAAQ7E,OACb,IAAd+jC,KACFn1B,EAAMk1B,EAAQC,IACVx+B,gBAAiB,EAErBi+B,GAAiB,EACjBC,EAAY70B,EAAIjW,MAAM/E,OAEtBiB,EAAIma,sBAAwBJ,GAGnB,EAAK8zB,QAAQ5tC,EAAKD,GACxB8D,MAAMhE,KAAKiE,GAEZ4qC,IAAkBC,EAAY,EAChC,EAAKP,gBAAgBtqC,GAErB,EAAK0qC,oBAAoB1qC,EAAM9D,EAAK+hC,EAAMjoB,EAAK40B,EAAgB,IAI/DQ,EAAUxnC,EAAIgH,QAAQxD,EAAW4jC,GACjC9+B,EAAak/B,EAAQj/B,OACzB,GAAID,EAAY,CAEd,IAAIE,EAAUg/B,EAAQxmC,SAGtBsH,EAAWtB,QAAQxD,EAAW4jC,GAG1BF,IACFA,EAAQ11B,oBAAqB,GAG/B,EAAK/I,kBAAkBH,EAAYE,EAASX,EAAQK,EAAWg/B,QAG/Dh/B,EADML,EAAOq/B,UA9Db,EAAKR,gBAAgBtqC,IA1QX,KA6UdirC,cAAgB,SAAC7jC,EAAWkE,GAC1B,IAAI+/B,EAAK,EAAK1/B,OAAOvE,EAAWkE,GAEhC,OADA+/B,EAAGliC,UAAY/B,EACRikC,GAhVK,KAmVdh/B,kBAAoB,SAACH,EAAYE,EAASX,EAAQK,EAAWw/B,GAC3D,IAAIC,EA4BEC,EAAW,WACf,IAP0BvvC,EAOtBwvC,EA1BY,WAChB,IAAIlxC,EAAO2R,EAAWpB,QAClBvP,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAE/B,OAASiT,KAC3C,IAAe,IAAX7Q,EAEF,OADAgwC,GAAoB,EACbhxC,EAAKgB,GAqBLmwC,GACT,GAAID,EAAI,CACN,IAAIE,EAjBqB,SAACrgC,GAC5B,IAAIsgC,EAAKngC,EAAOH,GAGhB,OAFAsgC,EAAGxzB,WAAalM,EAET0/B,EAaGC,CAAqBJ,IATLxvC,EAUL0vC,GATjB7zB,gBAAkBwzB,EACtBrvC,EAAI4b,YAAa,EASf/L,EAAU6/B,KAIdH,IACApuC,GACE8O,EAAWnB,wBACX,WAAO,IAAD,EACCwgC,IAAqB,UAAAr/B,EAAWjB,cAAX,eAAmB9R,QAASiT,GACpDo/B,OAGJ,IAjYU,KAiZdd,oBAAsB,SAAC1qC,EAAM9D,EAAK+hC,EAAMjoB,EAAK40B,GAC3C,IAAIG,EAAW/0B,EAAIjW,MAAM6qC,GAAeniC,MAEpCyY,EAAMlhB,EAAKgF,SAAS+lC,GAAU,SAAC7pB,GAAD,OAChC,EAAKypB,wBAAwB3qC,EAAM9D,EAAK+hC,EAAM/c,EAAKlL,EAAK40B,MACrDxpB,MAAMC,QAAQH,GAGjB,EAAKgpB,iBAAkB,EAFvB,EAAKS,wBAAwB3qC,EAAM9D,EAAK+hC,EAAM/c,EAAKlL,EAAK40B,IAvZ9C,KAkadkB,cAAgB,WAEd,IAAIC,EAAc,EAAKC,oCACnB5xC,EAAM,EAAK6xC,kBACf7xC,EAAI2F,MAAJ,YAAgBgsC,EAAYhsC,OAC5B3F,EAAIoW,YAAcu7B,EAAY76B,aAE9B,EAAKg7B,qBAAuBC,GAC5B,EAAKhC,mBAAoB,GA1ab,KA6ad+B,0BAAuBt4C,EA7aT,KA+adw4C,4BAA8B,WAC5B,OAAQ,EAAKF,sBACX,KAAKC,GACH,EAAKD,qBAAuBC,GAC5B,MACF,KAAKA,GACH,EAAKD,qBAAuBC,KArbpB,KA4cdE,mBAAgBz4C,EA5cF,KA6fd04C,iBAAmB,WACjB,IAAK,EAAKC,eAA+C,IAA9B,EAAKA,cAAcvxC,OAC5C,OAAQ,EAAKkxC,sBACX,KAAKC,GAEH,YADA/1C,IAAQ+7B,QAAQ,sDAElB,KAAKga,GAEH,YADA/1C,IAAQ+7B,QAAQ,qDAKtB,IAAIqa,GAAyB,EACzB7iC,EAAQP,KAASuxB,sBAAsB56B,MACvCxE,EAAQoO,EAAMnO,WAAU,SAAAN,GAAC,OAAIA,EAAE/B,OAAS,EAAKozC,iBAC7CpvC,OAAMvJ,GACK,IAAX2H,IACF4B,EAAMwM,EAAMpO,GAAO4B,IAEf,EAAK+uC,uBAAyBC,KAChCK,GAAyB,IAI7B,IAAMC,EAAyB,WAC7B,IAAIhnC,EAAU,CACZtI,MACAyW,KAAM,EAAK24B,cACXzlB,YAAaiO,GACbz/B,KAAM,CACJmyB,mBAAoB,EAAK5B,QAAQngB,UAIjC9O,EAAG,mCAEH4vB,GAAQrpB,EACRwI,EAAU6gB,EAAQ,MAAQ,QACPA,EACrB5gB,EAAA,UAAYhP,EAAZ,YAAmB+O,GAAWF,GADDG,EAAA,UAAWhP,EAAX,YAAkB+O,GAAWF,IAGlDI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACJ,IAAIo3C,EAAQ,EAAKV,oCAEb3wC,EAAO+N,KAASuxB,sBAChB36B,EAAO2sC,GAAYr3C,EAAM+F,GACzBmvB,EAhjBLjC,GAAShmB,SAgjBgBovB,wBACpBR,EAASyb,GAAc5sC,EAAMwqB,GAE7BhE,GACFnrB,EAAK0E,MAAMhE,KAAKiE,GAChBwqB,EAAOzqB,MAAMhE,KAAKo1B,GAElBub,EAAM3sC,MAAMhE,KAAKo1B,KAEjB91B,EAAK0E,MAAMxE,GAASyE,EACpBwqB,EAAOzqB,MAAMxE,GAASyE,EAEtB0sC,EAAM3sC,MAAMxE,GAAS41B,EAEjBub,EAAM97B,gBAAkBrV,IAC1BmxC,EAAMl8B,YAAc2gB,IAIxB/6B,IAAQF,QAAR,UAAmByP,EAAnB,+BAGJ,EAAKwkC,mBAAoB,EACzB,EAAK0C,gBAAgB13C,QAAUgK,GAAsB,IAGnDqtC,EACFC,KAEA,EAAKK,gCACH,kBAAML,KAER,EAAKM,kCAAmC,IA5kB9B,KAglBdA,kCAAmC,EAhlBrB,KAqmBdC,qBAAuB,WACrB,EAAK7C,mBAAoB,EACzB,EAAK0C,gBAAgB13C,QAAUgK,GAAsB,IAvmBzC,KA0mBd8tC,WAAa,WACX,OAAO5O,QAAYzqC,EAAW,IA3mBlB,KA2oBdovC,OAAS,WACP,EAAKoB,YAAYpB,UA5oBL,KAqpBd1pB,8BAAgC,SAACrd,GAC/B,EAAK2tC,2BAA2B7tC,KAAKE,GAEjC,EAAK4P,mBAAmB7Q,OAAW,EAAK4uC,2BAA2B5uC,QAvpBvEhH,YAAeC,KAAM,CACnBw1C,aAAcv1C,IACdoJ,QAASpJ,IACTijB,SAAUjjB,IACVgJ,MAAOhJ,IACPw1C,YAAax1C,IACbi2C,kBAAmBj2C,IACnBg4C,qBAAsBh4C,IACtB64C,iCAAkC74C,M,kDAOpC,OAAOD,KAAK0V,O,aAEJxV,GACRF,KAAK0V,MAAQxV,EAETA,GAAkB,IAAbA,EAAE6G,QACT/G,KAAK+1C,QACL/1C,KAAKw1C,cAAe,GAGpBx1C,KAAKw1C,cAAe,I,kCAQtB,OAAOx1C,KAAKy1C,a,aAEEv1C,GACdF,KAAKy1C,YAAcv1C,I,uCAKnB,OAAOF,KAAKi5C,kB,aAEO/4C,GACnBF,KAAKi5C,iBAAmB/4C,EAItBF,KAAK4xB,QAHF1xB,EAGYuZ,GAAevZ,EAAE2T,KAAK+E,oBAFtB1Y,I,8BAWjB,OAHKF,KAAKk5C,UACRl5C,KAAKk5C,QrHpFe,SAACz4C,GACzB,IAAIC,EAAK,IAAIkY,GAETugC,EAAOj3B,GAAYlR,GAGvB,OAFAtQ,EAAGoL,MAAQ,CAACqtC,GAELz4C,EqH8EYwK,IAEVlL,KAAKk5C,S,aAEFh5C,GACVF,KAAKk5C,QAAUh5C,EACfF,KAAK01C,OAIH11C,KAAKikB,QAHF/jB,EAGYgL,GAAgBlL,WAFhBL,I,8BAWjB,OAHKK,KAAKo5C,UACRp5C,KAAKo5C,QAAUluC,GAAgBlL,OAE1BA,KAAKo5C,S,aAEFl5C,GACVF,KAAKo5C,QAAUl5C,I,8BAoBf,OrHhHsB,SAACO,GACzB,IAAI6F,EAAO,GAIX,OAHA7F,EAAEyiB,SAASlc,SAAQ,SAAAC,GACjBX,EAAKwB,KAAKkR,MAAM1S,EAAMW,EAAEuJ,aAEnBlK,EqH2GE4E,CAAgBlL,Q,mCA8FvB,OAAOA,KAAK6jC,c,aACK3jC,GACjBF,KAAK6jC,aAAe3jC,EACpBF,KAAKsmC,wBAAwBt/B,SAAQ,SAAAC,GAAC,OAAIA,EAAE/G,Q,qCA6CzBA,GACnBF,KAAKqmC,yBAAyBr/B,SAAQ,SAAAC,GAAC,OAAIA,S,0DA8K3C,OAAOjH,KAAKoJ,KAAKA,KAAK68B,SAASR,2B,sDA4B/B,OAAQzlC,KAAKi4C,sBACX,KAAKC,GACH,MAAO,cACT,KAAKA,GACH,MAAO,iB,oDAKX,OAAQl4C,KAAKi4C,sBACX,KAAKC,GACH,MAAO,MACT,KAAKA,GACH,MAAO,S,oCASX,OAHKl4C,KAAKo4C,gBACRp4C,KAAKo4C,cAAgBltC,GAAsBlL,OAEtCA,KAAKo4C,e,aAEIl4C,GAChBF,KAAKo4C,cAAgBl4C,I,sCAIA,IAAD,OACfF,KAAKq5C,mBACEr5C,KAAKq5C,gBACbhiB,EAAar3B,KAAKs4C,cAAe,yCAC/Bn4C,aAAe,SAACD,GAAD,OAAO,EAAKo4C,cAAgBp4C,IAEjD,OAAOF,KAAKq5C,kB,wCAIW,IAAD,OACtB,IAAKr5C,KAAKs5C,kBAAmB,CAC3B,IAAInzC,EAAMnG,KAAKs5C,kBAAoBvxB,GAAe,QAAIpoB,GACtDwG,EAAIuE,YAAc,wCAClBvE,EAAIsU,sBAAwB,SAACva,GAC3B,EAAKo4C,cAAL,OAAqBp4C,QAArB,IAAqBA,OAArB,EAAqBA,EAAGgF,MAG5B,OAAOlF,KAAKs5C,oB,6CAGgB,IAAD,OAC3B,OAAQt5C,KAAKi4C,sBACX,KAAKC,GACH,IACI5xC,GADAH,EAAMnG,KAAKg4C,mBACAlsC,MACXxE,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAE/B,OAAS,EAAKozC,iBAGhD,OAFAnyC,EAAIoW,aAAyB,IAAXjV,EAChBhB,EAAKgB,QAAS3H,EACT,cAAC,GAAD,CAAYwB,MAAOgF,IAC5B,KAAK+xC,GACH,IAAI/xC,EAEJ,OAFIA,EAAMnG,KAAK44C,iBACX13C,QAAUlB,KAAKs4C,cACZ,cAAC,EAAD,CAAWn3C,MAAOgF,O,sDAyFQ,IAAD,OAYpC,OAAO,cAAC,KAAD,CAAOiK,MAXF,mBAYV6X,QAASjoB,KAAK84C,iCACd5wB,KAPc,WACd,EAAK4wB,kCAAmC,EACxC,EAAKD,mCAKU1wB,SAVG,kBAClB,EAAK2wB,kCAAmC,GAOnC,SAVO,uG,kCA2BG,IAAD,EACZv5C,EAAI,UAAG4V,KAASg5B,sBAAZ,aAAG,EAAyBjpC,KACpC3F,EAAOA,EAAOA,EAAO,IAAM,GAEvBS,KAAKqiB,cAAgBrR,IACvBzR,GAAQ,UAGV,IAAMg6C,EAAeC,KAAMC,KAAKC,OAAOC,OAAO,UAE9C,OADAp6C,GAAI,oBAAiBg6C,K,oCAKrB,OF7pBe,SAAC5gC,GAClB,IAAIjY,EAAK,IAAIu0C,GAIb,OAFAv0C,EAAG+W,MAAQkB,EAEJjY,EEwpBEk5C,CAAW55C,MAAM8zC,a,kCAIP,IAAD,OAOhB,OANK9zC,KAAK65C,cACR75C,KAAK65C,YEtqBQ,SAAC3J,EAAUlB,EAAI8K,EAAcC,GAC9C,IAAIr5C,EAAK,IAAIyvC,GAOb,OALAzvC,EAAGgvC,SAAWQ,EACdxvC,EAAGuvC,sBAAwB6J,EAC3Bp5C,EAAG0vC,SAAWpB,EACdtuC,EAAG2vC,sBAAwB0J,EAEpBr5C,EF8pBgBs5C,MACjBr6C,OAAWA,GACX,kBAAM,EAAKs6C,eACX,kBAAM,EAAKC,kBAERl6C,KAAK65C,gB,KG1qBK5U,G,8FAGjB,OAAOjlC,KAAK0V,O,aAEJxV,GACRF,KAAK0V,MAAQxV,EACbF,KAAKomC,UAAUt6B,MAAQ5L,I,gCAQvB,OAHKF,KAAKmmC,YACRnmC,KAAKmmC,UCbiB,SAAC1lC,GAC3B,IAAIC,EAAK,IAAI0lC,GAGb,OAFA1lC,EAAG0I,KAAO3I,EAEHC,EDScwK,CAAkBlL,OAE9BA,KAAKmmC,Y,qCAGOjmC,GACnBF,KAAKomC,UAAU1U,iBAAmBxxB,M,KEhBzBiV,GAAS,WACpB,OAAO3G,GAAOF,UAGK8H,G,4DACnB6tB,SAAW,G,KAEX5tB,OAAS,G,KAcTmgB,qBAAuB,G,KAMvBkN,aAAc,E,KAadI,YAAc,gBAE6BnkC,IAApCwV,KAASglC,uBAEZhlC,KAASglC,wBAAyB,EAGlChlC,KAASglC,wBAAyB,EAGpC,I3JmBmB3oC,EAASD,E2JnBxB6oC,EAAUjlC,KAASU,iBACnBukC,EAAQC,eACVD,EAAQE,c3JiBS9oC,E2JdC,EAAKC,Q3JcGF,E2JdM,SAACmE,GACjC,IAAItO,EAAO,EAAK69B,cAEhB79B,EAAKsqB,iBAAmB,EAAKA,iBAC3B,EAAKA,sBAAmB/xB,EAC1ByH,EAAK0E,MAAQ4J,EAEb,EAAKotB,cAAe,G3JYxBnxB,EAJU,yCAIIH,OAAS7R,EAAW,KAC/BiS,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QAC1BuQ,MAAK,SAAAvQ,GAIJ,GAAKA,EAAL,CAKA,IAAIqU,EAAQrU,EAAKsU,KAAI,SAAA1O,GACnB,OAAOzG,GAAIyG,MAETsK,GACFA,EAAOmE,QARPkU,QAAQC,IAAI,6B,oD2JvEhB,MCJK,CACL0wB,YAFuB95C,EDKAT,MCHRikC,SAAStuB,KAAI,SAAA1O,GAAC,OAAIA,EAAEiC,OACnCsxC,SAAW/5C,EAAE8kC,YAAc9kC,EAAE4V,OAAOV,KAAI,SAAA1O,GAAC,OAAIA,EAAEiC,YAAOvJ,GAHhC,IAACc,I,oCDavB,OAHKT,KAAKglC,gBACRhlC,KAAKglC,cClBqB,SAACvkC,GAC/B,IAAIC,EAAK,IAAIukC,GAEb,OADAvkC,EAAG0I,KAAO3I,EACHC,EDekBwK,CAAsBlL,OAEtCA,KAAKglC,gB,iCAKI9kC,GAChBF,KAAKw2B,qBAAqBxvB,SAAQ,SAAAC,GAAC,OAAIA,S,kCAKvC,OAAOjH,KAAK0jC,a,aAEExjC,GACdF,KAAK0jC,YAAcxjC,EAEnBF,KAAKilC,cAAcmB,UAAU/jB,YADzBniB,EACuC8Q,EAEEA,M,KEjCpCxQ,GAAM,SAAC4R,GAClB,IAAI1R,EAAK,IAAI+9B,GAQb,OAPA/9B,EAAG0C,QAAUgP,E7JyFU,SAACG,EAAWhB,GACnC,GAAKgB,EAAL,CACA,IAAI5P,EAAG,yDAAqD4P,GAC5DZ,EAAQhP,GAAKiP,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACJ,IAAIqU,OAAQ/V,EAIN+V,EAHDrU,EAGSA,EAAKsU,KAAI,SAAA1O,GAAC,OAAIzG,GAAIyG,MAFtB,GAINsK,GACFA,EAAOmE,O6JlGb+kC,CADgB/5C,EAAG6R,WACe,SAACmD,GACjChV,EAAGoL,MAAQ4J,KAGNhV,GAGIwqC,GAAa,SAACzqC,GACzB,IAAIC,EAAK,IAAIipC,GAoCb,OAlCAjpC,EAAGypC,WAAa1pC,EAAEqL,MAClBpL,EAAG2I,QAAU,CACXkhC,GAAY,4BAAgB,CAAC,OAAQ,eACnC,CACEt+B,GAAeb,IAAa,SAAC6hB,EAAKlhB,GAAN,OAAeA,EAAK+G,KAAKrP,gBACpD/C,GAEL6pC,GAAY,qBAAY,CAAC,OAAQ,YAC/B,CACEt+B,GAAeb,IAAa,SAAC6hB,EAAKlhB,GAAN,OAAeA,EAAK+G,KAAKnP,aACpDjD,GAEL6pC,GAAY,+BAAc,CAAC,OAAQ,YACjC,CACEt+B,GAAeb,IAAa,SAAC6hB,EAAKlhB,GAAN,OAAeA,EAAK+G,KAAKjP,aACpDnD,GAEL6pC,GAAY,4BAAc,CAAC,SAAU,KAAM7pC,GAE3C6pC,GAAwB7pC,IAG1BA,EAAGupC,gBAAkB,WACnB,O7Jf+B,SAAC73B,GAClC,IAAI1R,EAAK,IAAIkQ,GAEblQ,EAAG8C,K8JhCa,K9JiChB9C,EAAGgD,SAAWoB,EACdpE,EAAGoS,KAAO,GACVpS,EAAG6R,UAAYH,EAAQlJ,IAEvB,IAAMwxC,EAAmB,SAACC,GACxBj6C,EAAGgS,YAAcioC,EAAUzxC,IAE3B,IAAI0xC,EAAiBD,EAAUE,eAC1BD,EAMHl6C,EAAGiS,mBAAqBioC,EAAe1xC,IALvCyxC,EAAUG,6BAA6BhzC,MAAK,WAC1C8yC,EAAiBD,EAAUE,eAC3Bn6C,EAAGiS,mBAAqBioC,EAAe1xC,QAOzC6xC,EAAiB3oC,EAAQssB,eAW7B,OAVKqc,EAOHL,EAAiBK,GANjB3oC,EAAQ4oC,8BACLlzC,MAAK,WACJizC,EAAiB3oC,EAAQssB,eACzBgc,EAAiBK,MAMhBr6C,E6JlBE+5C,CAAiCh6C,EAAE2C,UAG5C1C,EAAG4pC,WAAa,SAACv+B,GACfA,EAAKuF,eAGP5Q,EAAG2pC,aAAe,SAACt+B,GACjBA,EAAK8F,kBAGAnR,GExDY+9B,G,iDAYnB/oB,MAAQ,G,oDATN,OAAO1V,KAAKoS,S,aAEFlS,GACVF,KAAKoS,QAAUlS,EACfF,KAAKuS,UAAYrS,EAAEgJ,M,4BAOnB,OAAOlJ,KAAK0V,O,aAEJxV,GACRF,KAAK0V,MAAQxV,EACbF,KAAK2pC,QAAQQ,WAAajqC,I,8BAQ1B,OAHKF,KAAKirC,UACRjrC,KAAKirC,QAAU//B,GAAgBlL,OAE1BA,KAAKirC,Y,KCxBHgQ,GAAb,4DAaE/qC,OAAS,WACP,EAAK9G,KAAKsL,YAAYjN,OAAO,EAAK0I,MAAO,IAd7C,KA6BEwe,gCAAkC,GA7BpC,+CAMI,OAHK3uB,KAAKkJ,MACRlJ,KAAKkJ,IAAMC,MAENnJ,KAAKkJ,MANhB,4BAUI,OAAOlJ,KAAKoJ,KAAKsL,YAAYpL,QAAQtJ,QAVzC,8BAkBI,MAAO,CACLk7C,OAASl7C,KAAKm/B,OAASn/B,KAAKm/B,OAAS,GACrCH,QAASh/B,KAAK2U,WApBpB,4BAyBI,OAAO3U,KAAKm/B,OAAOp4B,SAzBvB,0CA+BI,OAAO/G,KAAKm7C,qBA/BhB,aAiC0Bj7C,GACtBF,KAAKm7C,oBAAsBj7C,EAC3BF,KAAK2uB,gCAAgC3nB,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,aAnCxD,uCAwC0B,IAAD,OACjB4C,EAAMnG,KAAKoJ,KAAK81B,iBAOpB,OANK/4B,GAAQnG,KAAKo7C,yBAChBp7C,KAAKo7C,wBAAyB,EAC9Bp7C,KAAKkyB,QAAQmN,4BAA4Bv3B,MAAK,WAC5C,EAAKuzC,qBAAsB,MAGxBl1C,IAhDX,8BAoDI,OAAOnG,KAAKoJ,KAAK8oB,UApDrB,kCAuDoB,IAAD,OACf,OAAOlyB,KAAKm/B,OAAOxpB,KAAI,SAAA1O,GAAC,OAAI,EAAKi4B,iBAAiB51B,QAAQrC,QAxD9D,+BA6DI,OADWjH,KAAKk/B,iBACJ15B,KAAK81C,IAAItiC,MAAMxT,KAAMxF,KAAKu7C,gBA7D1C,+BAkEI,OADWv7C,KAAKk/B,iBACJ15B,KAAKg2C,IAAIxiC,MAAMxT,KAAMxF,KAAKu7C,gBAlE1C,kCAsEI,GAAKv7C,KAAKk/B,iBACV,MAAM,QAAN,OAAel/B,KAAKy7C,SAApB,cAAkCz7C,KAAK07C,SAAvC,aAAoD17C,KAAKiV,MAAzD,OAvEJ,sCA2EI,GAAKjV,KAAK+yB,YACV,MAAM,GAAN,OAAU/yB,KAAKoJ,KAAKuyC,kBAApB,aAA0C37C,KAAK+yB,YAA/C,OA5EJ,8BAoFI,OAHK/yB,KAAKg/B,UACRh/B,KAAKg/B,QAAU9zB,GAAuBlL,OAEjCA,KAAKg/B,SApFhB,aAqFgB9+B,GACZF,KAAKg/B,QAAU9+B,MAtFnB,KCDaM,GAAM,SAACa,EAAM+F,GACxB,IAAI1G,EAAK,IAAIu6C,GAUb,OARI9tB,MAAMC,QAAQ/rB,GAChBX,EAAGy+B,OAAS99B,GAEZX,EAAGy+B,OAAS99B,EAAK65C,OACjBx6C,EAAGiU,QAAUtT,EAAK29B,SAGpBt+B,EAAG0I,KAAOhC,EACH1G,GAGIg7B,GAAa,SAACt0B,GACzB,IAAI1G,EAAK,IAAIu6C,GAEb,OADAv6C,EAAG0I,KAAOhC,EACH1G,GAIIg/B,GAAoB,SAACj/B,GAChC,GAAIA,EAAE0+B,QAA8B,IAApB1+B,EAAE0+B,OAAOp4B,OACvB,OAAOtG,EAAE0+B,OAAO,ICvBPyc,GAAb,iDACEr4C,WAAQ5D,EADV,KAEEmgC,UAAYC,GAFd,oDAKI,MAAO,CACLh/B,MAAOf,KAAKuD,MACZq8B,UAAY5/B,KAAK8/B,eAPvB,KCAa+b,GAAb,4DAaE3rC,OAAS,WACP,EAAK9G,KAAKmL,QAAQ9M,OAAO,EAAK0I,MAAO,IAdzC,KAsBErE,MAAQ,GAtBV,KAwBE20B,QAAU,WACR,IAAI10B,EAAO,IAAI6vC,GAEf,OADA,EAAK9vC,MAAMhE,KAAKiE,GACTA,GA3BX,+CAMI,OAHK/L,KAAKkJ,MACRlJ,KAAKkJ,IAAMC,MAENnJ,KAAKkJ,MANhB,4BAUI,OAAOlJ,KAAKoJ,KAAKmL,QAAQjL,QAAQtJ,QAVrC,6BAmBI,OAAOA,KAAK8L,MAAM6C,QAAO,SAAA1H,GAAC,OAAIA,EAAE1D,SAAOoS,KAAI,SAAA1O,GAAC,OAAIA,EAAE1D,WAnBtD,4BAmCI,OAHKvD,KAAKyE,QACRzE,KAAKyE,MAAQzE,KAAK4gC,iBAAiB,IAE9B5gC,KAAKyE,OAnChB,aAoCcvE,GACVF,KAAKyE,MAAQvE,IArCjB,uCAyCI,OAAOF,KAAKoJ,KAAKu3B,yBAzCrB,8BAiDI,MAJU,CACRl8B,MAAQzE,KAAKwU,MACbkB,MAAQ1V,KAAK8L,MAAM6C,QAAO,SAAA1H,GAAC,OAAIA,EAAE1D,SAAOoS,KAAI,SAAA1O,GAAC,OAAIA,EAAEwK,cA/CzD,kCAqDI,IAAItL,EAAOnG,KAAKiO,OAAO8X,QAAO,SAACxjB,EAAEyjB,EAAE9e,EAAE40C,GAKnC,OAJuB,IAAnBA,EAAIxyC,QAAQ0c,KACdzjB,GAAK,MAEPA,GAAKyjB,IAEJ,IAEH,MAAM,GAAN,OAAUhmB,KAAKwU,MAAf,aAAyBrO,OA7D7B,KCuBau1B,GAAa,SAACt0B,GACzB,IAAI1G,EAAK,IAAIm7C,GAEb,OADAn7C,EAAG0I,KAAOhC,EACH1G,GCxBIq7C,GAAb,4DASE72C,KAAO,iBATT,KAeEgL,OAAS,WACP,EAAK9G,KAAK+K,UAAU1M,OAAO,EAAK0I,MAAO,IAhB3C,KA2CEoxB,cAAgB,WACd,IAAIx1B,EAAOy1B,GAA0B,GAErC,OADA,EAAK9sB,YAAY5M,KAAKiE,GACfA,GA9CX,KA4DE01B,UAAY,WACV,IAAI11B,EAAOmN,GAAsB,GAEjC,OADA,EAAK3E,QAAQzM,KAAKiE,GACXA,GA/DX,+CAMI,OAHK/L,KAAKkJ,MACRlJ,KAAKkJ,IAAMC,MAENnJ,KAAKkJ,MANhB,4BAYI,OAAOlJ,KAAKoJ,KAAK+K,UAAU7K,QAAQtJ,QAZvC,6CAoBI,OAAOA,KAAKoJ,KAAKu3B,yBApBrB,8BAyBI,OAAO3gC,KAAKoJ,KAAK8oB,UAzBrB,uCA8BI,OAAOlyB,KAAKoJ,KAAK81B,mBA9BrB,kCAsCI,OAHKl/B,KAAKouB,cACRpuB,KAAKouB,YAAcljB,GAAoBlL,OAElCA,KAAKouB,aAtChB,aAuCoBluB,GAChBF,KAAKouB,YAAcluB,IAxCvB,8BAuDI,OAHKF,KAAKsU,UACRtU,KAAKsU,QAAUpJ,GAAgBlL,OAE1BA,KAAKsU,SAvDhB,aAwDgBpU,GACZF,KAAKsU,QAAUpU,IAzDnB,wCA0EI,OAPUF,KAAKuU,QAAQwR,QAAO,SAACxjB,EAAEyjB,EAAE9e,EAAE40C,GAKnC,OAJuB,IAAnBA,EAAIxyC,QAAQ0c,KACdzjB,GAAK,MAEPA,GAAKyjB,EAAE+M,cAEN,MAzEP,8BAmFI,MALU,CACRpT,KAAM3f,KAAKkF,KACXkpB,YAAcpuB,KAAK0U,YAAYiB,KAAI,SAAA1O,GAAC,OAAIA,EAAEwK,WAAS9C,QAAO,SAAA1H,GAAC,OAAwB,IAApBA,EAAEi0C,OAAOn0C,UACxEuN,QAAUtU,KAAKuU,QAAQoB,KAAI,SAAA1O,GAAC,OAAIA,EAAEwK,gBAjFxC,KCAajR,GAAM,SAACa,EAAM+F,GACxB,IAAI1G,EAAK,IAAIq7C,GAMb,OALAr7C,EAAGwE,KAAO7D,EAAKse,KACfjf,EAAG6T,QAAUlT,EAAKiT,QAAQqB,KAAI,SAAA1O,GAAC,OFLd,SAAC5F,EAAM+F,GACxB,IAAI1G,EAAK,IAAIm7C,GAmBb,OAlBAn7C,EAAG8T,MAAQnT,EAAKoD,MAEZpD,EAAKqU,MACPhV,EAAGoL,MAAQzK,EAAKqU,MAAMC,KAAI,SAAA1O,GACxB,IAAId,EAAM,IAAIy1C,GAGd,OAFAz1C,EAAI5C,MAAQ0D,EAAElG,MACdoF,EAAI25B,UAAY74B,EAAE24B,UACXz5B,KAGTzF,EAAGoL,MAAQzK,EAAK6M,OAAOyH,KAAI,SAAA1O,GACzB,IAAId,EAAM,IAAIy1C,GAEd,OADAz1C,EAAI5C,MAAQ0D,EACLd,KAIXzF,EAAG0I,KAAOhC,EACH1G,EEf4BwY,CAAejS,EAAGvG,MACrDA,EAAGgU,YAAcrT,EAAK+sB,YAAc/sB,EAAK+sB,YAAYzY,KAAI,SAAA1O,GAAC,OAAIu6B,GAAmBv6B,EAAGvG,MAC/EW,EAAK65C,OAAOvlC,KAAI,SAAA1O,GAAC,OAAIu6B,GAAmBv6B,EAAGvG,MAChDA,EAAG0I,KAAOhC,EACH1G,GAGIg7B,GAAa,SAACt0B,GACzB,IAAI1G,EAAK,IAAIq7C,GAGb,OAFAr7C,EAAGwE,KAAO,YACVxE,EAAG0I,KAAOhC,EACH1G,GAIImhC,GAAiB,SAACphC,GAC7B,MAAO,CAAE+gC,GAA0B/gC,KAGxBqhC,GAAa,SAACrhC,GACzB,MAAO,CAAEyY,GAAsBzY,KClBpBu7C,GAAb,4DAyBE/Z,YAAc,WACZ,IAAIl2B,EAAOm2B,GAAwB,GAGnC,OAFA,EAAK/tB,UAAUrM,KAAKiE,GACpBA,EAAK7G,KAAL,kBAAuB6G,EAAKoE,MAAO,GAC5BpE,GA7BX,oDAGI,OAAO/L,KAAKoJ,OAHhB,uCAOI,OAAOpJ,KAAKoJ,KAAK81B,mBAPrB,gCAgBI,OAHKl/B,KAAKgiC,YACRhiC,KAAKgiC,UAAY92B,GAAkBlL,OAE9BA,KAAKgiC,WAhBhB,aAiBkB9hC,GACdF,KAAKgiC,UAAY9hC,IAlBrB,6CAsBI,OAAOF,KAAKoJ,KAAKu3B,yBAtBrB,8BAiCI,MAAO,CACLqB,UAAYhiC,KAAKmU,UAAUwB,KAAI,SAAA1O,GAAC,OAAIA,EAAEwK,gBAlC5C,KCWaixB,GAAe,SAACjiC,GAC3B,MAAO,CAAEyhC,GAAwBzhC,K,SCnBtBsT,GAAb,4MASE6uB,KAAO,WACL13B,GAAA,kBAVJ,EAwBEm0B,4BAA8B,GAxBhC,qEAMI,OAHKr/B,KAAKi8C,yBACRj8C,KAAKi8C,uBAAyB/wC,MAEzBlL,KAAKi8C,yBANhB,uCAkBI,OAHKj8C,KAAKk8C,mBACRl8C,KAAKk8C,iBAAmBhxC,GAAyBlL,OAE5CA,KAAKk8C,kBAlBhB,aAmByBh8C,GACrBF,KAAKk8C,iBAAmBh8C,EACxBF,KAAKq7C,qBAAsB,IArB/B,wCA0B0Bn7C,GACtBF,KAAKq/B,4BAA4Br4B,SAAQ,SAAAC,GAAC,OAAIA,WA3BlD,GAAyCirB,ICU5B1xB,GAAM,SAACa,EAAM+Q,EAASoB,GACjC,IAAI9S,EAAK,IAAIqT,GAUb,OARArT,EAAGwI,IAAM7H,EAAK6H,IACdxI,EAAGwE,KAAO7D,EAAKse,KACfjf,EAAGqyB,YAAc1xB,EAAKqxB,YACtBhyB,EAAGoyB,YAAczxB,EAAKwxB,YACtBnyB,EAAGmT,KFZc,SAACxS,EAAM+F,GACxB,IAAI1G,EAAK,IAAIs7C,GAGb,OAFAt7C,EAAGyT,UAAY9S,EAAK2gC,UAAUrsB,KAAI,SAAA1O,GAAC,OAAIi7B,GAAiBj7B,EAAGvG,MAC3DA,EAAG0I,KAAOhC,EACH1G,EEQG+yB,CAAapyB,EAAKA,KAAMX,GAClCA,EAAG0C,QAAUgP,EACb1R,EAAG2C,MAAQmQ,EAEJ9S,GAGIy7C,GAAU,SAAC/pC,GACtB,IAAI1R,EAAK,IAAIqT,GAQb,OANArT,EAAGwE,KAAO,0BACVxE,EAAGqyB,YAAc,wCACjBryB,EAAGoyB,YxI7BuB,ewI8B1BpyB,EAAGmT,KFlBkB,SAACzM,GACtB,IAAI1G,EAAK,IAAIs7C,GAEb,OADAt7C,EAAG0I,KAAOhC,EACH1G,EEeG+yB,CAAiB/yB,GAC3BA,EAAG0C,QAAUgP,EAEN1R,GAGI07C,GAAkB,SAAChqC,EAASoB,EAAOjC,GAC9C,IAAIC,EAAU,CACZe,UAAWH,EAAQlJ,IACnBmzC,QAAO,OAAE7oC,QAAF,IAAEA,OAAF,EAAEA,EAAOtK,KAIdvG,EAAG,wCADM,MAGSgP,EAAA,UAAYhP,EAAZ,QAAuB6O,GAEnCI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACJ,IAAIi7C,EAAUj7C,EAAOb,GAAIa,EAAM+Q,EAASoB,QAAS7T,EAC7C48C,EAAWD,GAAoBH,GAAQ/pC,GAC3Cb,EAAO+qC,EAASC,OAKTC,GAA4B,WACvC,OAAOC,MAIInqB,GAAe,SAAC7xB,GAC3B,IAAIyI,EAAMzI,EAAEyI,IACRsI,EAAU/Q,EAAEgR,QAGZ9O,EAAG,wCADM,MAGT4vB,IAAQrpB,GACUqpB,EACpB5gB,EAAA,UAAWhP,EAAX,SAAuB6O,GAAWG,EAAA,UAAYhP,EAAZ,QAAuB6O,IAEjDI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACAkxB,IAAO9xB,EAAEyI,IAAM7H,EAAK6H,KACxB/G,IAAQF,QAAQ,iCAITo5C,GAAsB,SAAC56C,GAClC,IAAIi8C,EAAaj8C,EAAE2C,QAAQu7B,WAErBge,EAAgB,SAACjnC,GACrB,OAAOA,EAAMC,KAAI,SAAA1O,GAAC,OAAIA,EAAE/B,SAG1B,GAAIw3C,EAAW5wC,MACb,OAAO6wC,EAAcD,EAAW5wC,OAEhC4wC,EAAWlmB,qBAAqB1uB,MAAK,WACnCrH,EAAEy+B,iBAAmByd,EAAcD,EAAW5wC,WC3F/BzI,G,iDAUnBu5C,4BAA8B,G,KAY9B3oC,+BAAiC,G,8DAnB/B,OAAOjU,KAAK68C,mB,aAEQ38C,GACpBF,KAAK68C,kBAAoB38C,EACzBF,KAAKiW,oBAAsB/V,EAAEyV,KAAI,SAAA1O,GAAC,OAAIA,EAAEiC,S,yCAKjBhJ,GACvBF,KAAK48C,4BAA4B51C,SAAQ,SAAAC,GAAC,OAAIA,S,8BAM9C,OAAOjH,KAAKoJ,KAAKA,O,2CAKQlJ,GACzBF,KAAKiU,+BAA+BjN,SAAQ,SAAAC,GAAC,OAAIA,S,0CAIxB,IAAD,OAWxB,OAVKjH,KAAKq+B,qBACHr+B,KAAK88C,kBACR98C,KAAK88C,iBAAkB,EACvB5Z,GAAiCljC,KAAKoD,QAASpD,MAC7C,SAACs8C,EAASC,GACV,EAAKxoC,oBAAsBuoC,EAC3B,EAAKnZ,wBAAyB,MAI7BnjC,KAAKq+B,qB,aAEUn+B,GACtBF,KAAKq+B,oBAAsBn+B,M,KC1ClBM,GAAM,SAACC,EAAG2G,GACrB,GAAK3G,EAAL,CAEA,IAAIC,EAAK,IAAI2C,GAYb,OAVA3C,EAAGwI,IAAMzI,EAAEyI,IACXxI,EAAGwE,KAAOzE,EAAEkf,KACZjf,EAAGqyB,YAActyB,EAAEiyB,YACnBhyB,EAAG0I,KAAOhC,EAEV21C,GAAwBt8C,EAAEyI,KAAK,SAAC7H,GAC9BX,EAAGs8C,kBAAoB37C,EACvBX,EAAGu8C,sBAAuB,KAGrBv8C,IAaIq8C,GAA0B,SAACV,EAAS9qC,GAC/C,IAAI5O,EAAG,0DAAsD05C,GAC7D1qC,EAAQhP,GAAKiP,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACAkQ,GACFA,EAAOlQ,OC9BF2U,GAAb,4DAOEwgB,qBAAuB,GAPzB,KAqBE9uB,IAAM,SAACqE,GACL,EAAKD,MAAMhE,KAAKiE,GACZ,EAAK2qB,OACP,EAAKA,MAAM3qB,IAxBjB,KA4BEkyB,eAAiB,WACf,IAAIzsB,EAAU,EAAK4gB,MAAM3gB,QAIrBW,EAAU,EAAKhP,QADGuO,EAAA,UAFf,oCAEe,aAA2BH,GAGvCI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACJ,IAAI0K,EAAO6K,GAAavV,EAAM,GAC9B,EAAKqG,IAAIqE,GACT5J,IAAQF,QAAQ,gCC1CA,SAACsQ,EAAW8pC,GAClC,IAAI7qC,EAAU,CACZe,YAAW8pC,WAIS1qC,EAAA,UAFf,gCAEe,aAA4BH,GAExCI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACJc,IAAQF,QAAQ,6CDkCdi7C,CAAqB9qC,EAAQlJ,IAAK7H,EAAK6H,QAI3C,IAAIi0C,EAAiB,SAACxC,GAAD,OAAeA,EAAU7c,cAE1Cid,EAAiB3oC,EAAQssB,eACxBqc,EAMHoC,EAAepC,GALf3oC,EAAQ4oC,8BAA8BlzC,MAAK,WACzCizC,EAAiB3oC,EAAQssB,eACzBye,EAAepC,OAnDvB,oDAEI,OAAO/6C,KAAKoJ,OAFhB,iCASoBlJ,GAChBF,KAAKw2B,qBAAqBxvB,SAAQ,SAAAC,GAAC,OAAIA,SAV3C,4BAkBI,OAHKjH,KAAK0b,QACR1b,KAAK0b,MAAQxQ,GAAclL,OAEtBA,KAAK0b,UAlBhB,KENqB0hC,G,gGAMjB,MAAO,CACL7qC,UALcvS,KAAKoJ,KAAKA,KAAKF,IAKlByW,KAJF3f,KAAKkF,KAIGwtB,YAHD1yB,KAAK+yB,iB,KCAdvyB,GAAM,SAAC4R,GAClB,IAAI1R,EAAK,IAAIsV,GAQb,OAPAtV,EAAG0I,KAAOgJ,EJegB,SAACG,EAAWhB,GACtC,IAAI5O,EAAG,2DAAuD4P,GAC9DZ,EAAQhP,GAAKiP,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACAkQ,GACFA,EAAOlQ,MIlBbg8C,CAAuBjrC,EAAQlJ,KAAK,SAAC7H,GACnCX,EAAGoL,MAAQzK,EAAKsU,KAAI,SAAA1O,GAAC,OAAIo2C,GAAcp2C,EAAGvG,MAC1CA,EAAGoiC,cAAe,KAGbpiC,GAGIs5B,GAAW,SAACv5B,GACvB,OCfiB,SAAC2G,GAClB,IAAI1G,EAAK,IAAI08C,GAKb,OAJA18C,EAAG0I,KAAOhC,EACV1G,EAAGwE,KAAO,YACVxE,EAAGqyB,YAAc,kCAEVryB,EDSA48C,CAAc78C,IEZF2C,G,iDA6BnB43C,8BAAgC,G,KAmBhC/mC,+BAAiC,G,uDA1C/B,OAHKjU,KAAKu9C,aACRv9C,KAAKu9C,WAAaC,GAAkBx9C,OAE/BA,KAAKu9C,a,qCAQZ,OAHKv9C,KAAKw+B,iBACRx+B,KAAKw+B,eAAiBtzB,GAAuBlL,OAExCA,KAAKw+B,iB,qCAQZ,OAHKx+B,KAAK+6C,gBACR7vC,GAA6BlL,MAExBA,KAAK+6C,gB,aAEK76C,GACjBF,KAAK+6C,eAAiB76C,EACtBF,KAAKy9C,uBAAwB,I,4CAO7B,OAAOz9C,KAAK09C,uB,aAEYx9C,GACxBF,KAAK09C,sBAAwBx9C,EAC7BF,KAAKg7C,8BAA8Bh0C,SAAQ,SAAAC,GAAC,OAAIA,S,iCAQhD,OAHKjH,KAAK08C,aACR18C,KAAK08C,WAAaxxC,GAAmBlL,OAEhCA,KAAK08C,a,2CAKax8C,GACzBF,KAAKiU,+BAA+BjN,SAAQ,SAAAC,GAAC,OAAIA,S,0CAMxB,IAAD,OAYxB,OAXKjH,KAAKq+B,qBACHr+B,KAAK88C,kBACR98C,KAAK88C,iBAAkB,EACvB5Z,GAAiCljC,KAAM,MACrC,SAACs8C,EAASC,GACV,EAAKxoC,oBAAsBuoC,EAC3B,EAAKjZ,4BAA8BkZ,EACnC,EAAKpZ,wBAAyB,MAI7BnjC,KAAKq+B,qB,aAEUn+B,GACtBF,KAAKq+B,oBAAsBn+B,I,kDAQ3B,OAHKF,KAAKs+B,8BACRt+B,KAAKs+B,4BAA8Bt+B,KAAK+T,qBAEnC/T,KAAKs+B,6B,aACoBp+B,GAChCF,KAAKs+B,4BAA8Bp+B,I,0BAKnC,IAAKF,KAAK2C,IAAK,CACb,IACIwD,EAAG,UAAMikB,iBAAN,OAAwC,KAAxC,YACPjkB,EAAG,UAAMA,EAAN,YAAanG,KAAKkJ,KAErBlJ,KAAK2C,IAAMwD,EAEb,OAAOnG,KAAK2C,Q,KCjGHg7C,GAAb,4DAaE7C,6BAA8B,GAbhC,KAmBEhd,WAAa,WACX5yB,GAAsB,IApB1B,2DAMI,OAHKlL,KAAK46C,gBACR1vC,GAA6BlL,MAExBA,KAAK46C,gBANhB,aAQqB16C,GACjBF,KAAK46C,eAAiB16C,EACtBF,KAAK49C,sBAAwB19C,IAVjC,0CAe4BA,GACxBF,KAAK86C,6BAA6B9zC,SAAQ,SAAAC,GAAC,OAAIA,WAhBnD,KCFa42C,GAAb,kCCGar9C,GAAM,SAACa,GAClB,IAAIX,EAAK,IAAIm9C,GAEb,OADAn9C,EAAGwI,IAAM7H,EAAK6H,IACPxI,GCFIF,GAAM,SAACa,GAClB,IAAIX,EAAK,IAAIi9C,GAKb,OAJAj9C,EAAGwI,IAAM7H,EAAK6H,IACdxI,EAAGwE,KAAO7D,EAAKse,KACfjf,EAAGqyB,YAAc1xB,EAAKqxB,YACtBhyB,EAAGo9C,aAAez8C,EAAK08C,aAChBr9C,GAGIs9C,GAA0B,SAACv9C,IDJH,SAACiS,EAAanB,GACjD,GAAKmB,EAAL,CACA,IAAI/P,EAAG,2DAAuD+P,GAC9Df,EAAQhP,GAAKiP,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACJ,IAAI0K,EAAO1K,EAAOb,GAAIa,GAAQA,EAC9BkQ,EAAOxF,OCCXkyC,CAFkBx9C,EAAEyI,KAE2B,SAAC6C,GACzCA,EAGHtL,EAAEo6C,eAAiB9uC,EAFnBmyC,GAAiBz9C,OAOVy9C,GAAmB,SAACz9C,IDNd,SAAC+Q,EAASD,GAE3BI,EADO,sCACOH,GAASI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QAC9CuQ,MAAK,SAAAvQ,GACJ,IAAI0K,EAAOvL,GAAIa,GACfkQ,EAAOxF,MCQXkyC,CAJc,CACZvrC,YAHgBjS,EAAEyI,MAMK,SAACi1C,GACxB19C,EAAEo6C,eAAiBsD,MCjCVxf,GAAb,iDAGEnI,qBAAuB,GAHzB,uDAKoBt2B,GAChBF,KAAKw2B,qBAAqBxvB,SAAQ,SAAAC,GAAC,OAAIA,WAN3C,KCAam3C,GAAb,kCCWaC,GAAS,SAAC7sC,EAASpK,EAAMmK,GAEpCI,EADU,qCACIH,GAASI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QAC9CuQ,MAAK,SAAAvQ,GACCA,IAAMA,EAAO,IAClB,IAAIqU,EAAQrU,EAAKsU,KAAI,SAAA1O,GAAC,OAbT,SAAC5F,EAAM+F,GACxB,IAAI1G,EAAK,IAAI09C,GAIb,OAHA19C,EAAGwE,KAAO7D,EAAKse,KACfjf,EAAG49C,UAAYj9C,EAAKk9C,UACpB79C,EAAG0I,KAAOhC,EACH1G,EAQuBF,CAAIyG,EAAGG,MAC7BmK,GACFA,EAAOmE,OCTFlV,GAAM,SAACC,EAAG2G,GACrB,GAAK3G,EAAL,CAEA,IAAIC,EAAK,IAAI0C,GAOb,OALA1C,EAAGwI,IAAMzI,EAAEyI,IACXxI,EAAGwE,KAAOzE,EAAEkf,KACZjf,EAAGozB,KAAOrzB,EAAEkzB,KACZjzB,EAAG0I,KAAOhC,EAEH1G,IA2BI89C,GAAoB,SAAC/9C,GAChC,OAAOg+C,GAAsBh+C,IAGlBi+C,GAA0B,SAACj+C,GACtC,IAAI8R,EAAY9R,EAAEyI,KJdQ,SAACqJ,EAAWhB,GACtC,GAAKgB,EAAL,CACA,IAAI5P,EAAG,yDAAqD4P,GAC5DZ,EAAQhP,GAAKiP,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACJ,IAAI0K,EAAO1K,EAAOb,GAAIa,GAAQA,EAC9BkQ,EAAOxF,OIUX4yC,CAA2BpsC,GAAW,SAACxG,GAChCA,EAWHtL,EAAEi+B,eAAiB3yB,EJlBN,SAACyF,EAASD,GAE3BI,EADO,qCACOH,GAASI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QAC9CuQ,MAAK,SAAAvQ,GACJ,IAAI0K,EAAOvL,GAAIa,GACfkQ,EAAOxF,MISP4yC,CANc,CACZpsC,YACAoN,KAAM,oDACN+S,YAAa,kCACbqrB,aC1Da,UD4DY,SAACI,GAC1B19C,EAAEi+B,eAAiByf,SAQdS,GAAgB,SAACn+C,GAC5B,OEpEiB,SAAC2R,GAClB,IAAI1R,EAAK,IAAIi+B,GAQb,OAPAj+B,EAAG0C,QAAUgP,EAEbwE,GAAgB,CAAErE,UAAYH,EAAQlJ,KAAOxI,GAAI,SAACgV,GAChDhV,EAAGoL,MAAQ4J,EAAMoa,MAAK,SAACvtB,EAAEyjB,GAAH,OAASzjB,EAAE+7C,UAAYt4B,EAAEs4B,aAC/C59C,EAAGoiC,cAAe,KAGbpiC,EF2DAm+C,CAAkBp+C,IGrEd6U,GAAb,WACE,aAAc,IHmBOlO,EAAMmK,EGnBd,2BHmBQnK,EGlBHpH,KHkBSuR,EGlBH,SAACmE,GACrB,EAAK5J,MAAQ4J,EACb,EAAKotB,cAAe,GHkBxBnxB,EADU,sCACGC,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACJ,IAAIqU,EAAQrU,EAAKsU,KAAI,SAAA1O,GAAC,OAAIzG,GAAIyG,EAAGG,MAC7BmK,GACFA,EAAOmE,MG1Bf,uDAUoBxV,GACZF,KAAK82B,gBACP92B,KAAK82B,eAAe52B,OAZ1B,KCAqB4+C,G,4HAA6B5sB,ICC7B6sB,G,gGAQjB,OAAO7zC,GAAgBlL,U,KCwBd67B,GAAa,SAACp7B,GACzB,MAAO,CACLu+C,eAAiBv+C,EAAEo4B,eAAepnB,QAClCwtC,aAAex+C,EAAEy4B,mBACfz4B,EAAEw4B,aAAaxnB,aAAU9R,ICnClBa,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAIo+C,GASb,OAPAp+C,EAAGwI,IAAMzI,EAAEyI,IACXxI,EAAGwE,KAAOzE,EAAEkf,KACZjf,EAAGqyB,YAActyB,EAAEiyB,YACnBhyB,EAAGoyB,YAAcryB,EAAEoyB,YACnBnyB,EAAGmT,KDJc,SAACpT,GAClB,IAAIC,EAAK,IAAIq+C,GAEb,OADAr+C,EAAGm4B,eAAiB3f,GAAezY,EAAEu+C,gBAC9Bt+C,ECCG+yB,CAAahzB,EAAEY,MACzBX,EAAG0I,KAAOhC,EAEH1G,GCXYw+C,G,4DAgBnBC,QAAU,WACR,GAAI,EAAKC,UACP,OAAO,EAAKA,a,KAsBhB7sB,OAAQ,E,KAmBRjhB,YAAc,WACZ,IAAIpI,EAAM,EAAKmpB,WACX1S,EAAO,EAAKza,KACZwtB,EAAc,EAAKK,YACnBF,EAAc,EAAKC,YACnBzxB,EAAO,EAAKwS,KAAKpC,QACjB4tC,EAAS,EAAKC,UAEd9tC,EAAU,CACZtI,MAAKyW,OAAM+S,cAAaG,cAAaxxB,QAEnCsB,EAAG,wCAAoC08C,IAErBn2C,EACpByI,EAAA,UAAWhP,EAAX,SAAuB6O,GAAWG,EAAA,UAAYhP,EAAZ,QAAuB6O,IAEjDI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACJ,EAAKk+C,iBAAkB,EACvB,EAAKC,QAAU,EAAKC,YAAYp+C,EAAM,EAAK+H,MAC3C,EAAKA,KAAKu+B,a,iDArEd,OAHK3nC,KAAKqB,OACRrB,KAAKqB,KAAOrB,KAAKm/C,WAEZn/C,KAAKqB,M,aAELnB,GACPF,KAAKqB,KAAOnB,I,+BAYZ,OAAOF,KAAK25B,U,aAEDz5B,GACXF,KAAK25B,SAAWz5B,EAKdF,KAAKqyB,WAJFnyB,EAIeA,EAAEgJ,SAHFvJ,I,4BAYpB,OAAOK,KAAKuyB,O,aAEJryB,GACRF,KAAKuyB,MAAQryB,EACTA,IACFF,KAAKi3B,cAAWt3B,K,gCASlB,OAHKK,KAAK0/C,YACR1/C,KAAK0/C,UCvDiB,SAACj/C,GAC3B,IAAI4+C,OAAS1/C,EACb,OAAQc,EAAEqyB,aACR,KAAKgO,GACHue,EAAS,KACT,MACF,KAAKve,GACHue,EAAS,KACT,MACF,KAAKve,GACHue,EAAS,KAGb,OAAOA,ED0Ccn0C,CAAkBlL,OAE9BA,KAAK0/C,Y,oCA2BMx/C,GACdF,KAAKy2B,mBACPz2B,KAAKy2B,kBAAkBv2B,O,KEpFRy/C,G,4MACnBF,YAAc,SAACp+C,EAAM+F,GACnB,OAAOw4C,GAA6Bv+C,EAAM+F,I,YAFS83C,ICA1C1+C,GAAM,SAAC4G,GAClB,IAAI1G,EAAK,IAAIi/C,GAUb,OATAj/C,EAAG0I,KAAOhC,EACV1G,EAAGwE,KAAO,4BACVxE,EAAGqyB,YAAc,iCACjBryB,EAAGoyB,YAAcgO,GAEjBpgC,EAAG0+C,UAAY,WACb,OLCsB,WACxB,IAAI1+C,EAAK,IAAIq+C,GAETc,EAAa,IAAInyC,GACrBmyC,EAAW1xC,aAAeE,GAC1BwxC,EAAWlyC,UAAYmB,GACvB+wC,EAAW9xC,iBAAmBgB,GAC9B8wC,EAAW5xC,OAAS,CAAC,UACrBvN,EAAGm4B,eAAiBgnB,EAEpBn/C,EAAGw4B,oBAAqB,EAExB,IAAI+lB,EAAe,IAAIvxC,GAOvB,OANAuxC,EAAa9wC,aAAeE,GAC5B4wC,EAAatxC,UAAYmB,GACzBmwC,EAAalxC,iBAAmBgB,GAChCkwC,EAAahxC,OAAS,GACtBvN,EAAGu4B,aAAegmB,EAEXv+C,EKpBE+yB,IAGF/yB,GCXImrC,GAAb,WACE,aAAc,ILYOzkC,EAAMmK,EKZd,gCA6Bb7J,IAAM,SAACqE,GACL,EAAKD,MAAMhE,KAAKiE,GACZ,EAAK2qB,OACP,EAAKA,MAAM3qB,IAhCF,KAoCb47B,OAAS,WACP,IAAIjsB,EAAQ,EAAK0W,MAEjB,GAAK1W,EAAMsZ,MAUT,EAAKttB,IAAIgU,EAAM8jC,aAVA,CACf,IAAIzzC,EAAO2P,EAAMub,SAMjB9tB,GAAwB4C,GALX,WACXA,EAAK7G,KAAOwW,EAAMxW,KAClB6G,EAAKgnB,YAAcrX,EAAMqX,YACzBhnB,EAAK8H,KAAO6H,EAAM7H,ULhCHzM,EKXHpH,KLWSuR,EKXH,SAACmE,GACrB,EAAK5J,MAAQ4J,EACb,EAAKotB,cAAe,GLWxBnxB,EADU,yCACGC,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACJ,IAAIqU,EAAQrU,EAAKsU,KAAI,SAAA1O,GAAC,OAAIzG,GAAIyG,EAAGG,MAC7BmK,GACFA,EAAOmE,MKnBf,uDA2BI,OAAO4nC,GAAct9C,QA3BzB,iCAUoBE,GACZF,KAAK82B,gBACP92B,KAAK82B,eAAe52B,KAZ1B,4BAuBI,OAHKF,KAAK0b,QACR1b,KAAK0b,MAAQ1b,KAAKg6B,YAEbh6B,KAAK0b,UAvBhB,KCCqBokC,G,4DA+BnB5jB,mBAAqB,WACnB,IAAIS,EAAY,EAAKnB,cACjBzvB,EAAOkxB,GAA4B,GAGvC,OAFAN,EAAU70B,KAAKiE,GAERA,G,0DA5BP,OAHK/L,KAAK+/C,gBACR//C,KAAK+/C,cAAgB70C,GAAsBlL,OAEtCA,KAAK+/C,e,aAEI7/C,GAChBF,KAAK+/C,cAAgB7/C,EAKnBF,KAAKggD,gBAJF9/C,EAIoBA,EAAEgJ,SAHFvJ,I,oCAYzB,OAHKK,KAAKigD,gBACRjgD,KAAKigD,cAAgB/0C,GAA6BlL,OAE7CA,KAAKigD,e,aAEI//C,GAChBF,KAAKigD,cAAgB//C,I,8BAYrB,OAAOgL,GAAgBlL,U,KCrCdQ,GAAM,SAACC,GAClB,IAAIC,EAAK,IAAIo/C,GAGb,OAFAp/C,EAAGs/C,gBAAkBv/C,EAAEu/C,gBACvBt/C,EAAG86B,cAAgB/6B,EAAEy/C,eAAevqC,KAAI,SAAA1O,GAAC,OvIExB,SAACxG,EAAG2G,GACrB,IAAI1G,EAAK,IAAI66B,GAMb,OALA76B,EAAG25B,aAAe55B,EAAEg6B,aACpB/5B,EAAGgD,SAAWjD,EAAEmE,SAChBlE,EAAGm6B,YAAc3hB,GAAezY,EAAEm7B,YAAavtB,IAC/C3N,EAAG+R,cAAgBhS,EAAEgS,cACrB/R,EAAG0I,KAAOhC,EACH1G,EuITsCu8B,CAAqBh2B,EAAGvG,MAC9DA,GAQIy/C,GAAmB,SAAC1/C,GAC/B,IAAI2/C,EAAe3/C,EAAEu/C,gBACrB,GAAKI,EAAL,CAEA,IAAI95C,EAnBGkI,GAAOF,SAmBMu9B,0BAA0B//B,MAC9C,GAAKxF,EAAL,CAEA,IAAIgB,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEiC,MAAQk3C,KAC1C,OAAkB,IAAX94C,EAAehB,EAAKgB,QAAS3H,KAGzB0gD,GAA0B,SAAC5/C,GACtC,MAAO,CAAEw8B,GAA4Bx8B,KAG1Bo7B,GAAa,SAACp7B,GACzB,MAAO,CACLu/C,gBAAkBv/C,EAAEu/C,gBACpBE,eAAiBz/C,EAAE+6B,cAAc7lB,KAAI,SAAA1O,GAAC,OAAIA,EAAEwK,aCpC3B6uC,G,4HAA0BpuB,ICElC1xB,GAAM,SAACC,EAAG2G,GACrB,IAAI1G,EAAK,IAAI4/C,GASb,OAPA5/C,EAAGwI,IAAMzI,EAAEyI,IACXxI,EAAGwE,KAAOzE,EAAEkf,KACZjf,EAAGqyB,YAActyB,EAAEiyB,YACnBhyB,EAAGoyB,YAAcryB,EAAEoyB,YACnBnyB,EAAGmT,KAAO4f,GAAahzB,EAAEY,MACzBX,EAAG0I,KAAOhC,EAEH1G,GCVY6/C,G,4MACnBd,YAAc,SAACp+C,EAAM+F,GACnB,OAAOo5C,GAA0Bn/C,EAAM+F,I,YAFS83C,ICAvC1+C,GAAM,SAAC4G,GAClB,IAAI1G,EAAK,IAAI6/C,GAUb,OATA7/C,EAAG0I,KAAOhC,EACV1G,EAAGwE,KAAO,sBACVxE,EAAGqyB,YAAc,oCACjBryB,EAAGoyB,YAAcgO,GAEjBpgC,EAAG0+C,UAAY,WACb,OJIO,IAAIU,IIDNp/C,GCXIsrC,GAAb,WACE,aAAc,IHYO5kC,EAAMmK,EGZd,gCA6Bb7J,IAAM,SAACqE,GACL,EAAKD,MAAMhE,KAAKiE,GACZ,EAAK2qB,OACP,EAAKA,MAAM3qB,IAhCF,KAoCb47B,OAAS,WACP,IAAIjsB,EAAQ,EAAK0W,MAEjB,GAAK1W,EAAMsZ,MAUT,EAAKttB,IAAIgU,EAAM8jC,aAVA,CACf,IAAIzzC,EAAO2P,EAAMub,SAMjB9tB,GAAwB4C,GALX,WACXA,EAAK7G,KAAOwW,EAAMxW,KAClB6G,EAAKgnB,YAAcrX,EAAMqX,YACzBhnB,EAAK8H,KAAO6H,EAAM7H,UHhCHzM,EGXHpH,KHWSuR,EGXH,SAACmE,GACrB,EAAK5J,MAAQ4J,EACb,EAAKotB,cAAe,GHWxBnxB,EADU,yCACGC,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACJ,IAAIqU,EAAQrU,EAAKsU,KAAI,SAAA1O,GAAC,OAAIzG,GAAIyG,EAAGG,MAC7BmK,GACFA,EAAOmE,MGnBf,uDA2BI,OAAO4nC,GAAct9C,QA3BzB,iCAUoBE,GACZF,KAAK82B,gBACP92B,KAAK82B,eAAe52B,KAZ1B,4BAuBI,OAHKF,KAAK0b,QACR1b,KAAK0b,MAAQ1b,KAAKg6B,YAEbh6B,KAAK0b,UAvBhB,KCDagrB,GAAb,WACE,aAAc,ItKkBOt/B,EAAMmK,EsKlBd,gCASbilB,qBAAuB,GATV,KAiBb9uB,IAAM,SAACqE,GACL,EAAKD,MAAMhE,KAAKiE,GACZ,EAAK2qB,OACP,EAAKA,MAAM3qB,ItKFM3E,EsKjBHpH,KtKiBSuR,EsKjBH,SAACmE,GACrB,EAAK5J,MAAQ4J,EACb,EAAKotB,cAAe,GtKiBxBnxB,EADU,yCACGC,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACJ,IAAIqU,EAAQrU,EAAKsU,KAAI,SAAA1O,GAAC,OAAIzG,GAAIyG,EAAGG,MAC7BmK,GACFA,EAAOmE,MsKzBf,uDAYoBxV,GAChBF,KAAKw2B,qBAAqBxvB,SAAQ,SAAAC,GAAC,OAAIA,WAb3C,KCFqBklB,G,kCCCAG,G,8FAMjB,OAHKtsB,KAAK0V,QACR1V,KAAK0V,MCDa,SAACjV,GACvB,IAAI6F,EAAO,GAGPyF,EAAO,IAAIogB,GACfpgB,EAAK0S,MAAQ,UAEb,IAAI9P,EAAS,IAAIjB,GA4Hf,OA3HFiB,EAAOhB,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOV,OAAS,CAAE,IAClBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,IAGVA,EAAO,IAAIogB,IACN1N,MAAQ,WAEb9P,EAAS,IAAIjB,IACNC,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOW,aAAc,EACrBX,EAAOV,OAAS,CAAE,GAAM,KACxBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,IAGTA,EAAO,IAAIogB,IACN1N,MAAQ,WAEb9P,EAAS,IAAIjB,IACNC,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOW,aAAc,EACrBX,EAAOV,OAAS,CAAE,IAAM,IACxBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,IAGVA,EAAO,IAAIogB,IACN1N,MAAQ,WAEb9P,EAAS,IAAIjB,IACNC,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOW,aAAc,EACrBX,EAAOV,OAAS,CAAE,GAAK,KACvBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,IAGVA,EAAO,IAAIogB,IACN1N,MAAQ,WAEb9P,EAAS,IAAIjB,IACNC,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOW,aAAc,EACrBX,EAAOV,OAAS,CAAE,IAAM,GACxBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,IAGVA,EAAO,IAAIogB,IACN1N,MAAQ,WAEb9P,EAAS,IAAIjB,IACNC,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOY,cAAe,EACtBZ,EAAOV,OAAS,CAAE,EAAG,MACrBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,IAGVA,EAAO,IAAIogB,IACN1N,MAAQ,WAEb9P,EAAS,IAAIjB,IACNC,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOY,cAAe,EACtBZ,EAAOV,OAAS,CAAE,KAAM,KACxBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,IAGTA,EAAO,IAAIogB,IACN1N,MAAQ,WAEb9P,EAAS,IAAIjB,IACNC,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOY,cAAe,EACtBZ,EAAOV,OAAS,CAAE,IAAM,MACxBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,IAGVA,EAAO,IAAIogB,IACN1N,MAAQ,WAEb9P,EAAS,IAAIjB,IACNC,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOY,cAAe,EACtBZ,EAAOV,OAAS,CAAE,KAAM,KACxBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,IAGVA,EAAO,IAAIogB,IACN1N,MAAQ,WAEb9P,EAAS,IAAIjB,IACNC,UAAYmB,GACnBH,EAAOd,iBAAmBsB,GAC1BR,EAAOV,OAAS,CAAE,KAClBlC,EAAKiM,OAASrJ,EAEdrI,EAAKwB,KAAKiE,GAEHzF,EDlIQ4E,IAERlL,KAAK0V,U,KEPH62B,GAAb,iDAGE/V,qBAAuB,GAHzB,uDAKoBt2B,GAChBF,KAAKw2B,qBAAqBxvB,SAAQ,SAAAC,GAAC,OAAIA,WAN3C,KCDaw5C,GAAb,sCACExyC,OAAS,GADX,KAGEgH,MAAQ,GCAGyrC,GAAb,iDACE50C,MAAQ,GADV,KAGE20B,QAAU,SAACvyB,GACT,IAAI5H,EAAO,EAAKwF,MACZC,OAAOpM,EACP2H,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIkC,GAAqBlC,EAAEgH,OAAQC,MAU/D,OATe,IAAX5G,IACFyE,EAAO,IAAI00C,IACNxyC,OAASC,EACd5H,EAAKwB,KAAKiE,IAEVA,EAAOzF,EAAKgB,GAGdyE,EAAKkJ,QACElJ,IChBEkpB,GAAb,4DAKElC,YAAc,+BALhB,KAQER,OAAQ,EARV,KAyDEjhB,YAAc,WACZ,IAAIpI,EAAM,EAAKy3C,cACXhtB,EAAO,EAAKG,KACZnU,EAAO,EAAKza,KACZwtB,EAAc,EAAKK,YACnB6tB,EAAQ,EAAKC,MAEbrvC,EAAU,CACZtI,MAAKyW,OAAMgU,OAAMjB,cAAakuB,SAG5Bj+C,EAAM,kCAEcuG,EACtByI,EAAA,UAAWhP,EAAX,SAAuB6O,GAAWG,EAAA,UAAYhP,EAAZ,QAAuB6O,IAEjDI,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACjCuQ,MAAK,SAAAvQ,GACJ,EAAKk+C,iBAAkB,EACvB,EAAKuB,eAAiBC,GAAoB1/C,EAAM,EAAK+H,MACrD,EAAKA,KAAKu+B,aA7ElB,kDAUI,OAAO3nC,KAAKuyB,OAVhB,aAYYryB,GACRF,KAAKuyB,MAAQryB,EACTA,IACFF,KAAKsD,iBAAc3D,KAfzB,kCAqBI,OAAOK,KAAKqS,aArBhB,aAuBkBnS,GACdF,KAAKqS,YAAcnS,EAKjBF,KAAK2gD,cAJFzgD,EAIkBA,EAAEgJ,SAHFvJ,IA1B3B,8BAqCI,OAAOK,KAAKiZ,SArChB,aAuCc/Y,GACVF,KAAKiZ,QAAU/Y,EAKbF,KAAK6gD,MAJF3gD,EAIUA,EAAEgJ,SAHFvJ,IA1CnB,oCAmDsBO,GACdF,KAAKy2B,mBACPz2B,KAAKy2B,kBAAkBv2B,OArD7B,KCCa2V,GAAb,WACE,aAAe,IAAD,gCA0BdnO,IAAM,SAACqE,GACL,EAAK+J,aAAahO,KAAKiE,GACnB,EAAK2qB,OACP,EAAKA,MAAM3qB,IA7BD,KAiCd47B,OAAS,WACP,IAAIjsB,EAAQ,EAAKuZ,iBACb+rB,EAAKtlC,EAAMpY,YAEf,GAAKoY,EAAMsZ,MAUT,EAAKttB,IAAIgU,EAAMolC,oBAVA,CAOf33C,GAAwB63C,GANX,WACXA,EAAGltB,KAAOpY,EAAMoY,KAChBktB,EAAG97C,KAAOwW,EAAMxW,KAChB87C,EAAGjuB,YAAcrX,EAAMqX,YACvBiuB,EAAG77C,SAAW67C,EAAGC,iBAQrB,EAAK5G,eAAgB,GAlDT,KAuDdC,YAAc,WACZ,EAAKxkC,aAAa9O,SAAQ,SAAAC,GACxBA,EAAEma,cAAWzhB,EACbsH,EAAEi6C,eAAYvhD,EACdsH,EAAEk6C,eAAYxhD,EACdsH,EAAEqa,UAAO3hB,KAGX,EAAK06C,eAAgB,GA9DrB0G,GAAuB/gD,MAAM,SAACohD,GAC5B,EAAKtrC,aAAesrC,EACpB,EAAKC,qBAAsB,KAJjC,8DAU0BnhD,GAClBF,KAAKwrC,uBACPxrC,KAAKwrC,sBAAsBtrC,KAZjC,uCAoBSF,KAAKshD,oBACEthD,KAAKshD,iBAAmB,IAAIrsB,IAClC7rB,KAAOpJ,MAEb,OAAOA,KAAKshD,qBAxBhB,KCJa3+C,GAAM,mCCON4+C,GAAb,gGAMI,MAAO,CACLzX,QAAU9pC,KAAKqJ,QACfm4C,aAAexhD,KAAKyhD,kBAR1B,KCHaC,GAAb,4MAEE5uB,YAAcgO,GAFhB,EAIEtO,IAAM7vB,GAJR,YAAuCuvB,ICE1B/c,GAAS,kBAAM3G,GAAOF,UAGtBqzC,GAAY,SAACtgD,EAAM+F,GACzBA,IACHA,EAAO+N,KAASysC,wBAGlB,IAAIlhD,EAAK,IAAIghD,GASb,OAPAhhD,EAAGwI,IAAM7H,EAAK6H,IACdxI,EAAGwE,KAAO7D,EAAKse,KACfjf,EAAGqyB,YAAc1xB,EAAKqxB,YACtBhyB,EAAGoyB,YAAczxB,EAAKwxB,YACtBnyB,EAAGmT,KCXoB,SAACxS,GACxB,IAAIX,EAAK,IAAI6gD,GAKb,OAHA7gD,EAAG2I,QAAUhI,EAAKyoC,QAClBppC,EAAG+gD,aAAepgD,EAAKmgD,aAEhB9gD,EDKG+yB,CAAmBpyB,EAAKA,MAClCX,EAAG0I,KAAOhC,EAEH1G,GAcIg7B,GAAa,WACxB,IAAIh7B,EAAK,IAAIghD,GAKb,OAHAhhD,EAAG0I,KAAO+L,KAASysC,uBACnBlhD,EAAGmT,KCvBqB,WACxB,IAAInT,EAAK,IAAI6gD,GAKb,OAHA7gD,EAAG2I,QAAU,CAAC2H,EAAWA,GACzBtQ,EAAG+gD,aAAe38C,EAEXpE,EDiBG+yB,GAEH/yB,GAGI0Y,GAAQ,SAAC3Y,GACpB,IAAIC,EAAK,IAAIghD,GAQb,OANAhhD,EAAGwE,KAAOzE,EAAEyE,KACZxE,EAAGqyB,YAActyB,EAAEsyB,YACnBryB,EAAGoyB,YAAcryB,EAAEqyB,YACnBpyB,EAAGmT,KCzBgB,SAACpT,GACpB,IAAIC,EAAK,IAAI6gD,GAKb,OAHA7gD,EAAG2I,QAAU5I,EAAE4I,QACf3I,EAAG+gD,aAAehhD,EAAEghD,aAEb/gD,EDmBG+yB,CAAehzB,EAAEoT,MAC3BnT,EAAG0I,KAAO3I,EAAE2I,KAEL1I,GEpDIkhD,GAAb,iDASEC,yBAA2B,GAT7B,kDAGI,OAAO7hD,KAAK0V,OAHhB,aAIcxV,GACVF,KAAK0V,MAAQxV,EACbF,KAAK8iC,cAAe,IANxB,iCAWoB5iC,GAChBF,KAAK6hD,yBAAyB76C,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,eAZjD,KCAa/C,GAAM,WACjB,IHsBqB4G,EAAMmK,EGtBvB7Q,EAAK,IAAIkhD,GAMb,OHgBqBx6C,EGpBL1G,EHoBW6Q,EGpBP,SAACmE,GACnBhV,EAAGoL,MAAQ4J,GHoBb/D,EAAA,UAAWhP,GAAX,UAAuBiP,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QAC9CuQ,MAAK,SAAAvQ,GACJ,GAAKA,EAAL,CACA,IAAIqU,EAAQrU,EAAKsU,KAAI,SAAA1O,GAAC,OAAI06C,GAAU16C,EAAGG,MACnCmK,GACFA,EAAOmE,OGtBNhV,GCAIohD,GAAsB,SAACzgD,GAClC,MzOPO,CAAE4L,GAAUC,KyOUR60C,GAAuB,SAAC1gD,GACnC,MxOVO,CAAE8L,GAASC,GAAWC,KwOalB20C,GAAwB,SAAC3gD,GACpC,M9JdO,CAACo6B,GAJgB,aACH,Y8J4BVwmB,GAAuB,SAAC5gD,GACnC,MzL3BO,CAJiB,aAIH+xB,KyL8BV8uB,GAAoB,SAAC7gD,GAChC,MrPVO,CAACqC,EAAUC,EAAUC,EAAOE,EAAOL,EAAaI,IqPiB5Cs+C,GAAe,SAAC9gD,GAC3B,MtPtCO,CAAE4B,EAAUC,EAAUC,IuPQlBqL,GAAb,WACE,aAAe,yBAmKf4zC,YAAc,GAnKA,KA6KdlU,SAAU,EA7KI,KA+KdjB,+BAAiC,GA/KnB,KAiLdmB,YAAc,aAlLhB,yDAcI,OAAOzhC,GAAa2B,WAdxB,uCAsBI,OAHKtO,KAAKqiD,mBACRriD,KAAKqiD,iBAAmB,IAAIxsC,IAEvB7V,KAAKqiD,mBAtBhB,gDA8BI,OAHKriD,KAAKsiD,4BACRtiD,KAAKsiD,0BAA4B,IAAIzW,IAEhC7rC,KAAKsiD,4BA9BhB,6CAsCI,OAHKtiD,KAAKuiD,yBACRviD,KAAKuiD,uBAAyB,IAAIvW,IAE7BhsC,KAAKuiD,yBAtChB,4CA8CI,OAHKviD,KAAKwiD,wBACRxiD,KAAKwiD,sBAAwB,IAAI9b,IAE5B1mC,KAAKwiD,wBA9ChB,mCAsDI,OAHKxiD,KAAKyiD,eACRziD,KAAKyiD,aAAe,IAAIntC,IAEnBtV,KAAKyiD,eAtDhB,qCA8DI,OAHKziD,KAAK0iD,iBACR1iD,KAAK0iD,eAAiB,IAAItsC,IAErBpW,KAAK0iD,gBA9DhB,aAgEqBxiD,GACjBF,KAAK0iD,eAAiBxiD,IAjE1B,uCAyEI,OAHKF,KAAK2tC,mBACR3tC,KAAK2tC,iBAAmBziC,MAEnBlL,KAAK2tC,mBAzEhB,wCAiFI,OAHK3tC,KAAK4tC,oBACR5tC,KAAK4tC,kBAAoB1iC,MAEpBlL,KAAK4tC,oBAjFhB,yCAyFI,OAHK5tC,KAAK6tC,qBACR7tC,KAAK6tC,mBAAqB3iC,MAErBlL,KAAK6tC,qBAzFhB,oCAiGI,OAHK7tC,KAAK4M,gBACR5M,KAAK4M,cAAgB5M,KAAK2iD,aAAap0C,eAElCvO,KAAK4M,gBAjGhB,qCAyGI,OAHK5M,KAAK8tC,iBACR9tC,KAAK8tC,eDzFF,CAAC,SAAU,sBC2FT9tC,KAAK8tC,iBAzGhB,wCAiHI,OAHK9tC,KAAK+tC,oBACR/tC,KAAK+tC,kBAAoB7iC,MAEpBlL,KAAK+tC,oBAjHhB,qCAyHI,OAHK/tC,KAAK4iD,iBACR5iD,KAAK4iD,eAAiB13C,MAEjBlL,KAAK4iD,iBAzHhB,wCAiII,OAHK5iD,KAAK6iD,oBACR7iD,KAAK6iD,kBDrGF7xC,MCuGEhR,KAAK6iD,oBAjIhB,gCAyII,OAHK7iD,KAAKguC,YACRhuC,KAAKguC,UAAY9iC,MAEZlL,KAAKguC,YAzIhB,4CAiJI,OAHKhuC,KAAK8iD,wBACR9iD,KAAK8iD,sBAAwB,IAAIx2B,IAE5BtsB,KAAK8iD,wBAjJhB,iDAyJI,OAHK9iD,KAAKiuC,6BACRjuC,KAAKiuC,2BAA6B,IAAI1B,IAEjCvsC,KAAKiuC,6BAzJhB,6CAiKI,OAHKjuC,KAAK+iD,yBACR/iD,KAAK+iD,uBD7HFC,MC+HEhjD,KAAK+iD,yBAjKhB,+BA2KI,OAHK/iD,KAAKijD,WACRjjD,KAAKijD,SAAW,IAAIvC,IAEf1gD,KAAKijD,YA3KhB,gCAUI,OAHKjjD,KAAK6M,WACR7M,KAAK6M,SAAW,IAAI2B,GAEfxO,KAAK6M,aAVhB,KCTavJ,GAAb,4DAgHE29C,YAAc,WACZ,MAAM,GAAN,OAAU,EAAKntB,KAAf,cAAyB,EAAK5uB,OAjHlC,KAoHEgL,OAAS,WAAO,IACRhH,EAAQ,EAARA,IAINyI,EADU,wCAFI,CAAEzI,QAGM0I,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QAC7CuQ,MAAK,SAAAvQ,GAAI,OAAIc,IAAQF,QAAQ,sCAEhC,IAAImF,EAAO,EAAKgC,KAChBhC,EAAK0O,aAAarO,OAAO,EAAK0I,MAAO,GACjC,EAAKgiB,UACP,EAAKA,WAGP/qB,EAAKizC,eAAgB,GAlIzB,kDAEI,OAAOr6C,KAAKoJ,KAAK0M,aAAaxM,QAAQtJ,QAF1C,8BAcI,OAHKA,KAAKiZ,UACRjZ,KAAKiZ,QAAU/N,GAAgBlL,OAE1BA,KAAKiZ,UAdhB,2BAmBI,OAAOjZ,KAAK2zB,MAnBhB,aAqBWzzB,GACPF,KAAK2zB,KAAOzzB,EACRF,KAAKk0B,eACPl0B,KAAKk0B,cAAch0B,KAxBzB,2BA8BI,OAAOF,KAAK2f,MA9BhB,aAgCWzf,GACPF,KAAK2f,KAAOzf,EACRF,KAAKyyB,eACPzyB,KAAKyyB,cAAcvyB,KAnCzB,kCAyCI,OAAOF,KAAK0yB,aAzChB,aA2CkBxyB,GACdF,KAAK0yB,YAAcxyB,EACfF,KAAK2yB,sBACP3yB,KAAK2yB,qBAAqBzyB,KA9ChC,+BAuDI,OAHKF,KAAK4zB,WACR5zB,KAAK4zB,SAAW5zB,KAAKihD,eAEhBjhD,KAAK4zB,UAvDhB,aAyDe1zB,GACXF,KAAK4zB,SAAW1zB,EACZF,KAAKm0B,mBACPn0B,KAAKm0B,kBAAkBj0B,KA5D7B,+BAqEI,OAHKF,KAAKogB,WACRpgB,KAAKogB,SAAWlV,GAAiBlL,OAE5BA,KAAKogB,UArEhB,aAuEelgB,GACXF,KAAKogB,SAAWlgB,IAxEpB,gCAgFI,OAHKF,KAAKkjD,YACRljD,KAAKkjD,UAAYh4C,GAAkBlL,OAE9BA,KAAKkjD,WAhFhB,aAkFgBhjD,GACZF,KAAKkjD,UAAYhjD,IAnFrB,gCA2FI,OAHKF,KAAKmjD,YACRnjD,KAAKmjD,UAAYj4C,GAAkBlL,OAE9BA,KAAKmjD,WA3FhB,aA6FgBjjD,GACZF,KAAKmjD,UAAYjjD,IA9FrB,2BAsGI,OAHKF,KAAKwgB,OACRxgB,KAAKwgB,KAAOtV,GAAalL,OAEpBA,KAAKwgB,MAtGhB,aAwGWtgB,GACPF,KAAKwgB,KAAOtgB,IAzGhB,+BA6GI,OAAOF,KAAKmhD,UAAUxrC,KAAI,SAAA1O,GAAC,OAAIA,EAAEiC,WA7GrC,KCAaiM,GAAS,WACpB,OAAO3G,GAAOF,UAGH9N,GAAM,SAAC4iD,EAAQh8C,GAAU,IAC9B8B,EAAwCk6C,EAAxCl6C,IAAKyW,EAAmCyjC,EAAnCzjC,KAAMgU,EAA6ByvB,EAA7BzvB,KAAMjB,EAAuB0wB,EAAvB1wB,YAAakuB,EAAUwC,EAAVxC,MAEhClgD,EAAK,IAAI4C,GAQb,OAPA5C,EAAGwI,IAAMA,EACTxI,EAAGwE,KAAOya,EACVjf,EAAGozB,KAAOH,EACVjzB,EAAGqyB,YAAcL,EACjBhyB,EAAGmgD,MAAQD,EACXlgD,EAAG0I,KAAOhC,EAEH1G,GAGI0zB,GAAa,SAAC3zB,GACzB,IAAImgD,EAAQngD,EAAEogD,MACVv6C,EAAO6O,KAASU,iBAAiBC,aACjCxO,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAEiC,MAAQ03C,KAC1C,OAAkB,IAAXt5C,EAAehB,EAAKgB,QAAS3H,GAGzB4xC,GAAc,SAAC9wC,GAC1B,IAAIgQ,EAAKhQ,EAAEyI,IAEX,OADWiM,KAASU,iBAAiBC,aACzBnH,QAAO,SAAA1H,GAAC,OAAIA,IAAMxG,GAAKwG,EAAE45C,QAAUpwC,MAGpC4yC,GAAe,SAAC5iD,GAC3B,IAAIwY,EAAUxY,EAAE0Y,QAChB,GAAKF,EAEA,CACH,IAAI3S,EAAI,YAAO2S,EAAQioC,WAEvB,OADA56C,EAAKwB,KAAKrH,GACH6F,EAJP,MAAO,CAAC7F,IAQC6iD,GAAe,SAAC7iD,GAC3B,IAAI6F,EAAO,CAAC7F,GAIZ,OAHAA,EAAE2gB,SAASpa,SAAQ,SAACC,EAAGC,GACrBZ,EAAKwB,KAAKkR,MAAM1S,EAAMW,EAAEk6C,cAEnB76C,GAGI8oB,GAAU,SAAC3uB,GACtB,IAAIwY,EAAUxY,EAAE0Y,QAChB,OAAOF,EAAUA,EAAQqI,KAAM,EAAI,GAGxB+8B,GAAS,SAACj3C,EAAMmK,GAE3BI,EADU,uCACGC,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACJ,IAAI+/C,EAAM//C,EAAKsU,KAAI,SAAA1O,GAAC,OAAIzG,GAAIyG,EAAGG,MAC3BmK,GACFA,EAAO6vC,OC7DF7sB,GAAb,WACE,aAAe,IAAD,gCAMdiC,qBAAuB,GANT,KAqBd+sB,oBAAiB5jD,EArBH,KA6Cd+H,IAAM,SAACy0B,GACL,EAAKtI,eAAe/rB,KAAKq0B,GACrB,EAAKzF,OACP,EAAKA,MAAMyF,IA/Cbp8B,YAAeC,KAAM,CACnBujD,eAAgBtjD,MAHtB,uDASoBC,GAChBF,KAAKw2B,qBAAqBxvB,SAAQ,SAAAC,GAAC,OAAIA,SAV3C,2BAgBI,OAAOjH,KAAK6V,iBAAiBzP,MAhBjC,aAkBWlG,GACPF,KAAK6V,iBAAiBzP,KAAOlG,IAnBjC,qCA2BI,OAHKF,KAAKujD,iBACRvjD,KAAKujD,enLRsB,SAAChtB,GAChC,IAAI6qB,EAAM7qB,EAAO1gB,iBAAiBC,aAClC,GAAKsrC,EACL,OAAOA,EAAIzrC,KAAI,SAAA1O,GAAC,OAAIwkC,GAAsBxkC,EAAGsvB,MmLKnBrrB,CAAuBlL,OAExCA,KAAKujD,iBA3BhB,yCA+B2BrjD,GACvBF,KAAK6V,iBAAmB3V,EACxBF,KAAK6V,iBAAiB2tC,mBAAqBtjD,EAAEoD,YAE7CtD,KAAK60B,mBAAmBnB,cAAgBxzB,IAnC5C,yCA2CI,OAHKF,KAAKyjD,qBACRzjD,KAAKyjD,mBAAqBv4C,GAA2BlL,OAEhDA,KAAKyjD,uBA3ChB,KCKQ5oC,GAAWC,IAAXD,OAEF6oC,G,kDACJ,WAAY9iD,GAAQ,IAAD,uBACjB,cAAMA,IAURoa,cAAgB,SAAC9a,GACf,IAAImB,EAAO,EAAKJ,MACZmgD,EAAM//C,EAAKwyB,eACNxyB,EAAKsiD,qBAAuBvC,EAAIlhD,IAdxB,IAGXiB,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIozB,GALF,E,qDAkBjB,IAAIlzB,EAAOrB,KAAKiB,MACZmgD,EAAM//C,EAAKwyB,eAEXzY,EAAQgmC,EAAMA,EAAIzrC,KAAI,SAAC5J,EAAMzE,GAC/B,IAAIs8C,EAAa73C,EAAK83C,WACtB,OAAO,cAAC,GAAD,CAAoB9iD,MAAOuG,EAA3B,SAAmCs8C,GAAtBt8C,MACjB,GAEDw/B,EAAUzlC,EAAKwzB,mBACfoB,EAAY6Q,EAAQjR,UAExB,OACE,qCACE,cAAC,IAAD,CAASiuB,YAAY,OAAOC,OAAK,EAAjC,SACE,iDAEF,cAAC,IAAD,CACEhmC,YAAU,EACV3d,MAAO,CAAE+a,MAAO,QAChBvb,YAAY,wBACZ4b,iBAAiB,WACjB3a,SAAUb,KAAKgb,cACfja,MAAO,KACP0a,aAAc,SAACC,EAAOC,GAAR,OACZA,EAAOC,SAAS3M,cAAc3F,QAAQoS,EAAMzM,gBAAkB,GARlE,SAWGmM,IAGH,sBAAKhb,MAAO,CAAEioB,UAAW,IAAzB,UACE,cAAC,EAAD,CAAWlnB,MAAO2lC,EAAQ3R,SAC1B,cAAC,EAAD,CAAWh0B,MAAO2lC,EAAQ1R,SAC1B,cAAC,EAAD,CAAWj0B,MAAO2lC,EAAQzR,gBAC1B,cAAC,GAAD,CAAYl0B,MAAO2lC,EAAQrR,kBAC3B,gCACE,cAAC,GAAD,CAAct0B,MAAO2lC,EAAQxR,UAC7B,cAAC,IAAD,CAAQl1B,MAAO,CAAE4jD,OAAQ,IACvBv4C,QAASq7B,EAAQx1B,YADnB,SACiC2kB,EAAU/0B,UAC1C4lC,EAAQmd,wB,GA1Dc1iD,aCA7B2iD,IDkES1iD,YAASkiD,ICpEL5oC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,uBACjB,cAAMA,IAURujD,KAAO,WACLv6B,QAAQC,IAAI,gBAZK,EAenB7O,cAAgB,SAAC9a,GACf,IAAImB,EAAO,EAAKJ,MACZyU,EAAQrU,EAAK+iD,QACR/iD,EAAKgjD,cAAgB3uC,EAAMxV,IAlBnB,IAGXiB,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI22B,GALF,E,qDAsBjB,IAAIz2B,EAAOrB,KAAKiB,MAEhB,OACE,qCACE,8BACE,cAAC,GAAD,CAAYE,MAAOE,EAAK22B,sBAE1B,8BACE,cAAC,GAAD,CAAY72B,MAAOE,EAAK42B,6BAE1B,8BACE,cAAC,GAAD,CAAiB92B,MAAOE,EAAK62B,0B,GAlCX32B,cAyCbC,eAAS0iD,ICzClBI,IAFaxpC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIw3B,GALF,E,qDAYjB,IAAIt3B,EAAOrB,KAAKiB,MACVi4B,EAAuB73B,EAAvB63B,mBAEN,OACE,qCACE,cAAC,IAAD,CAAS4qB,YAAY,OAAOC,OAAK,EAAjC,mDAGA,cAAC,GAAD,CAAe5iD,MAAOE,EAAKq2B,mBAE3B,cAAC,IAAD,CAASosB,YAAY,OAAOC,OAAK,EAAjC,SAEE,cAAC,GAAD,CAAc5iD,MAAOE,EAAK83B,yBAE3BD,EAAoB,cAAC,GAAD,CAAe/3B,MAAOE,EAAKw2B,iBAAqB,U,GA3BlCt2B,cAiC5BC,eAAS8iD,ICnChBzpC,GAAWC,IAAXD,OAEF0pC,G,kDACJ,WAAY3jD,GAAQ,IAAD,uBACjB,cAAMA,IAURujD,KAAO,WACLv6B,QAAQC,IAAI,gBAZK,EAenB7O,cAAgB,SAAC9a,GACf,IAAImB,EAAO,EAAKJ,MACZyU,EAAQrU,EAAKyK,MACRzK,EAAK21B,YAActhB,EAAMxV,IAlBjB,IAGXiB,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIy1B,GALF,E,qDAsBjB,IAAIv1B,EAAOrB,KAAKiB,MAEZyU,EAAQrU,EAAKyK,MACbsP,EAAQ1F,EAAQA,EAAMC,KAAI,SAAC5J,EAAMzE,GACnC,IAAIs8C,EAAa73C,EAAK83C,WACtB,OAAO,cAAC,GAAD,CAAoB9iD,MAAOuG,EAA3B,SAAmCs8C,GAAtBt8C,MACjB,GAEDoU,EAAQra,EAAK+wB,MAEjB,OACE,qCACE,cAAC,IAAD,CAAS0xB,YAAY,OAAOC,OAAK,EAAjC,SACE,iFAGF,cAAC,IAAD,CACEhmC,YAAU,EACV3d,MAAO,CAAE+a,MAAO,QAChBvb,YAAY,0BACZ4b,iBAAiB,WACjB3a,SAAUb,KAAKgb,cACfja,MAAO,KACP0a,aAAc,SAACC,EAAOC,GAAR,OACZA,EAAOC,SAAS3M,cAAc3F,QAAQoS,EAAMzM,gBAAkB,GARlE,SAWGmM,IAGH,sBAAKhb,MAAO,CAACioB,UAAU,IAAvB,UACE,cAAC,EAAD,CAAWlnB,MAAOua,EAAM0Z,SACxB,cAAC,EAAD,CAAWj0B,MAAOua,EAAM2Z,gBAExB,cAAC,GAAD,CAA8Bl0B,MAAOua,EAAM6d,SAE3C,cAAC,GAAD,CAAcp4B,MAAOua,EAAM4Z,UAC3B,cAAC,IAAD,CAAQl1B,MAAO,CAAC4jD,OAAO,IACrBv4C,QAASiQ,EAAMpK,YADjB,SAC+BoK,EAAMma,UAAU30B,UAC9Cwa,EAAMuoC,qB,GA9D2B1iD,aCItCijD,IDiEShjD,YAAS+iD,ICnELzpC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI+4B,GALF,E,qDAYjB,IAAI74B,EAAOrB,KAAKiB,MAEZ4c,EAAiBH,GAAoB,aAIzC,OAHAG,EAAevd,QAAU,cAAC,IAAD,CAAQ+D,KAAK,QAAQmH,KAAK,UACjDC,QAASpK,EAAK6O,OADS,eAIvB,mCACE,sBAAK9P,MAAO,CAAE+c,QAAS,sBAAuB6mC,OAAQ,WAAYtlC,OAAQ,cAAe+lC,aAAc,OAAQlkD,SAAS,YAAxH,UACE,cAAC,GAAD,CAAeY,MAAO0c,IACtB,cAAC,GAAD,CAAY1c,MAAOE,EAAK+4B,uBACxB,cAAC,GAAD,CAAYj5B,MAAOE,EAAKm5B,mBACxB,cAAC,GAAD,CAAer5B,MAAOE,EAAKi5B,gBAC3B,cAAC,GAAD,CAAYn5B,MAAOE,EAAKk5B,+B,GA1BCh5B,cAiCpBC,eAASgjD,IClClBE,IAFa5pC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI26B,GALF,E,qDAYjB,IAAIz6B,EAAOrB,KAAKiB,MAEZ0jD,EAAoBtjD,EAAK84B,gBAAgBxkB,KAAI,SAAC1O,EAAGC,GACnD,OAAO,cAAC,GAAD,CAA8B/F,MAAO8F,GAAVC,MAGpC,OACE,qCACE,cAAC,GAAD,CAAY/F,MAAOE,EAAKg7B,wBACxB,eAAC,IAAD,CAASynB,YAAY,OAAOC,OAAK,EAAjC,gDAEE,cAAC,IAAD,CAAQv4C,KAAK,UAAUnH,KAAK,QAAQoH,QAASpK,EAAK46B,qBAChD77B,MAAO,CAACipB,WAAW,IADrB,kBAGDs7B,S,GA3B+BpjD,cAiCzBC,eAASkjD,ICrChB7pC,GAAWC,IAAXD,OAEF+pC,G,kDACJ,WAAYhkD,GAAQ,IAAD,uBACjB,cAAMA,IAURoa,cAAgB,SAAC9a,GACf,IAAImB,EAAO,EAAKJ,MACZyU,EAAQrU,EAAKyK,MACRzK,EAAK21B,YAActhB,EAAMxV,IAdjB,IAGXiB,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIs8B,GALF,E,qDAkBjB,IAAIp8B,EAAOrB,KAAKiB,MAEZyU,EAAQrU,EAAKyK,MACbsP,EAAQ1F,EAAQA,EAAMC,KAAI,SAAC5J,EAAMzE,GACnC,IAAIs8C,EAAa73C,EAAK83C,WACtB,OAAO,cAAC,GAAD,CAAoB9iD,MAAOuG,EAA3B,SAAmCs8C,GAAtBt8C,MACjB,GAEDoU,EAAQra,EAAK+wB,MAEjB,OACE,qCACE,cAAC,IAAD,CAAS0xB,YAAY,OAAOC,OAAK,EAAjC,SACE,0FAGF,cAAC,IAAD,CACEhmC,YAAU,EACV3d,MAAO,CAAE+a,MAAO,QAChBvb,YAAY,6BACZ4b,iBAAiB,WACjB3a,SAAUb,KAAKgb,cACfja,MAAO,KACP0a,aAAc,SAACC,EAAOC,GAAR,OACZA,EAAOC,SAAS3M,cAAc3F,QAAQoS,EAAMzM,gBAAkB,GARlE,SAWGmM,IAGH,sBAAKhb,MAAO,CAAEioB,UAAW,IAAzB,UACE,cAAC,EAAD,CAAWlnB,MAAOua,EAAM0Z,SACxB,cAAC,EAAD,CAAWj0B,MAAOua,EAAM2Z,gBAExB,cAAC,GAAD,CAA2Bl0B,MAAOua,EAAM6d,SAExC,gCACE,cAAC,GAAD,CAAcp4B,MAAOua,EAAM4Z,UAC3B,cAAC,IAAD,CAAQl1B,MAAO,CAAE4jD,OAAQ,IACvBv4C,QAASiQ,EAAMpK,YADjB,SAC+BoK,EAAMma,UAAU30B,UAC9Cwa,EAAMuoC,wB,GA3DsB1iD,a,IAmE1BC,YAASojD,I,QC3ElBC,I,yDACJ,WAAYjkD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI4qB,GALF,E,qDAYjB,IAAI1qB,EAAOrB,KAAKiB,MAEhB,GAA4B,kBAAxBI,EAAK+H,KAAK0gB,IAAI7Z,MAEJ5O,EAAKkC,MAGnB,OACE,mCACGlC,EAAKkC,Y,GAtBmBhC,cCU3BujD,IDkBStjD,YAASqjD,ICpBL/pC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIqoB,GALF,E,qDAYjB,IAAInoB,EAAOrB,KAAKiB,MAEhB,OACE,qCAEE,sBAAMuJ,UAAU,SAAhB,SACGnJ,EAAK8pB,UAAUjqB,UAGlB,oBAAId,MAAOiB,EAAK0jD,QAAhB,SACE,qBAAKv6C,UAAU,gBAAf,SACE,sBAAKA,UAAU,kBAAf,UACGnJ,EAAKgtB,cACJ,cAAC,KAAD,CAAS1F,QAAQ,QACfjpB,QAAS,8BACN2B,EAAKmtB,4BACJntB,EAAKmtB,4BAA4B7Y,KAAI,SAAA1O,GACnC,OAAO,+BAAeA,GAAJA,MAElB,KANR,SAQE,cAAC2hB,GAAA,EAAD,CAAoBpe,UAAU,4BAE9B,GACJ,mBAAGpK,MAAOiB,EAAK2jD,OACbv5C,QAASpK,EAAK8oB,WADhB,SAEG9oB,EAAK8pB,UAAUjqB,wB,GAvCLK,cAiDZC,eAASsjD,ICxDlBG,I,yDACJ,WAAYrkD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI+K,GALF,E,qDAYjB,IAAI7K,EAAOrB,KAAKiB,MAEhB,OACE,mCACGI,EAAK2K,e,GAjBiBzK,cAuBhBC,eAASyjD,ICflBC,IAFapqC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIgf,GALF,E,qDAYjB,IAAI9e,EAAOrB,KAAKiB,MACZ0X,EAAQtX,EAAK+H,KACb0gC,EAAUnxB,EAAMtP,QAEhB87C,EAAW9jD,EAAKogB,UAAYpgB,EAAK+f,SAASzL,KAAI,SAAC1O,EAAGC,GACpD,OAAO,cAACg+C,EAAD,CAAa/jD,MAAO8F,GAAQA,EAAEwJ,OAClC,GAED20C,EAAe/jD,EAAKkgB,UACtB,cAAC,IAAD,CAAQld,KAAK,QAAQjE,MAAO,CAAEilD,YAAa,EAAG/6C,SAAU,IAAMkB,KAAK,UACjEC,QAASpK,EAAKmgB,UADhB,SAEE,cAAC,GAAD,CAAUrgB,MAAOE,EAAKolB,0BAEtB,qBAAKrmB,MAAO,CAAE+c,QAAS,cAE3B,OACE,qCACE,+BACE,oBAAImoC,MAAM,MAAV,SACE,sBAAK96C,UAAU,0BACbpK,MAAOiB,EAAK4vC,MADd,UAEGmU,EACD,+BACE,cAAC,GAAD,CAAkBjkD,MAAOE,EAAKue,qBAG/Bve,EAAKkkD,wBACJ,sBAAK/6C,UAAU,6BAAf,UACGnJ,EAAKmkD,2BACLnkD,EAAKokD,oBAEN,GAEHpkD,EAAKqkD,iBACLrkD,EAAKskD,kBAGT7b,EAAQn0B,KAAI,SAAC4B,EAAGquC,GACf,IAAI1gC,EAAOvM,EAAMk9B,QAAQt+B,EAAGlW,GAAM,GAClC,OAAO6jB,EAAO,cAAC,GAAD,CAA4B/jB,MAAO+jB,GAAhBA,EAAKzU,IAAsB,SAG/D00C,S,GAvDiB5jD,cA6DXC,eAAS0jD,I,UCvElBW,G,kDACJ,WAAYjlD,GAAQ,IAAD,uBACjB,cAAMA,IAURklD,KAAO,SAAChlD,KAXW,IAGXK,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI2tC,GALF,E,qDAgBjB,IAAIztC,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,cAAC,WAAD,CAASI,KAAMA,EAAKwS,KAAMkyC,SAAU1kD,EAAKquC,SACvCsW,QAAS3kD,EAAK+tC,QACd3jC,QAASzL,KAAK8lD,KAFhB,SAGGzkD,EAAK4O,c,GAxBY1O,a,IA+BbC,YAASqkD,I,kBCrBlBI,IAFanrC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIilC,GALF,E,qDAYjB,IAAI/kC,EAAOrB,KAAKiB,MAEZ6oC,EAAUzoC,EAAKgI,QACf2gC,EAAO3oC,EAAK6hB,SAEZgjC,EAAUpc,EAAUA,EAAQn0B,KAAI,SAAC1O,EAAGC,GACtC,OAAO,oBAAIo+C,MAAM,MAAiB96C,UAAU,0BAArC,SAAgEvD,EAAE/B,MAA7C+B,EAAEwJ,OAC3B,GAED01C,EAAanc,EAAOA,EAAKr0B,KAAI,SAAC1O,EAAGC,GACnC,OAAO,cAAC,GAAD,CAAwB/F,MAAO8F,GAAbA,EAAEwJ,OACxB,GAGL,OACE,mCACGpP,EAAKm0C,aACJ,qCACE,sBAAKhrC,UAAU,4BAAf,UACE,oBAAIA,UAAU,mBAAd,oEAGA,gCACE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAAQjE,MAAO,CAAEipB,WAAY,IACvDrL,SAAU3c,EAAK60C,kBACfzqC,QAASpK,EAAKw2C,cAFhB,SAGE,cAACuO,GAAA,EAAD,MAEF,cAAC,IAAD,CAAQ56C,KAAK,UAAUnH,KAAK,QAAQoH,QAASpK,EAAK0tC,OAChDvkC,UAAU,oBADZ,SAEE,cAAC67C,GAAA,EAAD,YAKLhlD,EAAK60C,kBACJ,qBAAK1rC,UAAU,2BAAf,SACE,sBAAKA,UAAU,+BAAf,UACE,qBAAKA,UAAU,yBAAf,SACGnJ,EAAKilD,yBAGR,sBAAK97C,UAAU,kCAAf,UACE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAC1BmG,UAAWnJ,EAAKklD,gCAChB96C,QAASpK,EAAK82C,4BAFhB,SAGG92C,EAAKmlD,gCAER,cAAC,IAAD,CAAQh7C,KAAK,UAAUnH,KAAK,QAC1BoH,QAASpK,EAAKg3C,iBADhB,gBAEA,cAAC,IAAD,CAAQ7sC,KAAK,UAAUnH,KAAK,QAC1BoH,QAASpK,EAAK03C,qBADhB,oBAGC13C,EAAKolD,wCAIV,GAEJ,wBAAQj8C,UAAU,0CAAlB,UACE,uBAAOA,UAAU,cAAjB,SACE,+BACE,oBAAI86C,MAAM,MAAM96C,UAAU,gBAA1B,SACE,cAAC,IAAD,CAAQiB,QAASpK,EAAK23C,WAAYxtC,KAAK,UAAUnH,KAAK,QACpDjE,MAAO,CAAEoe,gBAAiB,UAAWE,OAAQ,QAD/C,iBAGDwnC,OAGL,gCACGC,UAGD,S,GAtFY5kD,cA6FbC,eAASykD,ICzFlBS,IAJa5rC,IAAXD,O,kDAKN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GAPqBmzB,GAAShmB,SAQTi1B,iBALT,E,qDAYjB,IAAIliC,EAAOrB,KAAKiB,MAEhB,OACE,qCACGI,EAAKmiC,oBACJ,cAAC,GAAD,CAAiBriC,MAAOE,EAAK+iC,kBAAsB,GAEpD/iC,EAAKoiC,aACJ,qCACE,cAAC,GAAD,CAActiC,MAAOE,EAAKslD,sBACzBtlD,EAAKkkC,YACJ,cAAC,GAAD,CAAiBpkC,MAAOE,EAAK8jC,gBAAoB,MAEnD,GAGJ,qBAAK/kC,MAAO,CAAEioB,UAAW,GAAzB,SACE,cAAC,GAAD,CAAYlnB,MAAOE,EAAKokC,6BAG1B,cAAC,IAAD,CAAQrlC,MAAO,CAAEioB,UAAW,GAAK5c,QAASpK,EAAKyiC,YAC7Cz/B,KAAK,SAASmH,KAAK,UADrB,sBAEA,qBAAKpL,MAAO,CAAEioB,UAAW,IAAzB,SACGhnB,EAAKuiC,cACJ,qBAAKxjC,MAAO,CAAE+nC,QAAS,OAAQye,eAAgB,UAA/C,SACE,gCACE,cAAC,KAAD,IACA,cAAC,GAAD,CAAUzlD,MAAOE,EAAK0kC,wBAEjB,cAAC,GAAD,CAAe5kC,MAAOE,EAAK4jC,cAAcmB,qB,GA1C7B7kC,cAiDlBC,eAASklD,I,6BCzDlBG,IAFa/rC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,uBACjB,cAAMA,IAURoa,cAAgB,SAAC9a,GACJ,EAAKe,MACX0b,cAAgBzc,GAbJ,IAGXiB,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIwoC,GALF,E,qDAiBjB,IAAItoC,EAAOrB,KAAKiB,MACZ6oC,EAAUzoC,EAAKgI,QAEf2gC,EAAO3oC,EAAKioC,KACZwd,EAAY,GAChB,GAAIhd,GAAWE,EAAM,CACnB,IAAI+c,EAAY,uBAAOv8C,UAAU,cAAjB,SACd,6BACGs/B,EAAQn0B,KAAI,SAAA1O,GACX,OAAO,oBAAIq+C,MAAM,MAAV,SACL,sBAAK96C,UAAU,yBACb2R,aAAclV,EAAEshC,iBAChBnsB,aAAcnV,EAAEuhC,qBAFlB,UAIGvhC,EAAEkiC,oBACD,qBAAK3+B,UAAU,sBAAf,SACGvD,EAAEigC,mBACD,cAAC,IAAD,CAAQ17B,KAAK,UAAUnH,KAAK,QAC1BmG,UAAU,8BACViB,QAASxE,EAAEwhC,SAFb,SAGE,cAACue,GAAA,EAAD,MAEA,qBAAKx8C,UAAU,iCAEnB,GAEHvD,EAAEqU,cAEFrU,EAAEkiC,oBACD,qBAAK3+B,UAAU,uBAAf,SACGvD,EAAEigC,mBACD,cAAC,IAAD,CAAQ17B,KAAK,UAAUnH,KAAK,QAC1BmG,UAAU,oCACViB,QAASxE,EAAE0hC,UAFb,SAGE,cAACse,GAAA,EAAD,MAEA,qBAAKz8C,UAAU,iCAEnB,OA7BoBvD,EAAEO,YAoChC0/C,EAAY,gCACbld,EAAKr0B,KAAI,SAAA1O,GACR,OAAO,6BACJA,EAAEgC,MAAM0M,KAAI,SAAA4B,GACX,OAAO,6BAAiBA,EAAEvL,UAAVuL,EAAE/P,SAFNP,EAAEO,UAQtBs/C,EAAY,wBAAOt8C,UAAU,iBAAjB,UACTu8C,EAAWG,KAIhB,OACE,mCACGJ,Q,GAhFevlD,cAsFTC,eAASqlD,ICxFlBM,IAFarsC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI6pC,GALF,E,qDAYjB,IAAI3pC,EAAOrB,KAAKiB,MAEhB,OACE,qCACE,cAAC,IAAD,CAAS6iD,YAAY,OAAOC,OAAK,EAAjC,SACE,mFAGF,cAAC,GAAD,CAAW5iD,MAAOE,EAAKsoC,iB,GArBcpoC,c,IA2B9BC,YAAS2lD,I,gBClCXC,I,OAAb,8FAQI,OAHKpnD,KAAK0V,QACR1V,KAAK0V,MAAQxK,GAAclL,OAEtBA,KAAK0V,OARhB,aAScxV,GACVF,KAAK0V,MAAQxV,IAVjB,qCAeI,OAAOF,KAAKktC,gBAfhB,aAgBuBhtC,GACnBF,KAAKktC,eAAiBhtC,EAEtBF,KAAK8L,MAAQZ,GAAclL,UAnB/B,MCFaqnD,GAAb,kCCEa7mD,GAAM,SAAC4P,EAAOrP,GACzB,IAAIL,EAAK,IAAI2mD,GAGb,OAFA3mD,EAAGuP,MAAQG,EACX1P,EAAG6C,MAAQxC,EACJL,GCOIo5B,GAAW,SAACr5B,GACvB,OAAOA,EAAE0tC,eACP,CACEv3B,GAAa,OAAQo2B,IACrBp2B,GAAa,gBAAiBo2B,IAC9Bp2B,GAAa,QAASo2B,IACtBp2B,GAAa,aAAco2B,KAG7B,CACEp2B,GAAa,OAAQo2B,IACrBp2B,GAAa,cAAeo2B,IAC5Bp2B,GAAa,WAAYo2B,MCpBlB7W,GAAW,kBAAM7B,GAAShmB,UAc1B6tC,GAAU,WACrB,OAbiB,SAAC17C,GAClB,IAAIC,EAAK,IAAI4mD,GAQb,OANA5mD,EAAGm2B,UAAYp2B,EACf0I,GACEgtB,KAAW8W,gCACX,kBAAMvsC,EAAGytC,eAAiBhY,KAAWgY,kBACrC,GAEKztC,EAIAF,CDhBc,WACrB,IAAIE,EAAK,IAAI0mD,GAIb,OAFA1mD,EAAGuP,MAAQ,gBAEJvP,ECWI6mD,KAIAztB,GAAW,SAACr5B,GACvB,OAAOA,EAAEo2B,UAAU/qB,OAGR07C,GAAc,SAAC/mD,GAC1B,OAAOA,EAAE0tC,eAAiB,gBACtB,wBAGOqD,GAAW,SAAC/wC,GACvB,OAAOA,EAAE0tC,eAAiB1tC,EAAE0tC,eAAejpC,KACvC,IC7BOixB,GAAW,kBAAM7B,GAAShmB,UAE1Bg5C,GAAb,WACE,aAAe,IAAD,gCASdG,cAAW9nD,EATG,KAmBdyQ,WAAQzQ,EAnBM,KA6Bd+V,WAAQ/V,EA7BM,KAmDdotC,qBAAkBptC,EAnDJ,KA6Dd+nD,aAAe,SAAC37C,GACd,MAAM,iBAAN,OAAwBA,EAAKxI,QAAU,EAAKokD,gBAAkB,SAAW,KA9D7D,KAiEdC,QAAU,SAAC77C,GACT,EAAK47C,gBAAkB57C,EAAKxI,OAjE5BxD,YAAeC,KAAM,CACnB+sC,gBAAkB9sC,IAClByV,MAAQzV,IACRmQ,MAAQnQ,IACRwnD,SAAWxnD,MANjB,qDAeI,OAHKD,KAAKynD,WACRznD,KAAKynD,SAAWv8C,GAAiBlL,OAE5BA,KAAKynD,UAfhB,aAgBiBvnD,GACbF,KAAKynD,SAAWvnD,IAjBpB,4BAyBI,OAHKF,KAAKoQ,QACRpQ,KAAKoQ,MAAQlF,GAAclL,OAEtBA,KAAKoQ,OAzBhB,aA0BclQ,GACVF,KAAKoQ,MAAQlQ,IA3BjB,4BAmCI,OAHKF,KAAK0V,QACR1V,KAAK0V,MAAQxK,GAAclL,OAEtBA,KAAK0V,OAnChB,aAoCcxV,GACVF,KAAK0V,MAAQxV,IArCjB,qCA0CI,OAAOF,KAAKktC,gBA1ChB,aA2CuBhtC,GACnBF,KAAKktC,eAAiBhtC,EAEtBF,KAAK62B,UAAUsX,eAAf,OAAgCjuC,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAG22B,UACnC72B,KAAK8L,MAAQZ,GAAclL,MAC3BA,KAAK6nD,SAAW38C,GAAiBlL,MACjCA,KAAKiQ,MAAQ/E,GAAclL,QAjD/B,sCAyDI,OAHKA,KAAK+sC,kBACR/sC,KAAK+sC,gBAAkB5W,KAAWwxB,iBAE7B3nD,KAAK+sC,iBAzDhB,aA0DwB7sC,GACpBF,KAAK+sC,gBAAkB5W,KAAWwxB,gBAAkBznD,IA3DxD,kCAuEI,OAAOiV,KAASi5B,gBAvEpB,KCDM0Z,G,kDACJ,WAAYlnD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU4mD,KALE,E,qDAYjB,IAAI1mD,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,qBAAKuJ,UAAU,UAAf,SAEE,sBAAKA,UAAU,mBAAf,UAEE,sBAAKA,UAAU,gBAAf,UAGE,uBAAMA,UAAU,iBAAhB,UACE,sBAAMA,UAAU,yBAAhB,SACGnJ,EAAKwmD,WAER,sBAAMr9C,UAAU,uBAAhB,SACGnJ,EAAK4O,WAKV,qBAAKzF,UAAU,iBAAf,SACGnJ,EAAKyK,MAAM6J,KAAI,SAAA1O,GACd,OAAO,mBAAiBwE,QAAS,kBAAMpK,EAAKumD,QAAQ3gD,IAClDuD,UAAWnJ,EAAKqmD,aAAazgD,GADxB,SAEJA,EAAEgJ,OAFUhJ,EAAE1D,eASvB,sBAAKiH,UAAU,kBAAf,UACE,kDACA,uDAAwBnJ,EAAK+sC,6B,GA/CjB7sC,aAwDXC,eAASsmD,IC7CXE,GAAwB,SAACvnD,GACpC,OAAOA,EAAEwnD,YAAY5+C,SAGV6+C,GAAa,SAACznD,GACzB,OAAOA,EAAE0nD,mBAAmBxyC,KAAI,SAAA1O,GAAC,OAAIsjC,GAAmBtjC,EAAGxG,EAAEgX,WCpBlD2wC,GAAb,WACE,aAAc,oCA8CdhgB,UAAY,WACV,EAAK3wB,MAAM2wB,aAhDf,iDASI,OAAOpoC,KAAKqB,MAThB,aAUanB,GACTF,KAAKqB,KAAOnB,EACZF,KAAKyX,MAAM0yB,WAAajqC,IAZ5B,yCAoBI,OAHKF,KAAKqoD,qBACRroD,KAAKqoD,mBAAqBn9C,GAA2BlL,OAEhDA,KAAKqoD,oBApBhB,aAqB4BnoD,GACxBF,KAAKqoD,mBAAqBnoD,EAE1BF,KAAKqJ,QAAU6B,GAAgBlL,QAxBnC,8BAgCI,OAHKA,KAAK8pC,UACR9pC,KAAK8pC,QAAU5+B,GAAgBlL,OAE1BA,KAAK8pC,SAhChB,aAiCgB5pC,GACZF,KAAK8pC,QAAU5pC,EACfF,KAAKyX,MAAMpO,QAAUnJ,IAnCzB,4BAwCSF,KAAK2Y,SACE3Y,KAAK2Y,MDlBG,SAAClY,GACvB,IAAIC,EAAK,IAAIipC,GAWb,OATAjpC,EAAGonC,eAAgB,EACnBpnC,EAAGsoC,eAAiBh4B,KACpBtQ,EAAGqoC,iBAAmB0B,GACtB/pC,EAAG8oC,uBAAyB,SAACz9B,EAAMmZ,EAAMld,EAAKC,GAC5C,IAAIxD,EAAQwD,EAAIu/B,UAAU,GAE1B,OADUz7B,EAAKgF,SAAStM,IAG1B/D,EAAGwoC,yBAA2B,IACvBxoC,ECMoBwK,IACnB7B,QAAUrJ,KAAKqJ,SAErB,OAAOrJ,KAAK2Y,QA5ChB,kCAoDI,OAAO3Y,KAAKyX,MAAMpO,QAAQsF,QAAO,SAAA1H,GAAC,OAAKA,EAAEihC,YACtCvyB,KAAI,SAAA1O,GAAC,OAAIA,EAAEgJ,WArDlB,kCA0D2B,IAAD,EAAjBjQ,KAAKsoD,cACRtoD,KAAKsoD,YAAL,UAAmBtoD,KAAKoJ,KAAK8oB,eAA7B,aAAmB,EAAmBre,MAExC,OAAO7T,KAAKsoD,aA7DhB,aA8DoBpoD,GAChBF,KAAKsoD,YAAcpoD,EAEnBF,KAAKmoD,mBAAqBj9C,GAA2BlL,UAjEzD,KCHa0b,GAAQ,QACRiD,GAAS,SCQT4pC,GAAiB,SAAC9nD,GAAO,IAAD,EACnC,iBAAOA,EAAEyxB,eAAT,aAAO,EAAWhtB,MAGPsjD,GAA4B,SAAC/nD,GACxC,IAAMgoD,EAAkB,SAACvoD,GAAD,OAAOO,EAAEioD,mBAAqBxoD,GAElDkH,EAVsBoH,GAAOF,SAUbszC,uBAChBx6C,EAAK0E,MACP28C,EAAgBrhD,EAAK0E,OAErB3C,GACE/B,EAAKy6C,0BACL,kBAAM4G,EAAgBrhD,EAAK0E,WAKpB6N,GAAW,SAAClZ,GACvB,OHpBiB,SAAC2G,GAClB,IAAI1G,EAAK,IAAI0nD,GAKb,OAHA1nD,EAAG0I,KAAOhC,EACA1G,EAAG+W,MAEN/W,EGcAioD,CAAcloD,ICZVmoD,GAAb,WACE,aAAe,IAAD,gCAmBdlzC,WAAQ/V,EAnBM,KAwCdkpD,wCAA0C,GAxC5B,KAyEdC,UAAY,WACV,IAAIC,EAAa,EAAKC,WACjBD,EAKL,EAAK72B,QAAUgrB,GAAkB6L,GAJ/B5mD,IAAQ+7B,QAAQ,6DA5EN,KAgGd+qB,iBAAkB,EAhGJ,KAkGdC,YAAc,WAEZ,IAAIpR,EAAc,EAAKqR,yBACnBhjD,EAAM,EAAKijD,gBACfjjD,EAAI2F,MAAJ,YAAgBgsC,EAAYhsC,OAC5B3F,EAAIoW,YAAcu7B,EAAY76B,aAE9B,EAAKosC,mBAAqBC,GAC1B,EAAKL,iBAAkB,GA1GX,KA6GdI,wBAAqB1pD,EA7GP,KA+Gd4pD,0BAA4B,WAC1B,OAAQ,EAAKF,oBACX,KAAKC,GACH,EAAKD,mBAAqBC,GAC1B,MACF,KAAKA,GACH,EAAKD,mBAAqBC,KArHlB,KA4IdE,iBAAc7pD,EA5IA,KA6Ld8pD,eAAiB,WACf,IAAI9pC,EAAO,EAAK+pC,YACZC,EAAc,EAAKN,mBAEvB,IAAK1pC,GAAwB,IAAhBA,EAAK5Y,OAChB,OAAQ4iD,GACN,KAAKL,GAEH,YADAnnD,IAAQ+7B,QAAQ,sDAElB,KAAKorB,GAEH,YADAnnD,IAAQ+7B,QAAQ,qDAKtB,IAAIqa,GAAyB,EACzB7iC,EAhNoBlH,GAAOF,SAgNVszC,uBAAuB91C,MACxCxE,EAAQoO,EAAMnO,WAAU,SAAAN,GAAC,OAAIA,EAAE/B,OAASya,KAExCiqC,EAAU,EAAK13B,QACnB03B,EAAQ1kD,KAAOya,GAEA,IAAXrY,IACFsiD,EAAQ1gD,IAAMwM,EAAMpO,GAAO4B,IAEvBygD,IAAgBL,KAClB/Q,GAAyB,IAI7B,IAAMsR,EAAuB,WAE3B,IAAIvB,EAAcsB,EAAQ/1C,KAC1By0C,EAAY7G,aAAe,EAAKA,aAChC6G,EAAYj/C,QAAU,EAAKygD,YAAYC,YAEvCH,EAAQt3B,cAAa,SAACjxB,EAAM2oD,GAC1B,IAAIvR,EAAQ,EAAK0Q,yBACb7iD,EAAOmyC,EAAM3sC,MACbm+C,EAAU/M,GAAsB77C,GACpCuoB,QAAQC,IAAIogC,GAERD,GACF1jD,EAAKwB,KAAKmiD,GACVxR,EAAMl8B,YAAc0tC,IAEpB3jD,EAAKgB,GAAS2iD,EAEVxR,EAAM97B,gBAAkBrV,IAC1BmxC,EAAMl8B,YAAc0tC,IAIxB,EAAKhB,iBAAkB,EACvB9mD,IAAQF,QAAR,UAAmB+nD,EAAQ,MAAQ,OAAnC,8BAICzR,GAGH,EAAK2R,8BACH,kBAAML,KAER,EAAKM,gCAAiC,GALtCN,KAxPU,KAiQdM,gCAAiC,EAjQnB,KAsRdC,mBAAqB,WACnB,EAAKnB,iBAAkB,EACvB,EAAKxvB,eAAev4B,QAAUgK,GAAoB,IAvRlDnL,YAAeC,KAAM,CACnBipD,gBAAiBhpD,IACjBopD,mBAAqBppD,IACrBkqD,+BAAiClqD,MALvC,+CAWI,OAAOD,KAAKkJ,KAXhB,aAaShJ,GAAI,IAAD,OACRF,KAAKkJ,IAAMhJ,EACXu6C,GAA6Bv6C,GAAG,SAACwV,GAC/B,EAAK5J,MAAQ4J,OAhBnB,4BAsBI,OAAO1V,KAAK0V,OAtBhB,aAwBYxV,GACRF,KAAK0V,MAAQxV,EAEbF,KAAKyhD,aDoBsB,SAAChhD,GAC9B,IAAI6F,EAAO7F,EAAEqL,MACb,OAAuB,IAAhBxF,EAAKS,OAAejC,EAAcwB,EAAK,GAAG5C,SCtB3BwH,CAAqBlL,MDJf,SAACS,GAC7B,IAAImE,EAAWnE,EAAEghD,aAEX4I,EAAqB,SAACC,GAC1B,IAAIhjD,EAAQgjD,EAAS/iD,WAAU,SAAAN,GAAC,OAAIA,EAAE4M,KAAK4tC,eAAiB78C,KAC5D,IAAe,IAAX0C,EAAa,CACf,IAAIsiD,EAAUU,EAAShjD,GACvB7G,EAAE0oD,yBAAyB5sC,YAAcqtC,EACzCnpD,EAAEyxB,QAAUgrB,GAAkB0M,KAI9BtjD,EAAO7F,EAAEioD,mBACTpiD,EACF+jD,EAAmB/jD,GAEnB6C,GACE1I,EAAEooD,yCACF,kBAAMwB,EAAmB5pD,EAAEioD,uBAC3B,GCdFx9C,CAAoBlL,MACpBA,KAAK8pD,YAAYj2C,KAAO3T,IA7B5B,kCAqCI,OAHKF,KAAKuqD,cACRvqD,KAAKuqD,YAAcr/C,GAAclL,OAE5BA,KAAKuqD,cArChB,yCAgDI,OAHKvqD,KAAKwqD,oBACRt/C,GAA+BlL,MAE1BA,KAAKwqD,oBAhDhB,aAiD2BtqD,GACvBF,KAAKwqD,mBAAqBtqD,EAC1BF,KAAKmpD,yBAAyBr9C,MAAQ5L,EAEtCF,KAAK6oD,wCAAwC7hD,SAAQ,SAAAC,GAAC,OAAIA,EAAE1D,aArDhE,+CAyDkC,IAAD,OAC7B,IAAKvD,KAAKyqD,yBAA0B,CAClC,IAAInkD,EAAOtG,KAAK0oD,mBACd1oD,KAAK0oD,mBAAqB,GAExBviD,EAAMnG,KAAKyqD,yBACb1iC,GAAezhB,GAEjBH,EAAImV,YAAc,SAACvP,GAAD,OAAUA,EAAK7G,MACjCiB,EAAIuE,YAAc,gCAClBvE,EAAIsU,sBAAwB,SAACva,GAC3B,EAAK8oD,WAAa9oD,GAGtB,OAAOF,KAAKyqD,2BAvEhB,8BDeiC,IAAChqD,EC0E9B,OAHKT,KAAK4pD,UACR5pD,KAAK4pD,SDxEuBnpD,ECwEUT,KDvE1C4pB,QAAQC,IAAIppB,EAAEghD,cAEJvE,OCuEDl9C,KAAK4pD,SAzFhB,aA0FgB1pD,GACZF,KAAK4pD,QAAU1pD,EAEfF,KAAK8pD,YAAY7B,YAAc/nD,EAAE2T,OA7FrC,oDA4HI,OAAQ7T,KAAKqpD,oBACX,KAAKC,GACH,MAAO,cACT,KAAKA,GACH,MAAO,iBAhIf,kDAqII,OAAQtpD,KAAKqpD,oBACX,KAAKC,GACH,MAAO,MACT,KAAKA,GACH,MAAO,SAzIf,kCAkJI,OAHKtpD,KAAKwpD,cACRxpD,KAAKwpD,YAAct+C,GAAoBlL,OAElCA,KAAKwpD,aAlJhB,aAoJkBtpD,GACdF,KAAKwpD,YAActpD,IArJvB,qCAyJwB,IAAD,OACdF,KAAK0qD,kBACE1qD,KAAK0qD,eACbrzB,EAAar3B,KAAK0pD,YAAa,+BAC7BvpD,aAAe,SAACD,GAAD,OAAO,EAAKwpD,YAAcxpD,IAE/C,OAAOF,KAAK0qD,iBA/JhB,sCAmKyB,IAAD,OACpB,IAAK1qD,KAAK2qD,gBAAiB,CACzB,IAAIxkD,EAAMnG,KAAK2qD,gBAAkB5iC,GAAe,QAAIpoB,GACpDwG,EAAIuE,YAAc,gCAClBvE,EAAIsU,sBAAwB,SAACva,GAC3B,EAAKwpD,YAAL,OAAmBxpD,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAGgF,MAG1B,OAAOlF,KAAK2qD,kBA3KhB,2CA8K8B,IAAD,OACzB,OAAQ3qD,KAAKqpD,oBACX,KAAKC,GACH,IACIhjD,GADAH,EAAMnG,KAAKopD,iBACAt9C,MACXxE,EAAQhB,EAAKiB,WAAU,SAAAN,GAAC,OAAIA,EAAE/B,OAAS,EAAKwkD,eAGhD,OAFAvjD,EAAIoW,aAAyB,IAAXjV,EAChBhB,EAAKgB,QAAS3H,EACT,cAAC,GAAD,CAAYwB,MAAOgF,IAC5B,KAAKmjD,GACH,IAAInjD,EAEJ,OAFIA,EAAMnG,KAAKy5B,gBACXv4B,QAAUlB,KAAK0pD,YACZ,cAAC,EAAD,CAAWvoD,MAAOgF,OA1LjC,oDAoQuC,IAAD,OAYlC,OAAO,cAAC,KAAD,CAAOiK,MAXF,mBAYV6X,QAASjoB,KAAKmqD,+BACdjiC,KAPc,WACd,EAAKiiC,gCAAiC,EACtC,EAAKD,iCAKU/hC,SAVG,kBAClB,EAAKgiC,gCAAiC,GAOjC,SAVO,yGAtQlB,KCVMS,G,kDACJ,WAAYhqD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIinD,GALF,E,qDAYjB,IAAI/mD,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,sBAAKuJ,UAAU,sBAAf,UACE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAC1BmG,UAAU,wBACViB,QAASpK,EAAK+mC,UAFhB,eAGA,cAAC,GAAD,CAAWjnC,MAAOE,EAAKoW,iB,GArBClW,aA4BnBC,eAASopD,ICpBlBC,I,yDACJ,WAAYjqD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIynD,GALF,E,gEAYjB,IAAIvnD,EAAOrB,KAAKiB,MACVwP,EAAKzQ,KAAKY,MAAMkqD,MAAMC,OAAOt6C,GACnCpP,EAAKoP,GAAKA,EAjBS6jB,GAAShmB,SAoBjB08C,eAAiB,qB,+BAI5B,IAAI3pD,EAAOrB,KAAKiB,MAEhB,OACE,qCACE,sBAAKuJ,UAAU,+BAAf,UACE,6DACA,cAAC,GAAD,CAAYA,UAAU,8BAA8BrJ,MAAOE,EAAK8nD,2BAChE,cAAC,IAAD,CAAQ39C,KAAK,UAAUnH,KAAK,QAC1BoH,QAASpK,EAAKynD,UADhB,mBAGF,sBAAKt+C,UAAU,6BAAf,UACE,oBAAIA,UAAU,oBAAd,+DAGA,8BACE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAAQjE,MAAO,CAAEipB,WAAY,IACvDrL,SAAU3c,EAAK4nD,gBACfx9C,QAASpK,EAAK6nD,YAFhB,SAGE,cAAC9C,GAAA,EAAD,WAKL/kD,EAAK4nD,gBACJ,qBAAKz+C,UAAU,iCAAf,SACE,sBAAKA,UAAU,qCAAf,UACE,qBAAKA,UAAU,+BAAf,SACGnJ,EAAK4pD,uBAGR,sBAAKzgD,UAAU,wCAAf,UACE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAC1BmG,UAAWnJ,EAAK6pD,8BAChBz/C,QAASpK,EAAKkoD,0BAFhB,SAGGloD,EAAK8pD,8BAER,cAAC,IAAD,CAAQ3/C,KAAK,UAAUnH,KAAK,QAC1BoH,QAASpK,EAAKooD,eADhB,gBAEA,cAAC,IAAD,CAAQj+C,KAAK,UAAUnH,KAAK,QAC1BoH,QAASpK,EAAK+oD,mBADhB,oBAGC/oD,EAAK+pD,sCAIV,GAEJ,cAAC,GAAD,CAAqBjqD,MAAOE,EAAKyoD,qB,GArEZvoD,cA2Ed8pD,gBAAW7pD,YAASqpD,K,6BCjF7BS,I,yDACJ,WAAY1qD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI49B,GALF,E,qDAYjB,IAAI19B,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,sBAAKuJ,UAAU,wBAAf,UACE,cAAC,GAAD,CAAiBrJ,MAAOE,EAAKkqD,gBAC7B,cAAC,IAAD,CAAQlnD,KAAK,QAAQmH,KAAK,OACxBhB,UAAU,2BACViB,QAASpK,EAAK6O,OAFhB,SAGE,cAACs7C,GAAA,EAAD,CAAchhD,UAAU,sC,GAtBPjJ,cA8BdC,eAAS8pD,IC/BlBG,I,8EACJ,WAAY7qD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIw+B,GALF,E,qDAYjB,IAAIt+B,EAAOrB,KAAKiB,MAEhB,OACE,mCAEE,sBAAKuJ,UAAU,oBAAf,UAEE,cAAC,KAAD,CACEme,QAAStnB,EAAKg/B,aAAan/B,QAC3BxB,QACE,cAAC,KAAD,CAAQsnB,kBAAkB,MAAMC,gBAAgB,MAC9CC,QAAS7lB,EAAK4+B,sBAAuBp/B,SAAUQ,EAAKw+B,kBAJ1D,SAME,+BACGx+B,EAAKugC,iBAKV,cAAC,IAAD,CAAQp2B,KAAK,UAAUnH,KAAK,QAAQoH,QAASpK,EAAK6O,OAChD1F,UAAU,4BADZ,wB,GAhCwBjJ,cAyCnBC,eAASiqD,ICtClBC,G,kDACJ,WAAY9qD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIq/B,GALF,E,qDAYjB,IAAIn/B,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,sBAAKuJ,UAAU,kBAAf,UAEE,cAAC,GAAD,CAAYrJ,MAAOE,EAAK2f,cACtBxW,UAAU,2BAEZ,sBAAKA,UAAU,gCAAf,UAEE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAAQoH,QAASpK,EAAKo/B,QAChDj2B,UAAU,kCADZ,eAIA,qBAAKA,UAAU,uBAAf,SACGnJ,EAAKyK,MAAM6J,KAAI,SAAA1O,GACd,OAAO,cAAC,GAAD,CAAgC9F,MAAO8F,GAAbA,EAAEwJ,YAKzC,cAAC,IAAD,CAAQpM,KAAK,QAAQmH,KAAK,OACxBhB,UAAU,2BACViB,QAASpK,EAAK6O,OAFhB,SAGE,cAACs7C,GAAA,EAAD,CAAchhD,UAAU,sC,GAtCPjJ,aA8CdC,eAASkqD,IC5ClBC,IAFcC,KAAZC,Q,kDAGN,WAAYjrD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI0/B,GALF,E,qDAYjB,IAAIx/B,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,sBAAKuJ,UAAU,yBAAf,UAEE,sBAAKA,UAAU,qBAAf,UACE,sBAAKA,UAAU,wBAAf,UAEE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAAQoH,QAASpK,EAAKogC,UAChDj3B,UAAU,0BADZ,eAEA,+BAAM,0EAIPnJ,EAAKkT,QAAQoB,KAAI,SAAA1O,GAChB,OAAO,cAAC,GAAD,CAA2B9F,MAAO8F,GAAbA,EAAEwJ,UAKlC,sBAAKjG,UAAU,qBAAf,UACE,sBAAKA,UAAU,wBAAf,UAEE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAAQoH,QAASpK,EAAKkgC,cAChD/2B,UAAU,0BADZ,eAEA,+BAAM,+DAIPnJ,EAAKqT,YAAYiB,KAAI,SAAA1O,GACpB,OAAO,cAAC,GAAD,CAA2B9F,MAAO8F,GAAbA,EAAEwJ,mB,GA5CblP,cAqDhBC,eAASmqD,ICvDhBE,GAAYD,KAAZC,QAEFC,G,kDACJ,WAAYlrD,GAAQ,IAAD,uBACjB,cAAMA,IAURgK,UAAY,SAAC1K,GAEXA,EAAE6rD,mBAbe,IAGX5qD,EAAU,EAAKP,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI4gC,GALF,E,qDAiBjB,IAAI1gC,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,qBAAKuJ,UAAU,qBAAf,SACE,sBAAKA,UAAU,iBAAf,UAEInJ,EAAK8gC,oBAGH,GAFJ,cAAC,IAAD,CAAQ32B,KAAK,UAAUnH,KAAK,QAAQoH,QAASpK,EAAK4gC,YAChDz3B,UAAU,0BADZ,eAKA,cAAC,KAAD,CAAMgB,KAAK,OAAOhB,UAAU,YAC1B3J,SAAUQ,EAAKihC,cACf0pB,UAAW3qD,EAAKigC,eAChB12B,UAAW5K,KAAK4K,UAHlB,SAIGvJ,EAAK+/B,QAAQzrB,KAAI,SAAA1O,GAChB,OAAO,cAAC,GAAD,CAASglD,IAAKhlD,EAAEu7B,aAAhB,SACL,cAAC,GAAD,CAAkBrhC,MAAO8F,KADeA,EAAEwJ,oB,GApClBlP,aAgD3BC,eAASsqD,ICnDlBI,I,yDACJ,WAAYtrD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIwhC,GALF,E,qDAYjB,IAAIthC,EAAOrB,KAAKiB,MAEhB,OACE,mCAEE,sBAAKuJ,UAAU,MAAf,UAEE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAAQmG,UAAU,oBAC5CiB,QAASpK,EAAKuhC,KADhB,SAEE,cAACwjB,GAAA,EAAD,CAAY57C,UAAU,gBAGxB,cAAC,GAAD,CAA6BrJ,MAAOE,EAAKk4B,kB,GAzBbh4B,cAgCvBC,eAAS0qD,I,UC9BlBC,IAFarxC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI08B,GALF,E,qDAYjB,IAAIx8B,EAAOrB,KAAKiB,MACZya,EAAQra,EAAK+wB,MACbnxB,EAAQI,EAAKxB,MAEjB,OACE,mCACE,gCACE,eAAC,IAAD,CAAQ2L,KAAK,UAAUnH,KAAK,SAASoH,QAASpK,EAAKy8B,WACjD9f,SAAU/c,IAAU88B,GADtB,UAEE,cAACquB,GAAA,EAAD,IAFF,oDAKCnrD,IAAU88B,GAAuB,sBAAKvzB,UAAU,OAAf,UAChC,cAAC,EAAD,CAAWrJ,MAAOua,EAAM0Z,SACxB,cAAC,EAAD,CAAWj0B,MAAOua,EAAM2Z,gBACxB,sBAAK7qB,UAAU,OAAf,UACE,cAAC,IAAD,CAAQgB,KAAK,UAAUnH,KAAK,QAAQoH,QAASpK,EAAK28B,GAAlD,gBACA,cAAC,IAAD,CAAQxyB,KAAK,UAAUnH,KAAK,QAAQoH,QAASpK,EAAKozB,OAAlD,0BAEK,Y,GAhCUlzB,cAuCdC,eAAS2qD,ICzClBE,IAFavxC,IAAXD,O,kDAGN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAIs9B,GALF,E,qDAYjB,IAAIp9B,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,cAAC,GAAD,CAAWE,MAAOE,EAAKsoC,gB,GAjBEpoC,cAuBlBC,eAAS6qD,ICpBXl2B,GAAW,WACtB,OAAO7B,GAAShmB,UAQGg+C,G,WACnB,aAAe,yBAkBfC,eAAY5sD,EAlBE,KAwDdotC,qBAAkBptC,EAvDhBI,YAAeC,KAAM,CACnBusD,UAAWtsD,IACX8sC,gBAAiB9sC,M,+CAMnB,OAAOD,KAAKkJ,K,aAEPhJ,GAAI,IAAD,OACRF,KAAKkJ,IAAMhJ,E/EDQ,SAACgJ,EAAKqI,GAC3B,GAAKrI,EAAL,CACA,IAAIvG,EAAG,+CAA2CuG,GAClDyI,EAAQhP,GAAKiP,MAAK,SAAA5P,GAAQ,OAAIA,EAASX,QACpCuQ,MAAK,SAAAvQ,GACJ,IAAI0K,EAAOvL,GAAIa,GACXkQ,GACFA,EAAOxF,O+ELXygD,CAAoBtsD,GAAG,SAAC6L,GACtB,EAAKqyB,UAAYquB,GAAkB1gD,Q,gCAMrC,OAAO/L,KAAKusD,W,aAEArsD,GACZF,KAAKusD,UAAYrsD,EAEjBi2B,KAAWgY,eAAiBjuC,EAE5B,IAAIoG,EAAO,CAACpG,GACZi2B,KAAWmN,eAAex3B,MAAQxF,EAjC7BkI,GAAOF,SAkCH0H,WAAa9V,EAAE22B,UAAU7gB,WAElC,IAAI02C,EAAc1sD,KAAKujC,iBACvBmpB,EAAYjoB,qBAAuBn+B,EACnComD,EAAYtoB,gBAAgBtqB,aAAexT,EAE3C,IAAIqmD,EAAgB,kBAAMD,EAAYrnB,mBAAqB9G,EAAazyB,OAEpEyyB,EAAer+B,EAAE29B,aACjBU,EAAazyB,MACf6gD,IAEApuB,EAAa/H,qBAAqB1uB,MAAK,WACrC6kD,S,uCAOJ,IAAK3sD,KAAKytC,iBAAkB,CAC1B,IAAItnC,EAAMnG,KAAKytC,iBAAmBviC,GAAyBlL,MAC3Dm2B,KAAWoN,iBAAmBp9B,EAEhC,OAAOnG,KAAKytC,mB,sCAQZ,OAHKztC,KAAK+sC,kBACR/sC,KAAK+sC,gBAAkB5W,KAAWwxB,iBAE7B3nD,KAAK+sC,iB,aACQ7sC,GACpBF,KAAK+sC,gBAAkB7sC,I,kCAIvB,GAAKF,KAAKo+B,UAEV,OAAQp+B,KAAK2nD,iBACX,KAAK3a,GACH,OAAO,qBAAKxiC,UAAU,4BAAf,SACL,cAAC,GAAD,CAAoBrJ,MAAOnB,KAAKujC,qBAEpC,KAAKyJ,GACH,OAAO,mCACJhtC,KAAKo+B,UAAUiF,4BACd,cAAC,GAAD,CAAyBliC,MAAOnB,KAAKo+B,UAAUiF,8BAC7C,KAER,KAAK2J,GACH,OAAO,qBAAKxiC,UAAU,uBAAf,SACL,cAAC,GAAD,CAAgBrJ,MAAOnB,KAAKo+B,UAAUP,iBAE1C,KAAKmP,GACH,OAAO,cAAC,GAAD,CAAoB7rC,MAAOnB,KAAKo+B,UAAUK,sB,KCrG5CtI,GAAW,kBAAM7B,GAAShmB,UAe1Bs+C,GAAsB,SAACnsD,GAClC,IAAI0F,EAAM0mD,GAAyB,IAAIz2C,IAAkB,GAGzD,OAFAjQ,EAAIq9B,qBAAsB,EAC1Br9B,EAAIs9B,cAAe,EACZt9B,GCjBH2mD,G,kDACJ,WAAYlsD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GDJU,WACjB,IAAIT,EAAK,IAAI4rD,GAOb,OALAnjD,GACEgtB,KAAW2W,iCACX,kBAAMpsC,EAAGinD,gBAAkBxxB,KAAWwxB,mBACtC,GAEKjnD,ECHUwK,GALE,E,gEAYjB,IAAI7J,EAAOrB,KAAKiB,MACVwP,EAAKzQ,KAAKY,MAAMkqD,MAAMC,OAAOt6C,GACnCpP,EAAKoP,GAAKA,I,+BAIV,IAAIpP,EAAOrB,KAAKiB,MACZsrD,EAAYlrD,EAAK+8B,UAErB,OACE,mCACGmuB,EAAYlrD,EAAK0rD,YAAc,S,GAxBVxrD,aA8Bf8pD,gBAAW7pD,YAASsrD,KCnB7BE,G,uKAEF,IAAI3rD,EAAOizB,GAAShmB,SAEpB,OACE,mCACE,sBAAK9D,UAAU,cAAf,UACE,cAAC,GAAD,IACA,sBAAKA,UAAU,6BAAf,UACE,qBAAKA,UAAWnJ,EAAK2pD,eAArB,SAEE,cAAC,KAAD,CAAQiC,SAAU7iC,gBAAlB,SACE,eAAC,KAAD,WACE,cAAC,KAAD,CAAO8iC,OAAK,EAACC,KAAK,IAAIC,UAAWC,KACjC,cAAC,KAAD,CAAOH,OAAK,EAACC,KAAK,kBAAkBC,UAAWvC,KAC/C,cAAC,KAAD,CAAOqC,OAAK,EAACC,KAAK,eAAeC,UAAWN,YAKlD,qBAAKtiD,UAAU,0C,GApBFjJ,aA4BVC,eAASwrD,IC/CXM,GAAb,kCCAaC,GAAb,sCACEnsC,SAAW,ICDAhP,GAAU,UACVo7C,GAAU,UACVC,GAAc,eACdC,GAAuB,wBACvBC,GAAqB,sBCDrBntD,GAAM,SAANA,EAAOgL,EAAM4E,GACxB,IAAI1P,EAAK,IAAI6sD,GAGb,OAFA7sD,EAAGuP,MAAQG,GAAgB5E,EAEnBA,GACN,KAAKoiD,GACHltD,EAAG0gB,SAAW,CACZ5gB,EAAI,QACJA,EAAI,aACJA,EAAI,eACJA,EAAIotD,GAAgB,SAEtB,MACF,KAAKA,GACHltD,EAAG0gB,SAAW,GACd,MACF,KAAKwsC,GACHltD,EAAG0gB,SAAW,CACZ5gB,EAAIotD,GAAyB,YAC7BptD,EAAIotD,GAAuB,UAC3BptD,EDlB4B,wBCkBC,YAC7BA,EDlBiC,6BCkBC,iBAClCA,EDlB4B,wBCkBC,aAE/B,MACF,KAAKotD,GACHltD,EAAG0gB,SAAW,CACZ5gB,EAAI,YACJA,EAAI,YACJA,EAAI,eACJA,EAAI,YACJA,EAAI,eACJA,EAAI,eACJA,EAAI,SACJA,EAAI,gBACJA,EAAI,WACJA,EAAI,gBACJA,EAAI,cACJA,EAAI,wBACJA,EAAI,aAEN,MACF,KAAKotD,GACHltD,EAAG0gB,SAAW,CACZ5gB,EAAI,SACJA,EAAI,aACJA,EAAI,YACJA,EAAI,SACJA,EAAI,SAEN,MACF,QACEE,EAAG0gB,SAAW,GAIlB,OAAO1gB,GCvDImtD,GAAb,WACE,aAAe,IAAD,gCAedztC,cAAWzgB,EAfG,KAuBdmuD,WAAY,EAvBE,KA8BdtsC,UAAY,WACV,EAAKusC,WAAa,EAAKA,UACvB,EAAKC,mBAAmB9sD,QAAUgK,GAAyB,IA/B3DnL,YAAeC,KAAM,CACnBogB,SAAUngB,IACV6tD,UAAY7tD,MAJlB,kDASI,OAAOD,KAAK62B,UAAU5mB,QAT1B,mCAaI,OAAgC,IAAzBjQ,KAAKohB,SAASra,SAbzB,+BAqBI,OAHK/G,KAAKogB,WACRpgB,KAAKogB,SAAWlV,GAAiBlL,OAE5BA,KAAKogB,WArBhB,gCA0BI,OAAOpgB,KAAK8tD,WA1BhB,aA2BkB5tD,GACdF,KAAK8tD,UAAY5tD,IA5BrB,yCA0CI,OAJKF,KAAKiuD,qBACRjuD,KAAKiuD,mBACH52B,EAAansB,GAAyBlL,QAEnCA,KAAKiuD,uBA1ChB,KCDaztD,GAAM,SAACC,GAClB,IAAIC,EAAK,IAAImtD,GAIb,OAFAntD,EAAGm2B,UAAYp2B,EAERC,GAII6wC,GAAc,SAAC9wC,GAC1B,OAAOA,EAAEo2B,UAAUzV,SAASzL,KAAI,SAAA1O,GAAC,OAAIzG,GAAIyG,OAG9BinD,GAAsB,SAACztD,GAClC,OAAOA,EAAEstD,UAAY,IAAM,KCNhB5R,GAAU,WACrB,OAPiB,SAAC17C,GAClB,IAAIC,EAAI,IAAIytD,GAEZ,OADAztD,EAAGm2B,UAAYp2B,EACRC,EAIAF,CCRc,WACrB,IAAIE,EAAK,IAAI4sD,GAOb,OALA5sD,EAAGoL,MAAQ,CACT8K,GAAag3C,IACbh3C,GAAag3C,KAGRltD,EDAI6mD,KETA4G,GAAb,WACE,aAAe,yBAMfz4C,WAAQ/V,EALNI,YAAeC,KAAM,CACnB0V,MAAOzV,MAHb,kDAYI,OAHKD,KAAK0V,QACR1V,KAAK0V,MAAsB1V,KFInB62B,UAAU/qB,MAAM6J,KAAI,SAAA1O,GAAC,OAAI2P,GAAa3P,OEFzCjH,KAAK0V,UAZhB,KCIM04C,I,yDACJ,WAAYxtD,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU,IAAI0sD,GALF,E,qDAYjB,IAAIxsD,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,uBAAMuJ,UAAU,YAAhB,UACGnJ,EAAK4O,MAGL5O,EAAKgtD,aACJ,cAAC,IAAD,CAAQ7jD,UAAU,oBAChBgB,KAAK,UAAUnH,KAAK,QACpBoH,QAASpK,EAAKmgB,UAFhB,SAGKngB,EAAK2sD,mBAAmB9sD,UAE3B,GAGHG,EAAK0sD,UACJ,qBAAKvjD,UAAU,kBAAf,SACGnJ,EAAK+f,SAASzL,KAAI,SAAA1O,GACjB,OAAO,cAACmnD,EAAD,CACLjtD,MAAO8F,GADmBA,EAAEgJ,YAIhC,Y,GArCe1O,cA4CdC,eAAS4sD,ICrClBE,IAJaxzC,IAAXD,O,kDAKN,WAAYja,GAAQ,IAAD,0BAGXO,GAFN,cAAMP,IAEeA,MAAfO,MAHW,OAOf,EAAKF,MAHFE,GACU+J,KALE,E,qDAYjB,IAAI7J,EAAOrB,KAAKiB,MAEhB,OACE,mCACE,qBAAKuJ,UAAU,kBAAf,SACGnJ,EAAKyK,MACJzK,EAAKyK,MAAM6J,KAAI,SAAA1O,GACb,OAAO,cAAC,GAAD,CACL9F,MAAO8F,GADmBA,EAAEgJ,UAG9B,W,GAvBY1O,cA8BXC,eAAS8sD,IClClBjB,G,uKAEF,IAAIhsD,EAAOizB,GAAShmB,SAEhBigD,EAAO,GACX,OAAQltD,EAAKsmD,iBACX,KAAK3a,GACHuhB,EAAO,qBAAK/jD,UAAU,4BAAf,SACL,cAAC,GAAD,CAAoBrJ,MAAOE,EAAKkiC,qBAElC,MACF,KAAKyJ,GACHuhB,EAAO,cACP,MACF,KAAKvhB,GACHuhB,EAAO,cAAC,GAAD,IAIX,OACE,mCACGA,Q,GArBchtD,aA2BRC,eAAS6rD,ICtBTmB,G,uKANX,OACE,cAAC,GAAD,Q,GAHYjtD,aCKHktD,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/8C,MAAK,YAAkD,IAA/Cg9C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAAShkD,OACP,cAAC,GAAD,IACA2hC,SAASsiB,eAAe,SAM1BT,O","file":"static/js/main.a7bfda15.chunk.js","sourcesContent":["export const text = 'text'\r\nexport const password = 'password'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as ts from './TextState'\r\n\r\nexport class TextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder : observable,\r\n      State : observable\r\n    })\r\n  }\r\n\r\n  content = undefined\r\n  get Content(){\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  inputStyle\r\n\r\n  style\r\n  get Style() {\r\n    if (!this.style) {\r\n      this.style = this.inputStyle ? this.inputStyle : {};\r\n\r\n      if (this.wrapper) {\r\n        this.style.position = 'relative';\r\n      }\r\n    }\r\n    return this.style;\r\n  }\r\n\r\n  State = ts.text\r\n}","import { TextVM } from \"./TextVM\"\r\n\r\nexport const get = (q, placeholder) => {\r\n  var qI = new TextVM();\r\n  qI.content = q;\r\n  qI.placeholder = placeholder;\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport * as ts from '../text/TextState'\r\n\r\nclass InputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    var { value } = e.target;\r\n    this.state.Content = value;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { content, placeholder } = data;\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <Input value={content} onChange={this.onChange}\r\n            placeholder={placeholder} /> : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={content} onChange={this.onChange} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(InputView)","import axios from 'axios';\r\nimport { message } from 'antd';\r\n\r\nexport const API_URL = 'https://api.bimdev.vn/api';\r\n\r\n// const http = axios.create({\r\n//   baseURL: API_URL,\r\n//   Accept: 'application/json',\r\n//   'Content-Type': 'application/json',\r\n//   //timeout: 20000\r\n//   timeout: 20000000\r\n// });\r\n\r\nconst http = (timeout) => axios.create({\r\n    baseURL: API_URL,\r\n    Accept: 'application/json',\r\n    'Content-Type': 'application/json',\r\n    timeout\r\n  });\r\n\r\nconst handleNetworkError = (err) => {\r\n  message.error(`Error sending request: ${err}`);\r\n  return {\r\n    success: false\r\n  };\r\n}\r\n\r\nconst handleResponse = (response) => {\r\n  // Parse the axios response\r\n  const success = response.status >= 200 && response.status < 300;\r\n  const data = response.data;\r\n  let message = response.statusText;\r\n  return {\r\n    success,\r\n    data,\r\n    message\r\n  };\r\n}\r\n\r\nexport const callApi = async (action) => {\r\n  try {\r\n    const response = await action;\r\n    return handleResponse(response);\r\n  } catch (err) {\r\n    return handleNetworkError(err);\r\n  } finally { }\r\n}\r\n\r\nexport const timeout_default = 20000\r\n\r\nexport const get = async (url, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  return callApi(http(timeout).get(url, config));\r\n}\r\n\r\nexport const put = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).put(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const post = async (url, payload, config, timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).post(url, payload, config));\r\n  return result;\r\n}\r\n\r\nexport const del = async (url, payload,timeout) => {\r\n  timeout = timeout ? timeout : timeout_default\r\n  var result = await callApi(http(timeout).delete(url, payload));\r\n  return result;\r\n}","export const concrete = \"concrete\";\r\nexport const formwork = \"formwork\";\r\nexport const rebar = \"rebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [ concrete, formwork, rebar ];\r\n}\r\n\r\nexport const IsGetElement = (massType) => {\r\n  return massType === concrete || massType === formwork;\r\n}","import * as mt from '../MassType'\r\n\r\nexport const Project = 'Project'\r\nexport const Phase = 'Phase'\r\nexport const Workpackage = 'Workpackage'\r\nexport const Value = 'Value'\r\nexport const Unit = 'Unit'\r\nexport const partition = 'partition'\r\nexport const rebarType = 'rebarType'\r\nexport const elementName = 'elementName'\r\nexport const MassType = 'MassType'\r\nexport const workItem = 'workItem'\r\nexport const level = 'level'\r\nexport const diameter = 'diameter'\r\nexport const block = 'block'\r\nexport const discipline = 'discipline'\r\nexport const zone = 'zone'\r\nexport const typename = 'typename'\r\nexport const materialName = 'materialName'\r\nexport const systemtype = 'systemtype'\r\nexport const systemclassification = 'systemclassification'\r\nexport const familyName = 'familyName'\r\nexport const size = 'size'\r\n\r\nexport const GetAll = () => {\r\n  return [MassType, workItem, level, block, elementName, diameter]\r\n}\r\n\r\nexport const GetForMassGroup = () => {\r\n  return [\r\n    MassType, workItem, level, block, zone,\r\n    familyName, typename,\r\n    elementName, materialName,\r\n    systemtype, systemclassification, size\r\n\r\n  ]\r\n}\r\n\r\nexport const GetDirectiveFields = () => {\r\n  return [Project, Workpackage, Value, Unit];\r\n}\r\n\r\nexport const GetIdentifyFields = () => {\r\n  return [elementName];\r\n}\r\n\r\nexport const Get_MassInfo_Fields = () => {\r\n  return [materialName]\r\n}\r\n\r\nexport const GetFullFields = (massItem, field) => {\r\n  switch (field) {\r\n    case Project:\r\n    case Value:\r\n    case Unit:\r\n    case MassType:\r\n    case Phase:\r\n      return {\r\n        fields: [field],\r\n        isFromElement: false\r\n      };\r\n    case workItem:\r\n    case elementName:\r\n    case rebarType:\r\n    case partition:\r\n    case level:\r\n    case diameter:\r\n    case block:\r\n    case zone:\r\n    case typename:\r\n    case materialName:\r\n    case systemtype:\r\n    case systemclassification:\r\n    case familyName:\r\n    case size:\r\n      var massType = massItem[MassType];\r\n      if (Get_MassInfo_Fields().includes(field) ||\r\n        massType === mt.rebar) {\r\n        return {\r\n          fields: ['Info', field],\r\n          isFromElement: false\r\n        };\r\n      } else {\r\n        var groupName = undefined;\r\n        // kiểm tra các phân nhóm trong Element: identify, locate ...\r\n        switch (field) {\r\n          case workItem:\r\n          case elementName:\r\n          case typename:\r\n          case systemtype:\r\n          case systemclassification:\r\n          case familyName:\r\n            groupName = 'identify';\r\n            break;\r\n          case level:\r\n          case block:\r\n          case zone:\r\n            groupName = 'locate';\r\n            break;\r\n          case size:\r\n            groupName = 'geometry';\r\n            break;\r\n        }\r\n        return {\r\n          fields: ['Element', 'info', groupName, field],\r\n          isFromElement: true\r\n        }\r\n      }\r\n  }\r\n}\r\n\r\nexport const GetValueString = (massFieldValue, field) => {\r\n  var value = undefined;\r\n\r\n  switch (field) {\r\n    case Project:\r\n    case Phase:\r\n      value = massFieldValue.Name;\r\n      break;\r\n    case Workpackage:\r\n      value = massFieldValue.FullName;\r\n      break;\r\n    default:\r\n      value = massFieldValue;\r\n      break;\r\n  }\r\n\r\n  return value ? value : 'undefined';\r\n}\r\n\r\nexport const GetListForTypicalLevelFilter = () => {\r\n  return [workItem, MassType, block]\r\n}\r\n\r\nexport const GetDefaultListValue = (field) => {\r\n  switch (field) {\r\n    case workItem:\r\n      return ['Dầm', 'Sàn', 'Cột', 'Vách'];\r\n    default:\r\n      return [];\r\n  }\r\n}","import * as api from './apiUtil'\r\n\r\nexport let dtFormat = new Intl.DateTimeFormat('en-GB');\r\n\r\nexport const deepClone = (q) => {\r\n  return JSON.parse(JSON.stringify(q));\r\n}\r\n\r\nexport const randomId = () => {\r\n  // Math.random should be unique because of its seeding algorithm.\r\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n  // after the decimal.\r\n  return Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const newGUID = () => {\r\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\r\n    (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\r\n  );\r\n}\r\n\r\nexport const UpdateFromModel = (obj, action) => {\r\n  obj.M2VM = true;\r\n  action();\r\n  obj.M2VM = false;\r\n}\r\n\r\nexport const MoveItem = (list, oldIndex, newIndex) => {\r\n  if (oldIndex === -1 || newIndex === -1 ||\r\n    oldIndex === newIndex) return;\r\n  var temp = list[oldIndex];\r\n  list[oldIndex] = list[newIndex];\r\n  list[newIndex] = temp; \r\n}\r\n\r\nexport const IsEqual = (list1, list2) => {\r\n  if (list1.length !== list2.length) return false;\r\n  var isValidCheck = true;\r\n  var isEqual = true;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && x !== list2[i]) {\r\n      isValidCheck = false; isEqual = false;\r\n    }\r\n  })\r\n\r\n  return isEqual;\r\n}\r\n\r\nexport const IsSameValues = (list1, list2) => {\r\n  var isValidCheck = true;\r\n  var isSame = true;\r\n\r\n  if (list1.length !== list2.length) return false;\r\n\r\n  list1.forEach((x, i) => {\r\n    if (isValidCheck && !list2.includes(x)) {\r\n      isValidCheck = false; isSame = false;\r\n    }\r\n  })\r\n\r\n  return isSame;\r\n}\r\n\r\nexport const GroupBy = function (xs, key) {\r\n  var groups = [];\r\n\r\n  xs.forEach(x => {\r\n    var val = x[key];\r\n    var group = undefined;\r\n    var index = groups.findIndex(y => val === y.Key);\r\n    if (index === -1) {\r\n      group = {\r\n        Key: val,\r\n        Items: []\r\n      };\r\n      groups.push(group);\r\n    } else {\r\n      group = groups[index];\r\n    }\r\n    group.Items.push(x);\r\n  })\r\n\r\n  return groups;\r\n};\r\n\r\nexport const Remove = (dict, key) => {\r\n  var index = dict.findIndex(x => x.Key === key);\r\n  if (index !== 0) {\r\n    return dict.splice(index, 1);\r\n  }\r\n}\r\n\r\nexport const Add = (dict, func, isDelete = true) => {\r\n  var key = newGUID();\r\n\r\n  var newfunc = () => {\r\n    if (func) {\r\n      func();\r\n    }\r\n    if (isDelete) {\r\n      Remove(dict, key);\r\n    }\r\n  }\r\n\r\n  dict.push({\r\n    Key: newGUID(),\r\n    Value: newfunc\r\n  });\r\n}\r\n\r\n// Truy xuất thông tin Excel\r\nexport const ExcelColumnName = (n) => {\r\n  var ordA = 'A'.charCodeAt(0);\r\n  var ordZ = 'Z'.charCodeAt(0);\r\n  var len = ordZ - ordA + 1;\r\n\r\n  var s = \"\";\r\n  while(n >= 0) {\r\n      s = String.fromCharCode(n % len + ordA) + s;\r\n      n = Math.floor(n / len) - 1;\r\n  }\r\n  return s;\r\n}\r\n\r\nexport const ExcelCellName = (row, col) => {\r\n  return `${ExcelColumnName(col)}${row+1}`;\r\n}\r\n\r\nexport const ExcelRangeName = (row1, col1, row2, col2) => {\r\n  return `${ExcelCellName(row1, col1)}:${ExcelCellName(row2, col2)}`\r\n}\r\n\r\n// Max min\r\nexport const MinMax = (arr) => {\r\n  return arr.reduce(({min, max}, v) => ({\r\n    min: min < v ? min : v,\r\n    max: max > v ? max : v,\r\n  }), { min: arr[0], max: arr[0] });\r\n}\r\n\r\n// Save Database\r\nexport const SaveDatabse = (q, url, handle) => {\r\n  var apiData = q.ApiData\r\n  var _id = apiData._id;\r\n\r\n  var isNew = _id ? false : true\r\n  const apiFunc = () => isNew ?\r\n    api.post(`${url}/add`, apiData) :\r\n    api.put(`${url}/edit`, apiData) \r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew){ \r\n        q._id = data._id\r\n      }\r\n      handle(data, isNew);\r\n    })\r\n}\r\n\r\n// Get plain text from paste\r\nexport const GetPlainText = (pasteEvent) => {\r\n  var text = (pasteEvent.originalEvent || pasteEvent).clipboardData.getData('text/plain');\r\n  return text;\r\n}","import * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport default class MassColumn {\r\n  _id\r\n  get id() {\r\n    if (!this._id){\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.Columns.indexOf(this);\r\n  }\r\n\r\n  Cells = []\r\n}","import { Component } from \"react\";\r\nimport React from 'react'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Input } from \"antd\";\r\nimport * as textVMUtil from '../text/TextVMUtil'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport * as ts from '../text/TextState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nclass NewInputView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.contentEditable = React.createRef();\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      var content = `Nội dung input`\r\n      this.state = textVMUtil.get(content);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    var data = this.state;\r\n    data.Content = e.target.value;\r\n  };\r\n\r\n  OnPaste = (e) => {\r\n    e.preventDefault();\r\n    var text = genUtil.GetPlainText(e);\r\n\r\n    var data = this.state;\r\n    data.Content = text;\r\n  }\r\n\r\n  OnKeyDown = (e) => {\r\n    // Ctrl + B\r\n    if (e.ctrlKey && e.which == 66) {\r\n      e.preventDefault();\r\n    }\r\n    else if (e.ctrlKey && e.which == 73) {\r\n      e.preventDefault();\r\n    }\r\n    // Enter\r\n    else if (e.keyCode == 13){\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var Content = data.Content;\r\n    var style = this.props.style ? this.props.style : {};\r\n    if (!style.minWidth) {\r\n      style.minWidth = 150\r\n      style.fontFamily = 'password'\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {data.State === ts.text ?\r\n          <ContentEditable className='ant-input' innerRef={this.contentEditable}\r\n            placeholder={data.Placeholder}\r\n            style={style}\r\n            html={Content ? Content : ''}\r\n            onChange={this.handleChange}\r\n            onKeyDown={this.OnKeyDown}\r\n            onPaste={this.OnPaste} />\r\n          : ''}\r\n        {data.State === ts.password ?\r\n          <Input.Password value={Content} onChange={this.handleChange}\r\n            style={style} /> : ''}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(NewInputView)","export const _default = \"default\";\r\nexport const edit = \"edit\";","import * as util from './TextRenderItemUtil'\r\n\r\nexport class TextRenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport * as rs from './TextRenderState'\r\nimport { TextRenderItem } from \"./TextRenderItem\";\r\nimport NewInputView from \"../input/NewInputView\";\r\nimport { Button } from \"antd\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new TextRenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (content, context) => <>\r\n        {content}\r\n        { context.Is_Tool_Visible && context.Is_Edit_Visible ?\r\n          <Button type='primary' size='small'\r\n            className='left10 btn-warning' onClick={context.Edit}\r\n          >e</Button>\r\n          : ''}\r\n      </>\r\n    case rs.edit:\r\n      return (content, context) => <>\r\n        <span className='input__wrapper'>\r\n          <NewInputView store={context} />\r\n          {context.Is_Tool_Visible && context.Is_OK_Visible ?\r\n            <Button type='primary' size='small'\r\n              onClick={context.EditOK}>ok</Button>\r\n            : ''}\r\n        </span>\r\n      </>\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './TextRenderItemUtil'\r\n\r\nexport default class TextRender_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../input/NewInputView';\r\nimport TextRender_Dict from './TextRender_Dict';\r\nimport * as ts from './TextState'\r\nimport * as rs from './TextRenderState'\r\n\r\nexport class EditableTextVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      content: observable,\r\n      placeholder: observable,\r\n      State: observable,\r\n       IsEditing: observable,\r\n      renderState: observable,\r\n      Is_Tool_Visible: observable,\r\n      Is_Edit_Visible : observable,\r\n      Is_OK_Visible: observable,\r\n      CanChange_RenderState : observable\r\n    })\r\n  }\r\n\r\n  content = undefined\r\n  get Content() {\r\n    return this.content;\r\n  }\r\n  set Content(v) {\r\n    this.content = v;\r\n    if (this.onSetContent) {\r\n      this.onSetContent(v);\r\n    }\r\n  }\r\n\r\n  placeholder = \"nội dung input\"\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  inputStyle\r\n\r\n  style\r\n  get Style() {\r\n    if (!this.style) {\r\n      this.style = this.inputStyle ? this.inputStyle : {};\r\n\r\n      if (this.wrapper) {\r\n        this.style.position = 'relative';\r\n      }\r\n    }\r\n    return this.style;\r\n  }\r\n\r\n  State = ts.text\r\n\r\n  IsEditing = false\r\n\r\n  titleFunc\r\n  get TitleFunc() {\r\n    if (!this.titleFunc) {\r\n      this.titleFunc = () => this.Content;\r\n    }\r\n    return this.titleFunc;\r\n  } set TitleFunc(v) {\r\n    this.titleFunc = v;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = new TextRender_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v) {\r\n    this.render_Dict = v;\r\n  }\r\n\r\n  OnSet_RenderState_Func_Dict = []\r\n\r\n  renderState = rs._default\r\n  get RenderState() {\r\n    return this.renderState;\r\n  } set RenderState(v) {\r\n    if (!this.CanChange_RenderState) {\r\n      return;\r\n    }\r\n\r\n    this.renderState = v;\r\n    this.OnSet_RenderState_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  CanChange_RenderState = true\r\n\r\n  Is_Tool_Visible = true\r\n  Is_Edit_Visible = true\r\n  Is_OK_Visible = true;\r\n\r\n  Edit = () => {\r\n    this.RenderState = rs.edit\r\n  }\r\n\r\n  EditOK = () => {\r\n    this.RenderState = rs._default\r\n  }\r\n\r\n  Render = () => {\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(this.Content, this);\r\n  }\r\n}","import * as util from './CategoryDataUtil'\r\n\r\nexport class CategoryData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new CategoryData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = util.GetCategoryNames();\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n}","export const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Columns']\r\n}","export const category = \"category\";\r\nexport const family = \"family\";\r\nexport const parameter = 'parameter'\r\n\r\nexport const GetAll = () => {\r\n  return [ category, family, parameter ];\r\n}","export const bystring = \"bystring\";\r\nexport const bynumber = \"bynumber\";\r\n\r\nexport const GetAll = () => {\r\n  return [ bystring, bynumber ];\r\n}","export const byequal = \"byequal\";\r\nexport const bycontain = \"bycontain\";\r\nexport const bynotcontain = \"bynotcontain\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bycontain, bynotcontain ];\r\n}","export const byequal = \"byequal\";\r\nexport const bysmaller = \"bysmaller\";\r\nexport const bysmallerorequal = \"bysmallerorequal\";\r\nexport const bybigger = \"bybigger\";\r\nexport const bybiggerorequal = \"bybiggerorequal\";\r\nexport const bybetween = \"bybetween\";\r\n\r\nexport const GetAll = () => {\r\n  return [ byequal, bysmaller, bybigger, bybetween ];\r\n}","import { CategoryData } from \"../../single/model/CategoryData\"\r\nimport { PMData } from \"../../single/model/PMData\";\r\nimport { EntFilter } from \"./EntFilter\"\r\nimport * as fct from './FilterCategoryType'\r\nimport * as fvt from './FilterValueType'\r\nimport * as sft from './StringFilterType'\r\nimport * as nft from './NumberFilterType'\r\n\r\nexport const categoryData = () => {\r\n  return CategoryData.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, categoryType) => {\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.valueType;\r\n  qI.NumberFilterType = q.numberFilterType;\r\n  qI.StringFilterType = q.stringFilterType;\r\n  qI.Values = q.values;\r\n  qI.CategoryType = categoryType;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  if (!q) return q;\r\n  var qI = new EntFilter();\r\n  qI.ValueType = q.ValueType;\r\n  qI.NumberFilterType = q.NumberFilterType;\r\n  qI.StringFilterType = q.StringFilterType;\r\n  qI.Values = [...q.Values];\r\n  qI.CategoryType = q.CategoryType;\r\n  return qI;\r\n}\r\n\r\nexport const GetValueStorageList = (q) => {\r\n  var list = [];\r\n\r\n  switch (q.CategoryType) {\r\n    case fct.category:\r\n      list = categoryData().CategoryNames;\r\n      break;\r\n    case fct.parameter:\r\n      list = pmData().ParameterNames;\r\n      break;\r\n  }\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    valueType: q.ValueType,\r\n    numberFilterType: q.NumberFilterType,\r\n    stringFilterType: q.StringFilterType,\r\n    values: q.Values\r\n  }\r\n}\r\n\r\nexport const IsValid = (filter, value) => {\r\n  if (value === undefined || value === null) return false;\r\n\r\n  var isValid = false;\r\n  var filterValues = filter.Values;\r\n  switch (filter.ValueType) {\r\n    case fvt.bystring:\r\n      if (typeof value === 'string') {\r\n        var filterType = filter.StringFilterType;\r\n        switch (filterType) {\r\n          case sft.byequal:\r\n            filterValues.forEach(x => {\r\n              if (!isValid && x === value) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bycontain:\r\n            var lowerVal = value.toLowerCase();\r\n            filterValues.forEach(x => {\r\n              if (!isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = true;\r\n              }\r\n            })\r\n            break;\r\n          case sft.bynotcontain:\r\n            var lowerVal = value.toLowerCase();\r\n            isValid = true;\r\n            filterValues.forEach(x => {\r\n              if (isValid && lowerVal.includes(x.toLowerCase())) {\r\n                isValid = false;\r\n              }\r\n            })\r\n            break;\r\n        }\r\n      }\r\n      break;\r\n    case fvt.bynumber:\r\n      if (!isNaN(value)) {\r\n        var filterType = filter.NumberFilterType;\r\n        switch (filterType) {\r\n          case nft.byequal:\r\n            return value === filterValues[0];\r\n          case nft.bysmaller:\r\n            return value < filterValues[0];\r\n          case nft.bysmallerorequal:\r\n            return value <= filterValues[0];\r\n          case nft.bybigger:\r\n            return value > filterValues[0];\r\n          case nft.bybiggerorequal:\r\n            return value >= filterValues[0];\r\n          case nft.bybetween:\r\n            var leftVal = filterValues[0];\r\n            var rightVal = filterValues[1];\r\n            return (filter.IsEqualLeft && leftVal === value) ||\r\n              leftVal < value && value < rightVal\r\n              || (filter.IsEqualRight && value === rightVal);\r\n        }\r\n      }\r\n      break;\r\n  }\r\n\r\n  L1:\r\n  return isValid;\r\n}","import * as util from './EntFilterUtil'\r\n\r\nexport class EntFilter\r\n{\r\n  ValueType\r\n  NumberFilterType\r\n  StringFilterType\r\n  IsEqualLeft\r\n  IsEqualRight\r\n\r\n  values\r\n  get Values(){\r\n    return this.values;\r\n  }\r\n  set Values(v){\r\n    this.values = v;\r\n  }\r\n\r\n  CategoryType\r\n\r\n  valueStorageList\r\n  get ValueStorageList(){\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = util.GetValueStorageList(this);\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byuser = 'byuser'\r\nexport const byauto = 'byauto'","import MGI_Item from \"./MGI_Item\";\r\nimport * as ct from './MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\nexport const create = (mgi, createType) => {\r\n  var qI = new MGI_Item();\r\n  qI.MassGroupItem = mgi;\r\n\r\n  if (!createType) {\r\n    qI.CreateType = ct.byauto;\r\n  } else {\r\n    qI.CreateType = ct.byuser;\r\n    qI.Value = genUtil.newGUID();\r\n    qI.Title = 'Tên đầu mục';\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, mgi) => {\r\n  var qI = new MGI_Item();\r\n\r\n  qI.Value = data.value;\r\n  qI.SupValue = data.supValue\r\n  qI.Title = data.title;\r\n  qI.newMGI_id = data.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = data.createType ? data.createType : ct.byauto\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, mgi) => {\r\n  var qI = new MGI_Item();\r\n\r\n  qI.Value = q.Value;\r\n  qI.SupValue = q.SupValue;\r\n  qI.Title = q.Title;\r\n  qI.newMGI_id = q.newMGI_id;\r\n  qI.MassGroupItem = mgi;\r\n  qI.CreateType = q.CreateType;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetNewMGI = (q) => {\r\n  var _id = q.newMGI_id;\r\n  if (!_id) return undefined;\r\n  var list = q.MassGroupItem.SupComponent.AllItems;\r\n\r\n  var index = list.findIndex(x => x._id === _id);\r\n  return index !== -1 ? list[index] : undefined;\r\n}","import { PMData } from '../../../../single/model/PMData';\r\nimport * as util from './MGI_ItemUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport default class MGI_Item {\r\n  Value\r\n\r\n  SupValue\r\n\r\n  get Index() {\r\n    return this.MassGroupItem.Items.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = this.Value;\r\n    }\r\n    return this.title;\r\n  }\r\n  set Title(v){\r\n    this.title = v;\r\n  }\r\n\r\n  newMGI\r\n  get NewMGI(){\r\n    if (!this.newMGI){\r\n      this.newMGI = util.GetNewMGI(this);\r\n\r\n      if (!this.newMGI && this.newMGI_id){\r\n        this.newMGI_id = undefined;\r\n      }\r\n    }\r\n    return this.newMGI;\r\n  }\r\n  set NewMGI(v){\r\n    this.newMGI = v;\r\n    if (!v || v === this.MassGroupItem){\r\n      this.newMGI_id = undefined;\r\n    }\r\n    else{\r\n      this.newMGI_id = v.id;\r\n    }\r\n  }\r\n\r\n  newMGI_id\r\n\r\n  get ApiData(){\r\n    return {\r\n      value : this.Value,\r\n      supValue: this.SupValue,\r\n      title : this.Title,\r\n      newMGI_id : this.newMGI_id,\r\n      createType : this.CreateType\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.MassGroupItem.Items.splice(this.Index, 1);\r\n  }\r\n}","import * as util from './MassItemUtil'\r\nimport * as mif from './MassItemField'\r\nimport { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport default class MassItem {\r\n  Value\r\n  Unit\r\n\r\n  projectId\r\n\r\n  project\r\n  get Project() {\r\n    if (!this.project) {\r\n      this.project = util.GetProject(this);\r\n    }\r\n    return this.project;\r\n  }\r\n\r\n  workpackageId\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    if (!this.workpackage) {\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = util.GetPhases(this);\r\n    }\r\n    return this.phases;\r\n  }\r\n\r\n  get ValidPhasesByInput() {\r\n    return util.GetValidPhasesByInput(this);\r\n  }\r\n\r\n  IsGetElement = false\r\n\r\n  OnGetElementDone_Funcs = []\r\n\r\n  set GetElementDone(v) {\r\n    this.OnGetElementDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  GetValue = (field) => {\r\n    if (!field) {\r\n      return;\r\n    }\r\n\r\n    var data = mif.GetFullFields(this, field);\r\n    var { fields, isFromElement } = data;\r\n\r\n    var getValFunc = () => {\r\n      var obj = this;\r\n      var isValid = true;\r\n\r\n      fields.forEach(x => {\r\n        if (isValid) {\r\n          var temp = obj[x];\r\n          obj = temp;\r\n          if (obj === undefined) {\r\n            isValid = false;\r\n          }\r\n        }\r\n      })\r\n\r\n      if (field === mif.Value){\r\n        var roundingFactor = 2;\r\n\r\n        if (this.Unit === 'each'){\r\n          roundingFactor = 0;\r\n        }\r\n\r\n        obj = obj.toLocaleString('en-US', { maximumFractionDigits: roundingFactor });\r\n      }\r\n\r\n      return obj;\r\n    }\r\n\r\n    if (!isFromElement || this.Element) {\r\n      var val = getValFunc();\r\n      return val;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id: this._id,\r\n      projectId: this.projectId,\r\n      elementId: this.elementId,\r\n      workpackageId: this.workpackageId,\r\n      exportSetId: this.exportSetId,\r\n      exportSetVersionId: this.exportSetVersionId,\r\n      value: this.Value,\r\n      unit: this.Unit,\r\n      massType: this.MassType,\r\n      info: this.Info\r\n    }\r\n  }\r\n\r\n  AddDatabase = (handle) => {\r\n    var apiData = this.ApiData;\r\n    var { _id } = apiData;\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n\r\n    var command = _id ? 'edit' : 'add';\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/${command}`, apiData) : api.post(`${url}/${command}`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (command === 'add') {\r\n          this._id = data._id;\r\n        }\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`${command} mass successfully`);\r\n      })\r\n  }\r\n\r\n  DeleteDatabase = (handle) => {\r\n    var apiData = {\r\n      _id: this._id\r\n    };\r\n    var url = `https://api.bimdev.vn/api/hbm`;\r\n    const apiFunc = () => api.put(`${url}/delete`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        if (handle) {\r\n          handle(data);\r\n        }\r\n        message.success(`delete mass successfully`);\r\n      })\r\n  }\r\n\r\n  IsGet_TLS_LevelGroup = false\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n\r\n  get Get_TLS_LevelGroup(){\r\n    return this.get_TLS_LevelGroup\r\n  }\r\n  set Get_TLS_LevelGroup(v) {\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n    this.get_TLS_LevelGroup = v;\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      util.Handle_TLS_LevelGroup(this);\r\n    }\r\n    return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true;\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    this.OnGet_FullValue_Func_Dict.forEach(x => x.Value())\r\n    this.get_FullValue = v;\r\n  }\r\n\r\n  // bao gồm giá trị tầng điển hình\r\n  fullValue\r\n  get FullValue() {\r\n    if (!this.fullValue) {\r\n      util.Handle_FullValue(this);\r\n    }\r\n    return this.fullValue;\r\n  } set FullValue(v) {\r\n    this.fullValue = v;\r\n    this.Get_FullValue = true;\r\n  }\r\n\r\n  phaseItems\r\n  get PhaseItems(){\r\n    if (!this.phaseItems){\r\n      this.phaseItems = util.GetPhaseItems(this);\r\n    }\r\n    return this.phaseItems;\r\n  }\r\n\r\n  GetPhaseItem = (phaseName) => {\r\n    var list = this.PhaseItems;\r\n    var index = list.findIndex(x => x.Phase.Name === phaseName);\r\n    return list[index];\r\n  }\r\n}","import * as util from './MIPh_ItemUtil'\r\n\r\nexport default class MIPh_Item {\r\n  Phase\r\n\r\n  get Project(){\r\n    return this.Phase.Project\r\n  }\r\n\r\n  get MassItem(){\r\n    return this.Dict;\r\n  }\r\n\r\n  IsGet_TLS_LevelGroup = false\r\n  OnGet_TLS_LevelGroup_Func_Dict = []\r\n\r\n  get Get_TLS_LevelGroup(){\r\n    return this.get_TLS_LevelGroup\r\n  }\r\n  set Get_TLS_LevelGroup(v) {\r\n    this.OnGet_TLS_LevelGroup_Func_Dict.forEach(x => x.Value());\r\n    this.get_TLS_LevelGroup = v\r\n  }\r\n\r\n  tls_LevelGroup\r\n  get TLS_LevelGroup() {\r\n    if (!this.tls_LevelGroup) {\r\n      util.Handle_TLS_LevelGroup(this);\r\n    }\r\n    return this.tls_LevelGroup;\r\n  } set TLS_LevelGroup(v) {\r\n    this.tls_LevelGroup = v;\r\n    this.Get_TLS_LevelGroup = true;\r\n  }\r\n\r\n  OnGet_FullValue_Func_Dict = []\r\n  set Get_FullValue(v) {\r\n    this.OnGet_FullValue_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  // bao gồm giá trị tầng điển hình\r\n  fullValue\r\n  get FullValue() {\r\n    if (!this.fullValue) {\r\n      util.Handle_FullValue(this);\r\n    }\r\n    return this.fullValue;\r\n  } set FullValue(v) {\r\n    this.fullValue = v;\r\n    this.Get_FullValue = true;\r\n  }\r\n}","import MIPh_Item from \"./MIPh_Item\"\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as mif from '../MassItemField'\r\n\r\n// Instance\r\nexport const get = (phase, dict) => {\r\n  var qI = new MIPh_Item();\r\n  qI.Phase = phase;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const Handle_TLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  var phase = q.Phase;\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    var pi = GetValidTLS_PageItem(q, tls.Data);\r\n    return GetValidTLS_LevelGroup(q, pi);\r\n  }\r\n\r\n  var tls = phase.TypicalLevelSetting;\r\n  if (tls) {\r\n    q.TLS_LevelGroup = getLevelGroup_Func(tls);\r\n  } else {\r\n    phase.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TLS_LevelGroup = getLevelGroup_Func(phase.TypicalLevelSetting);\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      isValid = x.Values.includes(q.MassItem.GetValue(field));\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // Kiểm tra Level hiện tại có trong tập hợp Level hay không\r\n    //if (!validLg && x.Levels.includes(q.GetValue(mif.level))) {\r\n\r\n    // Cách kiểm tra mới: Level primary tương ứng Leve hiện tại\r\n    if (!validLg && x.Primary === q.MassItem.GetValue(mif.level)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\nexport const Handle_FullValue = (q) => {\r\n  if (q.IsGet_FullValue) return undefined;\r\n  q.IsGet_FullValue = true;\r\n\r\n  const getFullValue_Func = (lg) => {\r\n    var count = lg ? lg.Count : 1\r\n    var obj = q.MassItem.Value * count;\r\n    return obj;\r\n  }\r\n\r\n  if (q.TLS_LevelGroup || q.Get_TLS_LevelGroup) {\r\n    q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n  } else {\r\n    genUtil.Add(q.OnGet_TLS_LevelGroup_Func_Dict,\r\n      () => {\r\n        q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n      });\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport MassItem from './MassItem';\r\nimport * as elementUtil from '../../element/ElementUtil'\r\nimport * as mt from '../MassType'\r\nimport * as ut from '../../value/ValueUnit'\r\nimport * as mif from './MassItemField'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as phaseItemUtil from './phaseValue/MIPh_ItemUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new MassItem();\r\n\r\n  qI._id = q._id;\r\n  qI.Value = q.value;\r\n  qI.Unit = q.unit;\r\n  qI.MassType = q.massType;\r\n  qI.Info = q.info;\r\n  qI.projectId = q.projectId;\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.exportSetId = q.exportSetId;\r\n  qI.exportSetVersionId = q.exportSetVersionId;\r\n  qI.Element = q.Elements && q.Elements.length !== 0 ? q.Elements[0] : undefined;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultRebarMass = (project) => {\r\n  var qI = new MassItem();\r\n\r\n  qI.Unit = ut.kg;\r\n  qI.MassType = mt.rebar;\r\n  qI.Info = {}\r\n  qI.projectId = project._id;\r\n\r\n  const setExportSetData = (exportSet) => {\r\n    qI.exportSetId = exportSet._id;\r\n\r\n    var currentVersion = exportSet.CurrentVersion;\r\n    if (!currentVersion) {\r\n      exportSet.OnGetCurrentVersionDone_Func.push(() => {\r\n        currentVersion = exportSet.CurrentVersion;\r\n        qI.exportSetVersionId = currentVersion._id;\r\n      })\r\n    } else {\r\n      qI.exportSetVersionId = currentVersion._id;\r\n    }\r\n  }\r\n\r\n  var inputExportSet = project.InputExportSet;\r\n  if (!inputExportSet) {\r\n    project.OnGetInputExportSetDone_Funcs\r\n      .push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        setExportSetData(inputExportSet);\r\n      })\r\n  } else {\r\n    setExportSetData(inputExportSet);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProject = (q) => {\r\n  var list = pmData().Project_Dict.Items;\r\n  var { projectId } = q;\r\n  var index = list.findIndex(x => x._id === projectId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const getAll = (apiData, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbmr/newlist\";\r\n\r\n  //var start = window.performance.now();\r\n\r\n  api.post(url, apiData, undefined, 2000000)\r\n    .then(response => response.data)\r\n    .then(data => {\r\n      //var end = window.performance.now();\r\n      //console.log(`Execution time: ${(end - start)/1000} s`);\r\n\r\n      if (!data) {\r\n        console.log('mass result undefined');\r\n        return;\r\n      }\r\n\r\n      var items = data.map(x => {\r\n        return get(x)\r\n      })\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getRebars = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbmr/rebar?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = undefined;\r\n      if (!data) {\r\n        items = [];\r\n      } else {\r\n        var items = data.map(x => get(x))\r\n      }\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getByViewDetail = (_id, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbdv/massdetail?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var { viewDetail, masses } = data;\r\n      var isGetElement = mt.IsGetElement(viewDetail.massType);\r\n      var items = masses.map(x => get(x, isGetElement));\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetWorkpackage = (q) => {\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var { workpackageId } = q;\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetPhases = (q) => {\r\n  var list = [];\r\n  var phases = pmData().Phase_Dict.Items;\r\n  var exportSetVersionId = q.exportSetVersionId;\r\n  phases.forEach(x => {\r\n    if (x.exportSetVersionIds.includes(exportSetVersionId)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetValidPhasesByInput = (q) => {\r\n  var inputPhases = pmData().MassResultComp.Phases;\r\n  var phases = q.Phases;\r\n  var list = [];\r\n  phases.forEach(x => {\r\n    if (inputPhases.includes(x)) {\r\n      list.push(x);\r\n    }\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetElementAsync = (q) => {\r\n  var elemId = q.elementId\r\n  if (elemId) {\r\n    elementUtil.GetById(elemId, (data) => {\r\n      q.Element = data\r\n      q.IsGetElement = true;\r\n      q.GetElementDone = true;\r\n    });\r\n  } else {\r\n    q.IsGetElement = true;\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup) return undefined;\r\n  q.IsGet_TLS_LevelGroup = true;\r\n\r\n  var project = q.Project;\r\n\r\n  const getLevelGroup_Func = (tls) => {\r\n    var pi = GetValidTLS_PageItem(q, tls.Data);\r\n    var obj = GetValidTLS_LevelGroup(q, pi);\r\n    return obj;\r\n  }\r\n\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    q.TLS_LevelGroup = getLevelGroup_Func(tls);\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TLS_LevelGroup = getLevelGroup_Func(project.TypicalLevelSetting);\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetValidTLS_PageItem = (q, tls) => {\r\n  if (!tls) return undefined;\r\n  var validPi = undefined\r\n  tls.PageItems.forEach(x => {\r\n    if (!validPi && IsValidTLS_PageItem(q, x)) {\r\n      validPi = x;\r\n    }\r\n  })\r\n\r\n  return validPi;\r\n}\r\n\r\nexport const IsValidTLS_PageItem = (q, pageItem) => {\r\n  var filters = pageItem.Filters;\r\n  var isValid = true;\r\n  filters.forEach(x => {\r\n    if (isValid) {\r\n      var field = x.Field;\r\n      isValid = x.Values.includes(q.GetValue(field));\r\n    }\r\n  })\r\n  return isValid;\r\n}\r\n\r\nexport const GetValidTLS_LevelGroup = (q, pageItem) => {\r\n  if (!pageItem) return undefined;\r\n  var validLg = undefined\r\n  pageItem.LevelGroups.forEach(x => {\r\n    // Kiểm tra Level hiện tại có trong tập hợp Level hay không\r\n    //if (!validLg && x.Levels.includes(q.GetValue(mif.level))) {\r\n\r\n    // Cách kiểm tra mới: Level primary tương ứng Leve hiện tại\r\n    if (!validLg && x.Primary === q.GetValue(mif.level)) {\r\n      validLg = x;\r\n    }\r\n  })\r\n  return validLg;\r\n}\r\n\r\nexport const Handle_FullValue = (q) => {\r\n  if (q.IsGet_FullValue) return undefined;\r\n  q.IsGet_FullValue = true;\r\n\r\n  const getFullValue_Func = (lg) => {\r\n    var count = lg ? lg.Count : 1\r\n    var obj = q.Value * count;\r\n\r\n    return obj;\r\n  }\r\n\r\n  if (q.TLS_LevelGroup || q.Get_TLS_LevelGroup) {\r\n    q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n  } else {\r\n    genUtil.Add(q.OnGet_TLS_LevelGroup_Func_Dict,\r\n      () => {\r\n        q.FullValue = getFullValue_Func(q.TLS_LevelGroup)\r\n      });\r\n  }\r\n}\r\n\r\nexport const GetPhaseItems = (q) => {\r\n  return q.Phases.map(x => phaseItemUtil.get(x, q));\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport MGI_Item from './MGI_Item'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport * as mgii_ct from './MGI_I_CreateType'\r\nimport * as rowUtil from '../MassRowUtil'\r\nimport * as util from './MassGroupItemUtil'\r\nimport { pmData } from '../../item/MassItemUtil'\r\n\r\nexport default class MassGroupItem {\r\n  Field\r\n  SubComponents = []\r\n  NotIncludeValues = []\r\n  IsHaveValueOrder\r\n  BindingRows\r\n  SupComponent\r\n\r\n  Items = []\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  get Index() {\r\n    return this.SupComponent.Items.indexOf(this);\r\n  }\r\n\r\n  get OrderItems() {\r\n    return this.Items;\r\n  }\r\n\r\n  get OrderValues() {\r\n    return this.Items.map(x => x.Value);\r\n  }\r\n\r\n  get ApiData() {\r\n    var items = this.Items.map(x => x.ApiData);\r\n\r\n    return {\r\n      _id: this.id,\r\n      field: this.Field,\r\n      subComponents: this.SubComponents.map(x => x.ApiData),\r\n      valueOrders: this.ValueOrders,\r\n      notIncludeValues: this.NotIncludeValues,\r\n      items\r\n    }\r\n  }\r\n\r\n  AddNotIncludeValue = (v) => {\r\n    var index = this.NotIncludeValues.indexOf(v);\r\n    if (index === -1) {\r\n      this.NotIncludeValues.push(v);\r\n    }\r\n  }\r\n\r\n  GetItem = (v, title) => {\r\n    var index = this.Items.findIndex(x => x.Value === v);\r\n    if (index === -1) {\r\n      var item = itemUtil.create(this)\r\n      item.Value = v;\r\n      item.Title = title;\r\n      this.Items.push(item);\r\n      return item;\r\n    }\r\n    return this.Items[index];\r\n  }\r\n\r\n  SupRows = []\r\n\r\n  On_AddSupRow_Func_Dict = []\r\n\r\n  AddSupRow = (v) => {\r\n    var list = this.SupRows;\r\n    if (list.indexOf(v) !== -1) return;\r\n\r\n    this.NewRow = v;\r\n    list.push(v);\r\n    this.HandleCreatedByUserRows();\r\n\r\n    this.On_AddSupRow_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  OnIsFirstSetSupRow_Funcs = []\r\n\r\n  isFirstSetSupRow\r\n  get IsFirstSetSupRow() {\r\n    return this.isFirstSetSupRow;\r\n  }\r\n  set IsFirstSetSupRow(v) {\r\n    this.isFirstSetSupRow = v;\r\n    this.OnIsFirstSetSupRow_Funcs.forEach(x => x());\r\n  }\r\n\r\n  get HaveMassItemSubComponents() {\r\n    return this.SubComponents.filter(x => x.IsHaveMassItem);\r\n  }\r\n\r\n  table\r\n  get Table() {\r\n    if (!this.table) {\r\n      this.table = util.GetTable(this);\r\n    }\r\n    return this.table;\r\n  }\r\n  set Table(v) {\r\n    this.table = v;\r\n  }\r\n\r\n  HandleCreatedByUserRows = () => {\r\n    var userItems = this.Items\r\n      .filter(x => x.CreateType === mgii_ct.byuser && !x.IsAdd_Done);\r\n\r\n    userItems.forEach(x => {\r\n      var value = x.Value;\r\n      var supRows = this.SupRows;\r\n      var supRow\r\n\r\n      var isValid = true;\r\n      if (!x.SupValue && supRows.length !== 0) {\r\n        supRow = supRows[0]\r\n      } else {\r\n        var index = supRows.findIndex(y => y.Name === x.SupValue);\r\n        if (index !== -1) {\r\n          supRow = supRows[index];\r\n        } else {\r\n          isValid = false;\r\n        }\r\n      }\r\n\r\n      if (!isValid) return false;\r\n\r\n      // Gán nhãn IsAdd_Done\r\n      x.IsAdd_Done = true;\r\n\r\n      const addRow = (supRow) => {\r\n        var row = this.Table.GetRow(value, supRow);\r\n        row.FullValue = value;\r\n        row.IsCreatedByUser = true;\r\n\r\n        // Lưu vào danh sách Tạo bởi người dùng trong đối tượng Table\r\n        this.Table.CreatedByUser_Rows.push(row);\r\n        return row;\r\n      }\r\n\r\n      const handleRow = (row) => {\r\n        row.MassGroupItem = this;\r\n        handleNonField(row);\r\n      }\r\n\r\n      const handleNonField = (row) => {\r\n        var subMgcIndex = this.SubComponents.findIndex(y =>\r\n          y.Filter.Values.includes(x.Value))\r\n        if (subMgcIndex !== -1) {\r\n          var subMgi = this.SubComponents[subMgcIndex].Items[0];\r\n          subMgi.AddSupRow(row);\r\n        }\r\n      }\r\n\r\n      var replaceMgi = x.NewMGI;\r\n      if (replaceMgi) {\r\n        var supName = x.SupValue;\r\n\r\n        replaceMgi.GetItem(value);\r\n        this.Table.Handle_ReplaceMGI(replaceMgi,supName, addRow, handleRow);\r\n      } else {\r\n        handleRow(addRow(supRow));\r\n      }\r\n    })\r\n  }\r\n}","import * as util from './MassGroupComponentUtil'\r\n\r\nexport default class MassGroupComponent {\r\n  Filter\r\n  Items\r\n  SupItem\r\n\r\n  originComponent\r\n  get OriginComponent(){\r\n    if (!this.originComponent){\r\n      this.originComponent = util.GetOriginComponent(this);\r\n    }\r\n    return this.originComponent;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      filter : this.Filter ? this.Filter.ApiData : undefined,\r\n      items: this.Items.map(x => x.ApiData)\r\n    }\r\n  }\r\n\r\n  get AllItems(){\r\n    return this.OriginComponent.AllSubItems;\r\n  }\r\n\r\n  get AllSubItems(){\r\n    var list = [...this.Items];\r\n    this.Items.forEach(x => \r\n      x.SubComponents.forEach(y => list.push.apply(list, y.AllSubItems)));\r\n    return list;\r\n  }\r\n}","import MassGroupComponent from \"./MassGroupComponent\"\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as itemUtil from './MassGroupItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\"\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, supItem) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  qI.Filter = data.filter ? filterUtil.get(data.filter) : undefined;\r\n\r\n  qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supItem) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupComponent();\r\n  qI.Filter = filterUtil.Clone(q.Filter);\r\n\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.SupItem = supItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetOriginComponent = (q) => {\r\n  return q.SupItem ? q.SupItem.SupComponent.OriginComponent : q;\r\n}","import MassGroupItem from \"./MassGroupItem\"\r\nimport * as compUtil from './MassGroupComponentUtil'\r\nimport * as itemUtil from './MGI_ItemUtil'\r\nimport { PMData } from \"../../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (field, subComps, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI.Field = field;\r\n  qI.SupComponent = supCom;\r\n  if (subComps) {\r\n    qI.SubComponents = subComps;\r\n  }\r\n  return qI;\r\n}\r\n\r\nexport const getFromDb = (data, supCom) => {\r\n  var qI = new MassGroupItem();\r\n  qI._id = data._id;\r\n  qI.Field = data.field;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = data.subComponents ? data.subComponents.map(x => compUtil.get(x, qI))\r\n    : [];\r\n\r\n  if (data.items) {\r\n    qI.Items = data.items.map(x => itemUtil.getFromDb(x, qI))\r\n      .filter(x => x.Value);\r\n    qI.IsHaveValueOrder = true;\r\n  } else {\r\n    qI.Items = []\r\n    qI.IsHaveValueOrder = false;\r\n  }\r\n\r\n  qI.NotIncludeValues = data.notIncludeValues ? data.notIncludeValues : [];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, supCom) => {\r\n  if (!q) return q;\r\n  var qI = new MassGroupItem();\r\n  qI.id = q.id;\r\n  qI.Field = q.Field;\r\n  qI.Items = q.Items.map(x => itemUtil.Clone(x, qI));\r\n  qI.NotIncludeValues = [...q.NotIncludeValues];\r\n  qI.IsHaveValueOrder = q.IsHaveValueOrder;\r\n  qI.SupComponent = supCom;\r\n  qI.SubComponents = q.SubComponents.map(x => compUtil.Clone(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  return q.SupComponent.SupItem.Table;\r\n}","import { MultiSelectVM } from \"./MultiSelectVM\";\r\n\r\nexport const get = (items, initialItems) => {\r\n  var qI = new MultiSelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItems = initialItems;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MultiSelectVMUtil'\r\n\r\nexport class MultiSelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      selectedIndexs: observable,\r\n      open : observable,\r\n      canOpen : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  initialItems;\r\n  get InitialItems() {\r\n    return this.initialItems;\r\n  }\r\n  set InitialItems(v){\r\n    this.initialItems = v;\r\n    this.InitialIndexs = this.GetInitialIndexs();\r\n    this.SelectedIndexs = this.InitialIndexs;\r\n  }\r\n\r\n  initialIndexs;\r\n  get InitialIndexs() {\r\n    if (!this.initialIndexs) {\r\n      this.initialIndexs = this.GetInitialIndexs();\r\n    }\r\n    return this.initialIndexs;\r\n  }\r\n  set InitialIndexs(v){\r\n    this.initialIndexs = v;\r\n  }\r\n\r\n  GetInitialIndexs =() => {\r\n    var initialItems = this.InitialItems;\r\n    if (!initialItems) return [];\r\n    return initialItems.map(x => this.Items.indexOf(x)).filter(x => x !== -1);\r\n  }\r\n\r\n  selectedIndexs = []\r\n  get SelectedIndexs() {\r\n    return this.selectedIndexs;\r\n  }\r\n  set SelectedIndexs(v) {\r\n    this.selectedIndexs = v;\r\n    this.SelectedItems = this.GetSelectedItems();\r\n  }\r\n\r\n  selectedItems\r\n  get SelectedItems() {\r\n    if (!this.selectedItems) {\r\n      this.selectedItems = this.GetSelectedItems();\r\n    }\r\n    return this.selectedItems;\r\n  }\r\n  set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n    if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItems = () => {\r\n    return this.SelectedIndexs.map(x => this.Items[x]);\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder() {\r\n    if (!this.placeholder) {\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v) {\r\n    this.placeholder = v;\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { MultiSelectVM } from \"./MultiSelectVM\";\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nconst { Option } = Select;\r\n\r\nclass MultiSelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MultiSelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style ? this.props.style : { width: '100%' }; \r\n    var { Placeholder, Items, SelectedIndexs, InitialIndexs } = data;\r\n\r\n    if (SelectedIndexs.length === 0) {\r\n      SelectedIndexs = InitialIndexs;\r\n      data.InitialIndexs = [];\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined){\r\n        id = genUtil.randomId();\r\n      }else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    return (\r\n      <>\r\n        <Select style={style}\r\n          mode=\"multiple\"\r\n          placeholder={Placeholder}\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={SelectedIndexs}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n          open={data.CanOpen && data.Open}\r\n          onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n        >\r\n          {elems}\r\n        </Select>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MultiSelectView)","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class EntHoverVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsElementVisible: observable,\r\n    })\r\n  }\r\n\r\n  IsElementVisible = false;\r\n\r\n  ShowElement = () => {\r\n    this.IsElementVisible =  true;\r\n  }\r\n\r\n  HideElement = () => {\r\n    this.IsElementVisible =  false;\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport ReactDOM from 'react-dom'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport EntHoverVM from \"./EntHoverVM\";\r\n\r\nclass EntHoverView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntHoverVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var className = this.props.className;\r\n    if (!data.style) {\r\n      var style = this.props.style ? this.props.style : {};\r\n      if (!style.minWidth) {\r\n        style.minWidth = 150;\r\n      }\r\n      data.style = style;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={className} style={data.style}\r\n          onMouseEnter={data.ShowElement}\r\n          onMouseLeave={data.HideElement}>\r\n          {data.IsElementVisible ? data.Element : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntHoverView)","import { SelectVM } from \"./SelectVM\";\r\n\r\nexport const get = (items, initialItem) => {\r\n  var qI = new SelectVM();\r\n  qI.Items = items;\r\n  qI.InitialItem = initialItem;\r\n  return qI;\r\n}\r\n\r\nexport const GetTitleRender = (q) => {\r\n  return (item) => item.DisplayContent ? item.DisplayContent : `${item}`;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './SelectVMUtil'\r\n\r\nexport class SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      selectedIndex : observable,\r\n      CanClear :observable,\r\n      open : observable,\r\n      canOpen : observable,\r\n      isDisabled : observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = [];\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  initialItem = undefined\r\n  get InitialItem() {\r\n    return this.initialItem;\r\n  }\r\n  set InitialItem(v){\r\n    this.initialItem = v;\r\n    this.InitialIndex = this.GetInitialIndex();\r\n    this.SelectedIndex = this.InitialIndex;\r\n  }\r\n\r\n  initialIndex\r\n  get InitialIndex(){\r\n    if (!this.initialIndex){\r\n      this.initialIndex = this.GetInitialIndex();\r\n    }\r\n    return this.initialIndex;\r\n  }\r\n  set InitialIndex(v){\r\n    this.initialIndex = v;\r\n  }\r\n\r\n  GetInitialIndex = () => {\r\n    var index = this.Items.indexOf(this.InitialItem);\r\n    return index !== -1 ? index : null;\r\n  }\r\n\r\n  selectedIndex = undefined\r\n  get SelectedIndex(){\r\n    return this.selectedIndex;\r\n  }\r\n  set SelectedIndex(v){\r\n    this.selectedIndex = v;\r\n    this.SelectedItem = this.GetSelectedItem();\r\n  }\r\n\r\n  selectedItem\r\n  get SelectedItem (){\r\n    if (!this.selectedItem){\r\n      this.selectedItem = this.GetSelectedItem();\r\n    }\r\n    return this.selectedItem;\r\n  }\r\n  set SelectedItem (v) {\r\n    this.selectedItem = v;\r\n    if (this.OnSelectedItemChanged){\r\n      this.OnSelectedItemChanged(v);\r\n    }\r\n  }\r\n\r\n  GetSelectedItem = () => {\r\n    var index = this.SelectedIndex;\r\n    if (index === -1) return undefined;\r\n    return this.Items[index];\r\n  }\r\n\r\n  placeholder\r\n  get Placeholder(){\r\n    if (!this.placeholder){\r\n      this.placeholder = \"chọn đối tượng ...\";\r\n    }\r\n    return this.placeholder;\r\n  }\r\n  set Placeholder(v){\r\n    this.placeholder = v;\r\n  }\r\n\r\n  CanClear = false\r\n\r\n  Clear = () => {\r\n    this.SelectedIndex = null\r\n  }\r\n  \r\n  get DivStyle() {\r\n    return this.CanClear ? { \r\n      position: 'relative', \r\n      padding: '0 22px 0 0' \r\n    } : {};\r\n  }\r\n\r\n  titleRender\r\n  get TitleRender() {\r\n    if (!this.titleRender){\r\n      this.titleRender = util.GetTitleRender(this);\r\n    }\r\n    return this.titleRender;\r\n  }\r\n  set TitleRender (v){\r\n    this.titleRender = v;\r\n  }\r\n\r\n  open = false\r\n  get Open(){\r\n    return this.open;\r\n  }\r\n  set Open(v){\r\n    this.open = v;\r\n    if (this.OnSetOpen){\r\n      this.OnSetOpen(v);\r\n    }\r\n  }\r\n\r\n  canOpen = true\r\n  get CanOpen(){\r\n    return this.canOpen;\r\n  } set CanOpen(v){\r\n    this.canOpen = v;\r\n  }\r\n\r\n  isDisabled = false\r\n  get IsDisabled(){\r\n    return this.isDisabled;\r\n  } set IsDisabled(v){\r\n    this.isDisabled = v;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class FloatItemVM {\r\n  location\r\n\r\n  className\r\n  getClassName = () => {\r\n    if (!this.className){\r\n      this.className = `float ${this.location}`;\r\n    }\r\n    return this.className\r\n  }\r\n}","import FloatItemVM from \"./FloatItemVM\";\r\n\r\nexport const get = (loc) => {\r\n  var qI = new FloatItemVM();\r\n  qI.location = loc;\r\n  return qI;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport * as floatItemVMUtil from './FloatItemVMUtil'\r\n\r\nclass FloatItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = floatItemVMUtil.get('top right', 'Test')\r\n    }else{\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className={data.getClassName()}>{this.getWrapperContent()}</span>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(FloatItemView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { SelectVM } from \"./SelectVM\";\r\nimport * as floatItemVMUtil from '../float/FloatItemVMUtil'\r\nimport FloatItemView from \"../float/FloatItemView\";\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport './Select.css'\r\n\r\nconst { Option } = Select;\r\n\r\nclass SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new SelectVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var className = this.props.className ? this.props.className : ''\r\n    var style = this.props.style ? this.props.style : { width: '100%' };\r\n    var { Placeholder, Items, SelectedIndex, InitialIndex } = data;\r\n\r\n    if (SelectedIndex === -1) {\r\n      SelectedIndex = InitialIndex;\r\n      data.InitialIndex = -1;\r\n    }\r\n\r\n    var elems = Items ? Items.map((item, index) => {\r\n      var displayContent = data.TitleRender(item);\r\n\r\n      var id = undefined;\r\n      if (item === undefined) {\r\n        id = genUtil.randomId();\r\n      } else if (typeof item === 'string' || !isNaN(item)) {\r\n        id = item;\r\n      } else {\r\n        id = item._id ? item._id : item.id;\r\n      }\r\n      return <Option key={id} value={index}>{displayContent}</Option>\r\n    }) : \"\";\r\n\r\n    var floatElem = ''\r\n    if (data.CanClear) {\r\n      var floatItemStore = floatItemVMUtil.get('right')\r\n      floatItemStore.wrapper = <Button size='small' type='primary'\r\n        onClick={data.Clear}>x</Button>\r\n\r\n      floatElem = <FloatItemView store={floatItemStore} />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className={`select__wrapper ${className}`}\r\n          style={data.DivStyle} >\r\n          {floatElem}\r\n          <Select style={style}\r\n            showSearch\r\n            placeholder={Placeholder}\r\n            optionFilterProp=\"children\"\r\n            onChange={this.onValueChange}\r\n            value={SelectedIndex}\r\n            filterOption={(input, option) =>\r\n              option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n            }\r\n            open={data.CanOpen && data.Open}\r\n            onDropdownVisibleChange={this.onDropdownVisibleChange}\r\n            disabled={data.IsDisabled}\r\n          >\r\n            {elems}\r\n          </Select>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(SelectView)","export const inside = 'inside'\r\nexport const lower = 'lower'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ReplaceRowLocationFactoryUtil'\r\nimport { PMData } from '../../../../single/model/PMData';\r\nimport * as lt from './RRLF_LocationType'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance\r\n}\r\n\r\nexport default class ReplaceRowLocationFactory {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Location: observable,\r\n    })\r\n  }\r\n\r\n  ReferenceRow\r\n  Location = lt.inside\r\n\r\n  get Color(){\r\n    return util.GetColor(this);\r\n  }\r\n\r\n  get ButtonStyle(){\r\n    return {\r\n      width: 50,\r\n      backgroundColor: this.Color,\r\n      border: 'none'\r\n    };\r\n  }\r\n\r\n  ToggleLocation = () =>{\r\n    switch (this.Location) {\r\n      case lt.inside:\r\n        this.Location = lt.lower;\r\n        break;\r\n      case lt.lower:\r\n        this.Location = lt.inside;\r\n        break;\r\n    }\r\n  }\r\n}","import * as lt from './RRLF_LocationType'\r\n\r\nexport const GetColor = (v) => {\r\n  switch (v.Location) {\r\n    case lt.inside:\r\n      return \"#52c41a\";\r\n    case lt.lower:\r\n      return \"#faad14\";\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TwoCol_SelectVMUtil'\r\nimport * as genUtil from '../../../util/generalUtil'\r\n\r\nexport class TwoCol_SelectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable,\r\n      availableItems: observable,\r\n      selectedItems: observable,\r\n      inputTitle: observable,\r\n      outputTitle: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    this.AvailableItems = [...this.Items];\r\n    this.SelectedItems = [];\r\n  }\r\n\r\n  inputTitle = undefined\r\n  get InputTitle(){\r\n    if (!this.inputTitle){\r\n      this.inputTitle = 'Dữ liệu input'\r\n    }\r\n    return this.inputTitle;\r\n  } set InputTitle(v){\r\n    this.inputTitle = v;\r\n  }\r\n\r\n  outputTitle = undefined\r\n  get OutputTitle(){\r\n    if (!this.outputTitle){\r\n      this.outputTitle = 'Dữ liệu output'\r\n    }\r\n    return this.outputTitle;\r\n  } set OutputTitle(v){\r\n    this.outputTitle = v;\r\n  }\r\n\r\n  availableItems = undefined\r\n  get AvailableItems() {\r\n    return this.availableItems;\r\n  } set AvailableItems(v) {\r\n    this.availableItems = v;\r\n  }\r\n\r\n  selectedItems = []\r\n  get SelectedItems() {\r\n    return this.selectedItems;\r\n  } set SelectedItems(v) {\r\n    this.selectedItems = v;\r\n  }\r\n\r\n  GetKey = (item) => {\r\n    if (typeof item === 'string') return item;\r\n    var id = item.id ? item.id : genUtil.newGUID();\r\n    return id;\r\n  }\r\n\r\n  Select = (item) => {\r\n    var index1 = this.AvailableItems.indexOf(item);\r\n    this.AvailableItems.splice(index1, 1);\r\n\r\n    this.SelectedItems.push(item);\r\n\r\n    this.IsChanged = true;\r\n  }\r\n\r\n  Unselect = (item) => {\r\n    var index1 = this.SelectedItems.indexOf(item);\r\n    this.SelectedItems.splice(index1, 1);\r\n\r\n    var index = this.Items.indexOf(item);\r\n    if (index < this.AvailableItems.length) {\r\n      this.AvailableItems.splice(index, 0, item);\r\n    } else {\r\n      this.AvailableItems.push(item);\r\n    }\r\n\r\n    this.IsChanged = true;\r\n  }\r\n\r\n  set IsChanged(v) {\r\n    if (this.OnSelectedItemChanged) {\r\n      this.OnSelectedItemChanged(this.SelectedItems);\r\n    }\r\n  }\r\n\r\n  render\r\n  get Render() {\r\n    if (!this.render) {\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v) {\r\n    this.render = v;\r\n  }\r\n}","import { TwoCol_SelectVM } from \"./TwoCol_SelectVM\";\r\n\r\n// Instance\r\nexport const get = (items, render, inputTitle, outputTitle) => {\r\n  var qI = new TwoCol_SelectVM();\r\n\r\n  qI.Items = items;\r\n  qI.Render = render;\r\n  qI.InputTitle = inputTitle;\r\n  qI.OutputTitle = outputTitle;\r\n  \r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(\r\n    [\r\n      'a', 'b', 'c',\r\n      'd', 'e', 'f',\r\n      'g', 'h', 'i',\r\n      'j', 'k', 'q',\r\n      'r', 's', 't',\r\n    ]\r\n  )\r\n}\r\n\r\n// Property\r\nexport const GetRender = (q) => {\r\n  return (item) => item;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport { TwoCol_SelectVM } from \"./TwoCol_SelectVM\";\r\nimport * as util from './TwoCol_SelectVMUtil'\r\nimport './TwoCol_Select.css'\r\n\r\nclass TwoCol_SelectView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndexs = v;\r\n  }\r\n\r\n  onDropdownVisibleChange = (v) => {\r\n    var data = this.state;\r\n    data.Open = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var style = this.props.style;\r\n\r\n    return (\r\n      <>\r\n        <table className='tc_table'>\r\n          <thead>\r\n            <tr>\r\n              <th>\r\n                <div className='tc_table__title'>\r\n                  <span>\r\n                    {data.InputTitle}\r\n                  </span>\r\n                </div>\r\n              </th>\r\n              <th>\r\n                <div className='tc_table__title'>\r\n                  {data.OutputTitle}\r\n                </div>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>\r\n                <span className='tc_select__partition__items'>\r\n                  {data.AvailableItems.map(x => {\r\n                    return <span key={data.GetKey(x)} onClick={() => data.Select(x)}>\r\n                      {data.Render(x)}\r\n                    </span>\r\n                  })}\r\n                </span>\r\n              </td>\r\n              <td>\r\n                <span className='tc_select__partition__items'>\r\n                  {data.SelectedItems.map(x => {\r\n                    return <span key={data.GetKey(x)} onClick={() => data.Unselect(x)}>\r\n                      {data.Render(x)}\r\n                    </span>\r\n                  })}\r\n                </span>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TwoCol_SelectView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassRow_ToolElementUtil'\r\n\r\nexport default class MassRow_ToolElement {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      editable_TitleVM_RenderState: observable\r\n    })\r\n  }\r\n\r\n  get Editable_TitleVM() {\r\n    return this.Dict.Editable_TitleVM;\r\n  }\r\n\r\n  editable_TitleVM_RenderState= undefined\r\n  get Editable_TitleVM_RenderState(){\r\n    if (this.editable_TitleVM_RenderState === undefined){\r\n      this.editable_TitleVM_RenderState =\r\n        util.GetEditable_TitleVM_RenderState(this);\r\n    }\r\n    return this.editable_TitleVM_RenderState;\r\n  } set Editable_TitleVM_RenderState(v){\r\n    this.editable_TitleVM_RenderState = v;\r\n\r\n    this.Editable_TitleVM.RenderState= v;\r\n  }\r\n\r\n  Method = (name) => {\r\n    return this.Dict[name];\r\n  }\r\n}","\r\n// Property\r\nexport const GetEditable_TitleVM_RenderState = (q) => {\r\n  return q.Editable_TitleVM.RenderState;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport MassRow_ToolElement from \"./MassRow_ToolElement\";\r\nimport { Button } from \"antd\";\r\nimport { DownCircleOutlined, ReloadOutlined, UpCircleOutlined } from \"@ant-design/icons\";\r\nimport * as trs from '../../../../../text/TextRenderState';\r\n\r\n\r\nclass MassRow_ToolElementView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow_ToolElement();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.Editable_TitleVM_RenderState === trs._default ?\r\n          <Button size='small' type='primary'\r\n            className='btn-warning'\r\n            onClick={() => data.Editable_TitleVM_RenderState = trs.edit}>\r\n            e\r\n          </Button> :\r\n          ''}\r\n\r\n        <Button size='small' type='primary'\r\n          className='btn-success'\r\n          onClick={data.Method('MoveUp')}>\r\n          <UpCircleOutlined />\r\n        </Button>\r\n        <Button size='small' type='primary'\r\n          className='btn-success'\r\n          onClick={data.Method('MoveDown')}>\r\n          <DownCircleOutlined />\r\n        </Button>\r\n\r\n        <Button type='primary' size='small'\r\n          className='btn-warning'\r\n          onClick={data.Method('OpenModal')}>...</Button>\r\n\r\n        <Button size='small' type='primary'\r\n          className='btn-success'\r\n          onClick={data.Method('AddSub')}>+</Button>\r\n        <Button type='primary' size='small' danger\r\n          onClick={data.Method('Delete')}>x</Button>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRow_ToolElementView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil';\r\nimport * as editTextUtil from '../../../../text/EditableTextVMUtil';\r\nimport * as trs from '../../../../text/TextRenderState';\r\nimport * as util from './MassRowUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport { EntFilter } from '../../filter/EntFilter';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport MultiSelectView from '../../../../select/MultiSelectView';\r\nimport { Col, Row, Space, Button, Switch, message, Popover } from 'antd';\r\nimport EntHoverVM from '../../../../hover/EntHoverVM';\r\nimport EntHoverView from '../../../../hover/EntHoverView';\r\nimport { DownCircleOutlined, EnterOutlined, InfoCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport ReplaceRowLocationFactory from './location/ReplaceRowLocationFactory';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport InputView from '../../../../input/InputView';\r\nimport * as mif from '../item/MassItemField'\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as mr_f_it from './MassRow_Field_InputType'\r\nimport NewInputView from '../../../../input/NewInputView';\r\nimport * as tc_selectUtil from '../../../../select/twocol/TwoCol_SelectVMUtil';\r\nimport TwoCol_SelectView from \"../../../../select/twocol/TwoCol_SelectView\";\r\nimport MassRow_ToolElementView from './tool/MassRow_ToolElementView';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class MassRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      rank: observable,\r\n      isShowSub: observable,\r\n      isHaveSub: observable,\r\n      IsToolVisible: observable,\r\n      subItems: observable,\r\n      IsModalVisible: observable,\r\n      title: observable,\r\n      FieldInputType: observable,\r\n      IsHaveAdditionInformation: observable,\r\n      AdditionInformation: observable,\r\n      Is_SelectSubItems_ModalOpen: observable,\r\n      Temp_SelectSubItems: observable,\r\n      isShow_RawValue: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  supItem\r\n  get SupItem() {\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v) {\r\n    this.supItem = v;\r\n    this.CurrentList = undefined;\r\n    this.Rank = undefined;\r\n  }\r\n\r\n  currentList\r\n  get CurrentList() {\r\n    if (!this.currentList) {\r\n      this.currentList = this.SupItem ? this.SupItem.SubItems : this.Table.MainRows;\r\n    }\r\n    return this.currentList;\r\n  }\r\n  set CurrentList(v) {\r\n    this.currentList = v;\r\n  }\r\n\r\n  get Table() {\r\n    return this.Dict;\r\n  }\r\n\r\n  // SubItems\r\n  subItems = []\r\n  get SubItems() {\r\n    return this.subItems;\r\n  } set SubItems(v) {\r\n    this.subItems = v;\r\n  }\r\n\r\n  get AllItems() {\r\n    var list = [];\r\n    list.push(this);\r\n    this.SubItems.forEach(x => {\r\n      list.push.apply(list, x.AllItems)\r\n    });\r\n    return list;\r\n  }\r\n\r\n  // Cells\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.Get_Cells(this)\r\n    }\r\n\r\n    return this.cells;\r\n  }\r\n\r\n  UpdateCells = () => {\r\n    this.Cells.forEach(x => x.UpdateData());\r\n  }\r\n\r\n  get Items() {\r\n    var items = this.Cells.reduce((a, b) => a.concat(b.Items), []);\r\n    items = items.filter((x, i, a) => a.indexOf(x) === i);\r\n    return items;\r\n  }\r\n\r\n  // MassGroupItem\r\n  massGroupItem\r\n  get MassGroupItem() {\r\n    return this.massGroupItem;\r\n  }\r\n  set MassGroupItem(v) {\r\n    this.massGroupItem = v;\r\n    if (v) {\r\n      var title = v.GetItem(this.FullValue).Title;\r\n      this.Title = title;\r\n    }\r\n  }\r\n\r\n  replaceMGI\r\n  get ReplaceMGI() {\r\n    return this.replaceMGI\r\n  } set ReplaceMGI(v) {\r\n    this.replaceMGI = v;\r\n  }\r\n\r\n  original_SubMassGroupItem\r\n  get Original_SubMassGroupItem() {\r\n    if (!this.original_SubMassGroupItem) {\r\n      this.original_SubMassGroupItem = util.GetOriginal_SubMassGroupItem(this);\r\n    }\r\n    return this.original_SubMassGroupItem\r\n  }\r\n  set Original_SubMassGroupItem(v) {\r\n    this.original_SubMassGroupItem = v;\r\n  }\r\n\r\n  replace_SubMassGroupItem\r\n  get Replace_SubMassGroupItem() {\r\n    if (!this.replace_SubMassGroupItem) {\r\n      this.replace_SubMassGroupItem = util.GetReplace_SubMassGroupItem(this);\r\n    }\r\n    return this.replace_SubMassGroupItem\r\n  }\r\n  set Replace_SubMassGroupItem(v) {\r\n    this.replace_SubMassGroupItem = v;\r\n  }\r\n\r\n  get SubMassGroupItem() {\r\n    return this.Replace_SubMassGroupItem ?\r\n      this.Replace_SubMassGroupItem : this.Original_SubMassGroupItem\r\n  } set SubMassGroupItem(v) {\r\n    this.Replace_SubMassGroupItem = v;\r\n  }\r\n\r\n  field\r\n  get Field() {\r\n    if (!this.field) {\r\n      this.field = this.MassGroupItem ? this.MassGroupItem.Field : undefined;\r\n    }\r\n    return this.field;\r\n  } set Field(v) {\r\n    this.field = v;\r\n  }\r\n\r\n  isReplaced\r\n  get IsReplaced() {\r\n    return this.isReplaced;\r\n  } set IsReplaced(v) {\r\n    this.isReplaced = v;\r\n    var obj = this.IsHaveAdditionInformation\r\n      = util.Get_IsHaveAdditionInformation(this);\r\n\r\n    if (obj) {\r\n      this.AdditionInformation = util.Get_AdditionInformation(this);\r\n    }\r\n  }\r\n\r\n  original_SupRow\r\n  get Original_SupRow() {\r\n    if (!this.original_SupRow) {\r\n      this.original_SupRow = util.Get_Original_SupRow(this);\r\n    }\r\n    return this.original_SupRow;\r\n  } set Original_SupRow(v) {\r\n    this.original_SupRow = v;\r\n  }\r\n\r\n  get Original_Full_SupRows() {\r\n    return util.Get_Original_Full_SupRows(this);\r\n  }\r\n\r\n  get OrderMGI() {\r\n    return this.ReplaceMGI ? this.ReplaceMGI : this.MassGroupItem;\r\n  }\r\n\r\n  subFields\r\n  get SubFields() {\r\n    if (!this.subFields) {\r\n      this.subFields = util.GetSubFields(this);\r\n    }\r\n    return this.subFields;\r\n  }\r\n  set SubFields(v) {\r\n    this.subFields = v;\r\n  }\r\n\r\n  TempSubFields\r\n\r\n  isShowSub = true\r\n  get IsShowSub() {\r\n    return this.isShowSub;\r\n  }\r\n  set IsShowSub(v) {\r\n    this.isShowSub = v;\r\n    this.ToggleButtonContentVM.Content = util.GetToggleButtonContent(this);\r\n  }\r\n\r\n  toggleButtonContent\r\n  get ToggleButtonContent() {\r\n    if (!this.toggleButtonContent) {\r\n      this.toggleButtonContent = util.GetToggleButtonContent(this);\r\n    }\r\n    return this.toggleButtonContent;\r\n  }\r\n  set ToggleButtonContent(v) {\r\n    this.toggleButtonContent = v;\r\n  }\r\n\r\n  toggleButtonContentVM\r\n  get ToggleButtonContentVM() {\r\n    if (!this.toggleButtonContentVM) {\r\n      var obj = this.toggleButtonContentVM = textVMUtil.get(this.ToggleButtonContent);\r\n      obj.OnSetContent = (v) => this.ToggleButtonContent = v;\r\n    }\r\n    return this.toggleButtonContentVM;\r\n  }\r\n\r\n  rank = undefined\r\n  get Rank() {\r\n    if (this.rank === undefined) {\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v) {\r\n    this.rank = v;\r\n    this.SubItems.forEach(x => x.Rank = undefined);\r\n  }\r\n\r\n  isHaveSub = undefined\r\n  get IsHaveSub() {\r\n    if (!this.isHaveSub) {\r\n      this.isHaveSub = util.GetIsHaveSub(this);\r\n    }\r\n    return this.isHaveSub;\r\n  }\r\n  set IsHaveSub(v) {\r\n    this.isHaveSub = v;\r\n  }\r\n\r\n  get Style() {\r\n    return util.GetStyle(this);\r\n  }\r\n\r\n  IsToolVisible = false\r\n\r\n  FieldInputType = mr_f_it.select\r\n\r\n  Toggle_FieldInputType = () => {\r\n    switch (this.FieldInputType) {\r\n      case mr_f_it.select:\r\n        this.TempField = this.FieldInputVM.Content;\r\n        this.FieldInputType = mr_f_it.input;\r\n        break;\r\n      case mr_f_it.input:\r\n        this.FieldSelectVM.InitialItem = this.TempField\r\n        this.FieldInputType = mr_f_it.select;\r\n        break;\r\n    }\r\n  }\r\n\r\n  TempField\r\n\r\n  fieldInputVM\r\n  get FieldInputVM() {\r\n    if (!this.fieldInputVM) {\r\n      var obj = this.fieldInputVM = textVMUtil.get();\r\n      obj.onSetContent = (v) => this.TempField = v;\r\n    }\r\n    return this.fieldInputVM;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM() {\r\n    if (!this.fieldSelectVM) {\r\n      this.fieldSelectVM = util.GetFieldSelectVM(this);\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get FieldInputElement() {\r\n    return <>\r\n      <div className='massrow__fieldinput_wrapper'>\r\n        <div className='massrow__fieldinput'>\r\n          {this.FieldInputType === mr_f_it.select ?\r\n            <SelectView store={this.FieldSelectVM} /> :\r\n            <NewInputView store={this.FieldInputVM} />\r\n          }\r\n        </div>\r\n        {this.IsCreatedByUser ?\r\n          <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n            checked={this.FieldInputType === mr_f_it.select}\r\n            onChange={this.Toggle_FieldInputType} />\r\n          : ''}\r\n      </div>\r\n    </>\r\n  }\r\n\r\n  subFieldSelectVM\r\n  get SubFieldSelectVM() {\r\n    if (!this.subFieldSelectVM) {\r\n      this.subFieldSelectVM = util.GetSubFieldSelectVM(this);\r\n    }\r\n    return this.subFieldSelectVM;\r\n  }\r\n\r\n  // Title\r\n  title = undefined\r\n  get Title() {\r\n    // if (!this.title) {\r\n    //   util.Handle_Title(this);\r\n    // }\r\n    return this.title;\r\n  }\r\n  set Title(v) {\r\n    this.title = v;\r\n    this.TitleVM.Content = v;\r\n    this.Editable_TitleVM.Content = v;\r\n  }\r\n\r\n  titleVM\r\n  get TitleVM() {\r\n    if (!this.titleVM) {\r\n      this.titleVM = textVMUtil.get(this.Title, 'tiêu đề');\r\n    }\r\n    return this.titleVM;\r\n  }\r\n\r\n  editable_TitleVM\r\n  get Editable_TitleVM() {\r\n    if (!this.editable_TitleVM) {\r\n      var obj = this.editable_TitleVM =\r\n        editTextUtil.get(this.Title, true, true);\r\n\r\n      obj.Is_Edit_Visible = false\r\n\r\n      genUtil.Add(\r\n        obj.OnSet_RenderState_Func_Dict,\r\n        () => {\r\n          if (obj.RenderState === trs._default) {\r\n            // Lưu thông tin Title\r\n            var title = this.title = obj.Content;\r\n            this.IsShow_RawValue = util.GetIsShow_RawValue(this);\r\n            this.MassGroupItem.GetItem(this.FullValue).Title = title;\r\n\r\n            this.ToolElement.editable_TitleVM_RenderState = obj.RenderState\r\n          }\r\n        },\r\n        false\r\n      )\r\n    }\r\n    return this.editable_TitleVM;\r\n  }\r\n\r\n  get LocationStorageList() {\r\n    return this.Table.AllRows;\r\n  }\r\n\r\n  locationSelectVM\r\n  get LocationSelectVM() {\r\n    if (!this.locationSelectVM) {\r\n      this.locationSelectVM = util.GetLocationSelectVM(this);\r\n    }\r\n    return this.locationSelectVM;\r\n  }\r\n\r\n  // Value lồng giữa Row hiện tại và SupRow\r\n  // Ví dụ: concrete__Tầng 6__Dầm\r\n  FullValue\r\n\r\n  GetCellByColumn = (col) => {\r\n    var index = this.Cells.findIndex(x => x.Column === col);\r\n    return index !== -1 ? this.Cells[index] : undefined;\r\n  }\r\n\r\n  UpdateData = () => {\r\n    // trước là sup Row nhưng sau khi di chuyển vị trí\r\n    // đã mất các item con bên trong\r\n    // => tiến hành xóa đối tượng\r\n    if (this.Is_Original_SupRow && this.SubItems.length === 0) {\r\n      this.CurrentList.splice(this.Index, 1);\r\n      return;\r\n    }\r\n\r\n    this.Rank = util.GetRank(this);\r\n    this.IsHaveSub = util.GetIsHaveSub(this);\r\n\r\n    this.SubItems = util.Order(this.SubItems);\r\n    this.SubItems.forEach(x => x.UpdateData());\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    this.IsShowSub = !this.IsShowSub;\r\n  }\r\n\r\n  SetSubFields = () => {\r\n    var tempSubFields = this.TempSubFields ? this.TempSubFields : [];\r\n\r\n    var isSame = true;\r\n    if (this.SubFields.length !== tempSubFields.length) {\r\n      isSame = false;\r\n    } else {\r\n      this.SubFields.forEach((x, i) => {\r\n        if (isSame && x !== tempSubFields[i]) {\r\n          isSame = false;\r\n        }\r\n      })\r\n    }\r\n    if (isSame) return;\r\n    this.SubFields = tempSubFields;\r\n\r\n    var filter = new EntFilter();\r\n    filter.ValueType = fvt.bystring;\r\n    filter.StringFilterType = sft.byequal;\r\n    filter.Values = [this.FullValue];\r\n\r\n    var supMgi = this.MassGroupItem;\r\n\r\n    var mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n\r\n    var subMgis = mgc.Items = tempSubFields.map(x => mgiUtil.get(x, null, mgc));\r\n\r\n    var subComps = supMgi.SubComponents;\r\n    if (this.SubMassGroupComponent) {\r\n      var index = subComps.indexOf(this.SubMassGroupComponent);\r\n      subComps[index] = mgc;\r\n    } else {\r\n      subComps.push(mgc);\r\n    }\r\n\r\n    this.SubMassGroupComponent = mgc;\r\n    this.SubItems = [];\r\n    this.Original_SubMassGroupItem = undefined;\r\n\r\n    if (subMgis.length !== 0) {\r\n      var table = this.Table;\r\n      this.Items.forEach(x => {\r\n        // Xử lý Item theo ColumnField: Project ... (single value)\r\n        // hoặc theo Phase (multiple values)\r\n        switch (table.ColumnField) {\r\n          case mif.Phase:\r\n            x.ValidPhasesByInput.forEach(y =>\r\n              table.HandleItem(x, y, mgc, this));\r\n            break;\r\n          default:\r\n            table.HandleItem(x, x.GetValue(table.ColumnField), mgc, this);\r\n            break;\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  MoveUp = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (0 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index - 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index - 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  MoveDown = () => {\r\n    var list = this.CurrentList;\r\n    var index = this.Index;\r\n    if (list.length - 1 === index) return;\r\n\r\n    var orderItems = this.OrderMGI.OrderItems;\r\n    var orderValues = this.OrderMGI.OrderValues;\r\n    var mgiIndex1 = orderValues.indexOf(list[index].FullValue);\r\n    var mgiIndex2 = orderValues.indexOf(list[index + 1].FullValue);\r\n\r\n    genUtil.MoveItem(list, index, index + 1);\r\n    genUtil.MoveItem(orderItems, mgiIndex1, mgiIndex2);\r\n  }\r\n\r\n  AddSub = () => {\r\n    util.Add(this, this.Table);\r\n  }\r\n\r\n  Delete = () => {\r\n    var supItem = this.SupItem;\r\n    var list = this.CurrentList;\r\n\r\n    if (this.IsCreatedByUser) {\r\n      this.MassGroupItem.GetItem(this.FullValue).Delete();\r\n    } else {\r\n      this.MassGroupItem.AddNotIncludeValue(this.FullValue);\r\n    }\r\n\r\n    list.splice(this.Index, 1);\r\n\r\n    if (supItem) {\r\n      if (list.length === 0) {\r\n        var supList = supItem ? this.Table.MainRows : supItem.CurrentList;\r\n        supList.splice(supItem.Index, 1);\r\n      } else {\r\n        supItem.Cells.forEach(x => {\r\n          x.UpdateData();\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  replaceFactory\r\n  get ReplaceFactory() {\r\n    if (!this.replaceFactory) {\r\n      this.replaceFactory = new ReplaceRowLocationFactory();\r\n    }\r\n    return this.replaceFactory;\r\n  }\r\n\r\n  ReplaceOK = () => {\r\n    var factory = this.ReplaceFactory;\r\n    var refRow = factory.ReferenceRow;\r\n\r\n    if (!refRow) return;\r\n\r\n    var loc = factory.Location;\r\n    if ((refRow === this && loc === rrlf_lt.lower) ||\r\n      (refRow === this.SupItem && loc === rrlf_lt.inside)) {\r\n      return\r\n    }\r\n\r\n    this.Replace(refRow, loc);\r\n\r\n    factory.Location = rrlf_lt.inside;\r\n  }\r\n\r\n  Replace_SubItems = () => {\r\n    var subItems = this.Temp_SelectSubItems;\r\n    subItems.forEach(x => {\r\n      x.Replace(this, rrlf_lt.inside)\r\n    })\r\n  }\r\n\r\n  Replace = (refRow, loc) => {\r\n    // Init OriginalSupRow && IsReplaced\r\n    this.IsReplaced = true;\r\n    var osr = this.Original_SupRow;\r\n\r\n    // Save data\r\n    var oldMgi = this.MassGroupItem;\r\n    var supRow = undefined;\r\n    var newMgi = undefined;\r\n\r\n    switch (loc) {\r\n      case rrlf_lt.inside:\r\n        supRow = refRow;\r\n        break;\r\n      case rrlf_lt.lower:\r\n        supRow = refRow.SupItem;\r\n        break;\r\n    }\r\n\r\n    // Đối tượng đã nằm trong mục cần đặt\r\n    if (this.SupItem === supRow) return;\r\n\r\n    //var newMgi = supRow ? supRow.SubMassGroupItem : this.Table.MainMGI;\r\n    var newMgi = supRow ?\r\n      (supRow.Replace_SubMassGroupItem ? supRow.Replace_SubMassGroupItem :\r\n        util.CreateSubMassGroupItem(supRow))\r\n      : this.Table.MainMGI;\r\n\r\n    //pmData().IsDebug = true;\r\n    var mgi_i = oldMgi.GetItem(this.FullValue);\r\n    mgi_i.NewMGI = newMgi;\r\n    mgi_i.SupValue = supRow?.Name;\r\n\r\n    this.ReplaceMGI = newMgi;\r\n\r\n    // Remove SupRow cũ trong tập hợp cũ\r\n    var cl = this.CurrentList;\r\n    cl.splice(this.Index, 1);\r\n\r\n    // Cập nhập lại TotalValue của SupItem cũ\r\n    // Nếu list ko chưa Item nào thì remove khỏi giao diện\r\n    var supItem = this.SupItem;\r\n\r\n    // Sử dụng vòng lặp while để check liên tục hạng mục bị xóa\r\n    while (cl.length === 0) {\r\n      // var supList = supItem ? supItem.CurrentList : this.Table.MainRows;\r\n      // supList.splice(supItem.Index, 1);\r\n      cl = supItem ? supItem.CurrentList : this.Table.MainRows;\r\n      cl.splice(supItem.Index, 1);\r\n\r\n      supItem = supItem.SupItem;\r\n    }\r\n\r\n    // Sau khi xóa tất cả hạng mục có 1 giá trị, cập lại hàng mục tổng\r\n    if (supItem) {\r\n      supItem.Cells.forEach(x => {\r\n        x.UpdateData(true);\r\n      });\r\n    }\r\n\r\n    // Thiết lập SupRow\r\n    this.SupItem = supRow;\r\n    var list = this.CurrentList;\r\n    list.push(this);\r\n\r\n    // Cập nhập lại TotalValue của SupItem mới\r\n    if (supRow) {\r\n      supRow.Cells.forEach(x => {\r\n        x.UpdateData(true);\r\n      });\r\n    }\r\n\r\n    this.IsShowSubFieldSelect = false;\r\n  }\r\n\r\n  IsModalVisible = false\r\n\r\n  OpenModal = () => {\r\n    this.IsModalVisible = true\r\n\r\n    // Set tiêu đề hiện tại\r\n    this.TitleVM.Content = this.Title;\r\n\r\n    // Set giá trị nhóm hiện tại\r\n    this.FieldInputVM.Content = this.Field\r\n    this.FieldSelectVM.InitialItem = this.Field;\r\n    this.TempField = this.Field;\r\n\r\n    // Set giá trị phân nhóm hiện tại\r\n    var subFieldSelectVM = this.SubFieldSelectVM;\r\n    subFieldSelectVM.InitialItems = this.SubFields;\r\n\r\n    // Reset lại giá trị Select SubItems\r\n    this.Temp_SelectSubItems = undefined\r\n    this.SelectSubItemsVM.Items = this.LocationStorageList;\r\n\r\n    var locSelectVM = this.LocationSelectVM;\r\n    locSelectVM.Items = this.LocationStorageList\r\n    locSelectVM.InitialItem = undefined;\r\n  }\r\n\r\n  ModalOK = () => {\r\n    this.IsModalVisible = false;\r\n\r\n    // Thiết lập tiêu đề\r\n    var title = this.TitleVM.Content;\r\n    this.Title = title;\r\n    this.MassGroupItem.GetItem(this.FullValue).Title = title;\r\n\r\n    // Thiết lập nhóm hiện tại\r\n    if (this.Field !== this.TempField) {\r\n      this.Field = this.TempField;\r\n    }\r\n\r\n    // Thiết lập phân nhóm hiện tại\r\n    // chỉ áp dụng cho Row tự sinh\r\n    if (!this.IsCreatedByUser) {\r\n      this.SetSubFields();\r\n    }\r\n\r\n    var subItems = this.Temp_SelectSubItems;\r\n    if (subItems) {\r\n      // Dịch chuyển tập hợp con\r\n      this.Replace_SubItems();\r\n    } else {\r\n      // Dịch chuyển vị trí\r\n      this.ReplaceOK();\r\n    }\r\n  }\r\n\r\n  ModalCancel = () => {\r\n    this.IsModalVisible = false;\r\n  }\r\n\r\n  PMS_WorkPackages = [\r\n    'THI CÔNG CHÍNH (HBC)',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM',\r\n    'CÔNG TÁC CHUẨN BỊ PHẦN NGẦM (PHƯƠNG ...)',\r\n    'Kết thúc thô - Bàn giao'\r\n  ]\r\n\r\n  pms_WorkPackages_SelectVM\r\n  get PMS_WorkPackages_SelectVM() {\r\n    if (!this.pms_WorkPackages_SelectVM) {\r\n      this.pms_WorkPackages_SelectVM = selectUtil.get(this.PMS_WorkPackages);\r\n    }\r\n    return this.pms_WorkPackages_SelectVM;\r\n  }\r\n\r\n  get ModalElement() {\r\n    var factory = this.ReplaceFactory;\r\n    var titleWidth = '180px';\r\n\r\n    return <Modal title={this.Title} visible={this.IsModalVisible}\r\n      width={700}\r\n      onOk={this.ModalOK} onCancel={this.ModalCancel}>\r\n      {/* Tiêu đề */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Tiêu đề:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <InputView store={this.TitleVM} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập nhóm hiện tại */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Nhóm hiện tại:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          {this.FieldInputElement}\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Thiết lập phân nhóm */}\r\n      {!this.IsCreatedByUser ? <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Thiết lập phân nhóm:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <MultiSelectView store={this.SubFieldSelectVM} />\r\n        </Col>\r\n      </Row> : ''}\r\n\r\n      {/* Đổi vị trí */}\r\n      <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth} className='mass__modal__title__wrapper'>\r\n          <b>Đổi vị trí /</b>\r\n          <Button type='primary' size='small'\r\n            className={this.Temp_SelectSubItems ?\r\n              'mass__modal__title__selectsubitems__button' : ''}\r\n            onClick={this.Open_SelectSubItems_Modal}>chọn tập con</Button>\r\n          {this.SelectSubItems_ModalElement}\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <Row>\r\n            <Col flex='auto'>\r\n              <SelectView store={this.LocationSelectVM} />\r\n            </Col>\r\n            <Col>\r\n              <Button type='primary' size='small'\r\n                style={factory.ButtonStyle} onClick={factory.ToggleLocation}\r\n              >{factory.Location}</Button>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Gói công việc PMS */}\r\n      {/* <Row gutter={15} style={{ marginTop: 10 }}>\r\n        <Col flex={titleWidth}>\r\n          <b> Gói công việc PMS:</b>\r\n        </Col>\r\n        <Col flex=\"auto\">\r\n          <SelectView store={this.PMS_WorkPackages_SelectVM} />\r\n        </Col>\r\n      </Row> */}\r\n    </Modal>\r\n  }\r\n\r\n  get HoverToolElement() {\r\n    var obj = new EntHoverVM();\r\n    obj.Element = <MassRow_ToolElementView store={this.ToolElement} />\r\n    return <EntHoverView className='mass__row__hovertool' store={obj} />\r\n  }\r\n\r\n  toolElement\r\n  get ToolElement() {\r\n    if (!this.toolElement) {\r\n      this.toolElement = util.Get_ToolElement(this);\r\n    }\r\n    return this.toolElement;\r\n  }\r\n\r\n  get AdditionInfomation_Element() {\r\n    return <>\r\n      {this.IsHaveAdditionInformation ?\r\n        <Popover trigger='hover'\r\n          content={\r\n            <span className='info'>\r\n              {this.AdditionInformation}\r\n            </span>\r\n          } >\r\n          <InfoCircleOutlined className='info' />\r\n        </Popover>\r\n        : ''}\r\n    </>\r\n  }\r\n\r\n  // Excel Export\r\n  get ExportInfo() {\r\n    var key = this.Field;\r\n    var info = {\r\n      Key: key,\r\n      Value: this.Title\r\n    }\r\n\r\n    var list\r\n    if (!this.SupItem) {\r\n      list = [info]\r\n    } else {\r\n      list = [...this.SupItem.ExportInfo]\r\n      list.push(info);\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportValue() {\r\n    var list = []\r\n    this.Cells.forEach(x => {\r\n      list.push({\r\n        Key: x.Column.Name,\r\n        Value: x.TotalValue\r\n      })\r\n    })\r\n\r\n    return list;\r\n  }\r\n\r\n  get ExportData() {\r\n    return {\r\n      Infos: this.ExportInfo,\r\n      Values: this.ExportValue\r\n    }\r\n  }\r\n\r\n  on_HandleTotal_Cells_Done_Dict_Funcs\r\n  get On_HandleTotal_Cells_Done_Dict_Funcs() {\r\n    if (!this.on_HandleTotal_Cells_Done_Dict_Funcs) {\r\n      this.on_HandleTotal_Cells_Done_Dict_Funcs =\r\n        util.GetOn_HandleTotal_Cells_Done_Dict_Funcs(this);\r\n    }\r\n    return this.on_HandleTotal_Cells_Done_Dict_Funcs;\r\n  }\r\n\r\n  set Is_HandleTotal_Cells_Done(v) {\r\n    this.On_HandleTotal_Cells_Done_Dict_Funcs\r\n      .forEach(x => x.Value())\r\n  }\r\n\r\n  HandleTotal_Cells\r\n\r\n  AddHandleTotal_Cell = (cell) => {\r\n    if (!this.HandleTotal_Cells) {\r\n      this.HandleTotal_Cells = []\r\n    };\r\n\r\n    var list = this.HandleTotal_Cells\r\n\r\n    list.push(cell);\r\n    if (list.length === this.Cells.length) {\r\n      this.HandleTotal_Cells = undefined\r\n      this.Is_HandleTotal_Cells_Done = true;\r\n\r\n      // nếu IsCreatedByUser \r\n      // => thêm thông tin vào danh sách Handled_CreatedByUser_Rows \r\n      // đối tượng Table\r\n      if (this.IsCreatedByUser) {\r\n        this.Table.Add_Handled_CreatedByUser_Row(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  IsHaveAdditionInformation = false\r\n\r\n  get IsHave_Addition_Wrapper() {\r\n    return this.IsHaveAdditionInformation || this.IsShow_RawValue\r\n  }\r\n\r\n  AdditionInformation = undefined\r\n\r\n  // Tùy chọn SelectSubItems\r\n  Is_SelectSubItems_ModalOpen = false\r\n\r\n  get SelectSubItems_ModalElement() {\r\n    return <Modal\r\n      title='Chọn tập hợp đầu mục con'\r\n      visible={this.Is_SelectSubItems_ModalOpen}\r\n      onOk={this.SelectSubItems_ModalOK}\r\n      onCancel={this.SelectSubItems_ModalCancel}>\r\n      <div className='mass__subitemmodal__wrapper'>\r\n        <TwoCol_SelectView store={this.SelectSubItemsVM} />\r\n      </div>\r\n    </Modal>\r\n  }\r\n\r\n  Open_SelectSubItems_Modal = () => {\r\n    this.Is_SelectSubItems_ModalOpen = true;\r\n  }\r\n\r\n  SelectSubItems_ModalCancel = () => {\r\n    this.Is_SelectSubItems_ModalOpen = false;\r\n  }\r\n\r\n  SelectSubItems_ModalOK = () => {\r\n    this.Is_SelectSubItems_ModalOpen = false;\r\n  }\r\n\r\n  selectSubItemsVM\r\n  get SelectSubItemsVM() {\r\n    if (!this.selectSubItemsVM) {\r\n      var obj = this.selectSubItemsVM = tc_selectUtil.get(\r\n        [],\r\n        (item) => {\r\n          var marginLeft = item.Rank * 15;\r\n          return <div\r\n            style={{ marginLeft }}>\r\n            {item.Title}\r\n          </div>\r\n        },\r\n        'Tập hợp vị trí',\r\n        'Vị trí được chọn'\r\n      )\r\n      obj.OnSelectedItemChanged = (v) => this.Temp_SelectSubItems = v;\r\n    }\r\n    return this.selectSubItemsVM;\r\n  }\r\n\r\n  Temp_SelectSubItems = undefined\r\n\r\n  isShow_RawValue = undefined\r\n  get IsShow_RawValue() {\r\n    if (!this.isShow_RawValue) {\r\n      this.isShow_RawValue = util.GetIsShow_RawValue(this);\r\n    }\r\n    return this.isShow_RawValue;\r\n  } set IsShow_RawValue(v) {\r\n    this.isShow_RawValue = v;\r\n  }\r\n\r\n  get RawValue_Element() {\r\n    return <>\r\n      {this.IsShow_RawValue ?\r\n        <Popover trigger='hover'\r\n          content={\r\n            <span className='success'>\r\n              {this.RawValue}\r\n            </span>\r\n          }\r\n        >\r\n          <InfoCircleOutlined className='success' />\r\n        </Popover>\r\n        : ''}\r\n    </>\r\n  }\r\n\r\n  IsCreatedByUser\r\n}","import { EditableTextVM } from \"./EditableTextVM\"\r\n\r\nexport const get = (content, canEdit = true, isToolVisible) => {\r\n  var qI = new EditableTextVM();\r\n  \r\n  qI.Content = content;\r\n  qI.CanChange_RenderState = canEdit;\r\n\r\n  if (isToolVisible === undefined){\r\n    isToolVisible = canEdit;\r\n  }\r\n\r\n  qI.Is_Tool_Visible = isToolVisible;\r\n\r\n  return qI;\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\n\r\nclass TextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = {\r\n        content: `Nội dung`\r\n      }\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  getWrapperContent = () => {\r\n    var { wrapper } = this.state;\r\n    if (!wrapper) return '';\r\n    return wrapper;\r\n  }\r\n\r\n  render() {\r\n    var { content } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {content}\r\n        {this.getWrapperContent()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TextView)","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as mif from '../item/MassItemField'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as util from './MassCellUtil'\r\nimport TextView from '../../../../text/TextView';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueColor: observable,\r\n      tdBgColor: observable,\r\n      isHaveWarning: observable,\r\n      tls_LevelGroup_Descriptions: observable,\r\n      vcs_Item: observable,\r\n      // valueString : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.randomId();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Column.Index;\r\n  }\r\n\r\n  items = []\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n  }\r\n\r\n  unit\r\n  get Unit() {\r\n    if (!this.unit) {\r\n      this.unit = util.Get_Unit(this);\r\n    }\r\n    return this.unit;\r\n  }\r\n  set Unit(v) {\r\n    this.unit = v;\r\n  }\r\n\r\n  unitVM\r\n  get UnitVM() {\r\n    if (!this.unitVM) {\r\n      this.unitVM = textVMUtil.get(this.Unit);\r\n      this.unitVM.OnSetContent = (v) => this.Unit = v;\r\n    }\r\n    return this.unitVM;\r\n  }\r\n\r\n  // TotalValue\r\n  get CanHave_TotalValue(){\r\n    return this.Unit !== undefined;\r\n  }\r\n\r\n  OnGet_TotalValue_Func_Dict = []\r\n  set Get_TotalValue(v) {\r\n    this.OnGet_TotalValue_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  totalValue = undefined\r\n  get TotalValue() {\r\n    // Chỉnh sửa Value thành FullValue (chứa khối lượng tầng điển hình)\r\n    //this.TotalValue = this.GetTotalValue();\r\n    if (this.totalValue === undefined) {\r\n      util.Handle_TotalValue(this);\r\n    }\r\n    return this.totalValue;\r\n  }\r\n  set TotalValue(v) {\r\n    this.totalValue = v;\r\n    \r\n    // cập nhập vào list handle trong row\r\n    this.Row.AddHandleTotal_Cell(this);\r\n\r\n    this.Get_TotalValue = true;\r\n    // Thiết lập phần màu sắc đối với Phase\r\n    if (this.IsHaveVCS_Item) {\r\n      util.Handle_VCS_Item(this);\r\n    }\r\n\r\n    // Thiết lập giá trị Cell\r\n    this.ContentVM.Content = this.ValueString;\r\n  }\r\n\r\n  contentVM\r\n  get ContentVM() {\r\n    if (!this.contentVM) {\r\n      this.contentVM = textVMUtil.get(this.ValueString);\r\n    }\r\n    return this.contentVM;\r\n  }\r\n\r\n  // ValueString\r\n  valueObject\r\n  get ValueObject(){\r\n    if (!this.valueObject){\r\n      this.valueObject = util.Get_ValueObject(this);\r\n    }\r\n    return this.valueObject;\r\n  }\r\n\r\n  get ValueString() {\r\n    return util.Get_ValueString(this);\r\n  }\r\n\r\n  // Sup - Sub\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.Get_SupItem(this);\r\n    }\r\n    return this.supItem;\r\n  } set SupItem(v){\r\n    this.supItem = v;\r\n  }\r\n\r\n  subCells\r\n  get SubCells() {\r\n    if (!this.subCells) {\r\n      this.subCells = util.Get_SubCells(this);\r\n    }\r\n    return this.subCells;\r\n  }\r\n  set SubCells(v) {\r\n    this.subCells = v;\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = util.GetMassType(this);\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(`${this.Column.Name} - ${this.Row.Name} - ${this.TotalValue}`)\r\n  }\r\n\r\n  // 1 lần Update trong this.Table.Cells.forEach(x => x.UpdateData());\r\n  UpdateData = (isUpdateSup) => {\r\n    var oldVal = this.TotalValue;\r\n\r\n    this.SubCells = util.Get_SubCells(this);\r\n\r\n    this.Unit = util.ReGet_Unit(this);\r\n    util.ReHandle_TotalValue(this);\r\n    this.MassType = util.GetMassType(this);\r\n    this.IsHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n\r\n    if (isUpdateSup && oldVal !== this.TotalValue\r\n        && this.SupItem){\r\n      this.SupItem.UpdateData(isUpdateSup);\r\n    }\r\n  }\r\n\r\n  ShowDetail = () => {\r\n    var isHash = true;\r\n    var url = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/massdetail`;\r\n    var getUrl = (v) => `${url}/${v}`;\r\n    var openTabFunc = (v) =>\r\n      window.open(getUrl(v), \"_blank\");\r\n\r\n    if (!this.viewDetailId) {\r\n      this.GetViewDetailId(data => {\r\n        var _id = this.viewDetailId = data._id;\r\n        openTabFunc(_id);\r\n      })\r\n    } else {\r\n      openTabFunc(this.viewDetailId);\r\n    }\r\n  }\r\n\r\n  viewDetailId\r\n\r\n  get AllItems() {\r\n    if (this.SubCells) {\r\n      return this.SubCells.map(x => x.Items).reduce((a, b) => a.concat(b), []);\r\n    }\r\n    return this.Items;\r\n  }\r\n\r\n  isHaveVCS_Item\r\n  get IsHaveVCS_Item() {\r\n    if (!this.isHaveVCS_Item) {\r\n      this.isHaveVCS_Item = util.GetIsHaveVCS_Item(this);\r\n    }\r\n    return this.isHaveVCS_Item;\r\n  }\r\n  set IsHaveVCS_Item(v) {\r\n    this.isHaveVCS_Item = v;\r\n  }\r\n\r\n  vcs_Item = undefined\r\n  get VCS_Item() {\r\n    return this.vcs_Item;\r\n  }\r\n  set VCS_Item(v) {\r\n    this.vcs_Item = v;\r\n\r\n    this.ValueColor = util.GetValueColor(this);\r\n    this.TDBgColor = util.GetTDBgColor(this)\r\n  }\r\n\r\n  valueColor = '#1890ff'\r\n  get ValueColor() {\r\n    return this.valueColor;\r\n  }\r\n  set ValueColor(v) {\r\n    this.valueColor = v\r\n  }\r\n\r\n  tdBgColor = undefined\r\n  get TDBgColor() {\r\n    return this.tdBgColor;\r\n  }\r\n  set TDBgColor(v) {\r\n    this.tdBgColor = v;\r\n  }\r\n\r\n  get AStyle() {\r\n    return {\r\n      color: this.ValueColor,\r\n      fontWeight: 'bold'\r\n    }\r\n  }\r\n\r\n  get TDStyle() {\r\n    return {\r\n      backgroundColor: this.TDBgColor\r\n    }\r\n  }\r\n\r\n  ApiData = () => {\r\n    var massIds = this.AllItems.map(x => x._id);\r\n    return {\r\n      massType: this.MassType,\r\n      massIds\r\n    };\r\n  }\r\n\r\n  GetViewDetailId = (handle) => {\r\n    var apiData = this.ApiData();\r\n    var url = \"https://api.bimdev.vn/api/hbdv/updatemass\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => handle(data))\r\n  }\r\n\r\n  OnGet_TLS_LevelGroups_Func_Dict = []\r\n  set Get_TLS_LevelGroups(v) {\r\n    this.OnGet_TLS_LevelGroups_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  tls_LevelGroups\r\n  get TLS_LevelGroups() {\r\n    if (!this.tls_LevelGroups) {\r\n      util.Handle_TLS_LevelGroups(this);\r\n    }\r\n    return this.tls_LevelGroups;\r\n  } set TLS_LevelGroups(v) {\r\n    this.tls_LevelGroups = v;\r\n    this.Get_TLS_LevelGroups = true;\r\n  }\r\n\r\n  isHaveWarning = undefined\r\n  get IsHaveWarning() {\r\n    if (this.isHaveWarning === undefined) {\r\n      this.isHaveWarning = util.GetIsHaveWarning(this);\r\n    }\r\n    return this.isHaveWarning;\r\n  } set IsHaveWarning(v) {\r\n    this.isHaveWarning = v;\r\n  }\r\n\r\n  tls_LevelGroup_Descriptions = undefined\r\n  get TLS_LevelGroup_Descriptions() {\r\n    if (!this.tls_LevelGroup_Descriptions) {\r\n      util.Handle_TLS_LevelGroup_Descriptions(this);\r\n    }\r\n    return this.tls_LevelGroup_Descriptions;\r\n  } set TLS_LevelGroup_Descriptions(v) {\r\n    this.tls_LevelGroup_Descriptions = v;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport default class MassCell_Value {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Value: observable\r\n    })\r\n  }\r\n\r\n  Value = undefined\r\n}","import Column from \"antd/lib/table/Column\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassCell from \"./MassCell\"\r\nimport * as mif from '../item/MassItemField'\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport MassCell_Value from \"./value/MassCell_Value\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (col, row, dict) => {\r\n  var qI = new MassCell();\r\n  qI.Column = col;\r\n  qI.Row = row;\r\n  qI.Dict = dict;\r\n\r\n  col.Cells.push(qI);\r\n  row.Cells.push(qI);\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetIsHaveVCS_Item = (q) => {\r\n  return q.Dict.ColumnField === mif.Phase\r\n    && pmData().MassResultComp.Phases.length === 2\r\n    && q.ColumnIndex === 1;\r\n}\r\n\r\nexport const GetValueColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return '#FFFFFF';\r\n  } else {\r\n    return '#1890ff';\r\n  }\r\n}\r\n\r\nexport const GetTDBgColor = (q) => {\r\n  if (q.IsHaveVCS_Item && q.VCS_Item) {\r\n    return q.VCS_Item.Color;\r\n  } else {\r\n    return '#FFFFFF';\r\n  }\r\n}\r\n\r\n// Liên quan tới việc lấy TotalValue\r\nexport const Handle_VCS_Item = (q) => {\r\n  var list = pmData().VersionCompareSetting.Items;\r\n\r\n  var cells = q.Row.Cells;\r\n  var compareIndex = cells.findIndex(x => x.ColumnIndex === 0);\r\n  if (compareIndex === -1) {\r\n    q.VCS_Item = undefined;\r\n    return\r\n  }\r\n  var compareItem = cells[compareIndex];\r\n\r\n  const getItem = () => {\r\n    var ratio = q.TotalValue / compareItem.TotalValue;\r\n    var index = list\r\n      .findIndex(x => filterUtil.IsValid(x.Filter, ratio));\r\n    return index !== -1 ? list[index] : undefined;\r\n  }\r\n\r\n  if (compareItem.TotalValue !== undefined) {\r\n    q.VCS_Item = getItem();\r\n  } else {\r\n    genUtil.Add(compareItem.OnGet_TotalValue_Func_Dict, () =>\r\n      q.VCS_Item = getItem())\r\n  }\r\n}\r\n\r\nexport const GetMassType = (q) => {\r\n  var massType = undefined\r\n  if (q.SubCells) {\r\n    var isPending = true;\r\n    q.SubCells.forEach(x => {\r\n      if (isPending && x.MassType) {\r\n        massType = x.MassType;\r\n        isPending = false;\r\n      }\r\n    })\r\n  } else {\r\n    if (q.Items && q.Items.length > 0) {\r\n      massType = q.Items[0].MassType;\r\n    }\r\n  }\r\n  return massType;\r\n}\r\n\r\nexport const Handle_TLS_LevelGroups = (q) => {\r\n  if (q.IsGet_TLS_LevelGroups) return undefined;\r\n  q.IsGet_TLS_LevelGroups = true;\r\n\r\n  var list = [];\r\n  var handledCount = 0;\r\n  var count = q.SubCells ?\r\n    q.SubCells.length : q.Items.length;\r\n\r\n  const checkadd_Val = (val, list) => {\r\n    if (list.findIndex(x => x.id === val.id) === -1) {\r\n      list.push(val);\r\n    }\r\n  }\r\n\r\n  const handle_Val = (val) => {\r\n    handledCount++;\r\n    if (val) {\r\n      if (Array.isArray(val)) {\r\n        val.forEach(x => checkadd_Val(x, list));\r\n      } else {\r\n        checkadd_Val(val, list)\r\n      }\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroups = list;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        genUtil.Add(x.OnGet_TLS_LevelGroups_Func_Dict,\r\n          () => handle_Val(x.TLS_LevelGroup));\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.TLS_LevelGroup || targetObj.Get_TLS_LevelGroup) {\r\n        handle_Val(targetObj.TLS_LevelGroup);\r\n      } else {\r\n        genUtil.Add(targetObj.OnGet_TLS_LevelGroup_Func_Dict,\r\n          () => handle_Val(targetObj.TLS_LevelGroup));\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n// TotalValue\r\nexport const ReGet_Unit = (q) => {\r\n  q.IsGet_Unit = false;\r\n  return Get_Unit(q);\r\n}\r\n\r\nexport const Get_Unit = (q) => {\r\n  if (q.IsGet_Unit) return undefined;\r\n  q.IsGet_Unit = true;\r\n\r\n  var unit\r\n  var isValid = true;\r\n  var list = q.SubCells ? q.SubCells : q.Items;\r\n  list.forEach((x, i, a) => {\r\n    if (isValid) {\r\n      if (i == 0) {\r\n        unit = x.Unit\r\n      }\r\n      else {\r\n        if (unit !== x.Unit) {\r\n          isValid = false;\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  if (!isValid) {\r\n    unit = undefined\r\n  }\r\n\r\n  return unit;\r\n}\r\n\r\nexport const ReHandle_TotalValue = (q) => {\r\n  q.IsGet_TotalValue = false;\r\n  Handle_TotalValue(q);\r\n}\r\n\r\nexport const Handle_TotalValue = (q) => {\r\n  if (q.IsGet_TotalValue) return undefined;\r\n  q.IsGet_TotalValue = true;\r\n\r\n  // Bỏ qua TotalValue nếu CanHave = false\r\n  if (!q.CanHave_TotalValue) return;\r\n\r\n  var checkedList = [];\r\n  var totalVal = 0;\r\n  var handledCount = 0;\r\n  var handleItems = [];\r\n  var list = q.SubCells ? q.SubCells : q.Items\r\n  var count = list.length\r\n\r\n  const handle_Val = (val, item) => {\r\n    var index = handleItems.indexOf(item);\r\n    // Bị trùng đối tượng khi tính toán khối lượng\r\n    if (index !== -1) return;\r\n    handleItems.push(item);\r\n\r\n    handledCount++;\r\n\r\n    if (!Number.isNaN(val)) {\r\n      totalVal += val;\r\n    }\r\n    checkedList.push(val);\r\n\r\n    if (handledCount === count) {\r\n      q.TotalValue = totalVal;\r\n    }\r\n  }\r\n\r\n  if (q.SubCells) {\r\n    // Tồn tại sub cells\r\n    q.SubCells.forEach(x => {\r\n      if (x.TotalValue) {\r\n        handle_Val(x.TotalValue, x)\r\n      } else {\r\n        genUtil.Add(x.OnGet_TotalValue_Func_Dict,\r\n          () => {\r\n            handle_Val(x.TotalValue, x)\r\n          });\r\n      }\r\n    })\r\n  } else {\r\n    // Không có sub cells\r\n    q.Items.forEach(x => {\r\n      var targetObj = x;\r\n\r\n      // Kiểm tra value theo Phase hay theo Property khác (Project ...)\r\n      var table = q.Dict;\r\n      var colField = table.ColumnField;\r\n      if (colField === mif.Phase) {\r\n        // Khối lượng theo Phase\r\n        targetObj = x.GetPhaseItem(q.Column.Name);\r\n      } else {\r\n        // Khối lượng theo các thuộc tính khác\r\n      }\r\n\r\n      if (targetObj.FullValue !== undefined) {\r\n        handle_Val(targetObj.FullValue, x)\r\n      } else {\r\n        genUtil.Add(targetObj.OnGet_FullValue_Func_Dict,\r\n          () => {\r\n            handle_Val(targetObj.FullValue, x)\r\n          });\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetIsHaveWarning = (q) => {\r\n  if (q.Row.Field !== mif.level) {\r\n    return false\r\n  } else {\r\n    const getWarningFunc = (levelGroups) => {\r\n      return levelGroups.length !== 0;\r\n    }\r\n\r\n    if (q.TLS_LevelGroups) {\r\n      return getWarningFunc(q.TLS_LevelGroups);\r\n    } else {\r\n      genUtil.Add(q.OnGet_TLS_LevelGroups_Func_Dict,\r\n        () => {\r\n          q.IsHaveWarning = getWarningFunc(q.TLS_LevelGroups)\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\nexport const Handle_TLS_LevelGroup_Descriptions = (q) => {\r\n  if (q.IsGet_TLS_LevelGroup_Descriptions) return undefined;\r\n  q.IsGet_TLS_LevelGroup_Descriptions = true;\r\n\r\n  const handle_Val = (val, list, handledCount, count) => {\r\n    handledCount++;\r\n    if (list.indexOf(val) === -1) {\r\n      list.push(val);\r\n    }\r\n    if (handledCount === count) {\r\n      q.TLS_LevelGroup_Descriptions = list;\r\n    }\r\n  }\r\n\r\n  const getDescFunc = (levelGroups) => {\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = levelGroups.length\r\n\r\n    levelGroups.forEach(x => {\r\n      if (x.FullDescription) {\r\n        handle_Val(x.FullDescription, list, handledCount, count);\r\n      } else {\r\n        // Để false, xử lý nhiều Funcs hơn, nhưng thực thi thành công :v\r\n        genUtil.Add(x.OnGetLevelStorageList_Func_Dict, () => {\r\n          handle_Val(x.FullDescription, list, handledCount, count)\r\n        }, false)\r\n      }\r\n    })\r\n  }\r\n\r\n  if (q.TLS_LevelGroups) {\r\n    getDescFunc(q.TLS_LevelGroups)\r\n  } else {\r\n    q.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n      getDescFunc(q.TLS_LevelGroups)\r\n    })\r\n  }\r\n}\r\n\r\n// Sup - Sub\r\nexport const Get_SupItem = (q) => {\r\n  if (q.IsGet_SupItem) return undefined;\r\n  q.IsGet_SupItem = true;\r\n\r\n  var supRow = q.Row.SupItem;\r\n  if (!supRow) return undefined;\r\n\r\n  var list = supRow.Cells;\r\n  var index = list.findIndex(x => x.Column === q.Column);\r\n  return index !== -1 ? list[index] : undefined\r\n}\r\n\r\nexport const Get_SubCells = (q) => {\r\n  var subRows = q.Row.SubItems;\r\n  if (subRows && subRows.length !== 0) {\r\n    var col = q.Column;\r\n    var list = subRows.map((x, i, a) => {\r\n      var obj = x.GetCellByColumn(col)\r\n      return obj;\r\n    }).filter(x => x !== undefined);\r\n\r\n    return list;\r\n  }\r\n}\r\n\r\n// ValueString\r\nexport const Get_ValueObject = (q) => {\r\n  var qI = new MassCell_Value();\r\n\r\n  qI.Dict = q;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Get_ValueString = (q) => {\r\n  if (!q.CanHave_TotalValue) return '';\r\n\r\n  var totalValue = q.TotalValue;\r\n  if (!totalValue) return '';\r\n\r\n  var roundingFactor = 2;\r\n  var unit = q.Unit;\r\n  switch (unit) {\r\n    case 'each':\r\n      unit = 'cái';\r\n      roundingFactor = 0;\r\n      break;\r\n    default:\r\n      roundingFactor = 2;\r\n      break;\r\n  }\r\n\r\n  var formatValue = totalValue.toLocaleString('en-US', { maximumFractionDigits: roundingFactor });\r\n  return `${formatValue} ${unit}`;\r\n}","import { PMData } from \"../../../single/model/PMData\";\r\nimport MassRow from \"./MassRow\";\r\nimport * as multiSelectUtil from '../../../../select/MultiSelectVMUtil';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as rrlf_lt from './location/RRLF_LocationType';\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\nimport * as mgi_iUtil from './rowgroup/MGI_ItemUtil'\r\nimport * as mgii_ct from './rowgroup/MGI_I_CreateType'\r\nimport * as genUtil from '../../../../../util/generalUtil';\r\nimport { EntFilter } from \"../../filter/EntFilter\";\r\nimport MassGroupComponent from \"./rowgroup/MassGroupComponent\";\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mif from '../item/MassItemField'\r\nimport MassRow_ToolElement from \"./tool/MassRow_ToolElement\";\r\nimport * as trs from '../../../../text/TextRenderState';\r\nimport * as cellUtil from './MassCellUtil'\r\nimport MassCell from \"./MassCell\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassRow();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  return q.SupItem ? q.SupItem.Rank + 1 : 0;\r\n}\r\n\r\nexport const GetStyle = (q) => {\r\n  return {\r\n    marginLeft: q.Rank * 20\r\n  }\r\n}\r\n\r\nexport const GetIsHaveSub = (q) => {\r\n  return q.SubItems.length !== 0;\r\n}\r\n\r\nexport const GetToggleButtonContent = (q) => {\r\n  return q.IsShowSub ? '-' : '+';\r\n}\r\n\r\nexport const GetFieldSelectVM = (q) => {\r\n  var storageList = pmData().MIFs_ForMassGroup;\r\n  var obj = selectUtil.get(storageList, q.Field);\r\n  obj.Placeholder = 'chọn nhóm'\r\n\r\n  obj.IsDisabled = !q.IsCreatedByUser\r\n\r\n  obj.OnSelectedItemChanged = (v) => q.TempField = v;\r\n  return obj;\r\n}\r\n\r\nexport const GetSubFieldSelectVM = (q) => {\r\n  var storageList = pmData().MIFs_ForMassGroup;\r\n  var obj = multiSelectUtil.get(storageList, undefined);\r\n  obj.Placeholder = 'chọn phân nhóm'\r\n  obj.OnSelectedItemChanged = (v) => q.TempSubFields = v;\r\n  return obj;\r\n}\r\n\r\nexport const Order = (list) => {\r\n  if (list.length === 0) return list;\r\n\r\n  var firstRow = list[0]\r\n  var mgi = firstRow.OrderMGI;\r\n  if (!mgi.IsHaveValueOrder) return list;\r\n\r\n  var orderValues = mgi.OrderValues;\r\n  return list.sort((a, b) => {\r\n    return orderValues.indexOf(a.FullValue) - orderValues.indexOf(b.FullValue);\r\n  });\r\n}\r\n\r\nexport const Handle_Title = (q) => {\r\n  var field = q.MassGroupItem.Field;\r\n  if (field !== mif.level) {\r\n    q.Title = q.Name;\r\n  } else {\r\n    // Xử lý phần tiêu đề của Row dựa trên Name và thông tin Tầng điển hình\r\n    var list = [];\r\n    var handledCount = 0;\r\n    var count = q.Cells.length;\r\n\r\n    const handle_LS = (ls) => {\r\n      if (ls.Description) {\r\n        q.Title = ls.Description;\r\n      } else {\r\n        ls.OnGetLevelStorageList_Funcs.push(() => {\r\n          q.Title = ls.Description;\r\n        })\r\n      }\r\n    }\r\n\r\n    const handle_Val = (val) => {\r\n      handledCount++;\r\n      list.push.apply(list, val);\r\n      if (handledCount === count) {\r\n        if (list.length === 1) {\r\n          handle_LS(list[0]);\r\n        } else {\r\n          q.Title = q.Name;\r\n        }\r\n      }\r\n    }\r\n\r\n    q.Cells.forEach(x => {\r\n      if (x.TLS_LevelGroups) {\r\n        handle_Val(x.TLS_LevelGroups);\r\n      } else {\r\n        x.OnGet_TLS_LevelGroups_Funcs.push(() => {\r\n          handle_Val(x.TLS_LevelGroups);\r\n        })\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const GetLocationSelectVM = (q) => {\r\n  var obj = selectUtil.get([], undefined);\r\n  obj.Placeholder = 'chọn vị trí'\r\n  obj.TitleRender = (item) => {\r\n    var marginLeft = item.Rank * 15;\r\n    return <div\r\n      style={{ marginLeft }}>\r\n      {item.Title}\r\n    </div>\r\n  }\r\n  obj.OnSelectedItemChanged = (v) => {\r\n    var factory = q.ReplaceFactory;\r\n    factory.ReferenceRow = v;\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport const GetOriginal_SubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].MassGroupItem;\r\n}\r\n\r\nexport const GetReplace_SubMassGroupItem = (q) => {\r\n  var subItems = q.SubItems;\r\n  if (subItems.length === 0) return undefined;\r\n  return subItems[0].ReplaceMGI;\r\n}\r\n\r\nexport const GetSubFields = (q) => {\r\n  var subMGI = q.SubMassGroupItem;\r\n  if (!subMGI) return [];\r\n  var mgis = subMGI.SupComponent.Items;\r\n\r\n  var lastValidIndex = -1;\r\n  var isValidHandle = true\r\n  mgis.forEach((x, i) => {\r\n    if (isValidHandle && x.HaveMassItemSubComponents.length === 0) {\r\n      lastValidIndex = i;\r\n    } else {\r\n      isValidHandle = false;\r\n    }\r\n  })\r\n\r\n  var currentIndex = mgis.indexOf(q.MassGroupItem);\r\n  if (lastValidIndex === -1) return [subMGI.Field];\r\n  var fields = mgis.filter((x, i) =>\r\n    (currentIndex === -1 || currentIndex < i) &&\r\n    i <= lastValidIndex)\r\n    .map(x => x.Field);\r\n  return fields;\r\n}\r\n\r\n// MassGroupItem phụ để đặt đầu mục được tạo mới\r\nexport const CreateSubMassGroupItem = (q) => {\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bystring;\r\n  filter.StringFilterType = sft.byequal;\r\n  filter.Values = [q.FullValue];\r\n\r\n  var supMgi = q.MassGroupItem;\r\n\r\n  var mgc = undefined;\r\n  var mgcIndex = supMgi.SubComponents\r\n    .findIndex(x => genUtil.IsSameValues(x.Filter.Values, filter.Values));\r\n\r\n  if (mgcIndex !== -1) {\r\n    mgc = supMgi.SubComponents[mgcIndex]\r\n  } else {\r\n    mgc = new MassGroupComponent();\r\n    mgc.SubItem = supMgi;\r\n    mgc.Filter = filter;\r\n    supMgi.SubComponents.push(mgc);\r\n  }\r\n\r\n  var mgi = mgiUtil.get(null, null, mgc);\r\n  mgc.Items = [mgi];\r\n\r\n  q.SubMassGroupItem = mgi;\r\n  return mgi;\r\n}\r\n\r\nexport const Add = (supRow, table) => {\r\n  var mgi = supRow ?\r\n    (supRow.SubMassGroupItem ? supRow.SubMassGroupItem :\r\n      CreateSubMassGroupItem(supRow))\r\n    : table.MainMGI;\r\n\r\n  var mgi_I = mgi_iUtil.create(mgi, mgii_ct.byuser);\r\n\r\n  // Thêm trường SupValue để xác định SupRow \r\n  // trong trường hợp SupRow.CurrentList.length !== 0\r\n  mgi_I.SupValue = supRow?.Name;\r\n\r\n  mgi.Items.push(mgi_I);\r\n\r\n  var row = get(mgi_I.Value, table);\r\n  row.FullValue = mgi_I.Value;\r\n  row.IsCreatedByUser = true;\r\n\r\n  // Lấy thông tin Cell vì hiện tại đang bị lỗi khi render\r\n  var obj = row.Cells\r\n\r\n  row.MassGroupItem = mgi;\r\n\r\n  row.SupItem = supRow;\r\n  row.CurrentList.push(row);\r\n\r\n  row.Editable_TitleVM.RenderState = trs.edit;\r\n\r\n  return row;\r\n}\r\n\r\nexport const GetOn_HandleTotal_Cells_Done_Dict_Funcs = (q) => {\r\n  var obj = [];\r\n  return obj;\r\n}\r\n\r\nexport const Get_Original_SupRow = (q) => {\r\n  if (q.IsGet_Original_SupRow) return undefined;\r\n  q.IsGet_Original_SupRow = true;\r\n\r\n  return q.SupItem;\r\n}\r\n\r\nexport const Get_Original_Full_SupRows = (q) => {\r\n  var list = [];\r\n  var supItem = q.Original_SupRow;\r\n\r\n  while (supItem) {\r\n    list.push(supItem);\r\n    supItem = supItem.Original_SupRow;\r\n  }\r\n\r\n  list.reverse();\r\n  return list;\r\n}\r\n\r\n// Aditional Infomation\r\nexport const Get_IsHaveAdditionInformation = (q) => {\r\n  return q.IsReplaced ? true : false\r\n}\r\n\r\nexport const Get_AdditionInformation = (q) => {\r\n  var obj = q.Original_Full_SupRows.reduce((a, x, i) => {\r\n    if (i != 0) {\r\n      a += ' > '\r\n    }\r\n    a += x.Title;\r\n    return a;\r\n  }, '')\r\n\r\n  return obj;\r\n}\r\n\r\nexport const Get_ToolElement = (q) => {\r\n  var qI = new MassRow_ToolElement();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n// Cells\r\nexport const Get_Cells = (q) => {\r\n  if (!q.IsCreatedByUser) return [];\r\n\r\n  var table = q.Table;\r\n\r\n  var list = table.Columns.map(x => {\r\n    var qI = new MassCell();\r\n    qI.Column = x;\r\n    qI.Row = q;\r\n    qI.Dict = table;\r\n\r\n    table.Cells.push(qI);\r\n\r\n    return qI;\r\n  });\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetIsShow_RawValue = (q) => {\r\n  return !q.IsCreatedByUser && q.RawValue !== q.Title;\r\n}","import * as mif from '../item/MassItemField'\r\nimport { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as mt from '../MassType'\r\nimport MassGroupComponent from './rowgroup/MassGroupComponent'\r\nimport MassGroupItem from './rowgroup/MassGroupItem'\r\nimport * as mgiUtil from './rowgroup/MassGroupItemUtil'\r\n\r\nexport const GetMainMGC = (q) => {\r\n  var qI = new MassGroupComponent();\r\n\r\n  var mgi1 = mgiUtil.get(mif.MassType);\r\n  qI.Items = [mgi1];\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetMassGroupName = (q) => {\r\n  return q.MassGroupSetting ? q.MassGroupSetting.Name\r\n    : '';\r\n}\r\n\r\nexport const GetAllRows = (q) => {\r\n  var list = [];\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.AllItems)\r\n  });\r\n  return list;\r\n}\r\n\r\nexport const GetMainMGI = (q) => {\r\n  var qI = q.MainMGC?.Items[0];\r\n  qI.Table = q;\r\n  qI.SupRow = undefined;\r\n  return qI;\r\n}","export const elementfilter = \"elementfilter\";\r\nexport const massexport = \"massexport\";\r\nexport const massgroup = \"massgroup\";\r\nexport const typicallevel = \"typicallevel\";\r\nexport const massdetail = \"massdetail\";","import { message } from 'antd'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport default class Setting{\r\n  name\r\n  get Name(){\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    if (this.OnNameChanged){\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged){\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  SettingType\r\n\r\n  data\r\n  get Data(){\r\n    return this.data;\r\n  }\r\n  set Data(v){\r\n    this.data = v;\r\n    if (this.OnDataChanged){\r\n      this.OnDataChanged(v);\r\n    }\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    var {_id} = this;\r\n    var apiData = {_id};\r\n\r\n    var  url = \"https://api.bimdev.vn/api/hbs/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete setting successfully'))\r\n\r\n    this.Dict.Items.splice(this.Index, 1);\r\n\r\n    if (this.OnDelete){\r\n      this.OnDelete();\r\n    }\r\n\r\n    this.Dict.Input.EditItemId = undefined;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      _id : this._id,\r\n      projectId : this.Project?._id,\r\n      settingType : this.SettingType,\r\n      name : this.Name,\r\n      description : this.Description,\r\n      data : this.Data.ApiData\r\n    }\r\n  }\r\n\r\n  SaveDatabase = (handle) => {\r\n    genUtil.SaveDatabse(this, this.Url, (data, isNew) => {\r\n      var list = this.Dict.Items;\r\n      if (isNew) {\r\n        list.push(this);\r\n      } else {\r\n        var index = list.indexOf(x => x._id === this._id);\r\n        list[index] = this;\r\n      }\r\n\r\n      if (handle){\r\n        handle(data, isNew);\r\n      }\r\n    });\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassGroupSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassGroupSettingData {\r\n  fields\r\n  get Fields(){\r\n    if (!this.fields){\r\n      this.fields = util.GetDefaultFields(this);\r\n    }\r\n    return this.fields;\r\n  }\r\n  set Fields(v){\r\n    this.fields = v;\r\n  }\r\n\r\n  AddNewField = () => {\r\n    var item = pmData().MassPropertyNames[0];\r\n    this.Fields.push(item);\r\n    return item;\r\n  }\r\n}","export const Discipline = \"Discipline\";\r\nexport const Category = \"Category\";\r\n\r\nexport const GetAll = () => {\r\n  return [ Discipline, Category ];\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassGroupSettingData from './MassGroupSettingData';\r\nimport * as mpn from '../../../entity/mass/MassPropertyName'\r\nimport * as massGroupCompUtil from '../../mass/table/rowgroup/MassGroupComponentUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingData();\r\n  qI.MassGroupComponent = massGroupCompUtil.get(q.massGroupComponent);\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassGroupSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetDefaultFields = () => {\r\n  return [ mpn.Category ]\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassGroupSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassGroupSettingDataUtil'\r\nimport MassGroupSetting from './MassGroupSetting';\r\nimport { PMData } from '../../../single/model/PMData';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/mg/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as util from './WorkpackageVMUtil'\r\n\r\nexport class WorkpackageVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fullName : observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.Workpackage._id;\r\n  }\r\n\r\n  get Index(){\r\n    return this.Dict.WorkpackageVMs.indexOf(this);\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.Workpackage.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage.M2VM = v;\r\n  }\r\n\r\n  Workpackage\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.Workpackage.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Code = v;\r\n    }\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.Workpackage.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Name = v;\r\n    }\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.Workpackage.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.Workpackage.Description = v;\r\n    }\r\n  }\r\n\r\n  fullName = undefined\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.Workpackage.FullName;\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.FullName;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.FullName;\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.WorkpackageVMs.splice(this.Index, 1);\r\n  }\r\n\r\n  AsString = () => {\r\n    console.log(this.Name, this.Code, this.Description);\r\n  }\r\n}","import { WorkpackageVM } from \"./WorkpackageVM\";\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageVM();\r\n  qI.Workpackage = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnCodeChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Code = v;\r\n    }\r\n  }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnFullNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.FullName = v;\r\n    }\r\n  }\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supWp = q.Workpackage.SupItem;\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  var index = list.findIndex(x => x.Workpackage === supWp);\r\n  return index !== -1 ? list[index] : undefined;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\n\r\nexport class CheckboxVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      ischecked: observable,\r\n      isDisable : observable,\r\n      Cancel : observable\r\n    })\r\n  }\r\n\r\n  name\r\n\r\n  OnCheckChanging\r\n\r\n  Cancel = false;\r\n\r\n  ischecked = undefined\r\n  set Ischecked(v) {\r\n    this.ischecked = v;\r\n    if (this.onCheckChange) {\r\n      this.onCheckChange(v);\r\n    }\r\n  }\r\n\r\n  isDisable = false\r\n}","import { CheckboxVM } from \"./CheckboxVM\"\r\n\r\nexport const get = (name, ischecked) => {\r\n  var qI = new CheckboxVM();\r\n  qI.ischecked = ischecked;\r\n  qI.name = name;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../text/TextVMUtil'\r\nimport * as checkboxVMUtil from '../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as util from './WorkpackageInputVMUtil'\r\nimport { Button } from 'antd';\r\n\r\nexport class WorkpackageInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  WorkpackageInput\r\n\r\n  code = undefined\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.WorkpackageInput.Code;\r\n    }\r\n    return this.code\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.WorkpackageInput.Code = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.WorkpackageInput.Name;\r\n    }\r\n    return this.name\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.WorkpackageInput.Name = v;\r\n  }\r\n\r\n  description = undefined\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.WorkpackageInput.Description;\r\n    }\r\n    return this.description\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.WorkpackageInput.Description = v;\r\n  }\r\n\r\n  supItem = undefined\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    var input = this.WorkpackageInput;\r\n    if (!v) {\r\n      input.SupItem = v;\r\n    }else{\r\n      input.SupItem = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined\r\n  get WorkpackageVMStorageList(){\r\n    if (!this.workpackageVMStorageList){\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v){\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.SupItemSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItem = this.SupItem;\r\n  }\r\n\r\n  supItemSelectVM\r\n  get SupItemSelectVM(){\r\n    if (!this.supItemSelectVM){\r\n      var obj = this.supItemSelectVM = selectVMUtil.get\r\n        (this.WorkpackageVMStorageList, this.SupItem);\r\n      obj.Placeholder = 'công tác cha'\r\n      obj.CanClear = true;\r\n      obj.OnSelectedItemChanged = (v) => this.SupItem = v;\r\n    }\r\n    return this.supItemSelectVM;\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.WorkpackageInput.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.WorkpackageInput.IsNew = v;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n\r\n    if (!v) {\r\n      this.WorkpackageInput.Workpackage = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      this.WorkpackageInput.Workpackage = v.Workpackage;\r\n\r\n      var { Code, Name, Description, SupItem } = v;\r\n      this.CodeVM.Content = Code;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n\r\n      this.SupItemSelectVM.InitialItem = SupItem;\r\n\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  codeVM\r\n  get CodeVM() {\r\n    if (!this.codeVM) {\r\n      var obj = this.codeVM =\r\n        textVMUtil.get(this.Code, \"mã code\");\r\n      obj.onSetContent = (v) => this.Code = v;\r\n    }\r\n    return this.codeVM;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên công tác\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM) {\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Công tác mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  AsString = () => `${this.Code} ${this.Name} ${this.Description} ${this.IsNew}`\r\n\r\n  AddDatabase = () => {\r\n    this.WorkpackageInput.AddDatabase();\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  DeleteFunc = () => {\r\n    this.WorkpackageVM.Workpackage.Delete();\r\n    this.WorkpackageVM = undefined;\r\n  }\r\n\r\n  Clear = () => {\r\n    this.CodeVM.Content = null;\r\n    this.NameVM.Content = null;\r\n    this.DescriptionVM.Content = null;\r\n    this.IsNewVM.Ischecked = true;\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../single/form/PMDataVM\";\r\nimport { WorkpackageInputVM } from \"./WorkpackageInputVM\";\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkpackageInputVM();\r\n  qI.WorkpackageInput = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  })\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} workpackage successfully`);\r\n    //qI.clear();\r\n  }\r\n\r\n  dict.OnAdd = (v) => {\r\n    qI.WorkpackageVM = v;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}","import { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport * as workpackageVMUtil from './WorkpackageVMUtil';\r\nimport * as workpackageInputVMUtil from './WorkpackageInputVMUtil';\r\n\r\nexport const get = (q) => {\r\n  var qI = new Workpackage_DictVM();\r\n  qI.Workpackage_Dict = q;\r\n\r\n  q.OnGetWorkpackagesDone = (v) => {\r\n    var obj = qI.WorkpackageVMs;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (item) => {\r\n    var itemView = workpackageVMUtil.get(item, qI);\r\n    qI.Add(itemView);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackageVMs = (dictVM) => {\r\n  var wps = dictVM.Workpackage_Dict.Workpackages;\r\n  if (!wps) return undefined;\r\n  return wps.map(x => workpackageVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetWorkpackageInputVM= (dictVM) => {\r\n  var input = dictVM.Workpackage_Dict.WorkpackageInput;\r\n  return workpackageInputVMUtil.get(input, dictVM);\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ElementFilterSetting_DictVMUtil'\r\n\r\nexport class ElementFilterSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  items  = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../../text/TextVMUtil';\r\n\r\nexport class SettingVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable\r\n    })\r\n  }\r\n\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  get M2VM() {\r\n    return this.ModelItem.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.ModelItem.M2VM = v;\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Name = v;\r\n    }\r\n  }\r\n\r\n  nameVM\r\n  get NameVM(){\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM = textUtil.get(this.Name, 'tên thiết lập ...');\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (!this.M2VM) {\r\n      this.ModelItem.Description = v;\r\n    }\r\n  }\r\n\r\n  settingType\r\n  get SettingType() {\r\n    if (!this.settingType) {\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v) {\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return this.Name;\r\n  }\r\n\r\n  data\r\n  get Data(){\r\n    if (!this.data){\r\n      this.data = this.ModelItem.Data;\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n    if (!this.M2VM){\r\n      this.ModelItem.Data = v;\r\n    }\r\n  }\r\n\r\n  dataVM\r\n  get DataVM() {\r\n    if (!this.dataVM) {\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM(v) {\r\n    this.dataVM = v;\r\n\r\n    // Gọi hàm để đổ dữ liệu về\r\n    if (v && this.OnInitialSetDataVM){\r\n      this.OnInitialSetDataVM(v);\r\n    }\r\n\r\n    if (!this.M2VM) {\r\n      if (!v) {\r\n        this.Data = v;\r\n      }\r\n      else {\r\n        this.Data = v.ModelItem;\r\n      }\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM) {\r\n      return this.OnGetDataVM();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class ElementFilterSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var cateFilterVM = v.CategoryFilterVM;\r\n    if (cateFilterVM) {\r\n      cateFilterVM.OnInitialData();\r\n    }\r\n\r\n    var famFilterVM = v.FamilyFilterVM;\r\n    if (famFilterVM) {\r\n      famFilterVM.OnInitialData();\r\n    }\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../single/form/PMDataVM'\r\nimport * as selectVMUtil from '../../../select/SelectVMUtil'\r\nimport * as multiSelectVMUtil from '../../../select/MultiSelectVMUtil'\r\n\r\nexport class EntFilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  get pmDataVM () { return PMDataVM.Instance};\r\n\r\n  valueType\r\n  get ValueType() {\r\n    if (!this.valueType) {\r\n      this.valueType = this.ModelItem.ValueType;\r\n    }\r\n    return this.valueType;\r\n  }\r\n  set ValueType(v) {\r\n    this.valueType = v;\r\n    this.ModelItem.ValueType = v;\r\n  }\r\n\r\n  numberFilterType\r\n  get NumberFilterType() {\r\n    if (!this.numberFilterType) {\r\n      this.numberFilterType = this.ModelItem.NumberFilterType;\r\n    }\r\n    return this.numberFilterType;\r\n  }\r\n  set NumberFilterType(v) {\r\n    this.numberFilterType = v;\r\n    this.ModelItem.NumberFilterType = v;\r\n  }\r\n\r\n  stringFilterType\r\n  get StringFilterType() {\r\n    if (!this.stringFilterType) {\r\n      this.stringFilterType = this.ModelItem.StringFilterType;\r\n    }\r\n    return this.stringFilterType;\r\n  }\r\n  set StringFilterType(v) {\r\n    this.stringFilterType = v;\r\n    this.ModelItem.StringFilterType = v;\r\n  }\r\n\r\n  values\r\n  get Values() {\r\n    if (!this.values) {\r\n      this.values = this.ModelItem.Values;\r\n    }\r\n    return this.values;\r\n  }\r\n  set Values(v) {\r\n    this.values = v;\r\n    this.ModelItem.Values = v;\r\n  }\r\n\r\n  valueStorageList\r\n  get ValueStorageList() {\r\n    if (!this.valueStorageList){\r\n      this.valueStorageList = this.ModelItem.ValueStorageList;\r\n    }\r\n    return this.valueStorageList;\r\n  }\r\n\r\n  ValueSelectPlaceholder\r\n\r\n  valueTypeSelectVM\r\n  get ValueTypeSelectVM() {\r\n    if (!this.valueTypeSelectVM) {\r\n      var obj =this.valueTypeSelectVM = selectVMUtil.get(this.pmDataVM.FilterValueTypes, this.ValueType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.ValueType = v;\r\n      }\r\n    }\r\n    return this.valueTypeSelectVM;\r\n  }\r\n\r\n  stringFilterTypeSelectVM\r\n  get StringFilterTypeSelectVM() {\r\n    if (!this.stringFilterTypeSelectVM){\r\n      var obj = this.stringFilterTypeSelectVM = selectVMUtil.get(this.pmDataVM.StringFilterTypes, this.StringFilterType);\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.StringFilterType = v;\r\n      }\r\n    }\r\n    return this.stringFilterTypeSelectVM;\r\n  }\r\n\r\n  valuesSelectVM\r\n  get ValuesSelectVM() {\r\n    if (!this.valuesSelectVM){\r\n      var obj = this.valuesSelectVM = multiSelectVMUtil.get(this.ValueStorageList, this.Values);\r\n\r\n      if (this.ValueSelectPlaceholder){\r\n        obj.Placeholder = this.ValueSelectPlaceholder;\r\n      }\r\n\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Values = v;\r\n      }\r\n    }\r\n    return this.valuesSelectVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    if (!v) return;\r\n\r\n    var {ValueType, NumberFilterType, StringFilterType, Values} = v;\r\n    this.ValueTypeSelectVM.InitialItem = ValueType;\r\n    this.StringFilterTypeSelectVM.InitialItem = StringFilterType;\r\n    this.ValuesSelectVM.InitialItems = Values;\r\n  }\r\n\r\n  OnInitialData = () => {\r\n    var valueType = this.ValueType;\r\n    var numberFilterType = this.NumberFilterType;\r\n    var stringFilterType = this.StringFilterType;\r\n    var values = this.Values;\r\n  }\r\n}","import { SettingVM } from \"../setting/base/SettingVM\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\n\r\nexport const get = (q) => {\r\n  if (!q) return undefined;\r\n  var qI = new EntFilterVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport default class ElementFilterSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isHaveFamilyFilter : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  categoryFilterVM\r\n  get CategoryFilterVM(){\r\n    if (!this.categoryFilterVM && this.ModelItem){\r\n      this.categoryFilterVM = this.GetCategoryFilterVM();\r\n    }\r\n    return this.categoryFilterVM;\r\n  }\r\n\r\n  GetCategoryFilterVM = () => {\r\n    var filter = this.ModelItem.CategoryFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilter = undefined\r\n  get IsHaveFamilyFilter(){\r\n    if (!this.isHaveFamilyFilter){\r\n      this.isHaveFamilyFilter = this.ModelItem.IsHaveFamilyFilter;\r\n    }\r\n    return this.isHaveFamilyFilter;\r\n  }\r\n  set IsHaveFamilyFilter(v){\r\n    this.isHaveFamilyFilter = v;\r\n    this.ModelItem.IsHaveFamilyFilter = v;\r\n  }\r\n\r\n  familyFilterVM\r\n  get FamilyFilterVM(){\r\n    if (!this.familyFilterVM && this.ModelItem){\r\n      this.familyFilterVM = this.GetFamilyFilterVM();\r\n    }\r\n    return this.familyFilterVM;\r\n  }\r\n\r\n  GetFamilyFilterVM = () => {\r\n    var filter = this.ModelItem.FamilyFilter;\r\n    return filterVMUtil.get(filter);\r\n  }\r\n\r\n  isHaveFamilyFilterVM\r\n  get IsHaveFamilyFilterVM() {\r\n    if (!this.isHaveFamilyFilterVM) {\r\n      var obj = this.isHaveFamilyFilterVM\r\n        = checkboxVMUtil.get(\"Thiết lập lọc Family\", this.IsHaveFamilyFilter);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHaveFamilyFilter = v;\r\n      };\r\n    }\r\n    return this.isHaveFamilyFilterVM;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.CategoryFilterVM.SetData(v.CategoryFilterVM);\r\n\r\n    var ischecked = v.IsHaveFamilyFilter === true;\r\n    this.IsHaveFamilyFilterVM.Ischecked = ischecked;\r\n    \r\n    this.FamilyFilterVM.SetData(v.FamilyFilterVM);\r\n  }\r\n}","import ElementFilterSettingDataVM from './ElementFilterSettingDataVM';\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingDataVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}","import ElementFilterSettingVM from \"./ElementFilterSettingVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { message } from \"antd\";\r\nimport { SettingVM } from \"./SettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new SettingVM();\r\n  qI.Setting = q;\r\n\r\n  q.OnDelete = () => {\r\n    qI.Delete();\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetCommandName = (qI) => {\r\n  var isNew = qI.IsNew;\r\n  return isNew ? \"Create\" : \"Edit\";\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textVMUtil from '../../../../text/TextVMUtil'\r\nimport * as util from './SettingVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport { Button, message } from 'antd';\r\n\r\nexport default class SettingInputVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      dataVM : observable,\r\n      isNew: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  settingType\r\n  get SettingType(){\r\n    if (!this.settingType){\r\n      this.settingType = this.ModelItem.SettingType;\r\n    }\r\n    return this.settingType;\r\n  }\r\n  set SettingType(v){\r\n    this.settingType = v;\r\n    this.ModelItem.SettingType = v;\r\n  }\r\n\r\n  get SearchName() {\r\n    return this.Name;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên bộ lọc\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n\r\n  settingTypeVM\r\n  get SettingTypeVM() {\r\n    if (!this.settingTypeVM){\r\n      var obj = this.settingTypeVM = \r\n        textVMUtil.get(this.SettingType, \"loại thiết lập\");\r\n      obj.onSetContent = (v) => this.SettingType = v;\r\n    }\r\n    return this.settingTypeVM;\r\n  }\r\n\r\n  dataVM = undefined\r\n  get DataVM(){\r\n    if (!this.dataVM){\r\n      this.dataVM = this.GetDataVM();\r\n    }\r\n    return this.dataVM;\r\n  }\r\n  set DataVM (v){\r\n    if (this.DataVM.SetData){\r\n      this.DataVM.SetData(v);\r\n    }\r\n  }\r\n\r\n  GetDataVM = () => {\r\n    if (this.OnGetDataVM){\r\n      var dataVM = this.OnGetDataVM();\r\n      return dataVM;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem() {\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v) {\r\n    this.editItem = v;\r\n\r\n    var input = this.ModelItem;\r\n    if (!v) {\r\n      input.EditItem = v;\r\n      this.IsNewVM.Ischecked = true;\r\n    }\r\n    else {\r\n      input.EditItem = v.ModelItem;\r\n\r\n      var { Name, Description, SettingType } = v;\r\n      this.NameVM.Content = Name;\r\n      this.DescriptionVM.Content = Description;\r\n      this.SettingTypeVM.Content = SettingType;\r\n\r\n      this.DataVM = v.DataVM;\r\n      this.IsNewVM.Ischecked = false;\r\n    }\r\n  }\r\n\r\n  isNew = undefined\r\n  get IsNew() {\r\n    if (this.isNew === undefined) {\r\n      this.isNew = this.ModelItem.IsNew;\r\n    }\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v) {\r\n    this.isNew = v;\r\n    this.CommandVM.Content = util.GetCommandName(this);\r\n    this.ModelItem.IsNew = v;\r\n  }\r\n\r\n  isNewVM\r\n  get IsNewVM() {\r\n    if (!this.isNewVM) {\r\n      var obj = this.isNewVM\r\n        = checkboxVMUtil.get(\"Thiết lập mới\", this.IsNew);\r\n\r\n      obj.isDisable = true;\r\n      obj.onCheckChange = (v) => {\r\n        this.IsNew = v;\r\n        if (v) {\r\n          obj.isDisable = true;\r\n        } else {\r\n          obj.isDisable = false;\r\n        }\r\n      };\r\n    }\r\n    return this.isNewVM;\r\n  }\r\n\r\n  commandName = undefined\r\n  get CommandName() {\r\n    if (!this.commandName) {\r\n      this.commandName = util.GetCommandName(this);\r\n    }\r\n    return this.commandName;\r\n  }\r\n  set CommandName(v) {\r\n    this.commandName = v;\r\n  }\r\n\r\n  commandVM\r\n  get CommandVM() {\r\n    if (!this.commandVM) {\r\n      var obj = this.commandVM = textVMUtil.get(this.CommandName);\r\n      obj.onSetContent = (v) => this.CommandName = v;\r\n    }\r\n    return this.commandVM;\r\n  }\r\n\r\n  deleteView\r\n  get DeleteView() {\r\n    return !this.IsNew ?\r\n      <Button onClick={this.DeleteFunc}>Delete</Button>\r\n      : \"\";\r\n  }\r\n\r\n  \r\n  DeleteFunc = () => {\r\n    this.EditItem.ModelItem.Delete();\r\n    this.EditItem.Delete();\r\n    this.EditItem = undefined;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    this.ModelItem.AddDatabase();\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class ElementFilterSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport * as itemVMUtil from './ElementFilterSettingVMUtil'\r\nimport * as inputVMUtil from './ElementFilterSettingInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport ElementFilterSettingInputVM from \"./ElementFilterSettingInputVM\"\r\nimport * as dataVMUtil from './ElementFilterSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} element filter setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../../filter/EntFilterVMUtil'\r\nimport * as util from './MES_ValueSettingVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MES_ValueSettingVM {\r\n  // constructor() {\r\n  //   makeObservable(this, {\r\n\r\n  //   })\r\n  // }\r\n\r\n  get Index() {\r\n    return this.Dict.ValueSettingVMs.indexOf(this);\r\n  }\r\n\r\n  retrieveType\r\n  get RetrieveType() {\r\n    if (!this.retrieveType) {\r\n      this.retrieveType = this.ModelItem.RetrieveType;\r\n    }\r\n    return this.retrieveType;\r\n  }\r\n  set RetrieveType(v) {\r\n    this.retrieveType = v;\r\n    this.ModelItem.RetrieveType = v;\r\n  }\r\n\r\n  get RetrieveTypeStorageList() {\r\n    return util.GetRetrieveTypeStorageList(this);\r\n  }\r\n\r\n  retrieveTypeSelectVM\r\n  get RetrieveTypeSelectVM() {\r\n    if (!this.retrieveTypeSelectVM) {\r\n      var obj = this.retrieveTypeSelectVM = selectVMUtil.get(this.RetrieveTypeStorageList, this.RetrieveType);\r\n      obj.OnSelectedItemChanged = (v) => this.RetrieveType = v;\r\n    }\r\n    return this.retrieveTypeSelectVM;\r\n  }\r\n\r\n  valueFilterVM\r\n  get ValueFilterVM() {\r\n    if (!this.valueFilterVM) {\r\n      var obj = this.valueFilterVM = filterVMUtil.get(this.ModelItem.ValueFilter);\r\n      obj.ValueSelectPlaceholder = 'giá trị parameter';\r\n    }\r\n    return this.valueFilterVM;\r\n  }\r\n  set ValueFilterVM(v) {\r\n    this.valueFilterVM = v;\r\n    if (!v) {\r\n      this.ModelItem.ValueFilter = v;\r\n    }\r\n    else {\r\n      this.ModelItem.ValueFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  workpackageVM\r\n  get WorkpackageVM() {\r\n    if (!this.workpackageVM) {\r\n      this.workpackageVM = util.GetWorkpackageVM(this);\r\n    }\r\n    return this.workpackageVM;\r\n  }\r\n  set WorkpackageVM(v) {\r\n    this.workpackageVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.Workpackage = v;\r\n    }\r\n    else {\r\n      this.ModelItem.Workpackage = v.Workpackage;\r\n    }\r\n  }\r\n\r\n  workpackageVMStorageList = undefined;\r\n  get WorkpackageVMStorageList() {\r\n    if (!this.workpackageVMStorageList) {\r\n      this.workpackageVMStorageList = util.GetWorkpackageVMStorageList(this);\r\n    }\r\n    return this.workpackageVMStorageList;\r\n  }\r\n  set WorkpackageVMStorageList(v) {\r\n    this.workpackageVMStorageList = v;\r\n\r\n    var selectVM = this.WorkpackageSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = -1;\r\n  }\r\n\r\n  workpackageSelectVM\r\n  get WorkpackageSelectVM() {\r\n    if (!this.workpackageSelectVM) {\r\n      var storageList = this.WorkpackageVMStorageList ?\r\n        this.WorkpackageVMStorageList : [];\r\n\r\n      var obj = this.workpackageSelectVM = selectVMUtil.get\r\n        (storageList, this.WorkpackageVM);\r\n      obj.Placeholder = 'chọn công tác';\r\n      obj.OnSelectedItemChanged = (v) => this.WorkpackageVM = v;\r\n    }\r\n\r\n    return this.workpackageSelectVM;\r\n  }\r\n\r\n  massType\r\n  get MassType() {\r\n    if (!this.massType) {\r\n      this.massType = this.ModelItem.MassType;\r\n    }\r\n    return this.massType;\r\n  }\r\n  set MassType(v) {\r\n    this.massType = v;\r\n    this.ModelItem.MassType = v;\r\n  }\r\n\r\n  get MassTypeStorageList() {\r\n    return util.GetMassTypeStorageList(this);\r\n  }\r\n\r\n  massTypeSelectVM\r\n  get MassTypeSelectVM() {\r\n    if (!this.massTypeSelectVM) {\r\n      var obj = this.massTypeSelectVM = selectVMUtil.get(this.MassTypeStorageList, \r\n        this.MassType);\r\n      obj.Placeholder = 'loại khối lượng';\r\n      obj.OnSelectedItemChanged = (v) => this.MassType = v;\r\n    }\r\n    return this.massTypeSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.ValueSettingVMs;\r\n    list.splice(this.Index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.RetrieveTypeSelectVM.InitialItem = v.RetrieveType;\r\n    this.ValueFilterVM.SetData(v.ValueFilterVM);\r\n    this.WorkpackageSelectVM.InitialItem = v.WorkpackageVM;\r\n    this.MassTypeSelectVM.InitialItem = v.MassType;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSettingVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  pmDataVM().Workpackage_DictVM.OnGetItemsDone_Funcs.push((v) => {\r\n    qI.WorkpackageVMStorageList = GetWorkpackageVMStorageList(qI);\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRetrieveTypeStorageList = (q) => {\r\n  return pmDataVM().ValueRetrieveTypes;\r\n}\r\n\r\nexport const GetWorkpackageVM = (q) => {\r\n  var workpackage = q.ModelItem.Workpackage;\r\n  if (!workpackage) return undefined;\r\n\r\n  var list = pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.Workpackage === workpackage);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetWorkpackageVMStorageList = (q) => {\r\n  return pmDataVM().Workpackage_DictVM.WorkpackageVMs;\r\n}\r\n\r\nexport const GetMassTypeStorageList = (q) => {\r\n  return pmDataVM().MassTypes;\r\n}","import * as util from './MES_ValueSettingUtil'\r\n\r\nexport default class MES_ValueSetting{\r\n  get Index() {\r\n    return this.Dict.ValueSettings.indexOf(this);\r\n  }\r\n\r\n  RetrieveType\r\n\r\n  MassType\r\n  \r\n  ValueFiter\r\n\r\n  workpackageId\r\n  \r\n  workpackage\r\n  get Workpackage(){\r\n    if (!this.workpackage){\r\n      this.workpackage = util.GetWorkpackage(this);\r\n    }\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.workpackageId = undefined;\r\n    }\r\n    else{\r\n      this.workpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ValueSettings.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","export const byparameter = \"byparameter\";\r\nexport const bymaterial = \"bymaterial\";\r\nexport const byrebar = \"byrebar\";\r\n\r\nexport const GetAll = () => {\r\n  return [byparameter, bymaterial, byrebar]\r\n}","import MES_ValueSetting from './MES_ValueSetting'\r\nimport * as filterUtil from '../../../filter/EntFilterUtil'\r\nimport * as vrt from './MES_ValueRetrieveType'\r\nimport * as fvt from '../../../filter/FilterValueType'\r\nimport * as sft from '../../../filter/StringFilterType'\r\nimport * as fct from '../../../filter/FilterCategoryType'\r\nimport { EntFilter } from '../../../filter/EntFilter';\r\nimport { PMData } from '../../../../single/model/PMData'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.retrieveType;\r\n  qI.MassType = q.massType;\r\n  qI.ValueFilter = filterUtil.get(q.valueFilter, fct.parameter);\r\n  qI.workpackageId = q.workpackageId;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q, dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = q.RetrieveType;\r\n  qI.MassType = q.MassType;\r\n  qI.ValueFilter = q.ValueFilter;\r\n  qI.Workpackage = q.Workpackage;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new MES_ValueSetting();\r\n  qI.RetrieveType = vrt.byparameter;\r\n  qI.Dict = dict;\r\n  \r\n  var valueFilter = new EntFilter();\r\n  valueFilter.CategoryType = fct.parameter;\r\n  valueFilter.ValueType = fvt.bystring;\r\n  valueFilter.StringFilterType = sft.byequal;\r\n  valueFilter.Values = [ 'Volume' ];\r\n\r\n  qI.ValueFilter = valueFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetWorkpackage = (q) => {\r\n  var workpackageId = q.workpackageId;\r\n  if (!workpackageId) return undefined;\r\n\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === workpackageId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    retrieveType : q.RetrieveType,\r\n    massType : q.MassType,\r\n    valueFilter: q.ValueFilter.ApiData,\r\n    workpackageId : q.workpackageId\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassExportSettingDataVMUtil'\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport default class MassExportSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      valueSettingVMs: observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  elementFilterVM\r\n  get ElementFilterVM() {\r\n    if (!this.elementFilterVM) {\r\n      this.elementFilterVM = util.GetElementFilterVM(this);\r\n    }\r\n    return this.elementFilterVM;\r\n  }\r\n  set ElementFilterVM(v) {\r\n    this.elementFilterVM = v;\r\n    var modelItem = this.ModelItem;\r\n    if (!v) {\r\n      modelItem.ElementFilter = v;\r\n    }\r\n    else {\r\n      modelItem.ElementFilter = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  elementFilterVMStorageList = undefined\r\n  get ElementFilterVMStorageList() {\r\n    if (!this.elementFilterVMStorageList) {\r\n      this.elementFilterVMStorageList = util.GetElementFilterVMStorageList(this);\r\n    }\r\n    return this.elementFilterVMStorageList;\r\n  }\r\n  set ElementFilterVMStorageList(v) {\r\n    this.elementFilterVMStorageList = v;\r\n\r\n    var selectVM = this.ElementFilterSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.SelectedIndex = 0;\r\n  }\r\n\r\n  elementFilterSelectVM\r\n  get ElementFilterSelectVM() {\r\n    if (!this.elementFilterSelectVM) {\r\n      var storageList = this.ElementFilterVMStorageList ? this.ElementFilterVMStorageList : [];\r\n\r\n      var obj = this.elementFilterSelectVM = selectVMUtil.get(storageList, this.ElementFilterVM);\r\n      obj.Placeholder = 'chọn bộ lọc'\r\n      obj.OnSelectedItemChanged = (v) => this.ElementFilterVM = v;\r\n    }\r\n    return this.elementFilterSelectVM;\r\n  }\r\n\r\n  valueSettingVMs = undefined\r\n  get ValueSettingVMs() {\r\n    if (!this.valueSettingVMs) {\r\n      this.valueSettingVMs = util.GetValueSettingVMs(this);\r\n    }\r\n    return this.valueSettingVMs;\r\n  }\r\n  set ValueSettingVMs(v) {\r\n    var list = this.valueSettingVMs;\r\n    var modelList = this.ModelItem.ValueSettings;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount) {\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount) {\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = valueSettingUtil.Clone\r\n          (originItemVM.ModelItem, this.ModelItem);\r\n        modelList.push(item);\r\n\r\n        var itemVM = valueSettingVMUtil.get(item, this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewValueSettingVM = () => {\r\n    var item = this.ModelItem.AddNewValueSetting();\r\n    var itemView = valueSettingVMUtil.get(item, this);\r\n    this.ValueSettingVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.ElementFilterSelectVM.InitialItem = v.ElementFilterVM;\r\n    this.ValueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassExportSettingDataVM from './MassExportSettingDataVM';\r\nimport * as valueSettingVMUtil from './exportSetting/MES_ValueSettingVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  pmDataVM().ElementFilterSetting_DictVM.OnGetItemsDone = (v) => {\r\n    qI.ElementFilterVMStorageList = GetElementFilterVMStorageList(qI);\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilterVM = (q) => {\r\n  var elemFilter = q.ModelItem.ElementFilter;\r\n  if (!elemFilter) return undefined;\r\n\r\n  var list = pmDataVM().ElementFilterSetting_DictVM.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x.ModelItem === elemFilter);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetElementFilterVMStorageList = (q) => {\r\n  return pmDataVM().ElementFilterSetting_DictVM.Items;\r\n}\r\n\r\nexport const GetValueSettingVMs = (q) => {\r\n  var valueSettings = q.ModelItem.ValueSettings;\r\n  return valueSettings.map(x => valueSettingVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassExportSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    var valueSettingVMs = v.ValueSettingVMs;\r\n  }\r\n}","import * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport MassExportSettingVM from \"./MassExportSettingVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInputVM from \"../base/SettingInputVM\";\r\n\r\nexport default class MassExportSettingInputVM extends SettingInputVM {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassExportSetting_DictVMUtil'\r\n\r\nexport class MassExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n      this.Input.EditItem = v;\r\n    }\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassExportSettingVMUtil'\r\nimport * as inputVMUtil from './MassExportSettingInputVMUtil'\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (dictVM) => {\r\n  var input = dictVM.ModelItem.Input;\r\n  return inputVMUtil.get(input, dictVM);\r\n}","import SettingInputVM from \"../base/SettingInputVM\";\r\nimport * as dataVMUtil from './MassExportSettingDataVMUtil'\r\nimport { message } from \"antd\";\r\nimport MassExportSettingInputVM from \"./MassExportSettingInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSettingInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnAddDatabaseDone = (v) => {\r\n    var command = qI.CommandName;\r\n    message.success(`${command} setting successfully`);\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassGroupSetting_DictVMUtil'\r\n\r\nexport class MassGroupSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  currentItem\r\n  get CurrentItem(){\r\n    if (!this.currentItem){\r\n      this.currentItem = this.ModelItem.CurrentItem;\r\n    }\r\n    return this.currentItem;\r\n  }\r\n  set CurrentItem(v){\r\n    this.currentItem = v;\r\n    if (!v){\r\n      this.ModelItem.CurrentItem = v;\r\n    }else{\r\n      this.ModelItem.CurrentItem = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n}","import * as itemVMUtil from './MassGroupSettingVMUtil'\r\nimport { MassGroupSetting_DictVM } from \"./MassGroupSetting_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n  }\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n","\r\nexport default class PhaseVM {\r\n  get _id(){\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name(){\r\n    if(!this.name){\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v){\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description(){\r\n    if (!this.description){\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v){\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  get DisplayContent () {\r\n    return `${this.Name}`;\r\n  }\r\n}","import PhaseVM from \"./PhaseVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new PhaseVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;  \r\n\r\n  return qI;\r\n}","export const addversion = 'addversion'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Phase_DictVMUtil'\r\nimport * as stateType from '../state/StateType'\r\nimport { message } from 'antd';\r\n\r\nexport class Phase_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable,\r\n      state : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  state = undefined\r\n  get State(){\r\n    return this.state;\r\n  }\r\n  set State(v){\r\n    this.state = v;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n  }\r\n\r\n  AddVersion = () => {\r\n    this.State = stateType.addversion;\r\n  }\r\n\r\n  Cancel = () => {\r\n    this.State = undefined;\r\n  }\r\n\r\n  OK = () => {\r\n    var name = this.Input.Name;\r\n    var index = this.Items.findIndex(x => x.Name === name);\r\n    if (index !== -1){\r\n      message.warning('version name already exists!');\r\n      return;\r\n    }\r\n\r\n    this.State = undefined;\r\n    this.ModelItem.AddMassVersion();\r\n  }\r\n}","import * as textVMUtil from '../../../text/TextVMUtil'\r\n\r\nexport default class PhaseInputVM {\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    if (!this.description) {\r\n      this.description = this.ModelItem.Description;\r\n    }\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    this.ModelItem.Description = v;\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM){\r\n      var obj = this.nameVM =\r\n        textVMUtil.get(this.Name, \"tên version\");\r\n      obj.onSetContent = (v) => this.Name = v;\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  descriptionVM\r\n  get DescriptionVM() {\r\n    if (!this.descriptionVM){\r\n      var obj = this.descriptionVM =\r\n        textVMUtil.get(this.Description, \"mô tả\");\r\n      obj.onSetContent = (v) => this.Description = v;\r\n    }\r\n    return this.descriptionVM;\r\n  }\r\n}","import * as itemVMUtil from './PhaseVMUtil'\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport * as inputVMUtil from './PhaseInputVMUtil'\r\n\r\nexport const get = (q) => {\r\n  var qI = new Phase_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  });\r\n\r\n  q.OnAdd = (v) => {\r\n    qI.Add(itemVMUtil.get(v, qI));\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputVMUtil.get(q.ModelItem.Input, q);\r\n}","import PhaseInputVM from \"./PhaseInputVM\";\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new PhaseInputVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './ProjectVMUtil'\r\n\r\nexport default class ProjectVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      typicalLevelSetting: observable,\r\n      typicalLevelSetting_ForEdit: observable\r\n    })\r\n  }\r\n\r\n  get _id() {\r\n    return this.ModelItem._id;\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    this.ModelItem.Name = v;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    if (!this.code) {\r\n      this.code = this.ModelItem.Code;\r\n    }\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    this.ModelItem.Code = v;\r\n  }\r\n\r\n  phase_DictVM\r\n  get Phase_DictVM() {\r\n    if (!this.phase_DictVM) {\r\n      this.phase_DictVM = util.GetPhase_DictVM(this);\r\n    }\r\n    return this.phase_DictVM;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = this.ModelItem.RebarMass_Dict;\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  get InputExportSet() {\r\n    return this.ModelItem.InputExportSet;\r\n  }\r\n\r\n  get DisplayContent() {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  get Level_Dict() {\r\n    return this.ModelItem.Level_Dict;\r\n  }\r\n\r\n  typicalLevelSetting = undefined\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      this.typicalLevelSetting = util.GetTypicalLevelSetting(this);\r\n    }\r\n    return this.typicalLevelSetting;\r\n  } set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit = undefined\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = util.GetTypicalLevelSetting_ForEdit(this);\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  get Url(){\r\n    return this.ModelItem.Url;\r\n  }\r\n}","export const text = 'text'\r\nexport const input = 'input'","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport * as checkboxVMUtil from './CheckboxVMUtil'\r\nimport './Checkbox.css'\r\n\r\nclass CheckboxView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = checkboxVMUtil.get(false);\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onCheckedChange = (e) => {\r\n    var data = this.state;\r\n    var { checked } = e.target;\r\n\r\n    if (data.OnCheckChanging) {\r\n      data.OnCheckChanging(checked);\r\n    }\r\n\r\n    if (!data.Cancel) {\r\n      data.Ischecked = checked;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var { ischecked, name, isDisable } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <label>\r\n          <input type=\"checkbox\"\r\n            checked={ischecked}\r\n            onChange={this.onCheckedChange} disabled={isDisable} />\r\n          <span className='checkbox__title'>{name}</span>\r\n        </label>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CheckboxView)","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport CheckboxView from '../../../../../checkbox/CheckboxView';\r\nimport * as checkBoxUtil from '../../../../../checkbox/CheckboxVMUtil';\r\nimport * as multiSelectUtil from \"../../../../../select/MultiSelectVMUtil\";\r\nimport * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport { text } from '../pageItem/TLS_PageItemStateType';\r\nimport * as util from './LevelGroupVMUtil'\r\n\r\nexport class LevelGroupVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      primary: observable,\r\n      isSelectOpen: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get Levels() {\r\n    return this.ModelItem.Levels;\r\n  } set Levels(v) {\r\n    this.ModelItem.Levels = v;\r\n  }\r\n\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  levelSelectVM\r\n  get LevelSelectVM() {\r\n    if (!this.levelSelectVM) {\r\n      var list = this.LevelStorageList;\r\n      if (!list) {\r\n        this.SettingVM.ModelItem.OnGetLevelStorageList_Funcs.push(() => {\r\n          var obj = this.levelSelectVM;\r\n          obj.Items = this.LevelStorageList;\r\n          obj.InitialItems = this.Levels;\r\n        })\r\n      }\r\n\r\n      list = list ? list : []\r\n      var obj = this.levelSelectVM = multiSelectUtil.get(list, this.Levels);\r\n      obj.Placeholder = 'chọn level ...';\r\n\r\n      obj.TitleRender = (item) => {\r\n        const getTriggerContent = () => {\r\n          return this.IsSelectOpen || this.Primary === item ? 'click' : 'hover';\r\n        }\r\n        var triggerVM = textUtil.get(getTriggerContent())\r\n\r\n        const getButtonType = () => {\r\n          return this.Primary === item ? 'primary' : 'dashed'\r\n        }\r\n        var buttonTypeVM = textUtil.get(getButtonType())\r\n\r\n        const getAddContent = () => {\r\n          return this.Primary === item ? '' : 'Set'\r\n        }\r\n        var addContentVM = textUtil.get(getAddContent())\r\n\r\n        const getItemCss = () => {\r\n          return this.Primary === item ? 'levelgroup__primary' : '';\r\n        }\r\n\r\n        return <Popover trigger={triggerVM.Content}\r\n          content={\r\n            <span>\r\n              {this.Primary !== item ?\r\n                <span className='levelgroup__addtext'>{addContentVM.Content}</span>\r\n                : ''}\r\n              <Button size='small'\r\n                type={buttonTypeVM.Content}\r\n                onClick={() => {\r\n                  this.Primary = item;\r\n                }}>Primary</Button>\r\n            </span>\r\n          }>\r\n          <span className={getItemCss()}>{item}</span>\r\n        </Popover>\r\n      }\r\n\r\n      obj.OnSetOpen = (v) => this.IsSelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.Levels = v;\r\n        if (this.Levels.indexOf(this.Primary) === -1) {\r\n          this.Primary = util.GetDefaultPrimary(this);\r\n        }\r\n      }\r\n    }\r\n    return this.levelSelectVM;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    var list = this.Dict.LevelGroups;\r\n    list.splice(this.Index, 1);\r\n\r\n    this.Primary = util.GetDefaultPrimary(this);\r\n  }\r\n\r\n  primary = undefined\r\n  get Primary() {\r\n    if (!this.primary) {\r\n      this.primary = this.ModelItem.Primary;\r\n    }\r\n    return this.primary\r\n  } set Primary(v) {\r\n    this.primary = this.ModelItem.Primary = v;\r\n  }\r\n\r\n  isSelectOpen = undefined\r\n  get IsSelectOpen() {\r\n    return this.isSelectOpen\r\n  } set IsSelectOpen(v) {\r\n    this.isSelectOpen = v;\r\n  }\r\n}","import { LevelGroupVM } from \"./LevelGroupVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new LevelGroupVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import * as textUtil from \"../../../../../text/TextVMUtil\";\r\nimport * as genUtil from \"../../../../../../util/generalUtil\";\r\nimport * as it from './TLS_FilterValue_InputType'\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from \"../../../../../input/NewInputView\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterValueVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      inputType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.Items.indexOf(this);\r\n  }\r\n\r\n  get Values() {\r\n    return this.Dict.ModelItem.Items;\r\n  }\r\n\r\n  get Value() {\r\n    return this.Values[this.Index].Value;\r\n  }\r\n  set Value(v) {\r\n    this.Values[this.Index].Value = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM() {\r\n    if (!this.valueVM) {\r\n      var obj = this.valueVM = textUtil.get(this.Value);\r\n      obj.onSetContent = (v) => {\r\n        this.Value = v;\r\n      }\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var list = ['Cột', 'Vách', 'Dầm', 'Sàn']\r\n      var obj = this.selectVM = selectUtil.get(list, this.Value);\r\n      obj.Placeholder = '...'\r\n      obj.OnSetOpen = (v) => this.SelectOpen = v;\r\n      obj.OnSelectedItemChanged = (v) => this.Value = v;\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.ModelItem.Items.splice(this.Index, 1);\r\n    this.Dict.Items.splice(this.Index, 1);\r\n  }\r\n\r\n  inputType = undefined\r\n  get InputType(){\r\n    if (!this.inputType){\r\n      this.inputType = this.ModelItem.InputType\r\n    }\r\n    return this.inputType;\r\n  } set InputType(v){\r\n    this.inputType = this.ModelItem.InputType = v;\r\n  }\r\n\r\n  ToggleInputType = () => {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        this.SelectVM.InitialItem = this.Value;\r\n        this.Value = this.SelectVM.SelectedItem;\r\n        this.InputType = it.select\r\n        break;\r\n      case it.select:\r\n        if (this.Value) {\r\n          this.ValueVM.Content = this.Value;\r\n        } else{\r\n          if (!this.ValueVM.Content){\r\n            this.ValueVM.Content = 'value'\r\n          }\r\n          this.Value =this.ValueVM.Content;\r\n        }\r\n\r\n        this.InputType = it.input\r\n        break;\r\n    }\r\n  }\r\n\r\n  SwitchChecked_Funcs = () => this.InputType === it.select;\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        return <NewInputView store={this.ValueVM} \r\n          className='tls_filter__value__input' />\r\n      case it.select:\r\n        return <SelectView store={this.SelectVM} \r\n          className='tls_filter__value__select' />\r\n    }\r\n  }\r\n\r\n  selectOpen\r\n  get SelectOpen() {\r\n    if (this.selectOpen === undefined) {\r\n      this.selectOpen = this.SelectVM.Open;\r\n    }\r\n    return this.selectOpen;\r\n  }\r\n  set SelectOpen(v) {\r\n    this.selectOpen = v;\r\n    this.PopoverState.Content = util.GetPopoverState(this);\r\n  }\r\n\r\n  popoverState\r\n  get PopoverState() {\r\n    if (!this.popoverState) {\r\n      this.popoverState = textUtil.get(util.GetPopoverState(this));\r\n    }\r\n    return this.popoverState;\r\n  }\r\n}","import { TLS_FilterValueVM } from \"./TLS_FilterValueVM\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterValueVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPopoverState = (q) => {\r\n    return q.SelectOpen ? 'none' : 'hover';\r\n  }","import { makeObservable, observable, action } from 'mobx';\r\nimport * as selectUtil from \"../../../../../select/SelectVMUtil\";\r\nimport * as util from './TLS_FilterVMUtil'\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport class TLS_FilterVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  get id(){\r\n    return this.ModelItem.id;\r\n  }\r\n\r\n  get Field(){\r\n    return this.ModelItem.Field;\r\n  } set Field(v){\r\n    this.ModelItem.Field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = \r\n        selectUtil.get(this.FieldStorageList, this.Field);\r\n      obj.Placeholder = 'chọn bộ lọc ...';\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  items = undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  AddItem = () => {\r\n    var item = valueUtil.get(this.ModelItem.AddItem(),this);\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n}\r\n","import { TLS_FilterVM } from \"./TLS_FilterVM\";\r\nimport * as valueUtil from './TLS_FilterValueVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_FilterVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items.map(x => valueUtil.get(x, q));\r\n}","import { Button, Popover } from 'antd';\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport * as textUtil from '../../../../../text/TextVMUtil';\r\nimport * as st from './TLS_PageItemStateType'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\nimport * as util from './TLS_PageItemVMUtil'\r\n\r\nexport class TLS_PageItemVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      name: observable,\r\n      State: observable,\r\n      levelGroups: observable,\r\n      filters: observable,\r\n    })\r\n  }\r\n\r\n  get id() {\r\n    return this.ModelItem?.id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n  }\r\n\r\n  name = undefined\r\n  get Name() {\r\n    if (!this.name) {\r\n      this.name = this.ModelItem.Name;\r\n    }\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = this.ModelItem.Name = v;\r\n  }\r\n\r\n  State = st.text\r\n\r\n  ToggleState = () => {\r\n    switch (this.State) {\r\n      case st.text:\r\n        this.State = st.input\r\n        break;\r\n      case st.input:\r\n        this.NameVM.Content = this.Name;\r\n        this.State = st.text\r\n        break;\r\n    }\r\n  }\r\n\r\n  get DeleteMarginCss() {\r\n    return this.State === st.input ? 'tls_pageItem__deletemargin' : ''\r\n  }\r\n\r\n  nameVM\r\n  get NameVM() {\r\n    if (!this.nameVM) {\r\n      this.nameVM = textUtil.get(this.Name);\r\n    }\r\n    return this.nameVM;\r\n  }\r\n\r\n  NameOK = () => {\r\n    this.State = st.text;\r\n    this.Name = this.NameVM.Content;\r\n  }\r\n\r\n  NameCancel = () => {\r\n    this.State = st.text;\r\n  }\r\n\r\n  get InputToolElement() {\r\n    return <div >\r\n      <Button type='primary' size='small'\r\n        onClick={this.NameOK}>ok</Button>\r\n      <Button type='dashed' size='small'\r\n        onClick={this.NameCancel}>cancel</Button>\r\n    </div>\r\n  }\r\n\r\n  get InputElement() {\r\n    var obj = <NewInputView className='tls_pageItem_input' store={this.NameVM} />\r\n    return obj;\r\n  }\r\n\r\n  get TitleElement() {\r\n    var delElem = <Button type='primary' size='small' onClick={this.Delete}\r\n      className='tls_pageItem__delete'>x</Button>\r\n\r\n    switch (this.State) {\r\n      case st.text:\r\n        return <>\r\n          <span>{this.Name}</span>\r\n          <Button type='primary' size='small' className='tls_pageItem__edit'\r\n            onClick={this.ToggleState}>e</Button>\r\n          {delElem}\r\n        </>\r\n      case st.input:\r\n        return <>\r\n          <Popover content={this.InputToolElement} trigger=\"focus\">\r\n            <span>\r\n              {this.InputElement}\r\n            </span>\r\n          </Popover>\r\n          {delElem}\r\n        </>\r\n    }\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  get IsLast() {\r\n    return this.Dict.PageItems.length - 1 === this.Index;\r\n  }\r\n\r\n  Delete = () => {\r\n    this.ModelItem.Delete();\r\n\r\n    var index = this.Index;\r\n    var isLast = this.IsLast;\r\n\r\n    var dict = this.Dict;\r\n    var list = dict.PageItems;\r\n    list.splice(index, 1);\r\n    dict.AllTabs.splice(index, 1);\r\n\r\n    if (list.length !== 0) {\r\n      dict.IsModelChangePageKey = true;\r\n      dict.CurrentPageKey = (isLast ? list[index - 1] : list[index]).id\r\n    }\r\n  }\r\n\r\n  // Setting\r\n  get SettingVM() {\r\n    return this.Dict.SettingVM;\r\n  }\r\n\r\n  // Level Group\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups = undefined\r\n  get LevelGroups() {\r\n    if (!this.levelGroups) {\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.get(this.ModelItem.AddLevelGroup(), this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  filters = undefined\r\n  get Filters() {\r\n    if (!this.filters) {\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.get(this.ModelItem.AddFilter(), this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n}","import { TLS_PageItemVM } from \"./TLS_PageItemVM\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupVMUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TLS_PageItemVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetLevelGroups = (q) => {\r\n  return q.ModelItem.LevelGroups.map(x => levelGroupUtil.get(x, q));\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return q.ModelItem.Filters.map(x => filterUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TypicalLevelSettingDataVMUtil'\r\nimport { ControlOutlined } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil';\r\n\r\nexport class TypicalLevelSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      pageItems: observable,\r\n      currentPageKey: observable,\r\n      allTabs: observable\r\n    })\r\n  }\r\n\r\n  ModelItem\r\n\r\n  // Setting\r\n  get SettingVM (){\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Page Items\r\n  pageItems = undefined\r\n  get PageItems() {\r\n    if (!this.pageItems) {\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.get(this.ModelItem.AddPageItem(), this);\r\n    this.PageItems.push(item);\r\n\r\n    var i = this.IsHaveAddCommandTab ? 1 : 0;\r\n    this.AllTabs.splice(this.AllTabs.length - i, 0, item);\r\n\r\n    this.CurrentPageKey = item.id;\r\n\r\n    return item;\r\n  }\r\n\r\n  addCommandTab\r\n  get AddCommandTab() {\r\n    if (!this.addCommandTab) {\r\n      this.addCommandTab = {\r\n        id: 'add',\r\n        TitleElement: <Button className='tls__tabs__add'\r\n          type='text' size='small'\r\n          onClick={this.AddPageItem}>+</Button>\r\n      }\r\n    }\r\n    return this.addCommandTab;\r\n  }\r\n\r\n  IsHaveAddCommandTab = false\r\n\r\n  allTabs = undefined\r\n  get AllTabs() {\r\n    if (!this.allTabs) {\r\n      var obj = [...this.PageItems];\r\n      if (this.IsHaveAddCommandTab) {\r\n        obj.push(this.AddCommandTab);\r\n      }\r\n      this.allTabs = obj;\r\n    }\r\n    return this.allTabs;\r\n  }\r\n\r\n  currentPageKey = undefined\r\n  get CurrentPageKey() {\r\n    if (!this.currentPageKey) {\r\n      this.currentPageKey = this.PageItems[0].id;\r\n    }\r\n    return this.currentPageKey;\r\n  } set CurrentPageKey(v) {\r\n    this.currentPageKey = v;\r\n  }\r\n\r\n  IsModelChangePageKey = false\r\n\r\n  ChangePageKey = (v) => {\r\n    if (this.IsModelChangePageKey) {\r\n      this.IsModelChangePageKey = false; return;\r\n    }\r\n    this.CurrentPageKey = v;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new TypicalLevelSettingDataVM();\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return q.ModelItem.PageItems.map(x => pageItemUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as util from './TypicalLevelSettingVMUtil'\r\n\r\nexport class TypicalLevelSettingVM extends SettingVM {\r\n  get LevelStorageList() {\r\n    return this.ModelItem.LevelStorageList;\r\n  }\r\n\r\n  get FieldFilterStorageList(){\r\n    return this.ModelItem.FieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    this.ModelItem.Save();\r\n  }\r\n}","import * as dataVMUtil from './TypicalLevelSettingDataVMUtil'\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\n\r\nexport const get = (q, project) => {\r\n  if (!q) return undefined;\r\n  \r\n  var qI = new TypicalLevelSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Project = project;\r\n\r\n  // var level_Dict = project.Level_Dict;\r\n  // const getLevelsFunc = () => { \r\n  //   qI.LevelStorageList = level_Dict.Items.map(x => x.Name);\r\n  //   qI.GetLevelStorageList = true;\r\n  // }\r\n  // if (level_Dict.Items){\r\n  //   getLevelsFunc();\r\n  // } else{\r\n  //   level_Dict.OnGetItemsDone_Funcs.push(getLevelsFunc);\r\n  // }\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data, qI);\r\n  }    \r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}","import * as phaseDictVMUtil from '../phase/Phase_DictVMUtil'\r\nimport ProjectVM from \"./ProjectVM\";\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingVMUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n  var qI = new ProjectVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetPhase_DictVM = (q) => {\r\n  var phaseDict = q.ModelItem.Phase_Dict;\r\n  return phaseDictVMUtil.get(phaseDict);\r\n}\r\n\r\nexport const GetTypicalLevelSetting_Func = (model, project) => {\r\n  return typicalLevelUtil.get(model, project);\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() =>\r\n      q.TypicalLevelSetting = GetTypicalLevelSetting_Func(project.TypicalLevelSetting, q));\r\n  }\r\n}\r\n\r\nexport const GetTypicalLevelSetting_ForEdit = (q) => {\r\n  var project = q.ModelItem;\r\n  var tls = project.TypicalLevelSetting_ForEdit;\r\n  if (tls) {\r\n    return GetTypicalLevelSetting_Func(tls, q)\r\n  } else {\r\n    project.OnGetTypicalLevelSetting_Funcs.push(() => {\r\n      q.TypicalLevelSetting_ForEdit = GetTypicalLevelSetting_Func(project.TypicalLevelSetting_ForEdit, q)\r\n    });\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './Project_DictVMUtil'\r\n\r\nexport class Project_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items : observable\r\n    })\r\n  }\r\n\r\n  items= undefined\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.ModelItem.Items = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import * as itemVMUtil from './ProjectVMUtil'\r\nimport { Project_DictVM } from \"./Project_DictVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new Project_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone = (v) => {\r\n    var obj = qI.Items;\r\n    qI.GetItemsDone = true;\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetItems = (dictVM) => {\r\n  var items = dictVM.ModelItem.Items;\r\n  if (!items) return undefined;\r\n  return items.map(x => itemVMUtil.get(x, dictVM));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassResultCompVMUtil'\r\nimport * as multiSelectVMUtil from '../../../../select/MultiSelectVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport { Link } from 'react-router-dom';\r\nimport { Popover } from 'antd';\r\n\r\nexport default class MassResultCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsShowProjectSelect: observable,\r\n      CanHavePhase: observable,\r\n      isHavePhase: observable,\r\n      IsDataPending: observable\r\n    })\r\n  }\r\n\r\n  projects\r\n  get Projects() {\r\n    if (!this.projects) {\r\n      this.projects = this.ModelItem.Projects;\r\n    }\r\n    return this.projects;\r\n  }\r\n  set Projects(v) {\r\n    this.projects = v;\r\n    this.ModelItem.Projects = v;\r\n  }\r\n\r\n  projectVMs\r\n  get ProjectVMs() {\r\n    if (!this.projectVMs) {\r\n      this.projectVMs = util.GetProjectVMs(this);\r\n    }\r\n    return this.projectVMs;\r\n  }\r\n  set ProjectVMs(v) {\r\n    this.projectVMs = v;\r\n    this.Projects = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  projectVMStorageList\r\n  get ProjectVMStorageList() {\r\n    if (!this.projectVMStorageList) {\r\n      this.projectVMStorageList = util.GetProjectVMStorageList(this);\r\n    }\r\n    return this.projectVMStorageList;\r\n  }\r\n  set ProjectVMStorageList(v) {\r\n    this.projectVMStorageList = v;\r\n\r\n    this.projectVMs = util.GetProjectVMs(this);\r\n\r\n    var selectVM = this.ProjectSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.projectVMs;\r\n  }\r\n\r\n  projectSelectOpen\r\n  get ProjectSelectOpen(){\r\n    if (this.projectSelectOpen === undefined){\r\n      this.projectSelectOpen = this.ProjectSelectVM.Open;\r\n    }\r\n    return this.projectSelectOpen;\r\n  }\r\n  set ProjectSelectOpen(v){\r\n    this.projectSelectOpen = v;\r\n    this.ProjectPopoverState.Content = util.GetProjectPopoverStateValue(this);\r\n  }\r\n\r\n  projectPopoverState\r\n  get ProjectPopoverState(){\r\n    if (!this.projectPopoverState){\r\n      this.projectPopoverState = textUtil.get(util.GetProjectPopoverStateValue(this));\r\n    }\r\n    return this.projectPopoverState;\r\n  }\r\n\r\n  projectSelectVM\r\n  get ProjectSelectVM() {\r\n    if (!this.projectSelectVM) {\r\n      var list = this.ProjectVMStorageList ? this.ProjectVMStorageList : [];\r\n      var obj = this.projectSelectVM = multiSelectVMUtil.get(list, this.ProjectVMs);\r\n      obj.Placeholder = 'chọn dự án'\r\n      obj.TitleRender = (item) => <Popover trigger={this.ProjectPopoverState.Content}\r\n        placement=\"topLeft\"\r\n        content={\r\n          <a target='_blank' rel=\"noreferrer\"\r\n            // href={`/#/project/${item._id}`} \r\n            href={item.Url}\r\n            >View project</a>\r\n        }\r\n      >\r\n        {item.DisplayContent}\r\n      </Popover>\r\n\r\n      obj.OnSelectedItemChanged = (v) => this.ProjectVMs = v;\r\n      obj.OnSetOpen = (v) => this.ProjectSelectOpen = v;\r\n    }\r\n    return this.projectSelectVM;\r\n  }\r\n\r\n  IsShowProjectSelect = true\r\n\r\n  phases\r\n  get Phases() {\r\n    if (!this.phases) {\r\n      this.phases = this.ModelItem.Phases;\r\n    }\r\n    return this.phases;\r\n  }\r\n  set Phases(v) {\r\n    this.phases = v;\r\n    this.ModelItem.Phases = v;\r\n  }\r\n\r\n  phaseVMs\r\n  get PhaseVMs() {\r\n    if (!this.phaseVMs) {\r\n      this.phaseVMs = util.GetPhaseVMs(this);\r\n    }\r\n    return this.phaseVMs;\r\n  }\r\n  set PhaseVMs(v) {\r\n    this.phaseVMs = v;\r\n    this.Phases = v.map(x => x.ModelItem);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict() {\r\n    if (!this.massItem_Dict) {\r\n      this.massItem_Dict = this.ModelItem.MassItem_Dict;\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  phaseVMStorageList\r\n  get PhaseVMStorageList() {\r\n    return this.phaseVMStorageList;\r\n  }\r\n  set PhaseVMStorageList(v) {\r\n    this.phaseVMStorageList = v;\r\n\r\n    this.phaseVMs = util.GetPhaseVMs(this);\r\n\r\n    var selectVM = this.PhaseSelectVM;\r\n    selectVM.Items = v;\r\n    selectVM.InitialItems = this.phaseVMs;\r\n  }\r\n\r\n  phaseSelectVM\r\n  get PhaseSelectVM() {\r\n    if (!this.phaseSelectVM) {\r\n      var list = this.PhaseVMStorageList ? this.PhaseVMStorageList : [];\r\n      var obj = this.phaseSelectVM = multiSelectVMUtil.get(list, this.PhaseVMs);\r\n      obj.Placeholder = 'chọn version'\r\n      obj.OnSelectedItemChanged = (v) => this.PhaseVMs = v;\r\n    }\r\n    return this.phaseSelectVM;\r\n  }\r\n\r\n  CanHavePhase = false\r\n\r\n  isHavePhase = undefined\r\n  get IsHavePhase() {\r\n    if (!this.isHavePhase) {\r\n      this.isHavePhase = this.ModelItem.IsHavePhase;\r\n    }\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v) {\r\n    this.isHavePhase = v;\r\n    this.ModelItem.IsHavePhase = v;\r\n  }\r\n\r\n  isShowPhaseSelectVM\r\n  get IsShowPhaseSelectVM() {\r\n    if (!this.isShowPhaseSelectVM) {\r\n      var obj = this.isShowPhaseSelectVM\r\n        = checkboxVMUtil.get(\"So sánh các version\", this.IsHavePhase);\r\n\r\n      obj.onCheckChange = (v) => {\r\n        this.IsHavePhase = v;\r\n      };\r\n    }\r\n    return this.isShowPhaseSelectVM;\r\n  }\r\n\r\n  get MassGroupSetting() {\r\n    return this.ModelItem.MassGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.ModelItem.MassGroupSetting = v;\r\n  }\r\n\r\n  massGroupSettingStorageList = undefined\r\n  get MassGroupSettingStorageList() {\r\n    if (!this.massGroupSettingStorageList) {\r\n      this.massGroupSettingStorageList =\r\n        util.GetMassGroupSettingStorageList(this);\r\n    }\r\n  }\r\n  set MassGroupSettingStorageList(v) {\r\n    this.massGroupSettingStorageList = v;\r\n\r\n    var selectVM = this.MassGroupSettingSelectVM;\r\n    selectVM.Items = v;\r\n  }\r\n\r\n  massGroupSettingSelectVM\r\n  get MassGroupSettingSelectVM() {\r\n    if (!this.massGroupSettingSelectVM) {\r\n      var list = this.MassGroupSettingStorageList ?\r\n        this.MassGroupSettingStorageList : [];\r\n      var obj = this.massGroupSettingSelectVM =\r\n        selectVMUtil.get(list);\r\n\r\n      obj.TitleRender = (item) => item.DisplayContent\r\n\r\n      obj.CanClear = true;\r\n      obj.Placeholder = 'chọn bộ set khối lượng'\r\n      obj.OnSelectedItemChanged = (v) => this.MassGroupSetting = v;\r\n    }\r\n    return this.massGroupSettingSelectVM;\r\n  }\r\n\r\n  IsDataPending = false;\r\n\r\n  get LoadingSpinTip() {\r\n    return `loading data ... (${(this.HandledRatio * 100).toFixed(1)}%)`;\r\n  }\r\n\r\n  loadingSpinTipVM\r\n  get LoadingSpinTipVM() {\r\n    if (!this.loadingSpinTipVM) {\r\n      this.loadingSpinTipVM = textUtil.get(this.LoadingSpinTip);\r\n    }\r\n    return this.loadingSpinTipVM;\r\n  }\r\n\r\n  handledRatio = 0\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  }\r\n  set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.LoadingSpinTipVM.Content = this.LoadingSpinTip;\r\n  }\r\n\r\n  // function\r\n  GetMassData = () => {\r\n    this.IsDataPending = true;\r\n    this.HandledRatio = 0;\r\n    this.ModelItem.GetMassData();\r\n  }\r\n}","import { message } from \"antd\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport MassResultCompVM from \"./MassResultCompVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q, isfetchProjects = true) => {\r\n  var qI = new MassResultCompVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.ViewItem = qI;\r\n\r\n  if (isfetchProjects) {\r\n    pmDataVM().Project_DictVM.OnGetItemsDone = (v) => {\r\n      qI.ProjectVMStorageList = GetProjectVMStorageList(qI);\r\n    }\r\n  }\r\n\r\n  q.OnGetItemsDone_Funcs.push(() => {\r\n    message.success('get mass data successfully');\r\n  })\r\n\r\n  var massTable = q.MassItem_Dict.MassTable;\r\n  massTable.OnIsUpdateDataDone_Funcs.push(() => {\r\n    qI.IsDataPending = false;\r\n  })\r\n  massTable.OnSetHandledRatio_Funcs.push((v) => {\r\n    qI.HandledRatio = v;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetProjectVMStorageList = (q) => {\r\n  return pmDataVM().Project_DictVM.Items;\r\n}\r\n\r\nexport const GetProjectVMs = (q) => {\r\n  var storageList = q.ProjectVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var projects = q.Projects;\r\n  projects.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetPhaseVMs = (q) => {\r\n  var storageList = q.PhaseVMStorageList;\r\n  if (!storageList) return [];\r\n\r\n  var list = [];\r\n\r\n  var phases = q.Phases;\r\n  phases.forEach(x => {\r\n    var index = storageList.findIndex(y => y.ModelItem === x);\r\n    if (index !== -1) {\r\n      list.push(storageList[index]);\r\n    }\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetMassGroupSettingStorageList = (q) => {\r\n  var dict = pmData().MassGroupSetting_Dict;\r\n  var items = dict.Items;\r\n  if (!items){\r\n    dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.MassGroupSettingStorageList = dict.Items;\r\n    })\r\n  }\r\n  return items;\r\n}\r\n\r\n\r\nexport const GetProjectPopoverStateValue = (q) => {\r\n  return q.ProjectSelectOpen ? 'none' : 'hover';\r\n}","export const _default = \"default\";\r\nexport const edit = \"edit\";","import * as util from './RenderItemUtil'\r\n\r\nexport default class RenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport RenderItem from \"./RenderItem\"\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport TextView from \"../text/TextView\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new RenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (val, item, dataIndex, cell, row) => {\r\n        return cell.ValueVM.Content;\r\n      };\r\n    case rs.edit:\r\n      return (value, item, dataIndex, cell, row) => {\r\n        if (!dataIndex) return value;\r\n\r\n        var inputVM = cell.ValueVM;\r\n\r\n        var length = dataIndex.length;\r\n        var obj = item;\r\n        dataIndex.filter((x, i) => i < length - 1)\r\n          .forEach((x) => obj = obj[x]);\r\n\r\n        inputVM.onSetContent = (v) => {\r\n          obj[dataIndex[length - 1]] = v;\r\n        }\r\n        return <InputView store={inputVM} />\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './RenderItemUtil'\r\n\r\nexport default class Render_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","import * as util from './TitleRenderItemUtil'\r\n\r\nexport default class TitleRenderItem {\r\n  render\r\n  get Render(){\r\n    if (!this.render){\r\n      this.render = util.GetRender(this);\r\n    }\r\n    return this.render;\r\n  }\r\n  set Render(v){\r\n    this.render = v;\r\n  }\r\n}","import InputView from \"../input/InputView\";\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport TitleRenderItem from \"./TitleRenderItem\";\r\nimport { Button } from \"antd\";\r\n\r\nexport const get = (state, render) => {\r\n  var qI = new TitleRenderItem();\r\n  qI.State = state;\r\n  qI.Render = render;\r\n  return qI;\r\n}\r\n\r\nexport const GetRender = (q) => {\r\n  switch (q.State) {\r\n    case rs._default:\r\n      return (title, column, table) => {\r\n        return <>\r\n          <div className='column__title__wrapper'>\r\n            {title}\r\n            {table.CanHandleColumn &&  column.IsShow_MoveCommand ?\r\n              <div className='column__title__tool'>\r\n                {table.CanEditColumn ?\r\n                  <Button type='primary' size='small'\r\n                    style={{ backgroundColor: '#faad14', border: 'none' }}\r\n                    onClick={column.Edit}>e</Button> : ''}\r\n                {table.CanDeleteColumn ? <Button type='primary' danger size='small'\r\n                  onClick={column.Delete}>x</Button> : ''}\r\n              </div>\r\n              : ''}\r\n          </div>\r\n        </>\r\n      };\r\n    case rs.edit:\r\n      return (title, column, table) => {\r\n        return <>\r\n          <div className='column__title__wrapper'>\r\n            {column.InputElement}\r\n            <Button type='primary' size='small'\r\n              onClick={column.OK}>ok</Button>\r\n          </div>\r\n        </>\r\n      };\r\n    default:\r\n      return undefined;\r\n  }\r\n}","import * as renderUtil from './TitleRenderItemUtil'\r\n\r\nexport default class TitleRender_Dict {\r\n  Items = []\r\n\r\n  GetRender = (state) => {\r\n    var list = this.Items;\r\n    var index = list.findIndex(x => x.State === state);\r\n    if (index === -1){\r\n      var item = renderUtil.get(state);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    return list[index];\r\n  }\r\n}","export const select = 'select'\r\nexport const input = 'input'","import TableColumn from \"./TableColumn\"\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport { Button } from \"antd\";\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as it from './TableColumn_InputType'\r\n\r\n// Instance\r\nexport const get = (title, dataIndex, renders, table) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n\r\n  if (Array.isArray(dataIndex)) {\r\n    qI.DataIndex = dataIndex;\r\n  } else {\r\n    qI.DataIndex = [dataIndex];\r\n  }\r\n\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n  var dict = qI.Render_Dict;\r\n  if (renders) {\r\n    renders.forEach(x => {\r\n      dict.GetRender(x.State).Render = x.Render\r\n    });\r\n  }\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetByTitle = (title, table) => {\r\n  var qI = new TableColumn();\r\n  qI.Title = title;\r\n  qI.DataIndex = [title];\r\n  qI.Key = genUtil.randomId();\r\n  qI.Table = table;\r\n\r\n\r\n  qI.OnSetTitleOK_Funcs.push(() => {\r\n    qI.DataIndex = [qI.Title];\r\n    table.Update();\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetActionColumn = (table) => {\r\n  var title = undefined;\r\n\r\n  var renders = [\r\n    renderUtil.get(rs._default, (val, item, dataIndex, cell, row) => {\r\n      var editElem = '';\r\n      if (table.CanHandleItem && table.CanEditItem) {\r\n        var edit = () => row.Edit();\r\n        editElem = <Button type='primary' size='small'\r\n          style={{ backgroundColor: '#faad14', border: 'none' }}\r\n          onClick={edit}>edit</Button>\r\n      }\r\n\r\n      var delElem = '';\r\n      if (table.CanHandleItem && table.CanDeleteItem) {\r\n        var del = () => table.DeleteItem(item, row);\r\n\r\n        delElem = <Button type='primary' danger size='small'\r\n          onClick={del}>x</Button>\r\n      }\r\n      return <>\r\n        {editElem}{delElem}\r\n      </>\r\n    }),\r\n    renderUtil.get(rs.edit, (val, item, dataIndex, cell, row) => {\r\n      var ok = () => row.OK();\r\n      return <Button type='primary' size='small'\r\n        onClick={ok}>ok</Button>\r\n    })\r\n  ]\r\n\r\n  var col = get(title, null, renders, table);\r\n\r\n  // Đính thông tin là Action Column\r\n  col.IsAction = true;\r\n\r\n  col.TitleRender_Dict.GetRender(rs._default).Render = () =>\r\n    <div style={{ display: 'flex' }}>\r\n      <Button type='primary' size='small'\r\n        onClick={table.AddColumn}>\r\n        (+) c\r\n        </Button>\r\n      {table.CanHandleItem && table.CanAddItem ?\r\n        <Button type='primary' size='small'\r\n          onClick={table.AddItem}>\r\n          (+) r\r\n        </Button>\r\n        : ''}\r\n    </div>\r\n\r\n  return col;\r\n}\r\n\r\n// Property\r\nexport const GetTitle = (q) => {\r\n  switch (q.InputType) {\r\n    case it.input:\r\n      return undefined;\r\n    case it.select:\r\n      return q.AllNames[0];\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport Render_Dict from './Render_Dict';\r\nimport TitleRender_Dict from './TitleRender_Dict';\r\nimport * as it from './TableColumn_InputType'\r\nimport * as selectUtil from '../select/SelectVMUtil';\r\nimport * as textUtil from '../text/TextVMUtil';\r\nimport InputView from '../input/InputView';\r\nimport SelectView from '../select/SelectView';\r\nimport { PMData } from '../main/single/model/PMData';\r\nimport * as util from './TableColumnUtil'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport default class TableColumn {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      title: observable,\r\n      TitleRenderState: observable,\r\n      inputType: observable,\r\n      IsShow_MoveCommand: observable\r\n    })\r\n  }\r\n\r\n  get Index() {\r\n    return this.CurrentList.indexOf(this);\r\n  }\r\n\r\n  get CurrentList() {\r\n    return this.Table.Columns;\r\n  } set CurrentList(v) {\r\n    this.Table.Columns = v;\r\n  }\r\n\r\n  TitleRenderState = rs._default\r\n  RenderState = rs._default;\r\n\r\n  title = undefined\r\n  get Title() {\r\n    if (!this.title) {\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  } set Title(v) {\r\n    this.title = v;\r\n  }\r\n\r\n  OnSetTitleOK_Funcs = []\r\n\r\n  titleRender_Dict\r\n  get TitleRender_Dict() {\r\n    if (!this.titleRender_Dict) {\r\n      this.titleRender_Dict = new TitleRender_Dict();\r\n    }\r\n    return this.titleRender_Dict;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = new Render_Dict();\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n  set Render_Dict(v) {\r\n    this.render_Dict = v;\r\n  }\r\n\r\n  Edit = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleColumn && table.CanEditColumn) {\r\n      this.TitleRenderState = rs.edit;\r\n    }\r\n  }\r\n\r\n  OK = () => {\r\n    this.TitleRenderState = rs._default;\r\n    this.OnSetTitleOK_Funcs.forEach(x => x(this));\r\n  }\r\n\r\n  Delete = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleColumn && table.CanDeleteColumn) {\r\n      table.Columns.splice(this.Index, 1);\r\n      table.Update();\r\n    }\r\n  }\r\n\r\n  TitleRender = () => {\r\n    var title = this.Title;\r\n    var table = this.Table;\r\n\r\n    var render = this.TitleRender_Dict.GetRender(this.TitleRenderState);\r\n    return render.Render(title, this, table);\r\n  }\r\n\r\n  inputType = undefined\r\n  get InputType() {\r\n    if (!this.inputType) {\r\n      this.inputType = this.Table.Column_InputType\r\n    }\r\n    return this.inputType;\r\n  }\r\n\r\n  // Thuộc tính sử dụng khi select đầu mục cột\r\n  get AllNames() {\r\n    return this.Table.AllColumnNames\r\n  }\r\n\r\n  inputVM\r\n  get InputVM() {\r\n    if (!this.inputVM) {\r\n      var obj = this.inputVM = textUtil.get(this.Title);\r\n      obj.onSetContent = (v) => this.Title = v;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  selectVM\r\n  get SelectVM() {\r\n    if (!this.selectVM) {\r\n      var obj = this.selectVM = selectUtil.get(this.AllNames, this.Title);\r\n      obj.OnSelectedItemChanged = (v) => this.Title = v;\r\n    }\r\n    return this.selectVM;\r\n  }\r\n\r\n  get InputElement() {\r\n    switch (this.InputType) {\r\n      case it.input:\r\n        return <InputView store={this.InputVM} />\r\n      case it.select:\r\n        var width = this.Table.Column_Title_SelectWidth\r\n        return <div style={{width}}>\r\n          <SelectView store={this.SelectVM} />\r\n        </div>\r\n    }\r\n  }\r\n\r\n  IsShow_MoveCommand = false\r\n\r\n  get CanShow_MoveCommand() {\r\n    return this.Table.CanShow_MoveCommand;\r\n  }\r\n\r\n  Show_MoveCommand = () => {\r\n    this.IsShow_MoveCommand = true;\r\n  }\r\n\r\n  Collapse_MoveCommand = () => {\r\n    this.IsShow_MoveCommand = false;\r\n  }\r\n\r\n  MoveLeft = () => {\r\n    var index = this.Index;\r\n    if (index === 0) return;\r\n\r\n    var list = this.CurrentList;\r\n    var l1 = list.filter(x => !x.IsActive);\r\n    if (l1.length === 1) return;\r\n\r\n    genUtil.MoveItem(list, index, index - 1);\r\n    this.Table.Update();\r\n  }\r\n\r\n  MoveRight = () => {\r\n    var index = this.Index;\r\n\r\n    var list = this.CurrentList;\r\n    var l1 = list.filter(x => !x.IsActive);\r\n\r\n    if (l1.length === 1 || index === l1.length) {\r\n      return\r\n    }\r\n\r\n    genUtil.MoveItem(list, index, index + 1);\r\n    this.Table.Update();\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './TableRowUtil'\r\nimport * as rs from './RenderState'\r\nimport * as genUtil from '../../util/generalUtil'\r\n\r\nexport default class TableRow {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      Item: observable\r\n    })\r\n  }\r\n\r\n  key\r\n  get Key() {\r\n    if (!this.key) {\r\n      this.key = this.Item._id ? this.Item._id : this.Item.id;\r\n      if (!this.key) {\r\n        this.key = genUtil.randomId();\r\n      }\r\n    }\r\n    return this.key;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Table.Rows.indexOf(this);\r\n  }\r\n\r\n  Item = undefined;\r\n\r\n  cells\r\n  get Cells() {\r\n    if (!this.cells) {\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  Edit = () => {\r\n    var table = this.Table;\r\n    if (table.CanHandleItem && table.CanEditItem) {\r\n      this.Cells.forEach(x => x.RenderState = rs.edit);\r\n    }\r\n  }\r\n\r\n  OK = () => {\r\n    this.Cells.forEach(x => x.RenderState = rs._default);\r\n    this.Table.EditItem(this.Item);\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as rs from './RenderState'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport * as util from './TableCellUtil'\r\n\r\nexport default class TableCell {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      renderState: observable\r\n    })\r\n  }\r\n\r\n  get Key() {\r\n    return `${this.Column.Key}_${this.Row.Key}`;\r\n  }\r\n\r\n  get Item() {\r\n    return this.Row.Item;\r\n  }\r\n\r\n  get ColumnIndex() {\r\n    return this.Row.Cells.indexOf(this);\r\n  }\r\n\r\n  get RowIndex() {\r\n    return this.Row.Index;\r\n  }\r\n\r\n  renderState = undefined\r\n  get RenderState() {\r\n    if (!this.renderState) {\r\n      this.renderState = this.Column.RenderState;\r\n    }\r\n    return this.renderState;\r\n  }\r\n  set RenderState(v) {\r\n    this.renderState = v;\r\n  }\r\n\r\n  valueVM\r\n  get ValueVM(){\r\n    if (!this.valueVM){\r\n      var val = util.GetValue(this);\r\n      this.valueVM = textUtil.get(val);\r\n    }\r\n    return this.valueVM;\r\n  }\r\n\r\n  render_Dict\r\n  get Render_Dict() {\r\n    if (!this.render_Dict) {\r\n      this.render_Dict = this.Column.Render_Dict;\r\n    }\r\n    return this.render_Dict;\r\n  }\r\n\r\n  get DataIndex() {\r\n    return this.Column.DataIndex;\r\n  }\r\n\r\n  Render = () => {\r\n    var dataIndex = this.DataIndex;\r\n    var item = this.Item;\r\n    var value  = util.GetValue(this);\r\n\r\n    var render = this.Render_Dict.GetRender(this.RenderState);\r\n    return render.Render(value, item, dataIndex, this, this.Row);\r\n  }\r\n}","import { PMData } from \"../main/single/model/PMData\";\r\nimport TableCell from \"./TableCell\"\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const get = (row, col) => {\r\n  var qI = new TableCell();\r\n  qI.Row = row;\r\n  qI.Column = col;\r\n  qI.Table = row.Table;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetValue = (q) => {\r\n  var dataIndex = q.DataIndex;\r\n  var item = q.Item;\r\n\r\n  if (q.Table.Override_Get_CellValue){\r\n    var val = q.Table.Override_Get_CellValue(item, q, q.Row, q.Column);\r\n    return val;\r\n  }\r\n\r\n  var value = undefined;\r\n\r\n  if (dataIndex) {\r\n    value = item;\r\n    dataIndex.forEach(x => {\r\n      value = value[x]\r\n    })\r\n  }\r\n\r\n  return value;\r\n}","import TableRow from \"./TableRow\"\r\nimport * as cellUtil from './TableCellUtil'\r\nimport { PMData } from \"../main/single/model/PMData\";\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport const get = (item, table) => {\r\n  var qI = new TableRow();\r\n  qI.Item = item;\r\n  qI.Table = table;\r\n  return qI;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var columns = q.Table.Columns;\r\n  return columns.map(x => cellUtil.get(q, x));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport TableColumn from './TableColumn';\r\nimport * as colUtil from './TableColumnUtil'\r\nimport * as renderUtil from './RenderItemUtil'\r\nimport * as rs from './RenderState'\r\nimport * as util from './TableVMUtil'\r\nimport * as textUtil from '../text/TextVMUtil'\r\nimport InputView from '../input/InputView'\r\nimport { Button } from 'antd';\r\nimport * as genUtil from '../../util/generalUtil'\r\nimport * as rowUtil from './TableRowUtil'\r\nimport * as cit from './TableColumn_InputType'\r\n\r\nexport default class TableVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      columns: observable,\r\n      dataSource: observable,\r\n      rows: observable,\r\n\r\n      AllColumnNames : observable,\r\n      Column_InputType : observable,\r\n\r\n      CanHandleItem: observable,\r\n      CanAddItem: observable,\r\n      CanDeleteItem: observable,\r\n      CanEditItem: observable,\r\n\r\n      CanHandleItem: observable,\r\n      CanAddItem: observable,\r\n      CanDeleteItem: observable,\r\n      CanEditItem: observable,\r\n      IsShowActionColumn: observable,\r\n    })\r\n  }\r\n\r\n  // Có thể xử lý dữ liệu 1 dòng (bao gồm Xóa, Thêm, Sửa)\r\n  CanHandleItem = true\r\n\r\n  // Thêm 1 dòng\r\n  CanAddItem = true\r\n\r\n  // Xóa 1 dòng\r\n  CanDeleteItem = true\r\n\r\n  // Dùng để chỉnh sửa thông tin 1 Dòng\r\n  CanEditItem = true\r\n\r\n  // Có thể xử lý dữ liệu 1 cột (bao gồm Xóa, Thêm, Sửa)\r\n  CanHandleColumn = true\r\n\r\n  // Thêm 1 cột\r\n  CanAddColumn = true\r\n\r\n  // Xóa 1 cột\r\n  CanDeleteColumn = true\r\n\r\n  // Chỉnh sửa thông tin 1 cột\r\n  CanEditColumn = true\r\n\r\n  IsShowActionColumn = true\r\n\r\n  columns = undefined\r\n  get Columns() {\r\n    if (!this.columns) {\r\n      this.columns = [\r\n        colUtil.get('Tên cấu kiện', 'ElementName', null, this),\r\n        colUtil.get('Đường kính', 'Diameter', null, this),\r\n      ];\r\n\r\n      if (this.IsShowActionColumn) {\r\n        this.columns.push(colUtil.GetActionColumn(this));\r\n      }\r\n    }\r\n    return this.columns;\r\n  }\r\n  set Columns(v) {\r\n    this.columns = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  dataSource = undefined\r\n  get DataSource() {\r\n    if (!this.dataSource) {\r\n      this.dataSource = [ ]\r\n    }\r\n    return this.dataSource;\r\n  }\r\n  set DataSource(v) {\r\n    this.dataSource = v;\r\n    this.Rows = undefined;\r\n  }\r\n\r\n  rows = undefined\r\n  get Rows() {\r\n    if (!this.rows) {\r\n      this.rows = util.GetRows(this);\r\n    }\r\n    return this.rows;\r\n  }\r\n  set Rows(v) {\r\n    this.rows = v;\r\n  }\r\n\r\n  AddItem = () => {\r\n    if (this.CanHandleItem && this.CanAddItem) {\r\n      var item = undefined\r\n      if (this.OnGetItemForAdd) {\r\n        item = this.OnGetItemForAdd();\r\n      } else {\r\n        item = {\r\n          Key: genUtil.randomId(),\r\n          IsTypeNotDefined: true\r\n        };\r\n      }\r\n      this.DataSource.push(item);\r\n\r\n      var row = rowUtil.get(item, this);\r\n      this.Rows.push(row);\r\n      row.Edit();\r\n    }\r\n  }\r\n\r\n  DeleteItem = (item, row) => {\r\n    if (this.CanHandleItem && this.CanDeleteItem) {\r\n      var list = this.DataSource;\r\n      var index = list.indexOf(item);\r\n      list.splice(index, 1);\r\n      this.Rows.splice(index, 1);\r\n\r\n      if (this.OnDeleteItem) {\r\n        this.OnDeleteItem(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  EditItem = (item) => {\r\n    if (this.CanHandleItem && this.CanEditItem) {\r\n      if (item.IsTypeNotDefined) {\r\n        var index = this.DataSource.findIndex(x => x.Key === item.Key);\r\n        item = this.DataSource[index] = { ...item };\r\n      }\r\n\r\n      if (this.OnEditItem) {\r\n        this.OnEditItem(item);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddColumn = () => {\r\n    if (this.CanHandleColumn && this.CanDeleteColumn) {\r\n      var col = colUtil.GetByTitle(null, this);\r\n\r\n      var actionCol_Index = this.Columns.findIndex(x => x.IsAction);\r\n      if (actionCol_Index !== -1){\r\n        this.Columns.splice(actionCol_Index, 0, col);  \r\n      } else {\r\n        this.Columns.push(col);\r\n      }\r\n\r\n      col.Edit();\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    this.Rows = null;\r\n  }\r\n\r\n  // Ghi đè cách truy xuất giá trị 1 cell theo Item, Cell, Row, Col\r\n  Override_Get_CellValue\r\n\r\n  // Khi hiệu chỉnh đầu mục cột,\r\n  // sử dụng 2 cách để hiểu chỉnh: select và input\r\n  Column_InputType = cit.input\r\n  AllColumnNames = []\r\n\r\n  // Có thể di chuyển vị trí các cột hay không\r\n  CanShow_MoveCommand = true\r\n\r\n  // Thiết lập sẵn bề rỗng của \r\n  Column_Title_SelectWidth\r\n}","import * as rowUtil from './TableRowUtil'\r\nimport * as colUtil from './TableColumnUtil'\r\nimport TableVM from './TableVM';\r\n\r\n// Instance\r\nexport const get = (data) => {\r\n  var qI = new TableVM();\r\n  qI.Columns = data.columns.map(x => colUtil.GetByTitle(x, qI));\r\n  qI.DataSource = data.dataSource;\r\n  return qI;\r\n}\r\n\r\nexport const GetByColumn_Data = (colNames, data, isHaveAction = true) => {\r\n  var qI = new TableVM();\r\n  \r\n  var cols = colNames.map(x => colUtil.GetByTitle(x, qI));\r\n  if (isHaveAction){\r\n    cols.push(colUtil.GetActionColumn(qI));\r\n  }\r\n\r\n  qI.Columns = cols;\r\n\r\n  qI.DataSource = data;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetRows = (q) => {\r\n  return q.DataSource.map(x => rowUtil.get(x, q));\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportDataVMUtil'\r\n\r\nexport class WorkItemExportDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      \r\n    })\r\n  }\r\n\r\n\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\nimport * as checkboxUtil from '../../../../checkbox/CheckboxVMUtil'\r\n\r\nexport class WorkItemExportSettingVM extends SettingVM {\r\n  IsCategoryChecked = true\r\n\r\n  categoryCheckboxVM\r\n  get CategoryCheckboxVM(){\r\n    if (!this.categoryCheckboxVM){\r\n      debugger\r\n      var obj =this.categoryCheckboxVM = \r\n        checkboxUtil.get(undefined, this.IsCategoryChecked)\r\n    }\r\n    return this.categoryCheckboxVM;\r\n  }\r\n}","import * as dataVMUtil from './WorkItemExportDataVMUtil'\r\nimport { WorkItemExportSettingVM } from './WorkItemExportSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new WorkItemExportSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { WorkItemExportDataVM } from './WorkItemExportDataVM';\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport class WorkItemExportSetting extends Setting {\r\n  \r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './WorkItemExportSetting_DictVMUtil'\r\nimport * as itemUtil from './WorkItemExportSettingVMUtil';\r\nimport { WorkItemExportSetting } from './WorkItemExportSetting';\r\n\r\nexport class WorkItemExportSetting_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    if (!this.items) {\r\n      this.items = [\r\n        itemUtil.get(new WorkItemExportSetting())\r\n      ]\r\n    }\r\n    return this.items;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM) {\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","import TableVM from \"../../../../table/TableVM\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport CheckboxView from '../../../../checkbox/CheckboxView'\r\nimport { WorkItemExportSettingVM } from \"./WorkItemExportSettingVM\";\r\n\r\nexport const get = (q) => {\r\n  var qI = new WorkItemExportSetting_DictVM();\r\n  qI.ModelItem = q;\r\n\r\n  q.OnGetItemsDone_Funcs.push((v) => {\r\n    var obj = qI.Items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n\r\n  var nameCol = colUtil.get('Tên thiết lập', ['Name'], null, qI);\r\n  var isCateCol = colUtil.get('Category', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      debugger\r\n      var checkBoxVM = item.CategoryCheckboxVM;\r\n      return <CheckboxView store={item.CategoryCheckboxVM}/>\r\n    })\r\n  ], qI);\r\n  var isSubWorkItemCol = colUtil.get('Hạng mục phụ', null, [\r\n    renderUtil.get(rs._default, (val, item) => {\r\n      return <CheckboxView />\r\n    })\r\n  ], qI);\r\n\r\n  qI.Columns = [\r\n    nameCol, isCateCol, isSubWorkItemCol,\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return new WorkItemExportSettingVM();\r\n  }\r\n  \r\n  return qI;\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../model/PMData';\r\n\r\nimport * as workpackage_DictVMUtil from '../../entity/workpackage/Workpackage_DictVMUtil'\r\nimport * as elementFilterSetting_DictVMUtil from \r\n  '../../entity/setting/elementFilter/ElementFilterSetting_DictVMUtil'\r\nimport * as massExportSetting_DictVMUtil from \r\n  '../../entity/setting/massExport/MassExportSetting_DictVMUtil'\r\nimport * as massGroupSetting_DictVMUtil from \r\n  '../../entity/setting/massGroup/MassGroupSetting_DictVMUtil'\r\nimport * as project_DictVMUtil from '../../entity/project/Project_DictVMUtil'\r\n\r\nimport * as massResultCompVMUtil from '../../entity/mass/result/MassResultCompVMUtil'\r\n\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\n\r\nimport * as wieDictVMUtil from \r\n  '../../entity/setting/workitemexport/WorkItemExportSetting_DictVMUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport const GetWorkpackage_DictVM = (data) => {\r\n  return workpackage_DictVMUtil.get(pmData().Workpackage_Dict);\r\n}\r\n\r\nexport const GetElementFilterSetting_DictVM = (data) => {\r\n  return elementFilterSetting_DictVMUtil.get\r\n    (pmData().ElementFilterSetting_Dict);\r\n}\r\n\r\nexport const GetMassExportSetting_DictVM = (data) => {\r\n  return massExportSetting_DictVMUtil.get\r\n    (pmData().MassExportSetting_Dict);\r\n}\r\n\r\nexport const GetMassGroupSetting_DictVM = (data) => {\r\n  return massGroupSetting_DictVMUtil.get\r\n    (pmData().MassGroupSetting_Dict);\r\n}\r\n\r\nexport const GetProject_DictVM = (data) => {\r\n  return project_DictVMUtil.get\r\n    (pmData().Project_Dict);\r\n}\r\n\r\nexport const GetMassResultCompVM= (data) => {\r\n  return massResultCompVMUtil.get\r\n  (pmData().MassResultComp);\r\n}\r\n\r\nexport const GetWorkItemExportSetting_Dict = (data) => {\r\n  return wieDictVMUtil.get(pmData().WorkItemExportSetting_Dict);\r\n}","export const mass = 'mass'\r\nexport const typicallevel = 'typicallevel'\r\nexport const phase = 'phase'\r\nexport const inputdata = 'inputdata'\r\nexport const mepsetting = 'mepsetting'\r\nexport const document = 'document'","import { makeObservable, observable, action } from 'mobx';\r\nimport { pmData } from '../../entity/filter/EntFilterUtil';\r\nimport { PMData } from '../model/PMData';\r\nimport * as util from './PMDataVMUtil'\r\nimport * as pvt from '../../entity/project/ProjectViewType'\r\n\r\nexport class PMDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      isDebug: observable,\r\n      projectViewType : observable,\r\n      currentProject : observable,\r\n      main_Classname : observable\r\n    })\r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMDataVM();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get pmData(){\r\n    return PMData.Instance;\r\n  }\r\n\r\n  workpackage_DictVM\r\n  get Workpackage_DictVM() {\r\n    if (!this.workpackage_DictVM){\r\n      this.workpackage_DictVM = util.GetWorkpackage_DictVM();\r\n    }\r\n    return this.workpackage_DictVM;\r\n  }\r\n\r\n  elementFilterSetting_DictVM\r\n  get ElementFilterSetting_DictVM() {\r\n    if (!this.elementFilterSetting_DictVM){\r\n      this.elementFilterSetting_DictVM = util.GetElementFilterSetting_DictVM();\r\n    }\r\n    return this.elementFilterSetting_DictVM;\r\n  }\r\n\r\n  massExportSetting_DictVM\r\n  get MassExportSetting_DictVM() {\r\n    if (!this.massExportSetting_DictVM){\r\n      this.massExportSetting_DictVM = util.GetMassExportSetting_DictVM();\r\n    }\r\n    return this.massExportSetting_DictVM;\r\n  }\r\n\r\n  massGroupSetting_DictVM\r\n  get MassGroupSetting_DictVM() {\r\n    if (!this.massGroupSetting_DictVM){\r\n      this.massGroupSetting_DictVM = util.GetMassGroupSetting_DictVM();\r\n    }\r\n    return this.massGroupSetting_DictVM;\r\n  }\r\n\r\n  project_DictVM\r\n  get Project_DictVM() {\r\n    if (!this.project_DictVM){\r\n      this.project_DictVM = util.GetProject_DictVM();\r\n    }\r\n    return this.project_DictVM;\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM(){\r\n    if (!this.massResultCompVM){\r\n      this.massResultCompVM = util.GetMassResultCompVM();\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n  set MassResultCompVM(v) {\r\n    this.massResultCompVM = v;\r\n    if (!v)\r\n    {\r\n      this.pmData.MassResultComp = v;\r\n    }\r\n    else{\r\n      this.pmData.MassResultComp = v.ModelItem;\r\n    }\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = this.pmData.FilterValueTypes;\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = this.pmData.StringFilterTypes;\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.pmData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = this.pmData.ValueRetrieveTypes\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = this.pmData.ParameterNames;\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = this.pmData.MassPropertyNames;\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = this.pmData.MassTypes;\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = \r\n        util.GetWorkItemExportSetting_Dict(this);\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n\r\n  isDebug = undefined\r\n  get IsDebug(){\r\n    if (this.isDebug === undefined){\r\n      this.isDebug = this.pmData.IsDebug;\r\n    }\r\n    return this.isDebug;\r\n  } set IsDebug(v){\r\n    this.isDebug = this.pmData.IsDebug = v;\r\n  }\r\n\r\n  OnSet_ProjectViewType_Func_Dict = []\r\n\r\n  projectViewType = pvt.mass\r\n  //projectViewType = pvt.document\r\n  get ProjectViewType(){\r\n    return this.projectViewType;\r\n  } set ProjectViewType(v){\r\n    this.projectViewType = v;\r\n    this.OnSet_ProjectViewType_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  OnSet_CurrentProject_Func_Dict = []\r\n\r\n  currentProject = undefined\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n    this.OnSet_CurrentProject_Func_Dict.forEach(x => x.Value());\r\n\r\n    this.pmData.CurrentProject = v?.ModelItem\r\n  }\r\n\r\n  get UpdatedDate(){\r\n    return this.pmData.UpdatedDate;\r\n  }\r\n\r\n  // Classname scale bề rộng dự án cho phù hợp\r\n  // View BoQ : 800px\r\n  // View Detail : 100%\r\n  main_Classname = 'projectcomp__main'\r\n  get Main_Classname(){\r\n    return this.main_Classname;\r\n  } set Main_Classname(v){\r\n    this.main_Classname = v;\r\n  }\r\n}","import * as util from './MGS_FieldVMUtil'\r\nimport * as selectVMUtil from '../../../../../select/SelectVMUtil'\r\n\r\nexport default class MGS_FieldVM {\r\n  get Index() {\r\n    return this.Dict.FieldVMs.indexOf(this);\r\n  }\r\n\r\n  get Fields(){\r\n    return this.Dict.ModelItem.Fields;\r\n  }\r\n\r\n  get Field(){\r\n    return this.Fields[this.Index];\r\n  }\r\n  set Field(v){\r\n    this.Fields[this.Index] = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return util.GetFieldStorageList();\r\n  }\r\n\r\n  fieldSelectVM\r\n  get FieldSelectVM(){\r\n    if (!this.fieldSelectVM){\r\n      var obj = this.fieldSelectVM = selectVMUtil.get(this.FieldStorageList, this.Field);\r\n      obj.OnSelectedItemChanged = (v) => this.Field = v;\r\n    }\r\n    return this.fieldSelectVM;\r\n  }\r\n\r\n  Delete = () => {\r\n    var index = this.Index;\r\n    this.Fields.splice(index, 1);\r\n    \r\n    var list = this.Dict.FieldVMs;\r\n    list.splice(index, 1);\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldSelectVM.InitialItem = v.Field;\r\n  }\r\n}","import { PMDataVM } from \"../../../../single/form/PMDataVM\";\r\nimport MGS_FieldVM from \"./MGS_FieldVM\"\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MGS_FieldVM();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldStorageList = () => {\r\n  return pmDataVM().MassPropertyNames;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as filterVMUtil from '../../filter/EntFilterVMUtil'\r\nimport * as checkboxVMUtil from '../../../../checkbox/CheckboxVMUtil'\r\nimport * as selectVMUtil from '../../../../select/SelectVMUtil'\r\nimport * as util from './MassGroupSettingDataVMUtil'\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport default class MassGroupSettingDataVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      fieldVMs : observable\r\n    })\r\n  }\r\n\r\n\r\n  ModelItem\r\n\r\n  fieldVMs = undefined\r\n  get FieldVMs(){\r\n    if (!this.fieldVMs){\r\n      this.fieldVMs = util.GetFieldVMs(this);\r\n    }\r\n    return this.fieldVMs;\r\n  }\r\n  set FieldVMs(v){\r\n    var list = this.fieldVMs;\r\n    var modelList = this.ModelItem.Fields;\r\n\r\n    var oldCount = list.length;\r\n    var newCount = v.length;\r\n\r\n    list.forEach((x, i) => {\r\n      if (i >= newCount) return;\r\n      x.SetData(v[i]);\r\n    });\r\n\r\n    var delta = Math.abs(oldCount - newCount);\r\n    if (oldCount > newCount){\r\n      list.splice(newCount, delta);\r\n      modelList.splice(newCount, delta);\r\n    }\r\n    else if (oldCount < newCount){\r\n      for (var i = 0; i < delta; i++) {\r\n        var originItemVM = v[oldCount + i];\r\n\r\n        var item = originItemVM.Field;\r\n        modelList.push(item);\r\n\r\n        var itemVM = fieldVMUtil.get(item,this);\r\n        list.push(itemVM);\r\n      }\r\n    }\r\n  }\r\n\r\n  AddNewFieldVM = () => {\r\n    var item = this.ModelItem.AddNewField();\r\n    var itemView = fieldVMUtil.get(item, this);\r\n    this.FieldVMs.push(itemView);\r\n    return itemView;\r\n  }\r\n\r\n  SetData = (v) => {\r\n    this.FieldVMs = v.FieldVMs;\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport MassGroupSettingDataVM from './MassGroupSettingDataVM';\r\nimport * as fieldVMUtil from './field/MGS_FieldVMUtil'\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassGroupSettingDataVM();\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFieldVMs = (q) => {\r\n  var fields = q.ModelItem.Fields;\r\n  return fields.map(x => fieldVMUtil.get(x, q));\r\n}","import { SettingVM } from \"../base/SettingVM\";\r\n\r\nexport default class MassGroupSettingVM extends SettingVM {\r\n  OnInitialSetDataVM = (v) => {\r\n    \r\n  }\r\n}","import * as dataVMUtil from './MassGroupSettingDataVMUtil'\r\nimport MassGroupSettingVM from './MassGroupSettingVM';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassGroupSettingVM();\r\n\r\n  qI.ModelItem = q;\r\n  qI.Dict = dict;\r\n\r\n  q.OnNameChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Name = v;\r\n    }\r\n  }\r\n\r\n  q.OnDescriptionChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Description = v;\r\n    }\r\n  }\r\n\r\n  q.OnDataChanged = (v) => {\r\n    if (q.M2VM){\r\n      qI.Data = v;\r\n      qI.DataVM = qI.GetDataVM();\r\n    }\r\n  }\r\n\r\n  qI.OnGetDataVM = () => {\r\n    var data = q.Data;\r\n    return dataVMUtil.get(data);\r\n  }    \r\n\r\n  return qI;\r\n}","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport class CSVExport {\r\n  data = []\r\n  get Data() {\r\n    if (this.Override_Get_Data) {\r\n      return this.Override_Get_Data()\r\n    }\r\n    return this.data;\r\n  } set Data(v) {\r\n    this.data = v;\r\n  }\r\n\r\n  fileName\r\n  get FileName() {\r\n    if (this.Override_Get_FileName) {\r\n      return this.Override_Get_FileName();\r\n    }\r\n    return this.fileName;\r\n  } set FileName(v) {\r\n    this.fileName = v;\r\n  }\r\n\r\n  Export = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    const ws = XLSX.utils.json_to_sheet(this.Data, this.Headers);\r\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n  \r\n  ExportTest = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    var ws1 = {}\r\n    ws1.Name = 'Title';\r\n    ws1['!ref'] = \"A1:E5\";\r\n    ws1['A1'] = {\r\n      t: 'n', \r\n      v: 100\r\n    }\r\n\r\n    var ws2 = {}\r\n    ws2.Name = 'Raw Data'\r\n    ws2['!ref'] = \"A1:E5\";\r\n    ws2['B2'] = {\r\n      t: 'n', \r\n      v: 200\r\n    }\r\n    ws2['B3'] = {\r\n      v: 200, f : 'B2'\r\n    }\r\n    ws2['C1'] = {\r\n      v: 300, \r\n      f : 'Title!A1'\r\n    }\r\n\r\n    ws2['C2'] = {\r\n      v: 300, \r\n      f : 'sum(Title!A1, B2)'\r\n    }\r\n\r\n    // const ws = XLSX.utils.json_to_sheet(this.Data, this.Headers);\r\n    // ws['!ref'] = \"A1:E5\";\r\n    // ws['E5'] = {\r\n    //   t : 's',\r\n    //   v : '100'\r\n    // };\r\n    // debugger\r\n\r\n    //const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    \r\n    const wb = { \r\n      Sheets: { \r\n        \r\n       }, \r\n      SheetNames: [ws1.Name, ws2.Name] \r\n    };\r\n    wb.Sheets[ws1.Name] = ws1;\r\n    wb.Sheets[ws2.Name] = ws2;\r\n\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n}","import * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nexport class ExcelExport {\r\n  workbook\r\n  get Workbook(){\r\n    if (this.Override_Get_Workbook){\r\n      return this.Override_Get_Workbook()\r\n    }\r\n    return this.workbook;\r\n  } set Workbook(v){\r\n    this.workbook = v;\r\n  }\r\n\r\n  fileName\r\n  get FileName() {\r\n    if (this.Override_Get_FileName) {\r\n      return this.Override_Get_FileName();\r\n    }\r\n    return this.fileName;\r\n  } set FileName(v) {\r\n    this.fileName = v;\r\n  }\r\n\r\n  Export = () => {\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n    \r\n    const excelBuffer = XLSX.write(this.Workbook, { bookType: 'xlsx', type: 'array' });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, this.FileName + fileExtension);\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './MT_CellUtil'\r\n\r\nexport class MT_Cell {\r\n  // Lấy thứ tự trong lập trình\r\n  row = 0\r\n  get Row(){\r\n    if (this.Override_Get_Row){\r\n      return this.Override_Get_Row();\r\n    }\r\n    return this.row;\r\n  } set Row(v){\r\n    this.row = v;\r\n    this.Override_Get_Row = undefined;\r\n  }\r\n\r\n  // Lấy thứ tự trong lập trình\r\n  column = 0\r\n  get Column(){\r\n    if (this.Override_Get_Column){\r\n      return this.Override_Get_Column();\r\n    }\r\n    return this.column\r\n  } set Column(v){\r\n    this.column = v;\r\n    this.Override_Get_Column = undefined;\r\n  }\r\n\r\n  Type \r\n  Value\r\n\r\n  formula\r\n  get Formula(){\r\n    if (this.Override_Get_Formula){\r\n      return this.Override_Get_Formula();\r\n    }\r\n    return this.formula;\r\n  } set Formula(v){\r\n    this.formula = v;\r\n    this.Override_Get_Formula = undefined;\r\n  }\r\n\r\n  get Address(){\r\n    var obj = genUtil.ExcelCellName(this.Row, this.Column);\r\n    return obj;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  isContinueSubRows\r\n  get IsContinueSubRows(){\r\n    if (this.isContinueSubRows === undefined){\r\n      this.isContinueSubRows = util.GetIsContinueSubRows(this);\r\n    }\r\n    return this.isContinueSubRows;\r\n  }\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      t : this.Type,\r\n      v : this.Value,\r\n      f : this.Formula,\r\n      z : this.Format,\r\n      s : this.Style\r\n    }\r\n    return obj;\r\n  }\r\n}","// Property\r\nexport const GetSubItems = (q) => {\r\n  var column = q.Column;\r\n  return q.Dict.SubItems.map(x => {\r\n    var list = x.Cells;\r\n    var index = list.findIndex(y => y.Column === column);\r\n    return index !== -1 ? list[index] : undefined;\r\n  }).filter(x => x !== undefined);\r\n}\r\n\r\nexport const GetIsContinueSubRows = (q) => {\r\n  var isValid = true;\r\n\r\n  q.SubItems.forEach(x => {\r\n    if (isValid && x.SubItems.length !== 0){\r\n      isValid = false;\r\n    }\r\n  })\r\n\r\n  return isValid;\r\n}","import * as util from './MT_Data_RowUtil'\r\n\r\nexport class MT_Data_Row {\r\n  Worksheet\r\n\r\n  Row\r\n\r\n  get Rank(){\r\n    return this.Row.Rank;\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n\r\n  get FullItems(){\r\n    return util.GetFullItems(this);\r\n  }\r\n\r\n  cells\r\n  get Cells(){\r\n    if (!this.cells){\r\n      this.cells = util.GetCells(this);\r\n    }\r\n    return this.cells;\r\n  }\r\n\r\n  get FullIndex() {\r\n    return this.Worksheet.FullRows.indexOf(this);\r\n  }\r\n\r\n  title\r\n  get Title(){\r\n    if (!this.title){\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  }\r\n}","export const string = 's'\r\nexport const number = 'n'","import { MT_Cell } from \"./MT_Cell\";\r\nimport { MT_Data_Row } from \"./MT_Data_Row\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\n\r\n// Instance\r\nexport const get = (row, ws, supItem) => {\r\n  var qI = new MT_Data_Row();\r\n\r\n  qI.Row = row;\r\n  qI.Worksheet = ws;\r\n  qI.SupItem = supItem;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetSubItems = (q) => {\r\n  return q.Row.SubItems.map(x => get(x, q.Worksheet, q));\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  var row = q.Row;\r\n  var title = '';\r\n\r\n  for (var i = 0; i < row.Rank; i++) {\r\n    title += '  ';\r\n  }\r\n\r\n  title += row.Title;\r\n\r\n  return title;\r\n}\r\n\r\nexport const GetCells = (q) => {\r\n  var vc_dict = q.ValueCell_Dict = [];\r\n\r\n  var firstCol = q.Worksheet.First_ValueColumn;\r\n  var firstRow = q.Worksheet.First_ValueRow;\r\n\r\n  var row = q.Row;\r\n  var list = []\r\n  var getRowFunc = () => q.FullIndex + firstRow;\r\n\r\n  var titleCell = new MT_Cell();\r\n  titleCell.Dict = q;\r\n  titleCell.Type = c_vt.string;\r\n\r\n  titleCell.Value = q.Title;\r\n  titleCell.Column = 0 + firstCol;\r\n  titleCell.Override_Get_Row = getRowFunc\r\n  list.push(titleCell);\r\n\r\n  var columns = row.Table.Columns\r\n  row.Cells.forEach(x => {\r\n    var valueCell = new MT_Cell()\r\n    valueCell.Dict = q;\r\n    valueCell.Type = c_vt.number;\r\n    valueCell.Value = x.TotalValue\r\n    valueCell.Format = '0.00'\r\n    valueCell.Column = \r\n      columns.indexOf(x.Column) + 1 + firstCol\r\n    valueCell.Override_Get_Row = getRowFunc\r\n\r\n    valueCell.Override_Get_Formula = () => {\r\n      var subItems = valueCell.SubItems;\r\n      var length = subItems.length;\r\n      if (length === 0) return undefined;\r\n\r\n      var formula\r\n      if (!valueCell.IsContinueSubRows) {\r\n        formula = subItems.reduce((a, x, i) => {\r\n          if (i !== 0) {\r\n            a += ','\r\n          };\r\n          a += x.Address\r\n          return a\r\n        }, 'SUM(');\r\n\r\n        formula += ')';\r\n      } else {\r\n        formula = `SUM(${subItems[0].Address}:${subItems[length-1].Address})`\r\n      }\r\n\r\n      return formula;\r\n    }\r\n\r\n    var key = x.Column.Name\r\n    list.push(valueCell);\r\n    vc_dict.push({\r\n      Key: key,\r\n      Value: valueCell\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetFullItems = (q) => {\r\n  var list = [q];\r\n\r\n  q.SubItems.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  });\r\n\r\n  return list;\r\n}","import * as util from './MT_Data_WorksheetUtil'\r\n\r\nexport class MT_Data_Worksheet {\r\n  get Table(){\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  mainRows\r\n  get MainRows(){\r\n    if (!this.mainRows){\r\n      this.mainRows = util.GetMainRows(this)\r\n    }\r\n    return this.mainRows;\r\n  }\r\n\r\n  fullRows\r\n  get FullRows(){\r\n    if (!this.fullRows){\r\n      this.fullRows = util.GetFullRows(this);\r\n    }\r\n    return this.fullRows;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells(){\r\n    if (!this.valueCells){\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells;\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName(){\r\n    return util.GetRangeName(this); \r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData(){\r\n    var obj = {\r\n      '!ref' : this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import * as rowUtil from './MT_Data_RowUtil'\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport { MT_Cell } from './MT_Cell';\r\n\r\n// Property\r\nexport const GetMainRows = (q) => {\r\n  return q.Table.MainRows.map(x => rowUtil.get(x, q));\r\n}\r\n\r\nexport const GetFullRows = (q) => {\r\n  var list = [];\r\n\r\n  q.MainRows.forEach(x => {\r\n    list.push.apply(list, x.FullItems);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var list = [];\r\n\r\n  q.FullRows.forEach(x => {\r\n    list.push.apply(list, x.Cells);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var list = [];\r\n  q.Table.Columns.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x.Name;\r\n    cell.Column = i + fc + 1;\r\n    cell.Row = fr\r\n    cell.Style = {\r\n      font : {\r\n        bold : true\r\n      }\r\n    }\r\n\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_RawData_WorksheetUtil'\r\n\r\nexport class MT_RawData_Worksheet {\r\n  Workbook\r\n\r\n  get Table() {\r\n    return this.Workbook.Table;\r\n  }\r\n\r\n  Title\r\n\r\n  dataRows\r\n  get DataRows(){\r\n    if (!this.dataRows){\r\n      this.dataRows = util.GetDataRows(this);\r\n    }\r\n    return this.dataRows;\r\n  }\r\n\r\n  tableRows\r\n  get TableRows() {\r\n    if (!this.tableRows) {\r\n      this.tableRows = util.GetTableRows(this);\r\n    }\r\n    return this.tableRows;\r\n  }\r\n\r\n  records\r\n  get Records() {\r\n    if (!this.records) {\r\n      this.records = util.GetRecords(this);\r\n    }\r\n    return this.records\r\n  }\r\n\r\n  InfoFields = []\r\n\r\n  valueFields\r\n  get ValueFields() {\r\n    if (!this.valueFields) {\r\n      this.valueFields = util.GetValueFields(this);\r\n    }\r\n    return this.valueFields;\r\n  }\r\n\r\n  valueCells\r\n  get ValueCells() {\r\n    if (!this.valueCells) {\r\n      this.valueCells = util.GetValueCells(this);\r\n    }\r\n    return this.valueCells\r\n  }\r\n\r\n  titleCells\r\n  get TitleCells(){\r\n    if (!this.titleCells){\r\n      this.titleCells = util.GetTitleCells(this);\r\n    }\r\n    return this.titleCells;\r\n  }\r\n\r\n  allCells\r\n  get AllCells(){\r\n    if (!this.allCells){\r\n      this.allCells = this.TitleCells.concat(this.ValueCells);\r\n    }\r\n    return this.allCells;\r\n  }\r\n\r\n  get RangeName() {\r\n    return util.GetRangeName(this);\r\n  }\r\n\r\n  First_TitleColumn = 0\r\n  First_TitleRow = 0\r\n\r\n  First_ValueColumn = 0;\r\n  First_ValueRow = 1;\r\n\r\n  get ResultData() {\r\n    var obj = {\r\n      '!ref': this.RangeName\r\n    };\r\n\r\n    this.AllCells.forEach(x => {\r\n      obj[x.Address] = x.ResultData;\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Cell } from \"./MT_Cell\";\r\nimport * as c_vt from './MT_Cell_ValueType'\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\n\r\n// Property\r\nexport const GetDataRows = (q) => {\r\n  return q.Workbook.Data_WS.FullRows\r\n    .filter(x => x.SubItems.length === 0)\r\n}\r\n\r\nexport const GetTableRows = (q) => {\r\n  return q.DataRows.map(x => x.Row)\r\n}\r\n\r\nexport const GetValueFields = (q) => {\r\n  return q.Table.Columns.map(x => x.Name);\r\n}\r\n\r\nexport const GetRecords = (q) => {\r\n  return q.DataRows.map(x => {\r\n    // Init Cells\r\n    var cells = x.Cells;\r\n\r\n    var obj = x.Row.ExportData;\r\n\r\n    // Xử lý phần sắp xếp  Info Fields\r\n    var infoFields = q.InfoFields;\r\n    obj.Infos.map(x => x.Key).forEach(y => {\r\n      if (!infoFields.includes(y)) {\r\n        infoFields.push(y);\r\n      }\r\n    });\r\n\r\n    return {\r\n      Binding_DataRow: x,\r\n      Value: obj\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetValueCells = (q) => {\r\n  var fc = q.First_ValueColumn;\r\n  var fr = q.First_ValueRow;\r\n\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var list = [];\r\n  var ifs = q.InfoFields;\r\n  var ifl = ifs.length\r\n  var vfs = q.ValueFields;\r\n\r\n  records.forEach((x, i) => {\r\n    // Truy xuất phần binding\r\n    var vc_dict = x.Binding_DataRow.ValueCell_Dict\r\n\r\n    // Xử lý phần Value Object\r\n    var value = x.Value;\r\n    var cell\r\n    var row = i + fr;\r\n\r\n    // Xử lý Info\r\n    value.Infos.forEach(y => {\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.string;\r\n      cell.Value = y.Value;\r\n      cell.Column = ifs.indexOf(y.Key) + fc;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n    })\r\n\r\n    // Xử lý Value\r\n    value.Values.forEach(y => {\r\n      var key = y.Key;\r\n      var cell_val = y.Value;\r\n\r\n      cell = new MT_Cell();\r\n      cell.Type = c_vt.number;\r\n      cell.Value = cell_val;\r\n      cell.Format = '0.00'\r\n      cell.Column = vfs.indexOf(key) + fc + ifl;\r\n      cell.Row = row\r\n\r\n      list.push(cell);\r\n\r\n      // Xử lý phần Binding\r\n      //debugger\r\n      var index = vc_dict.findIndex(z => z.Key === key);\r\n      var data_cell = vc_dict[index].Value;\r\n\r\n      if (cell_val) {\r\n        data_cell.Formula = `raw_data!${cell.Address}`;\r\n      }\r\n    })\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetTitleCells = (q) => {\r\n  // Init InfoFiels\r\n  var records = q.Records;\r\n\r\n  var fc = q.First_TitleColumn;\r\n  var fr = q.First_TitleRow;\r\n\r\n  var fields = q.InfoFields.concat(q.ValueFields)\r\n\r\n  var list = [];\r\n  fields.forEach((x, i) => {\r\n    var cell = new MT_Cell();\r\n    cell.Type = c_vt.string;\r\n    cell.Value = x;\r\n    cell.Column = i + fc;\r\n    cell.Row = fr\r\n    list.push(cell);\r\n  })\r\n\r\n  return list;\r\n}\r\n\r\nexport const GetRangeName = (q) => {\r\n  var listCells = q.AllCells;\r\n\r\n  var range = listCells.reduce(\r\n    ({ minRow, minCol, maxRow, maxCol }, x) => ({\r\n      minRow: minRow < x.Row ? minRow : x.Row,\r\n      minCol: minCol < x.Column ? minCol : x.Column,\r\n      maxRow: maxRow > x.Row ? maxRow : x.Row,\r\n      maxCol: maxCol > x.Column ? maxCol : x.Column,\r\n    }), {\r\n    minRow: listCells[0].Row, minCol: listCells[0].Column,\r\n    maxRow: listCells[0].Row, maxRow: listCells[0].Column\r\n  });\r\n\r\n  return genUtil.ExcelRangeName\r\n    (range.minRow, range.minCol, range.maxRow, range.maxCol);\r\n}","import * as util from './MT_WorkbookUtil'\r\n\r\nexport class MT_Workbook {\r\n  Table\r\n\r\n  get All_WS(){\r\n    return [ this.RawData_WS, this.Data_WS]\r\n    //return [ this.Data_WS, this.RawData_WS]\r\n    //return [ this.Data_WS ]\r\n  }\r\n\r\n  data_WS\r\n  get Data_WS(){\r\n    if (!this.data_WS){\r\n      this.data_WS = util.GetData_WS(this);\r\n    }\r\n    return this.data_WS;\r\n  }\r\n\r\n  rawData_WS\r\n  get RawData_WS(){\r\n    if (!this.rawData_WS){\r\n      this.rawData_WS = util.GetRawData_WS(this);\r\n    }\r\n    return this.rawData_WS;\r\n  }\r\n\r\n  get ResultData (){\r\n    var obj = {\r\n      Sheets : { },\r\n      SheetNames : []\r\n    }\r\n\r\n    this.All_WS.forEach(x => {\r\n      obj.Sheets[x.Title] = x.ResultData\r\n      obj.SheetNames.push(x.Title);\r\n    })\r\n\r\n    return obj;\r\n  }\r\n}","import { MT_Data_Worksheet } from \"./MT_Data_Worksheet\";\r\nimport { MT_RawData_Worksheet } from \"./MT_RawData_Worksheet\";\r\nimport { MT_Workbook } from \"./MT_Workbook\"\r\n\r\n// Instance\r\nexport const get = (table) => {\r\n  var qI = new MT_Workbook();\r\n\r\n  qI.Table = table;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetData_WS = (q) =>{\r\n  var qI = new MT_Data_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'data'\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetRawData_WS = (q) => {\r\n  var qI = new MT_RawData_Worksheet();\r\n\r\n  qI.Workbook = q;\r\n  qI.Title = 'raw_data'\r\n\r\n  return qI;\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { makeObservable, observable, action } from 'mobx';\r\nimport * as mif from '../item/MassItemField'\r\nimport MassColumn from './MassColumn';\r\nimport * as colUtil from './MassColumnUtil'\r\nimport * as rowUtil from './MassRowUtil'\r\nimport * as cellUtil from './MassCellUtil'\r\nimport * as util from './MassTableUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport * as textUtil from '../../../../text/TextVMUtil'\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport * as st from '../../setting/base/SettingType'\r\nimport { message } from 'antd';\r\nimport * as mgsUtil from '../../setting/massGroup/MassGroupSettingUtil'\r\nimport * as mgsVMUtil from '../../setting/massGroup/MassGroupSettingVMUtil'\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport * as compUtil from './rowgroup/MassGroupComponentUtil'\r\nimport * as exportUtil from '../../../../export/csv/CSVExportUtil';\r\nimport dayjs from 'dayjs';\r\nimport * as eeUtil from '../../../../export/excel/ExcelExportUtil';\r\nimport * as wbUtil from './export/MT_WorkbookUtil';\r\nimport * as mgi_st from './MassGroupInput_StateType'\r\nimport InputView from '../../../../input/InputView';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport default class MassTable {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsValidTable: observable,\r\n      Columns: observable,\r\n      MainRows: observable,\r\n      Cells: observable,\r\n      columnField: observable,\r\n      IsOnSaveMassGroup: observable,\r\n      MassGroupInput_State: observable,\r\n      Is_Override_MassGroup_Modal_Open: observable\r\n    })\r\n  }\r\n\r\n\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    if (v && v.length !== 0) {\r\n      this.Build();\r\n      this.IsValidTable = true;\r\n    }\r\n    else {\r\n      this.IsValidTable = false;\r\n    }\r\n  }\r\n\r\n  IsValidTable = false\r\n\r\n  columnField = mif.Project\r\n  get ColumnField() {\r\n    return this.columnField;\r\n  }\r\n  set ColumnField(v) {\r\n    this.columnField = v;\r\n  }\r\n\r\n  massGroupSetting\r\n  get MassGroupSetting() {\r\n    return this.massGroupSetting;\r\n  }\r\n  set MassGroupSetting(v) {\r\n    this.massGroupSetting = v;\r\n    if (!v) {\r\n      this.MainMGC = v;\r\n    } else {\r\n      this.MainMGC = compUtil.Clone(v.Data.MassGroupComponent);\r\n    }\r\n  }\r\n\r\n  mainMGC\r\n  get MainMGC() {\r\n    if (!this.mainMGC) {\r\n      this.mainMGC = util.GetMainMGC(this);\r\n    }\r\n    return this.mainMGC;\r\n  }\r\n  set MainMGC(v) {\r\n    this.mainMGC = v;\r\n    this.Init();\r\n    if (!v) {\r\n      this.MainMGI = undefined;\r\n    } else {\r\n      this.MainMGI = util.GetMainMGI(this);\r\n    }\r\n  }\r\n\r\n  mainMGI\r\n  get MainMGI() {\r\n    if (!this.mainMGI) {\r\n      this.mainMGI = util.GetMainMGI(this);\r\n    }\r\n    return this.mainMGI;\r\n  }\r\n  set MainMGI(v) {\r\n    this.mainMGI = v;\r\n  }\r\n\r\n  Columns = undefined\r\n  FullRows = undefined\r\n  MainRows = undefined\r\n  Cells = undefined\r\n\r\n  Init = () => {\r\n    this.Columns = [];\r\n    this.MainRows = [];\r\n    this.FullRows = [];\r\n    this.Cells = [];\r\n\r\n    // Reset các dòng tạo bởi người dùng\r\n    this.CreatedByUser_Rows = []\r\n    this.Handled_CreatedByUser_Rows = []\r\n  }\r\n\r\n  get AllRows() {\r\n    return util.GetAllRows(this);\r\n  }\r\n\r\n  GetColumn = (v) => {\r\n    var list = this.Columns;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = colUtil.get(v, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetRow = (v, supItem) => {\r\n    var list = undefined;\r\n    if (supItem) {\r\n      list = supItem.SubItems;\r\n    } else {\r\n      list = this.MainRows;\r\n    }\r\n\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Name === v);\r\n    if (index === -1) {\r\n      item = rowUtil.get(v, this);\r\n      item.SupItem = supItem;\r\n\r\n      list.push(item);\r\n      this.FullRows.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n  GetCell = (col, row, canAdd = true) => {\r\n    var list = this.Cells;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => x.Column === col && x.Row === row);\r\n    if (index === -1) {\r\n      if (!canAdd) return undefined;\r\n\r\n      item = cellUtil.get(col, row, this);\r\n      list.push(item);\r\n      return item;\r\n    }\r\n    else {\r\n      return list[index];\r\n    }\r\n  }\r\n\r\n\r\n  Build = () => {\r\n    var colField = this.ColumnField;\r\n\r\n    if (colField === mif.Phase) {\r\n      pmData().MassResultComp.Phases.forEach(x => {\r\n        var col = this.GetColumn(mif.GetValueString(x, colField));\r\n      })\r\n    }\r\n\r\n    this.Items.forEach(x => {\r\n      switch (colField) {\r\n        case mif.Phase:\r\n          x.ValidPhasesByInput.forEach(y => {\r\n            this.HandleItem(x, y);\r\n          })\r\n          break;\r\n        default:\r\n          this.HandleItem(x, x.GetValue(colField));\r\n          break;\r\n      }\r\n    })\r\n\r\n    if (!this.IsHaveAsyncData) {\r\n      this.UpdateData();\r\n    }\r\n  }\r\n\r\n  IsHaveAsyncData = false;\r\n  IsOnSaveMassGroup = false;\r\n\r\n  HandledItems = []\r\n  HandledItemPhases = []\r\n\r\n  OnSetHandledRatio_Funcs = []\r\n\r\n  handledRatio\r\n  get HandledRatio() {\r\n    return this.handledRatio;\r\n  } set HandledRatio(v) {\r\n    this.handledRatio = v;\r\n    this.OnSetHandledRatio_Funcs.forEach(x => x(v));\r\n  }\r\n\r\n  AddHandledItems = (item) => {\r\n    if (this.ColumnField !== mif.Phase) {\r\n      this.HandledItems.push(item);\r\n    } else {\r\n      var list = this.HandledItemPhases;\r\n      var index = list.findIndex(x => x.Item === item);\r\n      var obj = undefined;\r\n      if (index === -1) {\r\n        obj = {\r\n          Item: item,\r\n          Count: 0\r\n        };\r\n        list.push(obj);\r\n      } else {\r\n        obj = list[index];\r\n      }\r\n      obj.Count++;\r\n\r\n      if (obj.Count === item.ValidPhasesByInput.length) {\r\n        this.HandledItems.push(item);\r\n      }\r\n    }\r\n\r\n    this.HandledRatio = this.HandledItems.length / this.Items.length;\r\n\r\n    if (this.HandledItems.length === this.Items.length) {\r\n      this.UpdateData();\r\n      this.HandledItems = [];\r\n    }\r\n  }\r\n\r\n  UpdateData = () => {\r\n    this.MainRows.forEach(x => x.UpdateData());\r\n    this.MainRows = rowUtil.Order(this.MainRows);\r\n\r\n    this.Cells.forEach(x => x.UpdateData());\r\n\r\n    this.IsUpdateDataDone = true;\r\n  }\r\n\r\n  OnIsUpdateDataDone_Funcs = []\r\n\r\n  set IsUpdateDataDone(v) {\r\n    this.OnIsUpdateDataDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  HandleItem = (item, colFieldValue, mgc, initialRow) => {\r\n    var col =\r\n      this.GetColumn(mif.GetValueString(colFieldValue, this.ColumnField));\r\n    var rows = initialRow ? [initialRow] : [];\r\n    var mgc = mgc ? mgc : this.MainMGC;\r\n\r\n    this.HandleRowFieldIndex(item, col, rows, mgc, 0);\r\n  }\r\n\r\n  // Xử lý tạo Row với giá trị tương ứng và Cell bên trong\r\n  GetRow_Value_FieldIndex = (item, col, rows, val, mgc, rowFieldIndex) => {\r\n    var mgis = mgc.Items;\r\n    var itemCount = mgis.length;\r\n    var mgi = mgis[rowFieldIndex];\r\n\r\n    // Sup Row của dòng khối lượng đang xét\r\n    var lastRow = rows.length !== 0 ? rows[rows.length - 1] : undefined\r\n    // mgi.SupRow = lastRow;\r\n    mgi.AddSupRow(lastRow);\r\n\r\n    var rowField = mgi.Field;\r\n    if (!rowField) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var valueString = mif.GetValueString(val, rowField);\r\n    var fullValue = lastRow ? `${lastRow.FullValue}__${valueString}` : valueString;\r\n\r\n    if (mgi.NotIncludeValues.includes(fullValue)) {\r\n      this.AddHandledItems(item);\r\n      return;\r\n    }\r\n\r\n    var row = undefined;\r\n    const addRow = (supRow) => {\r\n      return this.Handle_AddRow(fullValue, supRow);\r\n    }\r\n\r\n    const handleRow = (row) => {\r\n      // Gắn thông tin gốc vào Row\r\n      row.RawValue = valueString;\r\n      row.MassGroupItem = mgi;\r\n      rows.push(row);\r\n\r\n      var subMgcs = mgi.SubComponents;\r\n      var subIndex = subMgcs.findIndex(x =>\r\n        filterUtil.IsValid(x.Filter, fullValue));\r\n      if (subIndex !== -1) {\r\n        mgc = subMgcs[subIndex];\r\n        mgc.IsHaveMassItem = true;\r\n\r\n        rowFieldIndex = -1;\r\n        itemCount = mgc.Items.length;\r\n\r\n        row.SubMassGroupComponent = mgc;\r\n      }\r\n\r\n      var cell = this.GetCell(col, row);\r\n      cell.Items.push(item);\r\n\r\n      if (rowFieldIndex === itemCount - 1) {\r\n        this.AddHandledItems(item);\r\n      } else {\r\n        this.HandleRowFieldIndex(item, col, rows, mgc, rowFieldIndex + 1);\r\n      }\r\n    }\r\n\r\n    var mgiItem = mgi.GetItem(fullValue, valueString);\r\n    var replaceMgi = mgiItem.NewMGI;\r\n    if (replaceMgi) {\r\n      // Lấy thông tin SupName\r\n      var supName = mgiItem.SupValue;\r\n\r\n      // Thêm Value-Title cho MassGroupItem\r\n      replaceMgi.GetItem(fullValue, valueString);\r\n\r\n      // Đính thông tin OriginSupRow cũ\r\n      if (lastRow) {\r\n        lastRow.Is_Original_SupRow = true;\r\n      }\r\n\r\n      this.Handle_ReplaceMGI(replaceMgi, supName, addRow, handleRow, lastRow);\r\n    } else {\r\n      row = addRow(lastRow);\r\n      handleRow(row);\r\n    }\r\n  }\r\n\r\n  Handle_AddRow = (fullValue, supRow) => {\r\n    var r1 = this.GetRow(fullValue, supRow);\r\n    r1.FullValue = fullValue;\r\n    return r1;\r\n  }\r\n\r\n  Handle_ReplaceMGI = (replaceMgi, supName, addRow, handleRow, originalSupRow) => {\r\n    var isGet_SupRow_Done\r\n\r\n    // Lấy SupRow phù hợp có trong ReplaceMGI\r\n    const getSupRow = () => {\r\n      var list = replaceMgi.SupRows;\r\n      var index = list.findIndex(x => x.Name === supName);\r\n      if (index !== -1) {\r\n        isGet_SupRow_Done = true;\r\n        return list[index]\r\n      }\r\n      return undefined;\r\n    }\r\n\r\n    // Thêm Row vào SupRow\r\n    const awaitGetSupRowForAdd = (supRow) => {\r\n      var r2 = addRow(supRow);\r\n      r2.ReplaceMGI = replaceMgi;\r\n\r\n      return r2;\r\n    }\r\n\r\n    // Đính thông tin OriginSupRow\r\n    const setOriginal_SupRow = (row) => {\r\n      row.Original_SupRow = originalSupRow;\r\n      row.IsReplaced = true;\r\n    }\r\n\r\n    // Tổn hợp các Phương thức ở trên\r\n    const fullFunc = () => {\r\n      var sr = getSupRow();\r\n      if (sr) {\r\n        var r = awaitGetSupRowForAdd(sr);\r\n        setOriginal_SupRow(r);\r\n        handleRow(r);\r\n      }\r\n    }\r\n\r\n    fullFunc();\r\n    genUtil.Add(\r\n      replaceMgi.On_AddSupRow_Func_Dict,\r\n      () => {\r\n        if (!isGet_SupRow_Done && replaceMgi.NewRow?.Name === supName) {\r\n          fullFunc();\r\n        }\r\n      },\r\n      false);\r\n\r\n    // var row = undefined\r\n    // if (replaceMgi.IsFirstSetSupRow) {\r\n    //   row = awaitGetSupRowForAdd();\r\n    //   setOriginal_SupRow(row);\r\n    //   handleRow(row);\r\n    // } else {\r\n    //   replaceMgi.OnIsFirstSetSupRow_Funcs.push(() => {\r\n    //     row = awaitGetSupRowForAdd();\r\n    //     setOriginal_SupRow(row);\r\n    //     handleRow(row);\r\n    //   })\r\n    // }\r\n  }\r\n\r\n  HandleRowFieldIndex = (item, col, rows, mgc, rowFieldIndex) => {\r\n    var rowField = mgc.Items[rowFieldIndex].Field;\r\n\r\n    var val = item.GetValue(rowField, (val) =>\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex));\r\n    if (!Array.isArray(val)) {\r\n      this.GetRow_Value_FieldIndex(item, col, rows, val, mgc, rowFieldIndex);\r\n    } else {\r\n      this.IsHaveAsyncData = true;\r\n    }\r\n  }\r\n\r\n  // MassGroupInput\r\n  get Reference_MassGroupSetting_SelectVM() {\r\n    return this.Dict.Dict.ViewItem.MassGroupSettingSelectVM;\r\n  }\r\n\r\n  SaveMassGroup = () => {\r\n    // Init MassGroup StorageList\r\n    var refSelectVM = this.Reference_MassGroupSetting_SelectVM;\r\n    var obj = this.MassGroupSelectVM;\r\n    obj.Items = [...refSelectVM.Items];\r\n    obj.InitialItem = refSelectVM.SelectedItem;\r\n\r\n    this.MassGroupInput_State = mgi_st.select\r\n    this.IsOnSaveMassGroup = true;\r\n  }\r\n\r\n  MassGroupInput_State = undefined\r\n\r\n  Toggle_MassGroupInput_State = () => {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        this.MassGroupInput_State = mgi_st.input\r\n        break;\r\n      case mgi_st.input:\r\n        this.MassGroupInput_State = mgi_st.select\r\n        break;\r\n    }\r\n  }\r\n\r\n  get MassGroupInput_Toggle_Classname() {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        return 'btn-warning';\r\n      case mgi_st.input:\r\n        return 'btn-success';\r\n    }\r\n  }\r\n\r\n  get MassGroupInput_Toggle_Content() {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        return 'sel';\r\n      case mgi_st.input:\r\n        return 'inp';\r\n    }\r\n  }\r\n\r\n  massGroupName = undefined\r\n  get MassGroupName() {\r\n    if (!this.massGroupName) {\r\n      this.massGroupName = util.GetMassGroupName(this);\r\n    }\r\n    return this.massGroupName;\r\n  }\r\n  set MassGroupName(v) {\r\n    this.massGroupName = v;\r\n  }\r\n\r\n  massGroupNameVM\r\n  get MassGroupNameVM() {\r\n    if (!this.massGroupNameVM) {\r\n      var obj = this.massGroupNameVM =\r\n        textUtil.get(this.MassGroupName, 'Tên set khối lượng');\r\n      obj.onSetContent = (v) => this.MassGroupName = v;\r\n    }\r\n    return this.massGroupNameVM;\r\n  }\r\n\r\n  massGroupSelectVM\r\n  get MassGroupSelectVM() {\r\n    if (!this.massGroupSelectVM) {\r\n      var obj = this.massGroupSelectVM = selectUtil.get([], undefined);\r\n      obj.Placeholder = 'Bộ set khối lượng';\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.MassGroupName = v?.Name\r\n      };\r\n    }\r\n    return this.massGroupSelectVM;\r\n  }\r\n\r\n  get MassGroupInput_Element() {\r\n    switch (this.MassGroupInput_State) {\r\n      case mgi_st.select:\r\n        var obj = this.MassGroupSelectVM;\r\n        var list = obj.Items;\r\n        var index = list.findIndex(x => x.Name === this.MassGroupName);\r\n        obj.InitialItem = index !== -1 ?\r\n          list[index] : undefined\r\n        return <SelectView store={obj} />\r\n      case mgi_st.input:\r\n        var obj = this.MassGroupNameVM;\r\n        obj.Content = this.MassGroupName;\r\n        return <InputView store={obj} />\r\n    }\r\n  }\r\n\r\n  MassGroupInputOK = () => {\r\n    if (!this.MassGroupName || this.MassGroupName.length === 0) {\r\n      switch (this.MassGroupInput_State) {\r\n        case mgi_st.select:\r\n          message.warning('Vui lòng chọn bộ thiết lập!')\r\n          return;\r\n        case mgi_st.input:\r\n          message.warning('Vui lòng nhập tên thiết lập!')\r\n          return;\r\n      }\r\n    }\r\n\r\n    var needValidateForOveride = true;\r\n    var items = pmData().MassGroupSetting_Dict.Items;\r\n    var index = items.findIndex(x => x.Name === this.MassGroupName);\r\n    var _id = undefined;\r\n    if (index !== -1) {\r\n      _id = items[index]._id;\r\n\r\n      if (this.MassGroupInput_State === mgi_st.input) {\r\n        needValidateForOveride = false;\r\n      }\r\n    }\r\n\r\n    const handle_UpdateMassGroup = () => {\r\n      var apiData = {\r\n        _id,\r\n        name: this.MassGroupName,\r\n        settingType: st.massgroup,\r\n        data: {\r\n          massGroupComponent: this.MainMGC.ApiData\r\n        }\r\n      };\r\n\r\n      var url = `https://api.bimdev.vn/api/hbs/mg`;\r\n\r\n      var isNew = _id ? false : true;\r\n      var command = isNew ? 'add' : 'edit';\r\n      const apiFunc = () => !isNew ? api.put(`${url}/${command}`, apiData) :\r\n        api.post(`${url}/${command}`, apiData);\r\n\r\n      apiFunc().then(response => response.data)\r\n        .then(data => {\r\n          var refVM = this.Reference_MassGroupSetting_SelectVM\r\n\r\n          var dict = pmData().MassGroupSetting_Dict;\r\n          var item = mgsUtil.get(data, dict);\r\n          var dictVM = pmDataVM().MassGroupSetting_DictVM;\r\n          var itemVM = mgsVMUtil.get(item, dictVM);\r\n\r\n          if (isNew) {\r\n            dict.Items.push(item);\r\n            dictVM.Items.push(itemVM);\r\n\r\n            refVM.Items.push(itemVM);\r\n          } else {\r\n            dict.Items[index] = item;\r\n            dictVM.Items[index] = item;\r\n\r\n            refVM.Items[index] = itemVM;\r\n            // Refresh lại selected item nếu trùng với đối tượng update\r\n            if (refVM.SelectedIndex === index) {\r\n              refVM.InitialItem = itemVM;\r\n            }\r\n          }\r\n\r\n          message.success(`${command} massgroup successfully`);\r\n        })\r\n\r\n      this.IsOnSaveMassGroup = false;\r\n      this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n    }\r\n\r\n    if (needValidateForOveride) {\r\n      handle_UpdateMassGroup();\r\n    } else {\r\n      this.Override_MassGroup_Modal_OKFunc =\r\n        () => handle_UpdateMassGroup();\r\n\r\n      this.Is_Override_MassGroup_Modal_Open = true;\r\n    }\r\n  }\r\n\r\n  Is_Override_MassGroup_Modal_Open = false\r\n\r\n  get Override_MassGroup_ModalElement() {\r\n    var title = 'Cảnh báo'\r\n    var content = 'Thiết lập đã có sẵn, bạn có muốn ghi đè không?'\r\n\r\n    const modalCancel = () =>\r\n      this.Is_Override_MassGroup_Modal_Open = false\r\n\r\n    const modalOK = () => {\r\n      this.Is_Override_MassGroup_Modal_Open = false\r\n      this.Override_MassGroup_Modal_OKFunc();\r\n    }\r\n\r\n    return <Modal title={title}\r\n      visible={this.Is_Override_MassGroup_Modal_Open}\r\n      onOk={modalOK} onCancel={modalCancel}>\r\n      {content}\r\n    </Modal>\r\n  }\r\n\r\n  MassGroupInputCancel = () => {\r\n    this.IsOnSaveMassGroup = false;\r\n    this.MassGroupNameVM.Content = util.GetMassGroupName(this);\r\n  }\r\n\r\n  AddMainRow = () => {\r\n    return rowUtil.Add(undefined, this);\r\n  }\r\n\r\n  // Excel Export\r\n  get ExportTitle() {\r\n    var text = pmData().CurrentProject?.Name;\r\n    text = text ? text + '_' : '';\r\n\r\n    if (this.ColumnField === mif.Phase) {\r\n      text += 'phase_'\r\n    }\r\n\r\n    const formatedDate = dayjs(Date.now()).format(\"YYMMDD\");\r\n    text += `masstable_${formatedDate}`\r\n    return text;\r\n  }\r\n\r\n  get ExcelWorkbook() {\r\n    return wbUtil.get(this).ResultData;\r\n  }\r\n\r\n  excelExport\r\n  get ExcelExport() {\r\n    if (!this.excelExport) {\r\n      this.excelExport = eeUtil.get(\r\n        undefined, undefined,\r\n        () => this.ExportTitle,\r\n        () => this.ExcelWorkbook);\r\n    }\r\n    return this.excelExport;\r\n  }\r\n\r\n  Export = () => {\r\n    this.ExcelExport.Export();\r\n  }\r\n\r\n  // Lưu trữ các Row tạo bởi người dùng\r\n  // Trước mặt dùng để xử lý lỗi không update TotalValue\r\n  // trong lần đầu tiên truy xuất bảng khối lượng\r\n  CreatedByUser_Rows\r\n  Handled_CreatedByUser_Rows\r\n\r\n  Add_Handled_CreatedByUser_Row = (row) => {\r\n    this.Handled_CreatedByUser_Rows.push(row);\r\n\r\n    if (this.CreatedByUser_Rows.length === this.Handled_CreatedByUser_Rows.length) {\r\n      // Xử lý TotalValue thành công với tất cả các CreatedByUser_Row\r\n    }\r\n  }\r\n}","import MassColumn from \"./MassColumn\"\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassColumn();\r\n  qI.Name = q;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import {ExcelExport} from './ExcelExport'\r\n\r\nexport const get = (fileName, wb, ovrgFileName, ovrgWb) => {\r\n  var qI = new ExcelExport();\r\n\r\n  qI.FileName = fileName;\r\n  qI.Override_Get_FileName = ovrgFileName;\r\n  qI.Workbook = wb;\r\n  qI.Override_Get_Workbook = ovrgWb;\r\n\r\n  return qI;\r\n}","import MassTable from \"../table/MassTable\";\r\nimport * as util from './MassItem_DictUtil'\r\n\r\nexport default class MassItem_Dict {\r\n  items\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n    this.MassTable.Items = v;\r\n  }\r\n\r\n  massTable\r\n  get MassTable() {\r\n    if (!this.massTable) {\r\n      this.massTable = util.GetMassTable(this);\r\n    }\r\n    return this.massTable;\r\n  }\r\n\r\n  set MassGroupSetting(v)  {\r\n    this.MassTable.MassGroupSetting = v;\r\n  }\r\n}","import MassTable from \"../table/MassTable\";\r\n\r\n// Property\r\nexport const GetMassTable = (q) => {\r\n  var qI = new MassTable();\r\n  qI.Dict = q;\r\n\r\n  return qI;\r\n}","import MassItem_Dict from '../item/MassItem_Dict';\r\nimport * as util from './MassResultCompUtil'\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as mif from '../item/MassItemField'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport default class MassResultComp {\r\n  Projects = []\r\n\r\n  Phases = []\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n\r\n  massItem_Dict\r\n  get MassItem_Dict(){\r\n    if (!this.massItem_Dict){\r\n      this.massItem_Dict = util.GetMassItem_Dict(this);\r\n    }\r\n    return this.massItem_Dict;\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  isHavePhase = false\r\n  get IsHavePhase(){\r\n    return this.isHavePhase;\r\n  }\r\n  set IsHavePhase(v){\r\n    this.isHavePhase = v;\r\n    if (v){\r\n    this.MassItem_Dict.MassTable.ColumnField = mif.Phase\r\n    }else{\r\n      this.MassItem_Dict.MassTable.ColumnField = mif.Project\r\n    }\r\n  }\r\n\r\n  GetMassData = () => {\r\n     // Gắn thông tin truy xuất lần đầu hay không\r\n     if (pmData().Is_First_Get_MassTable === undefined){\r\n      // undefined => truy xuất lần đầu\r\n      pmData().Is_First_Get_MassTable = true;\r\n    } else {\r\n      // có giá trị => không phải lần đầu\r\n      pmData().Is_First_Get_MassTable = false;\r\n    }\r\n    \r\n    var wp_Dict = pmData().Workpackage_Dict;\r\n    if (wp_Dict.IsDataChanged){\r\n      wp_Dict.RefreshData();\r\n    }\r\n\r\n    massItemUtil.getAll(this.ApiData, (items) => {\r\n      var dict = this.MassItem_Dict;\r\n\r\n      dict.MassGroupSetting = this.MassGroupSetting ? \r\n        this.MassGroupSetting : undefined;\r\n      dict.Items = items;\r\n      \r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n}","import MassItem_Dict from \"../item/MassItem_Dict\"\r\n\r\n\r\n//\r\nexport const GetMassItem_Dict = (q) => {\r\n  var qI = new MassItem_Dict();\r\n  qI.Dict = q;\r\n  return qI;\r\n}\r\n\r\n// Method\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    projectIds : q.Projects.map(x => x._id),\r\n    phaseIds : q.IsHavePhase ? q.Phases.map(x => x._id) : undefined\r\n  }\r\n}","import { Button, message, Space, Tag } from \"antd\";\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport TableVM from \"../../../../table/TableVM\";\r\nimport * as renderUtil from '../../../../table/RenderItemUtil'\r\nimport * as rs from '../../../../table/RenderState'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new RebarMass_Dict();\r\n  qI.Project = project;\r\n\r\n  var projectId = qI.projectId;\r\n  massItemUtil.getRebars(projectId, (items) => {\r\n    qI.Items = items;\r\n  });\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTableVM = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.DataSource = q.Items;\r\n  qI.Columns = [\r\n    colUtil.get('Tên cấu kiện', ['Info', 'elementName'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.elementName)\r\n      ], qI),\r\n\r\n    colUtil.get('Hạng mục', ['Info', 'workItem'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.workItem)\r\n      ], qI),\r\n\r\n    colUtil.get('Đường kính', ['Info', 'diameter'],\r\n      [\r\n        renderUtil.get(rs._default, (val, item) => item.Info.diameter)\r\n      ], qI),\r\n\r\n    colUtil.get('Khối lượng', ['Value'], null, qI),\r\n\r\n    colUtil.GetActionColumn(qI)\r\n  ]\r\n\r\n  qI.OnGetItemForAdd = () => {\r\n    return massItemUtil.GetDefaultRebarMass(q.Project);\r\n  }\r\n\r\n  qI.OnEditItem = (item) => {\r\n    item.AddDatabase();\r\n  }\r\n\r\n  qI.OnDeleteItem = (item) => {\r\n    item.DeleteDatabase();\r\n  }\r\n\r\n  return qI;\r\n}","export const m = \"m\";\r\nexport const m2 = \"m2\";\r\nexport const m3 = \"m3\";\r\nexport const kg = \"kg\";","import * as util from './RebarMass_DictUtil'\r\n\r\nexport default class RebarMass_Dict {\r\n  project\r\n  get Project(){\r\n    return this.project;\r\n  }\r\n  set Project(v){\r\n    this.project = v;\r\n    this.projectId = v._id;\r\n  }\r\n\r\n  projectId\r\n\r\n  items = []\r\n  get Items(){\r\n    return this.items;\r\n  }\r\n  set Items(v){\r\n    this.items = v;\r\n    this.TableVM.DataSource = v;\r\n  }\r\n\r\n  tableVM\r\n  get TableVM() {\r\n    if (!this.tableVM){\r\n      this.tableVM = util.GetTableVM(this);\r\n    }\r\n    return this.tableVM;\r\n  }\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as util from './LevelGroupUtil'\r\n\r\nexport class LevelGroup {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index() {\r\n    return this.Dict.LevelGroups.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.LevelGroups.splice(this.Index, 1);\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      levels : this.Levels ? this.Levels : [],\r\n      primary: this.Primary\r\n    }\r\n  }\r\n\r\n  get Count(){\r\n    return this.Levels.length\r\n  }\r\n\r\n\r\n  OnGetLevelStorageList_Func_Dict = []\r\n  get GetLevelStorageList(){\r\n    return this.getLevelStorageList;\r\n  }\r\n  set GetLevelStorageList(v){\r\n    this.getLevelStorageList = v;\r\n    this.OnGetLevelStorageList_Func_Dict.forEach(x => x.Value())\r\n  }\r\n\r\n  IsGet_LevelStorageList\r\n\r\n  get LevelStorageList (){\r\n    var obj = this.Dict.LevelStorageList;\r\n    if (!obj && !this.IsGet_LevelStorageList){\r\n      this.IsGet_LevelStorageList = true;\r\n      this.Setting.OnGetLevelStorageList_Funcs.push(() => {\r\n        this.GetLevelStorageList = true\r\n      });\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Setting (){\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  get LevelIndexs(){\r\n    return this.Levels.map(x => this.LevelStorageList.indexOf(x));\r\n  }\r\n\r\n  get MinLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.min.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get MaxLevel(){\r\n    var list = this.LevelStorageList;\r\n    return list[Math.max.apply(Math, this.LevelIndexs)]\r\n  }\r\n\r\n  get Description(){\r\n    if (!this.LevelStorageList) return undefined;\r\n    return `Typ: ${this.MinLevel} - ${this.MaxLevel} (${this.Count})`;\r\n  }\r\n\r\n  get FullDescription() {\r\n    if (!this.Description) return undefined;\r\n    return `${this.Dict.FilterDescription} (${this.Description})`;\r\n  }\r\n\r\n  primary\r\n  get Primary(){\r\n    if (!this.primary){\r\n      this.primary = util.GetDefaultPrimary(this);\r\n    }\r\n    return this.primary\r\n  } set Primary(v){\r\n    this.primary = v;\r\n  }\r\n}","import { LevelGroup } from \"./LevelGroup\"\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new LevelGroup();\r\n\r\n  if (Array.isArray(data)) {\r\n    qI.Levels = data;\r\n  } else {\r\n    qI.Levels = data.levels;\r\n    qI.Primary = data.primary\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new LevelGroup();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetDefaultPrimary = (q) => {\r\n  if (q.Levels && q.Levels.length !== 0) {\r\n    return q.Levels[0];\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as it from './TLS_FilterValue_InputType'\r\n\r\nexport class TLS_FilterValue {\r\n  Value = undefined\r\n  InputType = it.select\r\n\r\n  get ApiData(){\r\n    return {\r\n      value: this.Value,\r\n      inputType : this.InputType\r\n    }\r\n  }\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport { TLS_FilterValue } from './TLS_FilterValue';\r\n\r\nexport class TLS_Filter {\r\n  _id\r\n  get id() {\r\n    if (!this._id) {\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  get Index (){\r\n    return this.Dict.Filters.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.Filters.splice(this.Index, 1);\r\n  }\r\n\r\n  //Values = [ 'Cột' ]\r\n  get Values(){\r\n    return this.Items.filter(x => x.Value).map(x => x.Value);\r\n  }\r\n\r\n  Items = []\r\n\r\n  AddItem = () => {\r\n    var item = new TLS_FilterValue();\r\n    this.Items.push(item);\r\n    return item;\r\n  }\r\n\r\n  field\r\n  get Field(){\r\n    if (!this.field){\r\n      this.field = this.FieldStorageList[0]\r\n    }\r\n    return this.field;\r\n  } set Field(v){\r\n    this.field = v;\r\n  }\r\n\r\n  get FieldStorageList(){\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      field : this.Field,\r\n      items : this.Items.filter(x => x.Value).map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  get Description() {\r\n    var obj =  this.Values.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += ', ';\r\n      }\r\n      a += b;\r\n      return a;\r\n    }, '')\r\n\r\n    return `${this.Field}: ${obj}`;\r\n  }\r\n}","import { TLS_Filter } from \"./TLS_Filter\";\r\nimport { TLS_FilterValue } from \"./TLS_FilterValue\";\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Field = data.field;\r\n\r\n  if (data.items){\r\n    qI.Items = data.items.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x.value;\r\n      obj.InputType = x.inputType\r\n      return obj;\r\n    })\r\n  } else {\r\n    qI.Items = data.values.map(x => {\r\n      var obj = new TLS_FilterValue();\r\n      obj.Value = x;\r\n      return obj;\r\n    })\r\n  }\r\n\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_Filter();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}","import * as genUtil from '../../../../../../util/generalUtil'\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\nimport * as util from './TLS_PageItemUtil'\r\n\r\nexport class TLS_PageItem {\r\n  _id\r\n  get id(){\r\n    if (!this._id){\r\n      this._id = genUtil.newGUID();\r\n    }\r\n    return this._id;\r\n  }\r\n\r\n  Name = 'tên setting'\r\n\r\n  get Index (){\r\n    return this.Dict.PageItems.indexOf(this);\r\n  }\r\n\r\n  Delete = () => {\r\n    this.Dict.PageItems.splice(this.Index, 1);\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict.Setting;\r\n  }\r\n\r\n  // Level Groups\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n\r\n  levelGroups\r\n  get LevelGroups(){\r\n    if (!this.levelGroups){\r\n      this.levelGroups = util.GetLevelGroups(this);\r\n    }\r\n    return this.levelGroups;\r\n  } set LevelGroups(v){\r\n    this.levelGroups = v;\r\n  }\r\n\r\n  AddLevelGroup = () => {\r\n    var item = levelGroupUtil.GetDefault(this);\r\n    this.LevelGroups.push(item);\r\n    return item;\r\n  }\r\n\r\n  // Filter\r\n  filters\r\n  get Filters(){\r\n    if (!this.filters){\r\n      this.filters = util.GetFilters(this);\r\n    }\r\n    return this.filters;\r\n  } set Filters(v){\r\n    this.filters = v;\r\n  }\r\n\r\n  AddFilter = () => {\r\n    var item = filterUtil.GetDefault(this);\r\n    this.Filters.push(item);\r\n    return item;\r\n  }\r\n\r\n  get FilterDescription() {\r\n    var obj = this.Filters.reduce((a,b,i,arr) => {\r\n      if (arr.indexOf(b) !== 0){\r\n        a += '; ';\r\n      }\r\n      a += b.Description;\r\n      return a;\r\n    }, '')\r\n    return obj;\r\n  }\r\n\r\n  get ApiData() {\r\n    var obj = {\r\n      name: this.Name,\r\n      levelGroups : this.LevelGroups.map(x => x.ApiData).filter(x => x.levels.length !== 0),\r\n      filters : this.Filters.map(x => x.ApiData)\r\n    }\r\n    return obj;\r\n  }\r\n}","import { TLS_PageItem } from \"./TLS_PageItem\"\r\nimport * as levelGroupUtil from '../levelGroup/LevelGroupUtil'\r\nimport * as filterUtil from '../filter/TLS_FilterUtil'\r\n\r\n// Instance\r\nexport const get = (data, dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = data.name;\r\n  qI.Filters = data.filters.map(x => filterUtil.get(x, qI));\r\n  qI.LevelGroups = data.levelGroups ? data.levelGroups.map(x => levelGroupUtil.get(x, qI))\r\n     : data.levels.map(x => levelGroupUtil.get(x, qI))\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = (dict) => {\r\n  var qI = new TLS_PageItem();\r\n  qI.Name = 'setting 1';\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetLevelGroups = (q) => {\r\n  return [ levelGroupUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetFilters = (q) => {\r\n  return [ filterUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport class TypicalLevelSettingData {\r\n  // Setting\r\n  get Setting() {\r\n    return this.Dict;\r\n  }\r\n\r\n  get LevelStorageList() {\r\n    return this.Dict.LevelStorageList;\r\n  }\r\n  \r\n  // Page Item\r\n  pageItems\r\n  get PageItems(){\r\n    if (!this.pageItems){\r\n      this.pageItems = util.GetPageItems(this);\r\n    }\r\n    return this.pageItems;\r\n  } set PageItems(v){\r\n    this.pageItems = v;\r\n  }\r\n\r\n  get FieldFilterStorageList() {\r\n    return this.Dict.FieldFilterStorageList;\r\n  }\r\n\r\n  AddPageItem = () => {\r\n    var item = pageItemUtil.GetDefault(this);\r\n    this.PageItems.push(item);\r\n    item.Name = `setting ${item.Index +1}`\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return {\r\n      pageItems : this.PageItems.map(x => x.ApiData)\r\n    }\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSettingData } from './TypicalLevelSettingData';\r\nimport * as pageItemUtil from './pageItem/TLS_PageItemUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.PageItems = data.pageItems.map(x => pageItemUtil.get(x, qI));\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (dict) => {\r\n  var qI = new TypicalLevelSettingData();\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const GetPageItems = (q) => {\r\n  return [ pageItemUtil.GetDefault(q) ]\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './TypicalLevelSettingUtil'\r\n\r\nexport class TypicalLevelSetting extends Setting {\r\n  fieldFilterStorageList\r\n  get FieldFilterStorageList(){\r\n    if (!this.fieldFilterStorageList){\r\n      this.fieldFilterStorageList = util.GetFieldFilterStorageList();\r\n    }\r\n    return this.fieldFilterStorageList;\r\n  }\r\n\r\n  Save = () => {\r\n    util.SaveDatabase(this)\r\n  }\r\n\r\n  levelStorageList\r\n  get LevelStorageList(){\r\n    if (!this.levelStorageList){\r\n      this.levelStorageList = util.GetLevelStorageList(this);\r\n    }\r\n    return this.levelStorageList;\r\n  } set LevelStorageList(v){\r\n    this.levelStorageList = v;\r\n    this.GetLevelStorageList = true;\r\n  }\r\n\r\n  OnGetLevelStorageList_Funcs = []\r\n\r\n  set GetLevelStorageList(v){\r\n    this.OnGetLevelStorageList_Funcs.forEach(x => x());\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './TypicalLevelSettingDataUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport { TypicalLevelSetting } from './TypicalLevelSetting';\r\nimport * as st from '../base/SettingType'\r\nimport * as fieldUtil from '../../mass/item/MassItemField'\r\nimport { message } from 'antd';\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n// Instance\r\nexport const get = (data, project, phase) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.SettingType = data.settingType;\r\n  qI.Data = dataUtil.get(data.data, qI);\r\n  qI.Project = project;\r\n  qI.Phase = phase;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = (project) => {\r\n  var qI = new TypicalLevelSetting();\r\n\r\n  qI.Name = 'thiết lập ...';\r\n  qI.Description = 'Mô tả thiết lập ...';\r\n  qI.SettingType = st.typicallevel\r\n  qI.Data = dataUtil.GetTest(qI);\r\n  qI.Project = project;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetFromDb_Async = (project, phase, handle) => {\r\n  var apiData = {\r\n    projectId: project._id,\r\n    phaseId: phase?._id\r\n  }\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  const apiFunc = () => api.post(`${url}/get`, apiData)\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      var resData = data ? get(data, project, phase) : undefined;\r\n      var editData = resData ? resData : GetTest(project);\r\n      handle(resData, editData);\r\n    })\r\n}\r\n\r\n// Property\r\nexport const GetFieldFilterStorageList = () => {\r\n  return fieldUtil.GetListForTypicalLevelFilter();\r\n}\r\n\r\n// Method\r\nexport const SaveDatabase = (q) => {\r\n  var _id = q._id;\r\n  var apiData = q.ApiData;\r\n\r\n  var prefix = 'tl';\r\n  var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n  var isNew = _id ? true : false\r\n  const apiFunc = () => isNew ?\r\n    api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      if (isNew) q._id = data._id\r\n      message.success('add setting successfully!');\r\n    })\r\n}\r\n\r\nexport const GetLevelStorageList = (q) => {\r\n  var level_Dict = q.Project.Level_Dict;\r\n\r\n  const getLevelsFunc = (items) => {\r\n    return items.map(x => x.Name);\r\n  }\r\n\r\n  if (level_Dict.Items) {\r\n    return getLevelsFunc(level_Dict.Items);\r\n  } else {\r\n    level_Dict.OnGetItemsDone_Funcs.push(() => {\r\n      q.LevelStorageList = getLevelsFunc(level_Dict.Items);\r\n    });\r\n  }\r\n}\r\n","import * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\nexport default class Phase {\r\n  exportSetVersions\r\n  get ExportSetVersions(){\r\n    return this.exportSetVersions;\r\n  }\r\n  set ExportSetVersions(v){\r\n    this.exportSetVersions = v;\r\n    this.exportSetVersionIds = v.map(x => x._id);\r\n  }\r\n\r\n  OnGetExportSetVersions_Func = [];\r\n\r\n  set GetExportSetVersions(v){\r\n    this.OnGetExportSetVersions_Func.forEach(x => x());\r\n  }\r\n\r\n  exportSetVersionIds\r\n\r\n  get Project(){\r\n    return this.Dict.Dict;\r\n  }\r\n\r\n  OnGetTypicalLevelSetting_Funcs = []\r\n\r\n  set GetTypicalLevelSetting(v) {\r\n    this.OnGetTypicalLevelSetting_Funcs.forEach(x => x());\r\n  }\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this.Project, this, \r\n          (resData, editData) => {\r\n          this.TypicalLevelSetting = resData;\r\n          this.GetTypicalLevelSetting = true\r\n        })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport Phase from './Phase';\r\n\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Phase();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.Dict = dict;\r\n\r\n  GetExportSetVersionData(q._id, (data) => {\r\n    qI.ExportSetVersions = data;\r\n    qI.GetExportSetVersions = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbphase/list?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}\r\n\r\nexport const GetExportSetVersionData = (phaseId, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/byphase?phaseId=${phaseId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      if (handle) {\r\n        handle(data);\r\n      }\r\n    });\r\n}","import { message } from 'antd';\r\nimport * as util from './Phase_DictUtil'\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as itemUtil from './PhaseUtil'\r\nimport * as settingUtil from '../setting/base/SettingUtil'\r\n\r\nexport class Phase_Dict {\r\n  get Project() {\r\n    return this.Dict;\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = util.GetInput(this);\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n  \r\n  AddMassVersion = () => {\r\n    var apiData = this.Input.ApiData;\r\n    var url = `https://api.bimdev.vn/api/hbphase`;\r\n\r\n    const apiFunc = () => api.put(`${url}/mass/add`, apiData);\r\n    var project = this.Project;\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        var item = itemUtil.get(data, this);\r\n        this.Add(item);\r\n        message.success(\"create version successfully!\");\r\n\r\n        settingUtil.AddPhase(project._id, data._id);\r\n      })\r\n\r\n    // Thêm version mới cho InputExportSet sau khi lưu version\r\n    var addVersionFunc = (exportSet) => exportSet.AddVersion();\r\n\r\n    var inputExportSet = project.InputExportSet;\r\n    if (!inputExportSet){\r\n      project.OnGetInputExportSetDone_Funcs.push(() => {\r\n        inputExportSet = project.InputExportSet;\r\n        addVersionFunc(inputExportSet);\r\n      })\r\n    }else{\r\n      addVersionFunc(inputExportSet);\r\n    }\r\n  }\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../../util/apiUtil'\r\n\r\nexport const AddPhase = (projectId, phaseId) => {\r\n  var apiData = {\r\n    projectId, phaseId\r\n  }\r\n  var url = `https://api.bimdev.vn/api/hbs`;\r\n\r\n  const apiFunc = () => api.post(`${url}/addphase`, apiData);\r\n\r\n  apiFunc().then(response => response.data)\r\n    .then(data => {\r\n      message.success(\"attach phase to settings successfully!\");\r\n    })\r\n}","export default class PhaseInput {\r\n  get ApiData(){\r\n    var projectId = this.Dict.Dict._id;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n\r\n    return {\r\n      projectId, name, description\r\n    }\r\n  }\r\n}","import { Phase_Dict } from \"./Phase_Dict\";\r\nimport * as phaseUtil from './PhaseUtil'\r\nimport * as inputUtil from './PhaseInputUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Phase_Dict();\r\n  qI.Dict = project;\r\n\r\n  phaseUtil.getByProject(project._id, (data) => {\r\n    qI.Items = data.map(x => phaseUtil.get(x, qI));\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetInput = (q) => {\r\n  return inputUtil.get(q);\r\n}","import PhaseInput from './PhaseInput';\r\n\r\nexport const get = (dict) => {\r\n  var qI = new PhaseInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Version 1';\r\n  qI.Description = 'mô tả phiên bản';\r\n\r\n  return qI;\r\n}","import RebarMass_Dict from '../mass/rebar/RebarMass_Dict';\r\nimport * as phaseDictUtil from '../phase/Phase_DictUtil'\r\nimport * as util from './ProjectUtil'\r\nimport * as typicalLevelUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\nexport default class Project {\r\n  phase_Dict\r\n  get Phase_Dict() {\r\n    if (!this.phase_Dict) {\r\n      this.phase_Dict = phaseDictUtil.get(this);\r\n    }\r\n    return this.phase_Dict;\r\n  }\r\n\r\n  rebarMass_Dict\r\n  get RebarMass_Dict() {\r\n    if (!this.rebarMass_Dict) {\r\n      this.rebarMass_Dict = util.GetRebarMass_Dict(this);\r\n    }\r\n    return this.rebarMass_Dict;\r\n  }\r\n\r\n  inputExportSet\r\n  get InputExportSet() {\r\n    if (!this.inputExportSet) {\r\n      util.GetInputExportSet_Async(this);\r\n    }\r\n    return this.inputExportSet;\r\n  }\r\n  set InputExportSet(v) {\r\n    this.inputExportSet = v;\r\n    this.GetInputExportSetDone = true;\r\n  }\r\n\r\n  OnGetInputExportSetDone_Funcs = []\r\n\r\n  getInputExportSetDone\r\n  get GetInputExportSetDone() {\r\n    return this.getInputExportSetDone;\r\n  }\r\n  set GetInputExportSetDone(v) {\r\n    this.getInputExportSetDone = v;\r\n    this.OnGetInputExportSetDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  level_Dict\r\n  get Level_Dict() {\r\n    if (!this.level_Dict) {\r\n      this.level_Dict = util.GetLevel_Dict(this);\r\n    }\r\n    return this.level_Dict;\r\n  }\r\n\r\n  OnGetTypicalLevelSetting_Funcs = []\r\n\r\n  set GetTypicalLevelSetting(v) {\r\n    this.OnGetTypicalLevelSetting_Funcs.forEach(x => x());\r\n  }\r\n\r\n  IsOnGetDb_Async\r\n\r\n  typicalLevelSetting\r\n  get TypicalLevelSetting() {\r\n    if (!this.typicalLevelSetting) {\r\n      if (!this.IsOnGetDb_Async) {\r\n        this.IsOnGetDb_Async = true;\r\n        typicalLevelUtil.GetFromDb_Async(this, null, \r\n          (resData, editData) => {\r\n          this.TypicalLevelSetting = resData;\r\n          this.TypicalLevelSetting_ForEdit = editData;\r\n          this.GetTypicalLevelSetting = true\r\n        })\r\n      }\r\n    }\r\n    return this.typicalLevelSetting;\r\n  }\r\n  set TypicalLevelSetting(v) {\r\n    this.typicalLevelSetting = v;\r\n  }\r\n\r\n  typicalLevelSetting_ForEdit\r\n  get TypicalLevelSetting_ForEdit() {\r\n    if (!this.typicalLevelSetting_ForEdit) {\r\n      this.typicalLevelSetting_ForEdit = this.TypicalLevelSetting;\r\n    }\r\n    return this.typicalLevelSetting_ForEdit;\r\n  } set TypicalLevelSetting_ForEdit(v) {\r\n    this.typicalLevelSetting_ForEdit = v;\r\n  }\r\n\r\n  url\r\n  get Url() {\r\n    if (!this.url) {\r\n      var isHash = true;\r\n      var obj = `${process.env.PUBLIC_URL}${isHash ? '/#' : ''}/project`;\r\n      obj = `${obj}/${this._id}`;\r\n\r\n      this.url = obj;\r\n    }\r\n    return this.url;\r\n  }\r\n}","import * as util from './ExportSetUtil'\r\n\r\nexport class ExportSet {\r\n  currentVersion\r\n  get CurrentVersion(){\r\n    if (!this.currentVersion){\r\n      util.GetCurrentVersion_Async(this);\r\n    }\r\n    return this.currentVersion;\r\n  }\r\n  set CurrentVersion(v){\r\n    this.currentVersion = v;\r\n    this.GetCurrentVersionDone = v;\r\n  }\r\n\r\n  OnGetCurrentVersionDone_Func =[]\r\n\r\n  set GetCurrentVersionDone(v){\r\n    this.OnGetCurrentVersionDone_Func.forEach(x => x());\r\n  }\r\n\r\n  AddVersion = () => {\r\n    util.AddVersion_Async(this);\r\n  }\r\n}","export class ExportSetVersion {\r\n  \r\n}","import * as api from  '../../../../util/apiUtil'\r\nimport { ExportSetVersion } from \"./ExportSetVersion\";\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSetVersion();\r\n  qI._id = data._id;\r\n  return qI;\r\n}\r\n\r\nexport const getLastestByExportSet = (exportSetId, handle) => {\r\n  if (!exportSetId) return;\r\n  var url = `https://api.bimdev.vn/api/hbesv/last?exportSetId=${exportSetId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbesv/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","import { ExportSet } from \"./ExportSet\"\r\nimport * as api from  '../../../../util/apiUtil'\r\nimport * as versionUtil from './ExportSetVersionUtil'\r\n\r\nexport const get = (data) => {\r\n  var qI = new ExportSet();\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.RetrieveFrom = data.retrieveFrom;\r\n  return qI;\r\n}\r\n\r\nexport const GetCurrentVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  versionUtil.getLastestByExportSet(exportSetId, (item) => {\r\n    if (!item) {\r\n      AddVersion_Async(q);\r\n    } else {\r\n      q.CurrentVersion = item;\r\n    }\r\n  })\r\n}\r\n\r\nexport const AddVersion_Async = (q) => {\r\n  var exportSetId = q._id;\r\n\r\n  var apiData = {\r\n    exportSetId\r\n  }\r\n\r\n  versionUtil.add(apiData, (addItem) => {\r\n    q.CurrentVersion = addItem;\r\n  })\r\n}\r\n\r\nexport const getByProject = (projectId, handle) => {\r\n  if (!projectId) return;\r\n  var url = `https://api.bimdev.vn/api/hbes/input?projectId=${projectId}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = data ? get(data) : data;\r\n      handle(item);\r\n    });\r\n}\r\n\r\nexport const add = (apiData, handle) => {\r\n  var url = `https://api.bimdev.vn/api/hbes/add`;\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      handle(item);\r\n    });\r\n}","export class Level_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","export class Level\r\n{\r\n  Name\r\n  Elevation\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { Level } from \"./Level\"\r\n\r\nexport const get = (data, dict) => {\r\n  var qI = new Level();\r\n  qI.Name = data.name;\r\n  qI.Elevation = data.elevation;\r\n  qI.Dict = dict;\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (apiData, dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbl/list\";\r\n  api.post(url, apiData).then(response => response.data)\r\n    .then(data => {\r\n      if (!data) data = []\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport Project from './Project';\r\nimport * as rebarMassDictUtil from '../mass/rebar/RebarMass_DictUtil'\r\nimport * as exportSetUtil from '../exportset/ExportSetUtil'\r\nimport * as vrf from '../value/ValueRetrieveFrom'\r\nimport * as levelDictUtil from '../level/Level_DictUtil'\r\nimport * as levelTypicalUtil from '../setting/typicallevel/TypicalLevelSettingUtil'\r\n\r\n// Instance\r\nexport const get = (q, dict) => {\r\n  if (!q) return undefined;\r\n\r\n  var qI = new Project();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Code = q.code;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const getById = (_id, handle) => {\r\n  if (!_id) return undefined;\r\n  var url = `https://api.bimdev.vn/api/hbp/get?id=${_id}`;\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var item = get(data);\r\n      if (handle) {\r\n        handle(item);\r\n      }\r\n    });\r\n}\r\n\r\n// Property\r\nexport const GetRebarMass_Dict = (q) => {\r\n  return rebarMassDictUtil.get(q);\r\n}\r\n\r\nexport const GetInputExportSet_Async = (q) => {\r\n  var projectId = q._id;\r\n\r\n  exportSetUtil.getByProject(projectId, (item) => {\r\n    if (!item) {\r\n      var apiData = {\r\n        projectId,\r\n        name: 'Dữ liệu khối lượng input',\r\n        description: 'mô tả dữ liệu',\r\n        retrieveFrom: vrf.input\r\n      }\r\n      exportSetUtil.add(apiData, (addItem) => {\r\n        q.InputExportSet = addItem;\r\n      })\r\n    } else {\r\n      q.InputExportSet = item;\r\n    }\r\n  })\r\n}\r\n\r\nexport const GetLevel_Dict = (q) => {\r\n  return levelDictUtil.get(q)\r\n}\r\n\r\nexport const GetTypicalLevelSetting = (q) => {\r\n  return levelTypicalUtil.GetTest(q);\r\n}","export const model = \"model\";\r\nexport const input = \"input\";","import { Level_Dict } from \"./Level_Dict\"\r\nimport * as itemUtil from './LevelUtil'\r\n\r\nexport const get = (project) => {\r\n  var qI = new Level_Dict();\r\n  qI.Project = project;\r\n\r\n  itemUtil.getAll({ projectId : project._id }, qI, (items) => {\r\n    qI.Items = items.sort((a,b) => a.Elevation - b.Elevation);\r\n    qI.GetItemsDone = true;\r\n  })\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ProjectUtil'\r\n\r\nexport class Project_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class ElementFilterSetting extends Setting {\r\n  \r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './ElementFilterSettingDataUtil'\r\n\r\nexport default class ElementFilterSettingData {\r\n  CategoryFilter\r\n\r\n  IsHaveFamilyFilter\r\n\r\n  FamilyFilter\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter';\r\nimport * as filterUtil from '../../filter/EntFilterUtil'\r\nimport ElementFilterSettingData from './ElementFilterSettingData';\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as sft from '../../filter/StringFilterType'\r\nimport * as fct from '../../filter/FilterCategoryType'\r\n\r\nexport const get = (q) => {\r\n  var qI = new ElementFilterSettingData();\r\n  qI.CategoryFilter = filterUtil.get(q.categoryFilter);\r\n  return qI;\r\n}\r\n\r\nexport const getDefault = () => {\r\n  var qI = new ElementFilterSettingData();\r\n\r\n  var cateFilter = new EntFilter();\r\n  cateFilter.CategoryType = fct.category;\r\n  cateFilter.ValueType = fvt.bystring;\r\n  cateFilter.StringFilterType = sft.byequal;\r\n  cateFilter.Values = ['Floors'];\r\n  qI.CategoryFilter = cateFilter;\r\n\r\n  qI.IsHaveFamilyFilter = false;\r\n\r\n  var familyFilter = new EntFilter();\r\n  familyFilter.CategoryType = fct.family;\r\n  familyFilter.ValueType = fvt.bystring;\r\n  familyFilter.StringFilterType = sft.byequal;\r\n  familyFilter.Values = [];\r\n  qI.FamilyFilter = familyFilter;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    categoryFilter : q.CategoryFilter.ApiData,\r\n    familyFilter : q.IsHaveFamilyFilter ? \r\n      q.FamilyFilter.ApiData : undefined\r\n  }\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport ElementFilterSetting from \"./ElementFilterSetting\"\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new ElementFilterSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/ef/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as util from './SettingInputUtil'\r\n\r\nexport default class SettingInput {\r\n  Name\r\n  Description\r\n  SettingType\r\n\r\n  data\r\n  get Data() {\r\n    if (!this.data) {\r\n      this.data = this.GetData();\r\n    }\r\n    return this.data;\r\n  }\r\n  set Data(v) {\r\n    this.data = v;\r\n  }\r\n\r\n  GetData = () => {\r\n    if (this.OnGetData) {\r\n      return this.OnGetData();\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  editItem\r\n  get EditItem(){\r\n    return this.editItem;\r\n  }\r\n  set EditItem(v){\r\n    this.editItem = v;\r\n    if (!v){\r\n      this.EditItemId = undefined;\r\n    }\r\n    else{\r\n      this.EditItemId = v._id;\r\n    }\r\n  }\r\n\r\n\r\n  EditItemId\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.EditItem = undefined;\r\n    }\r\n  }\r\n\r\n  urlPrefix\r\n  get UrlPrefix() {\r\n    if (!this.urlPrefix){\r\n      this.urlPrefix = util.GetUrlPrefix(this);\r\n    }\r\n    return this.urlPrefix;\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.EditItemId;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var settingType = this.SettingType;\r\n    var data = this.Data.ApiData;\r\n    var prefix = this.UrlPrefix;\r\n\r\n    var apiData = {\r\n      _id, name, description, settingType, data\r\n    }\r\n    var url = `https://api.bimdev.vn/api/hbs/${prefix}`;\r\n\r\n    const apiFunc = () => _id ?\r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n    \r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewItem = this.GetEditItem(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n}","import * as st from './SettingType'\r\n\r\nexport const GetUrlPrefix = (q) => {\r\n  var prefix = undefined\r\n  switch (q.SettingType) {\r\n    case st.elementfilter:\r\n      prefix = 'ef';\r\n      break;\r\n    case st.massexport:\r\n      prefix = 'me';\r\n      break;\r\n    case st.massgroup:\r\n      prefix = 'mg';\r\n      break;\r\n  }\r\n  return prefix;\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as elementFilterSettingUtil from './ElementFilterSettingUtil'\r\n\r\nexport default class ElementFilterSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return elementFilterSettingUtil.get(data, dict);\r\n  }\r\n}","import ElementFilterSettingInput from \"./ElementFilterSettingInput\";\r\nimport * as dataUtil from './ElementFilterSettingDataUtil'\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new ElementFilterSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bộ lọc cột';\r\n  qI.Description = 'mô tả bộ lọc';\r\n  qI.SettingType = st.elementfilter;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.getDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './ElementFilterSettingUtil'\r\nimport * as inputUtil from './ElementFilterSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class ElementFilterSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as util from './MassExportSettingDataUtil'\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\nimport { reaction } from \"mobx\";\r\n\r\nexport default class MassExportSettingData {\r\n  elementFilterId\r\n\r\n  elementFilter\r\n  get ElementFilter(){\r\n    if (!this.elementFilter){\r\n      this.elementFilter = util.GetElementFilter(this);\r\n    }\r\n    return this.elementFilter;\r\n  }\r\n  set ElementFilter(v) {\r\n    this.elementFilter = v;\r\n    if (!v){\r\n      this.elementFilterId = undefined;\r\n    }\r\n    else{\r\n      this.elementFilterId = v._id;\r\n    }\r\n  }\r\n\r\n  valueSettings\r\n  get ValueSettings(){\r\n    if (!this.valueSettings){\r\n      this.valueSettings = util.GetDefaultValueSettings(this);\r\n    }\r\n    return this.valueSettings;\r\n  }\r\n  set ValueSettings(v){\r\n    this.valueSettings = v;\r\n  }\r\n\r\n  AddNewValueSetting = () => {\r\n    var modelList = this.ValueSettings;\r\n    var item = valueSettingUtil.GetDefault(this);\r\n    modelList.push(item);\r\n\r\n    return item;\r\n  }\r\n\r\n  get ApiData() {\r\n    return util.GetApiData(this);\r\n  }\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport MassExportSettingData from './MassExportSettingData';\r\nimport * as valueSettingUtil from './exportSetting/MES_ValueSettingUtil'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (q) => {\r\n  var qI = new MassExportSettingData();\r\n  qI.elementFilterId = q.elementFilterId;\r\n  qI.ValueSettings = q.exportSettings.map(x => valueSettingUtil.get(x, qI));\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassExportSettingData();\r\n  return qI;\r\n}\r\n\r\nexport const GetElementFilter = (q) => {\r\n  var elemFilterId = q.elementFilterId;\r\n  if (!elemFilterId) return undefined;\r\n\r\n  var list = pmData().ElementFilterSetting_Dict.Items;\r\n  if (!list) return undefined;\r\n\r\n  var index = list.findIndex(x => x._id === elemFilterId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetDefaultValueSettings = (q) => {\r\n  return [ valueSettingUtil.GetDefault(q) ]\r\n}\r\n\r\nexport const GetApiData = (q) => {\r\n  return {\r\n    elementFilterId : q.elementFilterId,\r\n    exportSettings : q.ValueSettings.map(x => x.ApiData)\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\n\r\nexport default class MassExportSetting extends Setting {\r\n  \r\n}","import * as api from '../../../../../util/apiUtil'\r\nimport * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSetting from './MassExportSetting';\r\n\r\nexport const get = (q, dict) => {\r\n  var qI = new MassExportSetting();\r\n\r\n  qI._id = q._id;\r\n  qI.Name = q.name;\r\n  qI.Description = q.description;\r\n  qI.SettingType = q.settingType;\r\n  qI.Data = dataUtil.get(q.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbs/me/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var items = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}","import Setting from \"../base/Setting\";\r\nimport SettingInput from \"../base/SettingInput\";\r\nimport * as massExportSettingUtil from './MassExportSettingUtil'\r\n\r\nexport default class MassExportSettingInput extends SettingInput {\r\n  GetEditItem = (data, dict) => {\r\n    return massExportSettingUtil.get(data, dict);\r\n  }\r\n}","import * as dataUtil from './MassExportSettingDataUtil'\r\nimport MassExportSettingInput from \"./MassExportSettingInput\";\r\nimport * as st from '../base/SettingType'\r\n\r\nexport const get = (dict) => {\r\n  var qI = new MassExportSettingInput();\r\n  qI.Dict = dict;\r\n  qI.Name = 'Bêtông sàn';\r\n  qI.Description = 'mô tả thiết lập';\r\n  qI.SettingType = st.massexport;\r\n\r\n  qI.OnGetData = () => {\r\n    return dataUtil.GetDefault();\r\n  }\r\n\r\n  return qI;\r\n}","import * as itemUtil from './MassExportSettingUtil'\r\nimport * as inputUtil from './MassExportSettingInputUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassExportSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  set GetItemsDone (v){\r\n    if (this.OnGetItemsDone){\r\n      this.OnGetItemsDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  input\r\n  get Input(){\r\n    if (!this.input){\r\n      this.input = this.GetInput();\r\n    }\r\n    return this.input;\r\n  }\r\n\r\n  GetInput(){\r\n    return inputUtil.get(this);\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.Input;\r\n\r\n    if (!input.IsNew){\r\n      var item = input.EditItem;\r\n      var action = () => {\r\n        item.Name = input.Name;\r\n        item.Description = input.Description;\r\n        item.Data = input.Data;\r\n      }\r\n      genUtil.UpdateFromModel(item, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewItem);\r\n    }\r\n  }\r\n}","import * as itemUtil from './MassGroupSettingUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassGroupSetting_Dict {\r\n  constructor(){\r\n    itemUtil.getAll(this, (items) => {\r\n      this.Items = items;\r\n      this.GetItemsDone = true;\r\n    })\r\n  }\r\n\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  CurrentItem\r\n\r\n  Add = (item) => {\r\n    this.Items.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n}","\r\nexport default class VCS_Item{\r\n  Color\r\n  Filter\r\n}","import * as util from './VersionCompareSettingUtil'\r\n\r\nexport default class VersionCompareSetting{\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems();\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { EntFilter } from '../../filter/EntFilter'\r\nimport * as fvt from '../../filter/FilterValueType'\r\nimport * as nft from '../../filter/NumberFilterType'\r\nimport VCS_Item from \"./VCS_Item\";\r\n\r\nexport const GetItems = (q) => {\r\n  var list = [];\r\n\r\n  // < 80\r\n  var item = new VCS_Item();\r\n  item.Color = '#1956c9';\r\n\r\n  var filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bysmaller;\r\n  filter.Values = [ 0.80 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n  // 80 -85\r\n  item = new VCS_Item();\r\n  item.Color = '#3f79d6';\r\n\r\n  filter = new EntFilter();\r\n  filter.ValueType = fvt.bynumber;\r\n  filter.NumberFilterType = nft.bybetween;\r\n  filter.IsEqualLeft = true;\r\n  filter.Values = [ 0.80, 0.85 ];\r\n  item.Filter = filter;\r\n\r\n  list.push(item);\r\n\r\n   // 85 -90\r\n   item = new VCS_Item();\r\n   item.Color = '#6f9fe9';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.85, 0.90 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 90 -95\r\n   item = new VCS_Item();\r\n   item.Color = '#a5c2f2';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.9, 0.95 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 95 -100\r\n   item = new VCS_Item();\r\n   item.Color = '#c9d9f6';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualLeft = true;\r\n   filter.Values = [ 0.95, 1 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 100 -105\r\n   item = new VCS_Item();\r\n   item.Color = '#f3cccc';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1, 1.05 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n   // 105 -110\r\n   item = new VCS_Item();\r\n   item.Color = '#e9999a';\r\n \r\n   filter = new EntFilter();\r\n   filter.ValueType = fvt.bynumber;\r\n   filter.NumberFilterType = nft.bybetween;\r\n   filter.IsEqualRight = true;\r\n   filter.Values = [ 1.05, 1.10 ];\r\n   item.Filter = filter;\r\n \r\n   list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#de6568';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.10, 1.15 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 110 -115\r\n    item = new VCS_Item();\r\n    item.Color = '#c90010';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybetween;\r\n    filter.IsEqualRight = true;\r\n    filter.Values = [ 1.15, 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    // 115 -120\r\n    item = new VCS_Item();\r\n    item.Color = '#980009';\r\n  \r\n    filter = new EntFilter();\r\n    filter.ValueType = fvt.bynumber;\r\n    filter.NumberFilterType = nft.bybigger;\r\n    filter.Values = [ 1.20 ];\r\n    item.Filter = filter;\r\n  \r\n    list.push(item);\r\n\r\n    return list;\r\n}","\r\nexport class WorkItemExportSetting_Dict {\r\n  Items\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n}","export class TrackingItem{\r\n  Values = []\r\n\r\n  Count = 0\r\n}","import * as genUtil from '../../../../util/generalUtil'\r\nimport { TrackingItem } from './TrackingItem';\r\n\r\nexport class Tracking{\r\n  Items = []\r\n\r\n  AddItem = (values) => {\r\n    var list = this.Items;\r\n    var item = undefined;\r\n    var index = list.findIndex(x => genUtil.IsSameValues(x.Values, values));\r\n    if (index === -1){\r\n      item = new TrackingItem();\r\n      item.Values = values;\r\n      list.push(item);\r\n    } else {\r\n      item = list[index];\r\n    }\r\n\r\n    item.Count ++;\r\n    return item;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\n\r\nexport class WorkpackageInput {\r\n  Code\r\n  // = \"300\"\r\n  Name\r\n  // = \"Lắp đặt cốp thép\"\r\n  Description = 'mô tả công tác'\r\n  // = \"Mô tả quá trình lắp cốp thép\"\r\n\r\n  isNew = true;\r\n  get IsNew(){\r\n    return this.isNew;\r\n  }\r\n  set IsNew(v){\r\n    this.isNew = v;\r\n    if (v){\r\n      this.Workpackage = undefined;\r\n    }\r\n  }\r\n\r\n  workpackage\r\n  get Workpackage() {\r\n    return this.workpackage;\r\n  }\r\n  set Workpackage(v){\r\n    this.workpackage = v;\r\n    if (!v){\r\n      this.WorkpackageId = undefined;\r\n    }\r\n    else{\r\n      this.WorkpackageId = v._id;\r\n    }\r\n  }\r\n\r\n  WorkpackageId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    return this.supItem;\r\n  }\r\n  set SupItem(v){\r\n    this.supItem = v;\r\n    if (!v){\r\n      this.SupId = undefined;\r\n    }\r\n    else{\r\n      this.SupId = v._id;\r\n    }\r\n  }\r\n\r\n  SupId\r\n\r\n  set AddDatabaseDone(v) {\r\n    if (this.OnAddDatabaseDone){\r\n      this.OnAddDatabaseDone(v);\r\n    }\r\n  }\r\n\r\n  AddDatabase = () => {\r\n    var _id = this.WorkpackageId;\r\n    var code = this.Code;\r\n    var name = this.Name;\r\n    var description = this.Description;\r\n    var supId = this.SupId;\r\n\r\n    var apiData = {\r\n      _id, name, code, description, supId\r\n    };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp\";\r\n\r\n    const apiFunc =  () =>  _id ? \r\n      api.put(`${url}/edit`, apiData) : api.post(`${url}/add`, apiData);\r\n\r\n    apiFunc().then(response => response.data)\r\n      .then(data => {\r\n        this.AddDatabaseDone = true;\r\n        this.NewWorkpackage = workpackageUtil.get(data, this.Dict);\r\n        this.Dict.Update();\r\n      })\r\n  }\r\n\r\n  UpdateWorkpackage\r\n}","import { WorkpackageInput } from './WorkpackageInput';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as genUtil from '../../../../util/generalUtil'\r\n\r\nexport class Workpackage_Dict {\r\n  constructor() {\r\n    workpackageUtil.getAll(this, (wps) => {\r\n      this.Workpackages = wps;\r\n      this.GetWorkpackagesDone = true;\r\n    });\r\n  }\r\n\r\n  Workpackages\r\n\r\n  set GetWorkpackagesDone(v) {\r\n    if (this.OnGetWorkpackagesDone) {\r\n      this.OnGetWorkpackagesDone(v);\r\n    }\r\n  }\r\n\r\n  CurrentWorkpackage\r\n\r\n  workpackageInput\r\n  get WorkpackageInput() {\r\n    if (!this.workpackageInput){\r\n      var obj = this.workpackageInput = new WorkpackageInput();\r\n      obj.Dict = this;\r\n    }\r\n    return this.workpackageInput;\r\n  }\r\n\r\n  Add = (item) => {\r\n    this.Workpackages.push(item);\r\n    if (this.OnAdd){\r\n      this.OnAdd(item);\r\n    }\r\n  }\r\n\r\n  Update = () => {\r\n    var input = this.WorkpackageInput;\r\n    var wp = input.Workpackage;\r\n\r\n    if (!input.IsNew){\r\n      var action = () => { \r\n        wp.Code = input.Code;\r\n        wp.Name = input.Name;\r\n        wp.Description = input.Description;\r\n        wp.FullName = wp.GetFullName();\r\n      };\r\n      genUtil.UpdateFromModel(wp, action);\r\n    }\r\n    else{\r\n      this.Add(input.NewWorkpackage);\r\n    }\r\n\r\n    this.IsDataChanged = true;\r\n  }\r\n\r\n  IsDataChanged\r\n\r\n  RefreshData = () => {\r\n    this.Workpackages.forEach(x => {\r\n      x.SubItems = undefined;\r\n      x.UpperList = undefined;\r\n      x.LowerList = undefined;\r\n      x.Rank = undefined\r\n    })\r\n\r\n    this.IsDataChanged = false;\r\n  }\r\n}","export const url = 'https://api.bimdev.vn/api/hbs/md'","import Setting from \"../base/Setting\";\r\nimport * as util from './MassDetailSettingDataUtil'\r\nimport { reaction } from \"mobx\";\r\nimport { PMData } from \"../../../single/model/PMData\";\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class MassDetailSettingData {\r\n  Columns\r\n\r\n  MainMassType\r\n\r\n  get ApiData() {\r\n    return {\r\n      columns : this.Columns,\r\n      mainMassType : this.MainMassType\r\n    }\r\n  }\r\n}","import Setting from \"../base/Setting\";\r\nimport * as st from '../base/SettingType'\r\nimport {url} from './MassDetailSetting_Url'\r\n\r\nexport class MassDetailSetting extends Setting {\r\n\r\n  SettingType = st.massdetail\r\n\r\n  Url = url\r\n  \r\n}","import { url } from './MassDetailSetting_Url'\r\nimport * as dataUtil from './MassDetailSettingDataUtil'\r\nimport { MassDetailSetting } from './MassDetailSetting';\r\nimport * as api from '../../../../../util/apiUtil'\r\nimport { PMData } from '../../../single/model/PMData';\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Instance\r\nexport const GetFromDb = (data, dict) => {\r\n  if (!dict){\r\n    dict = pmData().MassDetailSetting_Dict\r\n  }\r\n\r\n  var qI = new MassDetailSetting();\r\n\r\n  qI._id = data._id;\r\n  qI.Name = data.name;\r\n  qI.Description = data.description;\r\n  qI.SettingType = data.settingType;\r\n  qI.Data = dataUtil.GetFromDb(data.data);\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  api.get(`${url}/list`).then(response => response.data)\r\n    .then(data => {\r\n      if (!data) return undefined\r\n      var items = data.map(x => GetFromDb(x, dict))\r\n      if (handle) {\r\n        handle(items);\r\n      }\r\n    });\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassDetailSetting();\r\n\r\n  qI.Dict = pmData().MassDetailSetting_Dict\r\n  qI.Data = dataUtil.GetDefault();\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  var qI = new MassDetailSetting();\r\n\r\n  qI.Name = q.Name;\r\n  qI.Description = q.Description;\r\n  qI.SettingType = q.SettingType;\r\n  qI.Data = dataUtil.Clone(q.Data);\r\n  qI.Dict = q.Dict;\r\n\r\n  return qI;\r\n}","import { PMData } from '../../../single/model/PMData';\r\nimport { MassDetailSettingData } from './MassDetailSettingData';\r\nimport * as mif from '../../mass/item/MassItemField'\r\nimport * as mt from '../../mass/MassType'\r\n\r\nexport const pmData = ()  =>{\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const GetFromDb = (data) => {\r\n  var qI = new MassDetailSettingData();\r\n  \r\n  qI.Columns = data.columns\r\n  qI.MainMassType = data.mainMassType;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetDefault = () => {\r\n  var qI = new MassDetailSettingData();\r\n\r\n  qI.Columns = [mif.Value, mif.Unit]\r\n  qI.MainMassType = mt.concrete\r\n\r\n  return qI;\r\n}\r\n\r\nexport const Clone = (q) => {\r\n  var qI = new MassDetailSettingData();\r\n  \r\n  qI.Columns = q.Columns\r\n  qI.MainMassType = q.MainMassType;\r\n\r\n  return qI;\r\n}","import * as itemUtil from './MassDetailSettingUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport class MassDetailSetting_Dict {\r\n  items\r\n  get Items(){\r\n    return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n    this.GetItemsDone = true;\r\n  }\r\n\r\n  OnGetItemsDone_Func_Dict = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Func_Dict.forEach(x => x.Value());\r\n  }\r\n}","import { MassDetailSetting_Dict } from \"./MassDetailSetting_Dict\"\r\nimport * as itemUtil from './MassDetailSettingUtil'\r\n\r\nexport const get = () => {\r\n  var qI = new MassDetailSetting_Dict();\r\n\r\n  itemUtil.getAll(qI, (items) => {\r\n    qI.Items = items;\r\n  })\r\n\r\n  return qI;\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport * as workPackageUtil from '../../entity/workpackage/WorkpackageUtil'\r\nimport * as fvt from '../../entity/filter/FilterValueType'\r\nimport * as sft from '../../entity/filter/StringFilterType'\r\nimport * as vrt from '../../entity/setting/massExport/exportSetting/MES_ValueRetrieveType'\r\nimport * as mpn from '../../entity/mass/MassPropertyName'\r\nimport * as mt from '../../entity/mass/MassType'\r\nimport * as mif from '../../entity/mass/item/MassItemField'\r\nimport * as massDetailSetting_DictUtil from '../../entity/setting/massDetail/MassDetailSetting_DictUtil'\r\n\r\nexport const GetFilterValueTypes = (data) => {\r\n  return fvt.GetAll();\r\n}\r\n\r\nexport const GetStringFilterTypes = (data) => {\r\n  return sft.GetAll();\r\n}\r\n\r\nexport const GetValueRetrieveTypes = (data) => {\r\n  return vrt.GetAll();\r\n}\r\n\r\nexport const GetCategoryNames = (data) => {\r\n  return ['Floors', 'Structural Framing', 'Walls', 'Structural Column']\r\n}\r\n\r\nexport const GetParameterNames = (data) => {\r\n  return ['Volume', 'HB_Formwork_Total']\r\n}\r\n\r\nexport const GetMassPropertyNames = (data) => {\r\n  return mpn.GetAll();\r\n}\r\n\r\nexport const GetMassItemFields = (data) => {\r\n  return mif.GetAll();\r\n}\r\n\r\nexport const GetMIFs_ForMassGroup = () => {\r\n  return mif.GetForMassGroup();\r\n}\r\n\r\nexport const GetMassTypes = (data) => {\r\n  return mt.GetAll();\r\n}\r\n\r\nexport const GetMassDetailSetting_Dict = (data) => {\r\n  return massDetailSetting_DictUtil.get();\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport MassResultComp from '../../entity/mass/result/MassResultComp';\r\nimport { Project_Dict } from '../../entity/project/Project_Dict';\r\nimport { ElementFilterSetting_Dict } from '../../entity/setting/elementFilter/ElementFilterSetting_Dict';\r\nimport { MassExportSetting_Dict } from '../../entity/setting/massExport/MassExportSetting_Dict';\r\nimport { MassGroupSetting_Dict } from '../../entity/setting/massGroup/MassGroupSetting_Dict';\r\nimport VersionCompareSetting from '../../entity/setting/versionCompare/VersionCompareSetting';\r\nimport { WorkItemExportSetting_Dict } from '../../entity/setting/workitemexport/WorkItemExportSetting_Dict';\r\nimport { Tracking } from '../../entity/tracking/Tracking';\r\nimport { Workpackage_Dict } from '../../entity/workpackage/Workpackage_Dict';\r\nimport { CategoryData } from './CategoryData';\r\nimport * as util from './PMDataUtil'\r\n\r\nexport class PMData {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  static instance\r\n  static get Instance(){\r\n    if (!this.instance){\r\n      this.instance = new PMData();\r\n    }\r\n    return this.instance;\r\n  }\r\n\r\n  get categoryData(){\r\n    return CategoryData.Instance;\r\n  }\r\n\r\n  workpackage_Dict\r\n  get Workpackage_Dict() {\r\n    if (!this.workpackage_Dict){\r\n      this.workpackage_Dict = new Workpackage_Dict();\r\n    }\r\n    return this.workpackage_Dict;\r\n  }\r\n\r\n  elementFilterSetting_Dict\r\n  get ElementFilterSetting_Dict() {\r\n    if (!this.elementFilterSetting_Dict){\r\n      this.elementFilterSetting_Dict = new ElementFilterSetting_Dict();\r\n    }\r\n    return this.elementFilterSetting_Dict;\r\n  }\r\n\r\n  massExportSetting_Dict\r\n  get MassExportSetting_Dict() {\r\n    if (!this.massExportSetting_Dict){\r\n      this.massExportSetting_Dict = new MassExportSetting_Dict();\r\n    }\r\n    return this.massExportSetting_Dict;\r\n  }\r\n\r\n  massGroupSetting_Dict\r\n  get MassGroupSetting_Dict() {\r\n    if (!this.massGroupSetting_Dict){\r\n      this.massGroupSetting_Dict = new MassGroupSetting_Dict();\r\n    }\r\n    return this.massGroupSetting_Dict;\r\n  }\r\n\r\n  project_Dict\r\n  get Project_Dict() {\r\n    if (!this.project_Dict){\r\n      this.project_Dict = new Project_Dict();\r\n    }\r\n    return this.project_Dict;\r\n  }\r\n\r\n  massResultComp\r\n  get MassResultComp(){\r\n    if (!this.massResultComp){\r\n      this.massResultComp = new MassResultComp();\r\n    }\r\n    return this.massResultComp;\r\n  }\r\n  set MassResultComp(v){\r\n    this.massResultComp = v;\r\n  }\r\n\r\n  filterValueTypes;\r\n  get FilterValueTypes() {\r\n    if (!this.filterValueTypes){\r\n      this.filterValueTypes = util.GetFilterValueTypes();\r\n    }\r\n    return this.filterValueTypes;\r\n  }\r\n\r\n  stringFilterTypes;\r\n  get StringFilterTypes() {\r\n    if (!this.stringFilterTypes){\r\n      this.stringFilterTypes = util.GetStringFilterTypes();\r\n    }\r\n    return this.stringFilterTypes;\r\n  }\r\n\r\n  valueRetrieveTypes\r\n  get ValueRetrieveTypes() {\r\n    if (!this.valueRetrieveTypes){\r\n      this.valueRetrieveTypes = util.GetValueRetrieveTypes();\r\n    }\r\n    return this.valueRetrieveTypes;\r\n  }\r\n\r\n  categoryNames;\r\n  get CategoryNames() {\r\n    if (!this.categoryNames){\r\n      this.categoryNames = this.categoryData.CategoryNames;\r\n    }\r\n    return this.categoryNames;\r\n  }\r\n\r\n  parameterNames;\r\n  get ParameterNames(){\r\n    if (!this.parameterNames){\r\n      this.parameterNames = util.GetParameterNames();\r\n    }\r\n    return this.parameterNames;\r\n  }\r\n\r\n  massPropertyNames;\r\n  get MassPropertyNames(){\r\n    if (!this.massPropertyNames){\r\n      this.massPropertyNames = util.GetMassPropertyNames();\r\n    }\r\n    return this.massPropertyNames;\r\n  }\r\n\r\n  massItemFields\r\n  get MassItemFields(){\r\n    if (!this.massItemFields){\r\n      this.massItemFields = util.GetMassItemFields();\r\n    }\r\n    return this.massItemFields;\r\n  }\r\n\r\n  mifs_ForMassGroup\r\n  get MIFs_ForMassGroup(){\r\n    if (!this.mifs_ForMassGroup){\r\n      this.mifs_ForMassGroup = util.GetMIFs_ForMassGroup();\r\n    }\r\n    return this.mifs_ForMassGroup;\r\n  }\r\n\r\n  massTypes;\r\n  get MassTypes(){\r\n    if (!this.massTypes){\r\n      this.massTypes = util.GetMassTypes();\r\n    }\r\n    return this.massTypes;\r\n  }\r\n\r\n  versionCompareSetting\r\n  get VersionCompareSetting(){\r\n    if (!this.versionCompareSetting){\r\n      this.versionCompareSetting = new VersionCompareSetting();\r\n    }\r\n    return this.versionCompareSetting;\r\n  }\r\n\r\n  workItemExportSetting_Dict\r\n  get WorkItemExportSetting_Dict(){\r\n    if (!this.workItemExportSetting_Dict){\r\n      this.workItemExportSetting_Dict = new WorkItemExportSetting_Dict();\r\n    }\r\n    return this.workItemExportSetting_Dict;\r\n  }\r\n\r\n  massDetailSetting_Dict\r\n  get MassDetailSetting_Dict(){\r\n    if (!this.massDetailSetting_Dict){\r\n      this.massDetailSetting_Dict = util.GetMassDetailSetting_Dict(this);\r\n    }\r\n    return this.massDetailSetting_Dict;\r\n  }\r\n\r\n  DebugPoints = []\r\n\r\n  tracking\r\n  get Tracking(){\r\n    if (!this.tracking){\r\n      this.tracking = new Tracking();\r\n    }\r\n    return this.tracking;\r\n  }\r\n\r\n  IsDebug = false\r\n\r\n  OnSet_CurrentProject_Func_Dict = []\r\n\r\n  UpdatedDate = '02/04/2021'\r\n\r\n  // Kiểm tra có phải lần đầu truy xuất bảng khối lượng\r\n  // sau khi mở trang web hay ko?\r\n  Is_First_Get_MassTable\r\n}","import { message } from 'antd';\r\nimport * as api from '../../../../util/apiUtil'\r\nimport * as util from './WorkpackageUtil'\r\n\r\nexport class Workpackage {\r\n  get Index() {\r\n    return this.Dict.Workpackages.indexOf(this);\r\n  }\r\n\r\n  _id\r\n\r\n  SupId\r\n\r\n  supItem\r\n  get SupItem(){\r\n    if (!this.supItem){\r\n      this.supItem = util.GetSupItem(this);\r\n    }\r\n    return this.supItem;\r\n  }\r\n\r\n  code\r\n  get Code() {\r\n    return this.code;\r\n  }\r\n  set Code(v) {\r\n    this.code = v;\r\n    if (this.OnCodeChanged) {\r\n      this.OnCodeChanged(v);\r\n    }\r\n  }\r\n\r\n  name\r\n  get Name() {\r\n    return this.name;\r\n  }\r\n  set Name(v) {\r\n    this.name = v;\r\n    if (this.OnNameChanged) {\r\n      this.OnNameChanged(v);\r\n    }\r\n  }\r\n\r\n  description\r\n  get Description() {\r\n    return this.description;\r\n  }\r\n  set Description(v) {\r\n    this.description = v;\r\n    if (this.OnDescriptionChanged) {\r\n      this.OnDescriptionChanged(v);\r\n    }\r\n  }\r\n\r\n  fullName\r\n  get FullName() {\r\n    if (!this.fullName) {\r\n      this.fullName = this.GetFullName();\r\n    }\r\n    return this.fullName;\r\n  }\r\n  set FullName(v) {\r\n    this.fullName = v;\r\n    if (this.OnFullNameChanged) {\r\n      this.OnFullNameChanged(v);\r\n    }\r\n  }\r\n\r\n  subItems\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems;\r\n  }\r\n  set SubItems(v){\r\n    this.subItems = v;\r\n  }\r\n\r\n  upperList\r\n  get UpperList(){\r\n    if (!this.upperList){\r\n      this.upperList = util.GetUpperList(this);\r\n    }\r\n    return this.upperList;\r\n  }\r\n  set UpperList(v){\r\n    this.upperList = v;\r\n  }\r\n\r\n  lowerList\r\n  get LowerList(){\r\n    if (!this.lowerList){\r\n      this.lowerList = util.GetLowerList(this);\r\n    }\r\n    return this.lowerList;\r\n  }\r\n  set LowerList(v){\r\n    this.lowerList = v;\r\n  }\r\n\r\n  rank\r\n  get Rank() {\r\n    if (!this.rank){\r\n      this.rank = util.GetRank(this);\r\n    }\r\n    return this.rank;\r\n  }\r\n  set Rank(v){\r\n    this.rank = v;\r\n  }\r\n\r\n  get LowerIds() {\r\n    return this.LowerList.map(x => x._id);\r\n  }\r\n\r\n  GetFullName = () => {\r\n    return `${this.Code} - ${this.Name}`;\r\n  }\r\n\r\n  Delete = () => {\r\n    var { _id } = this;\r\n    var apiData = { _id };\r\n\r\n    var url = \"https://api.bimdev.vn/api/hbwp/delete\";\r\n    api.put(url, apiData).then(response => response.data)\r\n      .then(data => message.success('Delete workpackage successfully'));\r\n\r\n    var dict = this.Dict;\r\n    dict.Workpackages.splice(this.Index, 1);\r\n    if (this.OnDelete) {\r\n      this.OnDelete();\r\n    }\r\n\r\n    dict.IsDataChanged = true;\r\n  }\r\n}","import * as api from '../../../../util/apiUtil'\r\nimport { PMData } from '../../single/model/PMData';\r\nimport { Workpackage } from \"./Workpackage\";\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\nexport const get = (dbItem, dict) => {\r\n  var { _id, name, code, description, supId } = dbItem;\r\n\r\n  var qI = new Workpackage();\r\n  qI._id = _id;\r\n  qI.Name = name;\r\n  qI.Code = code;\r\n  qI.Description = description;\r\n  qI.SupId = supId;\r\n  qI.Dict = dict;\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetSupItem = (q) => {\r\n  var supId = q.SupId;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  var index = list.findIndex(x => x._id === supId);\r\n  return index !== -1 ? list[index] : undefined;\r\n}\r\n\r\nexport const GetSubItems = (q) => {\r\n  var id = q._id;\r\n  var list = pmData().Workpackage_Dict.Workpackages;\r\n  return list.filter(x => x !== q && x.SupId === id);\r\n}\r\n\r\nexport const GetUpperList = (q) => {\r\n  var supItem = q.SupItem;\r\n  if (!supItem){\r\n    return [q];\r\n  }else{\r\n    var list = [...supItem.UpperList];\r\n    list.push(q);\r\n    return list;\r\n  }\r\n}\r\n\r\nexport const GetLowerList = (q) => {\r\n  var list = [q];\r\n  q.SubItems.forEach((x, i) => {\r\n    list.push.apply(list, x.LowerList);\r\n  })\r\n  return list;\r\n}\r\n\r\nexport const GetRank = (q) => {\r\n  var supItem = q.SupItem;\r\n  return supItem ? supItem.Rank +1 : 0;\r\n}\r\n\r\nexport const getAll = (dict, handle) => {\r\n  var url = \"https://api.bimdev.vn/api/hbwp/list\";\r\n  api.get(url).then(response => response.data)\r\n    .then(data => {\r\n      var wps = data.map(x => get(x, dict))\r\n      if (handle) {\r\n        handle(wps);\r\n      }\r\n    });\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as workpackageUtil from './WorkpackageUtil'\r\nimport * as util from './Workpackage_DictVMUtil'\r\n\r\nexport class Workpackage_DictVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      workpackageVMs: observable,\r\n    })\r\n  }\r\n\r\n  OnGetItemsDone_Funcs = []\r\n\r\n  set GetItemsDone (v){\r\n    this.OnGetItemsDone_Funcs.forEach(x => x());\r\n  }\r\n\r\n  Workpackage_Dict\r\n\r\n  get M2VM() {\r\n    return this.Workpackage_Dict.M2VM;\r\n  }\r\n  set M2VM(v) {\r\n    this.Workpackage_Dict.M2VM = v;\r\n  }\r\n\r\n  workpackageVMs = undefined\r\n  get WorkpackageVMs() {\r\n    if (!this.workpackageVMs){\r\n      this.workpackageVMs = util.GetWorkpackageVMs(this);\r\n    }\r\n    return this.workpackageVMs;\r\n  }\r\n\r\n  currentWorkpackageVM\r\n  set CurrentWorkpackageVM(v) {\r\n    this.Workpackage_Dict = v;\r\n    this.Workpackage_Dict.CurrentWorkpackage = v.Workpackage;\r\n\r\n    this.WorkpackageInputVM.WorkpackageVM = v;\r\n  }\r\n\r\n  workpackageInputMV\r\n  get WorkpackageInputVM() {\r\n    if (!this.workpackageInputVM){\r\n      this.workpackageInputVM = util.GetWorkpackageInputVM(this);\r\n    }\r\n    return this.workpackageInputVM;\r\n  }\r\n\r\n  Add = (itemView) => {\r\n    this.WorkpackageVMs.push(itemView);\r\n    if (this.OnAdd){\r\n      this.OnAdd(itemView);\r\n    }\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport { Workpackage_DictVM } from \"./Workpackage_DictVM\";\r\nimport CheckboxView from \"../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../select/SelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass Workpackage_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Workpackage_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n    var wp = data.CurrentWorkpackageVM = wps[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var wps = data.WorkpackageVMs;\r\n\r\n    var elems = wps ? wps.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var inputVM = data.WorkpackageInputVM;\r\n    var commandVM = inputVM.CommandVM;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Công tác</b>\r\n        </Divider>\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search công tác\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={inputVM.CodeVM} />\r\n          <InputView store={inputVM.NameVM} />\r\n          <InputView store={inputVM.DescriptionVM} />\r\n          <SelectView store={inputVM.SupItemSelectVM} />\r\n          <div>\r\n            <CheckboxView store={inputVM.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={inputVM.AddDatabase}>{commandVM.Content}</Button>\r\n            {inputVM.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Workpackage_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { EntFilterVM } from \"./EntFilterVM\";\r\nimport SelectView from \"../../../select/SelectView\";\r\nimport { MultiSelectVM } from \"../../../select/MultiSelectVM\";\r\nimport MultiSelectView from \"../../../select/MultiSelectView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass EntFilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EntFilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.ItemVMs;\r\n    var wp = data.CurrentItemVM = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <SelectView store={data.ValueTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <SelectView store={data.StringFilterTypeSelectVM} />\r\n        </div>\r\n        <div>\r\n          <MultiSelectView store={data.ValuesSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EntFilterView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataVM from \"./ElementFilterSettingDataVM\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var { IsHaveFamilyFilter } = data;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập lọc Category\r\n        </Divider>\r\n        <EntFilterView store={data.CategoryFilterVM} />\r\n\r\n        <Divider orientation=\"left\" plain>\r\n          {/* Thiết lập lọc Family */}\r\n          <CheckboxView store={data.IsHaveFamilyFilterVM}/>\r\n        </Divider>\r\n        {IsHaveFamilyFilter? <EntFilterView store={data.FamilyFilterVM} /> : \"\"}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { ElementFilterSetting_DictVM } from \"./ElementFilterSetting_DictVM\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport ElementFilterSettingDataView from \"./ElementFilterSettingDataView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass ElementFilterSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new ElementFilterSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  test = () => {\r\n    console.log(\"test button\");\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    \r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Bộ lọc đối tượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search bộ lọc\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{marginTop:20}}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <ElementFilterSettingDataView store={input.DataVM}/>\r\n\r\n          <CheckboxView store={input.IsNewVM} />\r\n          <Button style={{margin:10}}\r\n            onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n          {input.DeleteView}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(ElementFilterSetting_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../../input/InputView\";\r\nimport EntFilterView from \"../../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../../checkbox/CheckboxView\";\r\nimport MES_ValueSettingVM from \"./MES_ValueSettingVM\";\r\nimport SelectView from \"../../../../../select/SelectView\";\r\nimport * as floatItemVMUtil from \"../../../../../float/FloatItemVMUtil\";\r\nimport FloatItemView from \"../../../../../float/FloatItemView\";\r\nimport { CloseCircleFilled } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MES_ValueSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MES_ValueSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var floatItemStore = floatItemVMUtil.get('top right')\r\n    floatItemStore.wrapper = <Button size='small' type='primary' \r\n      onClick={data.Delete}>x</Button>\r\n\r\n    return (\r\n      <>\r\n        <div style={{ padding: '10px 35px 10px 10px', margin: '8px auto', border: 'solid 0.5px', borderRadius: '10px', position:'relative' }}>\r\n          <FloatItemView store={floatItemStore} />\r\n          <SelectView store={data.RetrieveTypeSelectVM} />\r\n          <SelectView store={data.MassTypeSelectVM} />\r\n          <EntFilterView store={data.ValueFilterVM} />\r\n          <SelectView store={data.WorkpackageSelectVM} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MES_ValueSettingView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleFilled } from \"@ant-design/icons\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport EntFilterView from \"../../filter/EntFilterView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassExportSettingDataVM from \"./MassExportSettingDataVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MES_ValueSettingView from \"./exportSetting/MES_ValueSettingView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var valueSettingElems = data.ValueSettingVMs.map((x, i) => {\r\n      return <MES_ValueSettingView key={i} store={x} />\r\n    })\r\n\r\n    return (\r\n      <>\r\n        <SelectView store={data.ElementFilterSelectVM} />\r\n        <Divider orientation=\"left\" plain>\r\n          Thiết lập giá trị\r\n          <Button type='primary' size='small' onClick={data.AddNewValueSettingVM}\r\n            style={{marginLeft:15}}>+</Button>\r\n        </Divider>\r\n        {valueSettingElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSettingDataView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport { MassExportSetting_DictVM } from \"./MassExportSetting_DictVM\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport MassExportSettingDataView from \"./MassExportSettingDataView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    var items = data.Items;\r\n    var wp = data.CurrentItem = items[v];\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var items = data.Items;\r\n    var elems = items ? items.map((item, index) => {\r\n      var searchName = item.SearchName;\r\n      return <Option key={index} value={index}>{searchName}</Option>\r\n    }) : \"\";\r\n\r\n    var input = data.Input;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất khối lượng</b>\r\n        </Divider>\r\n\r\n        <Select\r\n          showSearch\r\n          style={{ width: '100%' }}\r\n          placeholder=\"search thiết lập\"\r\n          optionFilterProp=\"children\"\r\n          onChange={this.onValueChange}\r\n          value={null}\r\n          filterOption={(input, option) =>\r\n            option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n          }\r\n        >\r\n          {elems}\r\n        </Select>\r\n\r\n        <div style={{ marginTop: 20 }}>\r\n          <InputView store={input.NameVM} />\r\n          <InputView store={input.DescriptionVM} />\r\n\r\n          <MassExportSettingDataView store={input.DataVM} />\r\n\r\n          <div>\r\n            <CheckboxView store={input.IsNewVM} />\r\n            <Button style={{ margin: 10 }}\r\n              onClick={input.AddDatabase}>{input.CommandVM.Content}</Button>\r\n            {input.DeleteView}\r\n          </div>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassExportSetting_DictView)","import { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport MassCell_Value from \"./MassCell_Value\";\r\n\r\nclass MassCell_ValueView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassCell_Value();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    if (data.Dict.Row.Title === 'DẦM 6, 7'){\r\n      debugger\r\n      var value = data.Value;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {data.Value}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassCell_ValueView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Popover, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassCell from \"./MassCell\";\r\nimport './MassTable.css'\r\nimport Icon, { InfoCircleOutlined } from '@ant-design/icons';\r\nimport MassCell_ValueView from \"./value/MassCell_ValueView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassCellView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassCell();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* Đối tượng ẩn để cập nhập màu sắc Cell */}\r\n        <span className='d-none'>\r\n          {data.ContentVM.Content}\r\n        </span>\r\n\r\n        <td style={data.TDStyle}>\r\n          <div className='masscell__div'>\r\n            <div className='masscell__value'>\r\n              {data.IsHaveWarning ?\r\n                <Popover trigger='hover'\r\n                  content={<div>\r\n                    {data.TLS_LevelGroup_Descriptions ?\r\n                      data.TLS_LevelGroup_Descriptions.map(x => {\r\n                        return <span key={x}>{x}</span>\r\n                      })\r\n                      : ''}\r\n                  </div>}>\r\n                  <InfoCircleOutlined className='masscell__warningicon' />\r\n                </Popover>\r\n                : ''}\r\n              <a style={data.AStyle}\r\n                onClick={data.ShowDetail}>\r\n                {data.ContentVM.Content}\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </td>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassCellView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button } from \"antd\";\r\nimport { EditableTextVM } from \"./EditableTextVM\";\r\nimport './Text.css'\r\n\r\nclass EditableTextView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new EditableTextVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.Render()}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(EditableTextView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select, Space } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MultiSelectView from \"../../../../select/MultiSelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRow from \"./MassRow\";\r\nimport MassCellView from \"./MassCellView\";\r\nimport { DownCircleOutlined, EnterOutlined, InfoCircleOutlined, UpCircleOutlined } from '@ant-design/icons';\r\nimport EditableTextView from \"../../../../text/EditableTextView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassRowView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassRow();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var table = data.Dict;\r\n    var columns = table.Columns;\r\n\r\n    var subElems = data.IsShowSub ? data.SubItems.map((x, i) => {\r\n      return <MassRowView store={x} key={x.id} />\r\n    }) : ''\r\n\r\n    var toggleButton = data.IsHaveSub ?\r\n      <Button size='small' style={{ marginRight: 5, minWidth: 25 }} type='primary'\r\n        onClick={data.ToggleSub}>\r\n        <TextView store={data.ToggleButtonContentVM} />\r\n      </Button>\r\n      : <div style={{ padding: '0 15.5px' }} />;\r\n\r\n    return (\r\n      <>\r\n        <tr>\r\n          <th scope=\"row\" >\r\n            <div className='massrow__title__wrapper'\r\n              style={data.Style}>\r\n              {toggleButton}\r\n              <span>\r\n                <EditableTextView store={data.Editable_TitleVM} />\r\n              </span>\r\n\r\n              {data.IsHave_Addition_Wrapper ?\r\n                <div className='massrow__addition__wrapper'>\r\n                  {data.AdditionInfomation_Element}\r\n                  {data.RawValue_Element}\r\n                </div>\r\n                : ''}\r\n\r\n              {data.HoverToolElement}\r\n              {data.ModalElement}\r\n            </div>\r\n          </th>\r\n          {columns.map((y, j) => {\r\n            var cell = table.GetCell(y, data, false);\r\n            return cell ? <MassCellView key={cell.id} store={cell} /> : ''\r\n          })}\r\n        </tr>\r\n        {subElems}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassRowView)","import { Component } from \"react\";\r\nimport { observer } from 'mobx-react';\r\nimport { CSVLink } from \"react-csv\";\r\nimport { CSVExport } from \"./CSVExport\";\r\n\r\nclass CSVExportView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new CSVExport();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  Test = (e) => {\r\n    debugger\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <CSVLink data={data.Data} filename={data.FileName}\r\n          headers={data.Headers}\r\n          onClick={this.Test}>\r\n          {data.Title}\r\n        </CSVLink>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(CSVExportView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport InputView from \"../../../../input/InputView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport MassTable from \"./MassTable\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport MassRowView from \"./MassRowView\";\r\nimport './MassTable.css'\r\nimport CSVExportView from \"../../../../export/csv/CSVExportView\";\r\nimport { DownloadOutlined, SaveFilled } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass MassTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    var columns = data.Columns;\r\n    var rows = data.MainRows;\r\n\r\n    var thElems = columns ? columns.map((x, i) => {\r\n      return <th scope=\"col\" key={x.id} className='text-center masscell_th'>{x.Name}</th>\r\n    }) : '';\r\n\r\n    var tbodyElems = rows ? rows.map((x, i) => {\r\n      return <MassRowView key={x.id} store={x} />\r\n    }) : '';\r\n\r\n\r\n    return (\r\n      <>\r\n        {data.IsValidTable ?\r\n          <>\r\n            <div className=\"masstable__title__wrapper\">\r\n              <h4 className=\"masstable__title\">\r\n                BẢNG TỔNG HỢP KHỐI LƯỢNG\r\n              </h4>\r\n              <div>\r\n                <Button type='primary' size='small' style={{ marginLeft: 15 }}\r\n                  disabled={data.IsOnSaveMassGroup}\r\n                  onClick={data.SaveMassGroup}>\r\n                  <SaveFilled />\r\n                </Button>\r\n                <Button type='primary' size='small' onClick={data.Export}\r\n                  className='masstable__export'>\r\n                  <DownloadOutlined />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {data.IsOnSaveMassGroup ?\r\n              <div className='mass__groupname__wrapper'>\r\n                <div className='mass__groupname__wrapper_dec'>\r\n                  <div className='mass__groupname__input'>\r\n                    {data.MassGroupInput_Element}\r\n                  </div>\r\n\r\n                  <div className='mass__groupname__button_wrapper'>\r\n                    <Button type='primary' size='small'\r\n                      className={data.MassGroupInput_Toggle_Classname}\r\n                      onClick={data.Toggle_MassGroupInput_State}>\r\n                      {data.MassGroupInput_Toggle_Content}\r\n                    </Button>\r\n                    <Button type='primary' size='small'\r\n                      onClick={data.MassGroupInputOK}>ok</Button>\r\n                    <Button type='default' size='small'\r\n                      onClick={data.MassGroupInputCancel}>cancel</Button>\r\n\r\n                    {data.Override_MassGroup_ModalElement}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              : ''}\r\n\r\n            < table className=\"table table-bordered table-sm masstable\">\r\n              <thead className=\"thead-light\">\r\n                <tr>\r\n                  <th scope=\"col\" className='masstitle__th'>\r\n                    <Button onClick={data.AddMainRow} type='primary' size='small'\r\n                      style={{ backgroundColor: '#52c41a', border: 'none' }}>+</Button>\r\n                  </th>\r\n                  {thElems}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {tbodyElems}\r\n              </tbody>\r\n            </table>\r\n          </> : ''\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassTableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport MassResultCompVM from \"./MassResultCompVM\";\r\nimport MultiSelectView from '../../../../select/MultiSelectView'\r\nimport MassTableView from \"../table/MassTableView\";\r\nimport CheckboxView from \"../../../../checkbox/CheckboxView\";\r\nimport SelectView from \"../../../../select/SelectView\";\r\nimport TextView from \"../../../../text/TextView\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport NewInputView from \"../../../../input/NewInputView\";\r\nimport { TextVM } from \"../../../../text/TextVM\";\r\nimport InputView from \"../../../../input/InputView\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass MassResultCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = pmDataVM().MassResultCompVM\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {data.IsShowProjectSelect ?\r\n          <MultiSelectView store={data.ProjectSelectVM} /> : ''}\r\n\r\n        {data.CanHavePhase ?\r\n          <>\r\n            <CheckboxView store={data.IsShowPhaseSelectVM} />\r\n            {data.IsHavePhase ?\r\n              <MultiSelectView store={data.PhaseSelectVM} /> : ''}\r\n          </>\r\n          : ''\r\n        }\r\n\r\n        <div style={{ marginTop: 8 }} >\r\n          <SelectView store={data.MassGroupSettingSelectVM} />\r\n        </div>\r\n\r\n        <Button style={{ marginTop: 8 }} onClick={data.GetMassData}\r\n          size='middle' type='primary'>GET DATA</Button>\r\n        <div style={{ marginTop: 15 }}>\r\n          {data.IsDataPending ?\r\n            <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n              <div>\r\n                <Spin />\r\n                <TextView store={data.LoadingSpinTipVM} />\r\n              </div>\r\n            </div> : <MassTableView store={data.MassItem_Dict.MassTable} />}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(MassResultCompView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Select } from \"antd\";\r\nimport TableVM from \"./TableVM\";\r\nimport * as rs from './RenderState'\r\nimport './Table.css'\r\nimport { LeftCircleOutlined, RightCircleOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass TableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TableVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onValueChange = (v) => {\r\n    var data = this.state;\r\n    data.SelectedIndex = v;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var columns = data.Columns;\r\n\r\n    var rows = data.Rows;\r\n    var tableElem = '';\r\n    if (columns && rows) {\r\n      var theadElem = <thead className=\"thead-light\">\r\n        <tr>\r\n          {columns.map(x => {\r\n            return <th scope=\"col\" key={x.Key}>\r\n              <div className='column__title__wrapper'\r\n                onMouseEnter={x.Show_MoveCommand}\r\n                onMouseLeave={x.Collapse_MoveCommand}>\r\n\r\n                {x.CanShow_MoveCommand ?\r\n                  <div className='column__title__left'>\r\n                    {x.IsShow_MoveCommand ?\r\n                      <Button type='primary' size='small'\r\n                        className='column__title__move__button'\r\n                        onClick={x.MoveLeft}>\r\n                        <LeftCircleOutlined />\r\n                      </Button>\r\n                      : <div className='column__title__move__blank' />}\r\n                  </div>\r\n                  : ''}\r\n\r\n                {x.TitleRender()}\r\n\r\n                {x.CanShow_MoveCommand ?\r\n                  <div className='column__title__right'>\r\n                    {x.IsShow_MoveCommand ?\r\n                      <Button type='primary' size='small'\r\n                        className='column__title__move__button right'\r\n                        onClick={x.MoveRight}>\r\n                        <RightCircleOutlined />\r\n                      </Button>\r\n                      : <div className='column__title__move__blank' />}\r\n                  </div>\r\n                  : ''}\r\n              </div>\r\n            </th>\r\n          })}\r\n        </tr>\r\n      </thead>\r\n\r\n      var tbodyElem = <tbody>\r\n        {rows.map(x => {\r\n          return <tr key={x.Key}>\r\n            {x.Cells.map(y => {\r\n              return <td key={y.Key}>{y.Render()}</td>\r\n            })}\r\n          </tr>\r\n        })}\r\n      </tbody>\r\n\r\n      tableElem = <table className=\"table table-sm\">\r\n        {theadElem}{tbodyElem}\r\n      </table>\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {tableElem}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(TableView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport TableView from \"../../../../table/TableView\";\r\nimport { WorkItemExportSetting_DictVM } from \"./WorkItemExportSetting_DictVM\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass WorkItemExportSetting_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new WorkItemExportSetting_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Divider orientation=\"left\" plain>\r\n          <b>Thiết lập xuất hạng mục</b>\r\n        </Divider>\r\n        \r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(WorkItemExportSetting_DictView)","import * as util from './LeftNavUtil'\r\n\r\nexport class LeftNav {\r\n  Title\r\n\r\n  items\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  currentProject\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n    \r\n    this.Items = util.GetItems(this);\r\n  }\r\n}","export class LeftNavItem {\r\n  Title\r\n  Value\r\n}","import { LeftNavItem } from \"./LeftNavItem\"\r\n\r\nexport const get = (title, value) => {\r\n  var qI = new LeftNavItem();\r\n  qI.Title = title;\r\n  qI.Value = value;\r\n  return qI;\r\n}","import { LeftNav } from \"./LeftNav\"\r\nimport * as pvt from '../../project/ProjectViewType'\r\nimport * as itemUtil from './LeftNavItemUtil'\r\n\r\nexport const GetTest = () => {\r\n  var qI = new LeftNav();\r\n\r\n  qI.Title = 'HikariComplex'\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.CurrentProject ?\r\n    [\r\n      itemUtil.get('MASS', pvt.mass),\r\n      itemUtil.get('TYPICAL LEVEL', pvt.typicallevel),\r\n      itemUtil.get('PHASE', pvt.phase),\r\n      itemUtil.get('INPUT DATA', pvt.inputdata)\r\n    ]                                    \r\n      : \r\n    [\r\n      itemUtil.get('MASS', pvt.mass),\r\n      itemUtil.get('MEP SETTING', pvt.mepsetting),\r\n      itemUtil.get('DOCUMENT', pvt.document),\r\n    ]\r\n}","import { LeftNavVM } from \"./LeftNavVM\"\r\nimport * as modelUtil from './LeftNavUtil'\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nexport const get = (q) => {\r\n  var qI = new LeftNavVM();\r\n\r\n  qI.ModelItem = q;\r\n  genUtil.Add(\r\n    pmDataVM().OnSet_CurrentProject_Func_Dict,\r\n    () => qI.CurrentProject = pmDataVM().CurrentProject,\r\n    false);\r\n\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(modelUtil.GetTest());\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  return q.ModelItem.Items;\r\n}\r\n\r\nexport const GetPreTitle = (q) => {\r\n  return q.CurrentProject ? 'DỰ ÁN'\r\n    : 'CÁC DỰ ÁN';\r\n}\r\n\r\nexport const GetTitle = (q) => {\r\n  return q.CurrentProject ? q.CurrentProject.Name \r\n    : '';\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { pmData } from '../../mass/item/MassItemUtil';\r\nimport * as pvt from '../../project/ProjectViewType'\r\nimport * as util from './LeftNavVMUtil'\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance\r\n\r\nexport class LeftNavVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectViewType : observable,\r\n      items : observable,\r\n      title : observable,\r\n      preTitle : observable\r\n    })\r\n  }\r\n\r\n  preTitle = undefined\r\n  get PreTitle (){\r\n    if (!this.preTitle){\r\n      this.preTitle = util.GetPreTitle(this);\r\n    }\r\n    return this.preTitle;\r\n  } set PreTitle(v){\r\n    this.preTitle = v;\r\n  }\r\n\r\n  title = undefined\r\n  get Title (){\r\n    if (!this.title){\r\n      this.title = util.GetTitle(this);\r\n    }\r\n    return this.title;\r\n  } set Title(v){\r\n    this.title = v;\r\n  }\r\n\r\n  items = undefined\r\n  get Items (){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  } set Items(v){\r\n    this.items = v;\r\n  }\r\n\r\n  currentProject\r\n  get CurrentProject(){\r\n    return this.currentProject;\r\n  } set CurrentProject(v){\r\n    this.currentProject = v;\r\n\r\n    this.ModelItem.CurrentProject = v?.ModelItem;\r\n    this.Items = util.GetItems(this);\r\n    this.PreTitle = util.GetPreTitle(this);\r\n    this.Title = util.GetTitle(this);\r\n  }\r\n\r\n  projectViewType = undefined\r\n  get ProjectViewType(){\r\n    if (!this.projectViewType){\r\n      this.projectViewType = pmDataVM().ProjectViewType;\r\n    }\r\n    return this.projectViewType\r\n  } set ProjectViewType(v){\r\n    this.projectViewType = pmDataVM().ProjectViewType = v;\r\n  }\r\n\r\n  GetItemClass = (item) => {\r\n    return `leftnav__item ${item.Value === this.ProjectViewType ? 'active' : ''}`;\r\n  }\r\n\r\n  SetView = (item) => {\r\n    this.ProjectViewType = item.Value;\r\n  }\r\n\r\n  get UpdatedDate(){\r\n    return pmData().UpdatedDate;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { } from '@ant-design/icons';\r\nimport './LeftNav.css'\r\nimport { LeftNavVM } from './LeftNavVM';\r\nimport * as navUtil from './LeftNavVMUtil'\r\n\r\nclass LeftNavView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = navUtil.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <nav className='leftnav'>\r\n          {/* Wrapper */}\r\n          <div className='leftnav__wrapper'>\r\n            {/* Body */}\r\n            <div className='leftnav__body'>\r\n\r\n              {/* Title */}\r\n              <span className='leftnav__title'>\r\n                <span className='leftnav__title__prefix'>\r\n                  {data.PreTitle}\r\n                </span>\r\n                <span className='leftnav__title__name'>\r\n                  {data.Title}\r\n                </span>\r\n              </span>\r\n\r\n              {/* Items */}\r\n              <div className='leftnav__items'>\r\n                {data.Items.map(x => {\r\n                  return <a key={x.Value} onClick={() => data.SetView(x)}\r\n                    className={data.GetItemClass(x)}>\r\n                    {x.Title}\r\n                  </a>\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Footer */}\r\n            <div className='leftnav__footer'>\r\n              <span>© Copyright</span>\r\n              <span>{`Updated Date: ${data.UpdatedDate}`}</span>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LeftNavView);\r\n","import * as mif from '../item/MassItemField'\r\nimport * as tableUtil from '../../../../table/TableVMUtil'\r\nimport * as colUtil from '../../../../table/TableColumnUtil'\r\nimport * as cit from '../../../../table/TableColumn_InputType'\r\nimport TableVM from '../../../../table/TableVM'\r\nimport { MassDetailTable } from './MassDetailTable'\r\n\r\n// Instance\r\nexport const get = (dict) => {\r\n  var qI = new MassDetailTable();\r\n  \r\n  qI.Dict = dict;\r\n  var obj = qI.Table;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetInitialColumnNames = (q) => {\r\n  return q.SettingData.Columns;\r\n}\r\n\r\nexport const GetColumns = (q) => {\r\n  return q.InitialColumnNames.map(x => colUtil.GetByTitle(x, q.Table));\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  var qI = new TableVM();\r\n\r\n  qI.CanHandleItem = false;\r\n  qI.AllColumnNames = mif.GetForMassGroup();\r\n  qI.Column_InputType = cit.select\r\n  qI.Override_Get_CellValue = (item, cell, row, col) => {\r\n    var field = col.DataIndex[0];\r\n    var val = item.GetValue(field);\r\n    return val;\r\n  }\r\n  qI.Column_Title_SelectWidth = 150\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './MassDetailTableUtil'\r\n\r\nexport class MassDetailTable {\r\n  constructor() {\r\n    // makeObservable(this, {\r\n\r\n    // })\r\n  }\r\n\r\n  data\r\n  get Data(){\r\n    return this.data;\r\n  } set Data(v){\r\n    this.data = v;\r\n    this.Table.DataSource = v;\r\n  }\r\n\r\n  initialColumnNames\r\n  get InitialColumnNames(){\r\n    if (!this.initialColumnNames){\r\n      this.initialColumnNames = util.GetInitialColumnNames(this);\r\n    }\r\n    return this.initialColumnNames;\r\n  } set InitialColumnNames (v){\r\n    this.initialColumnNames = v;\r\n\r\n    this.Columns = util.GetColumns(this);\r\n  }\r\n\r\n  columns\r\n  get Columns(){\r\n    if (!this.columns){\r\n      this.columns = util.GetColumns(this);\r\n    }\r\n    return this.columns\r\n  } set Columns(v){\r\n    this.columns = v;\r\n    this.Table.Columns = v;\r\n  }\r\n\r\n  table\r\n  get Table(){\r\n    if (!this.table){\r\n      var obj = this.table = util.GetTable(this);\r\n      obj.Columns = this.Columns;\r\n    }\r\n    return this.table;\r\n  }\r\n\r\n  AddColumn = () => {\r\n    this.Table.AddColumn();\r\n  }\r\n\r\n  get ColumnNames (){\r\n    return this.Table.Columns.filter(x => !x.IsAction)\r\n      .map(x => x.Title);\r\n  }\r\n\r\n  settingData\r\n  get SettingData(){\r\n    if (!this.settingData){\r\n      this.settingData = this.Dict.Setting?.Data;\r\n    }\r\n    return this.settingData;\r\n  } set SettingData(v){\r\n    this.settingData = v;\r\n\r\n    this.InitialColumnNames = util.GetInitialColumnNames(this);\r\n  }\r\n}","export const input = 'input'\r\nexport const select = 'select'","import { PMData } from \"../../../single/model/PMData\";\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport * as tableUtil from './MassDetailTableUtil'\r\nimport * as mt from '../MassType'\r\nimport * as settingUtil from '../../setting/massDetail/MassDetailSettingUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\n// Property\r\nexport const GetSettingName = (q) => {\r\n  return q.Setting?.Name;\r\n}\r\n\r\nexport const Handle_SettingStorageList = (q) => {\r\n  const set_StorageList = (v) => q.SettingStorageList = v;\r\n  \r\n  var dict = pmData().MassDetailSetting_Dict;\r\n  if (dict.Items){\r\n    set_StorageList(dict.Items);\r\n  } else {\r\n    genUtil.Add(\r\n      dict.OnGetItemsDone_Func_Dict,\r\n      () => set_StorageList(dict.Items)\r\n    )\r\n  }\r\n}\r\n\r\nexport const GetTable = (q) => {\r\n  return tableUtil.get(q);\r\n}\r\n\r\nexport const GetDefaultSetting = (q) => {\r\n  console.log(q.MainMassType);\r\n\r\n  var obj = settingUtil.GetDefault();\r\n  return obj;\r\n}\r\n\r\n// Xảy ra khi cập nhập thành công Items\r\nexport const Handle_Setting = (q) => {\r\n  var massType = q.MainMassType;\r\n\r\n  const handle_SettingFunc = (settings) => {\r\n    var index = settings.findIndex(x => x.Data.MainMassType === massType);\r\n    if (index !== -1){\r\n      var setting = settings[index];\r\n      q.SettingSelectVM_ForInput.InitialItem = setting;\r\n      q.Setting = settingUtil.Clone(setting);\r\n    }\r\n  }\r\n\r\n  var list = q.SettingStorageList;\r\n  if (list){\r\n    handle_SettingFunc(list);\r\n  } else {\r\n    genUtil.Add(\r\n      q.IsGet_SettingStorageList_Done_Func_Dict,\r\n      () => handle_SettingFunc(q.SettingStorageList),\r\n      true\r\n    )\r\n  }\r\n}\r\n\r\nexport const GetMainMassType = (q) => {\r\n  var list = q.Items;\r\n  return list.length === 0 ? mt.concrete : list[0].MassType;\r\n}","import { makeObservable, observable, action, set } from 'mobx';\r\nimport * as selectUtil from '../../../../select/SelectVMUtil';\r\nimport * as massItemUtil from '../item/MassItemUtil'\r\nimport { MassDetailTable } from './MassDetailTable';\r\nimport * as mdi_st from './MassDetailInput_StateType'\r\nimport * as textUtil from '../../../../text/TextVMUtil';\r\nimport SelectView from '../../../../select/SelectView';\r\nimport InputView from '../../../../input/InputView';\r\nimport { message } from 'antd';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as util from './MassDetailVMUtil'\r\nimport Modal from 'antd/lib/modal/Modal';\r\nimport * as settingUtil from '../../setting/massDetail/MassDetailSettingUtil'\r\n\r\nexport const pmData = () => PMData.Instance;\r\n\r\nexport class MassDetailVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      IsOnSaveSetting: observable, \r\n      SettingInput_State : observable,\r\n      Is_Override_Setting_Modal_Open : observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n    massItemUtil.getByViewDetail(v, (items) => {\r\n      this.Items = items;\r\n    })\r\n  }\r\n\r\n  items = undefined\r\n  get Items() {\r\n    return this.items;\r\n  }\r\n  set Items(v) {\r\n    this.items = v;\r\n\r\n    this.MainMassType = util.GetMainMassType(this);\r\n    util.Handle_Setting(this);\r\n    this.DetailTable.Data = v;\r\n  }\r\n\r\n  detailTable\r\n  get DetailTable() {\r\n    if (!this.detailTable) {\r\n      this.detailTable = util.GetTable(this);\r\n    }\r\n    return this.detailTable;\r\n  }\r\n\r\n  // Setting for input\r\n  IsGet_SettingStorageList_Done_Func_Dict = []\r\n\r\n  settingStorageList\r\n  get SettingStorageList() {\r\n    if (!this.settingStorageList) {\r\n      util.Handle_SettingStorageList(this);\r\n    }\r\n    return this.settingStorageList;\r\n  } set SettingStorageList(v) {\r\n    this.settingStorageList = v;\r\n    this.SettingSelectVM_ForInput.Items = v;\r\n\r\n    this.IsGet_SettingStorageList_Done_Func_Dict.forEach(x => x.Value());\r\n  }\r\n\r\n  settingSelectVM_ForInput\r\n  get SettingSelectVM_ForInput() {\r\n    if (!this.settingSelectVM_ForInput) {\r\n      var list = this.SettingStorageList ?\r\n        this.SettingStorageList : [];\r\n\r\n      var obj = this.settingSelectVM_ForInput =\r\n        selectUtil.get(list);\r\n\r\n      obj.TitleRender = (item) => item.Name;\r\n      obj.Placeholder = 'Chọn thiết lập';\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.PreSetting = v;\r\n      };\r\n    }\r\n    return this.settingSelectVM_ForInput;\r\n  }\r\n\r\n  SettingOK = () => {\r\n    var preSetting = this.PreSetting;\r\n    if (!preSetting){\r\n      message.warning(\"Bạn chưa chọn bộ thiết lập\");\r\n      return;\r\n    }\r\n\r\n    this.Setting = settingUtil.Clone(preSetting);\r\n  }\r\n  \r\n  setting\r\n  get Setting(){\r\n    if (!this.setting){\r\n      this.setting = util.GetDefaultSetting(this);\r\n    }\r\n    return this.setting;\r\n  } set Setting(v){\r\n    this.setting = v;\r\n\r\n    this.DetailTable.SettingData = v.Data;\r\n  }\r\n\r\n  // Save Settting\r\n  IsOnSaveSetting = false;\r\n\r\n  SaveSetting = () => {\r\n    // Init MassGroup StorageList\r\n    var refSelectVM = this.SettingSelectVM_ForInput;\r\n    var obj = this.SettingSelectVM;\r\n    obj.Items = [...refSelectVM.Items];\r\n    obj.InitialItem = refSelectVM.SelectedItem;\r\n\r\n    this.SettingInput_State = mdi_st.select\r\n    this.IsOnSaveSetting = true;\r\n  }\r\n\r\n  SettingInput_State = undefined\r\n\r\n  Toggle_SettingInput_State = () => {\r\n    switch (this.SettingInput_State) {\r\n      case mdi_st.select:\r\n        this.SettingInput_State = mdi_st.input\r\n        break;\r\n      case mdi_st.input:\r\n        this.SettingInput_State = mdi_st.select\r\n        break;\r\n    }\r\n  }\r\n\r\n  get SettingInput_Toggle_Classname() {\r\n    switch (this.SettingInput_State) {\r\n      case mdi_st.select:\r\n        return 'btn-warning';\r\n      case mdi_st.input:\r\n        return 'btn-success';\r\n    }\r\n  }\r\n\r\n  get SettingInput_Toggle_Content() {\r\n    switch (this.SettingInput_State) {\r\n      case mdi_st.select:\r\n        return 'sel';\r\n      case mdi_st.input:\r\n        return 'inp';\r\n    }\r\n  }\r\n\r\n  settingName = undefined\r\n  get SettingName() {\r\n    if (!this.settingName) {\r\n      this.settingName = util.GetSettingName(this);\r\n    }\r\n    return this.settingName;\r\n  }\r\n  set SettingName(v) {\r\n    this.settingName = v;\r\n  }\r\n\r\n  settingInputVM\r\n  get SettingInputVM() {\r\n    if (!this.settingInputVM) {\r\n      var obj = this.settingInputVM =\r\n        textUtil.get(this.SettingName, 'Tên thiết lập');\r\n      obj.onSetContent = (v) => this.SettingName = v;\r\n    }\r\n    return this.settingInputVM;\r\n  }\r\n\r\n  settingSelectVM\r\n  get SettingSelectVM() {\r\n    if (!this.settingSelectVM) {\r\n      var obj = this.settingSelectVM = selectUtil.get([], undefined);\r\n      obj.Placeholder = 'Chọn thiết lập';\r\n      obj.OnSelectedItemChanged = (v) => {\r\n        this.SettingName = v?.Name\r\n      };\r\n    }\r\n    return this.settingSelectVM;\r\n  }\r\n\r\n  get SettingInput_Element() {\r\n    switch (this.SettingInput_State) {\r\n      case mdi_st.select:\r\n        var obj = this.SettingSelectVM;\r\n        var list = obj.Items;\r\n        var index = list.findIndex(x => x.Name === this.SettingName);\r\n        obj.InitialItem = index !== -1 ?\r\n          list[index] : undefined\r\n        return <SelectView store={obj} />\r\n      case mdi_st.input:\r\n        var obj = this.SettingInputVM;\r\n        obj.Content = this.SettingName;\r\n        return <InputView store={obj} />\r\n    }\r\n  }\r\n\r\n  SettingInputOK = () => {\r\n    var name = this.SettingName;\r\n    var input_State = this.SettingInput_State;\r\n\r\n    if (!name || name.length === 0) {\r\n      switch (input_State) {\r\n        case mdi_st.select:\r\n          message.warning('Vui lòng chọn bộ thiết lập!')\r\n          return;\r\n        case mdi_st.input:\r\n          message.warning('Vui lòng nhập tên thiết lập!')\r\n          return;\r\n      }\r\n    }\r\n\r\n    var needValidateForOveride = false;\r\n    var items = pmData().MassDetailSetting_Dict.Items;\r\n    var index = items.findIndex(x => x.Name === name);\r\n\r\n    var setting = this.Setting;\r\n    setting.Name = name;\r\n    \r\n    if (index !== -1) {\r\n      setting._id = items[index]._id;\r\n\r\n      if (input_State === mdi_st.input) {\r\n        needValidateForOveride = true;\r\n      }\r\n    }\r\n\r\n    const handle_UpdateSetting = () => {\r\n      // cập nhập MainMassType và Columns vào setting\r\n      var settingData = setting.Data;\r\n      settingData.MainMassType = this.MainMassType;\r\n      settingData.Columns = this.DetailTable.ColumnNames;\r\n\r\n      setting.SaveDatabase((data, isnew) => {\r\n        var refVM = this.SettingSelectVM_ForInput\r\n        var list = refVM.Items;\r\n        var newItem = settingUtil.GetFromDb(data);\r\n        console.log(newItem);\r\n\r\n        if (isnew) {\r\n          list.push(newItem);\r\n          refVM.InitialItem = newItem;\r\n        } else {\r\n          list[index] = newItem;\r\n          // Refresh lại selected item nếu trùng với đối tượng update\r\n          if (refVM.SelectedIndex === index) {\r\n            refVM.InitialItem = newItem;\r\n          }\r\n        }\r\n\r\n        this.IsOnSaveSetting = false\r\n        message.success(`${isnew ? 'add' : 'edit'} setting successfully`);\r\n      })\r\n    }\r\n\r\n    if (!needValidateForOveride) {\r\n      handle_UpdateSetting();\r\n    } else {\r\n      this.Override_Setting_Modal_OKFunc =\r\n        () => handle_UpdateSetting();\r\n\r\n      this.Is_Override_Setting_Modal_Open = true;\r\n    }\r\n  }\r\n\r\n  Is_Override_Setting_Modal_Open = false\r\n\r\n  get Override_Setting_ModalElement() {\r\n    var title = 'Cảnh báo'\r\n    var content = 'Thiết lập đã có sẵn, bạn có muốn ghi đè không?'\r\n\r\n    const modalCancel = () =>\r\n      this.Is_Override_Setting_Modal_Open = false\r\n\r\n    const modalOK = () => {\r\n      this.Is_Override_Setting_Modal_Open = false\r\n      this.Override_Setting_Modal_OKFunc();\r\n    }\r\n\r\n    return <Modal title={title}\r\n      visible={this.Is_Override_Setting_Modal_Open}\r\n      onOk={modalOK} onCancel={modalCancel}>\r\n      {content}\r\n    </Modal>\r\n  }\r\n\r\n  SettingInputCancel = () => {\r\n    this.IsOnSaveSetting = false;\r\n    this.SettingInputVM.Content = util.GetSettingName(this);\r\n  }\r\n\r\n  // Setting Data\r\n  MainMassType\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Row } from 'antd';\r\nimport { MassDetailTable } from './MassDetailTable';\r\nimport TableView from '../../../../table/TableView';\r\n\r\nclass MassDetailTableView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailTable();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='massdetail__wrapper'>\r\n          <Button type='primary' size='small'\r\n            className='massdetail__addcolumn'\r\n            onClick={data.AddColumn}>+</Button>\r\n          <TableView store={data.Table} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(MassDetailTableView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { MassDetailVM } from './MassDetailVM';\r\nimport MassDetailTableView from './MassDetailTableView';\r\nimport TableView from '../../../../table/TableView';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport './MassDetail.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\nimport SelectView from '../../../../select/SelectView';\r\n\r\nconst pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass MassDetailView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new MassDetailVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n\r\n    // Set up Main Width\r\n    pmDataVM().Main_Classname = 'massdetail__comp'\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='massdetail__setting__wrapper'>\r\n          <b>Bộ thiết lập:</b>\r\n          <SelectView className='massdetail__setting__select' store={data.SettingSelectVM_ForInput} />\r\n          <Button type='primary' size='small'\r\n            onClick={data.SettingOK}>ok</Button>\r\n        </div>\r\n        <div className=\"massdetail__title__wrapper\">\r\n          <h4 className=\"massdetail__title\">\r\n            BẢNG CHI TIẾT KHỐI LƯỢNG\r\n            </h4>\r\n          <div>\r\n            <Button type='primary' size='small' style={{ marginLeft: 15 }}\r\n              disabled={data.IsOnSaveSetting}\r\n              onClick={data.SaveSetting}>\r\n              <SaveFilled />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {data.IsOnSaveSetting ?\r\n          <div className='massdetail__groupname__wrapper'>\r\n            <div className='massdetail__groupname__wrapper_dec'>\r\n              <div className='massdetail__groupname__input'>\r\n                {data.SettingInput_Element}\r\n              </div>\r\n\r\n              <div className='massdetail__groupname__button_wrapper'>\r\n                <Button type='primary' size='small'\r\n                  className={data.SettingInput_Toggle_Classname}\r\n                  onClick={data.Toggle_SettingInput_State}>\r\n                  {data.SettingInput_Toggle_Content}\r\n                </Button>\r\n                <Button type='primary' size='small'\r\n                  onClick={data.SettingInputOK}>ok</Button>\r\n                <Button type='default' size='small'\r\n                  onClick={data.SettingInputCancel}>cancel</Button>\r\n\r\n                {data.Override_Setting_ModalElement}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          : ''}\r\n\r\n        <MassDetailTableView store={data.DetailTable} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(MassDetailView));\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { LevelGroupVM } from './LevelGroupVM';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './LevelGroup.css'\r\n\r\nclass LevelGroupView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new LevelGroupVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='levelgroup__container'>\r\n          <MultiSelectView store={data.LevelSelectVM} />\r\n          <Button size='small' type='text' \r\n            className='levelgroup__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='levelgroup__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(LevelGroupView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Popover, Switch } from 'antd';\r\nimport { TLS_FilterValueVM } from './TLS_FilterValueVM';\r\nimport NewInputView from '../../../../../input/NewInputView';\r\nimport './TLS_FilterValue.css'\r\n\r\nclass TLS_FilterValueView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterValueVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n\r\n        <div className='tls_filter__value'>\r\n          {/* Input */}\r\n          <Popover\r\n            trigger={data.PopoverState.Content}\r\n            content={\r\n              <Switch unCheckedChildren='inp' checkedChildren='sel'\r\n                checked={data.SwitchChecked_Funcs()} onChange={data.ToggleInputType} />\r\n            }>\r\n            <span>\r\n              {data.InputElement}\r\n            </span>\r\n          </Popover>\r\n          \r\n          {/* Delete */}\r\n          <Button type='primary' size='small' onClick={data.Delete}\r\n            className='tls_filter__value__delete'>x</Button>\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterValueView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { TLS_FilterVM } from './TLS_FilterVM';\r\nimport SelectView from '../../../../../select/SelectView';\r\nimport './TLS_Filter.css'\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport { Button } from 'antd';\r\nimport TLS_FilterValueView from './TLS_FilterValueView';\r\n\r\nclass TLS_FilterView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_FilterVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls_filter__div'>\r\n          {/* Field Select */}\r\n          <SelectView store={data.FieldSelectVM} \r\n            className='tls_filter_fieldselect'/>\r\n\r\n          <div className='tls_filter__valuediv__wrapper'>\r\n            {/* Add Value */}\r\n            <Button type='primary' size='small' onClick={data.AddItem}\r\n              className='tls_filter__valuediv__addbutton'>+</Button>\r\n\r\n            {/* Value List */}\r\n            <div className='tls_filter__valuediv'>\r\n              {data.Items.map(x => {\r\n                return <TLS_FilterValueView key={x.id} store={x} />\r\n              })}\r\n            </div>\r\n          </div>\r\n\r\n          <Button size='small' type='text'\r\n            className='tls_filter__deletebutton'\r\n            onClick={data.Delete}>\r\n            <DeleteFilled className='tls_filter__deleteicon' />\r\n          </Button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_FilterView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport MultiSelectView from '../../../../../select/MultiSelectView';\r\nimport { DeleteFilled } from '@ant-design/icons';\r\nimport './TLS_PageItem.css'\r\nimport { TLS_PageItemVM } from './TLS_PageItemVM';\r\nimport TLS_FilterView from '../filter/TLS_FilterView';\r\nimport LevelGroupView from '../levelGroup/LevelGroupView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TLS_PageItemView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TLS_PageItemVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__pageitem__wrapper'>\r\n          {/* Filters */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Filter */}\r\n              <Button type='primary' size='small' onClick={data.AddFilter}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập bộ lọc</b></span>\r\n            </div>\r\n\r\n            {/* Filter List */}\r\n            {data.Filters.map(x => {\r\n              return <TLS_FilterView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n\r\n          {/* LevelGroup */}\r\n          <div className='typicallevel__list'>\r\n            <div className='typicallevel__list__1'>\r\n              {/* Add Level */}\r\n              <Button type='primary' size='small' onClick={data.AddLevelGroup}\r\n                className='typicallevel__addbutton'>+</Button>\r\n              <span><b>Thiết lập level</b></span>\r\n            </div>\r\n\r\n            {/* Level List */}\r\n            {data.LevelGroups.map(x => {\r\n              return <LevelGroupView key={x.id} store={x} />\r\n            })}\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TLS_PageItemView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row, Tabs } from 'antd';\r\nimport { TypicalLevelSettingDataVM } from './TypicalLevelSettingDataVM';\r\nimport LevelGroupView from './levelGroup/LevelGroupView';\r\nimport './TypicalLevelSettingData.css'\r\nimport './pageItem/TLS_PageItem.css'\r\nimport TLS_FilterView from './filter/TLS_FilterView';\r\nimport TLS_PageItemView from './pageItem/TLS_PageItemView';\r\n\r\nconst { TabPane } = Tabs;\r\n\r\nclass TypicalLevelSettingDataView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingDataVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  onKeyDown = (v) => {\r\n    //console.log(v);\r\n    v.stopPropagation();\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='tls__tabs__wrapper'>\r\n          <div className='tls__tabs__div'>\r\n            {/* Add Tab */}\r\n            {!data.IsHaveAddCommandTab ?\r\n            <Button type='primary' size='small' onClick={data.AddPageItem}\r\n              className='tls__tabs__add__outside'>+</Button>\r\n              : ''}\r\n\r\n            {/* Tabs */}\r\n            <Tabs type='card' className='tls__tabs'\r\n              onChange={data.ChangePageKey}\r\n              activeKey={data.CurrentPageKey}\r\n              onKeyDown={this.onKeyDown}>\r\n              {data.AllTabs.map(x => {\r\n                return <TabPane tab={x.TitleElement} key={x.id}>\r\n                  <TLS_PageItemView store={x} />\r\n                </TabPane>\r\n              })}\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingDataView);\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Row } from 'antd';\r\nimport { TypicalLevelSettingVM } from './TypicalLevelSettingVM';\r\nimport TypicalLevelSettingDataView from './TypicalLevelSettingDataView';\r\nimport NewInputView from '../../../../input/NewInputView';\r\nimport './TypicalLevelSetting.css'\r\nimport { SaveFilled } from '@ant-design/icons';\r\n\r\nclass TypicalLevelSettingView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new TypicalLevelSettingVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        {/* Data */}\r\n        <div className='tls'>\r\n          {/* Save Button */}\r\n          <Button type='primary' size='small' className='tls__save__button'\r\n            onClick={data.Save}>\r\n            <SaveFilled className='tls__save' />\r\n          </Button>\r\n          {/* Main Data */}\r\n          <TypicalLevelSettingDataView store={data.DataVM} />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TypicalLevelSettingView);\r\n","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select } from \"antd\";\r\nimport { PlusCircleOutlined } from '@ant-design/icons';\r\nimport { Phase_DictVM } from \"./Phase_DictVM\";\r\nimport InputView from \"../../../input/InputView\";\r\nimport * as stateType from '../state/StateType'\r\n\r\nconst { Option } = Select;\r\n\r\nclass Phase_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new Phase_DictVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var input = data.Input;\r\n    var state = data.State;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <Button type='primary' size='middle' onClick={data.AddVersion}\r\n            disabled={state === stateType.addversion}>\r\n            <PlusCircleOutlined /> LƯU KẾT QUẢ HIỆN TẠI\r\n          </Button>\r\n\r\n          {state === stateType.addversion ? <div className=\"mt-3\">\r\n            <InputView store={input.NameVM} />\r\n            <InputView store={input.DescriptionVM} />\r\n            <div className=\"mt-2\">\r\n              <Button type='primary' size='small' onClick={data.OK}>OK</Button>\r\n              <Button type='default' size='small' onClick={data.Cancel}>Cancel</Button>\r\n            </div>\r\n          </div> : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(Phase_DictView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Col, Divider, Input, Row, Select } from \"antd\";\r\nimport RebarMass_Dict from \"./RebarMass_Dict\";\r\nimport TableView from \"../../../../table/TableView\";\r\n\r\nconst { Option } = Select;\r\n\r\nclass RebarMass_DictView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new RebarMass_Dict();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <TableView store={data.TableVM}/>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(RebarMass_DictView)","import { makeObservable, observable, action } from 'mobx';\r\nimport { PMDataVM } from '../../../single/form/PMDataVM';\r\nimport { PMData } from '../../../single/model/PMData';\r\nimport * as projectUtil from '../ProjectUtil'\r\nimport * as projectVMUtil from '../ProjectVMUtil'\r\nimport * as util from './ProjectCompVMUtil'\r\nimport * as pvt from '../ProjectViewType'\r\nimport MassResultCompView from '../../mass/result/MassResultCompView';\r\nimport TypicalLevelSettingView from '../../setting/typicallevel/TypicalLevelSettingView';\r\nimport Phase_DictView from '../../phase/Phase_DictView';\r\nimport RebarMass_DictView from '../../mass/rebar/RebarMass_DictView';\r\n\r\nexport const pmDataVM = () => {\r\n  return PMDataVM.Instance;\r\n}\r\n\r\nexport const pmData = () => {\r\n  return PMData.Instance;\r\n}\r\n\r\n\r\nexport default class ProjectCompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      projectVM: observable,\r\n      projectViewType: observable\r\n    })\r\n  }\r\n\r\n  _id\r\n  get id() {\r\n    return this._id;\r\n  }\r\n  set id(v) {\r\n    this._id = v;\r\n    projectUtil.getById(v, (item) => {\r\n      this.ProjectVM = projectVMUtil.get(item);\r\n    })\r\n  }\r\n\r\n  projectVM = undefined\r\n  get ProjectVM() {\r\n    return this.projectVM;\r\n  }\r\n  set ProjectVM(v) {\r\n    this.projectVM = v;\r\n\r\n    pmDataVM().CurrentProject = v;\r\n\r\n    var list = [v];\r\n    pmDataVM().Project_DictVM.Items = list;\r\n    pmData().Phase_Dict = v.ModelItem.Phase_Dict;\r\n\r\n    var massResComp = this.MassResultCompVM;\r\n    massResComp.ProjectVMStorageList = list;\r\n    massResComp.ProjectSelectVM.InitialItems = list;\r\n\r\n    var setItemsFuncs = () => massResComp.PhaseVMStorageList = phase_DictVM.Items;\r\n\r\n    var phase_DictVM = v.Phase_DictVM;\r\n    if (phase_DictVM.Items) {\r\n      setItemsFuncs();\r\n    } else {\r\n      phase_DictVM.OnGetItemsDone_Funcs.push(() => {\r\n        setItemsFuncs();\r\n      })\r\n    }\r\n  }\r\n\r\n  massResultCompVM\r\n  get MassResultCompVM() {\r\n    if (!this.massResultCompVM) {\r\n      var obj = this.massResultCompVM = util.GetMassResultCompVM(this);\r\n      pmDataVM().MassResultCompVM = obj;\r\n    }\r\n    return this.massResultCompVM;\r\n  }\r\n\r\n  projectViewType = undefined\r\n  get ProjectViewType() {\r\n    if (!this.projectViewType) {\r\n      this.projectViewType = pmDataVM().ProjectViewType;\r\n    }\r\n    return this.projectViewType;\r\n  } set ProjectViewType(v) {\r\n    this.projectViewType = v;\r\n  }\r\n\r\n  get ViewElement() {\r\n    if (!this.ProjectVM) return undefined;\r\n\r\n    switch (this.ProjectViewType) {\r\n      case pvt.mass:\r\n        return <div className='massresult__comp__wrapper'>\r\n          <MassResultCompView store={this.MassResultCompVM} />\r\n        </div>\r\n      case pvt.typicallevel:\r\n        return <>\r\n          {this.ProjectVM.TypicalLevelSetting_ForEdit ?\r\n            <TypicalLevelSettingView store={this.ProjectVM.TypicalLevelSetting_ForEdit} />\r\n            : ''}\r\n        </>\r\n      case pvt.phase:\r\n        return <div className='phase__comp__wrapper'>\r\n          <Phase_DictView store={this.ProjectVM.Phase_DictVM} />\r\n        </div>\r\n      case pvt.inputdata:\r\n        return <RebarMass_DictView store={this.ProjectVM.RebarMass_Dict} />\r\n    }\r\n  }\r\n}","import { PMDataVM } from '../../../single/form/PMDataVM'\r\nimport MassResultComp from '../../mass/result/MassResultComp'\r\nimport * as massResutlCompVMUtil from '../../mass/result/MassResultCompVMUtil'\r\nimport * as genUtil from '../../../../../util/generalUtil'\r\nimport ProjectCompVM from './ProjectCompVM';\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\n// Instance\r\nexport const get = () => {\r\n  var qI = new ProjectCompVM();\r\n\r\n  genUtil.Add(\r\n    pmDataVM().OnSet_ProjectViewType_Func_Dict,\r\n    () => qI.ProjectViewType = pmDataVM().ProjectViewType,\r\n    false);\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetMassResultCompVM = (q) => {\r\n  var obj = massResutlCompVMUtil.get(new MassResultComp(), false);\r\n  obj.IsShowProjectSelect = false;\r\n  obj.CanHavePhase = true;\r\n  return obj;\r\n}","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport './ProjectComp.css'\r\nimport * as util from './ProjectCompVMUtil'\r\nimport TwoCol_SelectView from '../../../../select/twocol/TwoCol_SelectView';\r\n\r\nclass ProjectCompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.get()\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    var data = this.state;\r\n    const id = this.props.match.params.id;\r\n    data.id = id;\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n    var projectVM = data.ProjectVM;\r\n\r\n    return (\r\n      <>\r\n        {projectVM ? data.ViewElement : ''}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(observer(ProjectCompView));\r\n","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport { Col, Row } from 'antd';\r\nimport './PMData.css'\r\nimport Workpackage_DictView from '../../entity/workpackage/Workpackage_DictView';\r\nimport ElementFilterSetting_DictView from '../../entity/setting/elementFilter/ElementFilterSetting_DictView';\r\nimport MassExportSetting_DictView from '../../entity/setting/massExport/MassExportSetting_DictView';\r\n\r\nimport { PMDataVM } from './PMDataVM';\r\nimport MassResultCompView from '../../entity/mass/result/MassResultCompView';\r\nimport WorkItemExportSetting_DictView from '../../entity/setting/workitemexport/WorkItemExportSetting_DictView';\r\nimport { withRouter } from \"react-router-dom\";\r\n//import { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\r\nimport { Route, HashRouter as Router, Switch } from 'react-router-dom';\r\nimport LeftNavView from '../../entity/nav/left/LeftNavView';\r\nimport TestView from '../../../view/TestView';\r\nimport MassDetailView from '../../entity/mass/detail/MassDetailView';\r\nimport ProjectCompView from '../../entity/project/comp/ProjectCompView';\r\n\r\nclass PMDataView extends Component {\r\n  render() {\r\n    var data = PMDataVM.Instance;\r\n\r\n    return (\r\n      <>\r\n        <div className='projectcomp'>\r\n          <LeftNavView />\r\n          <div className='projectcomp__main__wrapper'>\r\n            <div className={data.Main_Classname}>\r\n\r\n              <Router basename={process.env.PUBLIC_URL}>\r\n                <Switch>\r\n                  <Route exact path=\"/\" component={TestView} />\r\n                  <Route exact path=\"/massdetail/:id\" component={MassDetailView} />\r\n                  <Route exact path=\"/project/:id\" component={ProjectCompView} />\r\n                </Switch>\r\n              </Router>\r\n\r\n            </div>\r\n            <div className='projectcomp__main__bottom' />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(PMDataView);\r\n","export class DO_Comp {\r\n  \r\n}","export class DO_Element {\r\n  SubItems = []\r\n}","export const project = 'project'\r\nexport const element = 'element'\r\nexport const elementinfo = 'element-info'\r\nexport const elementinfo_identify = 'element-info-identify'\r\nexport const elementinfo_locate = 'element-info-locate'\r\nexport const elementinfo_geometry = 'element-info-geometry'\r\nexport const elementinfo_specification = 'element-info-specification'\r\nexport const elementinfo_material = 'element-info-material'","import { DO_Element } from './DO_Element';\r\nimport * as et from './DO_ElementType'\r\n\r\nexport const get = (type, title) => {\r\n  var qI = new DO_Element();\r\n  qI.Title = title ? title : type;\r\n\r\n  switch (type) {\r\n    case et.element:\r\n      qI.SubItems = [\r\n        get('guid'),\r\n        get('projectId'),\r\n        get('exportSetId'),\r\n        get(et.elementinfo, 'info')\r\n      ]\r\n      break;\r\n    case et.project:\r\n      qI.SubItems = []\r\n      break;\r\n    case et.elementinfo:\r\n      qI.SubItems = [\r\n        get(et.elementinfo_identify, 'identify'),\r\n        get(et.elementinfo_locate, 'locate'),\r\n        get(et.elementinfo_geometry, 'geometry'),\r\n        get(et.elementinfo_specification, 'specification'),\r\n        get(et.elementinfo_material, 'material'),\r\n      ]\r\n      break;\r\n    case et.elementinfo_identify:\r\n      qI.SubItems = [\r\n        get('category'),\r\n        get('typename'),\r\n        get('elementName'),\r\n        get('typemark'),\r\n        get('typecomment'),\r\n        get('description'),\r\n        get('model'),\r\n        get('manufacturer'),\r\n        get('keynote'),\r\n        get('assemblycode'),\r\n        get('systemtype'),\r\n        get('systemclassification'),\r\n        get('workItem'),\r\n      ];\r\n      break;\r\n    case et.elementinfo_locate:\r\n      qI.SubItems = [\r\n        get('level'),\r\n        get('baseLevel'),\r\n        get('topLevel'),\r\n        get('block'),\r\n        get('zone'),\r\n      ];\r\n      break;\r\n    default:\r\n      qI.SubItems = [];\r\n      break;\r\n  }\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as textUtil from '../../../text/TextVMUtil';\r\nimport * as util from './DO_ElementVMUtil'\r\n\r\nexport class DO_ElementVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      subItems: observable,\r\n      isOpenSub : observable\r\n    })\r\n  }\r\n\r\n  get Title(){\r\n    return this.ModelItem.Title\r\n  }\r\n\r\n  get IsHaveButton(){\r\n    return this.SubItems.length !== 0;\r\n  }\r\n\r\n  subItems = undefined\r\n  get SubItems(){\r\n    if (!this.subItems){\r\n      this.subItems = util.GetSubItems(this);\r\n    }\r\n    return this.subItems\r\n  }\r\n\r\n  isOpenSub = false\r\n  get IsOpenSub(){\r\n    return this.isOpenSub\r\n  } set IsOpenSub(v){\r\n    this.isOpenSub = v;\r\n  }\r\n\r\n  ToggleSub = () => {\r\n    this.IsOpenSub = !this.IsOpenSub;\r\n    this.ToggleSubContentVM.Content = util.GetToggleSubContent(this)\r\n  }\r\n\r\n  toggleSubContentVM\r\n  get ToggleSubContentVM(){\r\n    if (!this.toggleSubContentVM){\r\n      this.toggleSubContentVM = \r\n        textUtil.get(util.GetToggleSubContent(this))\r\n    }\r\n    return this.toggleSubContentVM;\r\n  }\r\n}","import { DO_ElementVM } from \"./DO_ElementVM\"\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI = new DO_ElementVM();\r\n\r\n  qI.ModelItem = q;\r\n\r\n  return qI;\r\n}\r\n\r\n// Property\r\nexport const GetSubItems = (q) => {\r\n  return q.ModelItem.SubItems.map(x => get(x));\r\n}\r\n\r\nexport const GetToggleSubContent = (q) => {\r\n  return q.IsOpenSub ? '-' : '+';\r\n}","import { DO_CompVM } from \"./DO_CompVM\"\r\nimport * as modelUtil from './DO_CompUtil'\r\nimport * as itemUtil from '../DO_ElementVMUtil'\r\n\r\n// Instance\r\nexport const get = (q) => {\r\n  var qI =new DO_CompVM();\r\n  qI.ModelItem = q;\r\n  return qI;\r\n}\r\n\r\nexport const GetTest = () => {\r\n  return get(modelUtil.GetTest());\r\n}\r\n\r\n// Property\r\nexport const GetItems = (q) => {\r\n  var obj = q.ModelItem.Items.map(x => itemUtil.get(x));\r\n  return obj;\r\n} ","import { DO_Comp } from \"./DO_Comp\"\r\nimport * as itemUtil from '../DO_ElementUtil'\r\nimport * as et from '../DO_ElementType'\r\n\r\nexport const GetTest = () => {\r\n  var qI = new DO_Comp();\r\n  \r\n  qI.Items = [\r\n    itemUtil.get(et.project),\r\n    itemUtil.get(et.element),\r\n  ]\r\n\r\n  return qI;\r\n}","import { makeObservable, observable, action } from 'mobx';\r\nimport * as util from './DO_CompVMUtil'\r\n\r\nexport class DO_CompVM {\r\n  constructor() {\r\n    makeObservable(this, {\r\n      items: observable\r\n    })\r\n  }\r\n  \r\n  items = undefined;\r\n  get Items(){\r\n    if (!this.items){\r\n      this.items = util.GetItems(this);\r\n    }\r\n    return this.items;\r\n  }\r\n}","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport { DO_ElementVM } from \"./DO_ElementVM\";\r\nimport './comp/DO_Comp.css'\r\n\r\nclass DO_ElementView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = new DO_ElementVM();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <span className='doelement'>\r\n          {data.Title}\r\n\r\n          {/* Toggle Sub Button */}\r\n          {data.IsHaveButton ?\r\n            <Button className='doelement__button'\r\n              type='primary' size='small'\r\n              onClick={data.ToggleSub}>\r\n                {data.ToggleSubContentVM.Content}\r\n              </Button>\r\n            : ''}\r\n\r\n          {/* Sub Items */}\r\n          {data.IsOpenSub ?\r\n            <div className='doelement__dict'>\r\n              {data.SubItems.map(x => {\r\n                return <DO_ElementView key={x.Title}\r\n                  store={x} />\r\n              })}\r\n            </div>\r\n            : ''}\r\n        </span>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DO_ElementView)","import { Component } from \"react\";\r\nimport { makeObservable, observable, action } from 'mobx';\r\nimport { observer } from 'mobx-react';\r\nimport { Button, Divider, Input, Select, Spin } from \"antd\";\r\nimport { PMDataVM } from \"../../../single/form/PMDataVM\";\r\nimport { DO_CompVM } from \"./DO_CompVM\";\r\nimport * as util from './DO_CompVMUtil'\r\nimport './DO_Comp.css'\r\nimport DO_ElementView from \"../DO_ElementView\";\r\n\r\nconst { Option } = Select;\r\n\r\nexport const pmDataVM = () => PMDataVM.Instance;\r\n\r\nclass DO_CompView extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var { store } = this.props;\r\n    if (!store) {\r\n      this.state = util.GetTest();\r\n    } else {\r\n      this.state = store;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var data = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className='doelement__dict'>\r\n          {data.Items ?\r\n            data.Items.map(x => {\r\n              return <DO_ElementView key={x.Title}\r\n                store={x} />\r\n            })\r\n            : ''}\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default observer(DO_CompView)","import React, { Component } from 'react';\r\nimport { observer } from 'mobx-react';\r\nimport PMDataView from '../main/single/form/PMDataView';\r\nimport { Col, Row } from 'antd';\r\nimport MassResultCompView from '../main/entity/mass/result/MassResultCompView';\r\nimport { PMDataVM } from '../main/single/form/PMDataVM';\r\nimport * as pvt from '../main/entity/project/ProjectViewType'\r\nimport DO_CompView from '../main/entity/doc/comp/DO_CompView';\r\nimport '../main/entity/project/comp/ProjectComp.css'\r\n\r\nclass TestView extends Component {\r\n  render() {\r\n    var data = PMDataVM.Instance;\r\n\r\n    var elem = ''\r\n    switch (data.ProjectViewType) {\r\n      case pvt.mass:\r\n        elem = <div className='massresult__comp__wrapper'>\r\n          <MassResultCompView store={data.MassResultCompVM} />\r\n        </div>\r\n        break;\r\n      case pvt.mepsetting:\r\n        elem = 'MEP Setting'\r\n        break;\r\n      case pvt.document:\r\n        elem = <DO_CompView />\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {elem}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default observer(TestView);\r\n","import './App.css';\r\nimport \"antd/dist/antd.css\";\r\nimport { Component } from 'react';\r\n\r\nimport TestView from './model/view/TestView';\r\nimport PMDataView from './model/main/single/form/PMDataView';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <PMDataView />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}